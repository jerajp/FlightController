
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800bb50  0800bb50  0001bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e8  0800c1e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1e8  0800c1e8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1e8  0800c1e8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1e8  0800c1e8  0001c1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1ec  0800c1ec  0001c1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  200001e8  0800c3d4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800c3d4  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ed6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce4  00000000  00000000  000350e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  00037dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  000391f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016997  00000000  00000000  0003a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec52  00000000  00000000  00050e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e029  00000000  00000000  0005fac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b8  00000000  00000000  000ddb70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb38 	.word	0x0800bb38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800bb38 	.word	0x0800bb38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2275      	movs	r2, #117	; 0x75
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f004 fe1c 	bl	8005d6c <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b68      	cmp	r3, #104	; 0x68
 8001138:	d101      	bne.n	800113e <MPU6050_check+0x2e>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 800113e:	2300      	movs	r3, #0

}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	226b      	movs	r2, #107	; 0x6b
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f004 fd04 	bl	8005b78 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8001170:	2307      	movs	r3, #7
 8001172:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2219      	movs	r2, #25
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f004 fcf4 	bl	8005b78 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001190:	2308      	movs	r3, #8
 8001192:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221b      	movs	r2, #27
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f004 fce4 	bl	8005b78 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 80011b0:	2310      	movs	r3, #16
 80011b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030f 	add.w	r3, r7, #15
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	221c      	movs	r2, #28
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f004 fcd4 	bl	8005b78 <HAL_I2C_Mem_Write>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2306      	movs	r3, #6
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	223b      	movs	r2, #59	; 0x3b
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f004 fdb7 	bl	8005d6c <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	809a      	strh	r2, [r3, #4]

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2243      	movs	r2, #67	; 0x43
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f004 fd85 	bl	8005d6c <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001262:	7a3b      	ldrb	r3, [r7, #8]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	815a      	strh	r2, [r3, #10]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001310:	4b76      	ldr	r3, [pc, #472]	; (80014ec <main+0x1e4>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a75      	ldr	r2, [pc, #468]	; (80014ec <main+0x1e4>)
 8001316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800131a:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800131c:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <main+0x1e8>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <main+0x1e8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <main+0x1e8>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f003 f933 	bl	8004598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 fc2d 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 fe65 	bl	8002004 <MX_GPIO_Init>
  MX_ADC1_Init();
 800133a:	f000 fc85 	bl	8001c48 <MX_ADC1_Init>
  MX_I2C2_Init();
 800133e:	f000 fcc1 	bl	8001cc4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001342:	f000 fced 	bl	8001d20 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001346:	f000 fd21 	bl	8001d8c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800134a:	f000 fe31 	bl	8001fb0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800134e:	f000 fde3 	bl	8001f18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001352:	4868      	ldr	r0, [pc, #416]	; (80014f4 <main+0x1ec>)
 8001354:	f003 fdb4 	bl	8004ec0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001358:	4866      	ldr	r0, [pc, #408]	; (80014f4 <main+0x1ec>)
 800135a:	f003 fa79 	bl	8004850 <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 800135e:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <main+0x1f0>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=5.0;
 8001364:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <main+0x1f0>)
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <main+0x1f4>)
 8001368:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.001;
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <main+0x1f0>)
 800136c:	4a64      	ldr	r2, [pc, #400]	; (8001500 <main+0x1f8>)
 800136e:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=500.0;
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <main+0x1f0>)
 8001372:	4a64      	ldr	r2, [pc, #400]	; (8001504 <main+0x1fc>)
 8001374:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=5.0;
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <main+0x1f0>)
 8001378:	4a60      	ldr	r2, [pc, #384]	; (80014fc <main+0x1f4>)
 800137a:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.001;
 800137c:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <main+0x1f0>)
 800137e:	4a60      	ldr	r2, [pc, #384]	; (8001500 <main+0x1f8>)
 8001380:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=500.0;
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <main+0x1f0>)
 8001384:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <main+0x1fc>)
 8001386:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=4;
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <main+0x1f0>)
 800138a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800138e:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0;
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <main+0x1f0>)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=0;
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <main+0x1f0>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <main+0x1f0>)
 80013a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <main+0x1f0>)
 80013aa:	2264      	movs	r2, #100	; 0x64
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <main+0x1f0>)
 80013b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 80013b6:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <main+0x1f0>)
 80013b8:	2264      	movs	r2, #100	; 0x64
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 0;
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <main+0x1f0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 0;
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <main+0x1f0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
  FlashDataDefault.maxpitchdegree=20; //degrees
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <main+0x1f0>)
 80013ca:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <main+0x200>)
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
  FlashDataDefault.maxrolldegree=20;  //degrees
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <main+0x1f0>)
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <main+0x200>)
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
  FlashDataDefault.maxyawdegree=180;  //degrees
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <main+0x1f0>)
 80013d6:	4a4d      	ldr	r2, [pc, #308]	; (800150c <main+0x204>)
 80013d8:	649a      	str	r2, [r3, #72]	; 0x48
  FlashDataDefault.minthrottle=80;    //80counts of 1000 to spin rotors
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <main+0x1f0>)
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <main+0x208>)
 80013de:	64da      	str	r2, [r3, #76]	; 0x4c
  FlashDataDefault.maxthrottle=800;   //800counts of 1000 (80%)
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <main+0x1f0>)
 80013e2:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <main+0x20c>)
 80013e4:	651a      	str	r2, [r3, #80]	; 0x50


  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 80013e6:	484c      	ldr	r0, [pc, #304]	; (8001518 <main+0x210>)
 80013e8:	f001 f838 	bl	800245c <CheckFlashData>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d108      	bne.n	8001404 <main+0xfc>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 80013f2:	494a      	ldr	r1, [pc, #296]	; (800151c <main+0x214>)
 80013f4:	4848      	ldr	r0, [pc, #288]	; (8001518 <main+0x210>)
 80013f6:	f001 f83d 	bl	8002474 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 80013fa:	4949      	ldr	r1, [pc, #292]	; (8001520 <main+0x218>)
 80013fc:	4846      	ldr	r0, [pc, #280]	; (8001518 <main+0x210>)
 80013fe:	f001 f839 	bl	8002474 <ReadFlashData>
 8001402:	e00b      	b.n	800141c <main+0x114>

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR, &FlashDataDefault);
 8001404:	493c      	ldr	r1, [pc, #240]	; (80014f8 <main+0x1f0>)
 8001406:	4844      	ldr	r0, [pc, #272]	; (8001518 <main+0x210>)
 8001408:	f000 fe9e 	bl	8002148 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 800140c:	4943      	ldr	r1, [pc, #268]	; (800151c <main+0x214>)
 800140e:	4842      	ldr	r0, [pc, #264]	; (8001518 <main+0x210>)
 8001410:	f001 f830 	bl	8002474 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 8001414:	4942      	ldr	r1, [pc, #264]	; (8001520 <main+0x218>)
 8001416:	4840      	ldr	r0, [pc, #256]	; (8001518 <main+0x210>)
 8001418:	f001 f82c 	bl	8002474 <ReadFlashData>
  }//------------------------------------------------------------------------------------------------------


  HAL_Delay(400);//wait for stable power
 800141c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001420:	f003 f91c 	bl	800465c <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001424:	483f      	ldr	r0, [pc, #252]	; (8001524 <main+0x21c>)
 8001426:	f7ff fe73 	bl	8001110 <MPU6050_check>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <main+0x220>)
 8001430:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 8001432:	483c      	ldr	r0, [pc, #240]	; (8001524 <main+0x21c>)
 8001434:	f7ff fe88 	bl	8001148 <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 8001438:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800143c:	f003 f90e 	bl	800465c <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <main+0x224>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a39      	ldr	r2, [pc, #228]	; (800152c <main+0x224>)
 8001446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144a:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	4837      	ldr	r0, [pc, #220]	; (8001530 <main+0x228>)
 8001454:	f004 fa38 	bl	80058c8 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8001458:	f001 fab4 	bl	80029c4 <nRF24_Check>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <main+0x22c>)
 8001462:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8001464:	f001 fa5c 	bl	8002920 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8001468:	20ff      	movs	r0, #255	; 0xff
 800146a:	f001 fc3d 	bl	8002ce8 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 800146e:	200f      	movs	r0, #15
 8001470:	f001 fb37 	bl	8002ae2 <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8001474:	2020      	movs	r0, #32
 8001476:	f001 fbc8 	bl	8002c0a <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 800147a:	2008      	movs	r0, #8
 800147c:	f001 fb10 	bl	8002aa0 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8001480:	2003      	movs	r0, #3
 8001482:	f001 fb3c 	bl	8002afe <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <main+0x230>)
 8001488:	2001      	movs	r0, #1
 800148a:	f001 fb49 	bl	8002b20 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 800148e:	2208      	movs	r2, #8
 8001490:	2100      	movs	r1, #0
 8001492:	2001      	movs	r0, #1
 8001494:	f001 fbd4 	bl	8002c40 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8001498:	4927      	ldr	r1, [pc, #156]	; (8001538 <main+0x230>)
 800149a:	2006      	movs	r0, #6
 800149c:	f001 fb40 	bl	8002b20 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80014a0:	2004      	movs	r0, #4
 80014a2:	f001 fb97 	bl	8002bd4 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f001 fad9 	bl	8002a5e <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80014ac:	f001 fc66 	bl	8002d7c <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f001 fab5 	bl	8002a20 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014bc:	481c      	ldr	r0, [pc, #112]	; (8001530 <main+0x228>)
 80014be:	f004 fa03 	bl	80058c8 <HAL_GPIO_WritePin>

  //get GYRO offset
  HAL_Delay(2000);//wait to connect battery
 80014c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c6:	f003 f8c9 	bl	800465c <HAL_Delay>
  GyroCalibStatus=1;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <main+0x234>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  SUMGyroX=0;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <main+0x238>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <main+0x23c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <main+0x240>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

  for(i=0;i<1000;i++)
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <main+0x244>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e059      	b.n	800159e <main+0x296>
 80014ea:	bf00      	nop
 80014ec:	e000edf0 	.word	0xe000edf0
 80014f0:	e0001000 	.word	0xe0001000
 80014f4:	20000454 	.word	0x20000454
 80014f8:	20000358 	.word	0x20000358
 80014fc:	40a00000 	.word	0x40a00000
 8001500:	3a83126f 	.word	0x3a83126f
 8001504:	43fa0000 	.word	0x43fa0000
 8001508:	41a00000 	.word	0x41a00000
 800150c:	43340000 	.word	0x43340000
 8001510:	42a00000 	.word	0x42a00000
 8001514:	44480000 	.word	0x44480000
 8001518:	0800fc00 	.word	0x0800fc00
 800151c:	20000524 	.word	0x20000524
 8001520:	200005cc 	.word	0x200005cc
 8001524:	200002e0 	.word	0x200002e0
 8001528:	200004ca 	.word	0x200004ca
 800152c:	40003800 	.word	0x40003800
 8001530:	40010c00 	.word	0x40010c00
 8001534:	200003b8 	.word	0x200003b8
 8001538:	0800bd74 	.word	0x0800bd74
 800153c:	20000210 	.word	0x20000210
 8001540:	20000630 	.word	0x20000630
 8001544:	200004d0 	.word	0x200004d0
 8001548:	20000430 	.word	0x20000430
 800154c:	20000208 	.word	0x20000208
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8001550:	49aa      	ldr	r1, [pc, #680]	; (80017fc <main+0x4f4>)
 8001552:	48ab      	ldr	r0, [pc, #684]	; (8001800 <main+0x4f8>)
 8001554:	f7ff fe72 	bl	800123c <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001558:	4ba8      	ldr	r3, [pc, #672]	; (80017fc <main+0x4f4>)
 800155a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800155e:	461a      	mov	r2, r3
 8001560:	4ba8      	ldr	r3, [pc, #672]	; (8001804 <main+0x4fc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	4aa7      	ldr	r2, [pc, #668]	; (8001804 <main+0x4fc>)
 8001568:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 800156a:	4ba4      	ldr	r3, [pc, #656]	; (80017fc <main+0x4f4>)
 800156c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001570:	461a      	mov	r2, r3
 8001572:	4ba5      	ldr	r3, [pc, #660]	; (8001808 <main+0x500>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4aa3      	ldr	r2, [pc, #652]	; (8001808 <main+0x500>)
 800157a:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 800157c:	4b9f      	ldr	r3, [pc, #636]	; (80017fc <main+0x4f4>)
 800157e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001582:	461a      	mov	r2, r3
 8001584:	4ba1      	ldr	r3, [pc, #644]	; (800180c <main+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4aa0      	ldr	r2, [pc, #640]	; (800180c <main+0x504>)
 800158c:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f003 f864 	bl	800465c <HAL_Delay>
  for(i=0;i<1000;i++)
 8001594:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <main+0x508>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a9d      	ldr	r2, [pc, #628]	; (8001810 <main+0x508>)
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b9c      	ldr	r3, [pc, #624]	; (8001810 <main+0x508>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a6:	d3d3      	bcc.n	8001550 <main+0x248>
  }

  GyroXOff=SUMGyroX/1000;
 80015a8:	4b96      	ldr	r3, [pc, #600]	; (8001804 <main+0x4fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a99      	ldr	r2, [pc, #612]	; (8001814 <main+0x50c>)
 80015ae:	fb82 1203 	smull	r1, r2, r2, r3
 80015b2:	1192      	asrs	r2, r2, #6
 80015b4:	17db      	asrs	r3, r3, #31
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <main+0x510>)
 80015bc:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 80015be:	4b92      	ldr	r3, [pc, #584]	; (8001808 <main+0x500>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a94      	ldr	r2, [pc, #592]	; (8001814 <main+0x50c>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1192      	asrs	r2, r2, #6
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <main+0x514>)
 80015d2:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <main+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a8e      	ldr	r2, [pc, #568]	; (8001814 <main+0x50c>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1192      	asrs	r2, r2, #6
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <main+0x518>)
 80015e8:	801a      	strh	r2, [r3, #0]

  GyroCalibStatus=0;
 80015ea:	4b8e      	ldr	r3, [pc, #568]	; (8001824 <main+0x51c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

  //startup angles Accel to Gyro transfer
  AnglePitchGyro=AnglePitchAccel;
 80015f0:	4b8d      	ldr	r3, [pc, #564]	; (8001828 <main+0x520>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a8d      	ldr	r2, [pc, #564]	; (800182c <main+0x524>)
 80015f6:	6013      	str	r3, [r2, #0]
  AngleRollGyro=AngleRollAccel;
 80015f8:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <main+0x528>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a8d      	ldr	r2, [pc, #564]	; (8001834 <main+0x52c>)
 80015fe:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001600:	2100      	movs	r1, #0
 8001602:	488d      	ldr	r0, [pc, #564]	; (8001838 <main+0x530>)
 8001604:	f005 ff90 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001608:	2104      	movs	r1, #4
 800160a:	488b      	ldr	r0, [pc, #556]	; (8001838 <main+0x530>)
 800160c:	f005 ff8c 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001610:	2108      	movs	r1, #8
 8001612:	4889      	ldr	r0, [pc, #548]	; (8001838 <main+0x530>)
 8001614:	f005 ff88 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001618:	210c      	movs	r1, #12
 800161a:	4887      	ldr	r0, [pc, #540]	; (8001838 <main+0x530>)
 800161c:	f005 ff84 	bl	8007528 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8001620:	4b86      	ldr	r3, [pc, #536]	; (800183c <main+0x534>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001626:	4886      	ldr	r0, [pc, #536]	; (8001840 <main+0x538>)
 8001628:	f005 ff26 	bl	8007478 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f003 f815 	bl	800465c <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8001632:	4b84      	ldr	r3, [pc, #528]	; (8001844 <main+0x53c>)
 8001634:	4a84      	ldr	r2, [pc, #528]	; (8001848 <main+0x540>)
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	6018      	str	r0, [r3, #0]
 800163a:	7912      	ldrb	r2, [r2, #4]
 800163c:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 800163e:	4881      	ldr	r0, [pc, #516]	; (8001844 <main+0x53c>)
 8001640:	f001 f800 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <main+0x534>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4980      	ldr	r1, [pc, #512]	; (800184c <main+0x544>)
 800164c:	487d      	ldr	r0, [pc, #500]	; (8001844 <main+0x53c>)
 800164e:	f007 fb43 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001652:	487c      	ldr	r0, [pc, #496]	; (8001844 <main+0x53c>)
 8001654:	f000 fff6 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <main+0x548>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fee3 	bl	8000428 <__aeabi_f2d>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	461a      	mov	r2, r3
 8001668:	4623      	mov	r3, r4
 800166a:	497a      	ldr	r1, [pc, #488]	; (8001854 <main+0x54c>)
 800166c:	4875      	ldr	r0, [pc, #468]	; (8001844 <main+0x53c>)
 800166e:	f007 fb33 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001672:	4874      	ldr	r0, [pc, #464]	; (8001844 <main+0x53c>)
 8001674:	f000 ffe6 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 8001678:	4b77      	ldr	r3, [pc, #476]	; (8001858 <main+0x550>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fed3 	bl	8000428 <__aeabi_f2d>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	4974      	ldr	r1, [pc, #464]	; (800185c <main+0x554>)
 800168c:	486d      	ldr	r0, [pc, #436]	; (8001844 <main+0x53c>)
 800168e:	f007 fb23 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001692:	486c      	ldr	r0, [pc, #432]	; (8001844 <main+0x53c>)
 8001694:	f000 ffd6 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <main+0x558>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	461a      	mov	r2, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	496e      	ldr	r1, [pc, #440]	; (8001864 <main+0x55c>)
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <main+0x53c>)
 80016ae:	f007 fb13 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80016b2:	4864      	ldr	r0, [pc, #400]	; (8001844 <main+0x53c>)
 80016b4:	f000 ffc6 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 80016b8:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <main+0x560>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe feb3 	bl	8000428 <__aeabi_f2d>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	4968      	ldr	r1, [pc, #416]	; (800186c <main+0x564>)
 80016cc:	485d      	ldr	r0, [pc, #372]	; (8001844 <main+0x53c>)
 80016ce:	f007 fb03 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80016d2:	485c      	ldr	r0, [pc, #368]	; (8001844 <main+0x53c>)
 80016d4:	f000 ffb6 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80016d8:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <main+0x53c>)
 80016da:	4a65      	ldr	r2, [pc, #404]	; (8001870 <main+0x568>)
 80016dc:	8811      	ldrh	r1, [r2, #0]
 80016de:	7892      	ldrb	r2, [r2, #2]
 80016e0:	8019      	strh	r1, [r3, #0]
 80016e2:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 80016e4:	4857      	ldr	r0, [pc, #348]	; (8001844 <main+0x53c>)
 80016e6:	f000 ffad 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 80016ea:	4b62      	ldr	r3, [pc, #392]	; (8001874 <main+0x56c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe9a 	bl	8000428 <__aeabi_f2d>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	495e      	ldr	r1, [pc, #376]	; (8001878 <main+0x570>)
 80016fe:	4851      	ldr	r0, [pc, #324]	; (8001844 <main+0x53c>)
 8001700:	f007 faea 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001704:	484f      	ldr	r0, [pc, #316]	; (8001844 <main+0x53c>)
 8001706:	f000 ff9d 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <main+0x574>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe8a 	bl	8000428 <__aeabi_f2d>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	4958      	ldr	r1, [pc, #352]	; (8001880 <main+0x578>)
 800171e:	4849      	ldr	r0, [pc, #292]	; (8001844 <main+0x53c>)
 8001720:	f007 fada 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001724:	4847      	ldr	r0, [pc, #284]	; (8001844 <main+0x53c>)
 8001726:	f000 ff8d 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <main+0x53c>)
 800172c:	4a50      	ldr	r2, [pc, #320]	; (8001870 <main+0x568>)
 800172e:	8811      	ldrh	r1, [r2, #0]
 8001730:	7892      	ldrb	r2, [r2, #2]
 8001732:	8019      	strh	r1, [r3, #0]
 8001734:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8001736:	4843      	ldr	r0, [pc, #268]	; (8001844 <main+0x53c>)
 8001738:	f000 ff84 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "PWM Mot1=%u \n\r",PWM_Mot1);
 800173c:	4b51      	ldr	r3, [pc, #324]	; (8001884 <main+0x57c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4951      	ldr	r1, [pc, #324]	; (8001888 <main+0x580>)
 8001744:	483f      	ldr	r0, [pc, #252]	; (8001844 <main+0x53c>)
 8001746:	f007 fac7 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 800174a:	483e      	ldr	r0, [pc, #248]	; (8001844 <main+0x53c>)
 800174c:	f000 ff7a 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "PWM Mot2=%u \n\r",PWM_Mot2);
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <main+0x584>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	494e      	ldr	r1, [pc, #312]	; (8001890 <main+0x588>)
 8001758:	483a      	ldr	r0, [pc, #232]	; (8001844 <main+0x53c>)
 800175a:	f007 fabd 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 800175e:	4839      	ldr	r0, [pc, #228]	; (8001844 <main+0x53c>)
 8001760:	f000 ff70 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "PWM Mot3=%u \n\r",PWM_Mot3);
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <main+0x58c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	494b      	ldr	r1, [pc, #300]	; (8001898 <main+0x590>)
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <main+0x53c>)
 800176e:	f007 fab3 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001772:	4834      	ldr	r0, [pc, #208]	; (8001844 <main+0x53c>)
 8001774:	f000 ff66 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "PWM Mot4=%u \n\r",PWM_Mot4);
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <main+0x594>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4948      	ldr	r1, [pc, #288]	; (80018a0 <main+0x598>)
 8001780:	4830      	ldr	r0, [pc, #192]	; (8001844 <main+0x53c>)
 8001782:	f007 faa9 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001786:	482f      	ldr	r0, [pc, #188]	; (8001844 <main+0x53c>)
 8001788:	f000 ff5c 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "\n\rINPUTS \n\r" );
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <main+0x53c>)
 800178e:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <main+0x59c>)
 8001790:	4614      	mov	r4, r2
 8001792:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001794:	6020      	str	r0, [r4, #0]
 8001796:	6061      	str	r1, [r4, #4]
 8001798:	60a2      	str	r2, [r4, #8]
	  WriteString(UartTXbuff0);
 800179a:	482a      	ldr	r0, [pc, #168]	; (8001844 <main+0x53c>)
 800179c:	f000 ff52 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d \n\r",togg1,togg2,togg3,togg4,togg5,togg6);
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <main+0x5a0>)
 80017a2:	681c      	ldr	r4, [r3, #0]
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <main+0x5a4>)
 80017a6:	681d      	ldr	r5, [r3, #0]
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <main+0x5a8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a41      	ldr	r2, [pc, #260]	; (80018b4 <main+0x5ac>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4941      	ldr	r1, [pc, #260]	; (80018b8 <main+0x5b0>)
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	4841      	ldr	r0, [pc, #260]	; (80018bc <main+0x5b4>)
 80017b6:	6800      	ldr	r0, [r0, #0]
 80017b8:	9003      	str	r0, [sp, #12]
 80017ba:	9102      	str	r1, [sp, #8]
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	462b      	mov	r3, r5
 80017c2:	4622      	mov	r2, r4
 80017c4:	493e      	ldr	r1, [pc, #248]	; (80018c0 <main+0x5b8>)
 80017c6:	481f      	ldr	r0, [pc, #124]	; (8001844 <main+0x53c>)
 80017c8:	f007 fa86 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <main+0x53c>)
 80017ce:	f000 ff39 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d \n\r",potenc1,potenc2);
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <main+0x5bc>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <main+0x5c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	493c      	ldr	r1, [pc, #240]	; (80018cc <main+0x5c4>)
 80017dc:	4819      	ldr	r0, [pc, #100]	; (8001844 <main+0x53c>)
 80017de:	f007 fa7b 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <main+0x53c>)
 80017e4:	f000 ff2e 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <main+0x5c8>)
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <main+0x5cc>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <main+0x5d0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a39      	ldr	r2, [pc, #228]	; (80018dc <main+0x5d4>)
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	e072      	b.n	80018e0 <main+0x5d8>
 80017fa:	bf00      	nop
 80017fc:	200005bc 	.word	0x200005bc
 8001800:	200002e0 	.word	0x200002e0
 8001804:	20000630 	.word	0x20000630
 8001808:	200004d0 	.word	0x200004d0
 800180c:	20000430 	.word	0x20000430
 8001810:	20000208 	.word	0x20000208
 8001814:	10624dd3 	.word	0x10624dd3
 8001818:	20000354 	.word	0x20000354
 800181c:	2000042c 	.word	0x2000042c
 8001820:	2000027e 	.word	0x2000027e
 8001824:	20000210 	.word	0x20000210
 8001828:	20000740 	.word	0x20000740
 800182c:	2000073c 	.word	0x2000073c
 8001830:	2000072c 	.word	0x2000072c
 8001834:	20000640 	.word	0x20000640
 8001838:	200004d4 	.word	0x200004d4
 800183c:	2000020c 	.word	0x2000020c
 8001840:	2000057c 	.word	0x2000057c
 8001844:	200003c4 	.word	0x200003c4
 8001848:	0800bb50 	.word	0x0800bb50
 800184c:	0800bb58 	.word	0x0800bb58
 8001850:	2000022c 	.word	0x2000022c
 8001854:	0800bb6c 	.word	0x0800bb6c
 8001858:	20000230 	.word	0x20000230
 800185c:	0800bb80 	.word	0x0800bb80
 8001860:	20000234 	.word	0x20000234
 8001864:	0800bb90 	.word	0x0800bb90
 8001868:	20000238 	.word	0x20000238
 800186c:	0800bba0 	.word	0x0800bba0
 8001870:	0800bbb0 	.word	0x0800bbb0
 8001874:	20000730 	.word	0x20000730
 8001878:	0800bbb4 	.word	0x0800bbb4
 800187c:	20000768 	.word	0x20000768
 8001880:	0800bbc4 	.word	0x0800bbc4
 8001884:	2000074c 	.word	0x2000074c
 8001888:	0800bbd4 	.word	0x0800bbd4
 800188c:	20000648 	.word	0x20000648
 8001890:	0800bbe4 	.word	0x0800bbe4
 8001894:	20000644 	.word	0x20000644
 8001898:	0800bbf4 	.word	0x0800bbf4
 800189c:	20000734 	.word	0x20000734
 80018a0:	0800bc04 	.word	0x0800bc04
 80018a4:	0800bc14 	.word	0x0800bc14
 80018a8:	200004cc 	.word	0x200004cc
 80018ac:	2000062c 	.word	0x2000062c
 80018b0:	200002d8 	.word	0x200002d8
 80018b4:	2000051c 	.word	0x2000051c
 80018b8:	20000428 	.word	0x20000428
 80018bc:	200002dc 	.word	0x200002dc
 80018c0:	0800bc20 	.word	0x0800bc20
 80018c4:	20000578 	.word	0x20000578
 80018c8:	20000628 	.word	0x20000628
 80018cc:	0800bc3c 	.word	0x0800bc3c
 80018d0:	20000514 	.word	0x20000514
 80018d4:	20000484 	.word	0x20000484
 80018d8:	20000624 	.word	0x20000624
 80018dc:	20000278 	.word	0x20000278
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4603      	mov	r3, r0
 80018e6:	460a      	mov	r2, r1
 80018e8:	499d      	ldr	r1, [pc, #628]	; (8001b60 <main+0x858>)
 80018ea:	489e      	ldr	r0, [pc, #632]	; (8001b64 <main+0x85c>)
 80018ec:	f007 f9f4 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80018f0:	489c      	ldr	r0, [pc, #624]	; (8001b64 <main+0x85c>)
 80018f2:	f000 fea7 	bl	8002644 <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 80018f6:	4a9b      	ldr	r2, [pc, #620]	; (8001b64 <main+0x85c>)
 80018f8:	4b9b      	ldr	r3, [pc, #620]	; (8001b68 <main+0x860>)
 80018fa:	4615      	mov	r5, r2
 80018fc:	461c      	mov	r4, r3
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	6028      	str	r0, [r5, #0]
 8001902:	6069      	str	r1, [r5, #4]
 8001904:	60aa      	str	r2, [r5, #8]
 8001906:	60eb      	str	r3, [r5, #12]
 8001908:	cc03      	ldmia	r4!, {r0, r1}
 800190a:	6128      	str	r0, [r5, #16]
 800190c:	6169      	str	r1, [r5, #20]
 800190e:	8823      	ldrh	r3, [r4, #0]
 8001910:	78a2      	ldrb	r2, [r4, #2]
 8001912:	832b      	strh	r3, [r5, #24]
 8001914:	4613      	mov	r3, r2
 8001916:	76ab      	strb	r3, [r5, #26]
	  WriteString(UartTXbuff0);
 8001918:	4892      	ldr	r0, [pc, #584]	; (8001b64 <main+0x85c>)
 800191a:	f000 fe93 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 800191e:	4b93      	ldr	r3, [pc, #588]	; (8001b6c <main+0x864>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fd80 	bl	8000428 <__aeabi_f2d>
 8001928:	4680      	mov	r8, r0
 800192a:	4689      	mov	r9, r1
 800192c:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <main+0x864>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fd79 	bl	8000428 <__aeabi_f2d>
 8001936:	4604      	mov	r4, r0
 8001938:	460d      	mov	r5, r1
 800193a:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <main+0x864>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fd72 	bl	8000428 <__aeabi_f2d>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800194c:	e9cd 4500 	strd	r4, r5, [sp]
 8001950:	4642      	mov	r2, r8
 8001952:	464b      	mov	r3, r9
 8001954:	4986      	ldr	r1, [pc, #536]	; (8001b70 <main+0x868>)
 8001956:	4883      	ldr	r0, [pc, #524]	; (8001b64 <main+0x85c>)
 8001958:	f007 f9be 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 800195c:	4881      	ldr	r0, [pc, #516]	; (8001b64 <main+0x85c>)
 800195e:	f000 fe71 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <main+0x864>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd5e 	bl	8000428 <__aeabi_f2d>
 800196c:	4680      	mov	r8, r0
 800196e:	4689      	mov	r9, r1
 8001970:	4b7e      	ldr	r3, [pc, #504]	; (8001b6c <main+0x864>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fd57 	bl	8000428 <__aeabi_f2d>
 800197a:	4604      	mov	r4, r0
 800197c:	460d      	mov	r5, r1
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <main+0x864>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd50 	bl	8000428 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001990:	e9cd 4500 	strd	r4, r5, [sp]
 8001994:	4642      	mov	r2, r8
 8001996:	464b      	mov	r3, r9
 8001998:	4976      	ldr	r1, [pc, #472]	; (8001b74 <main+0x86c>)
 800199a:	4872      	ldr	r0, [pc, #456]	; (8001b64 <main+0x85c>)
 800199c:	f007 f99c 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80019a0:	4870      	ldr	r0, [pc, #448]	; (8001b64 <main+0x85c>)
 80019a2:	f000 fe4f 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 80019a6:	4b71      	ldr	r3, [pc, #452]	; (8001b6c <main+0x864>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	4680      	mov	r8, r0
 80019b2:	4689      	mov	r9, r1
 80019b4:	4b6d      	ldr	r3, [pc, #436]	; (8001b6c <main+0x864>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd35 	bl	8000428 <__aeabi_f2d>
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
 80019c2:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <main+0x864>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd2e 	bl	8000428 <__aeabi_f2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019d4:	e9cd 4500 	strd	r4, r5, [sp]
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	4966      	ldr	r1, [pc, #408]	; (8001b78 <main+0x870>)
 80019de:	4861      	ldr	r0, [pc, #388]	; (8001b64 <main+0x85c>)
 80019e0:	f007 f97a 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80019e4:	485f      	ldr	r0, [pc, #380]	; (8001b64 <main+0x85c>)
 80019e6:	f000 fe2d 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <main+0x864>)
 80019ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <main+0x864>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	4962      	ldr	r1, [pc, #392]	; (8001b7c <main+0x874>)
 80019f4:	485b      	ldr	r0, [pc, #364]	; (8001b64 <main+0x85c>)
 80019f6:	f007 f96f 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 80019fa:	485a      	ldr	r0, [pc, #360]	; (8001b64 <main+0x85c>)
 80019fc:	f000 fe22 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 8001a00:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <main+0x864>)
 8001a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <main+0x864>)
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	495d      	ldr	r1, [pc, #372]	; (8001b80 <main+0x878>)
 8001a0a:	4856      	ldr	r0, [pc, #344]	; (8001b64 <main+0x85c>)
 8001a0c:	f007 f964 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001a10:	4854      	ldr	r0, [pc, #336]	; (8001b64 <main+0x85c>)
 8001a12:	f000 fe17 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <main+0x864>)
 8001a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a1a:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <main+0x864>)
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	4959      	ldr	r1, [pc, #356]	; (8001b84 <main+0x87c>)
 8001a20:	4850      	ldr	r0, [pc, #320]	; (8001b64 <main+0x85c>)
 8001a22:	f007 f959 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001a26:	484f      	ldr	r0, [pc, #316]	; (8001b64 <main+0x85c>)
 8001a28:	f000 fe0c 	bl	8002644 <WriteString>


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 8001a2c:	4a4d      	ldr	r2, [pc, #308]	; (8001b64 <main+0x85c>)
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <main+0x880>)
 8001a30:	4615      	mov	r5, r2
 8001a32:	461c      	mov	r4, r3
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	6028      	str	r0, [r5, #0]
 8001a38:	6069      	str	r1, [r5, #4]
 8001a3a:	60aa      	str	r2, [r5, #8]
 8001a3c:	60eb      	str	r3, [r5, #12]
 8001a3e:	cc03      	ldmia	r4!, {r0, r1}
 8001a40:	6128      	str	r0, [r5, #16]
 8001a42:	6169      	str	r1, [r5, #20]
 8001a44:	8823      	ldrh	r3, [r4, #0]
 8001a46:	832b      	strh	r3, [r5, #24]
	  WriteString(UartTXbuff0);
 8001a48:	4846      	ldr	r0, [pc, #280]	; (8001b64 <main+0x85c>)
 8001a4a:	f000 fdfb 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <main+0x884>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fce8 	bl	8000428 <__aeabi_f2d>
 8001a58:	4680      	mov	r8, r0
 8001a5a:	4689      	mov	r9, r1
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <main+0x884>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fce1 	bl	8000428 <__aeabi_f2d>
 8001a66:	4604      	mov	r4, r0
 8001a68:	460d      	mov	r5, r1
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <main+0x884>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcda 	bl	8000428 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a7c:	e9cd 4500 	strd	r4, r5, [sp]
 8001a80:	4642      	mov	r2, r8
 8001a82:	464b      	mov	r3, r9
 8001a84:	493a      	ldr	r1, [pc, #232]	; (8001b70 <main+0x868>)
 8001a86:	4837      	ldr	r0, [pc, #220]	; (8001b64 <main+0x85c>)
 8001a88:	f007 f926 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001a8c:	4835      	ldr	r0, [pc, #212]	; (8001b64 <main+0x85c>)
 8001a8e:	f000 fdd9 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <main+0x884>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcc6 	bl	8000428 <__aeabi_f2d>
 8001a9c:	4680      	mov	r8, r0
 8001a9e:	4689      	mov	r9, r1
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <main+0x884>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fcbf 	bl	8000428 <__aeabi_f2d>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	460d      	mov	r5, r1
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <main+0x884>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcb8 	bl	8000428 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ac0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	492a      	ldr	r1, [pc, #168]	; (8001b74 <main+0x86c>)
 8001aca:	4826      	ldr	r0, [pc, #152]	; (8001b64 <main+0x85c>)
 8001acc:	f007 f904 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001ad0:	4824      	ldr	r0, [pc, #144]	; (8001b64 <main+0x85c>)
 8001ad2:	f000 fdb7 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <main+0x884>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fca4 	bl	8000428 <__aeabi_f2d>
 8001ae0:	4680      	mov	r8, r0
 8001ae2:	4689      	mov	r9, r1
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <main+0x884>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fc9d 	bl	8000428 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <main+0x884>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fc96 	bl	8000428 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b04:	e9cd 4500 	strd	r4, r5, [sp]
 8001b08:	4642      	mov	r2, r8
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	491a      	ldr	r1, [pc, #104]	; (8001b78 <main+0x870>)
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <main+0x85c>)
 8001b10:	f007 f8e2 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <main+0x85c>)
 8001b16:	f000 fd95 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <main+0x884>)
 8001b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <main+0x884>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	4916      	ldr	r1, [pc, #88]	; (8001b7c <main+0x874>)
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <main+0x85c>)
 8001b26:	f007 f8d7 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <main+0x85c>)
 8001b2c:	f000 fd8a 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <main+0x884>)
 8001b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <main+0x884>)
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	4911      	ldr	r1, [pc, #68]	; (8001b80 <main+0x878>)
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <main+0x85c>)
 8001b3c:	f007 f8cc 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <main+0x85c>)
 8001b42:	f000 fd7f 	bl	8002644 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <main+0x884>)
 8001b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <main+0x884>)
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	490d      	ldr	r1, [pc, #52]	; (8001b84 <main+0x87c>)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <main+0x85c>)
 8001b52:	f007 f8c1 	bl	8008cd8 <siprintf>
	  WriteString(UartTXbuff0);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <main+0x85c>)
 8001b58:	f000 fd74 	bl	8002644 <WriteString>
	  HAL_Delay(50);
 8001b5c:	e566      	b.n	800162c <main+0x324>
 8001b5e:	bf00      	nop
 8001b60:	0800bc4c 	.word	0x0800bc4c
 8001b64:	200003c4 	.word	0x200003c4
 8001b68:	0800bc64 	.word	0x0800bc64
 8001b6c:	20000524 	.word	0x20000524
 8001b70:	0800bc80 	.word	0x0800bc80
 8001b74:	0800bca0 	.word	0x0800bca0
 8001b78:	0800bcc0 	.word	0x0800bcc0
 8001b7c:	0800bcdc 	.word	0x0800bcdc
 8001b80:	0800bcf8 	.word	0x0800bcf8
 8001b84:	0800bd10 	.word	0x0800bd10
 8001b88:	0800bd28 	.word	0x0800bd28
 8001b8c:	200005cc 	.word	0x200005cc

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	2228      	movs	r2, #40	; 0x28
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f006 fc42 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bdc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fe2c 	bl	8006844 <HAL_RCC_OscConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bf2:	f000 fd5b 	bl	80026ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 f896 	bl	8006d44 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c1e:	f000 fd45 	bl	80026ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c22:	2302      	movs	r3, #2
 8001c24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fa24 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c3a:	f000 fd37 	bl	80026ac <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3750      	adds	r7, #80	; 0x50
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <MX_ADC1_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001c86:	f002 fd0b 	bl	80046a0 <HAL_ADC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c90:	f000 fd0c 	bl	80026ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_ADC1_Init+0x74>)
 8001ca6:	f002 ff87 	bl	8004bb8 <HAL_ADC_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cb0:	f000 fcfc 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000454 	.word	0x20000454
 8001cc0:	40012400 	.word	0x40012400

08001cc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cca:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <MX_I2C2_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_I2C2_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_I2C2_Init+0x50>)
 8001d02:	f003 fe11 	bl	8005928 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f000 fcce 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200002e0 	.word	0x200002e0
 8001d18:	40005800 	.word	0x40005800
 8001d1c:	00061a80 	.word	0x00061a80

08001d20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_SPI2_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI2_Init+0x64>)
 8001d72:	f005 faf5 	bl	8007360 <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f000 fc96 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000280 	.word	0x20000280
 8001d88:	40003800 	.word	0x40003800

08001d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b096      	sub	sp, #88	; 0x58
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f006 fb2f 	bl	8008428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001dcc:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <MX_TIM1_Init+0x188>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001dd2:	2247      	movs	r2, #71	; 0x47
 8001dd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001dde:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001de2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df6:	4846      	ldr	r0, [pc, #280]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001df8:	f005 fb13 	bl	8007422 <HAL_TIM_Base_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e02:	f000 fc53 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e10:	4619      	mov	r1, r3
 8001e12:	483f      	ldr	r0, [pc, #252]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001e14:	f005 fd88 	bl	8007928 <HAL_TIM_ConfigClockSource>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e1e:	f000 fc45 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e22:	483b      	ldr	r0, [pc, #236]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001e24:	f005 fb4b 	bl	80074be <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e2e:	f000 fc3d 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4833      	ldr	r0, [pc, #204]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001e42:	f006 f8f9 	bl	8008038 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e4c:	f000 fc2e 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e50:	2360      	movs	r3, #96	; 0x60
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e62:	2304      	movs	r3, #4
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	2200      	movs	r2, #0
 8001e74:	4619      	mov	r1, r3
 8001e76:	4826      	ldr	r0, [pc, #152]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001e78:	f005 fc90 	bl	800779c <HAL_TIM_PWM_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001e82:	f000 fc13 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4820      	ldr	r0, [pc, #128]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001e90:	f005 fc84 	bl	800779c <HAL_TIM_PWM_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001e9a:	f000 fc07 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481a      	ldr	r0, [pc, #104]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001ea8:	f005 fc78 	bl	800779c <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001eb2:	f000 fbfb 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4814      	ldr	r0, [pc, #80]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001ec0:	f005 fc6c 	bl	800779c <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001eca:	f000 fbef 	bl	80026ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001ef2:	f006 f8e5 	bl	80080c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001efc:	f000 fbd6 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_TIM1_Init+0x184>)
 8001f02:	f001 f8c5 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001f06:	bf00      	nop
 8001f08:	3758      	adds	r7, #88	; 0x58
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200004d4 	.word	0x200004d4
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f3e:	2247      	movs	r2, #71	; 0x47
 8001f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5c:	4813      	ldr	r0, [pc, #76]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f5e:	f005 fa60 	bl	8007422 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f68:	f000 fba0 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f7a:	f005 fcd5 	bl	8007928 <HAL_TIM_ConfigClockSource>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f84:	f000 fb92 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM2_Init+0x94>)
 8001f96:	f006 f84f 	bl	8008038 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f000 fb84 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000057c 	.word	0x2000057c

08001fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_USART1_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f006 f8cd 	bl	8008186 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f000 fb5b 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000488 	.word	0x20000488
 8002000:	40013800 	.word	0x40013800

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <MX_GPIO_Init+0x134>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a46      	ldr	r2, [pc, #280]	; (8002138 <MX_GPIO_Init+0x134>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <MX_GPIO_Init+0x134>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <MX_GPIO_Init+0x134>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a40      	ldr	r2, [pc, #256]	; (8002138 <MX_GPIO_Init+0x134>)
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <MX_GPIO_Init+0x134>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <MX_GPIO_Init+0x134>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <MX_GPIO_Init+0x134>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <MX_GPIO_Init+0x134>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <MX_GPIO_Init+0x134>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <MX_GPIO_Init+0x134>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <MX_GPIO_Init+0x134>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207e:	482f      	ldr	r0, [pc, #188]	; (800213c <MX_GPIO_Init+0x138>)
 8002080:	f003 fc22 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800208a:	482d      	ldr	r0, [pc, #180]	; (8002140 <MX_GPIO_Init+0x13c>)
 800208c:	f003 fc1c 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	482b      	ldr	r0, [pc, #172]	; (8002144 <MX_GPIO_Init+0x140>)
 8002098:	f003 fc16 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800209c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	4821      	ldr	r0, [pc, #132]	; (800213c <MX_GPIO_Init+0x138>)
 80020b6:	f003 faad 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	481b      	ldr	r0, [pc, #108]	; (8002140 <MX_GPIO_Init+0x13c>)
 80020d4:	f003 fa9e 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	4815      	ldr	r0, [pc, #84]	; (8002144 <MX_GPIO_Init+0x140>)
 80020ee:	f003 fa91 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 80020f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2302      	movs	r3, #2
 8002102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <MX_GPIO_Init+0x140>)
 800210c:	f003 fa82 	bl	8005614 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8002110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_GPIO_Init+0x13c>)
 800212a:	f003 fa73 	bl	8005614 <HAL_GPIO_Init>

}
 800212e:	bf00      	nop
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40011000 	.word	0x40011000
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40010800 	.word	0x40010800

08002148 <WriteFlashData>:

/* USER CODE BEGIN 4 */
//Write Data into Flash starting from given address
void WriteFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 800215a:	2301      	movs	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 800215e:	f003 f8c9 	bl	80052f4 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8002162:	f107 020c 	add.w	r2, r7, #12
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f9a9 	bl	80054c4 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f04f 0400 	mov.w	r4, #0
 800217a:	461a      	mov	r2, r3
 800217c:	4623      	mov	r3, r4
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	2002      	movs	r0, #2
 8002182:	f003 f847 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, (uint32_t) ( p->pid_p_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1d1d      	adds	r5, r3, #4
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	49b2      	ldr	r1, [pc, #712]	; (8002458 <WriteFlashData+0x310>)
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fdd7 	bl	8000d44 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff99 	bl	80010d0 <__aeabi_f2uiz>
 800219e:	4603      	mov	r3, r0
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	2002      	movs	r0, #2
 80021ac:	f003 f832 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, (uint32_t) ( p->pid_i_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0508 	add.w	r5, r3, #8
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	49a7      	ldr	r1, [pc, #668]	; (8002458 <WriteFlashData+0x310>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fdc1 	bl	8000d44 <__aeabi_fmul>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe ff83 	bl	80010d0 <__aeabi_f2uiz>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f04f 0400 	mov.w	r4, #0
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	2002      	movs	r0, #2
 80021d8:	f003 f81c 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12,(uint32_t) ( p->pid_d_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f103 050c 	add.w	r5, r3, #12
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	499c      	ldr	r1, [pc, #624]	; (8002458 <WriteFlashData+0x310>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fdab 	bl	8000d44 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff6d 	bl	80010d0 <__aeabi_f2uiz>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	4629      	mov	r1, r5
 8002202:	2002      	movs	r0, #2
 8002204:	f003 f806 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16,(uint32_t) ( p->pid_p_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0510 	add.w	r5, r3, #16
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	4991      	ldr	r1, [pc, #580]	; (8002458 <WriteFlashData+0x310>)
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd95 	bl	8000d44 <__aeabi_fmul>
 800221a:	4603      	mov	r3, r0
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe ff57 	bl	80010d0 <__aeabi_f2uiz>
 8002222:	4603      	mov	r3, r0
 8002224:	f04f 0400 	mov.w	r4, #0
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	4629      	mov	r1, r5
 800222e:	2002      	movs	r0, #2
 8002230:	f002 fff0 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20,(uint32_t) ( p->pid_i_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0514 	add.w	r5, r3, #20
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4986      	ldr	r1, [pc, #536]	; (8002458 <WriteFlashData+0x310>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fd7f 	bl	8000d44 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe ff41 	bl	80010d0 <__aeabi_f2uiz>
 800224e:	4603      	mov	r3, r0
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	4629      	mov	r1, r5
 800225a:	2002      	movs	r0, #2
 800225c:	f002 ffda 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24,(uint32_t) ( p->pid_d_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0518 	add.w	r5, r3, #24
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	497b      	ldr	r1, [pc, #492]	; (8002458 <WriteFlashData+0x310>)
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fd69 	bl	8000d44 <__aeabi_fmul>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff2b 	bl	80010d0 <__aeabi_f2uiz>
 800227a:	4603      	mov	r3, r0
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	461a      	mov	r2, r3
 8002282:	4623      	mov	r3, r4
 8002284:	4629      	mov	r1, r5
 8002286:	2002      	movs	r0, #2
 8002288:	f002 ffc4 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28,(uint32_t) ( p->pid_p_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 051c 	add.w	r5, r3, #28
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4970      	ldr	r1, [pc, #448]	; (8002458 <WriteFlashData+0x310>)
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fd53 	bl	8000d44 <__aeabi_fmul>
 800229e:	4603      	mov	r3, r0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe ff15 	bl	80010d0 <__aeabi_f2uiz>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	2002      	movs	r0, #2
 80022b4:	f002 ffae 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32,(uint32_t) ( p->pid_i_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0520 	add.w	r5, r3, #32
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4965      	ldr	r1, [pc, #404]	; (8002458 <WriteFlashData+0x310>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fd3d 	bl	8000d44 <__aeabi_fmul>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe feff 	bl	80010d0 <__aeabi_f2uiz>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	2002      	movs	r0, #2
 80022e0:	f002 ff98 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36,(uint32_t) ( p->pid_d_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	495a      	ldr	r1, [pc, #360]	; (8002458 <WriteFlashData+0x310>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fd27 	bl	8000d44 <__aeabi_fmul>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fee9 	bl	80010d0 <__aeabi_f2uiz>
 80022fe:	4603      	mov	r3, r0
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	4629      	mov	r1, r5
 800230a:	2002      	movs	r0, #2
 800230c:	f002 ff82 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800231e:	461a      	mov	r2, r3
 8002320:	4623      	mov	r3, r4
 8002322:	2002      	movs	r0, #2
 8002324:	f002 ff76 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002336:	461a      	mov	r2, r3
 8002338:	4623      	mov	r3, r4
 800233a:	2002      	movs	r0, #2
 800233c:	f002 ff6a 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800234e:	461a      	mov	r2, r3
 8002350:	4623      	mov	r3, r4
 8002352:	2002      	movs	r0, #2
 8002354:	f002 ff5e 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002366:	461a      	mov	r2, r3
 8002368:	4623      	mov	r3, r4
 800236a:	2002      	movs	r0, #2
 800236c:	f002 ff52 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800237e:	461a      	mov	r2, r3
 8002380:	4623      	mov	r3, r4
 8002382:	2002      	movs	r0, #2
 8002384:	f002 ff46 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002396:	461a      	mov	r2, r3
 8002398:	4623      	mov	r3, r4
 800239a:	2002      	movs	r0, #2
 800239c:	f002 ff3a 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+64,(uint32_t)(p->maxpitchdegree) );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0540 	add.w	r5, r3, #64	; 0x40
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fe90 	bl	80010d0 <__aeabi_f2uiz>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	461a      	mov	r2, r3
 80023b8:	4623      	mov	r3, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	2002      	movs	r0, #2
 80023be:	f002 ff29 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+68,(uint32_t)(p->maxrolldegree) );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0544 	add.w	r5, r3, #68	; 0x44
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fe7f 	bl	80010d0 <__aeabi_f2uiz>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f04f 0400 	mov.w	r4, #0
 80023d8:	461a      	mov	r2, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	4629      	mov	r1, r5
 80023de:	2002      	movs	r0, #2
 80023e0:	f002 ff18 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+72,(uint32_t)(p->maxyawdegree) );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0548 	add.w	r5, r3, #72	; 0x48
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe6e 	bl	80010d0 <__aeabi_f2uiz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f04f 0400 	mov.w	r4, #0
 80023fa:	461a      	mov	r2, r3
 80023fc:	4623      	mov	r3, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	2002      	movs	r0, #2
 8002402:	f002 ff07 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+76,(uint32_t)(p->minthrottle) );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fe5d 	bl	80010d0 <__aeabi_f2uiz>
 8002416:	4603      	mov	r3, r0
 8002418:	f04f 0400 	mov.w	r4, #0
 800241c:	461a      	mov	r2, r3
 800241e:	4623      	mov	r3, r4
 8002420:	4629      	mov	r1, r5
 8002422:	2002      	movs	r0, #2
 8002424:	f002 fef6 	bl	8005214 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+80,(uint32_t)(p->maxthrottle) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fe4c 	bl	80010d0 <__aeabi_f2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	f04f 0400 	mov.w	r4, #0
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	4629      	mov	r1, r5
 8002444:	2002      	movs	r0, #2
 8002446:	f002 fee5 	bl	8005214 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 800244a:	f002 ff79 	bl	8005340 <HAL_FLASH_Lock>
}
 800244e:	bf00      	nop
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bdb0      	pop	{r4, r5, r7, pc}
 8002456:	bf00      	nop
 8002458:	47c35000 	.word	0x47c35000

0800245c <CheckFlashData>:
}


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+4) )) )/FLASHCONSTANTMULTIPLIER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc01 	bl	8000c94 <__aeabi_ui2f>
 8002492:	4603      	mov	r3, r0
 8002494:	496a      	ldr	r1, [pc, #424]	; (8002640 <ReadFlashData+0x1cc>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fd08 	bl	8000eac <__aeabi_fdiv>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	605a      	str	r2, [r3, #4]
	p->pid_i_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+8) )) )/FLASHCONSTANTMULTIPLIER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3308      	adds	r3, #8
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fbf2 	bl	8000c94 <__aeabi_ui2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4963      	ldr	r1, [pc, #396]	; (8002640 <ReadFlashData+0x1cc>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fcf9 	bl	8000eac <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	609a      	str	r2, [r3, #8]
	p->pid_d_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+12) )) )/FLASHCONSTANTMULTIPLIER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	330c      	adds	r3, #12
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fbe3 	bl	8000c94 <__aeabi_ui2f>
 80024ce:	4603      	mov	r3, r0
 80024d0:	495b      	ldr	r1, [pc, #364]	; (8002640 <ReadFlashData+0x1cc>)
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fcea 	bl	8000eac <__aeabi_fdiv>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	60da      	str	r2, [r3, #12]
	p->pid_p_gain_roll=(float)( (*(( uint32_t *) (StartAddr+16) ))  )/FLASHCONSTANTMULTIPLIER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3310      	adds	r3, #16
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fbd4 	bl	8000c94 <__aeabi_ui2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4954      	ldr	r1, [pc, #336]	; (8002640 <ReadFlashData+0x1cc>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fcdb 	bl	8000eac <__aeabi_fdiv>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	611a      	str	r2, [r3, #16]
	p->pid_i_gain_roll=(float)( (*(( uint32_t *) (StartAddr+20) )) )/FLASHCONSTANTMULTIPLIER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3314      	adds	r3, #20
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fbc5 	bl	8000c94 <__aeabi_ui2f>
 800250a:	4603      	mov	r3, r0
 800250c:	494c      	ldr	r1, [pc, #304]	; (8002640 <ReadFlashData+0x1cc>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fccc 	bl	8000eac <__aeabi_fdiv>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	615a      	str	r2, [r3, #20]
	p->pid_d_gain_roll=(float)( (*(( uint32_t *) (StartAddr+24) )) )/FLASHCONSTANTMULTIPLIER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3318      	adds	r3, #24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fbb6 	bl	8000c94 <__aeabi_ui2f>
 8002528:	4603      	mov	r3, r0
 800252a:	4945      	ldr	r1, [pc, #276]	; (8002640 <ReadFlashData+0x1cc>)
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fcbd 	bl	8000eac <__aeabi_fdiv>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	619a      	str	r2, [r3, #24]
	p->pid_p_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+28) )) )/FLASHCONSTANTMULTIPLIER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	331c      	adds	r3, #28
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fba7 	bl	8000c94 <__aeabi_ui2f>
 8002546:	4603      	mov	r3, r0
 8002548:	493d      	ldr	r1, [pc, #244]	; (8002640 <ReadFlashData+0x1cc>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fcae 	bl	8000eac <__aeabi_fdiv>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	61da      	str	r2, [r3, #28]
	p->pid_i_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+32) )) )/FLASHCONSTANTMULTIPLIER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3320      	adds	r3, #32
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb98 	bl	8000c94 <__aeabi_ui2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4936      	ldr	r1, [pc, #216]	; (8002640 <ReadFlashData+0x1cc>)
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fc9f 	bl	8000eac <__aeabi_fdiv>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	621a      	str	r2, [r3, #32]
	p->pid_d_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+36) )) )/FLASHCONSTANTMULTIPLIER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3324      	adds	r3, #36	; 0x24
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fb89 	bl	8000c94 <__aeabi_ui2f>
 8002582:	4603      	mov	r3, r0
 8002584:	492e      	ldr	r1, [pc, #184]	; (8002640 <ReadFlashData+0x1cc>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fc90 	bl	8000eac <__aeabi_fdiv>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3328      	adds	r3, #40	; 0x28
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	332c      	adds	r3, #44	; 0x2c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3330      	adds	r3, #48	; 0x30
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3334      	adds	r3, #52	; 0x34
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	333c      	adds	r3, #60	; 0x3c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
	p->maxpitchdegree=(float)( (*(( uint32_t *) (StartAddr+64) )) );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3340      	adds	r3, #64	; 0x40
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fb56 	bl	8000c94 <__aeabi_ui2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
	p->maxrolldegree=(float)( (*(( uint32_t *) (StartAddr+68) )) );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3344      	adds	r3, #68	; 0x44
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fb4d 	bl	8000c94 <__aeabi_ui2f>
 80025fa:	4602      	mov	r2, r0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
	p->maxyawdegree=(float)( (*(( uint32_t *) (StartAddr+72) )) );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3348      	adds	r3, #72	; 0x48
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb44 	bl	8000c94 <__aeabi_ui2f>
 800260c:	4602      	mov	r2, r0
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	649a      	str	r2, [r3, #72]	; 0x48
	p->minthrottle=(float)( (*(( uint32_t *) (StartAddr+76) )) );
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	334c      	adds	r3, #76	; 0x4c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fb3b 	bl	8000c94 <__aeabi_ui2f>
 800261e:	4602      	mov	r2, r0
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3350      	adds	r3, #80	; 0x50
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fb32 	bl	8000c94 <__aeabi_ui2f>
 8002630:	4602      	mov	r2, r0
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	47c35000 	.word	0x47c35000

08002644 <WriteString>:

void WriteString(char string[])
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8002650:	e009      	b.n	8002666 <WriteString+0x22>
	{
	PrintCharUart (string[i]);
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f80e 	bl	800267c <PrintCharUart>
	i++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ef      	bne.n	8002652 <WriteString+0xe>
  }
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <PrintCharUart>:


void PrintCharUart (int ch) 	 /* Write character to Serial Port    */
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 8002684:	bf00      	nop
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <PrintCharUart+0x2c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f9      	beq.n	8002686 <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <PrintCharUart+0x2c>)
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	6053      	str	r3, [r2, #4]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40013800 	.word	0x40013800

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <nRF24_TransmitPacket+0x98>)
 80026c6:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ce:	4821      	ldr	r0, [pc, #132]	; (8002754 <nRF24_TransmitPacket+0x9c>)
 80026d0:	f003 f8fa 	bl	80058c8 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fb64 	bl	8002da6 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 80026de:	2201      	movs	r2, #1
 80026e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e4:	481b      	ldr	r0, [pc, #108]	; (8002754 <nRF24_TransmitPacket+0x9c>)
 80026e6:	f003 f8ef 	bl	80058c8 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80026ea:	f000 fb24 	bl	8002d36 <nRF24_GetStatus>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f1      	bne.n	80026ea <nRF24_TransmitPacket+0x32>
 8002706:	e000      	b.n	800270a <nRF24_TransmitPacket+0x52>
			break;
 8002708:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002710:	4810      	ldr	r0, [pc, #64]	; (8002754 <nRF24_TransmitPacket+0x9c>)
 8002712:	f003 f8d9 	bl	80058c8 <HAL_GPIO_WritePin>

	if (!wait) {
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 800271c:	2302      	movs	r3, #2
 800271e:	e012      	b.n	8002746 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8002720:	f000 fb2c 	bl	8002d7c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 800272e:	2303      	movs	r3, #3
 8002730:	e009      	b.n	8002746 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 800273c:	2301      	movs	r3, #1
 800273e:	e002      	b.n	8002746 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8002740:	f000 fb0c 	bl	8002d5c <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	000fffff 	.word	0x000fffff
 8002754:	40010c00 	.word	0x40010c00

08002758 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8002762:	bf00      	nop
 8002764:	2102      	movs	r1, #2
 8002766:	480e      	ldr	r0, [pc, #56]	; (80027a0 <nRF24_LL_RW+0x48>)
 8002768:	f7fe fdb4 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f8      	beq.n	8002764 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b29b      	uxth	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <nRF24_LL_RW+0x48>)
 800277a:	f7fe fd91 	bl	80012a0 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 800277e:	bf00      	nop
 8002780:	2101      	movs	r1, #1
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <nRF24_LL_RW+0x48>)
 8002784:	f7fe fda6 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f8      	beq.n	8002780 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <nRF24_LL_RW+0x48>)
 8002790:	f7fe fd94 	bl	80012bc <SPI_I2S_ReceiveData>
 8002794:	4603      	mov	r3, r0
 8002796:	b2db      	uxtb	r3, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40003800 	.word	0x40003800

080027a4 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <nRF24_ReadReg+0x44>)
 80027b6:	f003 f887 	bl	80058c8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ffc8 	bl	8002758 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80027c8:	20ff      	movs	r0, #255	; 0xff
 80027ca:	f7ff ffc5 	bl	8002758 <nRF24_LL_RW>
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80027d2:	2201      	movs	r2, #1
 80027d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <nRF24_ReadReg+0x44>)
 80027da:	f003 f875 	bl	80058c8 <HAL_GPIO_WritePin>

	return value;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40010800 	.word	0x40010800

080027ec <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80027fc:	2200      	movs	r2, #0
 80027fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002802:	481a      	ldr	r0, [pc, #104]	; (800286c <nRF24_WriteReg+0x80>)
 8002804:	f003 f860 	bl	80058c8 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b1f      	cmp	r3, #31
 800280c:	d810      	bhi.n	8002830 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	b25b      	sxtb	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff99 	bl	8002758 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff95 	bl	8002758 <nRF24_LL_RW>
 800282e:	e013      	b.n	8002858 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff90 	bl	8002758 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2be1      	cmp	r3, #225	; 0xe1
 800283c:	d00c      	beq.n	8002858 <nRF24_WriteReg+0x6c>
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2be2      	cmp	r3, #226	; 0xe2
 8002842:	d009      	beq.n	8002858 <nRF24_WriteReg+0x6c>
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2be3      	cmp	r3, #227	; 0xe3
 8002848:	d006      	beq.n	8002858 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2bff      	cmp	r3, #255	; 0xff
 800284e:	d003      	beq.n	8002858 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff80 	bl	8002758 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	4803      	ldr	r0, [pc, #12]	; (800286c <nRF24_WriteReg+0x80>)
 8002860:	f003 f832 	bl	80058c8 <HAL_GPIO_WritePin>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40010800 	.word	0x40010800

08002870 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	4613      	mov	r3, r2
 800287e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002886:	480f      	ldr	r0, [pc, #60]	; (80028c4 <nRF24_ReadMBReg+0x54>)
 8002888:	f003 f81e 	bl	80058c8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff62 	bl	8002758 <nRF24_LL_RW>
	while (count--) {
 8002894:	e007      	b.n	80028a6 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002896:	683c      	ldr	r4, [r7, #0]
 8002898:	1c63      	adds	r3, r4, #1
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	20ff      	movs	r0, #255	; 0xff
 800289e:	f7ff ff5b 	bl	8002758 <nRF24_LL_RW>
 80028a2:	4603      	mov	r3, r0
 80028a4:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80028a6:	79bb      	ldrb	r3, [r7, #6]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	71ba      	strb	r2, [r7, #6]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f2      	bne.n	8002896 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b6:	4803      	ldr	r0, [pc, #12]	; (80028c4 <nRF24_ReadMBReg+0x54>)
 80028b8:	f003 f806 	bl	80058c8 <HAL_GPIO_WritePin>
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	40010800 	.word	0x40010800

080028c8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028de:	480f      	ldr	r0, [pc, #60]	; (800291c <nRF24_WriteMBReg+0x54>)
 80028e0:	f002 fff2 	bl	80058c8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff36 	bl	8002758 <nRF24_LL_RW>
	while (count--) {
 80028ec:	e006      	b.n	80028fc <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	603a      	str	r2, [r7, #0]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff2e 	bl	8002758 <nRF24_LL_RW>
	while (count--) {
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	71ba      	strb	r2, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f3      	bne.n	80028ee <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8002906:	2201      	movs	r2, #1
 8002908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <nRF24_WriteMBReg+0x54>)
 800290e:	f002 ffdb 	bl	80058c8 <HAL_GPIO_WritePin>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40010800 	.word	0x40010800

08002920 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8002924:	2108      	movs	r1, #8
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff ff60 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800292c:	213f      	movs	r1, #63	; 0x3f
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff ff5c 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8002934:	2103      	movs	r1, #3
 8002936:	2002      	movs	r0, #2
 8002938:	f7ff ff58 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800293c:	2103      	movs	r1, #3
 800293e:	2003      	movs	r0, #3
 8002940:	f7ff ff54 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002944:	2103      	movs	r1, #3
 8002946:	2004      	movs	r0, #4
 8002948:	f7ff ff50 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800294c:	2102      	movs	r1, #2
 800294e:	2005      	movs	r0, #5
 8002950:	f7ff ff4c 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002954:	210e      	movs	r1, #14
 8002956:	2006      	movs	r0, #6
 8002958:	f7ff ff48 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800295c:	2100      	movs	r1, #0
 800295e:	2007      	movs	r0, #7
 8002960:	f7ff ff44 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002964:	2100      	movs	r1, #0
 8002966:	2011      	movs	r0, #17
 8002968:	f7ff ff40 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800296c:	2100      	movs	r1, #0
 800296e:	2012      	movs	r0, #18
 8002970:	f7ff ff3c 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002974:	2100      	movs	r1, #0
 8002976:	2013      	movs	r0, #19
 8002978:	f7ff ff38 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800297c:	2100      	movs	r1, #0
 800297e:	2014      	movs	r0, #20
 8002980:	f7ff ff34 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002984:	2100      	movs	r1, #0
 8002986:	2015      	movs	r0, #21
 8002988:	f7ff ff30 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800298c:	2100      	movs	r1, #0
 800298e:	2016      	movs	r0, #22
 8002990:	f7ff ff2c 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002994:	2100      	movs	r1, #0
 8002996:	201c      	movs	r0, #28
 8002998:	f7ff ff28 	bl	80027ec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800299c:	2100      	movs	r1, #0
 800299e:	201d      	movs	r0, #29
 80029a0:	f7ff ff24 	bl	80027ec <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80029a4:	f000 f9e2 	bl	8002d6c <nRF24_FlushRX>
	nRF24_FlushTX();
 80029a8:	f000 f9d8 	bl	8002d5c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80029ac:	f000 f9e6 	bl	8002d7c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <nRF24_Init+0xa0>)
 80029b8:	f002 ff86 	bl	80058c8 <HAL_GPIO_WritePin>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40010800 	.word	0x40010800

080029c4 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <nRF24_Check+0x58>)
 80029cc:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80029ce:	2205      	movs	r2, #5
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	2030      	movs	r0, #48	; 0x30
 80029d4:	f7ff ff78 	bl	80028c8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80029d8:	463b      	mov	r3, r7
 80029da:	2205      	movs	r2, #5
 80029dc:	4619      	mov	r1, r3
 80029de:	2010      	movs	r0, #16
 80029e0:	f7ff ff46 	bl	8002870 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e010      	b.n	8002a0c <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	f107 0210 	add.w	r2, r7, #16
 80029f0:	4413      	add	r3, r2
 80029f2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1c59      	adds	r1, r3, #1
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <nRF24_Check+0x42>
 8002a02:	2300      	movs	r3, #0
 8002a04:	e006      	b.n	8002a14 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d9eb      	bls.n	80029ea <nRF24_Check+0x26>
	}

	return 1;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	0800bd44 	.word	0x0800bd44

08002a20 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff feba 	bl	80027a4 <nRF24_ReadReg>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d104      	bne.n	8002a44 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e003      	b.n	8002a4c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	f023 0302 	bic.w	r3, r3, #2
 8002a4a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fecb 	bl	80027ec <nRF24_WriteReg>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff fe9b 	bl	80027a4 <nRF24_ReadReg>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	b25a      	sxtb	r2, r3
 8002a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	4619      	mov	r1, r3
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7ff feaa 	bl	80027ec <nRF24_WriteReg>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff fe7a 	bl	80027a4 <nRF24_ReadReg>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	f023 030c 	bic.w	r3, r3, #12
 8002aba:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	b25a      	sxtb	r2, r3
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff fe89 	bl	80027ec <nRF24_WriteReg>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	4619      	mov	r1, r3
 8002af0:	2005      	movs	r0, #5
 8002af2:	f7ff fe7b 	bl	80027ec <nRF24_WriteReg>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	3b02      	subs	r3, #2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2003      	movs	r0, #3
 8002b12:	f7ff fe6b 	bl	80027ec <nRF24_WriteReg>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d846      	bhi.n	8002bc0 <nRF24_SetAddr+0xa0>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <nRF24_SetAddr+0x18>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b55 	.word	0x08002b55
 8002b3c:	08002b55 	.word	0x08002b55
 8002b40:	08002bad 	.word	0x08002bad
 8002b44:	08002bad 	.word	0x08002bad
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002bad 	.word	0x08002bad
 8002b50:	08002b55 	.word	0x08002b55
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002b54:	2003      	movs	r0, #3
 8002b56:	f7ff fe25 	bl	80027a4 <nRF24_ReadReg>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b6e:	4817      	ldr	r0, [pc, #92]	; (8002bcc <nRF24_SetAddr+0xac>)
 8002b70:	f002 feaa 	bl	80058c8 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <nRF24_SetAddr+0xb0>)
 8002b78:	5cd3      	ldrb	r3, [r2, r3]
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fde9 	bl	8002758 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	603a      	str	r2, [r7, #0]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fde2 	bl	8002758 <nRF24_LL_RW>
			} while (addr_width--);
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	73fa      	strb	r2, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f3      	bne.n	8002b86 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba4:	4809      	ldr	r0, [pc, #36]	; (8002bcc <nRF24_SetAddr+0xac>)
 8002ba6:	f002 fe8f 	bl	80058c8 <HAL_GPIO_WritePin>
			break;
 8002baa:	e00a      	b.n	8002bc2 <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <nRF24_SetAddr+0xb0>)
 8002bb0:	5cd2      	ldrb	r2, [r2, r3]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7ff fe17 	bl	80027ec <nRF24_WriteReg>
			break;
 8002bbe:	e000      	b.n	8002bc2 <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002bc0:	bf00      	nop
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	0800bd80 	.word	0x0800bd80

08002bd4 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002bde:	2006      	movs	r0, #6
 8002be0:	f7ff fde0 	bl	80027a4 <nRF24_ReadReg>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	f023 0306 	bic.w	r3, r3, #6
 8002bee:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	2006      	movs	r0, #6
 8002bfe:	f7ff fdf5 	bl	80027ec <nRF24_WriteReg>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002c14:	2006      	movs	r0, #6
 8002c16:	f7ff fdc5 	bl	80027a4 <nRF24_ReadReg>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002c24:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	4619      	mov	r1, r3
 8002c32:	2006      	movs	r0, #6
 8002c34:	f7ff fdda 	bl	80027ec <nRF24_WriteReg>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	71bb      	strb	r3, [r7, #6]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002c52:	2002      	movs	r0, #2
 8002c54:	f7ff fda6 	bl	80027a4 <nRF24_ReadReg>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b25a      	sxtb	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c70:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	4619      	mov	r1, r3
 8002c76:	2002      	movs	r0, #2
 8002c78:	f7ff fdb8 	bl	80027ec <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <nRF24_SetRXPipe+0xa4>)
 8002c80:	5cd2      	ldrb	r2, [r2, r3]
 8002c82:	797b      	ldrb	r3, [r7, #5]
 8002c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f7ff fdad 	bl	80027ec <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7ff fd86 	bl	80027a4 <nRF24_ReadReg>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002c9c:	79bb      	ldrb	r3, [r7, #6]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10a      	bne.n	8002cb8 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	b25a      	sxtb	r2, r3
 8002cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e00b      	b.n	8002cd0 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7ff fd89 	bl	80027ec <nRF24_WriteReg>
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	0800bd78 	.word	0x0800bd78

08002ce8 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d904      	bls.n	8002d02 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff fd76 	bl	80027ec <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8002d00:	e015      	b.n	8002d2e <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7ff fd4e 	bl	80027a4 <nRF24_ReadReg>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	b25a      	sxtb	r2, r3
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	4619      	mov	r1, r3
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff fd5f 	bl	80027ec <nRF24_WriteReg>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002d3a:	2007      	movs	r0, #7
 8002d3c:	f7ff fd32 	bl	80027a4 <nRF24_ReadReg>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002d4a:	2017      	movs	r0, #23
 8002d4c:	f7ff fd2a 	bl	80027a4 <nRF24_ReadReg>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	b2db      	uxtb	r3, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002d60:	21ff      	movs	r1, #255	; 0xff
 8002d62:	20e1      	movs	r0, #225	; 0xe1
 8002d64:	f7ff fd42 	bl	80027ec <nRF24_WriteReg>
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002d70:	21ff      	movs	r1, #255	; 0xff
 8002d72:	20e2      	movs	r0, #226	; 0xe2
 8002d74:	f7ff fd3a 	bl	80027ec <nRF24_WriteReg>
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002d82:	2007      	movs	r0, #7
 8002d84:	f7ff fd0e 	bl	80027a4 <nRF24_ReadReg>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d92:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4619      	mov	r1, r3
 8002d98:	2007      	movs	r0, #7
 8002d9a:	f7ff fd27 	bl	80027ec <nRF24_WriteReg>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	461a      	mov	r2, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	20a0      	movs	r0, #160	; 0xa0
 8002dba:	f7ff fd85 	bl	80028c8 <nRF24_WriteMBReg>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f7ff fce6 	bl	80027a4 <nRF24_ReadReg>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	105b      	asrs	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d816      	bhi.n	8002e18 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <nRF24_ReadPayload+0x60>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fcd7 	bl	80027a4 <nRF24_ReadReg>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	2061      	movs	r0, #97	; 0x61
 8002e10:	f7ff fd2e 	bl	8002870 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	e003      	b.n	8002e20 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8002e1e:	23ff      	movs	r3, #255	; 0xff
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800bd78 	.word	0x0800bd78

08002e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6193      	str	r3, [r2, #24]
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_MspInit+0x5c>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_MspInit+0x60>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_MspInit+0x60>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010000 	.word	0x40010000

08002e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_ADC_MspInit+0x6c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d121      	bne.n	8002ef4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6193      	str	r3, [r2, #24]
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_ADC_MspInit+0x70>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4619      	mov	r1, r3
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_ADC_MspInit+0x74>)
 8002ef0:	f002 fb90 	bl	8005614 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40012400 	.word	0x40012400
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010800 	.word	0x40010800

08002f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d124      	bne.n	8002f72 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f2e:	f043 0308 	orr.w	r3, r3, #8
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f46:	2312      	movs	r3, #18
 8002f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4619      	mov	r1, r3
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <HAL_I2C_MspInit+0x7c>)
 8002f56:	f002 fb5d 	bl	8005614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f64:	61d3      	str	r3, [r2, #28]
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40005800 	.word	0x40005800
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010c00 	.word	0x40010c00

08002f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_SPI_MspInit+0x8c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d131      	bne.n	800300c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_SPI_MspInit+0x90>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002fd8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	f107 0310 	add.w	r3, r7, #16
 8002fea:	4619      	mov	r1, r3
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <HAL_SPI_MspInit+0x94>)
 8002fee:	f002 fb11 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	4619      	mov	r1, r3
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <HAL_SPI_MspInit+0x94>)
 8003008:	f002 fb04 	bl	8005614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800300c:	bf00      	nop
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40003800 	.word	0x40003800
 8003018:	40021000 	.word	0x40021000
 800301c:	40010c00 	.word	0x40010c00

08003020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a16      	ldr	r2, [pc, #88]	; (8003088 <HAL_TIM_Base_MspInit+0x68>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 8003038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800303c:	6193      	str	r3, [r2, #24]
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800304a:	e018      	b.n	800307e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d113      	bne.n	800307e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	61d3      	str	r3, [r2, #28]
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_TIM_Base_MspInit+0x6c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2101      	movs	r1, #1
 8003072:	201c      	movs	r0, #28
 8003074:	f002 f897 	bl	80051a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003078:	201c      	movs	r0, #28
 800307a:	f002 f8b0 	bl	80051de <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_TIM_MspPostInit+0x5c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d118      	bne.n	80030e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_TIM_MspPostInit+0x60>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <HAL_TIM_MspPostInit+0x60>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_TIM_MspPostInit+0x60>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80030c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80030cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	2302      	movs	r3, #2
 80030d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <HAL_TIM_MspPostInit+0x64>)
 80030de:	f002 fa99 	bl	8005614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030e2:	bf00      	nop
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010800 	.word	0x40010800

080030f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_UART_MspInit+0xa4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d13d      	bne.n	8003194 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 800311e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003122:	6193      	str	r3, [r2, #24]
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 8003136:	f043 0308 	orr.w	r3, r3, #8
 800313a:	6193      	str	r3, [r2, #24]
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_UART_MspInit+0xa8>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003148:	2340      	movs	r3, #64	; 0x40
 800314a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4812      	ldr	r0, [pc, #72]	; (80031a4 <HAL_UART_MspInit+0xac>)
 800315c:	f002 fa5a 	bl	8005614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <HAL_UART_MspInit+0xac>)
 8003174:	f002 fa4e 	bl	8005614 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_UART_MspInit+0xb0>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_UART_MspInit+0xb0>)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40013800 	.word	0x40013800
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010c00 	.word	0x40010c00
 80031a8:	40010000 	.word	0x40010000

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <HardFault_Handler+0x4>

080031be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <MemManage_Handler+0x4>

080031c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <BusFault_Handler+0x4>

080031ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <UsageFault_Handler+0x4>

080031d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f8:	f001 fa14 	bl	8004624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	b087      	sub	sp, #28
 8003206:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003208:	4897      	ldr	r0, [pc, #604]	; (8003468 <TIM2_IRQHandler+0x268>)
 800320a:	f004 f9bf 	bl	800758c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 800320e:	4b97      	ldr	r3, [pc, #604]	; (800346c <TIM2_IRQHandler+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	4a95      	ldr	r2, [pc, #596]	; (800346c <TIM2_IRQHandler+0x26c>)
 8003216:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 8003218:	4b94      	ldr	r3, [pc, #592]	; (800346c <TIM2_IRQHandler+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2bf9      	cmp	r3, #249	; 0xf9
 800321e:	d907      	bls.n	8003230 <TIM2_IRQHandler+0x30>
  {
	  LEDcount=0;
 8003220:	4b92      	ldr	r3, [pc, #584]	; (800346c <TIM2_IRQHandler+0x26c>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8003226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800322a:	4891      	ldr	r0, [pc, #580]	; (8003470 <TIM2_IRQHandler+0x270>)
 800322c:	f002 fb64 	bl	80058f8 <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 8003230:	2201      	movs	r2, #1
 8003232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003236:	488f      	ldr	r0, [pc, #572]	; (8003474 <TIM2_IRQHandler+0x274>)
 8003238:	f002 fb46 	bl	80058c8 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 800323c:	210a      	movs	r1, #10
 800323e:	488e      	ldr	r0, [pc, #568]	; (8003478 <TIM2_IRQHandler+0x278>)
 8003240:	f001 fbb4 	bl	80049ac <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8003244:	488c      	ldr	r0, [pc, #560]	; (8003478 <TIM2_IRQHandler+0x278>)
 8003246:	f001 fcab 	bl	8004ba0 <HAL_ADC_GetValue>
 800324a:	4603      	mov	r3, r0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fd21 	bl	8000c94 <__aeabi_ui2f>
 8003252:	4603      	mov	r3, r0
 8003254:	4989      	ldr	r1, [pc, #548]	; (800347c <TIM2_IRQHandler+0x27c>)
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fd74 	bl	8000d44 <__aeabi_fmul>
 800325c:	4603      	mov	r3, r0
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd ff36 	bl	80010d0 <__aeabi_f2uiz>
 8003264:	4602      	mov	r2, r0
 8003266:	4b86      	ldr	r3, [pc, #536]	; (8003480 <TIM2_IRQHandler+0x280>)
 8003268:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 800326a:	4b86      	ldr	r3, [pc, #536]	; (8003484 <TIM2_IRQHandler+0x284>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a84      	ldr	r2, [pc, #528]	; (8003480 <TIM2_IRQHandler+0x280>)
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	4985      	ldr	r1, [pc, #532]	; (8003488 <TIM2_IRQHandler+0x288>)
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <TIM2_IRQHandler+0x284>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a81      	ldr	r2, [pc, #516]	; (8003484 <TIM2_IRQHandler+0x284>)
 8003280:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8003282:	4b80      	ldr	r3, [pc, #512]	; (8003484 <TIM2_IRQHandler+0x284>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b31      	cmp	r3, #49	; 0x31
 8003288:	d902      	bls.n	8003290 <TIM2_IRQHandler+0x90>
 800328a:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <TIM2_IRQHandler+0x284>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8003290:	4b7e      	ldr	r3, [pc, #504]	; (800348c <TIM2_IRQHandler+0x28c>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8003296:	4b7e      	ldr	r3, [pc, #504]	; (8003490 <TIM2_IRQHandler+0x290>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e00e      	b.n	80032bc <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 800329e:	4b7c      	ldr	r3, [pc, #496]	; (8003490 <TIM2_IRQHandler+0x290>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a79      	ldr	r2, [pc, #484]	; (8003488 <TIM2_IRQHandler+0x288>)
 80032a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <TIM2_IRQHandler+0x28c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a77      	ldr	r2, [pc, #476]	; (800348c <TIM2_IRQHandler+0x28c>)
 80032b0:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <TIM2_IRQHandler+0x290>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4a75      	ldr	r2, [pc, #468]	; (8003490 <TIM2_IRQHandler+0x290>)
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b74      	ldr	r3, [pc, #464]	; (8003490 <TIM2_IRQHandler+0x290>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b31      	cmp	r3, #49	; 0x31
 80032c2:	d9ec      	bls.n	800329e <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 80032c4:	4b71      	ldr	r3, [pc, #452]	; (800348c <TIM2_IRQHandler+0x28c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a72      	ldr	r2, [pc, #456]	; (8003494 <TIM2_IRQHandler+0x294>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	4a71      	ldr	r2, [pc, #452]	; (8003498 <TIM2_IRQHandler+0x298>)
 80032d2:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 80032d4:	4b71      	ldr	r3, [pc, #452]	; (800349c <TIM2_IRQHandler+0x29c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <TIM2_IRQHandler+0x2a0>)
 80032da:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 80032dc:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <TIM2_IRQHandler+0x2a4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a71      	ldr	r2, [pc, #452]	; (80034a8 <TIM2_IRQHandler+0x2a8>)
 80032e2:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 80032e4:	4b71      	ldr	r3, [pc, #452]	; (80034ac <TIM2_IRQHandler+0x2ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a71      	ldr	r2, [pc, #452]	; (80034b0 <TIM2_IRQHandler+0x2b0>)
 80032ea:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 80032ec:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <TIM2_IRQHandler+0x2b4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a71      	ldr	r2, [pc, #452]	; (80034b8 <TIM2_IRQHandler+0x2b8>)
 80032f2:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <TIM2_IRQHandler+0x2bc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a71      	ldr	r2, [pc, #452]	; (80034c0 <TIM2_IRQHandler+0x2c0>)
 80032fa:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 80032fc:	4b71      	ldr	r3, [pc, #452]	; (80034c4 <TIM2_IRQHandler+0x2c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <TIM2_IRQHandler+0x2c8>)
 8003302:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8003304:	4b71      	ldr	r3, [pc, #452]	; (80034cc <TIM2_IRQHandler+0x2cc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8083 	beq.w	8003414 <TIM2_IRQHandler+0x214>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 800330e:	f7ff fd1a 	bl	8002d46 <nRF24_GetStatus_RXFIFO>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d07d      	beq.n	8003414 <TIM2_IRQHandler+0x214>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8003318:	496d      	ldr	r1, [pc, #436]	; (80034d0 <TIM2_IRQHandler+0x2d0>)
 800331a:	486e      	ldr	r0, [pc, #440]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 800331c:	f7ff fd54 	bl	8002dc8 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8003320:	f7ff fd2c 	bl	8002d7c <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 8003324:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b6b      	ldr	r3, [pc, #428]	; (80034d8 <TIM2_IRQHandler+0x2d8>)
 800332c:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 800332e:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <TIM2_IRQHandler+0x2d8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d863      	bhi.n	80033fe <TIM2_IRQHandler+0x1fe>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <TIM2_IRQHandler+0x13c>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	080033ff 	.word	0x080033ff
 8003344:	080033ff 	.word	0x080033ff
 8003348:	080033ff 	.word	0x080033ff
  			{
  				case CONTROLMOVEMENT:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 800334c:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b64      	cmp	r3, #100	; 0x64
 8003352:	d853      	bhi.n	80033fc <TIM2_IRQHandler+0x1fc>
 8003354:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003356:	789b      	ldrb	r3, [r3, #2]
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d84f      	bhi.n	80033fc <TIM2_IRQHandler+0x1fc>
 800335c:	4b5d      	ldr	r3, [pc, #372]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d84b      	bhi.n	80033fc <TIM2_IRQHandler+0x1fc>
 8003364:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d847      	bhi.n	80033fc <TIM2_IRQHandler+0x1fc>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	461a      	mov	r2, r3
 8003372:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <TIM2_IRQHandler+0x2dc>)
 8003374:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 8003376:	4b57      	ldr	r3, [pc, #348]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003378:	789b      	ldrb	r3, [r3, #2]
 800337a:	461a      	mov	r2, r3
 800337c:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <TIM2_IRQHandler+0x2e0>)
 800337e:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 8003380:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003382:	78db      	ldrb	r3, [r3, #3]
 8003384:	461a      	mov	r2, r3
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <TIM2_IRQHandler+0x2e4>)
 8003388:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 800338a:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 800338c:	791b      	ldrb	r3, [r3, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <TIM2_IRQHandler+0x2e8>)
 8003392:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 8003396:	795b      	ldrb	r3, [r3, #5]
 8003398:	461a      	mov	r2, r3
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <TIM2_IRQHandler+0x2ec>)
 800339c:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 800339e:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033a0:	799b      	ldrb	r3, [r3, #6]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <TIM2_IRQHandler+0x2f0>)
 80033a6:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033aa:	79db      	ldrb	r3, [r3, #7]
 80033ac:	09db      	lsrs	r3, r3, #7
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <TIM2_IRQHandler+0x29c>)
 80033b4:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033b8:	79db      	ldrb	r3, [r3, #7]
 80033ba:	119b      	asrs	r3, r3, #6
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	4a38      	ldr	r2, [pc, #224]	; (80034a4 <TIM2_IRQHandler+0x2a4>)
 80033c2:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033c6:	79db      	ldrb	r3, [r3, #7]
 80033c8:	115b      	asrs	r3, r3, #5
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	4a37      	ldr	r2, [pc, #220]	; (80034ac <TIM2_IRQHandler+0x2ac>)
 80033d0:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033d4:	79db      	ldrb	r3, [r3, #7]
 80033d6:	111b      	asrs	r3, r3, #4
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <TIM2_IRQHandler+0x2b4>)
 80033de:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 80033e0:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033e2:	79db      	ldrb	r3, [r3, #7]
 80033e4:	10db      	asrs	r3, r3, #3
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	4a34      	ldr	r2, [pc, #208]	; (80034bc <TIM2_IRQHandler+0x2bc>)
 80033ec:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <TIM2_IRQHandler+0x2d4>)
 80033f0:	79db      	ldrb	r3, [r3, #7]
 80033f2:	109b      	asrs	r3, r3, #2
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	4a32      	ldr	r2, [pc, #200]	; (80034c4 <TIM2_IRQHandler+0x2c4>)
 80033fa:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 80033fc:	bf00      	nop
  				  					{

  				  					}break;
  			}

  			SendBackFlag=1;
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <TIM2_IRQHandler+0x2f4>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <TIM2_IRQHandler+0x2cc>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <TIM2_IRQHandler+0x2f8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a39      	ldr	r2, [pc, #228]	; (80034f8 <TIM2_IRQHandler+0x2f8>)
 8003412:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <TIM2_IRQHandler+0x2f4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 810c 	beq.w	8003636 <TIM2_IRQHandler+0x436>
  {
    	BackTimer++;
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <TIM2_IRQHandler+0x2fc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a35      	ldr	r2, [pc, #212]	; (80034fc <TIM2_IRQHandler+0x2fc>)
 8003426:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <TIM2_IRQHandler+0x2fc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	2b05      	cmp	r3, #5
 8003430:	f200 8101 	bhi.w	8003636 <TIM2_IRQHandler+0x436>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <TIM2_IRQHandler+0x23c>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003455 	.word	0x08003455
 8003440:	08003637 	.word	0x08003637
 8003444:	08003637 	.word	0x08003637
 8003448:	08003501 	.word	0x08003501
 800344c:	0800360f 	.word	0x0800360f
 8003450:	08003623 	.word	0x08003623
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <TIM2_IRQHandler+0x274>)
 800345c:	f002 fa34 	bl	80058c8 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fafc 	bl	8002a5e <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8003466:	e0e6      	b.n	8003636 <TIM2_IRQHandler+0x436>
 8003468:	2000057c 	.word	0x2000057c
 800346c:	20000758 	.word	0x20000758
 8003470:	40011000 	.word	0x40011000
 8003474:	40010c00 	.word	0x40010c00
 8003478:	20000454 	.word	0x20000454
 800347c:	4090ac29 	.word	0x4090ac29
 8003480:	20000764 	.word	0x20000764
 8003484:	2000021c 	.word	0x2000021c
 8003488:	20000658 	.word	0x20000658
 800348c:	20000214 	.word	0x20000214
 8003490:	20000208 	.word	0x20000208
 8003494:	51eb851f 	.word	0x51eb851f
 8003498:	20000218 	.word	0x20000218
 800349c:	200004cc 	.word	0x200004cc
 80034a0:	20000770 	.word	0x20000770
 80034a4:	2000062c 	.word	0x2000062c
 80034a8:	20000744 	.word	0x20000744
 80034ac:	200002d8 	.word	0x200002d8
 80034b0:	2000076c 	.word	0x2000076c
 80034b4:	2000051c 	.word	0x2000051c
 80034b8:	20000720 	.word	0x20000720
 80034bc:	20000428 	.word	0x20000428
 80034c0:	20000650 	.word	0x20000650
 80034c4:	200002dc 	.word	0x200002dc
 80034c8:	20000760 	.word	0x20000760
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000204 	.word	0x20000204
 80034d4:	20000334 	.word	0x20000334
 80034d8:	20000654 	.word	0x20000654
 80034dc:	20000514 	.word	0x20000514
 80034e0:	20000484 	.word	0x20000484
 80034e4:	20000624 	.word	0x20000624
 80034e8:	20000278 	.word	0x20000278
 80034ec:	20000578 	.word	0x20000578
 80034f0:	20000628 	.word	0x20000628
 80034f4:	20000220 	.word	0x20000220
 80034f8:	2000064c 	.word	0x2000064c
 80034fc:	20000224 	.word	0x20000224

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <TIM2_IRQHandler+0x46c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <TIM2_IRQHandler+0x470>)
 8003508:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 800350a:	4b58      	ldr	r3, [pc, #352]	; (800366c <TIM2_IRQHandler+0x46c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d178      	bne.n	8003604 <TIM2_IRQHandler+0x404>
  	 	 	 		{
  	 	 	 			case CONTROLMOVEMENT:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <TIM2_IRQHandler+0x474>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <TIM2_IRQHandler+0x470>)
 800351a:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 800351c:	4b55      	ldr	r3, [pc, #340]	; (8003674 <TIM2_IRQHandler+0x474>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b52      	ldr	r3, [pc, #328]	; (8003670 <TIM2_IRQHandler+0x470>)
 8003526:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(AnglePitch<0)
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <TIM2_IRQHandler+0x478>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fda5 	bl	8001080 <__aeabi_fcmplt>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <TIM2_IRQHandler+0x35a>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <TIM2_IRQHandler+0x47c>)
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch*(-1);
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <TIM2_IRQHandler+0x478>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fdc0 	bl	80010d0 <__aeabi_f2uiz>
 8003550:	4603      	mov	r3, r0
 8003552:	b2da      	uxtb	r2, r3
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <TIM2_IRQHandler+0x480>)
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e00b      	b.n	8003572 <TIM2_IRQHandler+0x372>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 800355a:	4b48      	ldr	r3, [pc, #288]	; (800367c <TIM2_IRQHandler+0x47c>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch;
 8003560:	4b45      	ldr	r3, [pc, #276]	; (8003678 <TIM2_IRQHandler+0x478>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fdb3 	bl	80010d0 <__aeabi_f2uiz>
 800356a:	4603      	mov	r3, r0
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b44      	ldr	r3, [pc, #272]	; (8003680 <TIM2_IRQHandler+0x480>)
 8003570:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(AngleRoll<0)
 8003572:	4b44      	ldr	r3, [pc, #272]	; (8003684 <TIM2_IRQHandler+0x484>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fd80 	bl	8001080 <__aeabi_fcmplt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <TIM2_IRQHandler+0x3a4>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <TIM2_IRQHandler+0x488>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll*(-1);
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <TIM2_IRQHandler+0x484>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fd9b 	bl	80010d0 <__aeabi_f2uiz>
 800359a:	4603      	mov	r3, r0
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <TIM2_IRQHandler+0x48c>)
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e00b      	b.n	80035bc <TIM2_IRQHandler+0x3bc>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <TIM2_IRQHandler+0x488>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll;
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <TIM2_IRQHandler+0x484>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fd8e 	bl	80010d0 <__aeabi_f2uiz>
 80035b4:	4603      	mov	r3, r0
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <TIM2_IRQHandler+0x48c>)
 80035ba:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <TIM2_IRQHandler+0x480>)
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <TIM2_IRQHandler+0x470>)
 80035c2:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <TIM2_IRQHandler+0x48c>)
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <TIM2_IRQHandler+0x470>)
 80035ca:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 80035cc:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <TIM2_IRQHandler+0x488>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <TIM2_IRQHandler+0x47c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <TIM2_IRQHandler+0x490>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <TIM2_IRQHandler+0x494>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <TIM2_IRQHandler+0x470>)
 8003600:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8003602:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 8003604:	2106      	movs	r1, #6
 8003606:	481a      	ldr	r0, [pc, #104]	; (8003670 <TIM2_IRQHandler+0x470>)
 8003608:	f7ff f856 	bl	80026b8 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 800360c:	e013      	b.n	8003636 <TIM2_IRQHandler+0x436>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 800360e:	2001      	movs	r0, #1
 8003610:	f7ff fa25 	bl	8002a5e <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8003614:	2201      	movs	r2, #1
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	481f      	ldr	r0, [pc, #124]	; (8003698 <TIM2_IRQHandler+0x498>)
 800361c:	f002 f954 	bl	80058c8 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8003620:	e009      	b.n	8003636 <TIM2_IRQHandler+0x436>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <TIM2_IRQHandler+0x49c>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <TIM2_IRQHandler+0x4a0>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <TIM2_IRQHandler+0x4a4>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

  				}break;
 8003634:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <TIM2_IRQHandler+0x4a8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <TIM2_IRQHandler+0x4a8>)
 800363e:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <TIM2_IRQHandler+0x4a8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003648:	d141      	bne.n	80036ce <TIM2_IRQHandler+0x4ce>
  {
    		MSGprerSecond=MSGcount;
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <TIM2_IRQHandler+0x4ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <TIM2_IRQHandler+0x4b0>)
 8003650:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <TIM2_IRQHandler+0x4ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b09      	cmp	r3, #9
 8003658:	d830      	bhi.n	80036bc <TIM2_IRQHandler+0x4bc>
    		{
    			MSGLowCount++;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <TIM2_IRQHandler+0x4b4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3301      	adds	r3, #1
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <TIM2_IRQHandler+0x4b4>)
 8003662:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <TIM2_IRQHandler+0x4b8>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e02a      	b.n	80036c2 <TIM2_IRQHandler+0x4c2>
 800366c:	20000654 	.word	0x20000654
 8003670:	20000434 	.word	0x20000434
 8003674:	20000218 	.word	0x20000218
 8003678:	20000730 	.word	0x20000730
 800367c:	20000738 	.word	0x20000738
 8003680:	20000754 	.word	0x20000754
 8003684:	20000768 	.word	0x20000768
 8003688:	20000748 	.word	0x20000748
 800368c:	2000075c 	.word	0x2000075c
 8003690:	20000210 	.word	0x20000210
 8003694:	2000020c 	.word	0x2000020c
 8003698:	40010c00 	.word	0x40010c00
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000220 	.word	0x20000220
 80036a4:	20000224 	.word	0x20000224
 80036a8:	20000638 	.word	0x20000638
 80036ac:	2000064c 	.word	0x2000064c
 80036b0:	20000728 	.word	0x20000728
 80036b4:	20000724 	.word	0x20000724
 80036b8:	20000750 	.word	0x20000750
    		}
    		 else  ConnectWeakFlag=0;
 80036bc:	4bb8      	ldr	r3, [pc, #736]	; (80039a0 <TIM2_IRQHandler+0x7a0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 80036c2:	4bb8      	ldr	r3, [pc, #736]	; (80039a4 <TIM2_IRQHandler+0x7a4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 80036c8:	4bb7      	ldr	r3, [pc, #732]	; (80039a8 <TIM2_IRQHandler+0x7a8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------
  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 80036ce:	49b7      	ldr	r1, [pc, #732]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80036d0:	48b7      	ldr	r0, [pc, #732]	; (80039b0 <TIM2_IRQHandler+0x7b0>)
 80036d2:	f7fd fd81 	bl	80011d8 <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 80036d6:	49b5      	ldr	r1, [pc, #724]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80036d8:	48b5      	ldr	r0, [pc, #724]	; (80039b0 <TIM2_IRQHandler+0x7b0>)
 80036da:	f7fd fdaf 	bl	800123c <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 80036de:	4bb3      	ldr	r3, [pc, #716]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80036e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	4bb3      	ldr	r3, [pc, #716]	; (80039b4 <TIM2_IRQHandler+0x7b4>)
 80036e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b21a      	sxth	r2, r3
 80036f4:	4bb0      	ldr	r3, [pc, #704]	; (80039b8 <TIM2_IRQHandler+0x7b8>)
 80036f6:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 80036f8:	4bac      	ldr	r3, [pc, #688]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80036fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4bae      	ldr	r3, [pc, #696]	; (80039bc <TIM2_IRQHandler+0x7bc>)
 8003702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003706:	b29b      	uxth	r3, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	b21a      	sxth	r2, r3
 800370e:	4bac      	ldr	r3, [pc, #688]	; (80039c0 <TIM2_IRQHandler+0x7c0>)
 8003710:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8003712:	4ba6      	ldr	r3, [pc, #664]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 8003714:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003718:	b29a      	uxth	r2, r3
 800371a:	4baa      	ldr	r3, [pc, #680]	; (80039c4 <TIM2_IRQHandler+0x7c4>)
 800371c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	b29b      	uxth	r3, r3
 8003726:	b21a      	sxth	r2, r3
 8003728:	4ba7      	ldr	r3, [pc, #668]	; (80039c8 <TIM2_IRQHandler+0x7c8>)
 800372a:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTORANGLE;
 800372c:	4ba2      	ldr	r3, [pc, #648]	; (80039b8 <TIM2_IRQHandler+0x7b8>)
 800372e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fab2 	bl	8000c9c <__aeabi_i2f>
 8003738:	4603      	mov	r3, r0
 800373a:	49a4      	ldr	r1, [pc, #656]	; (80039cc <TIM2_IRQHandler+0x7cc>)
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fb01 	bl	8000d44 <__aeabi_fmul>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	4ba2      	ldr	r3, [pc, #648]	; (80039d0 <TIM2_IRQHandler+0x7d0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f7fd f9f1 	bl	8000b34 <__addsf3>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	4b9e      	ldr	r3, [pc, #632]	; (80039d0 <TIM2_IRQHandler+0x7d0>)
 8003758:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTORANGLE;
 800375a:	4b99      	ldr	r3, [pc, #612]	; (80039c0 <TIM2_IRQHandler+0x7c0>)
 800375c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fa9b 	bl	8000c9c <__aeabi_i2f>
 8003766:	4603      	mov	r3, r0
 8003768:	4998      	ldr	r1, [pc, #608]	; (80039cc <TIM2_IRQHandler+0x7cc>)
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd faea 	bl	8000d44 <__aeabi_fmul>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b97      	ldr	r3, [pc, #604]	; (80039d4 <TIM2_IRQHandler+0x7d4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f7fd f9da 	bl	8000b34 <__addsf3>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	4b93      	ldr	r3, [pc, #588]	; (80039d4 <TIM2_IRQHandler+0x7d4>)
 8003786:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8003788:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <TIM2_IRQHandler+0x7d0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fe4b 	bl	8000428 <__aeabi_f2d>
 8003792:	4680      	mov	r8, r0
 8003794:	4689      	mov	r9, r1
 8003796:	4b8f      	ldr	r3, [pc, #572]	; (80039d4 <TIM2_IRQHandler+0x7d4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fc fe44 	bl	8000428 <__aeabi_f2d>
 80037a0:	4682      	mov	sl, r0
 80037a2:	468b      	mov	fp, r1
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <TIM2_IRQHandler+0x7c8>)
 80037a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fa76 	bl	8000c9c <__aeabi_i2f>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4989      	ldr	r1, [pc, #548]	; (80039d8 <TIM2_IRQHandler+0x7d8>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fac5 	bl	8000d44 <__aeabi_fmul>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4983      	ldr	r1, [pc, #524]	; (80039cc <TIM2_IRQHandler+0x7cc>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fac0 	bl	8000d44 <__aeabi_fmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc fe2e 	bl	8000428 <__aeabi_f2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f006 fe6e 	bl	800a4b4 <sin>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4650      	mov	r0, sl
 80037de:	4659      	mov	r1, fp
 80037e0:	f7fc fe7a 	bl	80004d8 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4640      	mov	r0, r8
 80037ea:	4649      	mov	r1, r9
 80037ec:	f7fc fcbe 	bl	800016c <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7fd f946 	bl	8000a88 <__aeabi_d2f>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b74      	ldr	r3, [pc, #464]	; (80039d0 <TIM2_IRQHandler+0x7d0>)
 8003800:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8003802:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <TIM2_IRQHandler+0x7d4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fe0e 	bl	8000428 <__aeabi_f2d>
 800380c:	4680      	mov	r8, r0
 800380e:	4689      	mov	r9, r1
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <TIM2_IRQHandler+0x7d0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fe07 	bl	8000428 <__aeabi_f2d>
 800381a:	4682      	mov	sl, r0
 800381c:	468b      	mov	fp, r1
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <TIM2_IRQHandler+0x7c8>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fa39 	bl	8000c9c <__aeabi_i2f>
 800382a:	4603      	mov	r3, r0
 800382c:	496a      	ldr	r1, [pc, #424]	; (80039d8 <TIM2_IRQHandler+0x7d8>)
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fa88 	bl	8000d44 <__aeabi_fmul>
 8003834:	4603      	mov	r3, r0
 8003836:	4965      	ldr	r1, [pc, #404]	; (80039cc <TIM2_IRQHandler+0x7cc>)
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fa83 	bl	8000d44 <__aeabi_fmul>
 800383e:	4603      	mov	r3, r0
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fdf1 	bl	8000428 <__aeabi_f2d>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	f006 fe31 	bl	800a4b4 <sin>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4650      	mov	r0, sl
 8003858:	4659      	mov	r1, fp
 800385a:	f7fc fe3d 	bl	80004d8 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4640      	mov	r0, r8
 8003864:	4649      	mov	r1, r9
 8003866:	f7fc fc7f 	bl	8000168 <__aeabi_dsub>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7fd f909 	bl	8000a88 <__aeabi_d2f>
 8003876:	4602      	mov	r2, r0
 8003878:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <TIM2_IRQHandler+0x7d4>)
 800387a:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 800387e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003882:	461a      	mov	r2, r3
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 8003886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388a:	fb03 f202 	mul.w	r2, r3, r2
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 8003890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003894:	4619      	mov	r1, r3
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 8003898:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800389c:	fb03 f301 	mul.w	r3, r3, r1
 80038a0:	441a      	add	r2, r3
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80038a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4b40      	ldr	r3, [pc, #256]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80038ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038b0:	fb03 f301 	mul.w	r3, r3, r1
 80038b4:	4413      	add	r3, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fda4 	bl	8000404 <__aeabi_i2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f006 fe84 	bl	800a5d0 <sqrt>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd f8da 	bl	8000a88 <__aeabi_d2f>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <TIM2_IRQHandler+0x7dc>)
 80038d8:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 80038dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd f9db 	bl	8000c9c <__aeabi_i2f>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <TIM2_IRQHandler+0x7dc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fd fadc 	bl	8000eac <__aeabi_fdiv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fd96 	bl	8000428 <__aeabi_f2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f006 fe10 	bl	800a528 <asin>
 8003908:	a323      	add	r3, pc, #140	; (adr r3, 8003998 <TIM2_IRQHandler+0x798>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fde3 	bl	80004d8 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f8b5 	bl	8000a88 <__aeabi_d2f>
 800391e:	4602      	mov	r2, r0
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <TIM2_IRQHandler+0x7e0>)
 8003922:	601a      	str	r2, [r3, #0]
  AngleRollAccel=-asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <TIM2_IRQHandler+0x7ac>)
 8003926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd f9b6 	bl	8000c9c <__aeabi_i2f>
 8003930:	4602      	mov	r2, r0
 8003932:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <TIM2_IRQHandler+0x7dc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fd fab7 	bl	8000eac <__aeabi_fdiv>
 800393e:	4603      	mov	r3, r0
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fd71 	bl	8000428 <__aeabi_f2d>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f006 fdeb 	bl	800a528 <asin>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4614      	mov	r4, r2
 8003958:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800395c:	a30e      	add	r3, pc, #56	; (adr r3, 8003998 <TIM2_IRQHandler+0x798>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	f7fc fdb7 	bl	80004d8 <__aeabi_dmul>
 800396a:	4603      	mov	r3, r0
 800396c:	460c      	mov	r4, r1
 800396e:	4618      	mov	r0, r3
 8003970:	4621      	mov	r1, r4
 8003972:	f7fd f889 	bl	8000a88 <__aeabi_d2f>
 8003976:	4602      	mov	r2, r0
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <TIM2_IRQHandler+0x7e4>)
 800397a:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <TIM2_IRQHandler+0x7e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4919      	ldr	r1, [pc, #100]	; (80039e8 <TIM2_IRQHandler+0x7e8>)
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f8d4 	bl	8000b30 <__aeabi_fsub>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <TIM2_IRQHandler+0x7e0>)
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e02c      	b.n	80039ec <TIM2_IRQHandler+0x7ec>
 8003992:	bf00      	nop
 8003994:	f3af 8000 	nop.w
 8003998:	20000000 	.word	0x20000000
 800399c:	404ca5dc 	.word	0x404ca5dc
 80039a0:	20000750 	.word	0x20000750
 80039a4:	2000064c 	.word	0x2000064c
 80039a8:	20000638 	.word	0x20000638
 80039ac:	200005bc 	.word	0x200005bc
 80039b0:	200002e0 	.word	0x200002e0
 80039b4:	20000354 	.word	0x20000354
 80039b8:	2000027c 	.word	0x2000027c
 80039bc:	2000042c 	.word	0x2000042c
 80039c0:	200003bc 	.word	0x200003bc
 80039c4:	2000027e 	.word	0x2000027e
 80039c8:	200004c8 	.word	0x200004c8
 80039cc:	38001203 	.word	0x38001203
 80039d0:	2000073c 	.word	0x2000073c
 80039d4:	20000640 	.word	0x20000640
 80039d8:	3c8efa35 	.word	0x3c8efa35
 80039dc:	2000063c 	.word	0x2000063c
 80039e0:	20000740 	.word	0x20000740
 80039e4:	2000072c 	.word	0x2000072c
 80039e8:	3e4ccccd 	.word	0x3e4ccccd
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 80039ec:	4bb4      	ldr	r3, [pc, #720]	; (8003cc0 <TIM2_IRQHandler+0xac0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	49b4      	ldr	r1, [pc, #720]	; (8003cc4 <TIM2_IRQHandler+0xac4>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd f89c 	bl	8000b30 <__aeabi_fsub>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4bb0      	ldr	r3, [pc, #704]	; (8003cc0 <TIM2_IRQHandler+0xac0>)
 80039fe:	601a      	str	r2, [r3, #0]

  AnglePitch=0.998*AnglePitchGyro + 0.002*AnglePitchAccel;
 8003a00:	4bb1      	ldr	r3, [pc, #708]	; (8003cc8 <TIM2_IRQHandler+0xac8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc fd0f 	bl	8000428 <__aeabi_f2d>
 8003a0a:	a3a5      	add	r3, pc, #660	; (adr r3, 8003ca0 <TIM2_IRQHandler+0xaa0>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fd62 	bl	80004d8 <__aeabi_dmul>
 8003a14:	4603      	mov	r3, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	4625      	mov	r5, r4
 8003a1a:	461c      	mov	r4, r3
 8003a1c:	4bab      	ldr	r3, [pc, #684]	; (8003ccc <TIM2_IRQHandler+0xacc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fd01 	bl	8000428 <__aeabi_f2d>
 8003a26:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ca8 <TIM2_IRQHandler+0xaa8>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fd54 	bl	80004d8 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fc fb98 	bl	800016c <__adddf3>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4618      	mov	r0, r3
 8003a42:	4621      	mov	r1, r4
 8003a44:	f7fd f820 	bl	8000a88 <__aeabi_d2f>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4ba1      	ldr	r3, [pc, #644]	; (8003cd0 <TIM2_IRQHandler+0xad0>)
 8003a4c:	601a      	str	r2, [r3, #0]
  AngleRoll=0.998*AngleRollGyro + 0.002*AngleRollAccel;
 8003a4e:	4ba1      	ldr	r3, [pc, #644]	; (8003cd4 <TIM2_IRQHandler+0xad4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fce8 	bl	8000428 <__aeabi_f2d>
 8003a58:	a391      	add	r3, pc, #580	; (adr r3, 8003ca0 <TIM2_IRQHandler+0xaa0>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fd3b 	bl	80004d8 <__aeabi_dmul>
 8003a62:	4603      	mov	r3, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4625      	mov	r5, r4
 8003a68:	461c      	mov	r4, r3
 8003a6a:	4b95      	ldr	r3, [pc, #596]	; (8003cc0 <TIM2_IRQHandler+0xac0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fcda 	bl	8000428 <__aeabi_f2d>
 8003a74:	a38c      	add	r3, pc, #560	; (adr r3, 8003ca8 <TIM2_IRQHandler+0xaa8>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f7fc fd2d 	bl	80004d8 <__aeabi_dmul>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4620      	mov	r0, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7fc fb71 	bl	800016c <__adddf3>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4621      	mov	r1, r4
 8003a92:	f7fc fff9 	bl	8000a88 <__aeabi_d2f>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b8f      	ldr	r3, [pc, #572]	; (8003cd8 <TIM2_IRQHandler+0xad8>)
 8003a9a:	601a      	str	r2, [r3, #0]


  //PID input Filtered
  PitchGyroPIDin =  (PitchGyroPIDin * 0.7) + (AnglePitch * 0.3);
 8003a9c:	4b8f      	ldr	r3, [pc, #572]	; (8003cdc <TIM2_IRQHandler+0xadc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fcc1 	bl	8000428 <__aeabi_f2d>
 8003aa6:	a382      	add	r3, pc, #520	; (adr r3, 8003cb0 <TIM2_IRQHandler+0xab0>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f7fc fd14 	bl	80004d8 <__aeabi_dmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	4625      	mov	r5, r4
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <TIM2_IRQHandler+0xad0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fc fcb3 	bl	8000428 <__aeabi_f2d>
 8003ac2:	a37d      	add	r3, pc, #500	; (adr r3, 8003cb8 <TIM2_IRQHandler+0xab8>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fd06 	bl	80004d8 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f7fc fb4a 	bl	800016c <__adddf3>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4618      	mov	r0, r3
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f7fc ffd2 	bl	8000a88 <__aeabi_d2f>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b7d      	ldr	r3, [pc, #500]	; (8003cdc <TIM2_IRQHandler+0xadc>)
 8003ae8:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (AngleRoll * 0.3);
 8003aea:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <TIM2_IRQHandler+0xae0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fc9a 	bl	8000428 <__aeabi_f2d>
 8003af4:	a36e      	add	r3, pc, #440	; (adr r3, 8003cb0 <TIM2_IRQHandler+0xab0>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fced 	bl	80004d8 <__aeabi_dmul>
 8003afe:	4603      	mov	r3, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	4625      	mov	r5, r4
 8003b04:	461c      	mov	r4, r3
 8003b06:	4b74      	ldr	r3, [pc, #464]	; (8003cd8 <TIM2_IRQHandler+0xad8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fc8c 	bl	8000428 <__aeabi_f2d>
 8003b10:	a369      	add	r3, pc, #420	; (adr r3, 8003cb8 <TIM2_IRQHandler+0xab8>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fcdf 	bl	80004d8 <__aeabi_dmul>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4620      	mov	r0, r4
 8003b20:	4629      	mov	r1, r5
 8003b22:	f7fc fb23 	bl	800016c <__adddf3>
 8003b26:	4603      	mov	r3, r0
 8003b28:	460c      	mov	r4, r1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f7fc ffab 	bl	8000a88 <__aeabi_d2f>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <TIM2_IRQHandler+0xae0>)
 8003b36:	601a      	str	r2, [r3, #0]
  YawGyroPIDin = (YawGyroPIDin * 0.7) + (GyroZcal * GYROFACTORANGLEDEG * 0.3);
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <TIM2_IRQHandler+0xae4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fc73 	bl	8000428 <__aeabi_f2d>
 8003b42:	a35b      	add	r3, pc, #364	; (adr r3, 8003cb0 <TIM2_IRQHandler+0xab0>)
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f7fc fcc6 	bl	80004d8 <__aeabi_dmul>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	4625      	mov	r5, r4
 8003b52:	461c      	mov	r4, r3
 8003b54:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <TIM2_IRQHandler+0xae8>)
 8003b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd f89e 	bl	8000c9c <__aeabi_i2f>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4962      	ldr	r1, [pc, #392]	; (8003cec <TIM2_IRQHandler+0xaec>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd f8ed 	bl	8000d44 <__aeabi_fmul>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fc5b 	bl	8000428 <__aeabi_f2d>
 8003b72:	a351      	add	r3, pc, #324	; (adr r3, 8003cb8 <TIM2_IRQHandler+0xab8>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fcae 	bl	80004d8 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4620      	mov	r0, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fc faf2 	bl	800016c <__adddf3>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	4621      	mov	r1, r4
 8003b90:	f7fc ff7a 	bl	8000a88 <__aeabi_d2f>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <TIM2_IRQHandler+0xae4>)
 8003b98:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA
  //Throttle UP->DOWN 0-100 ->scaling
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,FlashDataActive.minthrottle,FlashDataActive.maxthrottle);
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <TIM2_IRQHandler+0xaf0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd f878 	bl	8000c94 <__aeabi_ui2f>
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	4a51      	ldr	r2, [pc, #324]	; (8003cf8 <TIM2_IRQHandler+0xaf8>)
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	f000 fbb9 	bl	800432c <ScaleDataFl>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <TIM2_IRQHandler+0xafc>)
 8003bbe:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-FlashDataActive.maxpitchdegree,FlashDataActive.maxpitchdegree);
 8003bc0:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <TIM2_IRQHandler+0xb00>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd f865 	bl	8000c94 <__aeabi_ui2f>
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003bd2:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <TIM2_IRQHandler+0xaf8>)
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	f000 fba4 	bl	800432c <ScaleDataFl>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <TIM2_IRQHandler+0xb04>)
 8003be8:	601a      	str	r2, [r3, #0]
  //Invert
  PitchINscaled*=(-1);
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <TIM2_IRQHandler+0xb04>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <TIM2_IRQHandler+0xb04>)
 8003bf4:	6013      	str	r3, [r2, #0]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-FlashDataActive.maxrolldegree,FlashDataActive.maxrolldegree);
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <TIM2_IRQHandler+0xb08>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd f84a 	bl	8000c94 <__aeabi_ui2f>
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003c08:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <TIM2_IRQHandler+0xaf8>)
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	f000 fb89 	bl	800432c <ScaleDataFl>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <TIM2_IRQHandler+0xb0c>)
 8003c1e:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 ->scaling
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-FlashDataActive.maxyawdegree,FlashDataActive.maxyawdegree);
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <TIM2_IRQHandler+0xb10>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd f835 	bl	8000c94 <__aeabi_ui2f>
 8003c2a:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <TIM2_IRQHandler+0xaf8>)
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	f000 fb74 	bl	800432c <ScaleDataFl>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <TIM2_IRQHandler+0xb14>)
 8003c48:	601a      	str	r2, [r3, #0]

  //MOTOR CONTROL

  //PID
  pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <TIM2_IRQHandler+0xb04>)
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <TIM2_IRQHandler+0xadc>)
 8003c50:	681e      	ldr	r6, [r3, #0]
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c54:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c5a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8003c5e:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c60:	68dc      	ldr	r4, [r3, #12]
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f818 	bl	8000c9c <__aeabi_i2f>
 8003c6c:	4682      	mov	sl, r0
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <TIM2_IRQHandler+0xaf4>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f812 	bl	8000c9c <__aeabi_i2f>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <TIM2_IRQHandler+0xb18>)
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <TIM2_IRQHandler+0xb1c>)
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	9400      	str	r4, [sp, #0]
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	f000 fb81 	bl	8004398 <pid>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <TIM2_IRQHandler+0xb20>)
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e042      	b.n	8003d24 <TIM2_IRQHandler+0xb24>
 8003c9e:	bf00      	nop
 8003ca0:	b22d0e56 	.word	0xb22d0e56
 8003ca4:	3fefef9d 	.word	0x3fefef9d
 8003ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003cac:	3f60624d 	.word	0x3f60624d
 8003cb0:	66666666 	.word	0x66666666
 8003cb4:	3fe66666 	.word	0x3fe66666
 8003cb8:	33333333 	.word	0x33333333
 8003cbc:	3fd33333 	.word	0x3fd33333
 8003cc0:	2000072c 	.word	0x2000072c
 8003cc4:	400ccccd 	.word	0x400ccccd
 8003cc8:	2000073c 	.word	0x2000073c
 8003ccc:	20000740 	.word	0x20000740
 8003cd0:	20000730 	.word	0x20000730
 8003cd4:	20000640 	.word	0x20000640
 8003cd8:	20000768 	.word	0x20000768
 8003cdc:	2000023c 	.word	0x2000023c
 8003ce0:	20000240 	.word	0x20000240
 8003ce4:	20000244 	.word	0x20000244
 8003ce8:	200004c8 	.word	0x200004c8
 8003cec:	3c7a232d 	.word	0x3c7a232d
 8003cf0:	20000514 	.word	0x20000514
 8003cf4:	20000524 	.word	0x20000524
 8003cf8:	42c80000 	.word	0x42c80000
 8003cfc:	2000022c 	.word	0x2000022c
 8003d00:	20000624 	.word	0x20000624
 8003d04:	20000230 	.word	0x20000230
 8003d08:	20000278 	.word	0x20000278
 8003d0c:	20000234 	.word	0x20000234
 8003d10:	20000484 	.word	0x20000484
 8003d14:	20000238 	.word	0x20000238
 8003d18:	20000258 	.word	0x20000258
 8003d1c:	20000254 	.word	0x20000254
 8003d20:	20000248 	.word	0x20000248
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 8003d24:	4b97      	ldr	r3, [pc, #604]	; (8003f84 <TIM2_IRQHandler+0xd84>)
 8003d26:	681d      	ldr	r5, [r3, #0]
 8003d28:	4b97      	ldr	r3, [pc, #604]	; (8003f88 <TIM2_IRQHandler+0xd88>)
 8003d2a:	681e      	ldr	r6, [r3, #0]
 8003d2c:	4b97      	ldr	r3, [pc, #604]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d2e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003d32:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d34:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8003d38:	4b94      	ldr	r3, [pc, #592]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d3a:	699c      	ldr	r4, [r3, #24]
 8003d3c:	4b93      	ldr	r3, [pc, #588]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc ffab 	bl	8000c9c <__aeabi_i2f>
 8003d46:	4682      	mov	sl, r0
 8003d48:	4b90      	ldr	r3, [pc, #576]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc ffa5 	bl	8000c9c <__aeabi_i2f>
 8003d52:	4603      	mov	r3, r0
 8003d54:	9304      	str	r3, [sp, #16]
 8003d56:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <TIM2_IRQHandler+0xd90>)
 8003d5c:	9302      	str	r3, [sp, #8]
 8003d5e:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <TIM2_IRQHandler+0xd94>)
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	9400      	str	r4, [sp, #0]
 8003d64:	464b      	mov	r3, r9
 8003d66:	4642      	mov	r2, r8
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 fb14 	bl	8004398 <pid>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b89      	ldr	r3, [pc, #548]	; (8003f98 <TIM2_IRQHandler+0xd98>)
 8003d74:	601a      	str	r2, [r3, #0]
  pid_output_yaw = pid(YawINscaled, YawGyroPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <TIM2_IRQHandler+0xd9c>)
 8003d78:	681d      	ldr	r5, [r3, #0]
 8003d7a:	4b89      	ldr	r3, [pc, #548]	; (8003fa0 <TIM2_IRQHandler+0xda0>)
 8003d7c:	681e      	ldr	r6, [r3, #0]
 8003d7e:	4b83      	ldr	r3, [pc, #524]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d80:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003d84:	4b81      	ldr	r3, [pc, #516]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d86:	f8d3 9020 	ldr.w	r9, [r3, #32]
 8003d8a:	4b80      	ldr	r3, [pc, #512]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d8e:	4b7f      	ldr	r3, [pc, #508]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc ff82 	bl	8000c9c <__aeabi_i2f>
 8003d98:	4682      	mov	sl, r0
 8003d9a:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <TIM2_IRQHandler+0xd8c>)
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc ff7c 	bl	8000c9c <__aeabi_i2f>
 8003da4:	4603      	mov	r3, r0
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	f8cd a00c 	str.w	sl, [sp, #12]
 8003dac:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <TIM2_IRQHandler+0xda4>)
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <TIM2_IRQHandler+0xda8>)
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	9400      	str	r4, [sp, #0]
 8003db6:	464b      	mov	r3, r9
 8003db8:	4642      	mov	r2, r8
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 faeb 	bl	8004398 <pid>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b79      	ldr	r3, [pc, #484]	; (8003fac <TIM2_IRQHandler+0xdac>)
 8003dc6:	601a      	str	r2, [r3, #0]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 8003dc8:	4b79      	ldr	r3, [pc, #484]	; (8003fb0 <TIM2_IRQHandler+0xdb0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d102      	bne.n	8003dd6 <TIM2_IRQHandler+0xbd6>
 8003dd0:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 8003dd6:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <TIM2_IRQHandler+0xdb8>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b78      	ldr	r3, [pc, #480]	; (8003fbc <TIM2_IRQHandler+0xdbc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d00f      	beq.n	8003e02 <TIM2_IRQHandler+0xc02>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <TIM2_IRQHandler+0xdbc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10b      	bne.n	8003e02 <TIM2_IRQHandler+0xc02>
 8003dea:	4b75      	ldr	r3, [pc, #468]	; (8003fc0 <TIM2_IRQHandler+0xdc0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4975      	ldr	r1, [pc, #468]	; (8003fc4 <TIM2_IRQHandler+0xdc4>)
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd f945 	bl	8001080 <__aeabi_fcmplt>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <TIM2_IRQHandler+0xc02>
 8003dfc:	4b6d      	ldr	r3, [pc, #436]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003dfe:	2202      	movs	r2, #2
 8003e00:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 8003e02:	4b6e      	ldr	r3, [pc, #440]	; (8003fbc <TIM2_IRQHandler+0xdbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <TIM2_IRQHandler+0xc10>
 8003e0a:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8003e10:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <TIM2_IRQHandler+0xdc8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11a      	bne.n	8003e4e <TIM2_IRQHandler+0xc4e>
 8003e18:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <TIM2_IRQHandler+0xdcc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d116      	bne.n	8003e4e <TIM2_IRQHandler+0xc4e>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <TIM2_IRQHandler+0xdd0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d112      	bne.n	8003e4e <TIM2_IRQHandler+0xc4e>
 8003e28:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10e      	bne.n	8003e4e <TIM2_IRQHandler+0xc4e>
  {
	  GyroCalibStatus=1;
 8003e30:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <TIM2_IRQHandler+0xdd0>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
	  SUMGyroX=0;
 8003e36:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <TIM2_IRQHandler+0xdd4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
	  SUMGyroY=0;
 8003e3c:	4b66      	ldr	r3, [pc, #408]	; (8003fd8 <TIM2_IRQHandler+0xdd8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
	  SUMGyroZ=0;
 8003e42:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <TIM2_IRQHandler+0xddc>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
	  Gyrocalibcount=0;
 8003e48:	4b65      	ldr	r3, [pc, #404]	; (8003fe0 <TIM2_IRQHandler+0xde0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
  }
  if(GyroCalibStatus==1)
 8003e4e:	4b60      	ldr	r3, [pc, #384]	; (8003fd0 <TIM2_IRQHandler+0xdd0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d150      	bne.n	8003ef8 <TIM2_IRQHandler+0xcf8>
  {
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <TIM2_IRQHandler+0xde4>)
 8003e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b5d      	ldr	r3, [pc, #372]	; (8003fd4 <TIM2_IRQHandler+0xdd4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	4a5b      	ldr	r2, [pc, #364]	; (8003fd4 <TIM2_IRQHandler+0xdd4>)
 8003e66:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 8003e68:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <TIM2_IRQHandler+0xde4>)
 8003e6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <TIM2_IRQHandler+0xdd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <TIM2_IRQHandler+0xdd8>)
 8003e78:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 8003e7a:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <TIM2_IRQHandler+0xde4>)
 8003e7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <TIM2_IRQHandler+0xddc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <TIM2_IRQHandler+0xddc>)
 8003e8a:	6013      	str	r3, [r2, #0]
	  Gyrocalibcount++;
 8003e8c:	4b54      	ldr	r3, [pc, #336]	; (8003fe0 <TIM2_IRQHandler+0xde0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <TIM2_IRQHandler+0xde0>)
 8003e94:	6013      	str	r3, [r2, #0]

	  if(Gyrocalibcount==GYROCALIBVALUES)
 8003e96:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <TIM2_IRQHandler+0xde0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9e:	d12b      	bne.n	8003ef8 <TIM2_IRQHandler+0xcf8>
	  {

		  GyroXOff=SUMGyroX/GYROCALIBVALUES;
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <TIM2_IRQHandler+0xdd4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <TIM2_IRQHandler+0xde8>)
 8003ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8003eaa:	1192      	asrs	r2, r2, #6
 8003eac:	17db      	asrs	r3, r3, #31
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <TIM2_IRQHandler+0xdec>)
 8003eb4:	801a      	strh	r2, [r3, #0]
		  GyroYOff=SUMGyroY/GYROCALIBVALUES;
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <TIM2_IRQHandler+0xdd8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <TIM2_IRQHandler+0xde8>)
 8003ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ec0:	1192      	asrs	r2, r2, #6
 8003ec2:	17db      	asrs	r3, r3, #31
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <TIM2_IRQHandler+0xdf0>)
 8003eca:	801a      	strh	r2, [r3, #0]
		  GyroZOff=SUMGyroZ/GYROCALIBVALUES;
 8003ecc:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <TIM2_IRQHandler+0xddc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a45      	ldr	r2, [pc, #276]	; (8003fe8 <TIM2_IRQHandler+0xde8>)
 8003ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed6:	1192      	asrs	r2, r2, #6
 8003ed8:	17db      	asrs	r3, r3, #31
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b21a      	sxth	r2, r3
 8003ede:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <TIM2_IRQHandler+0xdf4>)
 8003ee0:	801a      	strh	r2, [r3, #0]

		  //startup angles Accel to Gyro transfer
		  AnglePitchGyro=AnglePitchAccel;
 8003ee2:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <TIM2_IRQHandler+0xdf8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a45      	ldr	r2, [pc, #276]	; (8003ffc <TIM2_IRQHandler+0xdfc>)
 8003ee8:	6013      	str	r3, [r2, #0]
		  AngleRollGyro=AngleRollAccel;
 8003eea:	4b45      	ldr	r3, [pc, #276]	; (8004000 <TIM2_IRQHandler+0xe00>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a45      	ldr	r2, [pc, #276]	; (8004004 <TIM2_IRQHandler+0xe04>)
 8003ef0:	6013      	str	r3, [r2, #0]

		  GyroCalibStatus=0;
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <TIM2_IRQHandler+0xdd0>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
	  }
  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d10e      	bne.n	8003f1e <TIM2_IRQHandler+0xd1e>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <TIM2_IRQHandler+0xdf8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3d      	ldr	r2, [pc, #244]	; (8003ffc <TIM2_IRQHandler+0xdfc>)
 8003f06:	6013      	str	r3, [r2, #0]
	  AngleRollGyro=AngleRollAccel;
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <TIM2_IRQHandler+0xe00>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <TIM2_IRQHandler+0xe04>)
 8003f0e:	6013      	str	r3, [r2, #0]

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 8003f10:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <TIM2_IRQHandler+0xdd0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <TIM2_IRQHandler+0xd1e>
	  MotorStatus=MOTORRUNNING;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <TIM2_IRQHandler+0xdb4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f040 81a0 	bne.w	8004268 <TIM2_IRQHandler+0x1068>
  {
  	  case MOTORRUNNING:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - pid_output_pitch - pid_output_roll + pid_output_yaw;
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <TIM2_IRQHandler+0xdc0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4936      	ldr	r1, [pc, #216]	; (8004008 <TIM2_IRQHandler+0xe08>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fe00 	bl	8000b34 <__addsf3>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b34      	ldr	r3, [pc, #208]	; (800400c <TIM2_IRQHandler+0xe0c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fc fdf6 	bl	8000b30 <__aeabi_fsub>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <TIM2_IRQHandler+0xd98>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fc fdee 	bl	8000b30 <__aeabi_fsub>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <TIM2_IRQHandler+0xdac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fc fde8 	bl	8000b34 <__addsf3>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd f8b2 	bl	80010d0 <__aeabi_f2uiz>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <TIM2_IRQHandler+0xe10>)
 8003f70:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - pid_output_pitch + pid_output_roll - pid_output_yaw;
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <TIM2_IRQHandler+0xdc0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4924      	ldr	r1, [pc, #144]	; (8004008 <TIM2_IRQHandler+0xe08>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fddb 	bl	8000b34 <__addsf3>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e048      	b.n	8004014 <TIM2_IRQHandler+0xe14>
 8003f82:	bf00      	nop
 8003f84:	20000234 	.word	0x20000234
 8003f88:	20000240 	.word	0x20000240
 8003f8c:	20000524 	.word	0x20000524
 8003f90:	20000260 	.word	0x20000260
 8003f94:	2000025c 	.word	0x2000025c
 8003f98:	2000024c 	.word	0x2000024c
 8003f9c:	20000238 	.word	0x20000238
 8003fa0:	20000244 	.word	0x20000244
 8003fa4:	20000268 	.word	0x20000268
 8003fa8:	20000264 	.word	0x20000264
 8003fac:	20000250 	.word	0x20000250
 8003fb0:	20000750 	.word	0x20000750
 8003fb4:	2000020c 	.word	0x2000020c
 8003fb8:	20000770 	.word	0x20000770
 8003fbc:	200004cc 	.word	0x200004cc
 8003fc0:	2000022c 	.word	0x2000022c
 8003fc4:	43480000 	.word	0x43480000
 8003fc8:	20000744 	.word	0x20000744
 8003fcc:	2000062c 	.word	0x2000062c
 8003fd0:	20000210 	.word	0x20000210
 8003fd4:	20000630 	.word	0x20000630
 8003fd8:	200004d0 	.word	0x200004d0
 8003fdc:	20000430 	.word	0x20000430
 8003fe0:	20000228 	.word	0x20000228
 8003fe4:	200005bc 	.word	0x200005bc
 8003fe8:	10624dd3 	.word	0x10624dd3
 8003fec:	20000354 	.word	0x20000354
 8003ff0:	2000042c 	.word	0x2000042c
 8003ff4:	2000027e 	.word	0x2000027e
 8003ff8:	20000740 	.word	0x20000740
 8003ffc:	2000073c 	.word	0x2000073c
 8004000:	2000072c 	.word	0x2000072c
 8004004:	20000640 	.word	0x20000640
 8004008:	447a0000 	.word	0x447a0000
 800400c:	20000248 	.word	0x20000248
 8004010:	2000074c 	.word	0x2000074c
 8004014:	461a      	mov	r2, r3
 8004016:	4b8a      	ldr	r3, [pc, #552]	; (8004240 <TIM2_IRQHandler+0x1040>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7fc fd87 	bl	8000b30 <__aeabi_fsub>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	4b87      	ldr	r3, [pc, #540]	; (8004244 <TIM2_IRQHandler+0x1044>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7fc fd81 	bl	8000b34 <__addsf3>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b84      	ldr	r3, [pc, #528]	; (8004248 <TIM2_IRQHandler+0x1048>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7fc fd77 	bl	8000b30 <__aeabi_fsub>
 8004042:	4603      	mov	r3, r0
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd f843 	bl	80010d0 <__aeabi_f2uiz>
 800404a:	4602      	mov	r2, r0
 800404c:	4b7f      	ldr	r3, [pc, #508]	; (800424c <TIM2_IRQHandler+0x104c>)
 800404e:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + pid_output_pitch + pid_output_roll + pid_output_yaw;
 8004050:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <TIM2_IRQHandler+0x1050>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	497f      	ldr	r1, [pc, #508]	; (8004254 <TIM2_IRQHandler+0x1054>)
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fd6c 	bl	8000b34 <__addsf3>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b77      	ldr	r3, [pc, #476]	; (8004240 <TIM2_IRQHandler+0x1040>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7fc fd64 	bl	8000b34 <__addsf3>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	4b74      	ldr	r3, [pc, #464]	; (8004244 <TIM2_IRQHandler+0x1044>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fc fd5c 	bl	8000b34 <__addsf3>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	4b71      	ldr	r3, [pc, #452]	; (8004248 <TIM2_IRQHandler+0x1048>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fc fd54 	bl	8000b34 <__addsf3>
 800408c:	4603      	mov	r3, r0
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd f81e 	bl	80010d0 <__aeabi_f2uiz>
 8004094:	4602      	mov	r2, r0
 8004096:	4b70      	ldr	r3, [pc, #448]	; (8004258 <TIM2_IRQHandler+0x1058>)
 8004098:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + pid_output_pitch - pid_output_roll - pid_output_yaw;
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <TIM2_IRQHandler+0x1050>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	496d      	ldr	r1, [pc, #436]	; (8004254 <TIM2_IRQHandler+0x1054>)
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fd47 	bl	8000b34 <__addsf3>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <TIM2_IRQHandler+0x1040>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7fc fd3f 	bl	8000b34 <__addsf3>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b62      	ldr	r3, [pc, #392]	; (8004244 <TIM2_IRQHandler+0x1044>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fc fd35 	bl	8000b30 <__aeabi_fsub>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b5f      	ldr	r3, [pc, #380]	; (8004248 <TIM2_IRQHandler+0x1048>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fc fd2d 	bl	8000b30 <__aeabi_fsub>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fff9 	bl	80010d0 <__aeabi_f2uiz>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b5e      	ldr	r3, [pc, #376]	; (800425c <TIM2_IRQHandler+0x105c>)
 80040e2:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ FlashDataActive.minthrottle))PWM_Mot1=(1000+ FlashDataActive.minthrottle);
 80040e4:	4b5e      	ldr	r3, [pc, #376]	; (8004260 <TIM2_IRQHandler+0x1060>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fdd3 	bl	8000c94 <__aeabi_ui2f>
 80040ee:	4604      	mov	r4, r0
 80040f0:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <TIM2_IRQHandler+0x1064>)
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	4957      	ldr	r1, [pc, #348]	; (8004254 <TIM2_IRQHandler+0x1054>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fd1c 	bl	8000b34 <__addsf3>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4619      	mov	r1, r3
 8004100:	4620      	mov	r0, r4
 8004102:	f7fc ffbd 	bl	8001080 <__aeabi_fcmplt>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <TIM2_IRQHandler+0xf26>
 800410c:	4b55      	ldr	r3, [pc, #340]	; (8004264 <TIM2_IRQHandler+0x1064>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	4950      	ldr	r1, [pc, #320]	; (8004254 <TIM2_IRQHandler+0x1054>)
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fd0e 	bl	8000b34 <__addsf3>
 8004118:	4603      	mov	r3, r0
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc ffd8 	bl	80010d0 <__aeabi_f2uiz>
 8004120:	4602      	mov	r2, r0
 8004122:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <TIM2_IRQHandler+0x1060>)
 8004124:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ FlashDataActive.minthrottle))PWM_Mot2=(1000+ FlashDataActive.minthrottle);
 8004126:	4b49      	ldr	r3, [pc, #292]	; (800424c <TIM2_IRQHandler+0x104c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc fdb2 	bl	8000c94 <__aeabi_ui2f>
 8004130:	4604      	mov	r4, r0
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <TIM2_IRQHandler+0x1064>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	4947      	ldr	r1, [pc, #284]	; (8004254 <TIM2_IRQHandler+0x1054>)
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fcfb 	bl	8000b34 <__addsf3>
 800413e:	4603      	mov	r3, r0
 8004140:	4619      	mov	r1, r3
 8004142:	4620      	mov	r0, r4
 8004144:	f7fc ff9c 	bl	8001080 <__aeabi_fcmplt>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <TIM2_IRQHandler+0xf68>
 800414e:	4b45      	ldr	r3, [pc, #276]	; (8004264 <TIM2_IRQHandler+0x1064>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	4940      	ldr	r1, [pc, #256]	; (8004254 <TIM2_IRQHandler+0x1054>)
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc fced 	bl	8000b34 <__addsf3>
 800415a:	4603      	mov	r3, r0
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc ffb7 	bl	80010d0 <__aeabi_f2uiz>
 8004162:	4602      	mov	r2, r0
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <TIM2_IRQHandler+0x104c>)
 8004166:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ FlashDataActive.minthrottle))PWM_Mot3=(1000+ FlashDataActive.minthrottle);
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <TIM2_IRQHandler+0x1058>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fc fd91 	bl	8000c94 <__aeabi_ui2f>
 8004172:	4604      	mov	r4, r0
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <TIM2_IRQHandler+0x1064>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	4936      	ldr	r1, [pc, #216]	; (8004254 <TIM2_IRQHandler+0x1054>)
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fcda 	bl	8000b34 <__addsf3>
 8004180:	4603      	mov	r3, r0
 8004182:	4619      	mov	r1, r3
 8004184:	4620      	mov	r0, r4
 8004186:	f7fc ff7b 	bl	8001080 <__aeabi_fcmplt>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <TIM2_IRQHandler+0xfaa>
 8004190:	4b34      	ldr	r3, [pc, #208]	; (8004264 <TIM2_IRQHandler+0x1064>)
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	492f      	ldr	r1, [pc, #188]	; (8004254 <TIM2_IRQHandler+0x1054>)
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fccc 	bl	8000b34 <__addsf3>
 800419c:	4603      	mov	r3, r0
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc ff96 	bl	80010d0 <__aeabi_f2uiz>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <TIM2_IRQHandler+0x1058>)
 80041a8:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ FlashDataActive.minthrottle))PWM_Mot4=(1000+ FlashDataActive.minthrottle);
 80041aa:	4b2c      	ldr	r3, [pc, #176]	; (800425c <TIM2_IRQHandler+0x105c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc fd70 	bl	8000c94 <__aeabi_ui2f>
 80041b4:	4604      	mov	r4, r0
 80041b6:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <TIM2_IRQHandler+0x1064>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	4926      	ldr	r1, [pc, #152]	; (8004254 <TIM2_IRQHandler+0x1054>)
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc fcb9 	bl	8000b34 <__addsf3>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7fc ff5a 	bl	8001080 <__aeabi_fcmplt>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <TIM2_IRQHandler+0xfec>
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <TIM2_IRQHandler+0x1064>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	491f      	ldr	r1, [pc, #124]	; (8004254 <TIM2_IRQHandler+0x1054>)
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc fcab 	bl	8000b34 <__addsf3>
 80041de:	4603      	mov	r3, r0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc ff75 	bl	80010d0 <__aeabi_f2uiz>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b1c      	ldr	r3, [pc, #112]	; (800425c <TIM2_IRQHandler+0x105c>)
 80041ea:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <TIM2_IRQHandler+0x1060>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f240 729e 	movw	r2, #1950	; 0x79e
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d903      	bls.n	8004200 <TIM2_IRQHandler+0x1000>
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <TIM2_IRQHandler+0x1060>)
 80041fa:	f240 729e 	movw	r2, #1950	; 0x79e
 80041fe:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <TIM2_IRQHandler+0x104c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f240 729e 	movw	r2, #1950	; 0x79e
 8004208:	4293      	cmp	r3, r2
 800420a:	d903      	bls.n	8004214 <TIM2_IRQHandler+0x1014>
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <TIM2_IRQHandler+0x104c>)
 800420e:	f240 729e 	movw	r2, #1950	; 0x79e
 8004212:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <TIM2_IRQHandler+0x1058>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f240 729e 	movw	r2, #1950	; 0x79e
 800421c:	4293      	cmp	r3, r2
 800421e:	d903      	bls.n	8004228 <TIM2_IRQHandler+0x1028>
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <TIM2_IRQHandler+0x1058>)
 8004222:	f240 729e 	movw	r2, #1950	; 0x79e
 8004226:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <TIM2_IRQHandler+0x105c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f240 729e 	movw	r2, #1950	; 0x79e
 8004230:	4293      	cmp	r3, r2
 8004232:	d942      	bls.n	80042ba <TIM2_IRQHandler+0x10ba>
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <TIM2_IRQHandler+0x105c>)
 8004236:	f240 729e 	movw	r2, #1950	; 0x79e
 800423a:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 800423c:	e03d      	b.n	80042ba <TIM2_IRQHandler+0x10ba>
 800423e:	bf00      	nop
 8004240:	20000248 	.word	0x20000248
 8004244:	2000024c 	.word	0x2000024c
 8004248:	20000250 	.word	0x20000250
 800424c:	20000648 	.word	0x20000648
 8004250:	2000022c 	.word	0x2000022c
 8004254:	447a0000 	.word	0x447a0000
 8004258:	20000644 	.word	0x20000644
 800425c:	20000734 	.word	0x20000734
 8004260:	2000074c 	.word	0x2000074c
 8004264:	20000524 	.word	0x20000524

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <TIM2_IRQHandler+0x10fc>)
 800426a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800426e:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 8004270:	4b23      	ldr	r3, [pc, #140]	; (8004300 <TIM2_IRQHandler+0x1100>)
 8004272:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004276:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <TIM2_IRQHandler+0x1104>)
 800427a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800427e:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <TIM2_IRQHandler+0x1108>)
 8004282:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004286:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <TIM2_IRQHandler+0x110c>)
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <TIM2_IRQHandler+0x1110>)
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 8004298:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <TIM2_IRQHandler+0x1114>)
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <TIM2_IRQHandler+0x1118>)
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <TIM2_IRQHandler+0x111c>)
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <TIM2_IRQHandler+0x1120>)
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 80042b8:	e000      	b.n	80042bc <TIM2_IRQHandler+0x10bc>
  	  	  	  }break;
 80042ba:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <TIM2_IRQHandler+0x1124>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <TIM2_IRQHandler+0x10fc>)
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <TIM2_IRQHandler+0x1124>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <TIM2_IRQHandler+0x1100>)
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <TIM2_IRQHandler+0x1124>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <TIM2_IRQHandler+0x1104>)
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <TIM2_IRQHandler+0x1124>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <TIM2_IRQHandler+0x1108>)
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042ea:	480f      	ldr	r0, [pc, #60]	; (8004328 <TIM2_IRQHandler+0x1128>)
 80042ec:	f001 faec 	bl	80058c8 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 80042f0:	bf00      	nop
 80042f2:	3704      	adds	r7, #4
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	2000074c 	.word	0x2000074c
 8004300:	20000648 	.word	0x20000648
 8004304:	20000644 	.word	0x20000644
 8004308:	20000734 	.word	0x20000734
 800430c:	20000254 	.word	0x20000254
 8004310:	20000258 	.word	0x20000258
 8004314:	2000025c 	.word	0x2000025c
 8004318:	20000260 	.word	0x20000260
 800431c:	20000264 	.word	0x20000264
 8004320:	20000268 	.word	0x20000268
 8004324:	200004d4 	.word	0x200004d4
 8004328:	40010c00 	.word	0x40010c00

0800432c <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 800433a:	6839      	ldr	r1, [r7, #0]
 800433c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433e:	f7fc fbf7 	bl	8000b30 <__aeabi_fsub>
 8004342:	4603      	mov	r3, r0
 8004344:	461c      	mov	r4, r3
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fc fbf1 	bl	8000b30 <__aeabi_fsub>
 800434e:	4603      	mov	r3, r0
 8004350:	4619      	mov	r1, r3
 8004352:	4620      	mov	r0, r4
 8004354:	f7fc fdaa 	bl	8000eac <__aeabi_fdiv>
 8004358:	4603      	mov	r3, r0
 800435a:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7fc fbe6 	bl	8000b30 <__aeabi_fsub>
 8004364:	4603      	mov	r3, r0
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc fceb 	bl	8000d44 <__aeabi_fmul>
 800436e:	4603      	mov	r3, r0
 8004370:	4619      	mov	r1, r3
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f7fc fbde 	bl	8000b34 <__addsf3>
 8004378:	4603      	mov	r3, r0
 800437a:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7fc fe7e 	bl	8001080 <__aeabi_fcmplt>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <ScaleDataFl+0x62>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	617b      	str	r3, [r7, #20]

	return out;
 800438e:	697b      	ldr	r3, [r7, #20]

}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd90      	pop	{r4, r7, pc}

08004398 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	68b8      	ldr	r0, [r7, #8]
 80043aa:	f7fc fbc1 	bl	8000b30 <__aeabi_fsub>
 80043ae:	4603      	mov	r3, r0
 80043b0:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	681c      	ldr	r4, [r3, #0]
 80043b6:	6939      	ldr	r1, [r7, #16]
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f7fc fcc3 	bl	8000d44 <__aeabi_fmul>
 80043be:	4603      	mov	r3, r0
 80043c0:	4619      	mov	r1, r3
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7fc fbb6 	bl	8000b34 <__addsf3>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043d8:	f7fc fe52 	bl	8001080 <__aeabi_fcmplt>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <pid+0x52>
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e010      	b.n	800440c <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fc fe42 	bl	8001080 <__aeabi_fcmplt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <pid+0x74>
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 800440c:	6939      	ldr	r1, [r7, #16]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fc98 	bl	8000d44 <__aeabi_fmul>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fc fb88 	bl	8000b34 <__addsf3>
 8004424:	4603      	mov	r3, r0
 8004426:	461c      	mov	r4, r3
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f7fc fb7e 	bl	8000b30 <__aeabi_fsub>
 8004434:	4603      	mov	r3, r0
 8004436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc fc83 	bl	8000d44 <__aeabi_fmul>
 800443e:	4603      	mov	r3, r0
 8004440:	4619      	mov	r1, r3
 8004442:	4620      	mov	r0, r4
 8004444:	f7fc fb76 	bl	8000b34 <__addsf3>
 8004448:	4603      	mov	r3, r0
 800444a:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 800444c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f7fc fe34 	bl	80010bc <__aeabi_fcmpgt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <pid+0xc8>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e00d      	b.n	800447c <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004466:	4619      	mov	r1, r3
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7fc fe09 	bl	8001080 <__aeabi_fcmplt>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <pid+0xe4>
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800447a:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	601a      	str	r2, [r3, #0]


	return out;
 8004482:	697b      	ldr	r3, [r7, #20]
}
 8004484:	4618      	mov	r0, r3
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd90      	pop	{r4, r7, pc}

0800448c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <_sbrk+0x50>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <_sbrk+0x16>
		heap_end = &end;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <_sbrk+0x50>)
 800449e:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <_sbrk+0x54>)
 80044a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <_sbrk+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <_sbrk+0x50>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	466a      	mov	r2, sp
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d907      	bls.n	80044c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80044b6:	f003 ff8d 	bl	80083d4 <__errno>
 80044ba:	4602      	mov	r2, r0
 80044bc:	230c      	movs	r3, #12
 80044be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c4:	e006      	b.n	80044d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <_sbrk+0x50>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	4a03      	ldr	r2, [pc, #12]	; (80044dc <_sbrk+0x50>)
 80044d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2000026c 	.word	0x2000026c
 80044e0:	200007a0 	.word	0x200007a0

080044e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <SystemInit+0x5c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <SystemInit+0x5c>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <SystemInit+0x5c>)
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4911      	ldr	r1, [pc, #68]	; (8004540 <SystemInit+0x5c>)
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <SystemInit+0x60>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <SystemInit+0x5c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <SystemInit+0x5c>)
 8004506:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <SystemInit+0x5c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <SystemInit+0x5c>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <SystemInit+0x5c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <SystemInit+0x5c>)
 8004522:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004526:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <SystemInit+0x5c>)
 800452a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800452e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <SystemInit+0x64>)
 8004532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004536:	609a      	str	r2, [r3, #8]
#endif 
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40021000 	.word	0x40021000
 8004544:	f8ff0000 	.word	0xf8ff0000
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800454c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800454e:	e003      	b.n	8004558 <LoopCopyDataInit>

08004550 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004552:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004554:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004556:	3104      	adds	r1, #4

08004558 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004558:	480a      	ldr	r0, [pc, #40]	; (8004584 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800455c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800455e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004560:	d3f6      	bcc.n	8004550 <CopyDataInit>
  ldr r2, =_sbss
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004564:	e002      	b.n	800456c <LoopFillZerobss>

08004566 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004566:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004568:	f842 3b04 	str.w	r3, [r2], #4

0800456c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800456e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004570:	d3f9      	bcc.n	8004566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004572:	f7ff ffb7 	bl	80044e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004576:	f003 ff33 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800457a:	f7fc fec5 	bl	8001308 <main>
  bx lr
 800457e:	4770      	bx	lr
  ldr r3, =_sidata
 8004580:	0800c1f0 	.word	0x0800c1f0
  ldr r0, =_sdata
 8004584:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004588:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800458c:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8004590:	2000079c 	.word	0x2000079c

08004594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004594:	e7fe      	b.n	8004594 <ADC1_2_IRQHandler>
	...

08004598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <HAL_Init+0x28>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <HAL_Init+0x28>)
 80045a2:	f043 0310 	orr.w	r3, r3, #16
 80045a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a8:	2003      	movs	r0, #3
 80045aa:	f000 fdf1 	bl	8005190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ae:	2002      	movs	r0, #2
 80045b0:	f000 f808 	bl	80045c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045b4:	f7fe fc3a 	bl	8002e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40022000 	.word	0x40022000

080045c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_InitTick+0x54>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_InitTick+0x58>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045da:	fbb3 f3f1 	udiv	r3, r3, r1
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fe09 	bl	80051fa <HAL_SYSTICK_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e00e      	b.n	8004610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d80a      	bhi.n	800460e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f8:	2200      	movs	r2, #0
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004600:	f000 fdd1 	bl	80051a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004604:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_InitTick+0x5c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000004 	.word	0x20000004
 800461c:	2000000c 	.word	0x2000000c
 8004620:	20000008 	.word	0x20000008

08004624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_IncTick+0x1c>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_IncTick+0x20>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4413      	add	r3, r2
 8004634:	4a03      	ldr	r2, [pc, #12]	; (8004644 <HAL_IncTick+0x20>)
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	2000000c 	.word	0x2000000c
 8004644:	20000774 	.word	0x20000774

08004648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return uwTick;
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <HAL_GetTick+0x10>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20000774 	.word	0x20000774

0800465c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7ff fff0 	bl	8004648 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004674:	d005      	beq.n	8004682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_Delay+0x40>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004682:	bf00      	nop
 8004684:	f7ff ffe0 	bl	8004648 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d8f7      	bhi.n	8004684 <HAL_Delay+0x28>
  {
  }
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000000c 	.word	0x2000000c

080046a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0be      	b.n	8004840 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fe fbd6 	bl	8002e90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fbb1 	bl	8004e4c <ADC_ConversionStop_Disable>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 8099 	bne.w	800482e <HAL_ADC_Init+0x18e>
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8095 	bne.w	800482e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800470c:	f023 0302 	bic.w	r3, r3, #2
 8004710:	f043 0202 	orr.w	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004720:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7b1b      	ldrb	r3, [r3, #12]
 8004726:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004728:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4313      	orrs	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d003      	beq.n	8004742 <HAL_ADC_Init+0xa2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_ADC_Init+0xa8>
 8004742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004746:	e000      	b.n	800474a <HAL_ADC_Init+0xaa>
 8004748:	2300      	movs	r3, #0
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7d1b      	ldrb	r3, [r3, #20]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d119      	bne.n	800478c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7b1b      	ldrb	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	3b01      	subs	r3, #1
 8004766:	035a      	lsls	r2, r3, #13
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e00b      	b.n	800478c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	4b28      	ldr	r3, [pc, #160]	; (8004848 <HAL_ADC_Init+0x1a8>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047bc:	d003      	beq.n	80047c6 <HAL_ADC_Init+0x126>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d104      	bne.n	80047d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	051b      	lsls	r3, r3, #20
 80047ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_ADC_Init+0x1ac>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d10b      	bne.n	800480c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800480a:	e018      	b.n	800483e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f023 0312 	bic.w	r3, r3, #18
 8004814:	f043 0210 	orr.w	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800482c:	e007      	b.n	800483e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	ffe1f7fd 	.word	0xffe1f7fd
 800484c:	ff1f0efe 	.word	0xff1f0efe

08004850 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_ADC_Start+0x1a>
 8004866:	2302      	movs	r3, #2
 8004868:	e098      	b.n	800499c <HAL_ADC_Start+0x14c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa98 	bl	8004da8 <ADC_Enable>
 8004878:	4603      	mov	r3, r0
 800487a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 8087 	bne.w	8004992 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_ADC_Start+0x154>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d105      	bne.n	80048ae <HAL_ADC_Start+0x5e>
 80048a2:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <HAL_ADC_Start+0x158>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d115      	bne.n	80048da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d026      	beq.n	8004916 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048d8:	e01d      	b.n	8004916 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <HAL_ADC_Start+0x158>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_ADC_Start+0xaa>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_ADC_Start+0x154>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10d      	bne.n	8004916 <HAL_ADC_Start+0xc6>
 80048fa:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <HAL_ADC_Start+0x158>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800490e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f023 0206 	bic.w	r2, r3, #6
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c
 800492e:	e002      	b.n	8004936 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0202 	mvn.w	r2, #2
 8004946:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004952:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004956:	d113      	bne.n	8004980 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HAL_ADC_Start+0x154>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d105      	bne.n	800496e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004962:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_ADC_Start+0x158>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	e00c      	b.n	800499a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e003      	b.n	800499a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40012800 	.word	0x40012800
 80049a8:	40012400 	.word	0x40012400

080049ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80049c2:	f7ff fe41 	bl	8004648 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f043 0220 	orr.w	r2, r3, #32
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0c8      	b.n	8004b80 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d12a      	bne.n	8004a52 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d123      	bne.n	8004a52 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004a0a:	e01a      	b.n	8004a42 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d016      	beq.n	8004a42 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_ADC_PollForConversion+0x7e>
 8004a1a:	f7ff fe15 	bl	8004648 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20b      	bcs.n	8004a42 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f043 0204 	orr.w	r2, r3, #4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e09e      	b.n	8004b80 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0dd      	beq.n	8004a0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004a50:	e06c      	b.n	8004b2c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_ADC_PollForConversion+0x1dc>)
 8004a54:	681c      	ldr	r4, [r3, #0]
 8004a56:	2002      	movs	r0, #2
 8004a58:	f002 fbc6 	bl	80071e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6919      	ldr	r1, [r3, #16]
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_ADC_PollForConversion+0x1e0>)
 8004a6a:	400b      	ands	r3, r1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d118      	bne.n	8004aa2 <HAL_ADC_PollForConversion+0xf6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68d9      	ldr	r1, [r3, #12]
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <HAL_ADC_PollForConversion+0x1e4>)
 8004a78:	400b      	ands	r3, r1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d111      	bne.n	8004aa2 <HAL_ADC_PollForConversion+0xf6>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6919      	ldr	r1, [r3, #16]
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_ADC_PollForConversion+0x1e8>)
 8004a86:	400b      	ands	r3, r1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d108      	bne.n	8004a9e <HAL_ADC_PollForConversion+0xf2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68d9      	ldr	r1, [r3, #12]
 8004a92:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_ADC_PollForConversion+0x1ec>)
 8004a94:	400b      	ands	r3, r1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_ADC_PollForConversion+0xf2>
 8004a9a:	2314      	movs	r3, #20
 8004a9c:	e020      	b.n	8004ae0 <HAL_ADC_PollForConversion+0x134>
 8004a9e:	2329      	movs	r3, #41	; 0x29
 8004aa0:	e01e      	b.n	8004ae0 <HAL_ADC_PollForConversion+0x134>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6919      	ldr	r1, [r3, #16]
 8004aa8:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <HAL_ADC_PollForConversion+0x1e8>)
 8004aaa:	400b      	ands	r3, r1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d106      	bne.n	8004abe <HAL_ADC_PollForConversion+0x112>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <HAL_ADC_PollForConversion+0x1ec>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <HAL_ADC_PollForConversion+0x12e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6919      	ldr	r1, [r3, #16]
 8004ac4:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <HAL_ADC_PollForConversion+0x1f0>)
 8004ac6:	400b      	ands	r3, r1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d108      	bne.n	8004ade <HAL_ADC_PollForConversion+0x132>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68d9      	ldr	r1, [r3, #12]
 8004ad2:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_ADC_PollForConversion+0x1f0>)
 8004ad4:	400b      	ands	r3, r1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_PollForConversion+0x132>
 8004ada:	2354      	movs	r3, #84	; 0x54
 8004adc:	e000      	b.n	8004ae0 <HAL_ADC_PollForConversion+0x134>
 8004ade:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004ae6:	e01d      	b.n	8004b24 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aee:	d016      	beq.n	8004b1e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <HAL_ADC_PollForConversion+0x15a>
 8004af6:	f7ff fda7 	bl	8004648 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d20b      	bcs.n	8004b1e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e030      	b.n	8004b80 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d8dd      	bhi.n	8004ae8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0212 	mvn.w	r2, #18
 8004b34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b4c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b50:	d115      	bne.n	8004b7e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d111      	bne.n	8004b7e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd90      	pop	{r4, r7, pc}
 8004b88:	20000004 	.word	0x20000004
 8004b8c:	24924924 	.word	0x24924924
 8004b90:	00924924 	.word	0x00924924
 8004b94:	12492492 	.word	0x12492492
 8004b98:	00492492 	.word	0x00492492
 8004b9c:	00249249 	.word	0x00249249

08004ba0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x20>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e0dc      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x1da>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d81c      	bhi.n	8004c22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b05      	subs	r3, #5
 8004bfa:	221f      	movs	r2, #31
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	4019      	ands	r1, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	3b05      	subs	r3, #5
 8004c14:	fa00 f203 	lsl.w	r2, r0, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c20:	e03c      	b.n	8004c9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b0c      	cmp	r3, #12
 8004c28:	d81c      	bhi.n	8004c64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	3b23      	subs	r3, #35	; 0x23
 8004c3c:	221f      	movs	r2, #31
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	4019      	ands	r1, r3
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	3b23      	subs	r3, #35	; 0x23
 8004c56:	fa00 f203 	lsl.w	r2, r0, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
 8004c62:	e01b      	b.n	8004c9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	3b41      	subs	r3, #65	; 0x41
 8004c76:	221f      	movs	r2, #31
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	4019      	ands	r1, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3b41      	subs	r3, #65	; 0x41
 8004c90:	fa00 f203 	lsl.w	r2, r0, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b09      	cmp	r3, #9
 8004ca2:	d91c      	bls.n	8004cde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3b1e      	subs	r3, #30
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	4019      	ands	r1, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6898      	ldr	r0, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b1e      	subs	r3, #30
 8004cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	e019      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6919      	ldr	r1, [r3, #16]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	2207      	movs	r2, #7
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	4019      	ands	r1, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6898      	ldr	r0, [r3, #8]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d003      	beq.n	8004d22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d1e:	2b11      	cmp	r3, #17
 8004d20:	d132      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_ADC_ConfigChannel+0x1e4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d125      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d126      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d48:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d11a      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	0c9a      	lsrs	r2, r3, #18
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d68:	e002      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f9      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x1b2>
 8004d76:	e007      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	40012400 	.word	0x40012400
 8004da0:	20000004 	.word	0x20000004
 8004da4:	431bde83 	.word	0x431bde83

08004da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d039      	beq.n	8004e3a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <ADC_Enable+0x9c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <ADC_Enable+0xa0>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	0c9b      	lsrs	r3, r3, #18
 8004de2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004de4:	e002      	b.n	8004dec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f9      	bne.n	8004de6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004df2:	f7ff fc29 	bl	8004648 <HAL_GetTick>
 8004df6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004df8:	e018      	b.n	8004e2c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dfa:	f7ff fc25 	bl	8004648 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d911      	bls.n	8004e2c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e007      	b.n	8004e3c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d1df      	bne.n	8004dfa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000004 	.word	0x20000004
 8004e48:	431bde83 	.word	0x431bde83

08004e4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d127      	bne.n	8004eb6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e76:	f7ff fbe7 	bl	8004648 <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e7c:	e014      	b.n	8004ea8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e7e:	f7ff fbe3 	bl	8004648 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d90d      	bls.n	8004ea8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e007      	b.n	8004eb8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d0e3      	beq.n	8004e7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_ADCEx_Calibration_Start+0x1e>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e086      	b.n	8004fec <HAL_ADCEx_Calibration_Start+0x12c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ffb0 	bl	8004e4c <ADC_ConversionStop_Disable>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d175      	bne.n	8004fe2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004efe:	f023 0302 	bic.w	r3, r3, #2
 8004f02:	f043 0202 	orr.w	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004f0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ff4 <HAL_ADCEx_Calibration_Start+0x134>)
 8004f0c:	681c      	ldr	r4, [r3, #0]
 8004f0e:	2002      	movs	r0, #2
 8004f10:	f002 f96a 	bl	80071e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f14:	4603      	mov	r3, r0
 8004f16:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004f1a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004f1c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004f1e:	e002      	b.n	8004f26 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f9      	bne.n	8004f20 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff3b 	bl	8004da8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0208 	orr.w	r2, r2, #8
 8004f40:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004f42:	f7ff fb81 	bl	8004648 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004f48:	e014      	b.n	8004f74 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004f4a:	f7ff fb7d 	bl	8004648 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b0a      	cmp	r3, #10
 8004f56:	d90d      	bls.n	8004f74 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f023 0312 	bic.w	r3, r3, #18
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e03b      	b.n	8004fec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e3      	bne.n	8004f4a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0204 	orr.w	r2, r2, #4
 8004f90:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004f92:	f7ff fb59 	bl	8004648 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004f98:	e014      	b.n	8004fc4 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004f9a:	f7ff fb55 	bl	8004648 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b0a      	cmp	r3, #10
 8004fa6:	d90d      	bls.n	8004fc4 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f023 0312 	bic.w	r3, r3, #18
 8004fb0:	f043 0210 	orr.w	r2, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e013      	b.n	8004fec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e3      	bne.n	8004f9a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd90      	pop	{r4, r7, pc}
 8004ff4:	20000004 	.word	0x20000004

08004ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005014:	4013      	ands	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800502a:	4a04      	ldr	r2, [pc, #16]	; (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60d3      	str	r3, [r2, #12]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <__NVIC_GetPriorityGrouping+0x18>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f003 0307 	and.w	r3, r3, #7
}
 800504e:	4618      	mov	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	2b00      	cmp	r3, #0
 800506c:	db0b      	blt.n	8005086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 021f 	and.w	r2, r3, #31
 8005074:	4906      	ldr	r1, [pc, #24]	; (8005090 <__NVIC_EnableIRQ+0x34>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2001      	movs	r0, #1
 800507e:	fa00 f202 	lsl.w	r2, r0, r2
 8005082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100

08005094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db0a      	blt.n	80050be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	490c      	ldr	r1, [pc, #48]	; (80050e0 <__NVIC_SetPriority+0x4c>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	440b      	add	r3, r1
 80050b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050bc:	e00a      	b.n	80050d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <__NVIC_SetPriority+0x50>)
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	3b04      	subs	r3, #4
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	440b      	add	r3, r1
 80050d2:	761a      	strb	r2, [r3, #24]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e100 	.word	0xe000e100
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	; 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f1c3 0307 	rsb	r3, r3, #7
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf28      	it	cs
 8005106:	2304      	movcs	r3, #4
 8005108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3304      	adds	r3, #4
 800510e:	2b06      	cmp	r3, #6
 8005110:	d902      	bls.n	8005118 <NVIC_EncodePriority+0x30>
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3b03      	subs	r3, #3
 8005116:	e000      	b.n	800511a <NVIC_EncodePriority+0x32>
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43da      	mvns	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	401a      	ands	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	43d9      	mvns	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005140:	4313      	orrs	r3, r2
         );
}
 8005142:	4618      	mov	r0, r3
 8005144:	3724      	adds	r7, #36	; 0x24
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3b01      	subs	r3, #1
 8005158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800515c:	d301      	bcc.n	8005162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800515e:	2301      	movs	r3, #1
 8005160:	e00f      	b.n	8005182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <SysTick_Config+0x40>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800516a:	210f      	movs	r1, #15
 800516c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005170:	f7ff ff90 	bl	8005094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <SysTick_Config+0x40>)
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800517a:	4b04      	ldr	r3, [pc, #16]	; (800518c <SysTick_Config+0x40>)
 800517c:	2207      	movs	r2, #7
 800517e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	e000e010 	.word	0xe000e010

08005190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff ff2d 	bl	8004ff8 <__NVIC_SetPriorityGrouping>
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b086      	sub	sp, #24
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051b8:	f7ff ff42 	bl	8005040 <__NVIC_GetPriorityGrouping>
 80051bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7ff ff90 	bl	80050e8 <NVIC_EncodePriority>
 80051c8:	4602      	mov	r2, r0
 80051ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff5f 	bl	8005094 <__NVIC_SetPriority>
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	4603      	mov	r3, r0
 80051e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff35 	bl	800505c <__NVIC_EnableIRQ>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ffa2 	bl	800514c <SysTick_Config>
 8005208:	4603      	mov	r3, r0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <HAL_FLASH_Program+0xd8>)
 8005230:	7e1b      	ldrb	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_FLASH_Program+0x26>
 8005236:	2302      	movs	r3, #2
 8005238:	e054      	b.n	80052e4 <HAL_FLASH_Program+0xd0>
 800523a:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <HAL_FLASH_Program+0xd8>)
 800523c:	2201      	movs	r2, #1
 800523e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005240:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005244:	f000 f8a8 	bl	8005398 <FLASH_WaitForLastOperation>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d144      	bne.n	80052dc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d102      	bne.n	800525e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	757b      	strb	r3, [r7, #21]
 800525c:	e007      	b.n	800526e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d102      	bne.n	800526a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005264:	2302      	movs	r3, #2
 8005266:	757b      	strb	r3, [r7, #21]
 8005268:	e001      	b.n	800526e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800526a:	2304      	movs	r3, #4
 800526c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800526e:	2300      	movs	r3, #0
 8005270:	75bb      	strb	r3, [r7, #22]
 8005272:	e02d      	b.n	80052d0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005274:	7dbb      	ldrb	r3, [r7, #22]
 8005276:	005a      	lsls	r2, r3, #1
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	eb02 0c03 	add.w	ip, r2, r3
 800527e:	7dbb      	ldrb	r3, [r7, #22]
 8005280:	0119      	lsls	r1, r3, #4
 8005282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005286:	f1c1 0620 	rsb	r6, r1, #32
 800528a:	f1a1 0020 	sub.w	r0, r1, #32
 800528e:	fa22 f401 	lsr.w	r4, r2, r1
 8005292:	fa03 f606 	lsl.w	r6, r3, r6
 8005296:	4334      	orrs	r4, r6
 8005298:	fa23 f000 	lsr.w	r0, r3, r0
 800529c:	4304      	orrs	r4, r0
 800529e:	fa23 f501 	lsr.w	r5, r3, r1
 80052a2:	b2a3      	uxth	r3, r4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4660      	mov	r0, ip
 80052a8:	f000 f85a 	bl	8005360 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052b0:	f000 f872 	bl	8005398 <FLASH_WaitForLastOperation>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_FLASH_Program+0xdc>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	4a0c      	ldr	r2, [pc, #48]	; (80052f0 <HAL_FLASH_Program+0xdc>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80052ca:	7dbb      	ldrb	r3, [r7, #22]
 80052cc:	3301      	adds	r3, #1
 80052ce:	75bb      	strb	r3, [r7, #22]
 80052d0:	7dba      	ldrb	r2, [r7, #22]
 80052d2:	7d7b      	ldrb	r3, [r7, #21]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d3cd      	bcc.n	8005274 <HAL_FLASH_Program+0x60>
 80052d8:	e000      	b.n	80052dc <HAL_FLASH_Program+0xc8>
      {
        break;
 80052da:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_FLASH_Program+0xd8>)
 80052de:	2200      	movs	r2, #0
 80052e0:	761a      	strb	r2, [r3, #24]

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ec:	20000778 	.word	0x20000778
 80052f0:	40022000 	.word	0x40022000

080052f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_FLASH_Unlock+0x40>)
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_FLASH_Unlock+0x40>)
 800530c:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <HAL_FLASH_Unlock+0x44>)
 800530e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005310:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_FLASH_Unlock+0x40>)
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <HAL_FLASH_Unlock+0x48>)
 8005314:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_FLASH_Unlock+0x40>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005326:	79fb      	ldrb	r3, [r7, #7]
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40022000 	.word	0x40022000
 8005338:	45670123 	.word	0x45670123
 800533c:	cdef89ab 	.word	0xcdef89ab

08005340 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_FLASH_Lock+0x1c>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	4a04      	ldr	r2, [pc, #16]	; (800535c <HAL_FLASH_Lock+0x1c>)
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40022000 	.word	0x40022000

08005360 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <FLASH_Program_HalfWord+0x30>)
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <FLASH_Program_HalfWord+0x34>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <FLASH_Program_HalfWord+0x34>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	887a      	ldrh	r2, [r7, #2]
 8005382:	801a      	strh	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000778 	.word	0x20000778
 8005394:	40022000 	.word	0x40022000

08005398 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80053a0:	f7ff f952 	bl	8004648 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80053a6:	e010      	b.n	80053ca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d00c      	beq.n	80053ca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <FLASH_WaitForLastOperation+0x2e>
 80053b6:	f7ff f947 	bl	8004648 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d201      	bcs.n	80053ca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e025      	b.n	8005416 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e8      	bne.n	80053a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80053d6:	4b12      	ldr	r3, [pc, #72]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 80053e4:	2220      	movs	r2, #32
 80053e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <FLASH_WaitForLastOperation+0x88>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800540c:	f000 f80a 	bl	8005424 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40022000 	.word	0x40022000

08005424 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800542e:	4b23      	ldr	r3, [pc, #140]	; (80054bc <FLASH_SetErrorCode+0x98>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 8005444:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f043 0310 	orr.w	r3, r3, #16
 800544c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <FLASH_SetErrorCode+0x98>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800545a:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 8005464:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <FLASH_SetErrorCode+0x98>)
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <FLASH_SetErrorCode+0x9c>)
 8005484:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <FLASH_SetErrorCode+0x98>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4a0c      	ldr	r2, [pc, #48]	; (80054bc <FLASH_SetErrorCode+0x98>)
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f240 1201 	movw	r2, #257	; 0x101
 8005498:	4293      	cmp	r3, r2
 800549a:	d106      	bne.n	80054aa <FLASH_SetErrorCode+0x86>
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <FLASH_SetErrorCode+0x98>)
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	4a06      	ldr	r2, [pc, #24]	; (80054bc <FLASH_SetErrorCode+0x98>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	61d3      	str	r3, [r2, #28]
}  
 80054a8:	e002      	b.n	80054b0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80054aa:	4a04      	ldr	r2, [pc, #16]	; (80054bc <FLASH_SetErrorCode+0x98>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60d3      	str	r3, [r2, #12]
}  
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40022000 	.word	0x40022000
 80054c0:	20000778 	.word	0x20000778

080054c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80054d6:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <HAL_FLASHEx_Erase+0xd0>)
 80054d8:	7e1b      	ldrb	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_FLASHEx_Erase+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e053      	b.n	800558a <HAL_FLASHEx_Erase+0xc6>
 80054e2:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <HAL_FLASHEx_Erase+0xd0>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d116      	bne.n	800551e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80054f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054f4:	f7ff ff50 	bl	8005398 <FLASH_WaitForLastOperation>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d141      	bne.n	8005582 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80054fe:	2001      	movs	r0, #1
 8005500:	f000 f84c 	bl	800559c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005508:	f7ff ff46 	bl	8005398 <FLASH_WaitForLastOperation>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <HAL_FLASHEx_Erase+0xd4>)
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	4a20      	ldr	r2, [pc, #128]	; (8005598 <HAL_FLASHEx_Erase+0xd4>)
 8005516:	f023 0304 	bic.w	r3, r3, #4
 800551a:	6113      	str	r3, [r2, #16]
 800551c:	e031      	b.n	8005582 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800551e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005522:	f7ff ff39 	bl	8005398 <FLASH_WaitForLastOperation>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d12a      	bne.n	8005582 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005532:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	e019      	b.n	8005570 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800553c:	68b8      	ldr	r0, [r7, #8]
 800553e:	f000 f849 	bl	80055d4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005542:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005546:	f7ff ff27 	bl	8005398 <FLASH_WaitForLastOperation>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_FLASHEx_Erase+0xd4>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <HAL_FLASHEx_Erase+0xd4>)
 8005554:	f023 0302 	bic.w	r3, r3, #2
 8005558:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	601a      	str	r2, [r3, #0]
            break;
 8005566:	e00c      	b.n	8005582 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	029a      	lsls	r2, r3, #10
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3dc      	bcc.n	800553c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <HAL_FLASHEx_Erase+0xd0>)
 8005584:	2200      	movs	r2, #0
 8005586:	761a      	strb	r2, [r3, #24]

  return status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000778 	.word	0x20000778
 8005598:	40022000 	.word	0x40022000

0800559c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <FLASH_MassErase+0x30>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80055aa:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <FLASH_MassErase+0x34>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	4a08      	ldr	r2, [pc, #32]	; (80055d0 <FLASH_MassErase+0x34>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <FLASH_MassErase+0x34>)
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <FLASH_MassErase+0x34>)
 80055bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	20000778 	.word	0x20000778
 80055d0:	40022000 	.word	0x40022000

080055d4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <FLASH_PageErase+0x38>)
 80055de:	2200      	movs	r2, #0
 80055e0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <FLASH_PageErase+0x3c>)
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <FLASH_PageErase+0x3c>)
 80055e8:	f043 0302 	orr.w	r3, r3, #2
 80055ec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80055ee:	4a08      	ldr	r2, [pc, #32]	; (8005610 <FLASH_PageErase+0x3c>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <FLASH_PageErase+0x3c>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4a05      	ldr	r2, [pc, #20]	; (8005610 <FLASH_PageErase+0x3c>)
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000778 	.word	0x20000778
 8005610:	40022000 	.word	0x40022000

08005614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005614:	b480      	push	{r7}
 8005616:	b08b      	sub	sp, #44	; 0x2c
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005622:	2300      	movs	r3, #0
 8005624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005626:	e127      	b.n	8005878 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005628:	2201      	movs	r2, #1
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	429a      	cmp	r2, r3
 8005642:	f040 8116 	bne.w	8005872 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b12      	cmp	r3, #18
 800564c:	d034      	beq.n	80056b8 <HAL_GPIO_Init+0xa4>
 800564e:	2b12      	cmp	r3, #18
 8005650:	d80d      	bhi.n	800566e <HAL_GPIO_Init+0x5a>
 8005652:	2b02      	cmp	r3, #2
 8005654:	d02b      	beq.n	80056ae <HAL_GPIO_Init+0x9a>
 8005656:	2b02      	cmp	r3, #2
 8005658:	d804      	bhi.n	8005664 <HAL_GPIO_Init+0x50>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d031      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
 800565e:	2b01      	cmp	r3, #1
 8005660:	d01c      	beq.n	800569c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005662:	e048      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005664:	2b03      	cmp	r3, #3
 8005666:	d043      	beq.n	80056f0 <HAL_GPIO_Init+0xdc>
 8005668:	2b11      	cmp	r3, #17
 800566a:	d01b      	beq.n	80056a4 <HAL_GPIO_Init+0x90>
          break;
 800566c:	e043      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800566e:	4a89      	ldr	r2, [pc, #548]	; (8005894 <HAL_GPIO_Init+0x280>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d026      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
 8005674:	4a87      	ldr	r2, [pc, #540]	; (8005894 <HAL_GPIO_Init+0x280>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d806      	bhi.n	8005688 <HAL_GPIO_Init+0x74>
 800567a:	4a87      	ldr	r2, [pc, #540]	; (8005898 <HAL_GPIO_Init+0x284>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d020      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
 8005680:	4a86      	ldr	r2, [pc, #536]	; (800589c <HAL_GPIO_Init+0x288>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
          break;
 8005686:	e036      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005688:	4a85      	ldr	r2, [pc, #532]	; (80058a0 <HAL_GPIO_Init+0x28c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d019      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
 800568e:	4a85      	ldr	r2, [pc, #532]	; (80058a4 <HAL_GPIO_Init+0x290>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d016      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
 8005694:	4a84      	ldr	r2, [pc, #528]	; (80058a8 <HAL_GPIO_Init+0x294>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_GPIO_Init+0xae>
          break;
 800569a:	e02c      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	623b      	str	r3, [r7, #32]
          break;
 80056a2:	e028      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	3304      	adds	r3, #4
 80056aa:	623b      	str	r3, [r7, #32]
          break;
 80056ac:	e023      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	3308      	adds	r3, #8
 80056b4:	623b      	str	r3, [r7, #32]
          break;
 80056b6:	e01e      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	330c      	adds	r3, #12
 80056be:	623b      	str	r3, [r7, #32]
          break;
 80056c0:	e019      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80056ca:	2304      	movs	r3, #4
 80056cc:	623b      	str	r3, [r7, #32]
          break;
 80056ce:	e012      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d105      	bne.n	80056e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80056d8:	2308      	movs	r3, #8
 80056da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	611a      	str	r2, [r3, #16]
          break;
 80056e2:	e008      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80056e4:	2308      	movs	r3, #8
 80056e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	615a      	str	r2, [r3, #20]
          break;
 80056ee:	e002      	b.n	80056f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80056f0:	2300      	movs	r3, #0
 80056f2:	623b      	str	r3, [r7, #32]
          break;
 80056f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2bff      	cmp	r3, #255	; 0xff
 80056fa:	d801      	bhi.n	8005700 <HAL_GPIO_Init+0xec>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	e001      	b.n	8005704 <HAL_GPIO_Init+0xf0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2bff      	cmp	r3, #255	; 0xff
 800570a:	d802      	bhi.n	8005712 <HAL_GPIO_Init+0xfe>
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	e002      	b.n	8005718 <HAL_GPIO_Init+0x104>
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	3b08      	subs	r3, #8
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	210f      	movs	r1, #15
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	401a      	ands	r2, r3
 800572a:	6a39      	ldr	r1, [r7, #32]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	431a      	orrs	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8096 	beq.w	8005872 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_GPIO_Init+0x298>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	4a58      	ldr	r2, [pc, #352]	; (80058ac <HAL_GPIO_Init+0x298>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6193      	str	r3, [r2, #24]
 8005752:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_GPIO_Init+0x298>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800575e:	4a54      	ldr	r2, [pc, #336]	; (80058b0 <HAL_GPIO_Init+0x29c>)
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	3302      	adds	r3, #2
 8005766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	220f      	movs	r2, #15
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4b      	ldr	r2, [pc, #300]	; (80058b4 <HAL_GPIO_Init+0x2a0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_GPIO_Init+0x19e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4a      	ldr	r2, [pc, #296]	; (80058b8 <HAL_GPIO_Init+0x2a4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00d      	beq.n	80057ae <HAL_GPIO_Init+0x19a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a49      	ldr	r2, [pc, #292]	; (80058bc <HAL_GPIO_Init+0x2a8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <HAL_GPIO_Init+0x196>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a48      	ldr	r2, [pc, #288]	; (80058c0 <HAL_GPIO_Init+0x2ac>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <HAL_GPIO_Init+0x192>
 80057a2:	2303      	movs	r3, #3
 80057a4:	e006      	b.n	80057b4 <HAL_GPIO_Init+0x1a0>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e004      	b.n	80057b4 <HAL_GPIO_Init+0x1a0>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e002      	b.n	80057b4 <HAL_GPIO_Init+0x1a0>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <HAL_GPIO_Init+0x1a0>
 80057b2:	2300      	movs	r3, #0
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	f002 0203 	and.w	r2, r2, #3
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	4093      	lsls	r3, r2
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80057c4:	493a      	ldr	r1, [pc, #232]	; (80058b0 <HAL_GPIO_Init+0x29c>)
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d006      	beq.n	80057ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4938      	ldr	r1, [pc, #224]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
 80057ea:	e006      	b.n	80057fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80057ec:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	4933      	ldr	r1, [pc, #204]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	492e      	ldr	r1, [pc, #184]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]
 8005812:	e006      	b.n	8005822 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005814:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	43db      	mvns	r3, r3
 800581c:	4929      	ldr	r1, [pc, #164]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 800581e:	4013      	ands	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800582e:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	4924      	ldr	r1, [pc, #144]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
 800583a:	e006      	b.n	800584a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800583c:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	43db      	mvns	r3, r3
 8005844:	491f      	ldr	r1, [pc, #124]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005846:	4013      	ands	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005856:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	491a      	ldr	r1, [pc, #104]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4313      	orrs	r3, r2
 8005860:	60cb      	str	r3, [r1, #12]
 8005862:	e006      	b.n	8005872 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005864:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	43db      	mvns	r3, r3
 800586c:	4915      	ldr	r1, [pc, #84]	; (80058c4 <HAL_GPIO_Init+0x2b0>)
 800586e:	4013      	ands	r3, r2
 8005870:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	f47f aed0 	bne.w	8005628 <HAL_GPIO_Init+0x14>
  }
}
 8005888:	bf00      	nop
 800588a:	372c      	adds	r7, #44	; 0x2c
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	10210000 	.word	0x10210000
 8005898:	10110000 	.word	0x10110000
 800589c:	10120000 	.word	0x10120000
 80058a0:	10310000 	.word	0x10310000
 80058a4:	10320000 	.word	0x10320000
 80058a8:	10220000 	.word	0x10220000
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010800 	.word	0x40010800
 80058b8:	40010c00 	.word	0x40010c00
 80058bc:	40011000 	.word	0x40011000
 80058c0:	40011400 	.word	0x40011400
 80058c4:	40010400 	.word	0x40010400

080058c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058d8:	787b      	ldrb	r3, [r7, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80058e4:	e003      	b.n	80058ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	041a      	lsls	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005910:	887a      	ldrh	r2, [r7, #2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005916:	e002      	b.n	800591e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	611a      	str	r2, [r3, #16]
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e10f      	b.n	8005b5a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fd fada 	bl	8002f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	; 0x24
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800596c:	f001 fb40 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 8005970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a7b      	ldr	r2, [pc, #492]	; (8005b64 <HAL_I2C_Init+0x23c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d807      	bhi.n	800598c <HAL_I2C_Init+0x64>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a7a      	ldr	r2, [pc, #488]	; (8005b68 <HAL_I2C_Init+0x240>)
 8005980:	4293      	cmp	r3, r2
 8005982:	bf94      	ite	ls
 8005984:	2301      	movls	r3, #1
 8005986:	2300      	movhi	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e006      	b.n	800599a <HAL_I2C_Init+0x72>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a77      	ldr	r2, [pc, #476]	; (8005b6c <HAL_I2C_Init+0x244>)
 8005990:	4293      	cmp	r3, r2
 8005992:	bf94      	ite	ls
 8005994:	2301      	movls	r3, #1
 8005996:	2300      	movhi	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0db      	b.n	8005b5a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a72      	ldr	r2, [pc, #456]	; (8005b70 <HAL_I2C_Init+0x248>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0c9b      	lsrs	r3, r3, #18
 80059ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a64      	ldr	r2, [pc, #400]	; (8005b64 <HAL_I2C_Init+0x23c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d802      	bhi.n	80059dc <HAL_I2C_Init+0xb4>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3301      	adds	r3, #1
 80059da:	e009      	b.n	80059f0 <HAL_I2C_Init+0xc8>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	4a63      	ldr	r2, [pc, #396]	; (8005b74 <HAL_I2C_Init+0x24c>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	099b      	lsrs	r3, r3, #6
 80059ee:	3301      	adds	r3, #1
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4956      	ldr	r1, [pc, #344]	; (8005b64 <HAL_I2C_Init+0x23c>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d80d      	bhi.n	8005a2c <HAL_I2C_Init+0x104>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1e59      	subs	r1, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	bf38      	it	cc
 8005a28:	2304      	movcc	r3, #4
 8005a2a:	e04f      	b.n	8005acc <HAL_I2C_Init+0x1a4>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d111      	bne.n	8005a58 <HAL_I2C_Init+0x130>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1e58      	subs	r0, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	440b      	add	r3, r1
 8005a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e012      	b.n	8005a7e <HAL_I2C_Init+0x156>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1e58      	subs	r0, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	0099      	lsls	r1, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Init+0x15e>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e022      	b.n	8005acc <HAL_I2C_Init+0x1a4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10e      	bne.n	8005aac <HAL_I2C_Init+0x184>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1e58      	subs	r0, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	440b      	add	r3, r1
 8005a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	e00f      	b.n	8005acc <HAL_I2C_Init+0x1a4>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1e58      	subs	r0, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	0099      	lsls	r1, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	6809      	ldr	r1, [r1, #0]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6911      	ldr	r1, [r2, #16]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68d2      	ldr	r2, [r2, #12]
 8005b06:	4311      	orrs	r1, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	000186a0 	.word	0x000186a0
 8005b68:	001e847f 	.word	0x001e847f
 8005b6c:	003d08ff 	.word	0x003d08ff
 8005b70:	431bde83 	.word	0x431bde83
 8005b74:	10624dd3 	.word	0x10624dd3

08005b78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	461a      	mov	r2, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	817b      	strh	r3, [r7, #10]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	813b      	strh	r3, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b92:	f7fe fd59 	bl	8004648 <HAL_GetTick>
 8005b96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	f040 80d9 	bne.w	8005d58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	2319      	movs	r3, #25
 8005bac:	2201      	movs	r2, #1
 8005bae:	496d      	ldr	r1, [pc, #436]	; (8005d64 <HAL_I2C_Mem_Write+0x1ec>)
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fc6b 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e0cc      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_I2C_Mem_Write+0x56>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0c5      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d007      	beq.n	8005bf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2221      	movs	r2, #33	; 0x21
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a3a      	ldr	r2, [r7, #32]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a4d      	ldr	r2, [pc, #308]	; (8005d68 <HAL_I2C_Mem_Write+0x1f0>)
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c36:	88f8      	ldrh	r0, [r7, #6]
 8005c38:	893a      	ldrh	r2, [r7, #8]
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	4603      	mov	r3, r0
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fac6 	bl	80061d8 <I2C_RequestMemoryWrite>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d052      	beq.n	8005cf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e081      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fcec 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d107      	bne.n	8005c7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e06b      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d11b      	bne.n	8005cf8 <HAL_I2C_Mem_Write+0x180>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d017      	beq.n	8005cf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1aa      	bne.n	8005c56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fcd8 	bl	80066ba <I2C_WaitOnBTFFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d107      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e016      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	00100002 	.word	0x00100002
 8005d68:	ffff0000 	.word	0xffff0000

08005d6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08c      	sub	sp, #48	; 0x30
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d86:	f7fe fc5f 	bl	8004648 <HAL_GetTick>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	f040 8218 	bne.w	80061ca <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	2319      	movs	r3, #25
 8005da0:	2201      	movs	r2, #1
 8005da2:	4981      	ldr	r1, [pc, #516]	; (8005fa8 <HAL_I2C_Mem_Read+0x23c>)
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fb71 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
 8005db2:	e20b      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x56>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e204      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d007      	beq.n	8005de8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2222      	movs	r2, #34	; 0x22
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2240      	movs	r2, #64	; 0x40
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a61      	ldr	r2, [pc, #388]	; (8005fac <HAL_I2C_Mem_Read+0x240>)
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e2a:	88f8      	ldrh	r0, [r7, #6]
 8005e2c:	893a      	ldrh	r2, [r7, #8]
 8005e2e:	8979      	ldrh	r1, [r7, #10]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa56 	bl	80062ec <I2C_RequestMemoryRead>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e1c0      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d113      	bne.n	8005e7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	2300      	movs	r3, #0
 8005e54:	623b      	str	r3, [r7, #32]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e194      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d11d      	bne.n	8005ebe <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e90:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e92:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e94:	2300      	movs	r3, #0
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005eba:	b662      	cpsie	i
 8005ebc:	e172      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d11d      	bne.n	8005f02 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ed6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005efe:	b662      	cpsie	i
 8005f00:	e150      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f28:	e13c      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	f200 80f5 	bhi.w	800611e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d123      	bne.n	8005f84 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fbfb 	bl	800673c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e13d      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f82:	e10f      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d150      	bne.n	800602e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	2200      	movs	r2, #0
 8005f94:	4906      	ldr	r1, [pc, #24]	; (8005fb0 <HAL_I2C_Mem_Read+0x244>)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fa78 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e112      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
 8005fa6:	bf00      	nop
 8005fa8:	00100002 	.word	0x00100002
 8005fac:	ffff0000 	.word	0xffff0000
 8005fb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005fb4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ff8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800602c:	e0ba      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2200      	movs	r2, #0
 8006036:	4967      	ldr	r1, [pc, #412]	; (80061d4 <HAL_I2C_Mem_Read+0x468>)
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fa27 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0c1      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006058:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2200      	movs	r2, #0
 8006094:	494f      	ldr	r1, [pc, #316]	; (80061d4 <HAL_I2C_Mem_Read+0x468>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f9f8 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e092      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80060e8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800611c:	e042      	b.n	80061a4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fb0a 	bl	800673c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e04c      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d118      	bne.n	80061a4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f aebe 	bne.w	8005f2a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3728      	adds	r7, #40	; 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	00010004 	.word	0x00010004

080061d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2200      	movs	r2, #0
 800620a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f93c 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e05f      	b.n	80062de <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621e:	897b      	ldrh	r3, [r7, #10]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800622c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	492d      	ldr	r1, [pc, #180]	; (80062e8 <I2C_RequestMemoryWrite+0x110>)
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f980 	bl	800653a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e04c      	b.n	80062de <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	6a39      	ldr	r1, [r7, #32]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f9ea 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b04      	cmp	r3, #4
 8006270:	d107      	bne.n	8006282 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e02b      	b.n	80062de <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800628c:	893b      	ldrh	r3, [r7, #8]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	611a      	str	r2, [r3, #16]
 8006296:	e021      	b.n	80062dc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006298:	893b      	ldrh	r3, [r7, #8]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a8:	6a39      	ldr	r1, [r7, #32]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f9c4 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d107      	bne.n	80062ce <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e005      	b.n	80062de <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	00010002 	.word	0x00010002

080062ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	4608      	mov	r0, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	461a      	mov	r2, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	817b      	strh	r3, [r7, #10]
 80062fe:	460b      	mov	r3, r1
 8006300:	813b      	strh	r3, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	2200      	movs	r2, #0
 800632e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f8aa 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e09e      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	494c      	ldr	r1, [pc, #304]	; (8006488 <I2C_RequestMemoryRead+0x19c>)
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f8ee 	bl	800653a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e08b      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	6a39      	ldr	r1, [r7, #32]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f958 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b04      	cmp	r3, #4
 8006394:	d107      	bne.n	80063a6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e06a      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d105      	bne.n	80063bc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b0:	893b      	ldrh	r3, [r7, #8]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	611a      	str	r2, [r3, #16]
 80063ba:	e021      	b.n	8006400 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	6a39      	ldr	r1, [r7, #32]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f932 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d107      	bne.n	80063f2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e044      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063f6:	893b      	ldrh	r3, [r7, #8]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6a39      	ldr	r1, [r7, #32]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f917 	bl	8006638 <I2C_WaitOnTXEFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	2b04      	cmp	r3, #4
 8006416:	d107      	bne.n	8006428 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006426:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e029      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2200      	movs	r2, #0
 8006444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f81f 	bl	800648c <I2C_WaitOnFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e013      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006458:	897b      	ldrh	r3, [r7, #10]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	4906      	ldr	r1, [pc, #24]	; (8006488 <I2C_RequestMemoryRead+0x19c>)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f863 	bl	800653a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	00010002 	.word	0x00010002

0800648c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649c:	e025      	b.n	80064ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a4:	d021      	beq.n	80064ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fe f8cf 	bl	8004648 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d116      	bne.n	80064ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e023      	b.n	8006532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10d      	bne.n	8006510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	43da      	mvns	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf0c      	ite	eq
 8006506:	2301      	moveq	r3, #1
 8006508:	2300      	movne	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	e00c      	b.n	800652a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	43da      	mvns	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	429a      	cmp	r2, r3
 800652e:	d0b6      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006548:	e051      	b.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d123      	bne.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0204 	orr.w	r2, r3, #4
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e046      	b.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a8:	d021      	beq.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fe f84d 	bl	8004648 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d116      	bne.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e020      	b.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10c      	bne.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	43da      	mvns	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf14      	ite	ne
 800660a:	2301      	movne	r3, #1
 800660c:	2300      	moveq	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	e00b      	b.n	800662a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	43da      	mvns	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d18d      	bne.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006644:	e02d      	b.n	80066a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f8ce 	bl	80067e8 <I2C_IsAcknowledgeFailed>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e02d      	b.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800665c:	d021      	beq.n	80066a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665e:	f7fd fff3 	bl	8004648 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d116      	bne.n	80066a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e007      	b.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ac:	2b80      	cmp	r3, #128	; 0x80
 80066ae:	d1ca      	bne.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c6:	e02d      	b.n	8006724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f88d 	bl	80067e8 <I2C_IsAcknowledgeFailed>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e02d      	b.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066de:	d021      	beq.n	8006724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e0:	f7fd ffb2 	bl	8004648 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d302      	bcc.n	80066f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d116      	bne.n	8006724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	f043 0220 	orr.w	r2, r3, #32
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e007      	b.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b04      	cmp	r3, #4
 8006730:	d1ca      	bne.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006748:	e042      	b.n	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d119      	bne.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0210 	mvn.w	r2, #16
 8006760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e029      	b.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678c:	f7fd ff5c 	bl	8004648 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e007      	b.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d1b5      	bne.n	800674a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d11b      	bne.n	8006838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e26c      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8087 	beq.w	8006972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006864:	4b92      	ldr	r3, [pc, #584]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b04      	cmp	r3, #4
 800686e:	d00c      	beq.n	800688a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006870:	4b8f      	ldr	r3, [pc, #572]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 030c 	and.w	r3, r3, #12
 8006878:	2b08      	cmp	r3, #8
 800687a:	d112      	bne.n	80068a2 <HAL_RCC_OscConfig+0x5e>
 800687c:	4b8c      	ldr	r3, [pc, #560]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d10b      	bne.n	80068a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688a:	4b89      	ldr	r3, [pc, #548]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06c      	beq.n	8006970 <HAL_RCC_OscConfig+0x12c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d168      	bne.n	8006970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e246      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x76>
 80068ac:	4b80      	ldr	r3, [pc, #512]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a7f      	ldr	r2, [pc, #508]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e02e      	b.n	8006918 <HAL_RCC_OscConfig+0xd4>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <HAL_RCC_OscConfig+0x98>
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7a      	ldr	r2, [pc, #488]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4b78      	ldr	r3, [pc, #480]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a77      	ldr	r2, [pc, #476]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e01d      	b.n	8006918 <HAL_RCC_OscConfig+0xd4>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e4:	d10c      	bne.n	8006900 <HAL_RCC_OscConfig+0xbc>
 80068e6:	4b72      	ldr	r3, [pc, #456]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a71      	ldr	r2, [pc, #452]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	4b6f      	ldr	r3, [pc, #444]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a6e      	ldr	r2, [pc, #440]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0xd4>
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6a      	ldr	r2, [pc, #424]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	4b68      	ldr	r3, [pc, #416]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a67      	ldr	r2, [pc, #412]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d013      	beq.n	8006948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006920:	f7fd fe92 	bl	8004648 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006928:	f7fd fe8e 	bl	8004648 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	; 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e1fa      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b5d      	ldr	r3, [pc, #372]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0xe4>
 8006946:	e014      	b.n	8006972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fd fe7e 	bl	8004648 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006950:	f7fd fe7a 	bl	8004648 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e1e6      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x10c>
 800696e:	e000      	b.n	8006972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d063      	beq.n	8006a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800697e:	4b4c      	ldr	r3, [pc, #304]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800698a:	4b49      	ldr	r3, [pc, #292]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b08      	cmp	r3, #8
 8006994:	d11c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x18c>
 8006996:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d116      	bne.n	80069d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a2:	4b43      	ldr	r3, [pc, #268]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_RCC_OscConfig+0x176>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d001      	beq.n	80069ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e1ba      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	4b3d      	ldr	r3, [pc, #244]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4939      	ldr	r1, [pc, #228]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ce:	e03a      	b.n	8006a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d020      	beq.n	8006a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d8:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <HAL_RCC_OscConfig+0x270>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069de:	f7fd fe33 	bl	8004648 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e6:	f7fd fe2f 	bl	8004648 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e19b      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f8:	4b2d      	ldr	r3, [pc, #180]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4927      	ldr	r1, [pc, #156]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	e015      	b.n	8006a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <HAL_RCC_OscConfig+0x270>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fd fe12 	bl	8004648 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a28:	f7fd fe0e 	bl	8004648 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e17a      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d03a      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d019      	beq.n	8006a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5a:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <HAL_RCC_OscConfig+0x274>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a60:	f7fd fdf2 	bl	8004648 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a68:	f7fd fdee 	bl	8004648 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e15a      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a86:	2001      	movs	r0, #1
 8006a88:	f000 fada 	bl	8007040 <RCC_Delay>
 8006a8c:	e01c      	b.n	8006ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <HAL_RCC_OscConfig+0x274>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a94:	f7fd fdd8 	bl	8004648 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a9a:	e00f      	b.n	8006abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a9c:	f7fd fdd4 	bl	8004648 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d908      	bls.n	8006abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e140      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
 8006aae:	bf00      	nop
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	42420000 	.word	0x42420000
 8006ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abc:	4b9e      	ldr	r3, [pc, #632]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e9      	bne.n	8006a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a6 	beq.w	8006c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ada:	4b97      	ldr	r3, [pc, #604]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10d      	bne.n	8006b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ae6:	4b94      	ldr	r3, [pc, #592]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	4a93      	ldr	r2, [pc, #588]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af0:	61d3      	str	r3, [r2, #28]
 8006af2:	4b91      	ldr	r3, [pc, #580]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afa:	60bb      	str	r3, [r7, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b02:	4b8e      	ldr	r3, [pc, #568]	; (8006d3c <HAL_RCC_OscConfig+0x4f8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d118      	bne.n	8006b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b0e:	4b8b      	ldr	r3, [pc, #556]	; (8006d3c <HAL_RCC_OscConfig+0x4f8>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a8a      	ldr	r2, [pc, #552]	; (8006d3c <HAL_RCC_OscConfig+0x4f8>)
 8006b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b1a:	f7fd fd95 	bl	8004648 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b22:	f7fd fd91 	bl	8004648 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0fd      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b34:	4b81      	ldr	r3, [pc, #516]	; (8006d3c <HAL_RCC_OscConfig+0x4f8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d106      	bne.n	8006b56 <HAL_RCC_OscConfig+0x312>
 8006b48:	4b7b      	ldr	r3, [pc, #492]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	4a7a      	ldr	r2, [pc, #488]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	6213      	str	r3, [r2, #32]
 8006b54:	e02d      	b.n	8006bb2 <HAL_RCC_OscConfig+0x36e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x334>
 8006b5e:	4b76      	ldr	r3, [pc, #472]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	4a75      	ldr	r2, [pc, #468]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	6213      	str	r3, [r2, #32]
 8006b6a:	4b73      	ldr	r3, [pc, #460]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	4a72      	ldr	r2, [pc, #456]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b70:	f023 0304 	bic.w	r3, r3, #4
 8006b74:	6213      	str	r3, [r2, #32]
 8006b76:	e01c      	b.n	8006bb2 <HAL_RCC_OscConfig+0x36e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b05      	cmp	r3, #5
 8006b7e:	d10c      	bne.n	8006b9a <HAL_RCC_OscConfig+0x356>
 8006b80:	4b6d      	ldr	r3, [pc, #436]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	4a6c      	ldr	r2, [pc, #432]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b86:	f043 0304 	orr.w	r3, r3, #4
 8006b8a:	6213      	str	r3, [r2, #32]
 8006b8c:	4b6a      	ldr	r3, [pc, #424]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4a69      	ldr	r2, [pc, #420]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	6213      	str	r3, [r2, #32]
 8006b98:	e00b      	b.n	8006bb2 <HAL_RCC_OscConfig+0x36e>
 8006b9a:	4b67      	ldr	r3, [pc, #412]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	4a66      	ldr	r2, [pc, #408]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	6213      	str	r3, [r2, #32]
 8006ba6:	4b64      	ldr	r3, [pc, #400]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	4a63      	ldr	r2, [pc, #396]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d015      	beq.n	8006be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bba:	f7fd fd45 	bl	8004648 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	e00a      	b.n	8006bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc2:	f7fd fd41 	bl	8004648 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0ab      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd8:	4b57      	ldr	r3, [pc, #348]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ee      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x37e>
 8006be4:	e014      	b.n	8006c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be6:	f7fd fd2f 	bl	8004648 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bee:	f7fd fd2b 	bl	8004648 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e095      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c04:	4b4c      	ldr	r3, [pc, #304]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ee      	bne.n	8006bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d105      	bne.n	8006c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c16:	4b48      	ldr	r3, [pc, #288]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	4a47      	ldr	r2, [pc, #284]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8081 	beq.w	8006d2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c2c:	4b42      	ldr	r3, [pc, #264]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d061      	beq.n	8006cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d146      	bne.n	8006cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c40:	4b3f      	ldr	r3, [pc, #252]	; (8006d40 <HAL_RCC_OscConfig+0x4fc>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c46:	f7fd fcff 	bl	8004648 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4e:	f7fd fcfb 	bl	8004648 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e067      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c74:	d108      	bne.n	8006c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c76:	4b30      	ldr	r3, [pc, #192]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	492d      	ldr	r1, [pc, #180]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c88:	4b2b      	ldr	r3, [pc, #172]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a19      	ldr	r1, [r3, #32]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	4927      	ldr	r1, [pc, #156]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <HAL_RCC_OscConfig+0x4fc>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca6:	f7fd fccf 	bl	8004648 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cae:	f7fd fccb 	bl	8004648 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e037      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x46a>
 8006ccc:	e02f      	b.n	8006d2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cce:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <HAL_RCC_OscConfig+0x4fc>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fd fcb8 	bl	8004648 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cdc:	f7fd fcb4 	bl	8004648 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e020      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x498>
 8006cfa:	e018      	b.n	8006d2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e013      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_RCC_OscConfig+0x4f4>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	40007000 	.word	0x40007000
 8006d40:	42420060 	.word	0x42420060

08006d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0d0      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d58:	4b6a      	ldr	r3, [pc, #424]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d910      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b67      	ldr	r3, [pc, #412]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 0207 	bic.w	r2, r3, #7
 8006d6e:	4965      	ldr	r1, [pc, #404]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b63      	ldr	r3, [pc, #396]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0b8      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d020      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da0:	4b59      	ldr	r3, [pc, #356]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a58      	ldr	r2, [pc, #352]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006db8:	4b53      	ldr	r3, [pc, #332]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4a52      	ldr	r2, [pc, #328]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc4:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	494d      	ldr	r1, [pc, #308]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d040      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d115      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e07f      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d107      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e02:	4b41      	ldr	r3, [pc, #260]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e073      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e12:	4b3d      	ldr	r3, [pc, #244]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e06b      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e22:	4b39      	ldr	r3, [pc, #228]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f023 0203 	bic.w	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4936      	ldr	r1, [pc, #216]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e34:	f7fd fc08 	bl	8004648 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3c:	f7fd fc04 	bl	8004648 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e053      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f003 020c 	and.w	r2, r3, #12
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1eb      	bne.n	8006e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d210      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 0207 	bic.w	r2, r3, #7
 8006e7a:	4922      	ldr	r1, [pc, #136]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_RCC_ClockConfig+0x1c0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d001      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e032      	b.n	8006efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4916      	ldr	r1, [pc, #88]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ebe:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ed2:	f000 f821 	bl	8006f18 <HAL_RCC_GetSysClockFreq>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RCC_ClockConfig+0x1c4>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ee4:	5cd3      	ldrb	r3, [r2, r3]
 8006ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8006eea:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <HAL_RCC_ClockConfig+0x1cc>)
 8006eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_RCC_ClockConfig+0x1d0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fb66 	bl	80045c4 <HAL_InitTick>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40022000 	.word	0x40022000
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	0800bd88 	.word	0x0800bd88
 8006f10:	20000004 	.word	0x20000004
 8006f14:	20000008 	.word	0x20000008

08006f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f18:	b490      	push	{r4, r7}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f1e:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f20:	1d3c      	adds	r4, r7, #4
 8006f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f28:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f42:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d002      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x40>
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d003      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x46>
 8006f56:	e02d      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f5a:	623b      	str	r3, [r7, #32]
      break;
 8006f5c:	e02d      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	0c9b      	lsrs	r3, r3, #18
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f7c:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	0c5b      	lsrs	r3, r3, #17
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f96:	fb02 f203 	mul.w	r2, r2, r3
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	e004      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	623b      	str	r3, [r7, #32]
      break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fb6:	623b      	str	r3, [r7, #32]
      break;
 8006fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3728      	adds	r7, #40	; 0x28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc90      	pop	{r4, r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	0800bd4c 	.word	0x0800bd4c
 8006fcc:	0800bd5c 	.word	0x0800bd5c
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	007a1200 	.word	0x007a1200
 8006fd8:	003d0900 	.word	0x003d0900

08006fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <HAL_RCC_GetHCLKFreq+0x10>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	20000004 	.word	0x20000004

08006ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ff4:	f7ff fff2 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8006ff8:	4601      	mov	r1, r0
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	4a03      	ldr	r2, [pc, #12]	; (8007014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007006:	5cd3      	ldrb	r3, [r2, r3]
 8007008:	fa21 f303 	lsr.w	r3, r1, r3
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40021000 	.word	0x40021000
 8007014:	0800bd98 	.word	0x0800bd98

08007018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800701c:	f7ff ffde 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8007020:	4601      	mov	r1, r0
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	0adb      	lsrs	r3, r3, #11
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	4a03      	ldr	r2, [pc, #12]	; (800703c <HAL_RCC_GetPCLK2Freq+0x24>)
 800702e:	5cd3      	ldrb	r3, [r2, r3]
 8007030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007034:	4618      	mov	r0, r3
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000
 800703c:	0800bd98 	.word	0x0800bd98

08007040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <RCC_Delay+0x34>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <RCC_Delay+0x38>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	0a5b      	lsrs	r3, r3, #9
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800705c:	bf00      	nop
  }
  while (Delay --);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1e5a      	subs	r2, r3, #1
 8007062:	60fa      	str	r2, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f9      	bne.n	800705c <RCC_Delay+0x1c>
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000004 	.word	0x20000004
 8007078:	10624dd3 	.word	0x10624dd3

0800707c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d07d      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800709c:	4b4f      	ldr	r3, [pc, #316]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b4c      	ldr	r3, [pc, #304]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4a4b      	ldr	r2, [pc, #300]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	61d3      	str	r3, [r2, #28]
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c4:	4b46      	ldr	r3, [pc, #280]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d118      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070d0:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070dc:	f7fd fab4 	bl	8004648 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e2:	e008      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fd fab0 	bl	8004648 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e06d      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f6:	4b3a      	ldr	r3, [pc, #232]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02e      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d027      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007120:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800712a:	4b2e      	ldr	r3, [pc, #184]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007130:	4b2c      	ldr	r3, [pc, #176]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007136:	4a29      	ldr	r2, [pc, #164]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d014      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd fa7f 	bl	8004648 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	e00a      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800714e:	f7fd fa7b 	bl	8004648 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e036      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ee      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4917      	ldr	r1, [pc, #92]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	4313      	orrs	r3, r2
 8007180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007188:	4b14      	ldr	r3, [pc, #80]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4a13      	ldr	r2, [pc, #76]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	490b      	ldr	r1, [pc, #44]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4904      	ldr	r1, [pc, #16]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40007000 	.word	0x40007000
 80071e4:	42420440 	.word	0x42420440

080071e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b08d      	sub	sp, #52	; 0x34
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071f0:	4b55      	ldr	r3, [pc, #340]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80071f2:	f107 040c 	add.w	r4, r7, #12
 80071f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80071fc:	4b53      	ldr	r3, [pc, #332]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	2300      	movs	r3, #0
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800720a:	2300      	movs	r3, #0
 800720c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	2300      	movs	r3, #0
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d07f      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800721c:	2b10      	cmp	r3, #16
 800721e:	d002      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8007220:	2b01      	cmp	r3, #1
 8007222:	d048      	beq.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007224:	e08b      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8007226:	4b4a      	ldr	r3, [pc, #296]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800722c:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d07f      	beq.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	0c9b      	lsrs	r3, r3, #18
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007244:	4413      	add	r3, r2
 8007246:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800724a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d018      	beq.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007256:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	0c5b      	lsrs	r3, r3, #17
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007264:	4413      	add	r3, r2
 8007266:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007276:	4a37      	ldr	r2, [pc, #220]	; (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	fbb2 f2f3 	udiv	r2, r2, r3
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	4a33      	ldr	r2, [pc, #204]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007292:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800729e:	d102      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072a4:	e048      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	4a2c      	ldr	r2, [pc, #176]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072b4:	e040      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c6:	d108      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80072d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	e01f      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80072f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	e00f      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007304:	d11a      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d014      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8007312:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007318:	e010      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800731a:	e00f      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800731c:	f7ff fe7c 	bl	8007018 <HAL_RCC_GetPCLK2Freq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	0b9b      	lsrs	r3, r3, #14
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	3301      	adds	r3, #1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007336:	e002      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8007338:	bf00      	nop
 800733a:	e000      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800733c:	bf00      	nop
    }
  }
  return (frequency);
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007340:	4618      	mov	r0, r3
 8007342:	3734      	adds	r7, #52	; 0x34
 8007344:	46bd      	mov	sp, r7
 8007346:	bd90      	pop	{r4, r7, pc}
 8007348:	0800bd60 	.word	0x0800bd60
 800734c:	0800bd70 	.word	0x0800bd70
 8007350:	40021000 	.word	0x40021000
 8007354:	007a1200 	.word	0x007a1200
 8007358:	003d0900 	.word	0x003d0900
 800735c:	aaaaaaab 	.word	0xaaaaaaab

08007360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e053      	b.n	800741a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fb fdfb 	bl	8002f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	ea42 0103 	orr.w	r1, r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	0c1a      	lsrs	r2, r3, #16
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f002 0204 	and.w	r2, r2, #4
 80073f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e01d      	b.n	8007470 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7fb fde9 	bl	8003020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f000 fb45 	bl	8007af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d007      	beq.n	80074b2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr

080074be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e01d      	b.n	800750c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f815 	bl	8007514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f000 faf7 	bl	8007af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
	...

08007528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2201      	movs	r2, #1
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fd58 	bl	8007ff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a10      	ldr	r2, [pc, #64]	; (8007588 <HAL_TIM_PWM_Start+0x60>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d107      	bne.n	800755a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b06      	cmp	r3, #6
 800756a:	d007      	beq.n	800757c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40012c00 	.word	0x40012c00

0800758c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d122      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0202 	mvn.w	r2, #2
 80075b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa73 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa66 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fa75 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b04      	cmp	r3, #4
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0204 	mvn.w	r2, #4
 800760c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa49 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa3c 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fa4b 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b08      	cmp	r3, #8
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b08      	cmp	r3, #8
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0208 	mvn.w	r2, #8
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2204      	movs	r2, #4
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa1f 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa12 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa21 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b10      	cmp	r3, #16
 800769c:	d122      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d11b      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0210 	mvn.w	r2, #16
 80076b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2208      	movs	r2, #8
 80076ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9f5 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9e8 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f9f7 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d10e      	bne.n	8007710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d107      	bne.n	8007710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0201 	mvn.w	r2, #1
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9c3 	bl	8007a96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d10e      	bne.n	800773c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007728:	2b80      	cmp	r3, #128	; 0x80
 800772a:	d107      	bne.n	800773c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd1c 	bl	8008174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d10e      	bne.n	8007768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d107      	bne.n	8007768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9bb 	bl	8007ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b20      	cmp	r3, #32
 8007774:	d10e      	bne.n	8007794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b20      	cmp	r3, #32
 8007782:	d107      	bne.n	8007794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0220 	mvn.w	r2, #32
 800778c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fce7 	bl	8008162 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0b4      	b.n	8007920 <HAL_TIM_PWM_ConfigChannel+0x184>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b0c      	cmp	r3, #12
 80077ca:	f200 809f 	bhi.w	800790c <HAL_TIM_PWM_ConfigChannel+0x170>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	08007809 	.word	0x08007809
 80077d8:	0800790d 	.word	0x0800790d
 80077dc:	0800790d 	.word	0x0800790d
 80077e0:	0800790d 	.word	0x0800790d
 80077e4:	08007849 	.word	0x08007849
 80077e8:	0800790d 	.word	0x0800790d
 80077ec:	0800790d 	.word	0x0800790d
 80077f0:	0800790d 	.word	0x0800790d
 80077f4:	0800788b 	.word	0x0800788b
 80077f8:	0800790d 	.word	0x0800790d
 80077fc:	0800790d 	.word	0x0800790d
 8007800:	0800790d 	.word	0x0800790d
 8007804:	080078cb 	.word	0x080078cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f9d0 	bl	8007bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0208 	orr.w	r2, r2, #8
 8007822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0204 	bic.w	r2, r2, #4
 8007832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6999      	ldr	r1, [r3, #24]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691a      	ldr	r2, [r3, #16]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	619a      	str	r2, [r3, #24]
      break;
 8007846:	e062      	b.n	800790e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fa16 	bl	8007c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6999      	ldr	r1, [r3, #24]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	021a      	lsls	r2, r3, #8
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	619a      	str	r2, [r3, #24]
      break;
 8007888:	e041      	b.n	800790e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fa5f 	bl	8007d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0208 	orr.w	r2, r2, #8
 80078a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0204 	bic.w	r2, r2, #4
 80078b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69d9      	ldr	r1, [r3, #28]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	61da      	str	r2, [r3, #28]
      break;
 80078c8:	e021      	b.n	800790e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 faa9 	bl	8007e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69d9      	ldr	r1, [r3, #28]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	021a      	lsls	r2, r3, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	61da      	str	r2, [r3, #28]
      break;
 800790a:	e000      	b.n	800790e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800790c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIM_ConfigClockSource+0x18>
 800793c:	2302      	movs	r3, #2
 800793e:	e0a6      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x166>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800795e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d067      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0x120>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d80b      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x6c>
 800797c:	2b10      	cmp	r3, #16
 800797e:	d073      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x140>
 8007980:	2b10      	cmp	r3, #16
 8007982:	d802      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x62>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d06f      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007988:	e078      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800798a:	2b20      	cmp	r3, #32
 800798c:	d06c      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x140>
 800798e:	2b30      	cmp	r3, #48	; 0x30
 8007990:	d06a      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007992:	e073      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007994:	2b70      	cmp	r3, #112	; 0x70
 8007996:	d00d      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x8c>
 8007998:	2b70      	cmp	r3, #112	; 0x70
 800799a:	d804      	bhi.n	80079a6 <HAL_TIM_ConfigClockSource+0x7e>
 800799c:	2b50      	cmp	r3, #80	; 0x50
 800799e:	d033      	beq.n	8007a08 <HAL_TIM_ConfigClockSource+0xe0>
 80079a0:	2b60      	cmp	r3, #96	; 0x60
 80079a2:	d041      	beq.n	8007a28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80079a4:	e06a      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80079a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079aa:	d066      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0x152>
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b0:	d017      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80079b2:	e063      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	6899      	ldr	r1, [r3, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f000 faf5 	bl	8007fb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	609a      	str	r2, [r3, #8]
      break;
 80079e0:	e04c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6899      	ldr	r1, [r3, #8]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f000 fade 	bl	8007fb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a04:	609a      	str	r2, [r3, #8]
      break;
 8007a06:	e039      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6859      	ldr	r1, [r3, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f000 fa55 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2150      	movs	r1, #80	; 0x50
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 faac 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007a26:	e029      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f000 fa73 	bl	8007f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2160      	movs	r1, #96	; 0x60
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fa9c 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007a46:	e019      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6859      	ldr	r1, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f000 fa35 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2140      	movs	r1, #64	; 0x40
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fa8c 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007a66:	e009      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f000 fa83 	bl	8007f7e <TIM_ITRx_SetConfig>
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a29      	ldr	r2, [pc, #164]	; (8007ba8 <TIM_Base_SetConfig+0xb8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00b      	beq.n	8007b20 <TIM_Base_SetConfig+0x30>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0e:	d007      	beq.n	8007b20 <TIM_Base_SetConfig+0x30>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a26      	ldr	r2, [pc, #152]	; (8007bac <TIM_Base_SetConfig+0xbc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_Base_SetConfig+0x30>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a25      	ldr	r2, [pc, #148]	; (8007bb0 <TIM_Base_SetConfig+0xc0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d108      	bne.n	8007b32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <TIM_Base_SetConfig+0xb8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00b      	beq.n	8007b52 <TIM_Base_SetConfig+0x62>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b40:	d007      	beq.n	8007b52 <TIM_Base_SetConfig+0x62>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <TIM_Base_SetConfig+0xbc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d003      	beq.n	8007b52 <TIM_Base_SetConfig+0x62>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <TIM_Base_SetConfig+0xc0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d108      	bne.n	8007b64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <TIM_Base_SetConfig+0xb8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800

08007bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f023 0302 	bic.w	r3, r3, #2
 8007bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <TIM_OC1_SetConfig+0xc8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10c      	bne.n	8007c2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f023 0308 	bic.w	r3, r3, #8
 8007c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 0304 	bic.w	r3, r3, #4
 8007c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <TIM_OC1_SetConfig+0xc8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d111      	bne.n	8007c56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	621a      	str	r2, [r3, #32]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00

08007c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f023 0210 	bic.w	r2, r3, #16
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0320 	bic.w	r3, r3, #32
 8007cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1d      	ldr	r2, [pc, #116]	; (8007d50 <TIM_OC2_SetConfig+0xd0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10d      	bne.n	8007cfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a14      	ldr	r2, [pc, #80]	; (8007d50 <TIM_OC2_SetConfig+0xd0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d113      	bne.n	8007d2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr
 8007d50:	40012c00 	.word	0x40012c00

08007d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <TIM_OC3_SetConfig+0xd0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d10d      	bne.n	8007dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a14      	ldr	r2, [pc, #80]	; (8007e24 <TIM_OC3_SetConfig+0xd0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d113      	bne.n	8007dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	621a      	str	r2, [r3, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40012c00 	.word	0x40012c00

08007e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	031b      	lsls	r3, r3, #12
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <TIM_OC4_SetConfig+0x98>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d109      	bne.n	8007e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	019b      	lsls	r3, r3, #6
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bc80      	pop	{r7}
 8007ebe:	4770      	bx	lr
 8007ec0:	40012c00 	.word	0x40012c00

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 030a 	bic.w	r3, r3, #10
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	f023 0210 	bic.w	r2, r3, #16
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	031b      	lsls	r3, r3, #12
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr

08007f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f043 0307 	orr.w	r3, r3, #7
 8007fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr

08007fb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	021a      	lsls	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	609a      	str	r2, [r3, #8]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 031f 	and.w	r3, r3, #31
 8008002:	2201      	movs	r2, #1
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1a      	ldr	r2, [r3, #32]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	43db      	mvns	r3, r3
 8008012:	401a      	ands	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1a      	ldr	r2, [r3, #32]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	fa01 f303 	lsl.w	r3, r1, r3
 8008028:	431a      	orrs	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800804c:	2302      	movs	r3, #2
 800804e:	e032      	b.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008088:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4313      	orrs	r3, r2
 8008092:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080d8:	2302      	movs	r3, #2
 80080da:	e03d      	b.n	8008158 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr

08008186 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e03f      	b.n	8008218 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fa ffa3 	bl	80030f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2224      	movs	r2, #36	; 0x24
 80081b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f828 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695a      	ldr	r2, [r3, #20]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	430b      	orrs	r3, r1
 8008266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a52      	ldr	r2, [pc, #328]	; (80083cc <UART_SetConfig+0x1ac>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d14e      	bne.n	8008326 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fe fec6 	bl	8007018 <HAL_RCC_GetPCLK2Freq>
 800828c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009a      	lsls	r2, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	0119      	lsls	r1, r3, #4
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009a      	lsls	r2, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80082c4:	4b42      	ldr	r3, [pc, #264]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082c6:	fba3 0302 	umull	r0, r3, r3, r2
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	2064      	movs	r0, #100	; 0x64
 80082ce:	fb00 f303 	mul.w	r3, r0, r3
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	3332      	adds	r3, #50	; 0x32
 80082d8:	4a3d      	ldr	r2, [pc, #244]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082e4:	4419      	add	r1, r3
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009a      	lsls	r2, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80082fc:	4b34      	ldr	r3, [pc, #208]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	2064      	movs	r0, #100	; 0x64
 8008306:	fb00 f303 	mul.w	r3, r0, r3
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	3332      	adds	r3, #50	; 0x32
 8008310:	4a2f      	ldr	r2, [pc, #188]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	440a      	add	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008324:	e04d      	b.n	80083c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008326:	f7fe fe63 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 800832a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009a      	lsls	r2, r3, #2
 8008336:	441a      	add	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008342:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	0119      	lsls	r1, r3, #4
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009a      	lsls	r2, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008362:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008364:	fba3 0302 	umull	r0, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	2064      	movs	r0, #100	; 0x64
 800836c:	fb00 f303 	mul.w	r3, r0, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	3332      	adds	r3, #50	; 0x32
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008382:	4419      	add	r1, r3
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009a      	lsls	r2, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	fbb2 f2f3 	udiv	r2, r2, r3
 800839a:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <UART_SetConfig+0x1b0>)
 800839c:	fba3 0302 	umull	r0, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2064      	movs	r0, #100	; 0x64
 80083a4:	fb00 f303 	mul.w	r3, r0, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	3332      	adds	r3, #50	; 0x32
 80083ae:	4a08      	ldr	r2, [pc, #32]	; (80083d0 <UART_SetConfig+0x1b0>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	440a      	add	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	40013800 	.word	0x40013800
 80083d0:	51eb851f 	.word	0x51eb851f

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000010 	.word	0x20000010

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	2500      	movs	r5, #0
 80083e4:	4e0c      	ldr	r6, [pc, #48]	; (8008418 <__libc_init_array+0x38>)
 80083e6:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e8:	1ba4      	subs	r4, r4, r6
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	f003 fba2 	bl	800bb38 <_init>
 80083f4:	2500      	movs	r5, #0
 80083f6:	4e0a      	ldr	r6, [pc, #40]	; (8008420 <__libc_init_array+0x40>)
 80083f8:	4c0a      	ldr	r4, [pc, #40]	; (8008424 <__libc_init_array+0x44>)
 80083fa:	1ba4      	subs	r4, r4, r6
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	42a5      	cmp	r5, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008408:	4798      	blx	r3
 800840a:	3501      	adds	r5, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008412:	4798      	blx	r3
 8008414:	3501      	adds	r5, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	0800c1e8 	.word	0x0800c1e8
 800841c:	0800c1e8 	.word	0x0800c1e8
 8008420:	0800c1e8 	.word	0x0800c1e8
 8008424:	0800c1ec 	.word	0x0800c1ec

08008428 <memset>:
 8008428:	4603      	mov	r3, r0
 800842a:	4402      	add	r2, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <__cvt>:
 8008438:	2b00      	cmp	r3, #0
 800843a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843e:	461e      	mov	r6, r3
 8008440:	bfbb      	ittet	lt
 8008442:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008446:	461e      	movlt	r6, r3
 8008448:	2300      	movge	r3, #0
 800844a:	232d      	movlt	r3, #45	; 0x2d
 800844c:	b088      	sub	sp, #32
 800844e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008450:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008454:	f027 0720 	bic.w	r7, r7, #32
 8008458:	2f46      	cmp	r7, #70	; 0x46
 800845a:	4614      	mov	r4, r2
 800845c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800845e:	700b      	strb	r3, [r1, #0]
 8008460:	d004      	beq.n	800846c <__cvt+0x34>
 8008462:	2f45      	cmp	r7, #69	; 0x45
 8008464:	d100      	bne.n	8008468 <__cvt+0x30>
 8008466:	3501      	adds	r5, #1
 8008468:	2302      	movs	r3, #2
 800846a:	e000      	b.n	800846e <__cvt+0x36>
 800846c:	2303      	movs	r3, #3
 800846e:	aa07      	add	r2, sp, #28
 8008470:	9204      	str	r2, [sp, #16]
 8008472:	aa06      	add	r2, sp, #24
 8008474:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008478:	e9cd 3500 	strd	r3, r5, [sp]
 800847c:	4622      	mov	r2, r4
 800847e:	4633      	mov	r3, r6
 8008480:	f000 fcda 	bl	8008e38 <_dtoa_r>
 8008484:	2f47      	cmp	r7, #71	; 0x47
 8008486:	4680      	mov	r8, r0
 8008488:	d102      	bne.n	8008490 <__cvt+0x58>
 800848a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848c:	07db      	lsls	r3, r3, #31
 800848e:	d526      	bpl.n	80084de <__cvt+0xa6>
 8008490:	2f46      	cmp	r7, #70	; 0x46
 8008492:	eb08 0905 	add.w	r9, r8, r5
 8008496:	d111      	bne.n	80084bc <__cvt+0x84>
 8008498:	f898 3000 	ldrb.w	r3, [r8]
 800849c:	2b30      	cmp	r3, #48	; 0x30
 800849e:	d10a      	bne.n	80084b6 <__cvt+0x7e>
 80084a0:	2200      	movs	r2, #0
 80084a2:	2300      	movs	r3, #0
 80084a4:	4620      	mov	r0, r4
 80084a6:	4631      	mov	r1, r6
 80084a8:	f7f8 fa7e 	bl	80009a8 <__aeabi_dcmpeq>
 80084ac:	b918      	cbnz	r0, 80084b6 <__cvt+0x7e>
 80084ae:	f1c5 0501 	rsb	r5, r5, #1
 80084b2:	f8ca 5000 	str.w	r5, [sl]
 80084b6:	f8da 3000 	ldr.w	r3, [sl]
 80084ba:	4499      	add	r9, r3
 80084bc:	2200      	movs	r2, #0
 80084be:	2300      	movs	r3, #0
 80084c0:	4620      	mov	r0, r4
 80084c2:	4631      	mov	r1, r6
 80084c4:	f7f8 fa70 	bl	80009a8 <__aeabi_dcmpeq>
 80084c8:	b938      	cbnz	r0, 80084da <__cvt+0xa2>
 80084ca:	2230      	movs	r2, #48	; 0x30
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	454b      	cmp	r3, r9
 80084d0:	d205      	bcs.n	80084de <__cvt+0xa6>
 80084d2:	1c59      	adds	r1, r3, #1
 80084d4:	9107      	str	r1, [sp, #28]
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e7f8      	b.n	80084cc <__cvt+0x94>
 80084da:	f8cd 901c 	str.w	r9, [sp, #28]
 80084de:	4640      	mov	r0, r8
 80084e0:	9b07      	ldr	r3, [sp, #28]
 80084e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084e4:	eba3 0308 	sub.w	r3, r3, r8
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	b008      	add	sp, #32
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084f0 <__exponent>:
 80084f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084f2:	2900      	cmp	r1, #0
 80084f4:	bfb4      	ite	lt
 80084f6:	232d      	movlt	r3, #45	; 0x2d
 80084f8:	232b      	movge	r3, #43	; 0x2b
 80084fa:	4604      	mov	r4, r0
 80084fc:	bfb8      	it	lt
 80084fe:	4249      	neglt	r1, r1
 8008500:	2909      	cmp	r1, #9
 8008502:	f804 2b02 	strb.w	r2, [r4], #2
 8008506:	7043      	strb	r3, [r0, #1]
 8008508:	dd21      	ble.n	800854e <__exponent+0x5e>
 800850a:	f10d 0307 	add.w	r3, sp, #7
 800850e:	461f      	mov	r7, r3
 8008510:	260a      	movs	r6, #10
 8008512:	fb91 f5f6 	sdiv	r5, r1, r6
 8008516:	fb06 1115 	mls	r1, r6, r5, r1
 800851a:	2d09      	cmp	r5, #9
 800851c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008520:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008524:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008528:	4629      	mov	r1, r5
 800852a:	dc09      	bgt.n	8008540 <__exponent+0x50>
 800852c:	3130      	adds	r1, #48	; 0x30
 800852e:	3b02      	subs	r3, #2
 8008530:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008534:	42bb      	cmp	r3, r7
 8008536:	4622      	mov	r2, r4
 8008538:	d304      	bcc.n	8008544 <__exponent+0x54>
 800853a:	1a10      	subs	r0, r2, r0
 800853c:	b003      	add	sp, #12
 800853e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008540:	4613      	mov	r3, r2
 8008542:	e7e6      	b.n	8008512 <__exponent+0x22>
 8008544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008548:	f804 2b01 	strb.w	r2, [r4], #1
 800854c:	e7f2      	b.n	8008534 <__exponent+0x44>
 800854e:	2330      	movs	r3, #48	; 0x30
 8008550:	4419      	add	r1, r3
 8008552:	7083      	strb	r3, [r0, #2]
 8008554:	1d02      	adds	r2, r0, #4
 8008556:	70c1      	strb	r1, [r0, #3]
 8008558:	e7ef      	b.n	800853a <__exponent+0x4a>
	...

0800855c <_printf_float>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	b091      	sub	sp, #68	; 0x44
 8008562:	460c      	mov	r4, r1
 8008564:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008566:	4693      	mov	fp, r2
 8008568:	461e      	mov	r6, r3
 800856a:	4605      	mov	r5, r0
 800856c:	f001 fa18 	bl	80099a0 <_localeconv_r>
 8008570:	6803      	ldr	r3, [r0, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	f7f7 fdeb 	bl	8000150 <strlen>
 800857a:	2300      	movs	r3, #0
 800857c:	930e      	str	r3, [sp, #56]	; 0x38
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	900a      	str	r0, [sp, #40]	; 0x28
 8008582:	3307      	adds	r3, #7
 8008584:	f023 0307 	bic.w	r3, r3, #7
 8008588:	f103 0208 	add.w	r2, r3, #8
 800858c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008590:	f8d4 a000 	ldr.w	sl, [r4]
 8008594:	603a      	str	r2, [r7, #0]
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800859e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80085a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ac:	4ba6      	ldr	r3, [pc, #664]	; (8008848 <_printf_float+0x2ec>)
 80085ae:	4638      	mov	r0, r7
 80085b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085b2:	f7f8 fa2b 	bl	8000a0c <__aeabi_dcmpun>
 80085b6:	bb68      	cbnz	r0, 8008614 <_printf_float+0xb8>
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085bc:	4ba2      	ldr	r3, [pc, #648]	; (8008848 <_printf_float+0x2ec>)
 80085be:	4638      	mov	r0, r7
 80085c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085c2:	f7f8 fa05 	bl	80009d0 <__aeabi_dcmple>
 80085c6:	bb28      	cbnz	r0, 8008614 <_printf_float+0xb8>
 80085c8:	2200      	movs	r2, #0
 80085ca:	2300      	movs	r3, #0
 80085cc:	4638      	mov	r0, r7
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f8 f9f4 	bl	80009bc <__aeabi_dcmplt>
 80085d4:	b110      	cbz	r0, 80085dc <_printf_float+0x80>
 80085d6:	232d      	movs	r3, #45	; 0x2d
 80085d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085dc:	4f9b      	ldr	r7, [pc, #620]	; (800884c <_printf_float+0x2f0>)
 80085de:	4b9c      	ldr	r3, [pc, #624]	; (8008850 <_printf_float+0x2f4>)
 80085e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085e4:	bf98      	it	ls
 80085e6:	461f      	movls	r7, r3
 80085e8:	2303      	movs	r3, #3
 80085ea:	f04f 0900 	mov.w	r9, #0
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	f02a 0304 	bic.w	r3, sl, #4
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	9600      	str	r6, [sp, #0]
 80085f8:	465b      	mov	r3, fp
 80085fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f9e2 	bl	80089c8 <_printf_common>
 8008604:	3001      	adds	r0, #1
 8008606:	f040 8090 	bne.w	800872a <_printf_float+0x1ce>
 800860a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800860e:	b011      	add	sp, #68	; 0x44
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	463a      	mov	r2, r7
 8008616:	464b      	mov	r3, r9
 8008618:	4638      	mov	r0, r7
 800861a:	4649      	mov	r1, r9
 800861c:	f7f8 f9f6 	bl	8000a0c <__aeabi_dcmpun>
 8008620:	b110      	cbz	r0, 8008628 <_printf_float+0xcc>
 8008622:	4f8c      	ldr	r7, [pc, #560]	; (8008854 <_printf_float+0x2f8>)
 8008624:	4b8c      	ldr	r3, [pc, #560]	; (8008858 <_printf_float+0x2fc>)
 8008626:	e7db      	b.n	80085e0 <_printf_float+0x84>
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800862e:	1c59      	adds	r1, r3, #1
 8008630:	a80d      	add	r0, sp, #52	; 0x34
 8008632:	a90e      	add	r1, sp, #56	; 0x38
 8008634:	d140      	bne.n	80086b8 <_printf_float+0x15c>
 8008636:	2306      	movs	r3, #6
 8008638:	6063      	str	r3, [r4, #4]
 800863a:	f04f 0c00 	mov.w	ip, #0
 800863e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008642:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	463a      	mov	r2, r7
 8008652:	464b      	mov	r3, r9
 8008654:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008658:	4628      	mov	r0, r5
 800865a:	f7ff feed 	bl	8008438 <__cvt>
 800865e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008662:	2b47      	cmp	r3, #71	; 0x47
 8008664:	4607      	mov	r7, r0
 8008666:	d109      	bne.n	800867c <_printf_float+0x120>
 8008668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866a:	1cd8      	adds	r0, r3, #3
 800866c:	db02      	blt.n	8008674 <_printf_float+0x118>
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	4293      	cmp	r3, r2
 8008672:	dd47      	ble.n	8008704 <_printf_float+0x1a8>
 8008674:	f1a8 0802 	sub.w	r8, r8, #2
 8008678:	fa5f f888 	uxtb.w	r8, r8
 800867c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008680:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008682:	d824      	bhi.n	80086ce <_printf_float+0x172>
 8008684:	3901      	subs	r1, #1
 8008686:	4642      	mov	r2, r8
 8008688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800868c:	910d      	str	r1, [sp, #52]	; 0x34
 800868e:	f7ff ff2f 	bl	80084f0 <__exponent>
 8008692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008694:	4681      	mov	r9, r0
 8008696:	1813      	adds	r3, r2, r0
 8008698:	2a01      	cmp	r2, #1
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	dc02      	bgt.n	80086a4 <_printf_float+0x148>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	07d1      	lsls	r1, r2, #31
 80086a2:	d501      	bpl.n	80086a8 <_printf_float+0x14c>
 80086a4:	3301      	adds	r3, #1
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0a2      	beq.n	80085f6 <_printf_float+0x9a>
 80086b0:	232d      	movs	r3, #45	; 0x2d
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	e79e      	b.n	80085f6 <_printf_float+0x9a>
 80086b8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80086bc:	f000 816e 	beq.w	800899c <_printf_float+0x440>
 80086c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086c4:	d1b9      	bne.n	800863a <_printf_float+0xde>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1b7      	bne.n	800863a <_printf_float+0xde>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e7b4      	b.n	8008638 <_printf_float+0xdc>
 80086ce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80086d2:	d119      	bne.n	8008708 <_printf_float+0x1ac>
 80086d4:	2900      	cmp	r1, #0
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	dd0c      	ble.n	80086f4 <_printf_float+0x198>
 80086da:	6121      	str	r1, [r4, #16]
 80086dc:	b913      	cbnz	r3, 80086e4 <_printf_float+0x188>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	07d2      	lsls	r2, r2, #31
 80086e2:	d502      	bpl.n	80086ea <_printf_float+0x18e>
 80086e4:	3301      	adds	r3, #1
 80086e6:	440b      	add	r3, r1
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	f04f 0900 	mov.w	r9, #0
 80086f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80086f2:	e7d9      	b.n	80086a8 <_printf_float+0x14c>
 80086f4:	b913      	cbnz	r3, 80086fc <_printf_float+0x1a0>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	07d0      	lsls	r0, r2, #31
 80086fa:	d501      	bpl.n	8008700 <_printf_float+0x1a4>
 80086fc:	3302      	adds	r3, #2
 80086fe:	e7f3      	b.n	80086e8 <_printf_float+0x18c>
 8008700:	2301      	movs	r3, #1
 8008702:	e7f1      	b.n	80086e8 <_printf_float+0x18c>
 8008704:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008708:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800870c:	4293      	cmp	r3, r2
 800870e:	db05      	blt.n	800871c <_printf_float+0x1c0>
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	07d1      	lsls	r1, r2, #31
 8008716:	d5e8      	bpl.n	80086ea <_printf_float+0x18e>
 8008718:	3301      	adds	r3, #1
 800871a:	e7e5      	b.n	80086e8 <_printf_float+0x18c>
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfcc      	ite	gt
 8008720:	2301      	movgt	r3, #1
 8008722:	f1c3 0302 	rsble	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	e7de      	b.n	80086e8 <_printf_float+0x18c>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	055a      	lsls	r2, r3, #21
 800872e:	d407      	bmi.n	8008740 <_printf_float+0x1e4>
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	463a      	mov	r2, r7
 8008734:	4659      	mov	r1, fp
 8008736:	4628      	mov	r0, r5
 8008738:	47b0      	blx	r6
 800873a:	3001      	adds	r0, #1
 800873c:	d129      	bne.n	8008792 <_printf_float+0x236>
 800873e:	e764      	b.n	800860a <_printf_float+0xae>
 8008740:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008744:	f240 80d7 	bls.w	80088f6 <_printf_float+0x39a>
 8008748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	f7f8 f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8008754:	b388      	cbz	r0, 80087ba <_printf_float+0x25e>
 8008756:	2301      	movs	r3, #1
 8008758:	4a40      	ldr	r2, [pc, #256]	; (800885c <_printf_float+0x300>)
 800875a:	4659      	mov	r1, fp
 800875c:	4628      	mov	r0, r5
 800875e:	47b0      	blx	r6
 8008760:	3001      	adds	r0, #1
 8008762:	f43f af52 	beq.w	800860a <_printf_float+0xae>
 8008766:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800876a:	429a      	cmp	r2, r3
 800876c:	db02      	blt.n	8008774 <_printf_float+0x218>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	07d8      	lsls	r0, r3, #31
 8008772:	d50e      	bpl.n	8008792 <_printf_float+0x236>
 8008774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008778:	4659      	mov	r1, fp
 800877a:	4628      	mov	r0, r5
 800877c:	47b0      	blx	r6
 800877e:	3001      	adds	r0, #1
 8008780:	f43f af43 	beq.w	800860a <_printf_float+0xae>
 8008784:	2700      	movs	r7, #0
 8008786:	f104 081a 	add.w	r8, r4, #26
 800878a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878c:	3b01      	subs	r3, #1
 800878e:	42bb      	cmp	r3, r7
 8008790:	dc09      	bgt.n	80087a6 <_printf_float+0x24a>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	079f      	lsls	r7, r3, #30
 8008796:	f100 80fd 	bmi.w	8008994 <_printf_float+0x438>
 800879a:	68e0      	ldr	r0, [r4, #12]
 800879c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800879e:	4298      	cmp	r0, r3
 80087a0:	bfb8      	it	lt
 80087a2:	4618      	movlt	r0, r3
 80087a4:	e733      	b.n	800860e <_printf_float+0xb2>
 80087a6:	2301      	movs	r3, #1
 80087a8:	4642      	mov	r2, r8
 80087aa:	4659      	mov	r1, fp
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b0      	blx	r6
 80087b0:	3001      	adds	r0, #1
 80087b2:	f43f af2a 	beq.w	800860a <_printf_float+0xae>
 80087b6:	3701      	adds	r7, #1
 80087b8:	e7e7      	b.n	800878a <_printf_float+0x22e>
 80087ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc2b      	bgt.n	8008818 <_printf_float+0x2bc>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4a26      	ldr	r2, [pc, #152]	; (800885c <_printf_float+0x300>)
 80087c4:	4659      	mov	r1, fp
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b0      	blx	r6
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af1d 	beq.w	800860a <_printf_float+0xae>
 80087d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d2:	b923      	cbnz	r3, 80087de <_printf_float+0x282>
 80087d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d6:	b913      	cbnz	r3, 80087de <_printf_float+0x282>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07d9      	lsls	r1, r3, #31
 80087dc:	d5d9      	bpl.n	8008792 <_printf_float+0x236>
 80087de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087e2:	4659      	mov	r1, fp
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b0      	blx	r6
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f af0e 	beq.w	800860a <_printf_float+0xae>
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	f104 091a 	add.w	r9, r4, #26
 80087f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f8:	425b      	negs	r3, r3
 80087fa:	4543      	cmp	r3, r8
 80087fc:	dc01      	bgt.n	8008802 <_printf_float+0x2a6>
 80087fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008800:	e797      	b.n	8008732 <_printf_float+0x1d6>
 8008802:	2301      	movs	r3, #1
 8008804:	464a      	mov	r2, r9
 8008806:	4659      	mov	r1, fp
 8008808:	4628      	mov	r0, r5
 800880a:	47b0      	blx	r6
 800880c:	3001      	adds	r0, #1
 800880e:	f43f aefc 	beq.w	800860a <_printf_float+0xae>
 8008812:	f108 0801 	add.w	r8, r8, #1
 8008816:	e7ee      	b.n	80087f6 <_printf_float+0x29a>
 8008818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800881c:	429a      	cmp	r2, r3
 800881e:	bfa8      	it	ge
 8008820:	461a      	movge	r2, r3
 8008822:	2a00      	cmp	r2, #0
 8008824:	4690      	mov	r8, r2
 8008826:	dd07      	ble.n	8008838 <_printf_float+0x2dc>
 8008828:	4613      	mov	r3, r2
 800882a:	4659      	mov	r1, fp
 800882c:	463a      	mov	r2, r7
 800882e:	4628      	mov	r0, r5
 8008830:	47b0      	blx	r6
 8008832:	3001      	adds	r0, #1
 8008834:	f43f aee9 	beq.w	800860a <_printf_float+0xae>
 8008838:	f104 031a 	add.w	r3, r4, #26
 800883c:	f04f 0a00 	mov.w	sl, #0
 8008840:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008844:	930b      	str	r3, [sp, #44]	; 0x2c
 8008846:	e015      	b.n	8008874 <_printf_float+0x318>
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	0800bda4 	.word	0x0800bda4
 8008850:	0800bda0 	.word	0x0800bda0
 8008854:	0800bdac 	.word	0x0800bdac
 8008858:	0800bda8 	.word	0x0800bda8
 800885c:	0800bdb0 	.word	0x0800bdb0
 8008860:	2301      	movs	r3, #1
 8008862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008864:	4659      	mov	r1, fp
 8008866:	4628      	mov	r0, r5
 8008868:	47b0      	blx	r6
 800886a:	3001      	adds	r0, #1
 800886c:	f43f aecd 	beq.w	800860a <_printf_float+0xae>
 8008870:	f10a 0a01 	add.w	sl, sl, #1
 8008874:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008878:	eba9 0308 	sub.w	r3, r9, r8
 800887c:	4553      	cmp	r3, sl
 800887e:	dcef      	bgt.n	8008860 <_printf_float+0x304>
 8008880:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008884:	429a      	cmp	r2, r3
 8008886:	444f      	add	r7, r9
 8008888:	db14      	blt.n	80088b4 <_printf_float+0x358>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	07da      	lsls	r2, r3, #31
 800888e:	d411      	bmi.n	80088b4 <_printf_float+0x358>
 8008890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008892:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008894:	eba3 0209 	sub.w	r2, r3, r9
 8008898:	eba3 0901 	sub.w	r9, r3, r1
 800889c:	4591      	cmp	r9, r2
 800889e:	bfa8      	it	ge
 80088a0:	4691      	movge	r9, r2
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	dc0d      	bgt.n	80088c4 <_printf_float+0x368>
 80088a8:	2700      	movs	r7, #0
 80088aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ae:	f104 081a 	add.w	r8, r4, #26
 80088b2:	e018      	b.n	80088e6 <_printf_float+0x38a>
 80088b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b8:	4659      	mov	r1, fp
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b0      	blx	r6
 80088be:	3001      	adds	r0, #1
 80088c0:	d1e6      	bne.n	8008890 <_printf_float+0x334>
 80088c2:	e6a2      	b.n	800860a <_printf_float+0xae>
 80088c4:	464b      	mov	r3, r9
 80088c6:	463a      	mov	r2, r7
 80088c8:	4659      	mov	r1, fp
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b0      	blx	r6
 80088ce:	3001      	adds	r0, #1
 80088d0:	d1ea      	bne.n	80088a8 <_printf_float+0x34c>
 80088d2:	e69a      	b.n	800860a <_printf_float+0xae>
 80088d4:	2301      	movs	r3, #1
 80088d6:	4642      	mov	r2, r8
 80088d8:	4659      	mov	r1, fp
 80088da:	4628      	mov	r0, r5
 80088dc:	47b0      	blx	r6
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f ae93 	beq.w	800860a <_printf_float+0xae>
 80088e4:	3701      	adds	r7, #1
 80088e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	eba3 0309 	sub.w	r3, r3, r9
 80088f0:	42bb      	cmp	r3, r7
 80088f2:	dcef      	bgt.n	80088d4 <_printf_float+0x378>
 80088f4:	e74d      	b.n	8008792 <_printf_float+0x236>
 80088f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088f8:	2a01      	cmp	r2, #1
 80088fa:	dc01      	bgt.n	8008900 <_printf_float+0x3a4>
 80088fc:	07db      	lsls	r3, r3, #31
 80088fe:	d538      	bpl.n	8008972 <_printf_float+0x416>
 8008900:	2301      	movs	r3, #1
 8008902:	463a      	mov	r2, r7
 8008904:	4659      	mov	r1, fp
 8008906:	4628      	mov	r0, r5
 8008908:	47b0      	blx	r6
 800890a:	3001      	adds	r0, #1
 800890c:	f43f ae7d 	beq.w	800860a <_printf_float+0xae>
 8008910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008914:	4659      	mov	r1, fp
 8008916:	4628      	mov	r0, r5
 8008918:	47b0      	blx	r6
 800891a:	3001      	adds	r0, #1
 800891c:	f107 0701 	add.w	r7, r7, #1
 8008920:	f43f ae73 	beq.w	800860a <_printf_float+0xae>
 8008924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892a:	2200      	movs	r2, #0
 800892c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008930:	2300      	movs	r3, #0
 8008932:	f7f8 f839 	bl	80009a8 <__aeabi_dcmpeq>
 8008936:	b9c0      	cbnz	r0, 800896a <_printf_float+0x40e>
 8008938:	4643      	mov	r3, r8
 800893a:	463a      	mov	r2, r7
 800893c:	4659      	mov	r1, fp
 800893e:	4628      	mov	r0, r5
 8008940:	47b0      	blx	r6
 8008942:	3001      	adds	r0, #1
 8008944:	d10d      	bne.n	8008962 <_printf_float+0x406>
 8008946:	e660      	b.n	800860a <_printf_float+0xae>
 8008948:	2301      	movs	r3, #1
 800894a:	4642      	mov	r2, r8
 800894c:	4659      	mov	r1, fp
 800894e:	4628      	mov	r0, r5
 8008950:	47b0      	blx	r6
 8008952:	3001      	adds	r0, #1
 8008954:	f43f ae59 	beq.w	800860a <_printf_float+0xae>
 8008958:	3701      	adds	r7, #1
 800895a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895c:	3b01      	subs	r3, #1
 800895e:	42bb      	cmp	r3, r7
 8008960:	dcf2      	bgt.n	8008948 <_printf_float+0x3ec>
 8008962:	464b      	mov	r3, r9
 8008964:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008968:	e6e4      	b.n	8008734 <_printf_float+0x1d8>
 800896a:	2700      	movs	r7, #0
 800896c:	f104 081a 	add.w	r8, r4, #26
 8008970:	e7f3      	b.n	800895a <_printf_float+0x3fe>
 8008972:	2301      	movs	r3, #1
 8008974:	e7e1      	b.n	800893a <_printf_float+0x3de>
 8008976:	2301      	movs	r3, #1
 8008978:	4642      	mov	r2, r8
 800897a:	4659      	mov	r1, fp
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	3001      	adds	r0, #1
 8008982:	f43f ae42 	beq.w	800860a <_printf_float+0xae>
 8008986:	3701      	adds	r7, #1
 8008988:	68e3      	ldr	r3, [r4, #12]
 800898a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	42bb      	cmp	r3, r7
 8008990:	dcf1      	bgt.n	8008976 <_printf_float+0x41a>
 8008992:	e702      	b.n	800879a <_printf_float+0x23e>
 8008994:	2700      	movs	r7, #0
 8008996:	f104 0819 	add.w	r8, r4, #25
 800899a:	e7f5      	b.n	8008988 <_printf_float+0x42c>
 800899c:	2b00      	cmp	r3, #0
 800899e:	f43f ae94 	beq.w	80086ca <_printf_float+0x16e>
 80089a2:	f04f 0c00 	mov.w	ip, #0
 80089a6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80089aa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80089b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	463a      	mov	r2, r7
 80089bc:	464b      	mov	r3, r9
 80089be:	4628      	mov	r0, r5
 80089c0:	f7ff fd3a 	bl	8008438 <__cvt>
 80089c4:	4607      	mov	r7, r0
 80089c6:	e64f      	b.n	8008668 <_printf_float+0x10c>

080089c8 <_printf_common>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	4691      	mov	r9, r2
 80089ce:	461f      	mov	r7, r3
 80089d0:	688a      	ldr	r2, [r1, #8]
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	4606      	mov	r6, r0
 80089d6:	4293      	cmp	r3, r2
 80089d8:	bfb8      	it	lt
 80089da:	4613      	movlt	r3, r2
 80089dc:	f8c9 3000 	str.w	r3, [r9]
 80089e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089e4:	460c      	mov	r4, r1
 80089e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ea:	b112      	cbz	r2, 80089f2 <_printf_common+0x2a>
 80089ec:	3301      	adds	r3, #1
 80089ee:	f8c9 3000 	str.w	r3, [r9]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	0699      	lsls	r1, r3, #26
 80089f6:	bf42      	ittt	mi
 80089f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089fc:	3302      	addmi	r3, #2
 80089fe:	f8c9 3000 	strmi.w	r3, [r9]
 8008a02:	6825      	ldr	r5, [r4, #0]
 8008a04:	f015 0506 	ands.w	r5, r5, #6
 8008a08:	d107      	bne.n	8008a1a <_printf_common+0x52>
 8008a0a:	f104 0a19 	add.w	sl, r4, #25
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	f8d9 2000 	ldr.w	r2, [r9]
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	42ab      	cmp	r3, r5
 8008a18:	dc29      	bgt.n	8008a6e <_printf_common+0xa6>
 8008a1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	3300      	adds	r3, #0
 8008a22:	bf18      	it	ne
 8008a24:	2301      	movne	r3, #1
 8008a26:	0692      	lsls	r2, r2, #26
 8008a28:	d42e      	bmi.n	8008a88 <_printf_common+0xc0>
 8008a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4630      	mov	r0, r6
 8008a32:	47c0      	blx	r8
 8008a34:	3001      	adds	r0, #1
 8008a36:	d021      	beq.n	8008a7c <_printf_common+0xb4>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	68e5      	ldr	r5, [r4, #12]
 8008a3c:	f003 0306 	and.w	r3, r3, #6
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	bf18      	it	ne
 8008a44:	2500      	movne	r5, #0
 8008a46:	f8d9 2000 	ldr.w	r2, [r9]
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	bf08      	it	eq
 8008a50:	1aad      	subeq	r5, r5, r2
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	bf08      	it	eq
 8008a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	bfc4      	itt	gt
 8008a60:	1a9b      	subgt	r3, r3, r2
 8008a62:	18ed      	addgt	r5, r5, r3
 8008a64:	341a      	adds	r4, #26
 8008a66:	454d      	cmp	r5, r9
 8008a68:	d11a      	bne.n	8008aa0 <_printf_common+0xd8>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	e008      	b.n	8008a80 <_printf_common+0xb8>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4652      	mov	r2, sl
 8008a72:	4639      	mov	r1, r7
 8008a74:	4630      	mov	r0, r6
 8008a76:	47c0      	blx	r8
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d103      	bne.n	8008a84 <_printf_common+0xbc>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a84:	3501      	adds	r5, #1
 8008a86:	e7c2      	b.n	8008a0e <_printf_common+0x46>
 8008a88:	2030      	movs	r0, #48	; 0x30
 8008a8a:	18e1      	adds	r1, r4, r3
 8008a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a96:	4422      	add	r2, r4
 8008a98:	3302      	adds	r3, #2
 8008a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a9e:	e7c4      	b.n	8008a2a <_printf_common+0x62>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	47c0      	blx	r8
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d0e6      	beq.n	8008a7c <_printf_common+0xb4>
 8008aae:	f109 0901 	add.w	r9, r9, #1
 8008ab2:	e7d8      	b.n	8008a66 <_printf_common+0x9e>

08008ab4 <_printf_i>:
 8008ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008abc:	460c      	mov	r4, r1
 8008abe:	7e09      	ldrb	r1, [r1, #24]
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	296e      	cmp	r1, #110	; 0x6e
 8008ac4:	4617      	mov	r7, r2
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	4698      	mov	r8, r3
 8008aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008acc:	f000 80b3 	beq.w	8008c36 <_printf_i+0x182>
 8008ad0:	d822      	bhi.n	8008b18 <_printf_i+0x64>
 8008ad2:	2963      	cmp	r1, #99	; 0x63
 8008ad4:	d036      	beq.n	8008b44 <_printf_i+0x90>
 8008ad6:	d80a      	bhi.n	8008aee <_printf_i+0x3a>
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	f000 80b9 	beq.w	8008c50 <_printf_i+0x19c>
 8008ade:	2958      	cmp	r1, #88	; 0x58
 8008ae0:	f000 8083 	beq.w	8008bea <_printf_i+0x136>
 8008ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008aec:	e032      	b.n	8008b54 <_printf_i+0xa0>
 8008aee:	2964      	cmp	r1, #100	; 0x64
 8008af0:	d001      	beq.n	8008af6 <_printf_i+0x42>
 8008af2:	2969      	cmp	r1, #105	; 0x69
 8008af4:	d1f6      	bne.n	8008ae4 <_printf_i+0x30>
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	6813      	ldr	r3, [r2, #0]
 8008afa:	0605      	lsls	r5, r0, #24
 8008afc:	f103 0104 	add.w	r1, r3, #4
 8008b00:	d52a      	bpl.n	8008b58 <_printf_i+0xa4>
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6011      	str	r1, [r2, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da03      	bge.n	8008b12 <_printf_i+0x5e>
 8008b0a:	222d      	movs	r2, #45	; 0x2d
 8008b0c:	425b      	negs	r3, r3
 8008b0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b12:	486f      	ldr	r0, [pc, #444]	; (8008cd0 <_printf_i+0x21c>)
 8008b14:	220a      	movs	r2, #10
 8008b16:	e039      	b.n	8008b8c <_printf_i+0xd8>
 8008b18:	2973      	cmp	r1, #115	; 0x73
 8008b1a:	f000 809d 	beq.w	8008c58 <_printf_i+0x1a4>
 8008b1e:	d808      	bhi.n	8008b32 <_printf_i+0x7e>
 8008b20:	296f      	cmp	r1, #111	; 0x6f
 8008b22:	d020      	beq.n	8008b66 <_printf_i+0xb2>
 8008b24:	2970      	cmp	r1, #112	; 0x70
 8008b26:	d1dd      	bne.n	8008ae4 <_printf_i+0x30>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	f043 0320 	orr.w	r3, r3, #32
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	e003      	b.n	8008b3a <_printf_i+0x86>
 8008b32:	2975      	cmp	r1, #117	; 0x75
 8008b34:	d017      	beq.n	8008b66 <_printf_i+0xb2>
 8008b36:	2978      	cmp	r1, #120	; 0x78
 8008b38:	d1d4      	bne.n	8008ae4 <_printf_i+0x30>
 8008b3a:	2378      	movs	r3, #120	; 0x78
 8008b3c:	4865      	ldr	r0, [pc, #404]	; (8008cd4 <_printf_i+0x220>)
 8008b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b42:	e055      	b.n	8008bf0 <_printf_i+0x13c>
 8008b44:	6813      	ldr	r3, [r2, #0]
 8008b46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4a:	1d19      	adds	r1, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6011      	str	r1, [r2, #0]
 8008b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b54:	2301      	movs	r3, #1
 8008b56:	e08c      	b.n	8008c72 <_printf_i+0x1be>
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b5e:	6011      	str	r1, [r2, #0]
 8008b60:	bf18      	it	ne
 8008b62:	b21b      	sxthne	r3, r3
 8008b64:	e7cf      	b.n	8008b06 <_printf_i+0x52>
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1d18      	adds	r0, r3, #4
 8008b6c:	6010      	str	r0, [r2, #0]
 8008b6e:	0628      	lsls	r0, r5, #24
 8008b70:	d501      	bpl.n	8008b76 <_printf_i+0xc2>
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	e002      	b.n	8008b7c <_printf_i+0xc8>
 8008b76:	0668      	lsls	r0, r5, #25
 8008b78:	d5fb      	bpl.n	8008b72 <_printf_i+0xbe>
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	296f      	cmp	r1, #111	; 0x6f
 8008b7e:	bf14      	ite	ne
 8008b80:	220a      	movne	r2, #10
 8008b82:	2208      	moveq	r2, #8
 8008b84:	4852      	ldr	r0, [pc, #328]	; (8008cd0 <_printf_i+0x21c>)
 8008b86:	2100      	movs	r1, #0
 8008b88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b8c:	6865      	ldr	r5, [r4, #4]
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	60a5      	str	r5, [r4, #8]
 8008b92:	f2c0 8095 	blt.w	8008cc0 <_printf_i+0x20c>
 8008b96:	6821      	ldr	r1, [r4, #0]
 8008b98:	f021 0104 	bic.w	r1, r1, #4
 8008b9c:	6021      	str	r1, [r4, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d13d      	bne.n	8008c1e <_printf_i+0x16a>
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	f040 808e 	bne.w	8008cc4 <_printf_i+0x210>
 8008ba8:	4665      	mov	r5, ip
 8008baa:	2a08      	cmp	r2, #8
 8008bac:	d10b      	bne.n	8008bc6 <_printf_i+0x112>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	07db      	lsls	r3, r3, #31
 8008bb2:	d508      	bpl.n	8008bc6 <_printf_i+0x112>
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bfde      	ittt	le
 8008bbc:	2330      	movle	r3, #48	; 0x30
 8008bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bc6:	ebac 0305 	sub.w	r3, ip, r5
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	f8cd 8000 	str.w	r8, [sp]
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	aa03      	add	r2, sp, #12
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7ff fef6 	bl	80089c8 <_printf_common>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d14d      	bne.n	8008c7c <_printf_i+0x1c8>
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be4:	b005      	add	sp, #20
 8008be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bea:	4839      	ldr	r0, [pc, #228]	; (8008cd0 <_printf_i+0x21c>)
 8008bec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008bf0:	6813      	ldr	r3, [r2, #0]
 8008bf2:	6821      	ldr	r1, [r4, #0]
 8008bf4:	1d1d      	adds	r5, r3, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6015      	str	r5, [r2, #0]
 8008bfa:	060a      	lsls	r2, r1, #24
 8008bfc:	d50b      	bpl.n	8008c16 <_printf_i+0x162>
 8008bfe:	07ca      	lsls	r2, r1, #31
 8008c00:	bf44      	itt	mi
 8008c02:	f041 0120 	orrmi.w	r1, r1, #32
 8008c06:	6021      	strmi	r1, [r4, #0]
 8008c08:	b91b      	cbnz	r3, 8008c12 <_printf_i+0x15e>
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	f022 0220 	bic.w	r2, r2, #32
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	2210      	movs	r2, #16
 8008c14:	e7b7      	b.n	8008b86 <_printf_i+0xd2>
 8008c16:	064d      	lsls	r5, r1, #25
 8008c18:	bf48      	it	mi
 8008c1a:	b29b      	uxthmi	r3, r3
 8008c1c:	e7ef      	b.n	8008bfe <_printf_i+0x14a>
 8008c1e:	4665      	mov	r5, ip
 8008c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c24:	fb02 3311 	mls	r3, r2, r1, r3
 8008c28:	5cc3      	ldrb	r3, [r0, r3]
 8008c2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c2e:	460b      	mov	r3, r1
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d1f5      	bne.n	8008c20 <_printf_i+0x16c>
 8008c34:	e7b9      	b.n	8008baa <_printf_i+0xf6>
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1d18      	adds	r0, r3, #4
 8008c3c:	6961      	ldr	r1, [r4, #20]
 8008c3e:	6010      	str	r0, [r2, #0]
 8008c40:	0628      	lsls	r0, r5, #24
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	d501      	bpl.n	8008c4a <_printf_i+0x196>
 8008c46:	6019      	str	r1, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <_printf_i+0x19c>
 8008c4a:	066a      	lsls	r2, r5, #25
 8008c4c:	d5fb      	bpl.n	8008c46 <_printf_i+0x192>
 8008c4e:	8019      	strh	r1, [r3, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	4665      	mov	r5, ip
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	e7b9      	b.n	8008bcc <_printf_i+0x118>
 8008c58:	6813      	ldr	r3, [r2, #0]
 8008c5a:	1d19      	adds	r1, r3, #4
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	681d      	ldr	r5, [r3, #0]
 8008c60:	6862      	ldr	r2, [r4, #4]
 8008c62:	2100      	movs	r1, #0
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 feb1 	bl	80099cc <memchr>
 8008c6a:	b108      	cbz	r0, 8008c70 <_printf_i+0x1bc>
 8008c6c:	1b40      	subs	r0, r0, r5
 8008c6e:	6060      	str	r0, [r4, #4]
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2300      	movs	r3, #0
 8008c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c7a:	e7a7      	b.n	8008bcc <_printf_i+0x118>
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4639      	mov	r1, r7
 8008c82:	4630      	mov	r0, r6
 8008c84:	47c0      	blx	r8
 8008c86:	3001      	adds	r0, #1
 8008c88:	d0aa      	beq.n	8008be0 <_printf_i+0x12c>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	079b      	lsls	r3, r3, #30
 8008c8e:	d413      	bmi.n	8008cb8 <_printf_i+0x204>
 8008c90:	68e0      	ldr	r0, [r4, #12]
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	4298      	cmp	r0, r3
 8008c96:	bfb8      	it	lt
 8008c98:	4618      	movlt	r0, r3
 8008c9a:	e7a3      	b.n	8008be4 <_printf_i+0x130>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	464a      	mov	r2, r9
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	47c0      	blx	r8
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d09a      	beq.n	8008be0 <_printf_i+0x12c>
 8008caa:	3501      	adds	r5, #1
 8008cac:	68e3      	ldr	r3, [r4, #12]
 8008cae:	9a03      	ldr	r2, [sp, #12]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	dcf2      	bgt.n	8008c9c <_printf_i+0x1e8>
 8008cb6:	e7eb      	b.n	8008c90 <_printf_i+0x1dc>
 8008cb8:	2500      	movs	r5, #0
 8008cba:	f104 0919 	add.w	r9, r4, #25
 8008cbe:	e7f5      	b.n	8008cac <_printf_i+0x1f8>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1ac      	bne.n	8008c1e <_printf_i+0x16a>
 8008cc4:	7803      	ldrb	r3, [r0, #0]
 8008cc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cce:	e76c      	b.n	8008baa <_printf_i+0xf6>
 8008cd0:	0800bdb2 	.word	0x0800bdb2
 8008cd4:	0800bdc3 	.word	0x0800bdc3

08008cd8 <siprintf>:
 8008cd8:	b40e      	push	{r1, r2, r3}
 8008cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cde:	b500      	push	{lr}
 8008ce0:	b09c      	sub	sp, #112	; 0x70
 8008ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ce4:	9002      	str	r0, [sp, #8]
 8008ce6:	9006      	str	r0, [sp, #24]
 8008ce8:	9107      	str	r1, [sp, #28]
 8008cea:	9104      	str	r1, [sp, #16]
 8008cec:	4808      	ldr	r0, [pc, #32]	; (8008d10 <siprintf+0x38>)
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <siprintf+0x3c>)
 8008cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf4:	9105      	str	r1, [sp, #20]
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	a902      	add	r1, sp, #8
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f001 fa6a 	bl	800a1d4 <_svfiprintf_r>
 8008d00:	2200      	movs	r2, #0
 8008d02:	9b02      	ldr	r3, [sp, #8]
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	b01c      	add	sp, #112	; 0x70
 8008d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d0c:	b003      	add	sp, #12
 8008d0e:	4770      	bx	lr
 8008d10:	20000010 	.word	0x20000010
 8008d14:	ffff0208 	.word	0xffff0208

08008d18 <quorem>:
 8008d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	6903      	ldr	r3, [r0, #16]
 8008d1e:	690c      	ldr	r4, [r1, #16]
 8008d20:	4680      	mov	r8, r0
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	f2c0 8084 	blt.w	8008e30 <quorem+0x118>
 8008d28:	3c01      	subs	r4, #1
 8008d2a:	f101 0714 	add.w	r7, r1, #20
 8008d2e:	f100 0614 	add.w	r6, r0, #20
 8008d32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008d3a:	3501      	adds	r5, #1
 8008d3c:	fbb0 f5f5 	udiv	r5, r0, r5
 8008d40:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008d44:	eb06 030c 	add.w	r3, r6, ip
 8008d48:	eb07 090c 	add.w	r9, r7, ip
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	b39d      	cbz	r5, 8008db8 <quorem+0xa0>
 8008d50:	f04f 0a00 	mov.w	sl, #0
 8008d54:	4638      	mov	r0, r7
 8008d56:	46b6      	mov	lr, r6
 8008d58:	46d3      	mov	fp, sl
 8008d5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d5e:	b293      	uxth	r3, r2
 8008d60:	fb05 a303 	mla	r3, r5, r3, sl
 8008d64:	0c12      	lsrs	r2, r2, #16
 8008d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d6a:	fb05 a202 	mla	r2, r5, r2, sl
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	ebab 0303 	sub.w	r3, fp, r3
 8008d74:	f8de b000 	ldr.w	fp, [lr]
 8008d78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008d7c:	fa1f fb8b 	uxth.w	fp, fp
 8008d80:	445b      	add	r3, fp
 8008d82:	fa1f fb82 	uxth.w	fp, r2
 8008d86:	f8de 2000 	ldr.w	r2, [lr]
 8008d8a:	4581      	cmp	r9, r0
 8008d8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d9a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008d9e:	f84e 3b04 	str.w	r3, [lr], #4
 8008da2:	d2da      	bcs.n	8008d5a <quorem+0x42>
 8008da4:	f856 300c 	ldr.w	r3, [r6, ip]
 8008da8:	b933      	cbnz	r3, 8008db8 <quorem+0xa0>
 8008daa:	9b01      	ldr	r3, [sp, #4]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	429e      	cmp	r6, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	d331      	bcc.n	8008e18 <quorem+0x100>
 8008db4:	f8c8 4010 	str.w	r4, [r8, #16]
 8008db8:	4640      	mov	r0, r8
 8008dba:	f001 f835 	bl	8009e28 <__mcmp>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	db26      	blt.n	8008e10 <quorem+0xf8>
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f04f 0c00 	mov.w	ip, #0
 8008dc8:	3501      	adds	r5, #1
 8008dca:	f857 1b04 	ldr.w	r1, [r7], #4
 8008dce:	f8d0 e000 	ldr.w	lr, [r0]
 8008dd2:	b28b      	uxth	r3, r1
 8008dd4:	ebac 0303 	sub.w	r3, ip, r3
 8008dd8:	fa1f f28e 	uxth.w	r2, lr
 8008ddc:	4413      	add	r3, r2
 8008dde:	0c0a      	lsrs	r2, r1, #16
 8008de0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dee:	45b9      	cmp	r9, r7
 8008df0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008df4:	f840 3b04 	str.w	r3, [r0], #4
 8008df8:	d2e7      	bcs.n	8008dca <quorem+0xb2>
 8008dfa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008dfe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008e02:	b92a      	cbnz	r2, 8008e10 <quorem+0xf8>
 8008e04:	3b04      	subs	r3, #4
 8008e06:	429e      	cmp	r6, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	d30b      	bcc.n	8008e24 <quorem+0x10c>
 8008e0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e10:	4628      	mov	r0, r5
 8008e12:	b003      	add	sp, #12
 8008e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	3b04      	subs	r3, #4
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	d1c9      	bne.n	8008db4 <quorem+0x9c>
 8008e20:	3c01      	subs	r4, #1
 8008e22:	e7c4      	b.n	8008dae <quorem+0x96>
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	3b04      	subs	r3, #4
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	d1ef      	bne.n	8008e0c <quorem+0xf4>
 8008e2c:	3c01      	subs	r4, #1
 8008e2e:	e7ea      	b.n	8008e06 <quorem+0xee>
 8008e30:	2000      	movs	r0, #0
 8008e32:	e7ee      	b.n	8008e12 <quorem+0xfa>
 8008e34:	0000      	movs	r0, r0
	...

08008e38 <_dtoa_r>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	461f      	mov	r7, r3
 8008e40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e42:	b095      	sub	sp, #84	; 0x54
 8008e44:	4604      	mov	r4, r0
 8008e46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008e4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008e4e:	b93d      	cbnz	r5, 8008e60 <_dtoa_r+0x28>
 8008e50:	2010      	movs	r0, #16
 8008e52:	f000 fdb3 	bl	80099bc <malloc>
 8008e56:	6260      	str	r0, [r4, #36]	; 0x24
 8008e58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e5c:	6005      	str	r5, [r0, #0]
 8008e5e:	60c5      	str	r5, [r0, #12]
 8008e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	b151      	cbz	r1, 8008e7c <_dtoa_r+0x44>
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4093      	lsls	r3, r2
 8008e6c:	604a      	str	r2, [r1, #4]
 8008e6e:	608b      	str	r3, [r1, #8]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fdf8 	bl	8009a66 <_Bfree>
 8008e76:	2200      	movs	r2, #0
 8008e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	1e3b      	subs	r3, r7, #0
 8008e7e:	bfaf      	iteee	ge
 8008e80:	2300      	movge	r3, #0
 8008e82:	2201      	movlt	r2, #1
 8008e84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e88:	9303      	strlt	r3, [sp, #12]
 8008e8a:	bfac      	ite	ge
 8008e8c:	f8c8 3000 	strge.w	r3, [r8]
 8008e90:	f8c8 2000 	strlt.w	r2, [r8]
 8008e94:	4bae      	ldr	r3, [pc, #696]	; (8009150 <_dtoa_r+0x318>)
 8008e96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e9a:	ea33 0308 	bics.w	r3, r3, r8
 8008e9e:	d11b      	bne.n	8008ed8 <_dtoa_r+0xa0>
 8008ea0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	9b02      	ldr	r3, [sp, #8]
 8008eaa:	b923      	cbnz	r3, 8008eb6 <_dtoa_r+0x7e>
 8008eac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f000 8545 	beq.w	8009940 <_dtoa_r+0xb08>
 8008eb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eb8:	b953      	cbnz	r3, 8008ed0 <_dtoa_r+0x98>
 8008eba:	4ba6      	ldr	r3, [pc, #664]	; (8009154 <_dtoa_r+0x31c>)
 8008ebc:	e021      	b.n	8008f02 <_dtoa_r+0xca>
 8008ebe:	4ba6      	ldr	r3, [pc, #664]	; (8009158 <_dtoa_r+0x320>)
 8008ec0:	9306      	str	r3, [sp, #24]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	9806      	ldr	r0, [sp, #24]
 8008eca:	b015      	add	sp, #84	; 0x54
 8008ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	4ba0      	ldr	r3, [pc, #640]	; (8009154 <_dtoa_r+0x31c>)
 8008ed2:	9306      	str	r3, [sp, #24]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	e7f5      	b.n	8008ec4 <_dtoa_r+0x8c>
 8008ed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008edc:	2200      	movs	r2, #0
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8008ee8:	4682      	mov	sl, r0
 8008eea:	b160      	cbz	r0, 8008f06 <_dtoa_r+0xce>
 8008eec:	2301      	movs	r3, #1
 8008eee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8520 	beq.w	800993a <_dtoa_r+0xb02>
 8008efa:	4b98      	ldr	r3, [pc, #608]	; (800915c <_dtoa_r+0x324>)
 8008efc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	9306      	str	r3, [sp, #24]
 8008f04:	e7e0      	b.n	8008ec8 <_dtoa_r+0x90>
 8008f06:	ab12      	add	r3, sp, #72	; 0x48
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	ab13      	add	r3, sp, #76	; 0x4c
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	4632      	mov	r2, r6
 8008f10:	463b      	mov	r3, r7
 8008f12:	4620      	mov	r0, r4
 8008f14:	f001 f800 	bl	8009f18 <__d2b>
 8008f18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f1c:	4683      	mov	fp, r0
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	d07d      	beq.n	800901e <_dtoa_r+0x1e6>
 8008f22:	46b0      	mov	r8, r6
 8008f24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f28:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008f2c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008f30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f34:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4b89      	ldr	r3, [pc, #548]	; (8009160 <_dtoa_r+0x328>)
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	f7f7 f912 	bl	8000168 <__aeabi_dsub>
 8008f44:	a37c      	add	r3, pc, #496	; (adr r3, 8009138 <_dtoa_r+0x300>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 fac5 	bl	80004d8 <__aeabi_dmul>
 8008f4e:	a37c      	add	r3, pc, #496	; (adr r3, 8009140 <_dtoa_r+0x308>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 f90a 	bl	800016c <__adddf3>
 8008f58:	4606      	mov	r6, r0
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	f7f7 fa51 	bl	8000404 <__aeabi_i2d>
 8008f62:	a379      	add	r3, pc, #484	; (adr r3, 8009148 <_dtoa_r+0x310>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 fab6 	bl	80004d8 <__aeabi_dmul>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4630      	mov	r0, r6
 8008f72:	4639      	mov	r1, r7
 8008f74:	f7f7 f8fa 	bl	800016c <__adddf3>
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	f7f7 fd5c 	bl	8000a38 <__aeabi_d2iz>
 8008f80:	2200      	movs	r2, #0
 8008f82:	4682      	mov	sl, r0
 8008f84:	2300      	movs	r3, #0
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 fd17 	bl	80009bc <__aeabi_dcmplt>
 8008f8e:	b148      	cbz	r0, 8008fa4 <_dtoa_r+0x16c>
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7f7 fa37 	bl	8000404 <__aeabi_i2d>
 8008f96:	4632      	mov	r2, r6
 8008f98:	463b      	mov	r3, r7
 8008f9a:	f7f7 fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8008f9e:	b908      	cbnz	r0, 8008fa4 <_dtoa_r+0x16c>
 8008fa0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fa4:	f1ba 0f16 	cmp.w	sl, #22
 8008fa8:	d85a      	bhi.n	8009060 <_dtoa_r+0x228>
 8008faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fae:	496d      	ldr	r1, [pc, #436]	; (8009164 <_dtoa_r+0x32c>)
 8008fb0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb8:	f7f7 fd1e 	bl	80009f8 <__aeabi_dcmpgt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d051      	beq.n	8009064 <_dtoa_r+0x22c>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8008fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fca:	1b5d      	subs	r5, r3, r5
 8008fcc:	1e6b      	subs	r3, r5, #1
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	bf43      	ittte	mi
 8008fd2:	2300      	movmi	r3, #0
 8008fd4:	f1c5 0901 	rsbmi	r9, r5, #1
 8008fd8:	9307      	strmi	r3, [sp, #28]
 8008fda:	f04f 0900 	movpl.w	r9, #0
 8008fde:	f1ba 0f00 	cmp.w	sl, #0
 8008fe2:	db41      	blt.n	8009068 <_dtoa_r+0x230>
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008fea:	4453      	add	r3, sl
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9308      	str	r3, [sp, #32]
 8008ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	f200 808f 	bhi.w	8009118 <_dtoa_r+0x2e0>
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	bfc4      	itt	gt
 8008ffe:	3b04      	subgt	r3, #4
 8009000:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009004:	bfc8      	it	gt
 8009006:	2500      	movgt	r5, #0
 8009008:	f1a3 0302 	sub.w	r3, r3, #2
 800900c:	bfd8      	it	le
 800900e:	2501      	movle	r5, #1
 8009010:	2b03      	cmp	r3, #3
 8009012:	f200 808d 	bhi.w	8009130 <_dtoa_r+0x2f8>
 8009016:	e8df f003 	tbb	[pc, r3]
 800901a:	7d7b      	.short	0x7d7b
 800901c:	6f2f      	.short	0x6f2f
 800901e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009022:	441d      	add	r5, r3
 8009024:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009028:	2820      	cmp	r0, #32
 800902a:	dd13      	ble.n	8009054 <_dtoa_r+0x21c>
 800902c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	fa08 f800 	lsl.w	r8, r8, r0
 8009036:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800903a:	fa23 f000 	lsr.w	r0, r3, r0
 800903e:	ea48 0000 	orr.w	r0, r8, r0
 8009042:	f7f7 f9cf 	bl	80003e4 <__aeabi_ui2d>
 8009046:	2301      	movs	r3, #1
 8009048:	4680      	mov	r8, r0
 800904a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800904e:	3d01      	subs	r5, #1
 8009050:	9310      	str	r3, [sp, #64]	; 0x40
 8009052:	e771      	b.n	8008f38 <_dtoa_r+0x100>
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	f1c0 0020 	rsb	r0, r0, #32
 800905a:	fa03 f000 	lsl.w	r0, r3, r0
 800905e:	e7f0      	b.n	8009042 <_dtoa_r+0x20a>
 8009060:	2301      	movs	r3, #1
 8009062:	e7b0      	b.n	8008fc6 <_dtoa_r+0x18e>
 8009064:	900d      	str	r0, [sp, #52]	; 0x34
 8009066:	e7af      	b.n	8008fc8 <_dtoa_r+0x190>
 8009068:	f1ca 0300 	rsb	r3, sl, #0
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	2300      	movs	r3, #0
 8009070:	eba9 090a 	sub.w	r9, r9, sl
 8009074:	930c      	str	r3, [sp, #48]	; 0x30
 8009076:	e7bc      	b.n	8008ff2 <_dtoa_r+0x1ba>
 8009078:	2301      	movs	r3, #1
 800907a:	9309      	str	r3, [sp, #36]	; 0x24
 800907c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd74      	ble.n	800916c <_dtoa_r+0x334>
 8009082:	4698      	mov	r8, r3
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	2200      	movs	r2, #0
 8009088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800908a:	6072      	str	r2, [r6, #4]
 800908c:	2204      	movs	r2, #4
 800908e:	f102 0014 	add.w	r0, r2, #20
 8009092:	4298      	cmp	r0, r3
 8009094:	6871      	ldr	r1, [r6, #4]
 8009096:	d96e      	bls.n	8009176 <_dtoa_r+0x33e>
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fcb0 	bl	80099fe <_Balloc>
 800909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a0:	6030      	str	r0, [r6, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f1b8 0f0e 	cmp.w	r8, #14
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	f200 80ed 	bhi.w	8009288 <_dtoa_r+0x450>
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	f000 80ea 	beq.w	8009288 <_dtoa_r+0x450>
 80090b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80090c0:	dd77      	ble.n	80091b2 <_dtoa_r+0x37a>
 80090c2:	4a28      	ldr	r2, [pc, #160]	; (8009164 <_dtoa_r+0x32c>)
 80090c4:	f00a 030f 	and.w	r3, sl, #15
 80090c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80090cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090d0:	06f0      	lsls	r0, r6, #27
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090da:	d568      	bpl.n	80091ae <_dtoa_r+0x376>
 80090dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090e0:	4b21      	ldr	r3, [pc, #132]	; (8009168 <_dtoa_r+0x330>)
 80090e2:	2503      	movs	r5, #3
 80090e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090e8:	f7f7 fb20 	bl	800072c <__aeabi_ddiv>
 80090ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f0:	f006 060f 	and.w	r6, r6, #15
 80090f4:	4f1c      	ldr	r7, [pc, #112]	; (8009168 <_dtoa_r+0x330>)
 80090f6:	e04f      	b.n	8009198 <_dtoa_r+0x360>
 80090f8:	2301      	movs	r3, #1
 80090fa:	9309      	str	r3, [sp, #36]	; 0x24
 80090fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090fe:	4453      	add	r3, sl
 8009100:	f103 0801 	add.w	r8, r3, #1
 8009104:	9304      	str	r3, [sp, #16]
 8009106:	4643      	mov	r3, r8
 8009108:	2b01      	cmp	r3, #1
 800910a:	bfb8      	it	lt
 800910c:	2301      	movlt	r3, #1
 800910e:	e7ba      	b.n	8009086 <_dtoa_r+0x24e>
 8009110:	2300      	movs	r3, #0
 8009112:	e7b2      	b.n	800907a <_dtoa_r+0x242>
 8009114:	2300      	movs	r3, #0
 8009116:	e7f0      	b.n	80090fa <_dtoa_r+0x2c2>
 8009118:	2501      	movs	r5, #1
 800911a:	2300      	movs	r3, #0
 800911c:	9509      	str	r5, [sp, #36]	; 0x24
 800911e:	931e      	str	r3, [sp, #120]	; 0x78
 8009120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009124:	2200      	movs	r2, #0
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	4698      	mov	r8, r3
 800912a:	2312      	movs	r3, #18
 800912c:	921f      	str	r2, [sp, #124]	; 0x7c
 800912e:	e7aa      	b.n	8009086 <_dtoa_r+0x24e>
 8009130:	2301      	movs	r3, #1
 8009132:	9309      	str	r3, [sp, #36]	; 0x24
 8009134:	e7f4      	b.n	8009120 <_dtoa_r+0x2e8>
 8009136:	bf00      	nop
 8009138:	636f4361 	.word	0x636f4361
 800913c:	3fd287a7 	.word	0x3fd287a7
 8009140:	8b60c8b3 	.word	0x8b60c8b3
 8009144:	3fc68a28 	.word	0x3fc68a28
 8009148:	509f79fb 	.word	0x509f79fb
 800914c:	3fd34413 	.word	0x3fd34413
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	0800bddd 	.word	0x0800bddd
 8009158:	0800bdd4 	.word	0x0800bdd4
 800915c:	0800bdb1 	.word	0x0800bdb1
 8009160:	3ff80000 	.word	0x3ff80000
 8009164:	0800be10 	.word	0x0800be10
 8009168:	0800bde8 	.word	0x0800bde8
 800916c:	2301      	movs	r3, #1
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	4698      	mov	r8, r3
 8009172:	461a      	mov	r2, r3
 8009174:	e7da      	b.n	800912c <_dtoa_r+0x2f4>
 8009176:	3101      	adds	r1, #1
 8009178:	6071      	str	r1, [r6, #4]
 800917a:	0052      	lsls	r2, r2, #1
 800917c:	e787      	b.n	800908e <_dtoa_r+0x256>
 800917e:	07f1      	lsls	r1, r6, #31
 8009180:	d508      	bpl.n	8009194 <_dtoa_r+0x35c>
 8009182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918a:	f7f7 f9a5 	bl	80004d8 <__aeabi_dmul>
 800918e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009192:	3501      	adds	r5, #1
 8009194:	1076      	asrs	r6, r6, #1
 8009196:	3708      	adds	r7, #8
 8009198:	2e00      	cmp	r6, #0
 800919a:	d1f0      	bne.n	800917e <_dtoa_r+0x346>
 800919c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a4:	f7f7 fac2 	bl	800072c <__aeabi_ddiv>
 80091a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ac:	e01b      	b.n	80091e6 <_dtoa_r+0x3ae>
 80091ae:	2502      	movs	r5, #2
 80091b0:	e7a0      	b.n	80090f4 <_dtoa_r+0x2bc>
 80091b2:	f000 80a4 	beq.w	80092fe <_dtoa_r+0x4c6>
 80091b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80091ba:	f1ca 0600 	rsb	r6, sl, #0
 80091be:	4ba0      	ldr	r3, [pc, #640]	; (8009440 <_dtoa_r+0x608>)
 80091c0:	f006 020f 	and.w	r2, r6, #15
 80091c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 f984 	bl	80004d8 <__aeabi_dmul>
 80091d0:	2502      	movs	r5, #2
 80091d2:	2300      	movs	r3, #0
 80091d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d8:	4f9a      	ldr	r7, [pc, #616]	; (8009444 <_dtoa_r+0x60c>)
 80091da:	1136      	asrs	r6, r6, #4
 80091dc:	2e00      	cmp	r6, #0
 80091de:	f040 8083 	bne.w	80092e8 <_dtoa_r+0x4b0>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e0      	bne.n	80091a8 <_dtoa_r+0x370>
 80091e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 808a 	beq.w	8009302 <_dtoa_r+0x4ca>
 80091ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80091f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091fa:	2200      	movs	r2, #0
 80091fc:	4b92      	ldr	r3, [pc, #584]	; (8009448 <_dtoa_r+0x610>)
 80091fe:	f7f7 fbdd 	bl	80009bc <__aeabi_dcmplt>
 8009202:	2800      	cmp	r0, #0
 8009204:	d07d      	beq.n	8009302 <_dtoa_r+0x4ca>
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	d07a      	beq.n	8009302 <_dtoa_r+0x4ca>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd36      	ble.n	8009280 <_dtoa_r+0x448>
 8009212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009216:	2200      	movs	r2, #0
 8009218:	4b8c      	ldr	r3, [pc, #560]	; (800944c <_dtoa_r+0x614>)
 800921a:	f7f7 f95d 	bl	80004d8 <__aeabi_dmul>
 800921e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009222:	9e04      	ldr	r6, [sp, #16]
 8009224:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8009228:	3501      	adds	r5, #1
 800922a:	4628      	mov	r0, r5
 800922c:	f7f7 f8ea 	bl	8000404 <__aeabi_i2d>
 8009230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009234:	f7f7 f950 	bl	80004d8 <__aeabi_dmul>
 8009238:	2200      	movs	r2, #0
 800923a:	4b85      	ldr	r3, [pc, #532]	; (8009450 <_dtoa_r+0x618>)
 800923c:	f7f6 ff96 	bl	800016c <__adddf3>
 8009240:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009244:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009248:	950b      	str	r5, [sp, #44]	; 0x2c
 800924a:	2e00      	cmp	r6, #0
 800924c:	d15c      	bne.n	8009308 <_dtoa_r+0x4d0>
 800924e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009252:	2200      	movs	r2, #0
 8009254:	4b7f      	ldr	r3, [pc, #508]	; (8009454 <_dtoa_r+0x61c>)
 8009256:	f7f6 ff87 	bl	8000168 <__aeabi_dsub>
 800925a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800925c:	462b      	mov	r3, r5
 800925e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009262:	f7f7 fbc9 	bl	80009f8 <__aeabi_dcmpgt>
 8009266:	2800      	cmp	r0, #0
 8009268:	f040 8281 	bne.w	800976e <_dtoa_r+0x936>
 800926c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009272:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009276:	f7f7 fba1 	bl	80009bc <__aeabi_dcmplt>
 800927a:	2800      	cmp	r0, #0
 800927c:	f040 8275 	bne.w	800976a <_dtoa_r+0x932>
 8009280:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800928a:	2b00      	cmp	r3, #0
 800928c:	f2c0 814b 	blt.w	8009526 <_dtoa_r+0x6ee>
 8009290:	f1ba 0f0e 	cmp.w	sl, #14
 8009294:	f300 8147 	bgt.w	8009526 <_dtoa_r+0x6ee>
 8009298:	4b69      	ldr	r3, [pc, #420]	; (8009440 <_dtoa_r+0x608>)
 800929a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f280 80d7 	bge.w	800945c <_dtoa_r+0x624>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	f300 80d3 	bgt.w	800945c <_dtoa_r+0x624>
 80092b6:	f040 8257 	bne.w	8009768 <_dtoa_r+0x930>
 80092ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092be:	2200      	movs	r2, #0
 80092c0:	4b64      	ldr	r3, [pc, #400]	; (8009454 <_dtoa_r+0x61c>)
 80092c2:	f7f7 f909 	bl	80004d8 <__aeabi_dmul>
 80092c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092ca:	f7f7 fb8b 	bl	80009e4 <__aeabi_dcmpge>
 80092ce:	4646      	mov	r6, r8
 80092d0:	4647      	mov	r7, r8
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f040 822d 	bne.w	8009732 <_dtoa_r+0x8fa>
 80092d8:	9b06      	ldr	r3, [sp, #24]
 80092da:	9a06      	ldr	r2, [sp, #24]
 80092dc:	1c5d      	adds	r5, r3, #1
 80092de:	2331      	movs	r3, #49	; 0x31
 80092e0:	f10a 0a01 	add.w	sl, sl, #1
 80092e4:	7013      	strb	r3, [r2, #0]
 80092e6:	e228      	b.n	800973a <_dtoa_r+0x902>
 80092e8:	07f2      	lsls	r2, r6, #31
 80092ea:	d505      	bpl.n	80092f8 <_dtoa_r+0x4c0>
 80092ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f0:	f7f7 f8f2 	bl	80004d8 <__aeabi_dmul>
 80092f4:	2301      	movs	r3, #1
 80092f6:	3501      	adds	r5, #1
 80092f8:	1076      	asrs	r6, r6, #1
 80092fa:	3708      	adds	r7, #8
 80092fc:	e76e      	b.n	80091dc <_dtoa_r+0x3a4>
 80092fe:	2502      	movs	r5, #2
 8009300:	e771      	b.n	80091e6 <_dtoa_r+0x3ae>
 8009302:	4657      	mov	r7, sl
 8009304:	4646      	mov	r6, r8
 8009306:	e790      	b.n	800922a <_dtoa_r+0x3f2>
 8009308:	4b4d      	ldr	r3, [pc, #308]	; (8009440 <_dtoa_r+0x608>)
 800930a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800930e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d048      	beq.n	80093aa <_dtoa_r+0x572>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	2000      	movs	r0, #0
 800931e:	494e      	ldr	r1, [pc, #312]	; (8009458 <_dtoa_r+0x620>)
 8009320:	f7f7 fa04 	bl	800072c <__aeabi_ddiv>
 8009324:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009328:	f7f6 ff1e 	bl	8000168 <__aeabi_dsub>
 800932c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009330:	9d06      	ldr	r5, [sp, #24]
 8009332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009336:	f7f7 fb7f 	bl	8000a38 <__aeabi_d2iz>
 800933a:	9011      	str	r0, [sp, #68]	; 0x44
 800933c:	f7f7 f862 	bl	8000404 <__aeabi_i2d>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009348:	f7f6 ff0e 	bl	8000168 <__aeabi_dsub>
 800934c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800934e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009352:	3330      	adds	r3, #48	; 0x30
 8009354:	f805 3b01 	strb.w	r3, [r5], #1
 8009358:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800935c:	f7f7 fb2e 	bl	80009bc <__aeabi_dcmplt>
 8009360:	2800      	cmp	r0, #0
 8009362:	d163      	bne.n	800942c <_dtoa_r+0x5f4>
 8009364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009368:	2000      	movs	r0, #0
 800936a:	4937      	ldr	r1, [pc, #220]	; (8009448 <_dtoa_r+0x610>)
 800936c:	f7f6 fefc 	bl	8000168 <__aeabi_dsub>
 8009370:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009374:	f7f7 fb22 	bl	80009bc <__aeabi_dcmplt>
 8009378:	2800      	cmp	r0, #0
 800937a:	f040 80b5 	bne.w	80094e8 <_dtoa_r+0x6b0>
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	1aeb      	subs	r3, r5, r3
 8009382:	429e      	cmp	r6, r3
 8009384:	f77f af7c 	ble.w	8009280 <_dtoa_r+0x448>
 8009388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800938c:	2200      	movs	r2, #0
 800938e:	4b2f      	ldr	r3, [pc, #188]	; (800944c <_dtoa_r+0x614>)
 8009390:	f7f7 f8a2 	bl	80004d8 <__aeabi_dmul>
 8009394:	2200      	movs	r2, #0
 8009396:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800939a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939e:	4b2b      	ldr	r3, [pc, #172]	; (800944c <_dtoa_r+0x614>)
 80093a0:	f7f7 f89a 	bl	80004d8 <__aeabi_dmul>
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	e7c3      	b.n	8009332 <_dtoa_r+0x4fa>
 80093aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093ae:	f7f7 f893 	bl	80004d8 <__aeabi_dmul>
 80093b2:	9b06      	ldr	r3, [sp, #24]
 80093b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093b8:	199d      	adds	r5, r3, r6
 80093ba:	461e      	mov	r6, r3
 80093bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c0:	f7f7 fb3a 	bl	8000a38 <__aeabi_d2iz>
 80093c4:	9011      	str	r0, [sp, #68]	; 0x44
 80093c6:	f7f7 f81d 	bl	8000404 <__aeabi_i2d>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d2:	f7f6 fec9 	bl	8000168 <__aeabi_dsub>
 80093d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093dc:	3330      	adds	r3, #48	; 0x30
 80093de:	f806 3b01 	strb.w	r3, [r6], #1
 80093e2:	42ae      	cmp	r6, r5
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	d124      	bne.n	8009434 <_dtoa_r+0x5fc>
 80093ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ee:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <_dtoa_r+0x620>)
 80093f0:	f7f6 febc 	bl	800016c <__adddf3>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fc:	f7f7 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8009400:	2800      	cmp	r0, #0
 8009402:	d171      	bne.n	80094e8 <_dtoa_r+0x6b0>
 8009404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009408:	2000      	movs	r0, #0
 800940a:	4913      	ldr	r1, [pc, #76]	; (8009458 <_dtoa_r+0x620>)
 800940c:	f7f6 feac 	bl	8000168 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009418:	f7f7 fad0 	bl	80009bc <__aeabi_dcmplt>
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f af2f 	beq.w	8009280 <_dtoa_r+0x448>
 8009422:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009426:	1e6a      	subs	r2, r5, #1
 8009428:	2b30      	cmp	r3, #48	; 0x30
 800942a:	d001      	beq.n	8009430 <_dtoa_r+0x5f8>
 800942c:	46ba      	mov	sl, r7
 800942e:	e04a      	b.n	80094c6 <_dtoa_r+0x68e>
 8009430:	4615      	mov	r5, r2
 8009432:	e7f6      	b.n	8009422 <_dtoa_r+0x5ea>
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <_dtoa_r+0x614>)
 8009436:	f7f7 f84f 	bl	80004d8 <__aeabi_dmul>
 800943a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800943e:	e7bd      	b.n	80093bc <_dtoa_r+0x584>
 8009440:	0800be10 	.word	0x0800be10
 8009444:	0800bde8 	.word	0x0800bde8
 8009448:	3ff00000 	.word	0x3ff00000
 800944c:	40240000 	.word	0x40240000
 8009450:	401c0000 	.word	0x401c0000
 8009454:	40140000 	.word	0x40140000
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	9d06      	ldr	r5, [sp, #24]
 800945e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 f95f 	bl	800072c <__aeabi_ddiv>
 800946e:	f7f7 fae3 	bl	8000a38 <__aeabi_d2iz>
 8009472:	4681      	mov	r9, r0
 8009474:	f7f6 ffc6 	bl	8000404 <__aeabi_i2d>
 8009478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800947c:	f7f7 f82c 	bl	80004d8 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f6 fe6e 	bl	8000168 <__aeabi_dsub>
 800948c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009490:	f805 6b01 	strb.w	r6, [r5], #1
 8009494:	9e06      	ldr	r6, [sp, #24]
 8009496:	4602      	mov	r2, r0
 8009498:	1bae      	subs	r6, r5, r6
 800949a:	45b0      	cmp	r8, r6
 800949c:	460b      	mov	r3, r1
 800949e:	d135      	bne.n	800950c <_dtoa_r+0x6d4>
 80094a0:	f7f6 fe64 	bl	800016c <__adddf3>
 80094a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a8:	4606      	mov	r6, r0
 80094aa:	460f      	mov	r7, r1
 80094ac:	f7f7 faa4 	bl	80009f8 <__aeabi_dcmpgt>
 80094b0:	b9c8      	cbnz	r0, 80094e6 <_dtoa_r+0x6ae>
 80094b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f7 fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80094be:	b110      	cbz	r0, 80094c6 <_dtoa_r+0x68e>
 80094c0:	f019 0f01 	tst.w	r9, #1
 80094c4:	d10f      	bne.n	80094e6 <_dtoa_r+0x6ae>
 80094c6:	4659      	mov	r1, fp
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 facc 	bl	8009a66 <_Bfree>
 80094ce:	2300      	movs	r3, #0
 80094d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094d2:	702b      	strb	r3, [r5, #0]
 80094d4:	f10a 0301 	add.w	r3, sl, #1
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f43f acf3 	beq.w	8008ec8 <_dtoa_r+0x90>
 80094e2:	601d      	str	r5, [r3, #0]
 80094e4:	e4f0      	b.n	8008ec8 <_dtoa_r+0x90>
 80094e6:	4657      	mov	r7, sl
 80094e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094ec:	1e6b      	subs	r3, r5, #1
 80094ee:	2a39      	cmp	r2, #57	; 0x39
 80094f0:	d106      	bne.n	8009500 <_dtoa_r+0x6c8>
 80094f2:	9a06      	ldr	r2, [sp, #24]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d107      	bne.n	8009508 <_dtoa_r+0x6d0>
 80094f8:	2330      	movs	r3, #48	; 0x30
 80094fa:	7013      	strb	r3, [r2, #0]
 80094fc:	4613      	mov	r3, r2
 80094fe:	3701      	adds	r7, #1
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	3201      	adds	r2, #1
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	e791      	b.n	800942c <_dtoa_r+0x5f4>
 8009508:	461d      	mov	r5, r3
 800950a:	e7ed      	b.n	80094e8 <_dtoa_r+0x6b0>
 800950c:	2200      	movs	r2, #0
 800950e:	4b99      	ldr	r3, [pc, #612]	; (8009774 <_dtoa_r+0x93c>)
 8009510:	f7f6 ffe2 	bl	80004d8 <__aeabi_dmul>
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	4606      	mov	r6, r0
 800951a:	460f      	mov	r7, r1
 800951c:	f7f7 fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8009520:	2800      	cmp	r0, #0
 8009522:	d09e      	beq.n	8009462 <_dtoa_r+0x62a>
 8009524:	e7cf      	b.n	80094c6 <_dtoa_r+0x68e>
 8009526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009528:	2a00      	cmp	r2, #0
 800952a:	f000 8088 	beq.w	800963e <_dtoa_r+0x806>
 800952e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009530:	2a01      	cmp	r2, #1
 8009532:	dc6d      	bgt.n	8009610 <_dtoa_r+0x7d8>
 8009534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009536:	2a00      	cmp	r2, #0
 8009538:	d066      	beq.n	8009608 <_dtoa_r+0x7d0>
 800953a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800953e:	464d      	mov	r5, r9
 8009540:	9e08      	ldr	r6, [sp, #32]
 8009542:	9a07      	ldr	r2, [sp, #28]
 8009544:	2101      	movs	r1, #1
 8009546:	441a      	add	r2, r3
 8009548:	4620      	mov	r0, r4
 800954a:	4499      	add	r9, r3
 800954c:	9207      	str	r2, [sp, #28]
 800954e:	f000 fb2a 	bl	8009ba6 <__i2b>
 8009552:	4607      	mov	r7, r0
 8009554:	2d00      	cmp	r5, #0
 8009556:	dd0b      	ble.n	8009570 <_dtoa_r+0x738>
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd08      	ble.n	8009570 <_dtoa_r+0x738>
 800955e:	42ab      	cmp	r3, r5
 8009560:	bfa8      	it	ge
 8009562:	462b      	movge	r3, r5
 8009564:	9a07      	ldr	r2, [sp, #28]
 8009566:	eba9 0903 	sub.w	r9, r9, r3
 800956a:	1aed      	subs	r5, r5, r3
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	9307      	str	r3, [sp, #28]
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	b1eb      	cbz	r3, 80095b0 <_dtoa_r+0x778>
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d065      	beq.n	8009646 <_dtoa_r+0x80e>
 800957a:	b18e      	cbz	r6, 80095a0 <_dtoa_r+0x768>
 800957c:	4639      	mov	r1, r7
 800957e:	4632      	mov	r2, r6
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fbaf 	bl	8009ce4 <__pow5mult>
 8009586:	465a      	mov	r2, fp
 8009588:	4601      	mov	r1, r0
 800958a:	4607      	mov	r7, r0
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fb13 	bl	8009bb8 <__multiply>
 8009592:	4659      	mov	r1, fp
 8009594:	900a      	str	r0, [sp, #40]	; 0x28
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fa65 	bl	8009a66 <_Bfree>
 800959c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959e:	469b      	mov	fp, r3
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	1b9a      	subs	r2, r3, r6
 80095a4:	d004      	beq.n	80095b0 <_dtoa_r+0x778>
 80095a6:	4659      	mov	r1, fp
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fb9b 	bl	8009ce4 <__pow5mult>
 80095ae:	4683      	mov	fp, r0
 80095b0:	2101      	movs	r1, #1
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 faf7 	bl	8009ba6 <__i2b>
 80095b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ba:	4606      	mov	r6, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 81c6 	beq.w	800994e <_dtoa_r+0xb16>
 80095c2:	461a      	mov	r2, r3
 80095c4:	4601      	mov	r1, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 fb8c 	bl	8009ce4 <__pow5mult>
 80095cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095ce:	4606      	mov	r6, r0
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	dc3e      	bgt.n	8009652 <_dtoa_r+0x81a>
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d137      	bne.n	800964a <_dtoa_r+0x812>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d134      	bne.n	800964e <_dtoa_r+0x816>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ea:	0d1b      	lsrs	r3, r3, #20
 80095ec:	051b      	lsls	r3, r3, #20
 80095ee:	b12b      	cbz	r3, 80095fc <_dtoa_r+0x7c4>
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	f109 0901 	add.w	r9, r9, #1
 80095f6:	3301      	adds	r3, #1
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	2301      	movs	r3, #1
 80095fc:	9308      	str	r3, [sp, #32]
 80095fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009600:	2b00      	cmp	r3, #0
 8009602:	d128      	bne.n	8009656 <_dtoa_r+0x81e>
 8009604:	2001      	movs	r0, #1
 8009606:	e02e      	b.n	8009666 <_dtoa_r+0x82e>
 8009608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800960a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800960e:	e796      	b.n	800953e <_dtoa_r+0x706>
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8009616:	42b3      	cmp	r3, r6
 8009618:	bfb7      	itett	lt
 800961a:	9b08      	ldrlt	r3, [sp, #32]
 800961c:	1b9e      	subge	r6, r3, r6
 800961e:	1af2      	sublt	r2, r6, r3
 8009620:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009622:	bfbf      	itttt	lt
 8009624:	9608      	strlt	r6, [sp, #32]
 8009626:	189b      	addlt	r3, r3, r2
 8009628:	930c      	strlt	r3, [sp, #48]	; 0x30
 800962a:	2600      	movlt	r6, #0
 800962c:	f1b8 0f00 	cmp.w	r8, #0
 8009630:	bfb9      	ittee	lt
 8009632:	eba9 0508 	sublt.w	r5, r9, r8
 8009636:	2300      	movlt	r3, #0
 8009638:	464d      	movge	r5, r9
 800963a:	4643      	movge	r3, r8
 800963c:	e781      	b.n	8009542 <_dtoa_r+0x70a>
 800963e:	9e08      	ldr	r6, [sp, #32]
 8009640:	464d      	mov	r5, r9
 8009642:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009644:	e786      	b.n	8009554 <_dtoa_r+0x71c>
 8009646:	9a08      	ldr	r2, [sp, #32]
 8009648:	e7ad      	b.n	80095a6 <_dtoa_r+0x76e>
 800964a:	2300      	movs	r3, #0
 800964c:	e7d6      	b.n	80095fc <_dtoa_r+0x7c4>
 800964e:	9b02      	ldr	r3, [sp, #8]
 8009650:	e7d4      	b.n	80095fc <_dtoa_r+0x7c4>
 8009652:	2300      	movs	r3, #0
 8009654:	9308      	str	r3, [sp, #32]
 8009656:	6933      	ldr	r3, [r6, #16]
 8009658:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800965c:	6918      	ldr	r0, [r3, #16]
 800965e:	f000 fa54 	bl	8009b0a <__hi0bits>
 8009662:	f1c0 0020 	rsb	r0, r0, #32
 8009666:	9b07      	ldr	r3, [sp, #28]
 8009668:	4418      	add	r0, r3
 800966a:	f010 001f 	ands.w	r0, r0, #31
 800966e:	d047      	beq.n	8009700 <_dtoa_r+0x8c8>
 8009670:	f1c0 0320 	rsb	r3, r0, #32
 8009674:	2b04      	cmp	r3, #4
 8009676:	dd3b      	ble.n	80096f0 <_dtoa_r+0x8b8>
 8009678:	9b07      	ldr	r3, [sp, #28]
 800967a:	f1c0 001c 	rsb	r0, r0, #28
 800967e:	4481      	add	r9, r0
 8009680:	4405      	add	r5, r0
 8009682:	4403      	add	r3, r0
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	f1b9 0f00 	cmp.w	r9, #0
 800968a:	dd05      	ble.n	8009698 <_dtoa_r+0x860>
 800968c:	4659      	mov	r1, fp
 800968e:	464a      	mov	r2, r9
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fb75 	bl	8009d80 <__lshift>
 8009696:	4683      	mov	fp, r0
 8009698:	9b07      	ldr	r3, [sp, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dd05      	ble.n	80096aa <_dtoa_r+0x872>
 800969e:	4631      	mov	r1, r6
 80096a0:	461a      	mov	r2, r3
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fb6c 	bl	8009d80 <__lshift>
 80096a8:	4606      	mov	r6, r0
 80096aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ac:	b353      	cbz	r3, 8009704 <_dtoa_r+0x8cc>
 80096ae:	4631      	mov	r1, r6
 80096b0:	4658      	mov	r0, fp
 80096b2:	f000 fbb9 	bl	8009e28 <__mcmp>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	da24      	bge.n	8009704 <_dtoa_r+0x8cc>
 80096ba:	2300      	movs	r3, #0
 80096bc:	4659      	mov	r1, fp
 80096be:	220a      	movs	r2, #10
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 f9e7 	bl	8009a94 <__multadd>
 80096c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096cc:	4683      	mov	fp, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 8144 	beq.w	800995c <_dtoa_r+0xb24>
 80096d4:	2300      	movs	r3, #0
 80096d6:	4639      	mov	r1, r7
 80096d8:	220a      	movs	r2, #10
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f9da 	bl	8009a94 <__multadd>
 80096e0:	9b04      	ldr	r3, [sp, #16]
 80096e2:	4607      	mov	r7, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dc4d      	bgt.n	8009784 <_dtoa_r+0x94c>
 80096e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	dd4a      	ble.n	8009784 <_dtoa_r+0x94c>
 80096ee:	e011      	b.n	8009714 <_dtoa_r+0x8dc>
 80096f0:	d0c9      	beq.n	8009686 <_dtoa_r+0x84e>
 80096f2:	9a07      	ldr	r2, [sp, #28]
 80096f4:	331c      	adds	r3, #28
 80096f6:	441a      	add	r2, r3
 80096f8:	4499      	add	r9, r3
 80096fa:	441d      	add	r5, r3
 80096fc:	4613      	mov	r3, r2
 80096fe:	e7c1      	b.n	8009684 <_dtoa_r+0x84c>
 8009700:	4603      	mov	r3, r0
 8009702:	e7f6      	b.n	80096f2 <_dtoa_r+0x8ba>
 8009704:	f1b8 0f00 	cmp.w	r8, #0
 8009708:	dc36      	bgt.n	8009778 <_dtoa_r+0x940>
 800970a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800970c:	2b02      	cmp	r3, #2
 800970e:	dd33      	ble.n	8009778 <_dtoa_r+0x940>
 8009710:	f8cd 8010 	str.w	r8, [sp, #16]
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	b963      	cbnz	r3, 8009732 <_dtoa_r+0x8fa>
 8009718:	4631      	mov	r1, r6
 800971a:	2205      	movs	r2, #5
 800971c:	4620      	mov	r0, r4
 800971e:	f000 f9b9 	bl	8009a94 <__multadd>
 8009722:	4601      	mov	r1, r0
 8009724:	4606      	mov	r6, r0
 8009726:	4658      	mov	r0, fp
 8009728:	f000 fb7e 	bl	8009e28 <__mcmp>
 800972c:	2800      	cmp	r0, #0
 800972e:	f73f add3 	bgt.w	80092d8 <_dtoa_r+0x4a0>
 8009732:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009734:	9d06      	ldr	r5, [sp, #24]
 8009736:	ea6f 0a03 	mvn.w	sl, r3
 800973a:	f04f 0900 	mov.w	r9, #0
 800973e:	4631      	mov	r1, r6
 8009740:	4620      	mov	r0, r4
 8009742:	f000 f990 	bl	8009a66 <_Bfree>
 8009746:	2f00      	cmp	r7, #0
 8009748:	f43f aebd 	beq.w	80094c6 <_dtoa_r+0x68e>
 800974c:	f1b9 0f00 	cmp.w	r9, #0
 8009750:	d005      	beq.n	800975e <_dtoa_r+0x926>
 8009752:	45b9      	cmp	r9, r7
 8009754:	d003      	beq.n	800975e <_dtoa_r+0x926>
 8009756:	4649      	mov	r1, r9
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f984 	bl	8009a66 <_Bfree>
 800975e:	4639      	mov	r1, r7
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f980 	bl	8009a66 <_Bfree>
 8009766:	e6ae      	b.n	80094c6 <_dtoa_r+0x68e>
 8009768:	2600      	movs	r6, #0
 800976a:	4637      	mov	r7, r6
 800976c:	e7e1      	b.n	8009732 <_dtoa_r+0x8fa>
 800976e:	46ba      	mov	sl, r7
 8009770:	4637      	mov	r7, r6
 8009772:	e5b1      	b.n	80092d8 <_dtoa_r+0x4a0>
 8009774:	40240000 	.word	0x40240000
 8009778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977a:	f8cd 8010 	str.w	r8, [sp, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 80f3 	beq.w	800996a <_dtoa_r+0xb32>
 8009784:	2d00      	cmp	r5, #0
 8009786:	dd05      	ble.n	8009794 <_dtoa_r+0x95c>
 8009788:	4639      	mov	r1, r7
 800978a:	462a      	mov	r2, r5
 800978c:	4620      	mov	r0, r4
 800978e:	f000 faf7 	bl	8009d80 <__lshift>
 8009792:	4607      	mov	r7, r0
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d04c      	beq.n	8009834 <_dtoa_r+0x9fc>
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4620      	mov	r0, r4
 800979e:	f000 f92e 	bl	80099fe <_Balloc>
 80097a2:	4605      	mov	r5, r0
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	f107 010c 	add.w	r1, r7, #12
 80097aa:	3202      	adds	r2, #2
 80097ac:	0092      	lsls	r2, r2, #2
 80097ae:	300c      	adds	r0, #12
 80097b0:	f000 f91a 	bl	80099e8 <memcpy>
 80097b4:	2201      	movs	r2, #1
 80097b6:	4629      	mov	r1, r5
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fae1 	bl	8009d80 <__lshift>
 80097be:	46b9      	mov	r9, r7
 80097c0:	4607      	mov	r7, r0
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	9307      	str	r3, [sp, #28]
 80097c6:	9b02      	ldr	r3, [sp, #8]
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	9308      	str	r3, [sp, #32]
 80097ce:	4631      	mov	r1, r6
 80097d0:	4658      	mov	r0, fp
 80097d2:	f7ff faa1 	bl	8008d18 <quorem>
 80097d6:	4649      	mov	r1, r9
 80097d8:	4605      	mov	r5, r0
 80097da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80097de:	4658      	mov	r0, fp
 80097e0:	f000 fb22 	bl	8009e28 <__mcmp>
 80097e4:	463a      	mov	r2, r7
 80097e6:	9002      	str	r0, [sp, #8]
 80097e8:	4631      	mov	r1, r6
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 fb36 	bl	8009e5c <__mdiff>
 80097f0:	68c3      	ldr	r3, [r0, #12]
 80097f2:	4602      	mov	r2, r0
 80097f4:	bb03      	cbnz	r3, 8009838 <_dtoa_r+0xa00>
 80097f6:	4601      	mov	r1, r0
 80097f8:	9009      	str	r0, [sp, #36]	; 0x24
 80097fa:	4658      	mov	r0, fp
 80097fc:	f000 fb14 	bl	8009e28 <__mcmp>
 8009800:	4603      	mov	r3, r0
 8009802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009804:	4611      	mov	r1, r2
 8009806:	4620      	mov	r0, r4
 8009808:	9309      	str	r3, [sp, #36]	; 0x24
 800980a:	f000 f92c 	bl	8009a66 <_Bfree>
 800980e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009810:	b9a3      	cbnz	r3, 800983c <_dtoa_r+0xa04>
 8009812:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009814:	b992      	cbnz	r2, 800983c <_dtoa_r+0xa04>
 8009816:	9a08      	ldr	r2, [sp, #32]
 8009818:	b982      	cbnz	r2, 800983c <_dtoa_r+0xa04>
 800981a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800981e:	d029      	beq.n	8009874 <_dtoa_r+0xa3c>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dd01      	ble.n	800982a <_dtoa_r+0x9f2>
 8009826:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800982a:	9b07      	ldr	r3, [sp, #28]
 800982c:	1c5d      	adds	r5, r3, #1
 800982e:	f883 8000 	strb.w	r8, [r3]
 8009832:	e784      	b.n	800973e <_dtoa_r+0x906>
 8009834:	4638      	mov	r0, r7
 8009836:	e7c2      	b.n	80097be <_dtoa_r+0x986>
 8009838:	2301      	movs	r3, #1
 800983a:	e7e3      	b.n	8009804 <_dtoa_r+0x9cc>
 800983c:	9a02      	ldr	r2, [sp, #8]
 800983e:	2a00      	cmp	r2, #0
 8009840:	db04      	blt.n	800984c <_dtoa_r+0xa14>
 8009842:	d123      	bne.n	800988c <_dtoa_r+0xa54>
 8009844:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009846:	bb0a      	cbnz	r2, 800988c <_dtoa_r+0xa54>
 8009848:	9a08      	ldr	r2, [sp, #32]
 800984a:	b9fa      	cbnz	r2, 800988c <_dtoa_r+0xa54>
 800984c:	2b00      	cmp	r3, #0
 800984e:	ddec      	ble.n	800982a <_dtoa_r+0x9f2>
 8009850:	4659      	mov	r1, fp
 8009852:	2201      	movs	r2, #1
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fa93 	bl	8009d80 <__lshift>
 800985a:	4631      	mov	r1, r6
 800985c:	4683      	mov	fp, r0
 800985e:	f000 fae3 	bl	8009e28 <__mcmp>
 8009862:	2800      	cmp	r0, #0
 8009864:	dc03      	bgt.n	800986e <_dtoa_r+0xa36>
 8009866:	d1e0      	bne.n	800982a <_dtoa_r+0x9f2>
 8009868:	f018 0f01 	tst.w	r8, #1
 800986c:	d0dd      	beq.n	800982a <_dtoa_r+0x9f2>
 800986e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009872:	d1d8      	bne.n	8009826 <_dtoa_r+0x9ee>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	9a07      	ldr	r2, [sp, #28]
 8009878:	1c5d      	adds	r5, r3, #1
 800987a:	2339      	movs	r3, #57	; 0x39
 800987c:	7013      	strb	r3, [r2, #0]
 800987e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009882:	1e6a      	subs	r2, r5, #1
 8009884:	2b39      	cmp	r3, #57	; 0x39
 8009886:	d04d      	beq.n	8009924 <_dtoa_r+0xaec>
 8009888:	3301      	adds	r3, #1
 800988a:	e052      	b.n	8009932 <_dtoa_r+0xafa>
 800988c:	9a07      	ldr	r2, [sp, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f102 0501 	add.w	r5, r2, #1
 8009894:	dd06      	ble.n	80098a4 <_dtoa_r+0xa6c>
 8009896:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800989a:	d0eb      	beq.n	8009874 <_dtoa_r+0xa3c>
 800989c:	f108 0801 	add.w	r8, r8, #1
 80098a0:	9b07      	ldr	r3, [sp, #28]
 80098a2:	e7c4      	b.n	800982e <_dtoa_r+0x9f6>
 80098a4:	9b06      	ldr	r3, [sp, #24]
 80098a6:	9a04      	ldr	r2, [sp, #16]
 80098a8:	1aeb      	subs	r3, r5, r3
 80098aa:	4293      	cmp	r3, r2
 80098ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80098b0:	d021      	beq.n	80098f6 <_dtoa_r+0xabe>
 80098b2:	4659      	mov	r1, fp
 80098b4:	2300      	movs	r3, #0
 80098b6:	220a      	movs	r2, #10
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 f8eb 	bl	8009a94 <__multadd>
 80098be:	45b9      	cmp	r9, r7
 80098c0:	4683      	mov	fp, r0
 80098c2:	f04f 0300 	mov.w	r3, #0
 80098c6:	f04f 020a 	mov.w	r2, #10
 80098ca:	4649      	mov	r1, r9
 80098cc:	4620      	mov	r0, r4
 80098ce:	d105      	bne.n	80098dc <_dtoa_r+0xaa4>
 80098d0:	f000 f8e0 	bl	8009a94 <__multadd>
 80098d4:	4681      	mov	r9, r0
 80098d6:	4607      	mov	r7, r0
 80098d8:	9507      	str	r5, [sp, #28]
 80098da:	e778      	b.n	80097ce <_dtoa_r+0x996>
 80098dc:	f000 f8da 	bl	8009a94 <__multadd>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4681      	mov	r9, r0
 80098e4:	2300      	movs	r3, #0
 80098e6:	220a      	movs	r2, #10
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 f8d3 	bl	8009a94 <__multadd>
 80098ee:	4607      	mov	r7, r0
 80098f0:	e7f2      	b.n	80098d8 <_dtoa_r+0xaa0>
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	4659      	mov	r1, fp
 80098f8:	2201      	movs	r2, #1
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fa40 	bl	8009d80 <__lshift>
 8009900:	4631      	mov	r1, r6
 8009902:	4683      	mov	fp, r0
 8009904:	f000 fa90 	bl	8009e28 <__mcmp>
 8009908:	2800      	cmp	r0, #0
 800990a:	dcb8      	bgt.n	800987e <_dtoa_r+0xa46>
 800990c:	d102      	bne.n	8009914 <_dtoa_r+0xadc>
 800990e:	f018 0f01 	tst.w	r8, #1
 8009912:	d1b4      	bne.n	800987e <_dtoa_r+0xa46>
 8009914:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009918:	1e6a      	subs	r2, r5, #1
 800991a:	2b30      	cmp	r3, #48	; 0x30
 800991c:	f47f af0f 	bne.w	800973e <_dtoa_r+0x906>
 8009920:	4615      	mov	r5, r2
 8009922:	e7f7      	b.n	8009914 <_dtoa_r+0xadc>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	4293      	cmp	r3, r2
 8009928:	d105      	bne.n	8009936 <_dtoa_r+0xafe>
 800992a:	2331      	movs	r3, #49	; 0x31
 800992c:	9a06      	ldr	r2, [sp, #24]
 800992e:	f10a 0a01 	add.w	sl, sl, #1
 8009932:	7013      	strb	r3, [r2, #0]
 8009934:	e703      	b.n	800973e <_dtoa_r+0x906>
 8009936:	4615      	mov	r5, r2
 8009938:	e7a1      	b.n	800987e <_dtoa_r+0xa46>
 800993a:	4b17      	ldr	r3, [pc, #92]	; (8009998 <_dtoa_r+0xb60>)
 800993c:	f7ff bae1 	b.w	8008f02 <_dtoa_r+0xca>
 8009940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009942:	2b00      	cmp	r3, #0
 8009944:	f47f aabb 	bne.w	8008ebe <_dtoa_r+0x86>
 8009948:	4b14      	ldr	r3, [pc, #80]	; (800999c <_dtoa_r+0xb64>)
 800994a:	f7ff bada 	b.w	8008f02 <_dtoa_r+0xca>
 800994e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009950:	2b01      	cmp	r3, #1
 8009952:	f77f ae3f 	ble.w	80095d4 <_dtoa_r+0x79c>
 8009956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009958:	9308      	str	r3, [sp, #32]
 800995a:	e653      	b.n	8009604 <_dtoa_r+0x7cc>
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	dc03      	bgt.n	800996a <_dtoa_r+0xb32>
 8009962:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009964:	2b02      	cmp	r3, #2
 8009966:	f73f aed5 	bgt.w	8009714 <_dtoa_r+0x8dc>
 800996a:	9d06      	ldr	r5, [sp, #24]
 800996c:	4631      	mov	r1, r6
 800996e:	4658      	mov	r0, fp
 8009970:	f7ff f9d2 	bl	8008d18 <quorem>
 8009974:	9b06      	ldr	r3, [sp, #24]
 8009976:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800997a:	f805 8b01 	strb.w	r8, [r5], #1
 800997e:	9a04      	ldr	r2, [sp, #16]
 8009980:	1aeb      	subs	r3, r5, r3
 8009982:	429a      	cmp	r2, r3
 8009984:	ddb5      	ble.n	80098f2 <_dtoa_r+0xaba>
 8009986:	4659      	mov	r1, fp
 8009988:	2300      	movs	r3, #0
 800998a:	220a      	movs	r2, #10
 800998c:	4620      	mov	r0, r4
 800998e:	f000 f881 	bl	8009a94 <__multadd>
 8009992:	4683      	mov	fp, r0
 8009994:	e7ea      	b.n	800996c <_dtoa_r+0xb34>
 8009996:	bf00      	nop
 8009998:	0800bdb0 	.word	0x0800bdb0
 800999c:	0800bdd4 	.word	0x0800bdd4

080099a0 <_localeconv_r>:
 80099a0:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <_localeconv_r+0x14>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6a18      	ldr	r0, [r3, #32]
 80099a6:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <_localeconv_r+0x18>)
 80099a8:	2800      	cmp	r0, #0
 80099aa:	bf08      	it	eq
 80099ac:	4618      	moveq	r0, r3
 80099ae:	30f0      	adds	r0, #240	; 0xf0
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000010 	.word	0x20000010
 80099b8:	20000074 	.word	0x20000074

080099bc <malloc>:
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <malloc+0xc>)
 80099be:	4601      	mov	r1, r0
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f000 bb53 	b.w	800a06c <_malloc_r>
 80099c6:	bf00      	nop
 80099c8:	20000010 	.word	0x20000010

080099cc <memchr>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	b2c9      	uxtb	r1, r1
 80099d0:	4402      	add	r2, r0
 80099d2:	4290      	cmp	r0, r2
 80099d4:	4603      	mov	r3, r0
 80099d6:	d101      	bne.n	80099dc <memchr+0x10>
 80099d8:	2300      	movs	r3, #0
 80099da:	e003      	b.n	80099e4 <memchr+0x18>
 80099dc:	781c      	ldrb	r4, [r3, #0]
 80099de:	3001      	adds	r0, #1
 80099e0:	428c      	cmp	r4, r1
 80099e2:	d1f6      	bne.n	80099d2 <memchr+0x6>
 80099e4:	4618      	mov	r0, r3
 80099e6:	bd10      	pop	{r4, pc}

080099e8 <memcpy>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	1e43      	subs	r3, r0, #1
 80099ec:	440a      	add	r2, r1
 80099ee:	4291      	cmp	r1, r2
 80099f0:	d100      	bne.n	80099f4 <memcpy+0xc>
 80099f2:	bd10      	pop	{r4, pc}
 80099f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fc:	e7f7      	b.n	80099ee <memcpy+0x6>

080099fe <_Balloc>:
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a02:	4604      	mov	r4, r0
 8009a04:	460e      	mov	r6, r1
 8009a06:	b93d      	cbnz	r5, 8009a18 <_Balloc+0x1a>
 8009a08:	2010      	movs	r0, #16
 8009a0a:	f7ff ffd7 	bl	80099bc <malloc>
 8009a0e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a14:	6005      	str	r5, [r0, #0]
 8009a16:	60c5      	str	r5, [r0, #12]
 8009a18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a1a:	68eb      	ldr	r3, [r5, #12]
 8009a1c:	b183      	cbz	r3, 8009a40 <_Balloc+0x42>
 8009a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a26:	b9b8      	cbnz	r0, 8009a58 <_Balloc+0x5a>
 8009a28:	2101      	movs	r1, #1
 8009a2a:	fa01 f506 	lsl.w	r5, r1, r6
 8009a2e:	1d6a      	adds	r2, r5, #5
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fabf 	bl	8009fb6 <_calloc_r>
 8009a38:	b160      	cbz	r0, 8009a54 <_Balloc+0x56>
 8009a3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a3e:	e00e      	b.n	8009a5e <_Balloc+0x60>
 8009a40:	2221      	movs	r2, #33	; 0x21
 8009a42:	2104      	movs	r1, #4
 8009a44:	4620      	mov	r0, r4
 8009a46:	f000 fab6 	bl	8009fb6 <_calloc_r>
 8009a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4c:	60e8      	str	r0, [r5, #12]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e4      	bne.n	8009a1e <_Balloc+0x20>
 8009a54:	2000      	movs	r0, #0
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	6802      	ldr	r2, [r0, #0]
 8009a5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a64:	e7f7      	b.n	8009a56 <_Balloc+0x58>

08009a66 <_Bfree>:
 8009a66:	b570      	push	{r4, r5, r6, lr}
 8009a68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	b93c      	cbnz	r4, 8009a80 <_Bfree+0x1a>
 8009a70:	2010      	movs	r0, #16
 8009a72:	f7ff ffa3 	bl	80099bc <malloc>
 8009a76:	6270      	str	r0, [r6, #36]	; 0x24
 8009a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a7c:	6004      	str	r4, [r0, #0]
 8009a7e:	60c4      	str	r4, [r0, #12]
 8009a80:	b13d      	cbz	r5, 8009a92 <_Bfree+0x2c>
 8009a82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a84:	686a      	ldr	r2, [r5, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a8c:	6029      	str	r1, [r5, #0]
 8009a8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a92:	bd70      	pop	{r4, r5, r6, pc}

08009a94 <__multadd>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	461f      	mov	r7, r3
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	690d      	ldr	r5, [r1, #16]
 8009aa2:	f101 0c14 	add.w	ip, r1, #20
 8009aa6:	f8dc 0000 	ldr.w	r0, [ip]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	b281      	uxth	r1, r0
 8009aae:	fb02 7101 	mla	r1, r2, r1, r7
 8009ab2:	0c00      	lsrs	r0, r0, #16
 8009ab4:	0c0f      	lsrs	r7, r1, #16
 8009ab6:	fb02 7000 	mla	r0, r2, r0, r7
 8009aba:	b289      	uxth	r1, r1
 8009abc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aca:	dcec      	bgt.n	8009aa6 <__multadd+0x12>
 8009acc:	b1d7      	cbz	r7, 8009b04 <__multadd+0x70>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc12      	bgt.n	8009afa <__multadd+0x66>
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	3101      	adds	r1, #1
 8009ada:	f7ff ff90 	bl	80099fe <_Balloc>
 8009ade:	4680      	mov	r8, r0
 8009ae0:	6922      	ldr	r2, [r4, #16]
 8009ae2:	f104 010c 	add.w	r1, r4, #12
 8009ae6:	3202      	adds	r2, #2
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	300c      	adds	r0, #12
 8009aec:	f7ff ff7c 	bl	80099e8 <memcpy>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ffb7 	bl	8009a66 <_Bfree>
 8009af8:	4644      	mov	r4, r8
 8009afa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009afe:	3501      	adds	r5, #1
 8009b00:	615f      	str	r7, [r3, #20]
 8009b02:	6125      	str	r5, [r4, #16]
 8009b04:	4620      	mov	r0, r4
 8009b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b0a <__hi0bits>:
 8009b0a:	0c02      	lsrs	r2, r0, #16
 8009b0c:	0412      	lsls	r2, r2, #16
 8009b0e:	4603      	mov	r3, r0
 8009b10:	b9b2      	cbnz	r2, 8009b40 <__hi0bits+0x36>
 8009b12:	0403      	lsls	r3, r0, #16
 8009b14:	2010      	movs	r0, #16
 8009b16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	021b      	lsleq	r3, r3, #8
 8009b1e:	3008      	addeq	r0, #8
 8009b20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	011b      	lsleq	r3, r3, #4
 8009b28:	3004      	addeq	r0, #4
 8009b2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	009b      	lsleq	r3, r3, #2
 8009b32:	3002      	addeq	r0, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	db06      	blt.n	8009b46 <__hi0bits+0x3c>
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	d503      	bpl.n	8009b44 <__hi0bits+0x3a>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	4770      	bx	lr
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7e8      	b.n	8009b16 <__hi0bits+0xc>
 8009b44:	2020      	movs	r0, #32
 8009b46:	4770      	bx	lr

08009b48 <__lo0bits>:
 8009b48:	6803      	ldr	r3, [r0, #0]
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	f013 0207 	ands.w	r2, r3, #7
 8009b50:	d00b      	beq.n	8009b6a <__lo0bits+0x22>
 8009b52:	07da      	lsls	r2, r3, #31
 8009b54:	d423      	bmi.n	8009b9e <__lo0bits+0x56>
 8009b56:	0798      	lsls	r0, r3, #30
 8009b58:	bf49      	itett	mi
 8009b5a:	085b      	lsrmi	r3, r3, #1
 8009b5c:	089b      	lsrpl	r3, r3, #2
 8009b5e:	2001      	movmi	r0, #1
 8009b60:	600b      	strmi	r3, [r1, #0]
 8009b62:	bf5c      	itt	pl
 8009b64:	600b      	strpl	r3, [r1, #0]
 8009b66:	2002      	movpl	r0, #2
 8009b68:	4770      	bx	lr
 8009b6a:	b298      	uxth	r0, r3
 8009b6c:	b9a8      	cbnz	r0, 8009b9a <__lo0bits+0x52>
 8009b6e:	2010      	movs	r0, #16
 8009b70:	0c1b      	lsrs	r3, r3, #16
 8009b72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b76:	bf04      	itt	eq
 8009b78:	0a1b      	lsreq	r3, r3, #8
 8009b7a:	3008      	addeq	r0, #8
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	bf04      	itt	eq
 8009b80:	091b      	lsreq	r3, r3, #4
 8009b82:	3004      	addeq	r0, #4
 8009b84:	079a      	lsls	r2, r3, #30
 8009b86:	bf04      	itt	eq
 8009b88:	089b      	lsreq	r3, r3, #2
 8009b8a:	3002      	addeq	r0, #2
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	d402      	bmi.n	8009b96 <__lo0bits+0x4e>
 8009b90:	085b      	lsrs	r3, r3, #1
 8009b92:	d006      	beq.n	8009ba2 <__lo0bits+0x5a>
 8009b94:	3001      	adds	r0, #1
 8009b96:	600b      	str	r3, [r1, #0]
 8009b98:	4770      	bx	lr
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	e7e9      	b.n	8009b72 <__lo0bits+0x2a>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	4770      	bx	lr
 8009ba2:	2020      	movs	r0, #32
 8009ba4:	4770      	bx	lr

08009ba6 <__i2b>:
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	460c      	mov	r4, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	f7ff ff27 	bl	80099fe <_Balloc>
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	6144      	str	r4, [r0, #20]
 8009bb4:	6102      	str	r2, [r0, #16]
 8009bb6:	bd10      	pop	{r4, pc}

08009bb8 <__multiply>:
 8009bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	690a      	ldr	r2, [r1, #16]
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	4688      	mov	r8, r1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	bfbe      	ittt	lt
 8009bc8:	460b      	movlt	r3, r1
 8009bca:	46a0      	movlt	r8, r4
 8009bcc:	461c      	movlt	r4, r3
 8009bce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bd2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bde:	eb07 0609 	add.w	r6, r7, r9
 8009be2:	42b3      	cmp	r3, r6
 8009be4:	bfb8      	it	lt
 8009be6:	3101      	addlt	r1, #1
 8009be8:	f7ff ff09 	bl	80099fe <_Balloc>
 8009bec:	f100 0514 	add.w	r5, r0, #20
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009bf8:	4573      	cmp	r3, lr
 8009bfa:	d316      	bcc.n	8009c2a <__multiply+0x72>
 8009bfc:	f104 0214 	add.w	r2, r4, #20
 8009c00:	f108 0114 	add.w	r1, r8, #20
 8009c04:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c08:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	9201      	str	r2, [sp, #4]
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d80c      	bhi.n	8009c30 <__multiply+0x78>
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	dd03      	ble.n	8009c22 <__multiply+0x6a>
 8009c1a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d05d      	beq.n	8009cde <__multiply+0x126>
 8009c22:	6106      	str	r6, [r0, #16]
 8009c24:	b003      	add	sp, #12
 8009c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2a:	f843 2b04 	str.w	r2, [r3], #4
 8009c2e:	e7e3      	b.n	8009bf8 <__multiply+0x40>
 8009c30:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c34:	f1bb 0f00 	cmp.w	fp, #0
 8009c38:	d023      	beq.n	8009c82 <__multiply+0xca>
 8009c3a:	4689      	mov	r9, r1
 8009c3c:	46ac      	mov	ip, r5
 8009c3e:	f04f 0800 	mov.w	r8, #0
 8009c42:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c46:	f8dc a000 	ldr.w	sl, [ip]
 8009c4a:	b2a3      	uxth	r3, r4
 8009c4c:	fa1f fa8a 	uxth.w	sl, sl
 8009c50:	fb0b a303 	mla	r3, fp, r3, sl
 8009c54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c58:	f8dc 4000 	ldr.w	r4, [ip]
 8009c5c:	4443      	add	r3, r8
 8009c5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c62:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c66:	46e2      	mov	sl, ip
 8009c68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c72:	454f      	cmp	r7, r9
 8009c74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c78:	f84a 3b04 	str.w	r3, [sl], #4
 8009c7c:	d82b      	bhi.n	8009cd6 <__multiply+0x11e>
 8009c7e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	3204      	adds	r2, #4
 8009c86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009c8a:	f1ba 0f00 	cmp.w	sl, #0
 8009c8e:	d020      	beq.n	8009cd2 <__multiply+0x11a>
 8009c90:	4689      	mov	r9, r1
 8009c92:	46a8      	mov	r8, r5
 8009c94:	f04f 0b00 	mov.w	fp, #0
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	f8b9 c000 	ldrh.w	ip, [r9]
 8009c9e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ca8:	46c4      	mov	ip, r8
 8009caa:	445c      	add	r4, fp
 8009cac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009cb0:	f84c 3b04 	str.w	r3, [ip], #4
 8009cb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cb8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009cbc:	0c1b      	lsrs	r3, r3, #16
 8009cbe:	fb0a b303 	mla	r3, sl, r3, fp
 8009cc2:	454f      	cmp	r7, r9
 8009cc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009ccc:	d805      	bhi.n	8009cda <__multiply+0x122>
 8009cce:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cd2:	3504      	adds	r5, #4
 8009cd4:	e79b      	b.n	8009c0e <__multiply+0x56>
 8009cd6:	46d4      	mov	ip, sl
 8009cd8:	e7b3      	b.n	8009c42 <__multiply+0x8a>
 8009cda:	46e0      	mov	r8, ip
 8009cdc:	e7dd      	b.n	8009c9a <__multiply+0xe2>
 8009cde:	3e01      	subs	r6, #1
 8009ce0:	e799      	b.n	8009c16 <__multiply+0x5e>
	...

08009ce4 <__pow5mult>:
 8009ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce8:	4615      	mov	r5, r2
 8009cea:	f012 0203 	ands.w	r2, r2, #3
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	d007      	beq.n	8009d04 <__pow5mult+0x20>
 8009cf4:	4c21      	ldr	r4, [pc, #132]	; (8009d7c <__pow5mult+0x98>)
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cfe:	f7ff fec9 	bl	8009a94 <__multadd>
 8009d02:	4607      	mov	r7, r0
 8009d04:	10ad      	asrs	r5, r5, #2
 8009d06:	d035      	beq.n	8009d74 <__pow5mult+0x90>
 8009d08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d0a:	b93c      	cbnz	r4, 8009d1c <__pow5mult+0x38>
 8009d0c:	2010      	movs	r0, #16
 8009d0e:	f7ff fe55 	bl	80099bc <malloc>
 8009d12:	6270      	str	r0, [r6, #36]	; 0x24
 8009d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d18:	6004      	str	r4, [r0, #0]
 8009d1a:	60c4      	str	r4, [r0, #12]
 8009d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d24:	b94c      	cbnz	r4, 8009d3a <__pow5mult+0x56>
 8009d26:	f240 2171 	movw	r1, #625	; 0x271
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff3b 	bl	8009ba6 <__i2b>
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	07eb      	lsls	r3, r5, #31
 8009d40:	d50a      	bpl.n	8009d58 <__pow5mult+0x74>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4622      	mov	r2, r4
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff36 	bl	8009bb8 <__multiply>
 8009d4c:	4681      	mov	r9, r0
 8009d4e:	4639      	mov	r1, r7
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fe88 	bl	8009a66 <_Bfree>
 8009d56:	464f      	mov	r7, r9
 8009d58:	106d      	asrs	r5, r5, #1
 8009d5a:	d00b      	beq.n	8009d74 <__pow5mult+0x90>
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	b938      	cbnz	r0, 8009d70 <__pow5mult+0x8c>
 8009d60:	4622      	mov	r2, r4
 8009d62:	4621      	mov	r1, r4
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff ff27 	bl	8009bb8 <__multiply>
 8009d6a:	6020      	str	r0, [r4, #0]
 8009d6c:	f8c0 8000 	str.w	r8, [r0]
 8009d70:	4604      	mov	r4, r0
 8009d72:	e7e4      	b.n	8009d3e <__pow5mult+0x5a>
 8009d74:	4638      	mov	r0, r7
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800bed8 	.word	0x0800bed8

08009d80 <__lshift>:
 8009d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d84:	460c      	mov	r4, r1
 8009d86:	4607      	mov	r7, r0
 8009d88:	4616      	mov	r6, r2
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d90:	eb0a 0903 	add.w	r9, sl, r3
 8009d94:	6849      	ldr	r1, [r1, #4]
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	f109 0501 	add.w	r5, r9, #1
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	db32      	blt.n	8009e06 <__lshift+0x86>
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7ff fe2c 	bl	80099fe <_Balloc>
 8009da6:	2300      	movs	r3, #0
 8009da8:	4680      	mov	r8, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	f100 0114 	add.w	r1, r0, #20
 8009db0:	4553      	cmp	r3, sl
 8009db2:	db2b      	blt.n	8009e0c <__lshift+0x8c>
 8009db4:	6920      	ldr	r0, [r4, #16]
 8009db6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dba:	f104 0314 	add.w	r3, r4, #20
 8009dbe:	f016 021f 	ands.w	r2, r6, #31
 8009dc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dca:	d025      	beq.n	8009e18 <__lshift+0x98>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f1c2 0e20 	rsb	lr, r2, #32
 8009dd2:	468a      	mov	sl, r1
 8009dd4:	681e      	ldr	r6, [r3, #0]
 8009dd6:	4096      	lsls	r6, r2
 8009dd8:	4330      	orrs	r0, r6
 8009dda:	f84a 0b04 	str.w	r0, [sl], #4
 8009dde:	f853 0b04 	ldr.w	r0, [r3], #4
 8009de2:	459c      	cmp	ip, r3
 8009de4:	fa20 f00e 	lsr.w	r0, r0, lr
 8009de8:	d814      	bhi.n	8009e14 <__lshift+0x94>
 8009dea:	6048      	str	r0, [r1, #4]
 8009dec:	b108      	cbz	r0, 8009df2 <__lshift+0x72>
 8009dee:	f109 0502 	add.w	r5, r9, #2
 8009df2:	3d01      	subs	r5, #1
 8009df4:	4638      	mov	r0, r7
 8009df6:	f8c8 5010 	str.w	r5, [r8, #16]
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	f7ff fe33 	bl	8009a66 <_Bfree>
 8009e00:	4640      	mov	r0, r8
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	3101      	adds	r1, #1
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	e7c7      	b.n	8009d9c <__lshift+0x1c>
 8009e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e10:	3301      	adds	r3, #1
 8009e12:	e7cd      	b.n	8009db0 <__lshift+0x30>
 8009e14:	4651      	mov	r1, sl
 8009e16:	e7dc      	b.n	8009dd2 <__lshift+0x52>
 8009e18:	3904      	subs	r1, #4
 8009e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1e:	459c      	cmp	ip, r3
 8009e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e24:	d8f9      	bhi.n	8009e1a <__lshift+0x9a>
 8009e26:	e7e4      	b.n	8009df2 <__lshift+0x72>

08009e28 <__mcmp>:
 8009e28:	6903      	ldr	r3, [r0, #16]
 8009e2a:	690a      	ldr	r2, [r1, #16]
 8009e2c:	b530      	push	{r4, r5, lr}
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	d10c      	bne.n	8009e4c <__mcmp+0x24>
 8009e32:	0092      	lsls	r2, r2, #2
 8009e34:	3014      	adds	r0, #20
 8009e36:	3114      	adds	r1, #20
 8009e38:	1884      	adds	r4, r0, r2
 8009e3a:	4411      	add	r1, r2
 8009e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e44:	4295      	cmp	r5, r2
 8009e46:	d003      	beq.n	8009e50 <__mcmp+0x28>
 8009e48:	d305      	bcc.n	8009e56 <__mcmp+0x2e>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d3f3      	bcc.n	8009e3c <__mcmp+0x14>
 8009e54:	e7fa      	b.n	8009e4c <__mcmp+0x24>
 8009e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e5a:	e7f7      	b.n	8009e4c <__mcmp+0x24>

08009e5c <__mdiff>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	460d      	mov	r5, r1
 8009e62:	4607      	mov	r7, r0
 8009e64:	4611      	mov	r1, r2
 8009e66:	4628      	mov	r0, r5
 8009e68:	4614      	mov	r4, r2
 8009e6a:	f7ff ffdd 	bl	8009e28 <__mcmp>
 8009e6e:	1e06      	subs	r6, r0, #0
 8009e70:	d108      	bne.n	8009e84 <__mdiff+0x28>
 8009e72:	4631      	mov	r1, r6
 8009e74:	4638      	mov	r0, r7
 8009e76:	f7ff fdc2 	bl	80099fe <_Balloc>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	bfa4      	itt	ge
 8009e86:	4623      	movge	r3, r4
 8009e88:	462c      	movge	r4, r5
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	6861      	ldr	r1, [r4, #4]
 8009e8e:	bfa6      	itte	ge
 8009e90:	461d      	movge	r5, r3
 8009e92:	2600      	movge	r6, #0
 8009e94:	2601      	movlt	r6, #1
 8009e96:	f7ff fdb2 	bl	80099fe <_Balloc>
 8009e9a:	f04f 0e00 	mov.w	lr, #0
 8009e9e:	60c6      	str	r6, [r0, #12]
 8009ea0:	692b      	ldr	r3, [r5, #16]
 8009ea2:	6926      	ldr	r6, [r4, #16]
 8009ea4:	f104 0214 	add.w	r2, r4, #20
 8009ea8:	f105 0914 	add.w	r9, r5, #20
 8009eac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009eb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009eb4:	f100 0114 	add.w	r1, r0, #20
 8009eb8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ebc:	f859 5b04 	ldr.w	r5, [r9], #4
 8009ec0:	fa1f f38a 	uxth.w	r3, sl
 8009ec4:	4473      	add	r3, lr
 8009ec6:	b2ac      	uxth	r4, r5
 8009ec8:	1b1b      	subs	r3, r3, r4
 8009eca:	0c2c      	lsrs	r4, r5, #16
 8009ecc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009ed0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009eda:	45c8      	cmp	r8, r9
 8009edc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009ee0:	4694      	mov	ip, r2
 8009ee2:	f841 4b04 	str.w	r4, [r1], #4
 8009ee6:	d8e7      	bhi.n	8009eb8 <__mdiff+0x5c>
 8009ee8:	45bc      	cmp	ip, r7
 8009eea:	d304      	bcc.n	8009ef6 <__mdiff+0x9a>
 8009eec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ef0:	b183      	cbz	r3, 8009f14 <__mdiff+0xb8>
 8009ef2:	6106      	str	r6, [r0, #16]
 8009ef4:	e7c4      	b.n	8009e80 <__mdiff+0x24>
 8009ef6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009efa:	b2a2      	uxth	r2, r4
 8009efc:	4472      	add	r2, lr
 8009efe:	1413      	asrs	r3, r2, #16
 8009f00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009f04:	b292      	uxth	r2, r2
 8009f06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f0a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f0e:	f841 2b04 	str.w	r2, [r1], #4
 8009f12:	e7e9      	b.n	8009ee8 <__mdiff+0x8c>
 8009f14:	3e01      	subs	r6, #1
 8009f16:	e7e9      	b.n	8009eec <__mdiff+0x90>

08009f18 <__d2b>:
 8009f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009f22:	2101      	movs	r1, #1
 8009f24:	4690      	mov	r8, r2
 8009f26:	f7ff fd6a 	bl	80099fe <_Balloc>
 8009f2a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009f2e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f32:	4607      	mov	r7, r0
 8009f34:	bb34      	cbnz	r4, 8009f84 <__d2b+0x6c>
 8009f36:	9201      	str	r2, [sp, #4]
 8009f38:	f1b8 0200 	subs.w	r2, r8, #0
 8009f3c:	d027      	beq.n	8009f8e <__d2b+0x76>
 8009f3e:	a802      	add	r0, sp, #8
 8009f40:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009f44:	f7ff fe00 	bl	8009b48 <__lo0bits>
 8009f48:	9900      	ldr	r1, [sp, #0]
 8009f4a:	b1f0      	cbz	r0, 8009f8a <__d2b+0x72>
 8009f4c:	9a01      	ldr	r2, [sp, #4]
 8009f4e:	f1c0 0320 	rsb	r3, r0, #32
 8009f52:	fa02 f303 	lsl.w	r3, r2, r3
 8009f56:	430b      	orrs	r3, r1
 8009f58:	40c2      	lsrs	r2, r0
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf14      	ite	ne
 8009f64:	2102      	movne	r1, #2
 8009f66:	2101      	moveq	r1, #1
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	6139      	str	r1, [r7, #16]
 8009f6c:	b1c4      	cbz	r4, 8009fa0 <__d2b+0x88>
 8009f6e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f72:	4404      	add	r4, r0
 8009f74:	6034      	str	r4, [r6, #0]
 8009f76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f7a:	6028      	str	r0, [r5, #0]
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	b002      	add	sp, #8
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f88:	e7d5      	b.n	8009f36 <__d2b+0x1e>
 8009f8a:	6179      	str	r1, [r7, #20]
 8009f8c:	e7e7      	b.n	8009f5e <__d2b+0x46>
 8009f8e:	a801      	add	r0, sp, #4
 8009f90:	f7ff fdda 	bl	8009b48 <__lo0bits>
 8009f94:	2101      	movs	r1, #1
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	6139      	str	r1, [r7, #16]
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	3020      	adds	r0, #32
 8009f9e:	e7e5      	b.n	8009f6c <__d2b+0x54>
 8009fa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fa4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	6918      	ldr	r0, [r3, #16]
 8009fac:	f7ff fdad 	bl	8009b0a <__hi0bits>
 8009fb0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fb4:	e7e1      	b.n	8009f7a <__d2b+0x62>

08009fb6 <_calloc_r>:
 8009fb6:	b538      	push	{r3, r4, r5, lr}
 8009fb8:	fb02 f401 	mul.w	r4, r2, r1
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	f000 f855 	bl	800a06c <_malloc_r>
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	b118      	cbz	r0, 8009fce <_calloc_r+0x18>
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	2100      	movs	r1, #0
 8009fca:	f7fe fa2d 	bl	8008428 <memset>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08009fd4 <_free_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	d043      	beq.n	800a064 <_free_r+0x90>
 8009fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe0:	1f0c      	subs	r4, r1, #4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfb8      	it	lt
 8009fe6:	18e4      	addlt	r4, r4, r3
 8009fe8:	f000 fa27 	bl	800a43a <__malloc_lock>
 8009fec:	4a1e      	ldr	r2, [pc, #120]	; (800a068 <_free_r+0x94>)
 8009fee:	6813      	ldr	r3, [r2, #0]
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	b933      	cbnz	r3, 800a002 <_free_r+0x2e>
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	6014      	str	r4, [r2, #0]
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ffe:	f000 ba1d 	b.w	800a43c <__malloc_unlock>
 800a002:	42a3      	cmp	r3, r4
 800a004:	d90b      	bls.n	800a01e <_free_r+0x4a>
 800a006:	6821      	ldr	r1, [r4, #0]
 800a008:	1862      	adds	r2, r4, r1
 800a00a:	4293      	cmp	r3, r2
 800a00c:	bf01      	itttt	eq
 800a00e:	681a      	ldreq	r2, [r3, #0]
 800a010:	685b      	ldreq	r3, [r3, #4]
 800a012:	1852      	addeq	r2, r2, r1
 800a014:	6022      	streq	r2, [r4, #0]
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	6004      	str	r4, [r0, #0]
 800a01a:	e7ed      	b.n	8009ff8 <_free_r+0x24>
 800a01c:	4613      	mov	r3, r2
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	b10a      	cbz	r2, 800a026 <_free_r+0x52>
 800a022:	42a2      	cmp	r2, r4
 800a024:	d9fa      	bls.n	800a01c <_free_r+0x48>
 800a026:	6819      	ldr	r1, [r3, #0]
 800a028:	1858      	adds	r0, r3, r1
 800a02a:	42a0      	cmp	r0, r4
 800a02c:	d10b      	bne.n	800a046 <_free_r+0x72>
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	4401      	add	r1, r0
 800a032:	1858      	adds	r0, r3, r1
 800a034:	4282      	cmp	r2, r0
 800a036:	6019      	str	r1, [r3, #0]
 800a038:	d1de      	bne.n	8009ff8 <_free_r+0x24>
 800a03a:	6810      	ldr	r0, [r2, #0]
 800a03c:	6852      	ldr	r2, [r2, #4]
 800a03e:	4401      	add	r1, r0
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	605a      	str	r2, [r3, #4]
 800a044:	e7d8      	b.n	8009ff8 <_free_r+0x24>
 800a046:	d902      	bls.n	800a04e <_free_r+0x7a>
 800a048:	230c      	movs	r3, #12
 800a04a:	602b      	str	r3, [r5, #0]
 800a04c:	e7d4      	b.n	8009ff8 <_free_r+0x24>
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1821      	adds	r1, r4, r0
 800a052:	428a      	cmp	r2, r1
 800a054:	bf01      	itttt	eq
 800a056:	6811      	ldreq	r1, [r2, #0]
 800a058:	6852      	ldreq	r2, [r2, #4]
 800a05a:	1809      	addeq	r1, r1, r0
 800a05c:	6021      	streq	r1, [r4, #0]
 800a05e:	6062      	str	r2, [r4, #4]
 800a060:	605c      	str	r4, [r3, #4]
 800a062:	e7c9      	b.n	8009ff8 <_free_r+0x24>
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20000270 	.word	0x20000270

0800a06c <_malloc_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	1ccd      	adds	r5, r1, #3
 800a070:	f025 0503 	bic.w	r5, r5, #3
 800a074:	3508      	adds	r5, #8
 800a076:	2d0c      	cmp	r5, #12
 800a078:	bf38      	it	cc
 800a07a:	250c      	movcc	r5, #12
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	db01      	blt.n	800a086 <_malloc_r+0x1a>
 800a082:	42a9      	cmp	r1, r5
 800a084:	d903      	bls.n	800a08e <_malloc_r+0x22>
 800a086:	230c      	movs	r3, #12
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	2000      	movs	r0, #0
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	f000 f9d4 	bl	800a43a <__malloc_lock>
 800a092:	4a21      	ldr	r2, [pc, #132]	; (800a118 <_malloc_r+0xac>)
 800a094:	6814      	ldr	r4, [r2, #0]
 800a096:	4621      	mov	r1, r4
 800a098:	b991      	cbnz	r1, 800a0c0 <_malloc_r+0x54>
 800a09a:	4c20      	ldr	r4, [pc, #128]	; (800a11c <_malloc_r+0xb0>)
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	b91b      	cbnz	r3, 800a0a8 <_malloc_r+0x3c>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f98f 	bl	800a3c4 <_sbrk_r>
 800a0a6:	6020      	str	r0, [r4, #0]
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f000 f98a 	bl	800a3c4 <_sbrk_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d124      	bne.n	800a0fe <_malloc_r+0x92>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	f000 f9bf 	bl	800a43c <__malloc_unlock>
 800a0be:	e7e4      	b.n	800a08a <_malloc_r+0x1e>
 800a0c0:	680b      	ldr	r3, [r1, #0]
 800a0c2:	1b5b      	subs	r3, r3, r5
 800a0c4:	d418      	bmi.n	800a0f8 <_malloc_r+0x8c>
 800a0c6:	2b0b      	cmp	r3, #11
 800a0c8:	d90f      	bls.n	800a0ea <_malloc_r+0x7e>
 800a0ca:	600b      	str	r3, [r1, #0]
 800a0cc:	18cc      	adds	r4, r1, r3
 800a0ce:	50cd      	str	r5, [r1, r3]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f9b3 	bl	800a43c <__malloc_unlock>
 800a0d6:	f104 000b 	add.w	r0, r4, #11
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	f020 0007 	bic.w	r0, r0, #7
 800a0e0:	1ac3      	subs	r3, r0, r3
 800a0e2:	d0d3      	beq.n	800a08c <_malloc_r+0x20>
 800a0e4:	425a      	negs	r2, r3
 800a0e6:	50e2      	str	r2, [r4, r3]
 800a0e8:	e7d0      	b.n	800a08c <_malloc_r+0x20>
 800a0ea:	684b      	ldr	r3, [r1, #4]
 800a0ec:	428c      	cmp	r4, r1
 800a0ee:	bf16      	itet	ne
 800a0f0:	6063      	strne	r3, [r4, #4]
 800a0f2:	6013      	streq	r3, [r2, #0]
 800a0f4:	460c      	movne	r4, r1
 800a0f6:	e7eb      	b.n	800a0d0 <_malloc_r+0x64>
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6849      	ldr	r1, [r1, #4]
 800a0fc:	e7cc      	b.n	800a098 <_malloc_r+0x2c>
 800a0fe:	1cc4      	adds	r4, r0, #3
 800a100:	f024 0403 	bic.w	r4, r4, #3
 800a104:	42a0      	cmp	r0, r4
 800a106:	d005      	beq.n	800a114 <_malloc_r+0xa8>
 800a108:	1a21      	subs	r1, r4, r0
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f95a 	bl	800a3c4 <_sbrk_r>
 800a110:	3001      	adds	r0, #1
 800a112:	d0cf      	beq.n	800a0b4 <_malloc_r+0x48>
 800a114:	6025      	str	r5, [r4, #0]
 800a116:	e7db      	b.n	800a0d0 <_malloc_r+0x64>
 800a118:	20000270 	.word	0x20000270
 800a11c:	20000274 	.word	0x20000274

0800a120 <__ssputs_r>:
 800a120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a124:	688e      	ldr	r6, [r1, #8]
 800a126:	4682      	mov	sl, r0
 800a128:	429e      	cmp	r6, r3
 800a12a:	460c      	mov	r4, r1
 800a12c:	4690      	mov	r8, r2
 800a12e:	4699      	mov	r9, r3
 800a130:	d837      	bhi.n	800a1a2 <__ssputs_r+0x82>
 800a132:	898a      	ldrh	r2, [r1, #12]
 800a134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a138:	d031      	beq.n	800a19e <__ssputs_r+0x7e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	6825      	ldr	r5, [r4, #0]
 800a13e:	6909      	ldr	r1, [r1, #16]
 800a140:	1a6f      	subs	r7, r5, r1
 800a142:	6965      	ldr	r5, [r4, #20]
 800a144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a148:	fb95 f5f3 	sdiv	r5, r5, r3
 800a14c:	f109 0301 	add.w	r3, r9, #1
 800a150:	443b      	add	r3, r7
 800a152:	429d      	cmp	r5, r3
 800a154:	bf38      	it	cc
 800a156:	461d      	movcc	r5, r3
 800a158:	0553      	lsls	r3, r2, #21
 800a15a:	d530      	bpl.n	800a1be <__ssputs_r+0x9e>
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7ff ff85 	bl	800a06c <_malloc_r>
 800a162:	4606      	mov	r6, r0
 800a164:	b950      	cbnz	r0, 800a17c <__ssputs_r+0x5c>
 800a166:	230c      	movs	r3, #12
 800a168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a16c:	f8ca 3000 	str.w	r3, [sl]
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a17c:	463a      	mov	r2, r7
 800a17e:	6921      	ldr	r1, [r4, #16]
 800a180:	f7ff fc32 	bl	80099e8 <memcpy>
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	6126      	str	r6, [r4, #16]
 800a192:	443e      	add	r6, r7
 800a194:	6026      	str	r6, [r4, #0]
 800a196:	464e      	mov	r6, r9
 800a198:	6165      	str	r5, [r4, #20]
 800a19a:	1bed      	subs	r5, r5, r7
 800a19c:	60a5      	str	r5, [r4, #8]
 800a19e:	454e      	cmp	r6, r9
 800a1a0:	d900      	bls.n	800a1a4 <__ssputs_r+0x84>
 800a1a2:	464e      	mov	r6, r9
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	4641      	mov	r1, r8
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	f000 f92d 	bl	800a408 <memmove>
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	1b9b      	subs	r3, r3, r6
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	441e      	add	r6, r3
 800a1ba:	6026      	str	r6, [r4, #0]
 800a1bc:	e7dc      	b.n	800a178 <__ssputs_r+0x58>
 800a1be:	462a      	mov	r2, r5
 800a1c0:	f000 f93d 	bl	800a43e <_realloc_r>
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d1e2      	bne.n	800a190 <__ssputs_r+0x70>
 800a1ca:	6921      	ldr	r1, [r4, #16]
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	f7ff ff01 	bl	8009fd4 <_free_r>
 800a1d2:	e7c8      	b.n	800a166 <__ssputs_r+0x46>

0800a1d4 <_svfiprintf_r>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	461d      	mov	r5, r3
 800a1da:	898b      	ldrh	r3, [r1, #12]
 800a1dc:	b09d      	sub	sp, #116	; 0x74
 800a1de:	061f      	lsls	r7, r3, #24
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	d50f      	bpl.n	800a208 <_svfiprintf_r+0x34>
 800a1e8:	690b      	ldr	r3, [r1, #16]
 800a1ea:	b96b      	cbnz	r3, 800a208 <_svfiprintf_r+0x34>
 800a1ec:	2140      	movs	r1, #64	; 0x40
 800a1ee:	f7ff ff3d 	bl	800a06c <_malloc_r>
 800a1f2:	6020      	str	r0, [r4, #0]
 800a1f4:	6120      	str	r0, [r4, #16]
 800a1f6:	b928      	cbnz	r0, 800a204 <_svfiprintf_r+0x30>
 800a1f8:	230c      	movs	r3, #12
 800a1fa:	f8c8 3000 	str.w	r3, [r8]
 800a1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a202:	e0c8      	b.n	800a396 <_svfiprintf_r+0x1c2>
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	6163      	str	r3, [r4, #20]
 800a208:	2300      	movs	r3, #0
 800a20a:	9309      	str	r3, [sp, #36]	; 0x24
 800a20c:	2320      	movs	r3, #32
 800a20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a212:	2330      	movs	r3, #48	; 0x30
 800a214:	f04f 0b01 	mov.w	fp, #1
 800a218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a21c:	9503      	str	r5, [sp, #12]
 800a21e:	4637      	mov	r7, r6
 800a220:	463d      	mov	r5, r7
 800a222:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a226:	b10b      	cbz	r3, 800a22c <_svfiprintf_r+0x58>
 800a228:	2b25      	cmp	r3, #37	; 0x25
 800a22a:	d13e      	bne.n	800a2aa <_svfiprintf_r+0xd6>
 800a22c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a230:	d00b      	beq.n	800a24a <_svfiprintf_r+0x76>
 800a232:	4653      	mov	r3, sl
 800a234:	4632      	mov	r2, r6
 800a236:	4621      	mov	r1, r4
 800a238:	4640      	mov	r0, r8
 800a23a:	f7ff ff71 	bl	800a120 <__ssputs_r>
 800a23e:	3001      	adds	r0, #1
 800a240:	f000 80a4 	beq.w	800a38c <_svfiprintf_r+0x1b8>
 800a244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a246:	4453      	add	r3, sl
 800a248:	9309      	str	r3, [sp, #36]	; 0x24
 800a24a:	783b      	ldrb	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 809d 	beq.w	800a38c <_svfiprintf_r+0x1b8>
 800a252:	2300      	movs	r3, #0
 800a254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	9307      	str	r3, [sp, #28]
 800a260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a264:	931a      	str	r3, [sp, #104]	; 0x68
 800a266:	462f      	mov	r7, r5
 800a268:	2205      	movs	r2, #5
 800a26a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a26e:	4850      	ldr	r0, [pc, #320]	; (800a3b0 <_svfiprintf_r+0x1dc>)
 800a270:	f7ff fbac 	bl	80099cc <memchr>
 800a274:	9b04      	ldr	r3, [sp, #16]
 800a276:	b9d0      	cbnz	r0, 800a2ae <_svfiprintf_r+0xda>
 800a278:	06d9      	lsls	r1, r3, #27
 800a27a:	bf44      	itt	mi
 800a27c:	2220      	movmi	r2, #32
 800a27e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a282:	071a      	lsls	r2, r3, #28
 800a284:	bf44      	itt	mi
 800a286:	222b      	movmi	r2, #43	; 0x2b
 800a288:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a28c:	782a      	ldrb	r2, [r5, #0]
 800a28e:	2a2a      	cmp	r2, #42	; 0x2a
 800a290:	d015      	beq.n	800a2be <_svfiprintf_r+0xea>
 800a292:	462f      	mov	r7, r5
 800a294:	2000      	movs	r0, #0
 800a296:	250a      	movs	r5, #10
 800a298:	9a07      	ldr	r2, [sp, #28]
 800a29a:	4639      	mov	r1, r7
 800a29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2a0:	3b30      	subs	r3, #48	; 0x30
 800a2a2:	2b09      	cmp	r3, #9
 800a2a4:	d94d      	bls.n	800a342 <_svfiprintf_r+0x16e>
 800a2a6:	b1b8      	cbz	r0, 800a2d8 <_svfiprintf_r+0x104>
 800a2a8:	e00f      	b.n	800a2ca <_svfiprintf_r+0xf6>
 800a2aa:	462f      	mov	r7, r5
 800a2ac:	e7b8      	b.n	800a220 <_svfiprintf_r+0x4c>
 800a2ae:	4a40      	ldr	r2, [pc, #256]	; (800a3b0 <_svfiprintf_r+0x1dc>)
 800a2b0:	463d      	mov	r5, r7
 800a2b2:	1a80      	subs	r0, r0, r2
 800a2b4:	fa0b f000 	lsl.w	r0, fp, r0
 800a2b8:	4318      	orrs	r0, r3
 800a2ba:	9004      	str	r0, [sp, #16]
 800a2bc:	e7d3      	b.n	800a266 <_svfiprintf_r+0x92>
 800a2be:	9a03      	ldr	r2, [sp, #12]
 800a2c0:	1d11      	adds	r1, r2, #4
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	9103      	str	r1, [sp, #12]
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	db01      	blt.n	800a2ce <_svfiprintf_r+0xfa>
 800a2ca:	9207      	str	r2, [sp, #28]
 800a2cc:	e004      	b.n	800a2d8 <_svfiprintf_r+0x104>
 800a2ce:	4252      	negs	r2, r2
 800a2d0:	f043 0302 	orr.w	r3, r3, #2
 800a2d4:	9207      	str	r2, [sp, #28]
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	783b      	ldrb	r3, [r7, #0]
 800a2da:	2b2e      	cmp	r3, #46	; 0x2e
 800a2dc:	d10c      	bne.n	800a2f8 <_svfiprintf_r+0x124>
 800a2de:	787b      	ldrb	r3, [r7, #1]
 800a2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e2:	d133      	bne.n	800a34c <_svfiprintf_r+0x178>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	3702      	adds	r7, #2
 800a2e8:	1d1a      	adds	r2, r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	9203      	str	r2, [sp, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bfb8      	it	lt
 800a2f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2f6:	9305      	str	r3, [sp, #20]
 800a2f8:	4d2e      	ldr	r5, [pc, #184]	; (800a3b4 <_svfiprintf_r+0x1e0>)
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	7839      	ldrb	r1, [r7, #0]
 800a2fe:	4628      	mov	r0, r5
 800a300:	f7ff fb64 	bl	80099cc <memchr>
 800a304:	b138      	cbz	r0, 800a316 <_svfiprintf_r+0x142>
 800a306:	2340      	movs	r3, #64	; 0x40
 800a308:	1b40      	subs	r0, r0, r5
 800a30a:	fa03 f000 	lsl.w	r0, r3, r0
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	3701      	adds	r7, #1
 800a312:	4303      	orrs	r3, r0
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	7839      	ldrb	r1, [r7, #0]
 800a318:	2206      	movs	r2, #6
 800a31a:	4827      	ldr	r0, [pc, #156]	; (800a3b8 <_svfiprintf_r+0x1e4>)
 800a31c:	1c7e      	adds	r6, r7, #1
 800a31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a322:	f7ff fb53 	bl	80099cc <memchr>
 800a326:	2800      	cmp	r0, #0
 800a328:	d038      	beq.n	800a39c <_svfiprintf_r+0x1c8>
 800a32a:	4b24      	ldr	r3, [pc, #144]	; (800a3bc <_svfiprintf_r+0x1e8>)
 800a32c:	bb13      	cbnz	r3, 800a374 <_svfiprintf_r+0x1a0>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	3307      	adds	r3, #7
 800a332:	f023 0307 	bic.w	r3, r3, #7
 800a336:	3308      	adds	r3, #8
 800a338:	9303      	str	r3, [sp, #12]
 800a33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33c:	444b      	add	r3, r9
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	e76d      	b.n	800a21e <_svfiprintf_r+0x4a>
 800a342:	fb05 3202 	mla	r2, r5, r2, r3
 800a346:	2001      	movs	r0, #1
 800a348:	460f      	mov	r7, r1
 800a34a:	e7a6      	b.n	800a29a <_svfiprintf_r+0xc6>
 800a34c:	2300      	movs	r3, #0
 800a34e:	250a      	movs	r5, #10
 800a350:	4619      	mov	r1, r3
 800a352:	3701      	adds	r7, #1
 800a354:	9305      	str	r3, [sp, #20]
 800a356:	4638      	mov	r0, r7
 800a358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a35c:	3a30      	subs	r2, #48	; 0x30
 800a35e:	2a09      	cmp	r2, #9
 800a360:	d903      	bls.n	800a36a <_svfiprintf_r+0x196>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0c8      	beq.n	800a2f8 <_svfiprintf_r+0x124>
 800a366:	9105      	str	r1, [sp, #20]
 800a368:	e7c6      	b.n	800a2f8 <_svfiprintf_r+0x124>
 800a36a:	fb05 2101 	mla	r1, r5, r1, r2
 800a36e:	2301      	movs	r3, #1
 800a370:	4607      	mov	r7, r0
 800a372:	e7f0      	b.n	800a356 <_svfiprintf_r+0x182>
 800a374:	ab03      	add	r3, sp, #12
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4622      	mov	r2, r4
 800a37a:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <_svfiprintf_r+0x1ec>)
 800a37c:	a904      	add	r1, sp, #16
 800a37e:	4640      	mov	r0, r8
 800a380:	f7fe f8ec 	bl	800855c <_printf_float>
 800a384:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a388:	4681      	mov	r9, r0
 800a38a:	d1d6      	bne.n	800a33a <_svfiprintf_r+0x166>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	065b      	lsls	r3, r3, #25
 800a390:	f53f af35 	bmi.w	800a1fe <_svfiprintf_r+0x2a>
 800a394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a396:	b01d      	add	sp, #116	; 0x74
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <_svfiprintf_r+0x1ec>)
 800a3a4:	a904      	add	r1, sp, #16
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7fe fb84 	bl	8008ab4 <_printf_i>
 800a3ac:	e7ea      	b.n	800a384 <_svfiprintf_r+0x1b0>
 800a3ae:	bf00      	nop
 800a3b0:	0800bee4 	.word	0x0800bee4
 800a3b4:	0800beea 	.word	0x0800beea
 800a3b8:	0800beee 	.word	0x0800beee
 800a3bc:	0800855d 	.word	0x0800855d
 800a3c0:	0800a121 	.word	0x0800a121

0800a3c4 <_sbrk_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4c05      	ldr	r4, [pc, #20]	; (800a3e0 <_sbrk_r+0x1c>)
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	f7fa f85c 	bl	800448c <_sbrk>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_sbrk_r+0x1a>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_sbrk_r+0x1a>
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20000798 	.word	0x20000798

0800a3e4 <__ascii_mbtowc>:
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	b901      	cbnz	r1, 800a3ea <__ascii_mbtowc+0x6>
 800a3e8:	a901      	add	r1, sp, #4
 800a3ea:	b142      	cbz	r2, 800a3fe <__ascii_mbtowc+0x1a>
 800a3ec:	b14b      	cbz	r3, 800a402 <__ascii_mbtowc+0x1e>
 800a3ee:	7813      	ldrb	r3, [r2, #0]
 800a3f0:	600b      	str	r3, [r1, #0]
 800a3f2:	7812      	ldrb	r2, [r2, #0]
 800a3f4:	1c10      	adds	r0, r2, #0
 800a3f6:	bf18      	it	ne
 800a3f8:	2001      	movne	r0, #1
 800a3fa:	b002      	add	sp, #8
 800a3fc:	4770      	bx	lr
 800a3fe:	4610      	mov	r0, r2
 800a400:	e7fb      	b.n	800a3fa <__ascii_mbtowc+0x16>
 800a402:	f06f 0001 	mvn.w	r0, #1
 800a406:	e7f8      	b.n	800a3fa <__ascii_mbtowc+0x16>

0800a408 <memmove>:
 800a408:	4288      	cmp	r0, r1
 800a40a:	b510      	push	{r4, lr}
 800a40c:	eb01 0302 	add.w	r3, r1, r2
 800a410:	d807      	bhi.n	800a422 <memmove+0x1a>
 800a412:	1e42      	subs	r2, r0, #1
 800a414:	4299      	cmp	r1, r3
 800a416:	d00a      	beq.n	800a42e <memmove+0x26>
 800a418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a41c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a420:	e7f8      	b.n	800a414 <memmove+0xc>
 800a422:	4283      	cmp	r3, r0
 800a424:	d9f5      	bls.n	800a412 <memmove+0xa>
 800a426:	1881      	adds	r1, r0, r2
 800a428:	1ad2      	subs	r2, r2, r3
 800a42a:	42d3      	cmn	r3, r2
 800a42c:	d100      	bne.n	800a430 <memmove+0x28>
 800a42e:	bd10      	pop	{r4, pc}
 800a430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a434:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a438:	e7f7      	b.n	800a42a <memmove+0x22>

0800a43a <__malloc_lock>:
 800a43a:	4770      	bx	lr

0800a43c <__malloc_unlock>:
 800a43c:	4770      	bx	lr

0800a43e <_realloc_r>:
 800a43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a440:	4607      	mov	r7, r0
 800a442:	4614      	mov	r4, r2
 800a444:	460e      	mov	r6, r1
 800a446:	b921      	cbnz	r1, 800a452 <_realloc_r+0x14>
 800a448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a44c:	4611      	mov	r1, r2
 800a44e:	f7ff be0d 	b.w	800a06c <_malloc_r>
 800a452:	b922      	cbnz	r2, 800a45e <_realloc_r+0x20>
 800a454:	f7ff fdbe 	bl	8009fd4 <_free_r>
 800a458:	4625      	mov	r5, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45e:	f000 f821 	bl	800a4a4 <_malloc_usable_size_r>
 800a462:	42a0      	cmp	r0, r4
 800a464:	d20f      	bcs.n	800a486 <_realloc_r+0x48>
 800a466:	4621      	mov	r1, r4
 800a468:	4638      	mov	r0, r7
 800a46a:	f7ff fdff 	bl	800a06c <_malloc_r>
 800a46e:	4605      	mov	r5, r0
 800a470:	2800      	cmp	r0, #0
 800a472:	d0f2      	beq.n	800a45a <_realloc_r+0x1c>
 800a474:	4631      	mov	r1, r6
 800a476:	4622      	mov	r2, r4
 800a478:	f7ff fab6 	bl	80099e8 <memcpy>
 800a47c:	4631      	mov	r1, r6
 800a47e:	4638      	mov	r0, r7
 800a480:	f7ff fda8 	bl	8009fd4 <_free_r>
 800a484:	e7e9      	b.n	800a45a <_realloc_r+0x1c>
 800a486:	4635      	mov	r5, r6
 800a488:	e7e7      	b.n	800a45a <_realloc_r+0x1c>

0800a48a <__ascii_wctomb>:
 800a48a:	b149      	cbz	r1, 800a4a0 <__ascii_wctomb+0x16>
 800a48c:	2aff      	cmp	r2, #255	; 0xff
 800a48e:	bf8b      	itete	hi
 800a490:	238a      	movhi	r3, #138	; 0x8a
 800a492:	700a      	strbls	r2, [r1, #0]
 800a494:	6003      	strhi	r3, [r0, #0]
 800a496:	2001      	movls	r0, #1
 800a498:	bf88      	it	hi
 800a49a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a49e:	4770      	bx	lr
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	4770      	bx	lr

0800a4a4 <_malloc_usable_size_r>:
 800a4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a8:	1f18      	subs	r0, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfbc      	itt	lt
 800a4ae:	580b      	ldrlt	r3, [r1, r0]
 800a4b0:	18c0      	addlt	r0, r0, r3
 800a4b2:	4770      	bx	lr

0800a4b4 <sin>:
 800a4b4:	b530      	push	{r4, r5, lr}
 800a4b6:	4a1a      	ldr	r2, [pc, #104]	; (800a520 <sin+0x6c>)
 800a4b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	b087      	sub	sp, #28
 800a4c0:	dc06      	bgt.n	800a4d0 <sin+0x1c>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f001 f975 	bl	800b7b8 <__kernel_sin>
 800a4ce:	e006      	b.n	800a4de <sin+0x2a>
 800a4d0:	4a14      	ldr	r2, [pc, #80]	; (800a524 <sin+0x70>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	dd05      	ble.n	800a4e2 <sin+0x2e>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	f7f5 fe45 	bl	8000168 <__aeabi_dsub>
 800a4de:	b007      	add	sp, #28
 800a4e0:	bd30      	pop	{r4, r5, pc}
 800a4e2:	aa02      	add	r2, sp, #8
 800a4e4:	f000 fac4 	bl	800aa70 <__ieee754_rem_pio2>
 800a4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ec:	f000 0403 	and.w	r4, r0, #3
 800a4f0:	2c01      	cmp	r4, #1
 800a4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f6:	d005      	beq.n	800a504 <sin+0x50>
 800a4f8:	2c02      	cmp	r4, #2
 800a4fa:	d006      	beq.n	800a50a <sin+0x56>
 800a4fc:	b964      	cbnz	r4, 800a518 <sin+0x64>
 800a4fe:	2401      	movs	r4, #1
 800a500:	9400      	str	r4, [sp, #0]
 800a502:	e7e2      	b.n	800a4ca <sin+0x16>
 800a504:	f000 fd50 	bl	800afa8 <__kernel_cos>
 800a508:	e7e9      	b.n	800a4de <sin+0x2a>
 800a50a:	2401      	movs	r4, #1
 800a50c:	9400      	str	r4, [sp, #0]
 800a50e:	f001 f953 	bl	800b7b8 <__kernel_sin>
 800a512:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a516:	e7e2      	b.n	800a4de <sin+0x2a>
 800a518:	f000 fd46 	bl	800afa8 <__kernel_cos>
 800a51c:	e7f9      	b.n	800a512 <sin+0x5e>
 800a51e:	bf00      	nop
 800a520:	3fe921fb 	.word	0x3fe921fb
 800a524:	7fefffff 	.word	0x7fefffff

0800a528 <asin>:
 800a528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a52c:	b08b      	sub	sp, #44	; 0x2c
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	f000 f8a1 	bl	800a678 <__ieee754_asin>
 800a536:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a5cc <asin+0xa4>
 800a53a:	4606      	mov	r6, r0
 800a53c:	f998 3000 	ldrsb.w	r3, [r8]
 800a540:	460f      	mov	r7, r1
 800a542:	3301      	adds	r3, #1
 800a544:	d036      	beq.n	800a5b4 <asin+0x8c>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 fa5d 	bl	8000a0c <__aeabi_dcmpun>
 800a552:	4681      	mov	r9, r0
 800a554:	2800      	cmp	r0, #0
 800a556:	d12d      	bne.n	800a5b4 <asin+0x8c>
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f001 f9e2 	bl	800b924 <fabs>
 800a560:	2200      	movs	r2, #0
 800a562:	4b17      	ldr	r3, [pc, #92]	; (800a5c0 <asin+0x98>)
 800a564:	f7f6 fa48 	bl	80009f8 <__aeabi_dcmpgt>
 800a568:	b320      	cbz	r0, 800a5b4 <asin+0x8c>
 800a56a:	2301      	movs	r3, #1
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	4b15      	ldr	r3, [pc, #84]	; (800a5c4 <asin+0x9c>)
 800a570:	4815      	ldr	r0, [pc, #84]	; (800a5c8 <asin+0xa0>)
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	f8cd 9020 	str.w	r9, [sp, #32]
 800a578:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a57c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a580:	f001 fa5c 	bl	800ba3c <nan>
 800a584:	f998 3000 	ldrsb.w	r3, [r8]
 800a588:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d104      	bne.n	800a59a <asin+0x72>
 800a590:	f7fd ff20 	bl	80083d4 <__errno>
 800a594:	2321      	movs	r3, #33	; 0x21
 800a596:	6003      	str	r3, [r0, #0]
 800a598:	e004      	b.n	800a5a4 <asin+0x7c>
 800a59a:	4668      	mov	r0, sp
 800a59c:	f001 fa4c 	bl	800ba38 <matherr>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d0f5      	beq.n	800a590 <asin+0x68>
 800a5a4:	9b08      	ldr	r3, [sp, #32]
 800a5a6:	b11b      	cbz	r3, 800a5b0 <asin+0x88>
 800a5a8:	f7fd ff14 	bl	80083d4 <__errno>
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	b00b      	add	sp, #44	; 0x2c
 800a5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5be:	bf00      	nop
 800a5c0:	3ff00000 	.word	0x3ff00000
 800a5c4:	0800c000 	.word	0x0800c000
 800a5c8:	0800bee9 	.word	0x0800bee9
 800a5cc:	200001e0 	.word	0x200001e0

0800a5d0 <sqrt>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	b08b      	sub	sp, #44	; 0x2c
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	460d      	mov	r5, r1
 800a5da:	f000 fc39 	bl	800ae50 <__ieee754_sqrt>
 800a5de:	4b24      	ldr	r3, [pc, #144]	; (800a670 <sqrt+0xa0>)
 800a5e0:	4680      	mov	r8, r0
 800a5e2:	f993 a000 	ldrsb.w	sl, [r3]
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a5ec:	d02b      	beq.n	800a646 <sqrt+0x76>
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7f6 fa09 	bl	8000a0c <__aeabi_dcmpun>
 800a5fa:	4683      	mov	fp, r0
 800a5fc:	bb18      	cbnz	r0, 800a646 <sqrt+0x76>
 800a5fe:	2600      	movs	r6, #0
 800a600:	2700      	movs	r7, #0
 800a602:	4632      	mov	r2, r6
 800a604:	463b      	mov	r3, r7
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 f9d7 	bl	80009bc <__aeabi_dcmplt>
 800a60e:	b1d0      	cbz	r0, 800a646 <sqrt+0x76>
 800a610:	2301      	movs	r3, #1
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	4b17      	ldr	r3, [pc, #92]	; (800a674 <sqrt+0xa4>)
 800a616:	f8cd b020 	str.w	fp, [sp, #32]
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a620:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d112      	bne.n	800a650 <sqrt+0x80>
 800a62a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a62e:	4668      	mov	r0, sp
 800a630:	f001 fa02 	bl	800ba38 <matherr>
 800a634:	b1b8      	cbz	r0, 800a666 <sqrt+0x96>
 800a636:	9b08      	ldr	r3, [sp, #32]
 800a638:	b11b      	cbz	r3, 800a642 <sqrt+0x72>
 800a63a:	f7fd fecb 	bl	80083d4 <__errno>
 800a63e:	9b08      	ldr	r3, [sp, #32]
 800a640:	6003      	str	r3, [r0, #0]
 800a642:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	b00b      	add	sp, #44	; 0x2c
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	4632      	mov	r2, r6
 800a652:	463b      	mov	r3, r7
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f6 f868 	bl	800072c <__aeabi_ddiv>
 800a65c:	f1ba 0f02 	cmp.w	sl, #2
 800a660:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a664:	d1e3      	bne.n	800a62e <sqrt+0x5e>
 800a666:	f7fd feb5 	bl	80083d4 <__errno>
 800a66a:	2321      	movs	r3, #33	; 0x21
 800a66c:	6003      	str	r3, [r0, #0]
 800a66e:	e7e2      	b.n	800a636 <sqrt+0x66>
 800a670:	200001e0 	.word	0x200001e0
 800a674:	0800c005 	.word	0x0800c005

0800a678 <__ieee754_asin>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	4bc4      	ldr	r3, [pc, #784]	; (800a990 <__ieee754_asin+0x318>)
 800a67e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a682:	b087      	sub	sp, #28
 800a684:	429f      	cmp	r7, r3
 800a686:	4604      	mov	r4, r0
 800a688:	460d      	mov	r5, r1
 800a68a:	9103      	str	r1, [sp, #12]
 800a68c:	dd2a      	ble.n	800a6e4 <__ieee754_asin+0x6c>
 800a68e:	4603      	mov	r3, r0
 800a690:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a694:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a698:	433b      	orrs	r3, r7
 800a69a:	d114      	bne.n	800a6c6 <__ieee754_asin+0x4e>
 800a69c:	a3a2      	add	r3, pc, #648	; (adr r3, 800a928 <__ieee754_asin+0x2b0>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 ff19 	bl	80004d8 <__aeabi_dmul>
 800a6a6:	a3a2      	add	r3, pc, #648	; (adr r3, 800a930 <__ieee754_asin+0x2b8>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 ff10 	bl	80004d8 <__aeabi_dmul>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f7f5 fd54 	bl	800016c <__adddf3>
 800a6c4:	e007      	b.n	800a6d6 <__ieee754_asin+0x5e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	f7f5 fd4d 	bl	8000168 <__aeabi_dsub>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	f7f6 f82b 	bl	800072c <__aeabi_ddiv>
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	460d      	mov	r5, r1
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	b007      	add	sp, #28
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	4bab      	ldr	r3, [pc, #684]	; (800a994 <__ieee754_asin+0x31c>)
 800a6e6:	429f      	cmp	r7, r3
 800a6e8:	dc0e      	bgt.n	800a708 <__ieee754_asin+0x90>
 800a6ea:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a6ee:	f280 80ab 	bge.w	800a848 <__ieee754_asin+0x1d0>
 800a6f2:	a391      	add	r3, pc, #580	; (adr r3, 800a938 <__ieee754_asin+0x2c0>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f7f5 fd38 	bl	800016c <__adddf3>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4ba6      	ldr	r3, [pc, #664]	; (800a998 <__ieee754_asin+0x320>)
 800a700:	f7f6 f97a 	bl	80009f8 <__aeabi_dcmpgt>
 800a704:	2800      	cmp	r0, #0
 800a706:	d1e8      	bne.n	800a6da <__ieee754_asin+0x62>
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	f001 f90a 	bl	800b924 <fabs>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	2000      	movs	r0, #0
 800a716:	49a0      	ldr	r1, [pc, #640]	; (800a998 <__ieee754_asin+0x320>)
 800a718:	f7f5 fd26 	bl	8000168 <__aeabi_dsub>
 800a71c:	2200      	movs	r2, #0
 800a71e:	4b9f      	ldr	r3, [pc, #636]	; (800a99c <__ieee754_asin+0x324>)
 800a720:	f7f5 feda 	bl	80004d8 <__aeabi_dmul>
 800a724:	a386      	add	r3, pc, #536	; (adr r3, 800a940 <__ieee754_asin+0x2c8>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	4604      	mov	r4, r0
 800a72c:	460d      	mov	r5, r1
 800a72e:	f7f5 fed3 	bl	80004d8 <__aeabi_dmul>
 800a732:	a385      	add	r3, pc, #532	; (adr r3, 800a948 <__ieee754_asin+0x2d0>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fd18 	bl	800016c <__adddf3>
 800a73c:	4622      	mov	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f7f5 feca 	bl	80004d8 <__aeabi_dmul>
 800a744:	a382      	add	r3, pc, #520	; (adr r3, 800a950 <__ieee754_asin+0x2d8>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd0d 	bl	8000168 <__aeabi_dsub>
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	f7f5 fec1 	bl	80004d8 <__aeabi_dmul>
 800a756:	a380      	add	r3, pc, #512	; (adr r3, 800a958 <__ieee754_asin+0x2e0>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd06 	bl	800016c <__adddf3>
 800a760:	4622      	mov	r2, r4
 800a762:	462b      	mov	r3, r5
 800a764:	f7f5 feb8 	bl	80004d8 <__aeabi_dmul>
 800a768:	a37d      	add	r3, pc, #500	; (adr r3, 800a960 <__ieee754_asin+0x2e8>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fcfb 	bl	8000168 <__aeabi_dsub>
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	f7f5 feaf 	bl	80004d8 <__aeabi_dmul>
 800a77a:	a37b      	add	r3, pc, #492	; (adr r3, 800a968 <__ieee754_asin+0x2f0>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fcf4 	bl	800016c <__adddf3>
 800a784:	4622      	mov	r2, r4
 800a786:	462b      	mov	r3, r5
 800a788:	f7f5 fea6 	bl	80004d8 <__aeabi_dmul>
 800a78c:	a378      	add	r3, pc, #480	; (adr r3, 800a970 <__ieee754_asin+0x2f8>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	4680      	mov	r8, r0
 800a794:	4689      	mov	r9, r1
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 fe9d 	bl	80004d8 <__aeabi_dmul>
 800a79e:	a376      	add	r3, pc, #472	; (adr r3, 800a978 <__ieee754_asin+0x300>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fce0 	bl	8000168 <__aeabi_dsub>
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	f7f5 fe94 	bl	80004d8 <__aeabi_dmul>
 800a7b0:	a373      	add	r3, pc, #460	; (adr r3, 800a980 <__ieee754_asin+0x308>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 fcd9 	bl	800016c <__adddf3>
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	462b      	mov	r3, r5
 800a7be:	f7f5 fe8b 	bl	80004d8 <__aeabi_dmul>
 800a7c2:	a371      	add	r3, pc, #452	; (adr r3, 800a988 <__ieee754_asin+0x310>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fcce 	bl	8000168 <__aeabi_dsub>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f5 fe82 	bl	80004d8 <__aeabi_dmul>
 800a7d4:	4b70      	ldr	r3, [pc, #448]	; (800a998 <__ieee754_asin+0x320>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7f5 fcc8 	bl	800016c <__adddf3>
 800a7dc:	e9cd 0100 	strd	r0, r1, [sp]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f000 fb34 	bl	800ae50 <__ieee754_sqrt>
 800a7e8:	4b6d      	ldr	r3, [pc, #436]	; (800a9a0 <__ieee754_asin+0x328>)
 800a7ea:	4682      	mov	sl, r0
 800a7ec:	429f      	cmp	r7, r3
 800a7ee:	468b      	mov	fp, r1
 800a7f0:	f340 80d8 	ble.w	800a9a4 <__ieee754_asin+0x32c>
 800a7f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f5 ff96 	bl	800072c <__aeabi_ddiv>
 800a800:	4652      	mov	r2, sl
 800a802:	465b      	mov	r3, fp
 800a804:	f7f5 fe68 	bl	80004d8 <__aeabi_dmul>
 800a808:	4652      	mov	r2, sl
 800a80a:	465b      	mov	r3, fp
 800a80c:	f7f5 fcae 	bl	800016c <__adddf3>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	f7f5 fcaa 	bl	800016c <__adddf3>
 800a818:	a345      	add	r3, pc, #276	; (adr r3, 800a930 <__ieee754_asin+0x2b8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fca3 	bl	8000168 <__aeabi_dsub>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	a140      	add	r1, pc, #256	; (adr r1, 800a928 <__ieee754_asin+0x2b0>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	f7f5 fc9c 	bl	8000168 <__aeabi_dsub>
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	4604      	mov	r4, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfdc      	itt	le
 800a838:	4602      	movle	r2, r0
 800a83a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a83e:	460d      	mov	r5, r1
 800a840:	bfdc      	itt	le
 800a842:	4614      	movle	r4, r2
 800a844:	461d      	movle	r5, r3
 800a846:	e748      	b.n	800a6da <__ieee754_asin+0x62>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	f7f5 fe44 	bl	80004d8 <__aeabi_dmul>
 800a850:	a33b      	add	r3, pc, #236	; (adr r3, 800a940 <__ieee754_asin+0x2c8>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	4606      	mov	r6, r0
 800a858:	460f      	mov	r7, r1
 800a85a:	f7f5 fe3d 	bl	80004d8 <__aeabi_dmul>
 800a85e:	a33a      	add	r3, pc, #232	; (adr r3, 800a948 <__ieee754_asin+0x2d0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fc82 	bl	800016c <__adddf3>
 800a868:	4632      	mov	r2, r6
 800a86a:	463b      	mov	r3, r7
 800a86c:	f7f5 fe34 	bl	80004d8 <__aeabi_dmul>
 800a870:	a337      	add	r3, pc, #220	; (adr r3, 800a950 <__ieee754_asin+0x2d8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fc77 	bl	8000168 <__aeabi_dsub>
 800a87a:	4632      	mov	r2, r6
 800a87c:	463b      	mov	r3, r7
 800a87e:	f7f5 fe2b 	bl	80004d8 <__aeabi_dmul>
 800a882:	a335      	add	r3, pc, #212	; (adr r3, 800a958 <__ieee754_asin+0x2e0>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fc70 	bl	800016c <__adddf3>
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	f7f5 fe22 	bl	80004d8 <__aeabi_dmul>
 800a894:	a332      	add	r3, pc, #200	; (adr r3, 800a960 <__ieee754_asin+0x2e8>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fc65 	bl	8000168 <__aeabi_dsub>
 800a89e:	4632      	mov	r2, r6
 800a8a0:	463b      	mov	r3, r7
 800a8a2:	f7f5 fe19 	bl	80004d8 <__aeabi_dmul>
 800a8a6:	a330      	add	r3, pc, #192	; (adr r3, 800a968 <__ieee754_asin+0x2f0>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 fc5e 	bl	800016c <__adddf3>
 800a8b0:	4632      	mov	r2, r6
 800a8b2:	463b      	mov	r3, r7
 800a8b4:	f7f5 fe10 	bl	80004d8 <__aeabi_dmul>
 800a8b8:	a32d      	add	r3, pc, #180	; (adr r3, 800a970 <__ieee754_asin+0x2f8>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	4680      	mov	r8, r0
 800a8c0:	4689      	mov	r9, r1
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	f7f5 fe07 	bl	80004d8 <__aeabi_dmul>
 800a8ca:	a32b      	add	r3, pc, #172	; (adr r3, 800a978 <__ieee754_asin+0x300>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fc4a 	bl	8000168 <__aeabi_dsub>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f5 fdfe 	bl	80004d8 <__aeabi_dmul>
 800a8dc:	a328      	add	r3, pc, #160	; (adr r3, 800a980 <__ieee754_asin+0x308>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fc43 	bl	800016c <__adddf3>
 800a8e6:	4632      	mov	r2, r6
 800a8e8:	463b      	mov	r3, r7
 800a8ea:	f7f5 fdf5 	bl	80004d8 <__aeabi_dmul>
 800a8ee:	a326      	add	r3, pc, #152	; (adr r3, 800a988 <__ieee754_asin+0x310>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f5 fc38 	bl	8000168 <__aeabi_dsub>
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	f7f5 fdec 	bl	80004d8 <__aeabi_dmul>
 800a900:	2200      	movs	r2, #0
 800a902:	4b25      	ldr	r3, [pc, #148]	; (800a998 <__ieee754_asin+0x320>)
 800a904:	f7f5 fc32 	bl	800016c <__adddf3>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	4640      	mov	r0, r8
 800a90e:	4649      	mov	r1, r9
 800a910:	f7f5 ff0c 	bl	800072c <__aeabi_ddiv>
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	f7f5 fdde 	bl	80004d8 <__aeabi_dmul>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	e6cc      	b.n	800a6c0 <__ieee754_asin+0x48>
 800a926:	bf00      	nop
 800a928:	54442d18 	.word	0x54442d18
 800a92c:	3ff921fb 	.word	0x3ff921fb
 800a930:	33145c07 	.word	0x33145c07
 800a934:	3c91a626 	.word	0x3c91a626
 800a938:	8800759c 	.word	0x8800759c
 800a93c:	7e37e43c 	.word	0x7e37e43c
 800a940:	0dfdf709 	.word	0x0dfdf709
 800a944:	3f023de1 	.word	0x3f023de1
 800a948:	7501b288 	.word	0x7501b288
 800a94c:	3f49efe0 	.word	0x3f49efe0
 800a950:	b5688f3b 	.word	0xb5688f3b
 800a954:	3fa48228 	.word	0x3fa48228
 800a958:	0e884455 	.word	0x0e884455
 800a95c:	3fc9c155 	.word	0x3fc9c155
 800a960:	03eb6f7d 	.word	0x03eb6f7d
 800a964:	3fd4d612 	.word	0x3fd4d612
 800a968:	55555555 	.word	0x55555555
 800a96c:	3fc55555 	.word	0x3fc55555
 800a970:	b12e9282 	.word	0xb12e9282
 800a974:	3fb3b8c5 	.word	0x3fb3b8c5
 800a978:	1b8d0159 	.word	0x1b8d0159
 800a97c:	3fe6066c 	.word	0x3fe6066c
 800a980:	9c598ac8 	.word	0x9c598ac8
 800a984:	40002ae5 	.word	0x40002ae5
 800a988:	1c8a2d4b 	.word	0x1c8a2d4b
 800a98c:	40033a27 	.word	0x40033a27
 800a990:	3fefffff 	.word	0x3fefffff
 800a994:	3fdfffff 	.word	0x3fdfffff
 800a998:	3ff00000 	.word	0x3ff00000
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	3fef3332 	.word	0x3fef3332
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	f7f5 fbdf 	bl	800016c <__adddf3>
 800a9ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 feb7 	bl	800072c <__aeabi_ddiv>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c6:	f7f5 fd87 	bl	80004d8 <__aeabi_dmul>
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4659      	mov	r1, fp
 800a9d8:	f7f5 fd7e 	bl	80004d8 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7f5 fbc0 	bl	8000168 <__aeabi_dsub>
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	465b      	mov	r3, fp
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	f7f5 fbba 	bl	800016c <__adddf3>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f5 fe94 	bl	800072c <__aeabi_ddiv>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	f7f5 fbb0 	bl	800016c <__adddf3>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	a113      	add	r1, pc, #76	; (adr r1, 800aa60 <__ieee754_asin+0x3e8>)
 800aa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa16:	f7f5 fba7 	bl	8000168 <__aeabi_dsub>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f5 fba1 	bl	8000168 <__aeabi_dsub>
 800aa26:	4632      	mov	r2, r6
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	465b      	mov	r3, fp
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f5 fb9b 	bl	800016c <__adddf3>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	a10b      	add	r1, pc, #44	; (adr r1, 800aa68 <__ieee754_asin+0x3f0>)
 800aa3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa40:	f7f5 fb92 	bl	8000168 <__aeabi_dsub>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f5 fb8c 	bl	8000168 <__aeabi_dsub>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	a104      	add	r1, pc, #16	; (adr r1, 800aa68 <__ieee754_asin+0x3f0>)
 800aa56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa5a:	e6e7      	b.n	800a82c <__ieee754_asin+0x1b4>
 800aa5c:	f3af 8000 	nop.w
 800aa60:	33145c07 	.word	0x33145c07
 800aa64:	3c91a626 	.word	0x3c91a626
 800aa68:	54442d18 	.word	0x54442d18
 800aa6c:	3fe921fb 	.word	0x3fe921fb

0800aa70 <__ieee754_rem_pio2>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	4614      	mov	r4, r2
 800aa76:	4ac2      	ldr	r2, [pc, #776]	; (800ad80 <__ieee754_rem_pio2+0x310>)
 800aa78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800aa7c:	4592      	cmp	sl, r2
 800aa7e:	b08d      	sub	sp, #52	; 0x34
 800aa80:	468b      	mov	fp, r1
 800aa82:	dc07      	bgt.n	800aa94 <__ieee754_rem_pio2+0x24>
 800aa84:	2200      	movs	r2, #0
 800aa86:	2300      	movs	r3, #0
 800aa88:	e9c4 0100 	strd	r0, r1, [r4]
 800aa8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aa90:	2500      	movs	r5, #0
 800aa92:	e023      	b.n	800aadc <__ieee754_rem_pio2+0x6c>
 800aa94:	4abb      	ldr	r2, [pc, #748]	; (800ad84 <__ieee754_rem_pio2+0x314>)
 800aa96:	4592      	cmp	sl, r2
 800aa98:	dc71      	bgt.n	800ab7e <__ieee754_rem_pio2+0x10e>
 800aa9a:	a3ab      	add	r3, pc, #684	; (adr r3, 800ad48 <__ieee754_rem_pio2+0x2d8>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	4db9      	ldr	r5, [pc, #740]	; (800ad88 <__ieee754_rem_pio2+0x318>)
 800aaa4:	dd36      	ble.n	800ab14 <__ieee754_rem_pio2+0xa4>
 800aaa6:	f7f5 fb5f 	bl	8000168 <__aeabi_dsub>
 800aaaa:	45aa      	cmp	sl, r5
 800aaac:	4606      	mov	r6, r0
 800aaae:	460f      	mov	r7, r1
 800aab0:	d018      	beq.n	800aae4 <__ieee754_rem_pio2+0x74>
 800aab2:	a3a7      	add	r3, pc, #668	; (adr r3, 800ad50 <__ieee754_rem_pio2+0x2e0>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fb56 	bl	8000168 <__aeabi_dsub>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4630      	mov	r0, r6
 800aac2:	e9c4 2300 	strd	r2, r3, [r4]
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f5 fb4e 	bl	8000168 <__aeabi_dsub>
 800aacc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ad50 <__ieee754_rem_pio2+0x2e0>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fb49 	bl	8000168 <__aeabi_dsub>
 800aad6:	2501      	movs	r5, #1
 800aad8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aadc:	4628      	mov	r0, r5
 800aade:	b00d      	add	sp, #52	; 0x34
 800aae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae4:	a39c      	add	r3, pc, #624	; (adr r3, 800ad58 <__ieee754_rem_pio2+0x2e8>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fb3d 	bl	8000168 <__aeabi_dsub>
 800aaee:	a39c      	add	r3, pc, #624	; (adr r3, 800ad60 <__ieee754_rem_pio2+0x2f0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	460f      	mov	r7, r1
 800aaf8:	f7f5 fb36 	bl	8000168 <__aeabi_dsub>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4630      	mov	r0, r6
 800ab02:	e9c4 2300 	strd	r2, r3, [r4]
 800ab06:	4639      	mov	r1, r7
 800ab08:	f7f5 fb2e 	bl	8000168 <__aeabi_dsub>
 800ab0c:	a394      	add	r3, pc, #592	; (adr r3, 800ad60 <__ieee754_rem_pio2+0x2f0>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	e7de      	b.n	800aad2 <__ieee754_rem_pio2+0x62>
 800ab14:	f7f5 fb2a 	bl	800016c <__adddf3>
 800ab18:	45aa      	cmp	sl, r5
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	d016      	beq.n	800ab4e <__ieee754_rem_pio2+0xde>
 800ab20:	a38b      	add	r3, pc, #556	; (adr r3, 800ad50 <__ieee754_rem_pio2+0x2e0>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fb21 	bl	800016c <__adddf3>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4630      	mov	r0, r6
 800ab30:	e9c4 2300 	strd	r2, r3, [r4]
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 fb17 	bl	8000168 <__aeabi_dsub>
 800ab3a:	a385      	add	r3, pc, #532	; (adr r3, 800ad50 <__ieee754_rem_pio2+0x2e0>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fb14 	bl	800016c <__adddf3>
 800ab44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ab48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab4c:	e7c6      	b.n	800aadc <__ieee754_rem_pio2+0x6c>
 800ab4e:	a382      	add	r3, pc, #520	; (adr r3, 800ad58 <__ieee754_rem_pio2+0x2e8>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	f7f5 fb0a 	bl	800016c <__adddf3>
 800ab58:	a381      	add	r3, pc, #516	; (adr r3, 800ad60 <__ieee754_rem_pio2+0x2f0>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	4606      	mov	r6, r0
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f5 fb03 	bl	800016c <__adddf3>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	e9c4 2300 	strd	r2, r3, [r4]
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 faf9 	bl	8000168 <__aeabi_dsub>
 800ab76:	a37a      	add	r3, pc, #488	; (adr r3, 800ad60 <__ieee754_rem_pio2+0x2f0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	e7e0      	b.n	800ab40 <__ieee754_rem_pio2+0xd0>
 800ab7e:	4a83      	ldr	r2, [pc, #524]	; (800ad8c <__ieee754_rem_pio2+0x31c>)
 800ab80:	4592      	cmp	sl, r2
 800ab82:	f300 80d2 	bgt.w	800ad2a <__ieee754_rem_pio2+0x2ba>
 800ab86:	f000 fecd 	bl	800b924 <fabs>
 800ab8a:	a377      	add	r3, pc, #476	; (adr r3, 800ad68 <__ieee754_rem_pio2+0x2f8>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	f7f5 fca0 	bl	80004d8 <__aeabi_dmul>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4b7d      	ldr	r3, [pc, #500]	; (800ad90 <__ieee754_rem_pio2+0x320>)
 800ab9c:	f7f5 fae6 	bl	800016c <__adddf3>
 800aba0:	f7f5 ff4a 	bl	8000a38 <__aeabi_d2iz>
 800aba4:	4605      	mov	r5, r0
 800aba6:	f7f5 fc2d 	bl	8000404 <__aeabi_i2d>
 800abaa:	a367      	add	r3, pc, #412	; (adr r3, 800ad48 <__ieee754_rem_pio2+0x2d8>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f7f5 fad2 	bl	8000168 <__aeabi_dsub>
 800abc4:	a362      	add	r3, pc, #392	; (adr r3, 800ad50 <__ieee754_rem_pio2+0x2e0>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd2:	f7f5 fc81 	bl	80004d8 <__aeabi_dmul>
 800abd6:	2d1f      	cmp	r5, #31
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	dc0e      	bgt.n	800abfc <__ieee754_rem_pio2+0x18c>
 800abde:	4b6d      	ldr	r3, [pc, #436]	; (800ad94 <__ieee754_rem_pio2+0x324>)
 800abe0:	1e6a      	subs	r2, r5, #1
 800abe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe6:	4553      	cmp	r3, sl
 800abe8:	d008      	beq.n	800abfc <__ieee754_rem_pio2+0x18c>
 800abea:	4642      	mov	r2, r8
 800abec:	464b      	mov	r3, r9
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fab9 	bl	8000168 <__aeabi_dsub>
 800abf6:	e9c4 0100 	strd	r0, r1, [r4]
 800abfa:	e011      	b.n	800ac20 <__ieee754_rem_pio2+0x1b0>
 800abfc:	464b      	mov	r3, r9
 800abfe:	4642      	mov	r2, r8
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ac0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac10:	ebaa 0303 	sub.w	r3, sl, r3
 800ac14:	2b10      	cmp	r3, #16
 800ac16:	dc1f      	bgt.n	800ac58 <__ieee754_rem_pio2+0x1e8>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac20:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ac24:	4630      	mov	r0, r6
 800ac26:	4653      	mov	r3, sl
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 fa9d 	bl	8000168 <__aeabi_dsub>
 800ac2e:	4642      	mov	r2, r8
 800ac30:	464b      	mov	r3, r9
 800ac32:	f7f5 fa99 	bl	8000168 <__aeabi_dsub>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	f1bb 0f00 	cmp.w	fp, #0
 800ac3e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac42:	f6bf af4b 	bge.w	800aadc <__ieee754_rem_pio2+0x6c>
 800ac46:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800ac4a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800ac4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ac52:	60e1      	str	r1, [r4, #12]
 800ac54:	426d      	negs	r5, r5
 800ac56:	e741      	b.n	800aadc <__ieee754_rem_pio2+0x6c>
 800ac58:	a33f      	add	r3, pc, #252	; (adr r3, 800ad58 <__ieee754_rem_pio2+0x2e8>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac62:	f7f5 fc39 	bl	80004d8 <__aeabi_dmul>
 800ac66:	4680      	mov	r8, r0
 800ac68:	4689      	mov	r9, r1
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4630      	mov	r0, r6
 800ac70:	4639      	mov	r1, r7
 800ac72:	f7f5 fa79 	bl	8000168 <__aeabi_dsub>
 800ac76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	f7f5 fa71 	bl	8000168 <__aeabi_dsub>
 800ac86:	4642      	mov	r2, r8
 800ac88:	464b      	mov	r3, r9
 800ac8a:	f7f5 fa6d 	bl	8000168 <__aeabi_dsub>
 800ac8e:	a334      	add	r3, pc, #208	; (adr r3, 800ad60 <__ieee754_rem_pio2+0x2f0>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	4606      	mov	r6, r0
 800ac96:	460f      	mov	r7, r1
 800ac98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9c:	f7f5 fc1c 	bl	80004d8 <__aeabi_dmul>
 800aca0:	4632      	mov	r2, r6
 800aca2:	463b      	mov	r3, r7
 800aca4:	f7f5 fa60 	bl	8000168 <__aeabi_dsub>
 800aca8:	460b      	mov	r3, r1
 800acaa:	4602      	mov	r2, r0
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acb4:	f7f5 fa58 	bl	8000168 <__aeabi_dsub>
 800acb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acbc:	ebaa 0a03 	sub.w	sl, sl, r3
 800acc0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800acc4:	dc06      	bgt.n	800acd4 <__ieee754_rem_pio2+0x264>
 800acc6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	e9c4 2300 	strd	r2, r3, [r4]
 800acd2:	e7a5      	b.n	800ac20 <__ieee754_rem_pio2+0x1b0>
 800acd4:	a326      	add	r3, pc, #152	; (adr r3, 800ad70 <__ieee754_rem_pio2+0x300>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acde:	f7f5 fbfb 	bl	80004d8 <__aeabi_dmul>
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acee:	f7f5 fa3b 	bl	8000168 <__aeabi_dsub>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4606      	mov	r6, r0
 800acf8:	460f      	mov	r7, r1
 800acfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acfe:	f7f5 fa33 	bl	8000168 <__aeabi_dsub>
 800ad02:	4642      	mov	r2, r8
 800ad04:	464b      	mov	r3, r9
 800ad06:	f7f5 fa2f 	bl	8000168 <__aeabi_dsub>
 800ad0a:	a31b      	add	r3, pc, #108	; (adr r3, 800ad78 <__ieee754_rem_pio2+0x308>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	4680      	mov	r8, r0
 800ad12:	4689      	mov	r9, r1
 800ad14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad18:	f7f5 fbde 	bl	80004d8 <__aeabi_dmul>
 800ad1c:	4642      	mov	r2, r8
 800ad1e:	464b      	mov	r3, r9
 800ad20:	f7f5 fa22 	bl	8000168 <__aeabi_dsub>
 800ad24:	4680      	mov	r8, r0
 800ad26:	4689      	mov	r9, r1
 800ad28:	e75f      	b.n	800abea <__ieee754_rem_pio2+0x17a>
 800ad2a:	4a1b      	ldr	r2, [pc, #108]	; (800ad98 <__ieee754_rem_pio2+0x328>)
 800ad2c:	4592      	cmp	sl, r2
 800ad2e:	dd35      	ble.n	800ad9c <__ieee754_rem_pio2+0x32c>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	f7f5 fa18 	bl	8000168 <__aeabi_dsub>
 800ad38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad3c:	e9c4 0100 	strd	r0, r1, [r4]
 800ad40:	e6a6      	b.n	800aa90 <__ieee754_rem_pio2+0x20>
 800ad42:	bf00      	nop
 800ad44:	f3af 8000 	nop.w
 800ad48:	54400000 	.word	0x54400000
 800ad4c:	3ff921fb 	.word	0x3ff921fb
 800ad50:	1a626331 	.word	0x1a626331
 800ad54:	3dd0b461 	.word	0x3dd0b461
 800ad58:	1a600000 	.word	0x1a600000
 800ad5c:	3dd0b461 	.word	0x3dd0b461
 800ad60:	2e037073 	.word	0x2e037073
 800ad64:	3ba3198a 	.word	0x3ba3198a
 800ad68:	6dc9c883 	.word	0x6dc9c883
 800ad6c:	3fe45f30 	.word	0x3fe45f30
 800ad70:	2e000000 	.word	0x2e000000
 800ad74:	3ba3198a 	.word	0x3ba3198a
 800ad78:	252049c1 	.word	0x252049c1
 800ad7c:	397b839a 	.word	0x397b839a
 800ad80:	3fe921fb 	.word	0x3fe921fb
 800ad84:	4002d97b 	.word	0x4002d97b
 800ad88:	3ff921fb 	.word	0x3ff921fb
 800ad8c:	413921fb 	.word	0x413921fb
 800ad90:	3fe00000 	.word	0x3fe00000
 800ad94:	0800c00c 	.word	0x0800c00c
 800ad98:	7fefffff 	.word	0x7fefffff
 800ad9c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800ada0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ada4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ada8:	460f      	mov	r7, r1
 800adaa:	4606      	mov	r6, r0
 800adac:	f7f5 fe44 	bl	8000a38 <__aeabi_d2iz>
 800adb0:	f7f5 fb28 	bl	8000404 <__aeabi_i2d>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adc0:	f7f5 f9d2 	bl	8000168 <__aeabi_dsub>
 800adc4:	2200      	movs	r2, #0
 800adc6:	4b20      	ldr	r3, [pc, #128]	; (800ae48 <__ieee754_rem_pio2+0x3d8>)
 800adc8:	f7f5 fb86 	bl	80004d8 <__aeabi_dmul>
 800adcc:	460f      	mov	r7, r1
 800adce:	4606      	mov	r6, r0
 800add0:	f7f5 fe32 	bl	8000a38 <__aeabi_d2iz>
 800add4:	f7f5 fb16 	bl	8000404 <__aeabi_i2d>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ade4:	f7f5 f9c0 	bl	8000168 <__aeabi_dsub>
 800ade8:	2200      	movs	r2, #0
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <__ieee754_rem_pio2+0x3d8>)
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	f04f 0803 	mov.w	r8, #3
 800adf4:	2600      	movs	r6, #0
 800adf6:	2700      	movs	r7, #0
 800adf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800adfc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ae00:	4632      	mov	r2, r6
 800ae02:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ae06:	463b      	mov	r3, r7
 800ae08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800ae0c:	f7f5 fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 800ae10:	b9b8      	cbnz	r0, 800ae42 <__ieee754_rem_pio2+0x3d2>
 800ae12:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <__ieee754_rem_pio2+0x3dc>)
 800ae14:	462a      	mov	r2, r5
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	2302      	movs	r3, #2
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	a806      	add	r0, sp, #24
 800ae20:	4643      	mov	r3, r8
 800ae22:	f000 f97f 	bl	800b124 <__kernel_rem_pio2>
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	f6bf ae56 	bge.w	800aadc <__ieee754_rem_pio2+0x6c>
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	68e3      	ldr	r3, [r4, #12]
 800ae3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ae3e:	60e3      	str	r3, [r4, #12]
 800ae40:	e708      	b.n	800ac54 <__ieee754_rem_pio2+0x1e4>
 800ae42:	46d0      	mov	r8, sl
 800ae44:	e7dc      	b.n	800ae00 <__ieee754_rem_pio2+0x390>
 800ae46:	bf00      	nop
 800ae48:	41700000 	.word	0x41700000
 800ae4c:	0800c08c 	.word	0x0800c08c

0800ae50 <__ieee754_sqrt>:
 800ae50:	4b54      	ldr	r3, [pc, #336]	; (800afa4 <__ieee754_sqrt+0x154>)
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	438b      	bics	r3, r1
 800ae58:	4606      	mov	r6, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	460a      	mov	r2, r1
 800ae5e:	460c      	mov	r4, r1
 800ae60:	d10f      	bne.n	800ae82 <__ieee754_sqrt+0x32>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	f7f5 fb37 	bl	80004d8 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 f97b 	bl	800016c <__adddf3>
 800ae76:	4606      	mov	r6, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae82:	2900      	cmp	r1, #0
 800ae84:	4607      	mov	r7, r0
 800ae86:	4603      	mov	r3, r0
 800ae88:	dc0e      	bgt.n	800aea8 <__ieee754_sqrt+0x58>
 800ae8a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ae8e:	ea5c 0707 	orrs.w	r7, ip, r7
 800ae92:	d0f2      	beq.n	800ae7a <__ieee754_sqrt+0x2a>
 800ae94:	b141      	cbz	r1, 800aea8 <__ieee754_sqrt+0x58>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	f7f5 f965 	bl	8000168 <__aeabi_dsub>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	f7f5 fc43 	bl	800072c <__aeabi_ddiv>
 800aea6:	e7e6      	b.n	800ae76 <__ieee754_sqrt+0x26>
 800aea8:	1512      	asrs	r2, r2, #20
 800aeaa:	d074      	beq.n	800af96 <__ieee754_sqrt+0x146>
 800aeac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aeb0:	07d5      	lsls	r5, r2, #31
 800aeb2:	f04f 0500 	mov.w	r5, #0
 800aeb6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aeba:	bf48      	it	mi
 800aebc:	0fd9      	lsrmi	r1, r3, #31
 800aebe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800aec2:	bf44      	itt	mi
 800aec4:	005b      	lslmi	r3, r3, #1
 800aec6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800aeca:	1051      	asrs	r1, r2, #1
 800aecc:	0fda      	lsrs	r2, r3, #31
 800aece:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800aed2:	4628      	mov	r0, r5
 800aed4:	2216      	movs	r2, #22
 800aed6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	1987      	adds	r7, r0, r6
 800aede:	42a7      	cmp	r7, r4
 800aee0:	bfde      	ittt	le
 800aee2:	19b8      	addle	r0, r7, r6
 800aee4:	1be4      	suble	r4, r4, r7
 800aee6:	19ad      	addle	r5, r5, r6
 800aee8:	0fdf      	lsrs	r7, r3, #31
 800aeea:	3a01      	subs	r2, #1
 800aeec:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800aef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aef4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aef8:	d1f0      	bne.n	800aedc <__ieee754_sqrt+0x8c>
 800aefa:	f04f 0c20 	mov.w	ip, #32
 800aefe:	4696      	mov	lr, r2
 800af00:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af04:	4284      	cmp	r4, r0
 800af06:	eb06 070e 	add.w	r7, r6, lr
 800af0a:	dc02      	bgt.n	800af12 <__ieee754_sqrt+0xc2>
 800af0c:	d112      	bne.n	800af34 <__ieee754_sqrt+0xe4>
 800af0e:	429f      	cmp	r7, r3
 800af10:	d810      	bhi.n	800af34 <__ieee754_sqrt+0xe4>
 800af12:	2f00      	cmp	r7, #0
 800af14:	eb07 0e06 	add.w	lr, r7, r6
 800af18:	da42      	bge.n	800afa0 <__ieee754_sqrt+0x150>
 800af1a:	f1be 0f00 	cmp.w	lr, #0
 800af1e:	db3f      	blt.n	800afa0 <__ieee754_sqrt+0x150>
 800af20:	f100 0801 	add.w	r8, r0, #1
 800af24:	1a24      	subs	r4, r4, r0
 800af26:	4640      	mov	r0, r8
 800af28:	429f      	cmp	r7, r3
 800af2a:	bf88      	it	hi
 800af2c:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800af30:	1bdb      	subs	r3, r3, r7
 800af32:	4432      	add	r2, r6
 800af34:	0064      	lsls	r4, r4, #1
 800af36:	f1bc 0c01 	subs.w	ip, ip, #1
 800af3a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800af3e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af46:	d1dd      	bne.n	800af04 <__ieee754_sqrt+0xb4>
 800af48:	4323      	orrs	r3, r4
 800af4a:	d006      	beq.n	800af5a <__ieee754_sqrt+0x10a>
 800af4c:	1c54      	adds	r4, r2, #1
 800af4e:	bf0b      	itete	eq
 800af50:	4662      	moveq	r2, ip
 800af52:	3201      	addne	r2, #1
 800af54:	3501      	addeq	r5, #1
 800af56:	f022 0201 	bicne.w	r2, r2, #1
 800af5a:	106b      	asrs	r3, r5, #1
 800af5c:	0852      	lsrs	r2, r2, #1
 800af5e:	07e8      	lsls	r0, r5, #31
 800af60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af68:	bf48      	it	mi
 800af6a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800af6e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800af72:	4616      	mov	r6, r2
 800af74:	e781      	b.n	800ae7a <__ieee754_sqrt+0x2a>
 800af76:	0adc      	lsrs	r4, r3, #11
 800af78:	3915      	subs	r1, #21
 800af7a:	055b      	lsls	r3, r3, #21
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	d0fa      	beq.n	800af76 <__ieee754_sqrt+0x126>
 800af80:	02e6      	lsls	r6, r4, #11
 800af82:	d50a      	bpl.n	800af9a <__ieee754_sqrt+0x14a>
 800af84:	f1c2 0020 	rsb	r0, r2, #32
 800af88:	fa23 f000 	lsr.w	r0, r3, r0
 800af8c:	1e55      	subs	r5, r2, #1
 800af8e:	4093      	lsls	r3, r2
 800af90:	4304      	orrs	r4, r0
 800af92:	1b4a      	subs	r2, r1, r5
 800af94:	e78a      	b.n	800aeac <__ieee754_sqrt+0x5c>
 800af96:	4611      	mov	r1, r2
 800af98:	e7f0      	b.n	800af7c <__ieee754_sqrt+0x12c>
 800af9a:	0064      	lsls	r4, r4, #1
 800af9c:	3201      	adds	r2, #1
 800af9e:	e7ef      	b.n	800af80 <__ieee754_sqrt+0x130>
 800afa0:	4680      	mov	r8, r0
 800afa2:	e7bf      	b.n	800af24 <__ieee754_sqrt+0xd4>
 800afa4:	7ff00000 	.word	0x7ff00000

0800afa8 <__kernel_cos>:
 800afa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800afb0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800afb4:	4680      	mov	r8, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	e9cd 2300 	strd	r2, r3, [sp]
 800afbc:	da04      	bge.n	800afc8 <__kernel_cos+0x20>
 800afbe:	f7f5 fd3b 	bl	8000a38 <__aeabi_d2iz>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f000 8086 	beq.w	800b0d4 <__kernel_cos+0x12c>
 800afc8:	4642      	mov	r2, r8
 800afca:	463b      	mov	r3, r7
 800afcc:	4640      	mov	r0, r8
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	2200      	movs	r2, #0
 800afd6:	4b4e      	ldr	r3, [pc, #312]	; (800b110 <__kernel_cos+0x168>)
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	f7f5 fa7c 	bl	80004d8 <__aeabi_dmul>
 800afe0:	a33f      	add	r3, pc, #252	; (adr r3, 800b0e0 <__kernel_cos+0x138>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	4682      	mov	sl, r0
 800afe8:	468b      	mov	fp, r1
 800afea:	4620      	mov	r0, r4
 800afec:	4629      	mov	r1, r5
 800afee:	f7f5 fa73 	bl	80004d8 <__aeabi_dmul>
 800aff2:	a33d      	add	r3, pc, #244	; (adr r3, 800b0e8 <__kernel_cos+0x140>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 f8b8 	bl	800016c <__adddf3>
 800affc:	4622      	mov	r2, r4
 800affe:	462b      	mov	r3, r5
 800b000:	f7f5 fa6a 	bl	80004d8 <__aeabi_dmul>
 800b004:	a33a      	add	r3, pc, #232	; (adr r3, 800b0f0 <__kernel_cos+0x148>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f8ad 	bl	8000168 <__aeabi_dsub>
 800b00e:	4622      	mov	r2, r4
 800b010:	462b      	mov	r3, r5
 800b012:	f7f5 fa61 	bl	80004d8 <__aeabi_dmul>
 800b016:	a338      	add	r3, pc, #224	; (adr r3, 800b0f8 <__kernel_cos+0x150>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 f8a6 	bl	800016c <__adddf3>
 800b020:	4622      	mov	r2, r4
 800b022:	462b      	mov	r3, r5
 800b024:	f7f5 fa58 	bl	80004d8 <__aeabi_dmul>
 800b028:	a335      	add	r3, pc, #212	; (adr r3, 800b100 <__kernel_cos+0x158>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 f89b 	bl	8000168 <__aeabi_dsub>
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	f7f5 fa4f 	bl	80004d8 <__aeabi_dmul>
 800b03a:	a333      	add	r3, pc, #204	; (adr r3, 800b108 <__kernel_cos+0x160>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 f894 	bl	800016c <__adddf3>
 800b044:	4622      	mov	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	f7f5 fa46 	bl	80004d8 <__aeabi_dmul>
 800b04c:	4622      	mov	r2, r4
 800b04e:	462b      	mov	r3, r5
 800b050:	f7f5 fa42 	bl	80004d8 <__aeabi_dmul>
 800b054:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	4640      	mov	r0, r8
 800b05e:	4639      	mov	r1, r7
 800b060:	f7f5 fa3a 	bl	80004d8 <__aeabi_dmul>
 800b064:	460b      	mov	r3, r1
 800b066:	4602      	mov	r2, r0
 800b068:	4629      	mov	r1, r5
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7f5 f87c 	bl	8000168 <__aeabi_dsub>
 800b070:	4b28      	ldr	r3, [pc, #160]	; (800b114 <__kernel_cos+0x16c>)
 800b072:	4680      	mov	r8, r0
 800b074:	429e      	cmp	r6, r3
 800b076:	4689      	mov	r9, r1
 800b078:	dc0e      	bgt.n	800b098 <__kernel_cos+0xf0>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4650      	mov	r0, sl
 800b080:	4659      	mov	r1, fp
 800b082:	f7f5 f871 	bl	8000168 <__aeabi_dsub>
 800b086:	4602      	mov	r2, r0
 800b088:	2000      	movs	r0, #0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4922      	ldr	r1, [pc, #136]	; (800b118 <__kernel_cos+0x170>)
 800b08e:	f7f5 f86b 	bl	8000168 <__aeabi_dsub>
 800b092:	b003      	add	sp, #12
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	2400      	movs	r4, #0
 800b09a:	4b20      	ldr	r3, [pc, #128]	; (800b11c <__kernel_cos+0x174>)
 800b09c:	4622      	mov	r2, r4
 800b09e:	429e      	cmp	r6, r3
 800b0a0:	bfcc      	ite	gt
 800b0a2:	4d1f      	ldrgt	r5, [pc, #124]	; (800b120 <__kernel_cos+0x178>)
 800b0a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	491a      	ldr	r1, [pc, #104]	; (800b118 <__kernel_cos+0x170>)
 800b0ae:	f7f5 f85b 	bl	8000168 <__aeabi_dsub>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460f      	mov	r7, r1
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	4650      	mov	r0, sl
 800b0bc:	4659      	mov	r1, fp
 800b0be:	f7f5 f853 	bl	8000168 <__aeabi_dsub>
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	f7f5 f84f 	bl	8000168 <__aeabi_dsub>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	e7dc      	b.n	800b08e <__kernel_cos+0xe6>
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4910      	ldr	r1, [pc, #64]	; (800b118 <__kernel_cos+0x170>)
 800b0d8:	e7db      	b.n	800b092 <__kernel_cos+0xea>
 800b0da:	bf00      	nop
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	be8838d4 	.word	0xbe8838d4
 800b0e4:	bda8fae9 	.word	0xbda8fae9
 800b0e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b0ec:	3e21ee9e 	.word	0x3e21ee9e
 800b0f0:	809c52ad 	.word	0x809c52ad
 800b0f4:	3e927e4f 	.word	0x3e927e4f
 800b0f8:	19cb1590 	.word	0x19cb1590
 800b0fc:	3efa01a0 	.word	0x3efa01a0
 800b100:	16c15177 	.word	0x16c15177
 800b104:	3f56c16c 	.word	0x3f56c16c
 800b108:	5555554c 	.word	0x5555554c
 800b10c:	3fa55555 	.word	0x3fa55555
 800b110:	3fe00000 	.word	0x3fe00000
 800b114:	3fd33332 	.word	0x3fd33332
 800b118:	3ff00000 	.word	0x3ff00000
 800b11c:	3fe90000 	.word	0x3fe90000
 800b120:	3fd20000 	.word	0x3fd20000

0800b124 <__kernel_rem_pio2>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b12c:	9307      	str	r3, [sp, #28]
 800b12e:	9104      	str	r1, [sp, #16]
 800b130:	4bbf      	ldr	r3, [pc, #764]	; (800b430 <__kernel_rem_pio2+0x30c>)
 800b132:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b134:	1ed4      	subs	r4, r2, #3
 800b136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b13a:	2500      	movs	r5, #0
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	9008      	str	r0, [sp, #32]
 800b142:	3b01      	subs	r3, #1
 800b144:	9306      	str	r3, [sp, #24]
 800b146:	2318      	movs	r3, #24
 800b148:	fb94 f4f3 	sdiv	r4, r4, r3
 800b14c:	f06f 0317 	mvn.w	r3, #23
 800b150:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b154:	fb04 3303 	mla	r3, r4, r3, r3
 800b158:	eb03 0a02 	add.w	sl, r3, r2
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	1aa7      	subs	r7, r4, r2
 800b162:	eb03 0802 	add.w	r8, r3, r2
 800b166:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b168:	2200      	movs	r2, #0
 800b16a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b16e:	2300      	movs	r3, #0
 800b170:	ae1e      	add	r6, sp, #120	; 0x78
 800b172:	4545      	cmp	r5, r8
 800b174:	dd14      	ble.n	800b1a0 <__kernel_rem_pio2+0x7c>
 800b176:	2600      	movs	r6, #0
 800b178:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b17c:	9b02      	ldr	r3, [sp, #8]
 800b17e:	429e      	cmp	r6, r3
 800b180:	dc39      	bgt.n	800b1f6 <__kernel_rem_pio2+0xd2>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	f04f 0800 	mov.w	r8, #0
 800b188:	3b08      	subs	r3, #8
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	f04f 0900 	mov.w	r9, #0
 800b192:	199d      	adds	r5, r3, r6
 800b194:	ab20      	add	r3, sp, #128	; 0x80
 800b196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b19a:	9305      	str	r3, [sp, #20]
 800b19c:	2700      	movs	r7, #0
 800b19e:	e023      	b.n	800b1e8 <__kernel_rem_pio2+0xc4>
 800b1a0:	42ef      	cmn	r7, r5
 800b1a2:	d40b      	bmi.n	800b1bc <__kernel_rem_pio2+0x98>
 800b1a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b1a8:	e9cd 2300 	strd	r2, r3, [sp]
 800b1ac:	f7f5 f92a 	bl	8000404 <__aeabi_i2d>
 800b1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1b4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	e7da      	b.n	800b172 <__kernel_rem_pio2+0x4e>
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4619      	mov	r1, r3
 800b1c0:	e7f8      	b.n	800b1b4 <__kernel_rem_pio2+0x90>
 800b1c2:	9905      	ldr	r1, [sp, #20]
 800b1c4:	9d00      	ldr	r5, [sp, #0]
 800b1c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b1ca:	9105      	str	r1, [sp, #20]
 800b1cc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b1d0:	9500      	str	r5, [sp, #0]
 800b1d2:	f7f5 f981 	bl	80004d8 <__aeabi_dmul>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4640      	mov	r0, r8
 800b1dc:	4649      	mov	r1, r9
 800b1de:	f7f4 ffc5 	bl	800016c <__adddf3>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	4689      	mov	r9, r1
 800b1e6:	3701      	adds	r7, #1
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	429f      	cmp	r7, r3
 800b1ec:	dde9      	ble.n	800b1c2 <__kernel_rem_pio2+0x9e>
 800b1ee:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b1f2:	3601      	adds	r6, #1
 800b1f4:	e7c2      	b.n	800b17c <__kernel_rem_pio2+0x58>
 800b1f6:	9b02      	ldr	r3, [sp, #8]
 800b1f8:	aa0c      	add	r2, sp, #48	; 0x30
 800b1fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b200:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b202:	9f02      	ldr	r7, [sp, #8]
 800b204:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b208:	930a      	str	r3, [sp, #40]	; 0x28
 800b20a:	2600      	movs	r6, #0
 800b20c:	ab98      	add	r3, sp, #608	; 0x260
 800b20e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b212:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b216:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b21a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b21e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b222:	ab98      	add	r3, sp, #608	; 0x260
 800b224:	445b      	add	r3, fp
 800b226:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b22a:	1bbb      	subs	r3, r7, r6
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dc71      	bgt.n	800b314 <__kernel_rem_pio2+0x1f0>
 800b230:	4652      	mov	r2, sl
 800b232:	4640      	mov	r0, r8
 800b234:	4649      	mov	r1, r9
 800b236:	f000 fc07 	bl	800ba48 <scalbn>
 800b23a:	2200      	movs	r2, #0
 800b23c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b240:	4604      	mov	r4, r0
 800b242:	460d      	mov	r5, r1
 800b244:	f7f5 f948 	bl	80004d8 <__aeabi_dmul>
 800b248:	f000 fb72 	bl	800b930 <floor>
 800b24c:	2200      	movs	r2, #0
 800b24e:	4b79      	ldr	r3, [pc, #484]	; (800b434 <__kernel_rem_pio2+0x310>)
 800b250:	f7f5 f942 	bl	80004d8 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4620      	mov	r0, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	f7f4 ff84 	bl	8000168 <__aeabi_dsub>
 800b260:	460d      	mov	r5, r1
 800b262:	4604      	mov	r4, r0
 800b264:	f7f5 fbe8 	bl	8000a38 <__aeabi_d2iz>
 800b268:	9005      	str	r0, [sp, #20]
 800b26a:	f7f5 f8cb 	bl	8000404 <__aeabi_i2d>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4620      	mov	r0, r4
 800b274:	4629      	mov	r1, r5
 800b276:	f7f4 ff77 	bl	8000168 <__aeabi_dsub>
 800b27a:	f1ba 0f00 	cmp.w	sl, #0
 800b27e:	4680      	mov	r8, r0
 800b280:	4689      	mov	r9, r1
 800b282:	dd6c      	ble.n	800b35e <__kernel_rem_pio2+0x23a>
 800b284:	1e7a      	subs	r2, r7, #1
 800b286:	ab0c      	add	r3, sp, #48	; 0x30
 800b288:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b28c:	f1ca 0118 	rsb	r1, sl, #24
 800b290:	9c05      	ldr	r4, [sp, #20]
 800b292:	fa40 f301 	asr.w	r3, r0, r1
 800b296:	441c      	add	r4, r3
 800b298:	408b      	lsls	r3, r1
 800b29a:	1ac0      	subs	r0, r0, r3
 800b29c:	ab0c      	add	r3, sp, #48	; 0x30
 800b29e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b2a2:	f1ca 0317 	rsb	r3, sl, #23
 800b2a6:	9405      	str	r4, [sp, #20]
 800b2a8:	fa40 f303 	asr.w	r3, r0, r3
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dd62      	ble.n	800b37a <__kernel_rem_pio2+0x256>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b2ba:	4614      	mov	r4, r2
 800b2bc:	9b05      	ldr	r3, [sp, #20]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	9305      	str	r3, [sp, #20]
 800b2c2:	4297      	cmp	r7, r2
 800b2c4:	f300 809f 	bgt.w	800b406 <__kernel_rem_pio2+0x2e2>
 800b2c8:	f1ba 0f00 	cmp.w	sl, #0
 800b2cc:	dd07      	ble.n	800b2de <__kernel_rem_pio2+0x1ba>
 800b2ce:	f1ba 0f01 	cmp.w	sl, #1
 800b2d2:	f000 80bb 	beq.w	800b44c <__kernel_rem_pio2+0x328>
 800b2d6:	f1ba 0f02 	cmp.w	sl, #2
 800b2da:	f000 80c1 	beq.w	800b460 <__kernel_rem_pio2+0x33c>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d14a      	bne.n	800b37a <__kernel_rem_pio2+0x256>
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	4953      	ldr	r1, [pc, #332]	; (800b438 <__kernel_rem_pio2+0x314>)
 800b2ec:	f7f4 ff3c 	bl	8000168 <__aeabi_dsub>
 800b2f0:	4680      	mov	r8, r0
 800b2f2:	4689      	mov	r9, r1
 800b2f4:	2c00      	cmp	r4, #0
 800b2f6:	d040      	beq.n	800b37a <__kernel_rem_pio2+0x256>
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	494e      	ldr	r1, [pc, #312]	; (800b438 <__kernel_rem_pio2+0x314>)
 800b2fe:	f000 fba3 	bl	800ba48 <scalbn>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4640      	mov	r0, r8
 800b308:	4649      	mov	r1, r9
 800b30a:	f7f4 ff2d 	bl	8000168 <__aeabi_dsub>
 800b30e:	4680      	mov	r8, r0
 800b310:	4689      	mov	r9, r1
 800b312:	e032      	b.n	800b37a <__kernel_rem_pio2+0x256>
 800b314:	2200      	movs	r2, #0
 800b316:	4b49      	ldr	r3, [pc, #292]	; (800b43c <__kernel_rem_pio2+0x318>)
 800b318:	4640      	mov	r0, r8
 800b31a:	4649      	mov	r1, r9
 800b31c:	f7f5 f8dc 	bl	80004d8 <__aeabi_dmul>
 800b320:	f7f5 fb8a 	bl	8000a38 <__aeabi_d2iz>
 800b324:	f7f5 f86e 	bl	8000404 <__aeabi_i2d>
 800b328:	2200      	movs	r2, #0
 800b32a:	4b45      	ldr	r3, [pc, #276]	; (800b440 <__kernel_rem_pio2+0x31c>)
 800b32c:	e9cd 0100 	strd	r0, r1, [sp]
 800b330:	f7f5 f8d2 	bl	80004d8 <__aeabi_dmul>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4640      	mov	r0, r8
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7f4 ff14 	bl	8000168 <__aeabi_dsub>
 800b340:	f7f5 fb7a 	bl	8000a38 <__aeabi_d2iz>
 800b344:	ab0c      	add	r3, sp, #48	; 0x30
 800b346:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b34a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b34e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b352:	f7f4 ff0b 	bl	800016c <__adddf3>
 800b356:	3601      	adds	r6, #1
 800b358:	4680      	mov	r8, r0
 800b35a:	4689      	mov	r9, r1
 800b35c:	e765      	b.n	800b22a <__kernel_rem_pio2+0x106>
 800b35e:	d105      	bne.n	800b36c <__kernel_rem_pio2+0x248>
 800b360:	1e7b      	subs	r3, r7, #1
 800b362:	aa0c      	add	r2, sp, #48	; 0x30
 800b364:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b368:	15c3      	asrs	r3, r0, #23
 800b36a:	e79f      	b.n	800b2ac <__kernel_rem_pio2+0x188>
 800b36c:	2200      	movs	r2, #0
 800b36e:	4b35      	ldr	r3, [pc, #212]	; (800b444 <__kernel_rem_pio2+0x320>)
 800b370:	f7f5 fb38 	bl	80009e4 <__aeabi_dcmpge>
 800b374:	2800      	cmp	r0, #0
 800b376:	d143      	bne.n	800b400 <__kernel_rem_pio2+0x2dc>
 800b378:	9000      	str	r0, [sp, #0]
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	4640      	mov	r0, r8
 800b380:	4649      	mov	r1, r9
 800b382:	f7f5 fb11 	bl	80009a8 <__aeabi_dcmpeq>
 800b386:	2800      	cmp	r0, #0
 800b388:	f000 80c3 	beq.w	800b512 <__kernel_rem_pio2+0x3ee>
 800b38c:	1e7c      	subs	r4, r7, #1
 800b38e:	4623      	mov	r3, r4
 800b390:	2200      	movs	r2, #0
 800b392:	9902      	ldr	r1, [sp, #8]
 800b394:	428b      	cmp	r3, r1
 800b396:	da6a      	bge.n	800b46e <__kernel_rem_pio2+0x34a>
 800b398:	2a00      	cmp	r2, #0
 800b39a:	f000 8084 	beq.w	800b4a6 <__kernel_rem_pio2+0x382>
 800b39e:	ab0c      	add	r3, sp, #48	; 0x30
 800b3a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b3a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 80b0 	beq.w	800b50e <__kernel_rem_pio2+0x3ea>
 800b3ae:	4652      	mov	r2, sl
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	4921      	ldr	r1, [pc, #132]	; (800b438 <__kernel_rem_pio2+0x314>)
 800b3b4:	f000 fb48 	bl	800ba48 <scalbn>
 800b3b8:	4625      	mov	r5, r4
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	f04f 0a00 	mov.w	sl, #0
 800b3c2:	00e3      	lsls	r3, r4, #3
 800b3c4:	aa98      	add	r2, sp, #608	; 0x260
 800b3c6:	eb02 0803 	add.w	r8, r2, r3
 800b3ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b43c <__kernel_rem_pio2+0x318>
 800b3ce:	9306      	str	r3, [sp, #24]
 800b3d0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b3d4:	2d00      	cmp	r5, #0
 800b3d6:	f280 80d2 	bge.w	800b57e <__kernel_rem_pio2+0x45a>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	9a06      	ldr	r2, [sp, #24]
 800b3de:	ab98      	add	r3, sp, #608	; 0x260
 800b3e0:	189e      	adds	r6, r3, r2
 800b3e2:	3ea8      	subs	r6, #168	; 0xa8
 800b3e4:	1b63      	subs	r3, r4, r5
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f2c0 80f9 	blt.w	800b5de <__kernel_rem_pio2+0x4ba>
 800b3ec:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b448 <__kernel_rem_pio2+0x324>
 800b3f0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b3f4:	f04f 0a00 	mov.w	sl, #0
 800b3f8:	f04f 0b00 	mov.w	fp, #0
 800b3fc:	2700      	movs	r7, #0
 800b3fe:	e0e2      	b.n	800b5c6 <__kernel_rem_pio2+0x4a2>
 800b400:	2302      	movs	r3, #2
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	e756      	b.n	800b2b4 <__kernel_rem_pio2+0x190>
 800b406:	ab0c      	add	r3, sp, #48	; 0x30
 800b408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40c:	b94c      	cbnz	r4, 800b422 <__kernel_rem_pio2+0x2fe>
 800b40e:	b12b      	cbz	r3, 800b41c <__kernel_rem_pio2+0x2f8>
 800b410:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b414:	a80c      	add	r0, sp, #48	; 0x30
 800b416:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b41a:	2301      	movs	r3, #1
 800b41c:	3201      	adds	r2, #1
 800b41e:	461c      	mov	r4, r3
 800b420:	e74f      	b.n	800b2c2 <__kernel_rem_pio2+0x19e>
 800b422:	1acb      	subs	r3, r1, r3
 800b424:	a80c      	add	r0, sp, #48	; 0x30
 800b426:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b42a:	4623      	mov	r3, r4
 800b42c:	e7f6      	b.n	800b41c <__kernel_rem_pio2+0x2f8>
 800b42e:	bf00      	nop
 800b430:	0800c1d8 	.word	0x0800c1d8
 800b434:	40200000 	.word	0x40200000
 800b438:	3ff00000 	.word	0x3ff00000
 800b43c:	3e700000 	.word	0x3e700000
 800b440:	41700000 	.word	0x41700000
 800b444:	3fe00000 	.word	0x3fe00000
 800b448:	0800c190 	.word	0x0800c190
 800b44c:	1e7a      	subs	r2, r7, #1
 800b44e:	ab0c      	add	r3, sp, #48	; 0x30
 800b450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b454:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b458:	a90c      	add	r1, sp, #48	; 0x30
 800b45a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b45e:	e73e      	b.n	800b2de <__kernel_rem_pio2+0x1ba>
 800b460:	1e7a      	subs	r2, r7, #1
 800b462:	ab0c      	add	r3, sp, #48	; 0x30
 800b464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b468:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b46c:	e7f4      	b.n	800b458 <__kernel_rem_pio2+0x334>
 800b46e:	a90c      	add	r1, sp, #48	; 0x30
 800b470:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b474:	3b01      	subs	r3, #1
 800b476:	430a      	orrs	r2, r1
 800b478:	e78b      	b.n	800b392 <__kernel_rem_pio2+0x26e>
 800b47a:	3401      	adds	r4, #1
 800b47c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b480:	2a00      	cmp	r2, #0
 800b482:	d0fa      	beq.n	800b47a <__kernel_rem_pio2+0x356>
 800b484:	ab98      	add	r3, sp, #608	; 0x260
 800b486:	449b      	add	fp, r3
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	1c7e      	adds	r6, r7, #1
 800b48c:	19dd      	adds	r5, r3, r7
 800b48e:	ab98      	add	r3, sp, #608	; 0x260
 800b490:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b494:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800b498:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800b49c:	443c      	add	r4, r7
 800b49e:	42b4      	cmp	r4, r6
 800b4a0:	da04      	bge.n	800b4ac <__kernel_rem_pio2+0x388>
 800b4a2:	4627      	mov	r7, r4
 800b4a4:	e6b1      	b.n	800b20a <__kernel_rem_pio2+0xe6>
 800b4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a8:	2401      	movs	r4, #1
 800b4aa:	e7e7      	b.n	800b47c <__kernel_rem_pio2+0x358>
 800b4ac:	f105 0308 	add.w	r3, r5, #8
 800b4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b4:	2700      	movs	r7, #0
 800b4b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4ba:	f7f4 ffa3 	bl	8000404 <__aeabi_i2d>
 800b4be:	f04f 0800 	mov.w	r8, #0
 800b4c2:	f04f 0900 	mov.w	r9, #0
 800b4c6:	9b08      	ldr	r3, [sp, #32]
 800b4c8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b4cc:	3b08      	subs	r3, #8
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	f105 0310 	add.w	r3, r5, #16
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	9b06      	ldr	r3, [sp, #24]
 800b4d8:	429f      	cmp	r7, r3
 800b4da:	dd04      	ble.n	800b4e6 <__kernel_rem_pio2+0x3c2>
 800b4dc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b4e0:	3601      	adds	r6, #1
 800b4e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b4e4:	e7db      	b.n	800b49e <__kernel_rem_pio2+0x37a>
 800b4e6:	9905      	ldr	r1, [sp, #20]
 800b4e8:	9d00      	ldr	r5, [sp, #0]
 800b4ea:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b4ee:	9105      	str	r1, [sp, #20]
 800b4f0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b4f4:	9500      	str	r5, [sp, #0]
 800b4f6:	f7f4 ffef 	bl	80004d8 <__aeabi_dmul>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4640      	mov	r0, r8
 800b500:	4649      	mov	r1, r9
 800b502:	f7f4 fe33 	bl	800016c <__adddf3>
 800b506:	3701      	adds	r7, #1
 800b508:	4680      	mov	r8, r0
 800b50a:	4689      	mov	r9, r1
 800b50c:	e7e3      	b.n	800b4d6 <__kernel_rem_pio2+0x3b2>
 800b50e:	3c01      	subs	r4, #1
 800b510:	e745      	b.n	800b39e <__kernel_rem_pio2+0x27a>
 800b512:	f1ca 0200 	rsb	r2, sl, #0
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f000 fa95 	bl	800ba48 <scalbn>
 800b51e:	2200      	movs	r2, #0
 800b520:	4ba3      	ldr	r3, [pc, #652]	; (800b7b0 <__kernel_rem_pio2+0x68c>)
 800b522:	4604      	mov	r4, r0
 800b524:	460d      	mov	r5, r1
 800b526:	f7f5 fa5d 	bl	80009e4 <__aeabi_dcmpge>
 800b52a:	b1f8      	cbz	r0, 800b56c <__kernel_rem_pio2+0x448>
 800b52c:	2200      	movs	r2, #0
 800b52e:	4ba1      	ldr	r3, [pc, #644]	; (800b7b4 <__kernel_rem_pio2+0x690>)
 800b530:	4620      	mov	r0, r4
 800b532:	4629      	mov	r1, r5
 800b534:	f7f4 ffd0 	bl	80004d8 <__aeabi_dmul>
 800b538:	f7f5 fa7e 	bl	8000a38 <__aeabi_d2iz>
 800b53c:	4606      	mov	r6, r0
 800b53e:	f7f4 ff61 	bl	8000404 <__aeabi_i2d>
 800b542:	2200      	movs	r2, #0
 800b544:	4b9a      	ldr	r3, [pc, #616]	; (800b7b0 <__kernel_rem_pio2+0x68c>)
 800b546:	f7f4 ffc7 	bl	80004d8 <__aeabi_dmul>
 800b54a:	460b      	mov	r3, r1
 800b54c:	4602      	mov	r2, r0
 800b54e:	4629      	mov	r1, r5
 800b550:	4620      	mov	r0, r4
 800b552:	f7f4 fe09 	bl	8000168 <__aeabi_dsub>
 800b556:	f7f5 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800b55a:	1c7c      	adds	r4, r7, #1
 800b55c:	ab0c      	add	r3, sp, #48	; 0x30
 800b55e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b562:	f10a 0a18 	add.w	sl, sl, #24
 800b566:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b56a:	e720      	b.n	800b3ae <__kernel_rem_pio2+0x28a>
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	f7f5 fa62 	bl	8000a38 <__aeabi_d2iz>
 800b574:	ab0c      	add	r3, sp, #48	; 0x30
 800b576:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b57a:	463c      	mov	r4, r7
 800b57c:	e717      	b.n	800b3ae <__kernel_rem_pio2+0x28a>
 800b57e:	ab0c      	add	r3, sp, #48	; 0x30
 800b580:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b584:	f7f4 ff3e 	bl	8000404 <__aeabi_i2d>
 800b588:	4632      	mov	r2, r6
 800b58a:	463b      	mov	r3, r7
 800b58c:	f7f4 ffa4 	bl	80004d8 <__aeabi_dmul>
 800b590:	4652      	mov	r2, sl
 800b592:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b596:	465b      	mov	r3, fp
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f4 ff9c 	bl	80004d8 <__aeabi_dmul>
 800b5a0:	3d01      	subs	r5, #1
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	e715      	b.n	800b3d4 <__kernel_rem_pio2+0x2b0>
 800b5a8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800b5ac:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	4659      	mov	r1, fp
 800b5bc:	f7f4 fdd6 	bl	800016c <__adddf3>
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	3701      	adds	r7, #1
 800b5c6:	9b02      	ldr	r3, [sp, #8]
 800b5c8:	429f      	cmp	r7, r3
 800b5ca:	dc01      	bgt.n	800b5d0 <__kernel_rem_pio2+0x4ac>
 800b5cc:	42bd      	cmp	r5, r7
 800b5ce:	daeb      	bge.n	800b5a8 <__kernel_rem_pio2+0x484>
 800b5d0:	ab48      	add	r3, sp, #288	; 0x120
 800b5d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b5d6:	e9c3 ab00 	strd	sl, fp, [r3]
 800b5da:	3501      	adds	r5, #1
 800b5dc:	e702      	b.n	800b3e4 <__kernel_rem_pio2+0x2c0>
 800b5de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d86c      	bhi.n	800b6be <__kernel_rem_pio2+0x59a>
 800b5e4:	e8df f003 	tbb	[pc, r3]
 800b5e8:	022f2f59 	.word	0x022f2f59
 800b5ec:	9a06      	ldr	r2, [sp, #24]
 800b5ee:	ab48      	add	r3, sp, #288	; 0x120
 800b5f0:	189d      	adds	r5, r3, r2
 800b5f2:	46aa      	mov	sl, r5
 800b5f4:	46a3      	mov	fp, r4
 800b5f6:	f1bb 0f00 	cmp.w	fp, #0
 800b5fa:	f300 8087 	bgt.w	800b70c <__kernel_rem_pio2+0x5e8>
 800b5fe:	46a2      	mov	sl, r4
 800b600:	f1ba 0f01 	cmp.w	sl, #1
 800b604:	f300 809f 	bgt.w	800b746 <__kernel_rem_pio2+0x622>
 800b608:	2700      	movs	r7, #0
 800b60a:	463e      	mov	r6, r7
 800b60c:	9d06      	ldr	r5, [sp, #24]
 800b60e:	ab48      	add	r3, sp, #288	; 0x120
 800b610:	3508      	adds	r5, #8
 800b612:	441d      	add	r5, r3
 800b614:	2c01      	cmp	r4, #1
 800b616:	f300 80b3 	bgt.w	800b780 <__kernel_rem_pio2+0x65c>
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b61e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b620:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b622:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 80b5 	bne.w	800b794 <__kernel_rem_pio2+0x670>
 800b62a:	4603      	mov	r3, r0
 800b62c:	462a      	mov	r2, r5
 800b62e:	9804      	ldr	r0, [sp, #16]
 800b630:	e9c0 2300 	strd	r2, r3, [r0]
 800b634:	4622      	mov	r2, r4
 800b636:	460b      	mov	r3, r1
 800b638:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b63c:	463a      	mov	r2, r7
 800b63e:	4633      	mov	r3, r6
 800b640:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b644:	e03b      	b.n	800b6be <__kernel_rem_pio2+0x59a>
 800b646:	f04f 0c00 	mov.w	ip, #0
 800b64a:	4626      	mov	r6, r4
 800b64c:	4667      	mov	r7, ip
 800b64e:	9d06      	ldr	r5, [sp, #24]
 800b650:	ab48      	add	r3, sp, #288	; 0x120
 800b652:	3508      	adds	r5, #8
 800b654:	441d      	add	r5, r3
 800b656:	2e00      	cmp	r6, #0
 800b658:	da42      	bge.n	800b6e0 <__kernel_rem_pio2+0x5bc>
 800b65a:	9b00      	ldr	r3, [sp, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d049      	beq.n	800b6f4 <__kernel_rem_pio2+0x5d0>
 800b660:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b664:	4662      	mov	r2, ip
 800b666:	460b      	mov	r3, r1
 800b668:	9904      	ldr	r1, [sp, #16]
 800b66a:	2601      	movs	r6, #1
 800b66c:	e9c1 2300 	strd	r2, r3, [r1]
 800b670:	a948      	add	r1, sp, #288	; 0x120
 800b672:	463b      	mov	r3, r7
 800b674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b678:	f7f4 fd76 	bl	8000168 <__aeabi_dsub>
 800b67c:	4684      	mov	ip, r0
 800b67e:	460f      	mov	r7, r1
 800b680:	ad48      	add	r5, sp, #288	; 0x120
 800b682:	42b4      	cmp	r4, r6
 800b684:	da38      	bge.n	800b6f8 <__kernel_rem_pio2+0x5d4>
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	b10b      	cbz	r3, 800b68e <__kernel_rem_pio2+0x56a>
 800b68a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b68e:	4662      	mov	r2, ip
 800b690:	463b      	mov	r3, r7
 800b692:	9904      	ldr	r1, [sp, #16]
 800b694:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b698:	e011      	b.n	800b6be <__kernel_rem_pio2+0x59a>
 800b69a:	2700      	movs	r7, #0
 800b69c:	463d      	mov	r5, r7
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	aa98      	add	r2, sp, #608	; 0x260
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	da0f      	bge.n	800b6cc <__kernel_rem_pio2+0x5a8>
 800b6ac:	9b00      	ldr	r3, [sp, #0]
 800b6ae:	b10b      	cbz	r3, 800b6b4 <__kernel_rem_pio2+0x590>
 800b6b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b6b4:	463a      	mov	r2, r7
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	9904      	ldr	r1, [sp, #16]
 800b6ba:	e9c1 2300 	strd	r2, r3, [r1]
 800b6be:	9b05      	ldr	r3, [sp, #20]
 800b6c0:	f003 0007 	and.w	r0, r3, #7
 800b6c4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	f7f4 fd4a 	bl	800016c <__adddf3>
 800b6d8:	3c01      	subs	r4, #1
 800b6da:	4607      	mov	r7, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	e7e3      	b.n	800b6a8 <__kernel_rem_pio2+0x584>
 800b6e0:	4660      	mov	r0, ip
 800b6e2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f7f4 fd40 	bl	800016c <__adddf3>
 800b6ec:	3e01      	subs	r6, #1
 800b6ee:	4684      	mov	ip, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	e7b0      	b.n	800b656 <__kernel_rem_pio2+0x532>
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	e7b5      	b.n	800b664 <__kernel_rem_pio2+0x540>
 800b6f8:	4660      	mov	r0, ip
 800b6fa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f4 fd34 	bl	800016c <__adddf3>
 800b704:	3601      	adds	r6, #1
 800b706:	4684      	mov	ip, r0
 800b708:	460f      	mov	r7, r1
 800b70a:	e7ba      	b.n	800b682 <__kernel_rem_pio2+0x55e>
 800b70c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b710:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b71c:	f7f4 fd26 	bl	800016c <__adddf3>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4606      	mov	r6, r0
 800b726:	460f      	mov	r7, r1
 800b728:	4640      	mov	r0, r8
 800b72a:	4649      	mov	r1, r9
 800b72c:	f7f4 fd1c 	bl	8000168 <__aeabi_dsub>
 800b730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b734:	f7f4 fd1a 	bl	800016c <__adddf3>
 800b738:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b73c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b740:	e9ca 6700 	strd	r6, r7, [sl]
 800b744:	e757      	b.n	800b5f6 <__kernel_rem_pio2+0x4d2>
 800b746:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b74a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b74e:	4630      	mov	r0, r6
 800b750:	4639      	mov	r1, r7
 800b752:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b756:	f7f4 fd09 	bl	800016c <__adddf3>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4680      	mov	r8, r0
 800b760:	4689      	mov	r9, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f4 fcff 	bl	8000168 <__aeabi_dsub>
 800b76a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b76e:	f7f4 fcfd 	bl	800016c <__adddf3>
 800b772:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b776:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b77a:	e9c5 8900 	strd	r8, r9, [r5]
 800b77e:	e73f      	b.n	800b600 <__kernel_rem_pio2+0x4dc>
 800b780:	4638      	mov	r0, r7
 800b782:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b786:	4631      	mov	r1, r6
 800b788:	f7f4 fcf0 	bl	800016c <__adddf3>
 800b78c:	3c01      	subs	r4, #1
 800b78e:	4607      	mov	r7, r0
 800b790:	460e      	mov	r6, r1
 800b792:	e73f      	b.n	800b614 <__kernel_rem_pio2+0x4f0>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b79a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b79e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b7a2:	601d      	str	r5, [r3, #0]
 800b7a4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b7a8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b7ac:	615e      	str	r6, [r3, #20]
 800b7ae:	e786      	b.n	800b6be <__kernel_rem_pio2+0x59a>
 800b7b0:	41700000 	.word	0x41700000
 800b7b4:	3e700000 	.word	0x3e700000

0800b7b8 <__kernel_sin>:
 800b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	e9cd 2300 	strd	r2, r3, [sp]
 800b7c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7ca:	4682      	mov	sl, r0
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b7d0:	da03      	bge.n	800b7da <__kernel_sin+0x22>
 800b7d2:	f7f5 f931 	bl	8000a38 <__aeabi_d2iz>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d050      	beq.n	800b87c <__kernel_sin+0xc4>
 800b7da:	4652      	mov	r2, sl
 800b7dc:	4623      	mov	r3, r4
 800b7de:	4650      	mov	r0, sl
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	f7f4 fe79 	bl	80004d8 <__aeabi_dmul>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f7f4 fe71 	bl	80004d8 <__aeabi_dmul>
 800b7f6:	a33e      	add	r3, pc, #248	; (adr r3, 800b8f0 <__kernel_sin+0x138>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	4689      	mov	r9, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f4 fe68 	bl	80004d8 <__aeabi_dmul>
 800b808:	a33b      	add	r3, pc, #236	; (adr r3, 800b8f8 <__kernel_sin+0x140>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fcab 	bl	8000168 <__aeabi_dsub>
 800b812:	4632      	mov	r2, r6
 800b814:	463b      	mov	r3, r7
 800b816:	f7f4 fe5f 	bl	80004d8 <__aeabi_dmul>
 800b81a:	a339      	add	r3, pc, #228	; (adr r3, 800b900 <__kernel_sin+0x148>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 fca4 	bl	800016c <__adddf3>
 800b824:	4632      	mov	r2, r6
 800b826:	463b      	mov	r3, r7
 800b828:	f7f4 fe56 	bl	80004d8 <__aeabi_dmul>
 800b82c:	a336      	add	r3, pc, #216	; (adr r3, 800b908 <__kernel_sin+0x150>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fc99 	bl	8000168 <__aeabi_dsub>
 800b836:	4632      	mov	r2, r6
 800b838:	463b      	mov	r3, r7
 800b83a:	f7f4 fe4d 	bl	80004d8 <__aeabi_dmul>
 800b83e:	a334      	add	r3, pc, #208	; (adr r3, 800b910 <__kernel_sin+0x158>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fc92 	bl	800016c <__adddf3>
 800b848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b84c:	b9dd      	cbnz	r5, 800b886 <__kernel_sin+0xce>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f4 fe3f 	bl	80004d8 <__aeabi_dmul>
 800b85a:	a32f      	add	r3, pc, #188	; (adr r3, 800b918 <__kernel_sin+0x160>)
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f4 fc82 	bl	8000168 <__aeabi_dsub>
 800b864:	4642      	mov	r2, r8
 800b866:	464b      	mov	r3, r9
 800b868:	f7f4 fe36 	bl	80004d8 <__aeabi_dmul>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4650      	mov	r0, sl
 800b872:	4621      	mov	r1, r4
 800b874:	f7f4 fc7a 	bl	800016c <__adddf3>
 800b878:	4682      	mov	sl, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4650      	mov	r0, sl
 800b87e:	4621      	mov	r1, r4
 800b880:	b006      	add	sp, #24
 800b882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b886:	2200      	movs	r2, #0
 800b888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b88c:	4b24      	ldr	r3, [pc, #144]	; (800b920 <__kernel_sin+0x168>)
 800b88e:	f7f4 fe23 	bl	80004d8 <__aeabi_dmul>
 800b892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b89a:	4640      	mov	r0, r8
 800b89c:	4649      	mov	r1, r9
 800b89e:	f7f4 fe1b 	bl	80004d8 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8aa:	f7f4 fc5d 	bl	8000168 <__aeabi_dsub>
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	f7f4 fe11 	bl	80004d8 <__aeabi_dmul>
 800b8b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ba:	f7f4 fc55 	bl	8000168 <__aeabi_dsub>
 800b8be:	a316      	add	r3, pc, #88	; (adr r3, 800b918 <__kernel_sin+0x160>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	460f      	mov	r7, r1
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f4 fe04 	bl	80004d8 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f4 fc48 	bl	800016c <__adddf3>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	f7f4 fc40 	bl	8000168 <__aeabi_dsub>
 800b8e8:	e7c6      	b.n	800b878 <__kernel_sin+0xc0>
 800b8ea:	bf00      	nop
 800b8ec:	f3af 8000 	nop.w
 800b8f0:	5acfd57c 	.word	0x5acfd57c
 800b8f4:	3de5d93a 	.word	0x3de5d93a
 800b8f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800b900:	57b1fe7d 	.word	0x57b1fe7d
 800b904:	3ec71de3 	.word	0x3ec71de3
 800b908:	19c161d5 	.word	0x19c161d5
 800b90c:	3f2a01a0 	.word	0x3f2a01a0
 800b910:	1110f8a6 	.word	0x1110f8a6
 800b914:	3f811111 	.word	0x3f811111
 800b918:	55555549 	.word	0x55555549
 800b91c:	3fc55555 	.word	0x3fc55555
 800b920:	3fe00000 	.word	0x3fe00000

0800b924 <fabs>:
 800b924:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b928:	4619      	mov	r1, r3
 800b92a:	4770      	bx	lr
 800b92c:	0000      	movs	r0, r0
	...

0800b930 <floor>:
 800b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b934:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b938:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b93c:	2e13      	cmp	r6, #19
 800b93e:	4607      	mov	r7, r0
 800b940:	460b      	mov	r3, r1
 800b942:	460c      	mov	r4, r1
 800b944:	4605      	mov	r5, r0
 800b946:	dc35      	bgt.n	800b9b4 <floor+0x84>
 800b948:	2e00      	cmp	r6, #0
 800b94a:	da16      	bge.n	800b97a <floor+0x4a>
 800b94c:	a336      	add	r3, pc, #216	; (adr r3, 800ba28 <floor+0xf8>)
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f7f4 fc0b 	bl	800016c <__adddf3>
 800b956:	2200      	movs	r2, #0
 800b958:	2300      	movs	r3, #0
 800b95a:	f7f5 f84d 	bl	80009f8 <__aeabi_dcmpgt>
 800b95e:	b148      	cbz	r0, 800b974 <floor+0x44>
 800b960:	2c00      	cmp	r4, #0
 800b962:	da5b      	bge.n	800ba1c <floor+0xec>
 800b964:	2500      	movs	r5, #0
 800b966:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b96a:	4a31      	ldr	r2, [pc, #196]	; (800ba30 <floor+0x100>)
 800b96c:	433b      	orrs	r3, r7
 800b96e:	42ab      	cmp	r3, r5
 800b970:	bf18      	it	ne
 800b972:	4614      	movne	r4, r2
 800b974:	4623      	mov	r3, r4
 800b976:	462f      	mov	r7, r5
 800b978:	e026      	b.n	800b9c8 <floor+0x98>
 800b97a:	4a2e      	ldr	r2, [pc, #184]	; (800ba34 <floor+0x104>)
 800b97c:	fa42 f806 	asr.w	r8, r2, r6
 800b980:	ea01 0208 	and.w	r2, r1, r8
 800b984:	4302      	orrs	r2, r0
 800b986:	d01f      	beq.n	800b9c8 <floor+0x98>
 800b988:	a327      	add	r3, pc, #156	; (adr r3, 800ba28 <floor+0xf8>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fbed 	bl	800016c <__adddf3>
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	f7f5 f82f 	bl	80009f8 <__aeabi_dcmpgt>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0ea      	beq.n	800b974 <floor+0x44>
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	bfbe      	ittt	lt
 800b9a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b9aa:	19a4      	addlt	r4, r4, r6
 800b9ac:	ea24 0408 	bic.w	r4, r4, r8
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	e7df      	b.n	800b974 <floor+0x44>
 800b9b4:	2e33      	cmp	r6, #51	; 0x33
 800b9b6:	dd0b      	ble.n	800b9d0 <floor+0xa0>
 800b9b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9bc:	d104      	bne.n	800b9c8 <floor+0x98>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	f7f4 fbd4 	bl	800016c <__adddf3>
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9d4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b9d8:	fa22 f808 	lsr.w	r8, r2, r8
 800b9dc:	ea18 0f00 	tst.w	r8, r0
 800b9e0:	d0f2      	beq.n	800b9c8 <floor+0x98>
 800b9e2:	a311      	add	r3, pc, #68	; (adr r3, 800ba28 <floor+0xf8>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fbc0 	bl	800016c <__adddf3>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f7f5 f802 	bl	80009f8 <__aeabi_dcmpgt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d0bd      	beq.n	800b974 <floor+0x44>
 800b9f8:	2c00      	cmp	r4, #0
 800b9fa:	da02      	bge.n	800ba02 <floor+0xd2>
 800b9fc:	2e14      	cmp	r6, #20
 800b9fe:	d103      	bne.n	800ba08 <floor+0xd8>
 800ba00:	3401      	adds	r4, #1
 800ba02:	ea25 0508 	bic.w	r5, r5, r8
 800ba06:	e7b5      	b.n	800b974 <floor+0x44>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba0e:	fa03 f606 	lsl.w	r6, r3, r6
 800ba12:	4435      	add	r5, r6
 800ba14:	42bd      	cmp	r5, r7
 800ba16:	bf38      	it	cc
 800ba18:	18e4      	addcc	r4, r4, r3
 800ba1a:	e7f2      	b.n	800ba02 <floor+0xd2>
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	462c      	mov	r4, r5
 800ba20:	e7a8      	b.n	800b974 <floor+0x44>
 800ba22:	bf00      	nop
 800ba24:	f3af 8000 	nop.w
 800ba28:	8800759c 	.word	0x8800759c
 800ba2c:	7e37e43c 	.word	0x7e37e43c
 800ba30:	bff00000 	.word	0xbff00000
 800ba34:	000fffff 	.word	0x000fffff

0800ba38 <matherr>:
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4770      	bx	lr

0800ba3c <nan>:
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4901      	ldr	r1, [pc, #4]	; (800ba44 <nan+0x8>)
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	7ff80000 	.word	0x7ff80000

0800ba48 <scalbn>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	4616      	mov	r6, r2
 800ba4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba50:	4604      	mov	r4, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	460b      	mov	r3, r1
 800ba56:	b982      	cbnz	r2, 800ba7a <scalbn+0x32>
 800ba58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	d034      	beq.n	800baca <scalbn+0x82>
 800ba60:	4b2d      	ldr	r3, [pc, #180]	; (800bb18 <scalbn+0xd0>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	f7f4 fd38 	bl	80004d8 <__aeabi_dmul>
 800ba68:	4b2c      	ldr	r3, [pc, #176]	; (800bb1c <scalbn+0xd4>)
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	429e      	cmp	r6, r3
 800ba6e:	460d      	mov	r5, r1
 800ba70:	da0d      	bge.n	800ba8e <scalbn+0x46>
 800ba72:	a325      	add	r3, pc, #148	; (adr r3, 800bb08 <scalbn+0xc0>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	e01c      	b.n	800bab4 <scalbn+0x6c>
 800ba7a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ba7e:	42ba      	cmp	r2, r7
 800ba80:	d109      	bne.n	800ba96 <scalbn+0x4e>
 800ba82:	4602      	mov	r2, r0
 800ba84:	f7f4 fb72 	bl	800016c <__adddf3>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	e01d      	b.n	800baca <scalbn+0x82>
 800ba8e:	460b      	mov	r3, r1
 800ba90:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba94:	3a36      	subs	r2, #54	; 0x36
 800ba96:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba9a:	4432      	add	r2, r6
 800ba9c:	428a      	cmp	r2, r1
 800ba9e:	dd0c      	ble.n	800baba <scalbn+0x72>
 800baa0:	4622      	mov	r2, r4
 800baa2:	462b      	mov	r3, r5
 800baa4:	a11a      	add	r1, pc, #104	; (adr r1, 800bb10 <scalbn+0xc8>)
 800baa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baaa:	f000 f83b 	bl	800bb24 <copysign>
 800baae:	a318      	add	r3, pc, #96	; (adr r3, 800bb10 <scalbn+0xc8>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	f7f4 fd10 	bl	80004d8 <__aeabi_dmul>
 800bab8:	e7e6      	b.n	800ba88 <scalbn+0x40>
 800baba:	2a00      	cmp	r2, #0
 800babc:	dd08      	ble.n	800bad0 <scalbn+0x88>
 800babe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bac6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bad4:	da0b      	bge.n	800baee <scalbn+0xa6>
 800bad6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bada:	429e      	cmp	r6, r3
 800badc:	4622      	mov	r2, r4
 800bade:	462b      	mov	r3, r5
 800bae0:	dce0      	bgt.n	800baa4 <scalbn+0x5c>
 800bae2:	a109      	add	r1, pc, #36	; (adr r1, 800bb08 <scalbn+0xc0>)
 800bae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae8:	f000 f81c 	bl	800bb24 <copysign>
 800baec:	e7c1      	b.n	800ba72 <scalbn+0x2a>
 800baee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baf2:	3236      	adds	r2, #54	; 0x36
 800baf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bafc:	4620      	mov	r0, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	2200      	movs	r2, #0
 800bb02:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <scalbn+0xd8>)
 800bb04:	e7d6      	b.n	800bab4 <scalbn+0x6c>
 800bb06:	bf00      	nop
 800bb08:	c2f8f359 	.word	0xc2f8f359
 800bb0c:	01a56e1f 	.word	0x01a56e1f
 800bb10:	8800759c 	.word	0x8800759c
 800bb14:	7e37e43c 	.word	0x7e37e43c
 800bb18:	43500000 	.word	0x43500000
 800bb1c:	ffff3cb0 	.word	0xffff3cb0
 800bb20:	3c900000 	.word	0x3c900000

0800bb24 <copysign>:
 800bb24:	b530      	push	{r4, r5, lr}
 800bb26:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bb2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb2e:	ea42 0503 	orr.w	r5, r2, r3
 800bb32:	4629      	mov	r1, r5
 800bb34:	bd30      	pop	{r4, r5, pc}
	...

0800bb38 <_init>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	bf00      	nop
 800bb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3e:	bc08      	pop	{r3}
 800bb40:	469e      	mov	lr, r3
 800bb42:	4770      	bx	lr

0800bb44 <_fini>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	bf00      	nop
 800bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4a:	bc08      	pop	{r3}
 800bb4c:	469e      	mov	lr, r3
 800bb4e:	4770      	bx	lr
