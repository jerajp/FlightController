
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b4  080052b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052b4  080052b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b4  080052b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  20000070  0800532c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  0800532c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a28  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ee  00000000  00000000  00031ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  00035338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c38  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ced2  00000000  00000000  0004c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c80d  00000000  00000000  00058fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d57bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  000d583c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005134 	.word	0x08005134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005134 	.word	0x08005134

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	b29b      	uxth	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	4013      	ands	r3, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e001      	b.n	80006b2 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fae9 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f99d 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fb89 	bl	8000de4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d2:	f000 f9f5 	bl	8000ac0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006d6:	f000 fa31 	bl	8000b3c <MX_I2C2_Init>
  MX_SPI2_Init();
 80006da:	f000 fa5d 	bl	8000b98 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006de:	f000 fa91 	bl	8000c04 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 fb55 	bl	8000d90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80006e6:	4899      	ldr	r0, [pc, #612]	; (800094c <main+0x28c>)
 80006e8:	f001 ff6c 	bl	80025c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80006ec:	4897      	ldr	r0, [pc, #604]	; (800094c <main+0x28c>)
 80006ee:	f001 fc31 	bl	8001f54 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f2:	2100      	movs	r1, #0
 80006f4:	4896      	ldr	r0, [pc, #600]	; (8000950 <main+0x290>)
 80006f6:	f003 f9e5 	bl	8003ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006fa:	2104      	movs	r1, #4
 80006fc:	4894      	ldr	r0, [pc, #592]	; (8000950 <main+0x290>)
 80006fe:	f003 f9e1 	bl	8003ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000702:	2108      	movs	r1, #8
 8000704:	4892      	ldr	r0, [pc, #584]	; (8000950 <main+0x290>)
 8000706:	f003 f9dd 	bl	8003ac4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800070a:	210c      	movs	r1, #12
 800070c:	4890      	ldr	r0, [pc, #576]	; (8000950 <main+0x290>)
 800070e:	f003 f9d9 	bl	8003ac4 <HAL_TIM_PWM_Start>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8000712:	4b90      	ldr	r3, [pc, #576]	; (8000954 <main+0x294>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a8f      	ldr	r2, [pc, #572]	; (8000954 <main+0x294>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	6013      	str	r3, [r2, #0]

  nRF24_CE_L();
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	488c      	ldr	r0, [pc, #560]	; (8000958 <main+0x298>)
 8000726:	f002 fa3e 	bl	8002ba6 <HAL_GPIO_WritePin>
  wifiOK=nRF24_Check();
 800072a:	f000 fd29 	bl	8001180 <nRF24_Check>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b8a      	ldr	r3, [pc, #552]	; (800095c <main+0x29c>)
 8000734:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8000736:	f000 fcd1 	bl	80010dc <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 800073a:	20ff      	movs	r0, #255	; 0xff
 800073c:	f000 feb2 	bl	80014a4 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 8000740:	200f      	movs	r0, #15
 8000742:	f000 fdac 	bl	800129e <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8000746:	2020      	movs	r0, #32
 8000748:	f000 fe3d 	bl	80013c6 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800074c:	200c      	movs	r0, #12
 800074e:	f000 fd85 	bl	800125c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8000752:	2003      	movs	r0, #3
 8000754:	f000 fdb1 	bl	80012ba <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8000758:	4981      	ldr	r1, [pc, #516]	; (8000960 <main+0x2a0>)
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fdbe 	bl	80012dc <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 8000760:	2207      	movs	r2, #7
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fe49 	bl	80013fc <nRF24_SetRXPipe>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fe10 	bl	8001390 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fd52 	bl	800121a <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 8000776:	f000 fed7 	bl	8001528 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 800077a:	2002      	movs	r0, #2
 800077c:	f000 fd2e 	bl	80011dc <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000786:	4874      	ldr	r0, [pc, #464]	; (8000958 <main+0x298>)
 8000788:	f002 fa0d 	bl	8002ba6 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f001 fae7 	bl	8001d60 <HAL_Delay>

	  if(wifiOK)LED1_ON;
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <main+0x29c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d004      	beq.n	80007a4 <main+0xe4>
 800079a:	4b72      	ldr	r3, [pc, #456]	; (8000964 <main+0x2a4>)
 800079c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	e003      	b.n	80007ac <main+0xec>
	  else LED1_OFF;
 80007a4:	4b6f      	ldr	r3, [pc, #444]	; (8000964 <main+0x2a4>)
 80007a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007aa:	611a      	str	r2, [r3, #16]

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 80007ac:	4b6e      	ldr	r3, [pc, #440]	; (8000968 <main+0x2a8>)
 80007ae:	4a6f      	ldr	r2, [pc, #444]	; (800096c <main+0x2ac>)
 80007b0:	6810      	ldr	r0, [r2, #0]
 80007b2:	6018      	str	r0, [r3, #0]
 80007b4:	7912      	ldrb	r2, [r2, #4]
 80007b6:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80007b8:	486b      	ldr	r0, [pc, #428]	; (8000968 <main+0x2a8>)
 80007ba:	f7ff fcc7 	bl	800014c <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	4968      	ldr	r1, [pc, #416]	; (8000968 <main+0x2a8>)
 80007c6:	486a      	ldr	r0, [pc, #424]	; (8000970 <main+0x2b0>)
 80007c8:	f003 feb2 	bl	8004530 <HAL_UART_Transmit>

	  if(wifiOK)
 80007cc:	4b63      	ldr	r3, [pc, #396]	; (800095c <main+0x29c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <main+0x128>
	  {
		  sprintf(UartTXbuff1, "Wifi OK \n\r");
 80007d4:	4a67      	ldr	r2, [pc, #412]	; (8000974 <main+0x2b4>)
 80007d6:	4b68      	ldr	r3, [pc, #416]	; (8000978 <main+0x2b8>)
 80007d8:	cb03      	ldmia	r3!, {r0, r1}
 80007da:	6010      	str	r0, [r2, #0]
 80007dc:	6051      	str	r1, [r2, #4]
 80007de:	8819      	ldrh	r1, [r3, #0]
 80007e0:	789b      	ldrb	r3, [r3, #2]
 80007e2:	8111      	strh	r1, [r2, #8]
 80007e4:	7293      	strb	r3, [r2, #10]
 80007e6:	e008      	b.n	80007fa <main+0x13a>
	  }
	  else sprintf(UartTXbuff1, "Wifi Fail \n\r");
 80007e8:	4a62      	ldr	r2, [pc, #392]	; (8000974 <main+0x2b4>)
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <main+0x2bc>)
 80007ec:	4614      	mov	r4, r2
 80007ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007f0:	6020      	str	r0, [r4, #0]
 80007f2:	6061      	str	r1, [r4, #4]
 80007f4:	60a2      	str	r2, [r4, #8]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit ( &huart1, UartTXbuff1, strlen( UartTXbuff1 ), 1 );
 80007fa:	485e      	ldr	r0, [pc, #376]	; (8000974 <main+0x2b4>)
 80007fc:	f7ff fca6 	bl	800014c <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	2301      	movs	r3, #1
 8000806:	495b      	ldr	r1, [pc, #364]	; (8000974 <main+0x2b4>)
 8000808:	4859      	ldr	r0, [pc, #356]	; (8000970 <main+0x2b0>)
 800080a:	f003 fe91 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff2, "L-UD=%u L-LR=%u \n\r",Ljoyupdown,Ljoyleftright);
 800080e:	4b5c      	ldr	r3, [pc, #368]	; (8000980 <main+0x2c0>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <main+0x2c4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	495c      	ldr	r1, [pc, #368]	; (8000988 <main+0x2c8>)
 8000818:	485c      	ldr	r0, [pc, #368]	; (800098c <main+0x2cc>)
 800081a:	f004 f879 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff2, strlen( UartTXbuff2 ), 1 );
 800081e:	485b      	ldr	r0, [pc, #364]	; (800098c <main+0x2cc>)
 8000820:	f7ff fc94 	bl	800014c <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	2301      	movs	r3, #1
 800082a:	4958      	ldr	r1, [pc, #352]	; (800098c <main+0x2cc>)
 800082c:	4850      	ldr	r0, [pc, #320]	; (8000970 <main+0x2b0>)
 800082e:	f003 fe7f 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff3, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
 8000832:	4b57      	ldr	r3, [pc, #348]	; (8000990 <main+0x2d0>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b57      	ldr	r3, [pc, #348]	; (8000994 <main+0x2d4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4957      	ldr	r1, [pc, #348]	; (8000998 <main+0x2d8>)
 800083c:	4857      	ldr	r0, [pc, #348]	; (800099c <main+0x2dc>)
 800083e:	f004 f867 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff3, strlen( UartTXbuff3 ), 1 );
 8000842:	4856      	ldr	r0, [pc, #344]	; (800099c <main+0x2dc>)
 8000844:	f7ff fc82 	bl	800014c <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	2301      	movs	r3, #1
 800084e:	4953      	ldr	r1, [pc, #332]	; (800099c <main+0x2dc>)
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <main+0x2b0>)
 8000852:	f003 fe6d 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff4, "Pot1=%u Pot2=%u \n\r",potenc1,potenc2);
 8000856:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <main+0x2e0>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <main+0x2e4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4952      	ldr	r1, [pc, #328]	; (80009a8 <main+0x2e8>)
 8000860:	4852      	ldr	r0, [pc, #328]	; (80009ac <main+0x2ec>)
 8000862:	f004 f855 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff4, strlen( UartTXbuff4 ), 1 );
 8000866:	4851      	ldr	r0, [pc, #324]	; (80009ac <main+0x2ec>)
 8000868:	f7ff fc70 	bl	800014c <strlen>
 800086c:	4603      	mov	r3, r0
 800086e:	b29a      	uxth	r2, r3
 8000870:	2301      	movs	r3, #1
 8000872:	494e      	ldr	r1, [pc, #312]	; (80009ac <main+0x2ec>)
 8000874:	483e      	ldr	r0, [pc, #248]	; (8000970 <main+0x2b0>)
 8000876:	f003 fe5b 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff5, "Togg1=%u Togg2=%u \n\r",togg1,togg2);
 800087a:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <main+0x2f0>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <main+0x2f4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	494d      	ldr	r1, [pc, #308]	; (80009b8 <main+0x2f8>)
 8000884:	484d      	ldr	r0, [pc, #308]	; (80009bc <main+0x2fc>)
 8000886:	f004 f843 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff5, strlen( UartTXbuff5 ), 1 );
 800088a:	484c      	ldr	r0, [pc, #304]	; (80009bc <main+0x2fc>)
 800088c:	f7ff fc5e 	bl	800014c <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	2301      	movs	r3, #1
 8000896:	4949      	ldr	r1, [pc, #292]	; (80009bc <main+0x2fc>)
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <main+0x2b0>)
 800089a:	f003 fe49 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff6, "Butt1=%u Butt2=%u Butt3=%u Butt4=%u \n\r",butt1,butt2,butt3,butt4);
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <main+0x300>)
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <main+0x304>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <main+0x308>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a48      	ldr	r2, [pc, #288]	; (80009cc <main+0x30c>)
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	9201      	str	r2, [sp, #4]
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	4946      	ldr	r1, [pc, #280]	; (80009d0 <main+0x310>)
 80008b8:	4846      	ldr	r0, [pc, #280]	; (80009d4 <main+0x314>)
 80008ba:	f004 f829 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff6, strlen( UartTXbuff6 ), 1 );
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <main+0x314>)
 80008c0:	f7ff fc44 	bl	800014c <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	2301      	movs	r3, #1
 80008ca:	4942      	ldr	r1, [pc, #264]	; (80009d4 <main+0x314>)
 80008cc:	4828      	ldr	r0, [pc, #160]	; (8000970 <main+0x2b0>)
 80008ce:	f003 fe2f 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff7, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <main+0x318>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <main+0x31c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4941      	ldr	r1, [pc, #260]	; (80009e0 <main+0x320>)
 80008dc:	4841      	ldr	r0, [pc, #260]	; (80009e4 <main+0x324>)
 80008de:	f004 f817 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff7, strlen( UartTXbuff7 ), 1 );
 80008e2:	4840      	ldr	r0, [pc, #256]	; (80009e4 <main+0x324>)
 80008e4:	f7ff fc32 	bl	800014c <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	2301      	movs	r3, #1
 80008ee:	493d      	ldr	r1, [pc, #244]	; (80009e4 <main+0x324>)
 80008f0:	481f      	ldr	r0, [pc, #124]	; (8000970 <main+0x2b0>)
 80008f2:	f003 fe1d 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff8, "w1=%u w2=%u  w3=%u w4=%u \n\r",watch1,watch2,watch3,watch4 );
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <main+0x328>)
 80008f8:	6819      	ldr	r1, [r3, #0]
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <main+0x32c>)
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <main+0x330>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a3c      	ldr	r2, [pc, #240]	; (80009f4 <main+0x334>)
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	9201      	str	r2, [sp, #4]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	493a      	ldr	r1, [pc, #232]	; (80009f8 <main+0x338>)
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <main+0x33c>)
 8000912:	f003 fffd 	bl	8004910 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff8, strlen( UartTXbuff8 ), 1 );
 8000916:	4839      	ldr	r0, [pc, #228]	; (80009fc <main+0x33c>)
 8000918:	f7ff fc18 	bl	800014c <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	b29a      	uxth	r2, r3
 8000920:	2301      	movs	r3, #1
 8000922:	4936      	ldr	r1, [pc, #216]	; (80009fc <main+0x33c>)
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <main+0x2b0>)
 8000926:	f003 fe03 	bl	8004530 <HAL_UART_Transmit>

	  sprintf(UartTXbuff9, "\n\r" );
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <main+0x340>)
 800092c:	4a35      	ldr	r2, [pc, #212]	; (8000a04 <main+0x344>)
 800092e:	8811      	ldrh	r1, [r2, #0]
 8000930:	7892      	ldrb	r2, [r2, #2]
 8000932:	8019      	strh	r1, [r3, #0]
 8000934:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit ( &huart1, UartTXbuff9, strlen( UartTXbuff9 ), 1 );
 8000936:	4832      	ldr	r0, [pc, #200]	; (8000a00 <main+0x340>)
 8000938:	f7ff fc08 	bl	800014c <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	2301      	movs	r3, #1
 8000942:	492f      	ldr	r1, [pc, #188]	; (8000a00 <main+0x340>)
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <main+0x2b0>)
 8000946:	f003 fdf3 	bl	8004530 <HAL_UART_Transmit>
  {
 800094a:	e71f      	b.n	800078c <main+0xcc>
 800094c:	200003a4 	.word	0x200003a4
 8000950:	20000484 	.word	0x20000484
 8000954:	40003800 	.word	0x40003800
 8000958:	40010c00 	.word	0x40010c00
 800095c:	20000318 	.word	0x20000318
 8000960:	08005254 	.word	0x08005254
 8000964:	40011000 	.word	0x40011000
 8000968:	20000320 	.word	0x20000320
 800096c:	0800514c 	.word	0x0800514c
 8000970:	200003d8 	.word	0x200003d8
 8000974:	20000614 	.word	0x20000614
 8000978:	08005154 	.word	0x08005154
 800097c:	08005160 	.word	0x08005160
 8000980:	200004c4 	.word	0x200004c4
 8000984:	200003d4 	.word	0x200003d4
 8000988:	08005170 	.word	0x08005170
 800098c:	20000534 	.word	0x20000534
 8000990:	200005a0 	.word	0x200005a0
 8000994:	200000a8 	.word	0x200000a8
 8000998:	08005184 	.word	0x08005184
 800099c:	200004cc 	.word	0x200004cc
 80009a0:	2000059c 	.word	0x2000059c
 80009a4:	20000608 	.word	0x20000608
 80009a8:	08005198 	.word	0x08005198
 80009ac:	200005a4 	.word	0x200005a4
 80009b0:	20000480 	.word	0x20000480
 80009b4:	20000610 	.word	0x20000610
 80009b8:	080051ac 	.word	0x080051ac
 80009bc:	200002b4 	.word	0x200002b4
 80009c0:	20000530 	.word	0x20000530
 80009c4:	2000060c 	.word	0x2000060c
 80009c8:	20000418 	.word	0x20000418
 80009cc:	200000ac 	.word	0x200000ac
 80009d0:	080051c4 	.word	0x080051c4
 80009d4:	200001e4 	.word	0x200001e4
 80009d8:	2000016c 	.word	0x2000016c
 80009dc:	20000598 	.word	0x20000598
 80009e0:	080051ec 	.word	0x080051ec
 80009e4:	2000041c 	.word	0x2000041c
 80009e8:	2000031c 	.word	0x2000031c
 80009ec:	20000248 	.word	0x20000248
 80009f0:	200004c8 	.word	0x200004c8
 80009f4:	200002b0 	.word	0x200002b0
 80009f8:	08005204 	.word	0x08005204
 80009fc:	20000108 	.word	0x20000108
 8000a00:	2000024c 	.word	0x2000024c
 8000a04:	08005220 	.word	0x08005220

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a12:	2228      	movs	r2, #40	; 0x28
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 ff72 	bl	8004900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a46:	2301      	movs	r3, #1
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 f9e2 	bl	8002e28 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a6a:	f000 fa4d 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fc4c 	bl	8003328 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a96:	f000 fa37 	bl	8000f08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fdda 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ab2:	f000 fa29 	bl	8000f08 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3750      	adds	r7, #80	; 0x50
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <MX_ADC1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000aea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000afe:	f001 f951 	bl	8001da4 <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 f9fe 	bl	8000f08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0x74>)
 8000b1e:	f001 fbcd 	bl	80022bc <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 f9ee 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200003a4 	.word	0x200003a4
 8000b38:	40012400 	.word	0x40012400

08000b3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C2_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C2_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C2_Init+0x50>)
 8000b7a:	f002 f82d 	bl	8002bd8 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f9c0 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000170 	.word	0x20000170
 8000b90:	40005800 	.word	0x40005800
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <MX_SPI2_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bcc:	2218      	movs	r2, #24
 8000bce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_SPI2_Init+0x64>)
 8000bea:	f002 feab 	bl	8003944 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 f988 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000b0 	.word	0x200000b0
 8000c00:	40003800 	.word	0x40003800

08000c04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	; 0x58
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fe5f 	bl	8004900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c44:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <MX_TIM1_Init+0x188>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000c48:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c4a:	2247      	movs	r2, #71	; 0x47
 8000c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000c54:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c56:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b4a      	ldr	r3, [pc, #296]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c6e:	4846      	ldr	r0, [pc, #280]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c70:	f002 fec9 	bl	8003a06 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c7a:	f000 f945 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c88:	4619      	mov	r1, r3
 8000c8a:	483f      	ldr	r0, [pc, #252]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c8c:	f003 f812 	bl	8003cb4 <HAL_TIM_ConfigClockSource>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c96:	f000 f937 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c9a:	483b      	ldr	r0, [pc, #236]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000c9c:	f002 fede 	bl	8003a5c <HAL_TIM_PWM_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ca6:	f000 f92f 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4833      	ldr	r0, [pc, #204]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000cba:	f003 fb57 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cc4:	f000 f920 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc8:	2360      	movs	r3, #96	; 0x60
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000cf0:	f002 ff1a 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000cfa:	f000 f905 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	2204      	movs	r2, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000d08:	f002 ff0e 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000d12:	f000 f8f9 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000d20:	f002 ff02 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d2a:	f000 f8ed 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	220c      	movs	r2, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000d38:	f002 fef6 	bl	8003b28 <HAL_TIM_PWM_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d42:	f000 f8e1 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000d6a:	f003 fb43 	bl	80043f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000d74:	f000 f8c8 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM1_Init+0x184>)
 8000d7a:	f000 fd35 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3758      	adds	r7, #88	; 0x58
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000484 	.word	0x20000484
 8000d8c:	40012c00 	.word	0x40012c00

08000d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART1_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f003 fb65 	bl	8004496 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f899 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003d8 	.word	0x200003d8
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0320 	and.w	r3, r3, #32
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a2c      	ldr	r2, [pc, #176]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x114>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5e:	4827      	ldr	r0, [pc, #156]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e60:	f001 fea1 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6a:	4825      	ldr	r0, [pc, #148]	; (8000f00 <MX_GPIO_Init+0x11c>)
 8000e6c:	f001 fe9b 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e76:	4823      	ldr	r0, [pc, #140]	; (8000f04 <MX_GPIO_Init+0x120>)
 8000e78:	f001 fe95 	bl	8002ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4819      	ldr	r0, [pc, #100]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e96:	f001 fd15 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_GPIO_Init+0x11c>)
 8000eb4:	f001 fd06 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_GPIO_Init+0x120>)
 8000ece:	f001 fcf9 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_GPIO_Init+0x120>)
 8000eec:	f001 fcea 	bl	80028c4 <HAL_GPIO_Init>

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40011000 	.word	0x40011000
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40010800 	.word	0x40010800

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <nRF24_LL_RW>:
}




uint8_t nRF24_LL_RW(uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8000f1e:	bf00      	nop
 8000f20:	2102      	movs	r1, #2
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <nRF24_LL_RW+0x48>)
 8000f24:	f7ff fbb2 	bl	800068c <SPI_I2S_GetFlagStatus>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f8      	beq.n	8000f20 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <nRF24_LL_RW+0x48>)
 8000f36:	f7ff fb8f 	bl	8000658 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8000f3a:	bf00      	nop
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <nRF24_LL_RW+0x48>)
 8000f40:	f7ff fba4 	bl	800068c <SPI_I2S_GetFlagStatus>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f8      	beq.n	8000f3c <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <nRF24_LL_RW+0x48>)
 8000f4c:	f7ff fb92 	bl	8000674 <SPI_I2S_ReceiveData>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40003800 	.word	0x40003800

08000f60 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <nRF24_ReadReg+0x44>)
 8000f72:	f001 fe18 	bl	8002ba6 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffc8 	bl	8000f14 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000f84:	20ff      	movs	r0, #255	; 0xff
 8000f86:	f7ff ffc5 	bl	8000f14 <nRF24_LL_RW>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <nRF24_ReadReg+0x44>)
 8000f96:	f001 fe06 	bl	8002ba6 <HAL_GPIO_WritePin>

	return value;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbe:	481a      	ldr	r0, [pc, #104]	; (8001028 <nRF24_WriteReg+0x80>)
 8000fc0:	f001 fdf1 	bl	8002ba6 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	d810      	bhi.n	8000fec <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff99 	bl	8000f14 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff95 	bl	8000f14 <nRF24_LL_RW>
 8000fea:	e013      	b.n	8001014 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff90 	bl	8000f14 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2be1      	cmp	r3, #225	; 0xe1
 8000ff8:	d00c      	beq.n	8001014 <nRF24_WriteReg+0x6c>
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2be2      	cmp	r3, #226	; 0xe2
 8000ffe:	d009      	beq.n	8001014 <nRF24_WriteReg+0x6c>
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2be3      	cmp	r3, #227	; 0xe3
 8001004:	d006      	beq.n	8001014 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d003      	beq.n	8001014 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff80 	bl	8000f14 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <nRF24_WriteReg+0x80>)
 800101c:	f001 fdc3 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010800 	.word	0x40010800

0800102c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <nRF24_ReadMBReg+0x54>)
 8001044:	f001 fdaf 	bl	8002ba6 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff62 	bl	8000f14 <nRF24_LL_RW>
	while (count--) {
 8001050:	e007      	b.n	8001062 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001052:	683c      	ldr	r4, [r7, #0]
 8001054:	1c63      	adds	r3, r4, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	f7ff ff5b 	bl	8000f14 <nRF24_LL_RW>
 800105e:	4603      	mov	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	71ba      	strb	r2, [r7, #6]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f2      	bne.n	8001052 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <nRF24_ReadMBReg+0x54>)
 8001074:	f001 fd97 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	40010800 	.word	0x40010800

08001084 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <nRF24_WriteMBReg+0x54>)
 800109c:	f001 fd83 	bl	8002ba6 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff36 	bl	8000f14 <nRF24_LL_RW>
	while (count--) {
 80010a8:	e006      	b.n	80010b8 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	603a      	str	r2, [r7, #0]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff2e 	bl	8000f14 <nRF24_LL_RW>
	while (count--) {
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	71ba      	strb	r2, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f3      	bne.n	80010aa <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <nRF24_WriteMBReg+0x54>)
 80010ca:	f001 fd6c 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010800 	.word	0x40010800

080010dc <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80010e0:	2108      	movs	r1, #8
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff60 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80010e8:	213f      	movs	r1, #63	; 0x3f
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff ff5c 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80010f0:	2103      	movs	r1, #3
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff ff58 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80010f8:	2103      	movs	r1, #3
 80010fa:	2003      	movs	r0, #3
 80010fc:	f7ff ff54 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8001100:	2103      	movs	r1, #3
 8001102:	2004      	movs	r0, #4
 8001104:	f7ff ff50 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001108:	2102      	movs	r1, #2
 800110a:	2005      	movs	r0, #5
 800110c:	f7ff ff4c 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8001110:	210e      	movs	r1, #14
 8001112:	2006      	movs	r0, #6
 8001114:	f7ff ff48 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001118:	2100      	movs	r1, #0
 800111a:	2007      	movs	r0, #7
 800111c:	f7ff ff44 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8001120:	2100      	movs	r1, #0
 8001122:	2011      	movs	r0, #17
 8001124:	f7ff ff40 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	2012      	movs	r0, #18
 800112c:	f7ff ff3c 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8001130:	2100      	movs	r1, #0
 8001132:	2013      	movs	r0, #19
 8001134:	f7ff ff38 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001138:	2100      	movs	r1, #0
 800113a:	2014      	movs	r0, #20
 800113c:	f7ff ff34 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8001140:	2100      	movs	r1, #0
 8001142:	2015      	movs	r0, #21
 8001144:	f7ff ff30 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001148:	2100      	movs	r1, #0
 800114a:	2016      	movs	r0, #22
 800114c:	f7ff ff2c 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8001150:	2100      	movs	r1, #0
 8001152:	201c      	movs	r0, #28
 8001154:	f7ff ff28 	bl	8000fa8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001158:	2100      	movs	r1, #0
 800115a:	201d      	movs	r0, #29
 800115c:	f7ff ff24 	bl	8000fa8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8001160:	f000 f9da 	bl	8001518 <nRF24_FlushRX>
	nRF24_FlushTX();
 8001164:	f000 f9d0 	bl	8001508 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001168:	f000 f9de 	bl	8001528 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <nRF24_Init+0xa0>)
 8001174:	f001 fd17 	bl	8002ba6 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010800 	.word	0x40010800

08001180 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <nRF24_Check+0x58>)
 8001188:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800118a:	2205      	movs	r2, #5
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	2030      	movs	r0, #48	; 0x30
 8001190:	f7ff ff78 	bl	8001084 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8001194:	463b      	mov	r3, r7
 8001196:	2205      	movs	r2, #5
 8001198:	4619      	mov	r1, r3
 800119a:	2010      	movs	r0, #16
 800119c:	f7ff ff46 	bl	800102c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e010      	b.n	80011c8 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	4413      	add	r3, r2
 80011ae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1c59      	adds	r1, r3, #1
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d001      	beq.n	80011c2 <nRF24_Check+0x42>
 80011be:	2300      	movs	r3, #0
 80011c0:	e006      	b.n	80011d0 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d9eb      	bls.n	80011a6 <nRF24_Check+0x26>
	}

	return 1;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08005224 	.word	0x08005224

080011dc <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff feba 	bl	8000f60 <nRF24_ReadReg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d104      	bne.n	8001200 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e003      	b.n	8001208 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f023 0302 	bic.w	r3, r3, #2
 8001206:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fecb 	bl	8000fa8 <nRF24_WriteReg>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fe9b 	bl	8000f60 <nRF24_ReadReg>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	b25a      	sxtb	r2, r3
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	4313      	orrs	r3, r2
 8001246:	b25b      	sxtb	r3, r3
 8001248:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4619      	mov	r1, r3
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff feaa 	bl	8000fa8 <nRF24_WriteReg>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fe7a 	bl	8000f60 <nRF24_ReadReg>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f023 030c 	bic.w	r3, r3, #12
 8001276:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	b25a      	sxtb	r2, r3
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4313      	orrs	r3, r2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4619      	mov	r1, r3
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe89 	bl	8000fa8 <nRF24_WriteReg>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2005      	movs	r0, #5
 80012ae:	f7ff fe7b 	bl	8000fa8 <nRF24_WriteReg>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	3b02      	subs	r3, #2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff fe6b 	bl	8000fa8 <nRF24_WriteReg>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d846      	bhi.n	800137c <nRF24_SetAddr+0xa0>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <nRF24_SetAddr+0x18>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001311 	.word	0x08001311
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001369 	.word	0x08001369
 8001300:	08001369 	.word	0x08001369
 8001304:	08001369 	.word	0x08001369
 8001308:	08001369 	.word	0x08001369
 800130c:	08001311 	.word	0x08001311
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff fe25 	bl	8000f60 <nRF24_ReadReg>
 8001316:	4603      	mov	r3, r0
 8001318:	3301      	adds	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	4413      	add	r3, r2
 8001322:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <nRF24_SetAddr+0xac>)
 800132c:	f001 fc3b 	bl	8002ba6 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <nRF24_SetAddr+0xb0>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fde9 	bl	8000f14 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fde2 	bl	8000f14 <nRF24_LL_RW>
			} while (addr_width--);
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	73fa      	strb	r2, [r7, #15]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f3      	bne.n	8001342 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <nRF24_SetAddr+0xac>)
 8001362:	f001 fc20 	bl	8002ba6 <HAL_GPIO_WritePin>
			break;
 8001366:	e00a      	b.n	800137e <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <nRF24_SetAddr+0xb0>)
 800136c:	5cd2      	ldrb	r2, [r2, r3]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7ff fe17 	bl	8000fa8 <nRF24_WriteReg>
			break;
 800137a:	e000      	b.n	800137e <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 800137c:	bf00      	nop
	}
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800
 800138c:	08005260 	.word	0x08005260

08001390 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800139a:	2006      	movs	r0, #6
 800139c:	f7ff fde0 	bl	8000f60 <nRF24_ReadReg>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f023 0306 	bic.w	r3, r3, #6
 80013aa:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	4619      	mov	r1, r3
 80013b8:	2006      	movs	r0, #6
 80013ba:	f7ff fdf5 	bl	8000fa8 <nRF24_WriteReg>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80013d0:	2006      	movs	r0, #6
 80013d2:	f7ff fdc5 	bl	8000f60 <nRF24_ReadReg>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80013e0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4619      	mov	r1, r3
 80013ee:	2006      	movs	r0, #6
 80013f0:	f7ff fdda 	bl	8000fa8 <nRF24_WriteReg>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	460b      	mov	r3, r1
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	4613      	mov	r3, r2
 800140c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fda6 	bl	8000f60 <nRF24_ReadReg>
 8001414:	4603      	mov	r3, r0
 8001416:	b25a      	sxtb	r2, r3
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b25b      	sxtb	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800142c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4619      	mov	r1, r3
 8001432:	2002      	movs	r0, #2
 8001434:	f7ff fdb8 	bl	8000fa8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <nRF24_SetRXPipe+0xa4>)
 800143c:	5cd2      	ldrb	r2, [r2, r3]
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fdad 	bl	8000fa8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fd86 	bl	8000f60 <nRF24_ReadReg>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10a      	bne.n	8001474 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	b25a      	sxtb	r2, r3
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4313      	orrs	r3, r2
 800146e:	b25b      	sxtb	r3, r3
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e00b      	b.n	800148c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2201      	movs	r2, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	b25b      	sxtb	r3, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4013      	ands	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4619      	mov	r1, r3
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff fd89 	bl	8000fa8 <nRF24_WriteReg>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	08005258 	.word	0x08005258

080014a4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d904      	bls.n	80014be <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fd76 	bl	8000fa8 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80014bc:	e015      	b.n	80014ea <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fd4e 	bl	8000f60 <nRF24_ReadReg>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2201      	movs	r2, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4013      	ands	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fd5f 	bl	8000fa8 <nRF24_WriteReg>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80014f6:	2017      	movs	r0, #23
 80014f8:	f7ff fd32 	bl	8000f60 <nRF24_ReadReg>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}

08001508 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800150c:	21ff      	movs	r1, #255	; 0xff
 800150e:	20e1      	movs	r0, #225	; 0xe1
 8001510:	f7ff fd4a 	bl	8000fa8 <nRF24_WriteReg>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800151c:	21ff      	movs	r1, #255	; 0xff
 800151e:	20e2      	movs	r0, #226	; 0xe2
 8001520:	f7ff fd42 	bl	8000fa8 <nRF24_WriteReg>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800152e:	2007      	movs	r0, #7
 8001530:	f7ff fd16 	bl	8000f60 <nRF24_ReadReg>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800153e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4619      	mov	r1, r3
 8001544:	2007      	movs	r0, #7
 8001546:	f7ff fd2f 	bl	8000fa8 <nRF24_WriteReg>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800155e:	2007      	movs	r0, #7
 8001560:	f7ff fcfe 	bl	8000f60 <nRF24_ReadReg>
 8001564:	4603      	mov	r3, r0
 8001566:	105b      	asrs	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d816      	bhi.n	80015a4 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <nRF24_ReadPayload+0x60>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fcef 	bl	8000f60 <nRF24_ReadReg>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	2061      	movs	r0, #97	; 0x61
 800159c:	f7ff fd46 	bl	800102c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	e003      	b.n	80015ac <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80015aa:	23ff      	movs	r3, #255	; 0xff
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	08005258 	.word	0x08005258

080015b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_MspInit+0x5c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x5c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_MspInit+0x60>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_MspInit+0x60>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000

0800161c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_ADC_MspInit+0x6c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d121      	bne.n	8001680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_ADC_MspInit+0x70>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_ADC_MspInit+0x70>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_ADC_MspInit+0x70>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_ADC_MspInit+0x74>)
 800167c:	f001 f922 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40012400 	.word	0x40012400
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_I2C_MspInit+0x74>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d124      	bne.n	80016fe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <HAL_I2C_MspInit+0x7c>)
 80016e2:	f001 f8ef 	bl	80028c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_I2C_MspInit+0x78>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005800 	.word	0x40005800
 800170c:	40021000 	.word	0x40021000
 8001710:	40010c00 	.word	0x40010c00

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d131      	bne.n	8001798 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001764:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_SPI_MspInit+0x94>)
 800177a:	f001 f8a3 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800177e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_SPI_MspInit+0x94>)
 8001794:	f001 f896 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40003800 	.word	0x40003800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010c00 	.word	0x40010c00

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_TIM_Base_MspInit+0x34>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10b      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_TIM_MspPostInit+0x5c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d118      	bne.n	800183a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_TIM_MspPostInit+0x60>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0x60>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_TIM_MspPostInit+0x60>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001820:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_TIM_MspPostInit+0x64>)
 8001836:	f001 f845 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40010800 	.word	0x40010800

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <HAL_UART_MspInit+0xa4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d13d      	bne.n	80018ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 8001876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0xa8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4812      	ldr	r0, [pc, #72]	; (80018fc <HAL_UART_MspInit+0xac>)
 80018b4:	f001 f806 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <HAL_UART_MspInit+0xac>)
 80018cc:	f000 fffa 	bl	80028c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_UART_MspInit+0xb0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_UART_MspInit+0xb0>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40010000 	.word	0x40010000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <HardFault_Handler+0x4>

08001916 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <MemManage_Handler+0x4>

0800191c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <BusFault_Handler+0x4>

08001922 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <UsageFault_Handler+0x4>

08001928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f9ea 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 8001954:	210a      	movs	r1, #10
 8001956:	486c      	ldr	r0, [pc, #432]	; (8001b08 <SysTick_Handler+0x1bc>)
 8001958:	f000 fbaa 	bl	80020b0 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 800195c:	486a      	ldr	r0, [pc, #424]	; (8001b08 <SysTick_Handler+0x1bc>)
 800195e:	f000 fca1 	bl	80022a4 <HAL_ADC_GetValue>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fcaf 	bl	80002c8 <__aeabi_ui2f>
 800196a:	4603      	mov	r3, r0
 800196c:	4967      	ldr	r1, [pc, #412]	; (8001b0c <SysTick_Handler+0x1c0>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd02 	bl	8000378 <__aeabi_fmul>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fe4e 	bl	8000618 <__aeabi_f2uiz>
 800197c:	4602      	mov	r2, r0
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <SysTick_Handler+0x1c4>)
 8001980:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
   BAttmVhist[batthistindx]=BattmV;
 8001982:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <SysTick_Handler+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <SysTick_Handler+0x1c4>)
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4963      	ldr	r1, [pc, #396]	; (8001b18 <SysTick_Handler+0x1cc>)
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   batthistindx++;
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <SysTick_Handler+0x1c8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a5f      	ldr	r2, [pc, #380]	; (8001b14 <SysTick_Handler+0x1c8>)
 8001998:	6013      	str	r3, [r2, #0]

   if(batthistindx>=BATTAVERAGETIME)batthistindx=0;
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <SysTick_Handler+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b31      	cmp	r3, #49	; 0x31
 80019a0:	d902      	bls.n	80019a8 <SysTick_Handler+0x5c>
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <SysTick_Handler+0x1c8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

   BattmVSUM=0;
 80019a8:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <SysTick_Handler+0x1d0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

   for(i=0;i<BATTAVERAGETIME;i++)
 80019ae:	4b5c      	ldr	r3, [pc, #368]	; (8001b20 <SysTick_Handler+0x1d4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e00e      	b.n	80019d4 <SysTick_Handler+0x88>
   {
     BattmVSUM+=BAttmVhist[i];
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <SysTick_Handler+0x1d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <SysTick_Handler+0x1cc>)
 80019bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <SysTick_Handler+0x1d0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <SysTick_Handler+0x1d0>)
 80019c8:	6013      	str	r3, [r2, #0]
   for(i=0;i<BATTAVERAGETIME;i++)
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <SysTick_Handler+0x1d4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <SysTick_Handler+0x1d4>)
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <SysTick_Handler+0x1d4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b31      	cmp	r3, #49	; 0x31
 80019da:	d9ec      	bls.n	80019b6 <SysTick_Handler+0x6a>
   }

   BattmVAVG=BattmVSUM/(BATTAVERAGETIME);//------------------------------
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <SysTick_Handler+0x1d0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <SysTick_Handler+0x1d8>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <SysTick_Handler+0x1dc>)
 80019ea:	6013      	str	r3, [r2, #0]


  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <SysTick_Handler+0x1e0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <SysTick_Handler+0x1e4>)
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <SysTick_Handler+0x1e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <SysTick_Handler+0x1e8>)
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <SysTick_Handler+0x1e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <SysTick_Handler+0x1ec>)
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <SysTick_Handler+0x1e0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <SysTick_Handler+0x1f0>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40


  //Read IRQ
  watch3=HAL_GPIO_ReadPin(NRF24_IRQ_GPIO_Port,NRF24_IRQ_Pin);
 8001a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a18:	4849      	ldr	r0, [pc, #292]	; (8001b40 <SysTick_Handler+0x1f4>)
 8001a1a:	f001 f8ad 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <SysTick_Handler+0x1f8>)
 8001a24:	601a      	str	r2, [r3, #0]
  if(watch3==0)watch4++;
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <SysTick_Handler+0x1f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <SysTick_Handler+0xec>
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <SysTick_Handler+0x1fc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <SysTick_Handler+0x1fc>)
 8001a36:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8001a38:	f7ff fd5b 	bl	80014f2 <nRF24_GetStatus_RXFIFO>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d05f      	beq.n	8001b02 <SysTick_Handler+0x1b6>
  {
    // Get a payload from the transceiver
    nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8001a42:	4942      	ldr	r1, [pc, #264]	; (8001b4c <SysTick_Handler+0x200>)
 8001a44:	4842      	ldr	r0, [pc, #264]	; (8001b50 <SysTick_Handler+0x204>)
 8001a46:	f7ff fd85 	bl	8001554 <nRF24_ReadPayload>
    // Clear all pending IRQ flags
    nRF24_ClearIRQFlags();
 8001a4a:	f7ff fd6d 	bl	8001528 <nRF24_ClearIRQFlags>

    Ljoyupdown=nRF24_payloadRX[0];
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <SysTick_Handler+0x204>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <SysTick_Handler+0x208>)
 8001a56:	601a      	str	r2, [r3, #0]
    Ljoyleftright=nRF24_payloadRX[1];
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <SysTick_Handler+0x204>)
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <SysTick_Handler+0x20c>)
 8001a60:	601a      	str	r2, [r3, #0]
    Djoyupdown=nRF24_payloadRX[2];
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <SysTick_Handler+0x204>)
 8001a64:	789b      	ldrb	r3, [r3, #2]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <SysTick_Handler+0x210>)
 8001a6a:	601a      	str	r2, [r3, #0]
    Djoyleftright=nRF24_payloadRX[3];
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <SysTick_Handler+0x204>)
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <SysTick_Handler+0x214>)
 8001a74:	601a      	str	r2, [r3, #0]
    potenc1=nRF24_payloadRX[4];
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <SysTick_Handler+0x204>)
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <SysTick_Handler+0x218>)
 8001a7e:	601a      	str	r2, [r3, #0]
    potenc2=nRF24_payloadRX[5];
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <SysTick_Handler+0x204>)
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <SysTick_Handler+0x21c>)
 8001a88:	601a      	str	r2, [r3, #0]

    togg1=nRF24_payloadRX[6]>>7;
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <SysTick_Handler+0x204>)
 8001a8c:	799b      	ldrb	r3, [r3, #6]
 8001a8e:	09db      	lsrs	r3, r3, #7
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <SysTick_Handler+0x220>)
 8001a96:	601a      	str	r2, [r3, #0]
    togg2=(nRF24_payloadRX[6] & 64 )>>6;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <SysTick_Handler+0x204>)
 8001a9a:	799b      	ldrb	r3, [r3, #6]
 8001a9c:	119b      	asrs	r3, r3, #6
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <SysTick_Handler+0x224>)
 8001aa4:	6013      	str	r3, [r2, #0]
    butt1=(nRF24_payloadRX[6] & 32 )>>5;
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <SysTick_Handler+0x204>)
 8001aa8:	799b      	ldrb	r3, [r3, #6]
 8001aaa:	115b      	asrs	r3, r3, #5
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <SysTick_Handler+0x228>)
 8001ab2:	6013      	str	r3, [r2, #0]
	butt2=(nRF24_payloadRX[6] & 16 )>>4;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <SysTick_Handler+0x204>)
 8001ab6:	799b      	ldrb	r3, [r3, #6]
 8001ab8:	111b      	asrs	r3, r3, #4
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	4a2e      	ldr	r2, [pc, #184]	; (8001b78 <SysTick_Handler+0x22c>)
 8001ac0:	6013      	str	r3, [r2, #0]
	butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <SysTick_Handler+0x204>)
 8001ac4:	799b      	ldrb	r3, [r3, #6]
 8001ac6:	10db      	asrs	r3, r3, #3
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <SysTick_Handler+0x230>)
 8001ace:	6013      	str	r3, [r2, #0]
	butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <SysTick_Handler+0x204>)
 8001ad2:	799b      	ldrb	r3, [r3, #6]
 8001ad4:	109b      	asrs	r3, r3, #2
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <SysTick_Handler+0x234>)
 8001adc:	6013      	str	r3, [r2, #0]
	buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <SysTick_Handler+0x204>)
 8001ae0:	799b      	ldrb	r3, [r3, #6]
 8001ae2:	105b      	asrs	r3, r3, #1
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <SysTick_Handler+0x238>)
 8001aea:	6013      	str	r3, [r2, #0]
	buttD=(nRF24_payloadRX[6] & 1 );
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <SysTick_Handler+0x204>)
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <SysTick_Handler+0x23c>)
 8001af6:	6013      	str	r3, [r2, #0]

    watch1++;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <SysTick_Handler+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <SysTick_Handler+0x240>)
 8001b00:	6013      	str	r3, [r2, #0]
  }
  //-----------------------------------------------------


  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200003a4 	.word	0x200003a4
 8001b0c:	4090ac29 	.word	0x4090ac29
 8001b10:	20000758 	.word	0x20000758
 8001b14:	20000098 	.word	0x20000098
 8001b18:	20000684 	.word	0x20000684
 8001b1c:	20000090 	.word	0x20000090
 8001b20:	20000750 	.word	0x20000750
 8001b24:	51eb851f 	.word	0x51eb851f
 8001b28:	20000094 	.word	0x20000094
 8001b2c:	20000484 	.word	0x20000484
 8001b30:	20000754 	.word	0x20000754
 8001b34:	20000680 	.word	0x20000680
 8001b38:	2000067c 	.word	0x2000067c
 8001b3c:	2000074c 	.word	0x2000074c
 8001b40:	40010800 	.word	0x40010800
 8001b44:	200004c8 	.word	0x200004c8
 8001b48:	200002b0 	.word	0x200002b0
 8001b4c:	2000008c 	.word	0x2000008c
 8001b50:	200001c4 	.word	0x200001c4
 8001b54:	200004c4 	.word	0x200004c4
 8001b58:	200003d4 	.word	0x200003d4
 8001b5c:	200005a0 	.word	0x200005a0
 8001b60:	200000a8 	.word	0x200000a8
 8001b64:	2000059c 	.word	0x2000059c
 8001b68:	20000608 	.word	0x20000608
 8001b6c:	20000480 	.word	0x20000480
 8001b70:	20000610 	.word	0x20000610
 8001b74:	20000530 	.word	0x20000530
 8001b78:	2000060c 	.word	0x2000060c
 8001b7c:	20000418 	.word	0x20000418
 8001b80:	200000ac 	.word	0x200000ac
 8001b84:	2000016c 	.word	0x2000016c
 8001b88:	20000598 	.word	0x20000598
 8001b8c:	2000031c 	.word	0x2000031c

08001b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x50>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x16>
		heap_end = &end;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <_sbrk+0x50>)
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <_sbrk+0x54>)
 8001ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <_sbrk+0x50>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <_sbrk+0x50>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	466a      	mov	r2, sp
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d907      	bls.n	8001bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bba:	f002 fe77 	bl	80048ac <__errno>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc8:	e006      	b.n	8001bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <_sbrk+0x50>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <_sbrk+0x50>)
 8001bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000009c 	.word	0x2000009c
 8001be4:	20000768 	.word	0x20000768

08001be8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <SystemInit+0x5c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <SystemInit+0x5c>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <SystemInit+0x5c>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4911      	ldr	r1, [pc, #68]	; (8001c44 <SystemInit+0x5c>)
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <SystemInit+0x60>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <SystemInit+0x5c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <SystemInit+0x5c>)
 8001c0a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <SystemInit+0x5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SystemInit+0x5c>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <SystemInit+0x5c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <SystemInit+0x5c>)
 8001c26:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c2a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SystemInit+0x5c>)
 8001c2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c32:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SystemInit+0x64>)
 8001c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000
 8001c48:	f8ff0000 	.word	0xf8ff0000
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c52:	e003      	b.n	8001c5c <LoopCopyDataInit>

08001c54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c5a:	3104      	adds	r1, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c5c:	480a      	ldr	r0, [pc, #40]	; (8001c88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c64:	d3f6      	bcc.n	8001c54 <CopyDataInit>
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c68:	e002      	b.n	8001c70 <LoopFillZerobss>

08001c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c6c:	f842 3b04 	str.w	r3, [r2], #4

08001c70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c74:	d3f9      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c76:	f7ff ffb7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f002 fe1d 	bl	80048b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7e:	f7fe fd1f 	bl	80006c0 <main>
  bx lr
 8001c82:	4770      	bx	lr
  ldr r3, =_sidata
 8001c84:	080052bc 	.word	0x080052bc
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c8c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001c90:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001c94:	20000764 	.word	0x20000764

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fdd5 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fc7e 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fddf 	bl	80028aa <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f000 fdb5 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000008 	.word	0x20000008
 8001d48:	2000075c 	.word	0x2000075c

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	2000075c 	.word	0x2000075c

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_Delay+0x40>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffe0 	bl	8001d4c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0be      	b.n	8001f44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fc1a 	bl	800161c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fbb1 	bl	8002550 <ADC_ConversionStop_Disable>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8099 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8095 	bne.w	8001f32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0xa2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_ADC_Init+0xa8>
 8001e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_Init+0xaa>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7d1b      	ldrb	r3, [r3, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b1b      	ldrb	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	035a      	lsls	r2, r3, #13
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_ADC_Init+0x1a8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_Init+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_ADC_Init+0x1ac>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f023 0312 	bic.w	r3, r3, #18
 8001f18:	f043 0210 	orr.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f50:	ff1f0efe 	.word	0xff1f0efe

08001f54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Start+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e098      	b.n	80020a0 <HAL_ADC_Start+0x14c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa98 	bl	80024ac <ADC_Enable>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8087 	bne.w	8002096 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a41      	ldr	r2, [pc, #260]	; (80020a8 <HAL_ADC_Start+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_Start+0x5e>
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_ADC_Start+0x158>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d026      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fdc:	e01d      	b.n	800201a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_ADC_Start+0x158>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Start+0xaa>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_ADC_Start+0x154>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10d      	bne.n	800201a <HAL_ADC_Start+0xc6>
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_ADC_Start+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	f023 0206 	bic.w	r2, r3, #6
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
 8002032:	e002      	b.n	800203a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0202 	mvn.w	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002056:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800205a:	d113      	bne.n	8002084 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_ADC_Start+0x154>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d105      	bne.n	8002072 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_ADC_Start+0x158>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e00c      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e003      	b.n	800209e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40012800 	.word	0x40012800
 80020ac:	40012400 	.word	0x40012400

080020b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020c6:	f7ff fe41 	bl	8001d4c <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0c8      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12a      	bne.n	8002156 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d123      	bne.n	8002156 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800210e:	e01a      	b.n	8002146 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002116:	d016      	beq.n	8002146 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ADC_PollForConversion+0x7e>
 800211e:	f7ff fe15 	bl	8001d4c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20b      	bcs.n	8002146 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e09e      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0dd      	beq.n	8002110 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002154:	e06c      	b.n	8002230 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_ADC_PollForConversion+0x1dc>)
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	2002      	movs	r0, #2
 800215c:	f001 fb36 	bl	80037cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002160:	4603      	mov	r3, r0
 8002162:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6919      	ldr	r1, [r3, #16]
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_ADC_PollForConversion+0x1e0>)
 800216e:	400b      	ands	r3, r1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xf6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68d9      	ldr	r1, [r3, #12]
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_ADC_PollForConversion+0x1e4>)
 800217c:	400b      	ands	r3, r1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_PollForConversion+0xf6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_ADC_PollForConversion+0x1e8>)
 800218a:	400b      	ands	r3, r1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xf2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68d9      	ldr	r1, [r3, #12]
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_ADC_PollForConversion+0x1ec>)
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_PollForConversion+0xf2>
 800219e:	2314      	movs	r3, #20
 80021a0:	e020      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021a2:	2329      	movs	r3, #41	; 0x29
 80021a4:	e01e      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6919      	ldr	r1, [r3, #16]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_ADC_PollForConversion+0x1e8>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x112>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_ADC_PollForConversion+0x1ec>)
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_ADC_PollForConversion+0x12e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_ADC_PollForConversion+0x1f0>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x132>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_ADC_PollForConversion+0x1f0>)
 80021d8:	400b      	ands	r3, r1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x132>
 80021de:	2354      	movs	r3, #84	; 0x54
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_PollForConversion+0x134>
 80021e2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021ea:	e01d      	b.n	8002228 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f2:	d016      	beq.n	8002222 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_PollForConversion+0x15a>
 80021fa:	f7ff fda7 	bl	8001d4c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d20b      	bcs.n	8002222 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e030      	b.n	8002284 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8dd      	bhi.n	80021ec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0212 	mvn.w	r2, #18
 8002238:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002250:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002254:	d115      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800225a:	2b00      	cmp	r3, #0
 800225c:	d111      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	24924924 	.word	0x24924924
 8002294:	00924924 	.word	0x00924924
 8002298:	12492492 	.word	0x12492492
 800229c:	00492492 	.word	0x00492492
 80022a0:	00249249 	.word	0x00249249

080022a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x20>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0dc      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1da>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d81c      	bhi.n	8002326 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3b05      	subs	r3, #5
 80022fe:	221f      	movs	r2, #31
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	4019      	ands	r1, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b05      	subs	r3, #5
 8002318:	fa00 f203 	lsl.w	r2, r0, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
 8002324:	e03c      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d81c      	bhi.n	8002368 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b23      	subs	r3, #35	; 0x23
 8002340:	221f      	movs	r2, #31
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	4019      	ands	r1, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b23      	subs	r3, #35	; 0x23
 800235a:	fa00 f203 	lsl.w	r2, r0, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	e01b      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b41      	subs	r3, #65	; 0x41
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b41      	subs	r3, #65	; 0x41
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d91c      	bls.n	80023e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3b1e      	subs	r3, #30
 80023ba:	2207      	movs	r2, #7
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6898      	ldr	r0, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	e019      	b.n	8002416 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	2207      	movs	r2, #7
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d003      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002422:	2b11      	cmp	r3, #17
 8002424:	d132      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d125      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d126      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800244c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d11a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9a      	lsrs	r2, r3, #18
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_ConfigChannel+0x1b2>
 800247a:	e007      	b.n	800248c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012400 	.word	0x40012400
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d039      	beq.n	800253e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <ADC_Enable+0x9c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1b      	ldr	r2, [pc, #108]	; (800254c <ADC_Enable+0xa0>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f6:	f7ff fc29 	bl	8001d4c <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fc:	e018      	b.n	8002530 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fe:	f7ff fc25 	bl	8001d4c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d911      	bls.n	8002530 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d1df      	bne.n	80024fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000000 	.word	0x20000000
 800254c:	431bde83 	.word	0x431bde83

08002550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d127      	bne.n	80025ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800257a:	f7ff fbe7 	bl	8001d4c <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002580:	e014      	b.n	80025ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002582:	f7ff fbe3 	bl	8001d4c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d90d      	bls.n	80025ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d0e3      	beq.n	8002582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80025de:	2302      	movs	r3, #2
 80025e0:	e086      	b.n	80026f0 <HAL_ADCEx_Calibration_Start+0x12c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffb0 	bl	8002550 <ADC_ConversionStop_Disable>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d175      	bne.n	80026e6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002602:	f023 0302 	bic.w	r3, r3, #2
 8002606:	f043 0202 	orr.w	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_ADCEx_Calibration_Start+0x134>)
 8002610:	681c      	ldr	r4, [r3, #0]
 8002612:	2002      	movs	r0, #2
 8002614:	f001 f8da 	bl	80037cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002618:	4603      	mov	r3, r0
 800261a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800261e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002620:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002622:	e002      	b.n	800262a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3b01      	subs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff3b 	bl	80024ac <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0208 	orr.w	r2, r2, #8
 8002644:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002646:	f7ff fb81 	bl	8001d4c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800264c:	e014      	b.n	8002678 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800264e:	f7ff fb7d 	bl	8001d4c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b0a      	cmp	r3, #10
 800265a:	d90d      	bls.n	8002678 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f023 0312 	bic.w	r3, r3, #18
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e03b      	b.n	80026f0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e3      	bne.n	800264e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0204 	orr.w	r2, r2, #4
 8002694:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002696:	f7ff fb59 	bl	8001d4c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800269c:	e014      	b.n	80026c8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800269e:	f7ff fb55 	bl	8001d4c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d90d      	bls.n	80026c8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f023 0312 	bic.w	r3, r3, #18
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e013      	b.n	80026f0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e3      	bne.n	800269e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	20000000 	.word	0x20000000

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800283c:	f7ff ff90 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff49 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff5e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff90 	bl	80027b4 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5f 	bl	8002760 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffb0 	bl	8002818 <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d6:	e127      	b.n	8002b28 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d8:	2201      	movs	r2, #1
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8116 	bne.w	8002b22 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d034      	beq.n	8002968 <HAL_GPIO_Init+0xa4>
 80028fe:	2b12      	cmp	r3, #18
 8002900:	d80d      	bhi.n	800291e <HAL_GPIO_Init+0x5a>
 8002902:	2b02      	cmp	r3, #2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x9a>
 8002906:	2b02      	cmp	r3, #2
 8002908:	d804      	bhi.n	8002914 <HAL_GPIO_Init+0x50>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 800290e:	2b01      	cmp	r3, #1
 8002910:	d01c      	beq.n	800294c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e048      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002914:	2b03      	cmp	r3, #3
 8002916:	d043      	beq.n	80029a0 <HAL_GPIO_Init+0xdc>
 8002918:	2b11      	cmp	r3, #17
 800291a:	d01b      	beq.n	8002954 <HAL_GPIO_Init+0x90>
          break;
 800291c:	e043      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800291e:	4a89      	ldr	r2, [pc, #548]	; (8002b44 <HAL_GPIO_Init+0x280>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d026      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002924:	4a87      	ldr	r2, [pc, #540]	; (8002b44 <HAL_GPIO_Init+0x280>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d806      	bhi.n	8002938 <HAL_GPIO_Init+0x74>
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_GPIO_Init+0x284>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d020      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002930:	4a86      	ldr	r2, [pc, #536]	; (8002b4c <HAL_GPIO_Init+0x288>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_GPIO_Init+0xae>
          break;
 8002936:	e036      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002938:	4a85      	ldr	r2, [pc, #532]	; (8002b50 <HAL_GPIO_Init+0x28c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 800293e:	4a85      	ldr	r2, [pc, #532]	; (8002b54 <HAL_GPIO_Init+0x290>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d016      	beq.n	8002972 <HAL_GPIO_Init+0xae>
 8002944:	4a84      	ldr	r2, [pc, #528]	; (8002b58 <HAL_GPIO_Init+0x294>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0xae>
          break;
 800294a:	e02c      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e028      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e023      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	3308      	adds	r3, #8
 8002964:	623b      	str	r3, [r7, #32]
          break;
 8002966:	e01e      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	330c      	adds	r3, #12
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	e019      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297a:	2304      	movs	r3, #4
 800297c:	623b      	str	r3, [r7, #32]
          break;
 800297e:	e012      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002988:	2308      	movs	r3, #8
 800298a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	611a      	str	r2, [r3, #16]
          break;
 8002992:	e008      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	615a      	str	r2, [r3, #20]
          break;
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2bff      	cmp	r3, #255	; 0xff
 80029aa:	d801      	bhi.n	80029b0 <HAL_GPIO_Init+0xec>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	e001      	b.n	80029b4 <HAL_GPIO_Init+0xf0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	d802      	bhi.n	80029c2 <HAL_GPIO_Init+0xfe>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x104>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3b08      	subs	r3, #8
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	210f      	movs	r1, #15
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	401a      	ands	r2, r3
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8096 	beq.w	8002b22 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_GPIO_Init+0x298>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_GPIO_Init+0x298>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6193      	str	r3, [r2, #24]
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_GPIO_Init+0x298>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a0e:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <HAL_GPIO_Init+0x29c>)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x2a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x19e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x2a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x19a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x2a8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x196>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x192>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x1a0>
 8002a62:	2300      	movs	r3, #0
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a74:	493a      	ldr	r1, [pc, #232]	; (8002b60 <HAL_GPIO_Init+0x29c>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4938      	ldr	r1, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4933      	ldr	r1, [pc, #204]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	492e      	ldr	r1, [pc, #184]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4929      	ldr	r1, [pc, #164]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
 8002aea:	e006      	b.n	8002afa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	491f      	ldr	r1, [pc, #124]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	491a      	ldr	r1, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60cb      	str	r3, [r1, #12]
 8002b12:	e006      	b.n	8002b22 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4915      	ldr	r1, [pc, #84]	; (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f aed0 	bne.w	80028d8 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	372c      	adds	r7, #44	; 0x2c
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	10210000 	.word	0x10210000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	10120000 	.word	0x10120000
 8002b50:	10310000 	.word	0x10310000
 8002b54:	10320000 	.word	0x10320000
 8002b58:	10220000 	.word	0x10220000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40010800 	.word	0x40010800
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40011400 	.word	0x40011400
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbc:	887a      	ldrh	r2, [r7, #2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc2:	e003      	b.n	8002bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	041a      	lsls	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e10f      	b.n	8002e0a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fd48 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f000 fcda 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_I2C_Init+0x23c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d807      	bhi.n	8002c3c <HAL_I2C_Init+0x64>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_I2C_Init+0x240>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e006      	b.n	8002c4a <HAL_I2C_Init+0x72>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a77      	ldr	r2, [pc, #476]	; (8002e1c <HAL_I2C_Init+0x244>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0db      	b.n	8002e0a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_I2C_Init+0x248>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a64      	ldr	r2, [pc, #400]	; (8002e14 <HAL_I2C_Init+0x23c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d802      	bhi.n	8002c8c <HAL_I2C_Init+0xb4>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	e009      	b.n	8002ca0 <HAL_I2C_Init+0xc8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_I2C_Init+0x24c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4956      	ldr	r1, [pc, #344]	; (8002e14 <HAL_I2C_Init+0x23c>)
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d80d      	bhi.n	8002cdc <HAL_I2C_Init+0x104>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e59      	subs	r1, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	bf38      	it	cc
 8002cd8:	2304      	movcc	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1a4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x130>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x156>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x15e>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1a4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x184>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1a4>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e26c      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d00c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e54:	4b8f      	ldr	r3, [pc, #572]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d06c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x12c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d168      	bne.n	8002f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e246      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x76>
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7f      	ldr	r2, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e02e      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b78      	ldr	r3, [pc, #480]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xbc>
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a71      	ldr	r2, [pc, #452]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe ff22 	bl	8001d4c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe ff1e 	bl	8001d4c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1fa      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xe4>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe ff0e 	bl	8001d4c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe ff0a 	bl	8001d4c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1e6      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x10c>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1ba      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4939      	ldr	r1, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fec3 	bl	8001d4c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe febf 	bl	8001d4c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e19b      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fea2 	bl	8001d4c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fe9e 	bl	8001d4c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e17a      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03a      	beq.n	80030ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d019      	beq.n	8003072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe fe82 	bl	8001d4c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fe7e 	bl	8001d4c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e15a      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f000 fada 	bl	8003624 <RCC_Delay>
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fe fe68 	bl	8001d4c <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307e:	e00f      	b.n	80030a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe fe64 	bl	8001d4c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d908      	bls.n	80030a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e140      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	42420000 	.word	0x42420000
 800309c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b9e      	ldr	r3, [pc, #632]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e9      	bne.n	8003080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a6 	beq.w	8003206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b97      	ldr	r3, [pc, #604]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b94      	ldr	r3, [pc, #592]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a93      	ldr	r2, [pc, #588]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b91      	ldr	r3, [pc, #580]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a8a      	ldr	r2, [pc, #552]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fe25 	bl	8001d4c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fe fe21 	bl	8001d4c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0fd      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_OscConfig+0x4f8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x312>
 800312c:	4b7b      	ldr	r3, [pc, #492]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e02d      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x334>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b73      	ldr	r3, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a72      	ldr	r2, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	e01c      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x356>
 8003164:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a6c      	ldr	r2, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a69      	ldr	r2, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a66      	ldr	r2, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fe fdd5 	bl	8001d4c <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fdd1 	bl	8001d4c <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0ab      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ee      	beq.n	80031a6 <HAL_RCC_OscConfig+0x37e>
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fdbf 	bl	8001d4c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fdbb 	bl	8001d4c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e095      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a47      	ldr	r2, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8081 	beq.w	8003312 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d061      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d146      	bne.n	80032b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fd8f 	bl	8001d4c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fd8b 	bl	8001d4c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e067      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a19      	ldr	r1, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	430b      	orrs	r3, r1
 800327e:	4927      	ldr	r1, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fd5f 	bl	8001d4c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fd5b 	bl	8001d4c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e037      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x46a>
 80032b0:	e02f      	b.n	8003312 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_OscConfig+0x4fc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fd48 	bl	8001d4c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fd44 	bl	8001d4c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e020      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x498>
 80032de:	e018      	b.n	8003312 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e013      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	42420060 	.word	0x42420060

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0d0      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4965      	ldr	r1, [pc, #404]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800338e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d040      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e073      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4936      	ldr	r1, [pc, #216]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe fc98 	bl	8001d4c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe fc94 	bl	8001d4c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e053      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d210      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4922      	ldr	r1, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	fa21 f303 	lsr.w	r3, r1, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fbf6 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08005268 	.word	0x08005268
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003504:	1d3c      	adds	r4, r7, #4
 8003506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d002      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x40>
 8003536:	2b08      	cmp	r3, #8
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x46>
 800353a:	e02d      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800353e:	623b      	str	r3, [r7, #32]
      break;
 8003540:	e02d      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	0c9b      	lsrs	r3, r3, #18
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800354e:	4413      	add	r3, r2
 8003550:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003554:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0c5b      	lsrs	r3, r3, #17
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800356e:	4413      	add	r3, r2
 8003570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800357a:	fb02 f203 	mul.w	r2, r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	e004      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	623b      	str	r3, [r7, #32]
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800359a:	623b      	str	r3, [r7, #32]
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6a3b      	ldr	r3, [r7, #32]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc90      	pop	{r4, r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	0800522c 	.word	0x0800522c
 80035b0:	0800523c 	.word	0x0800523c
 80035b4:	40021000 	.word	0x40021000
 80035b8:	007a1200 	.word	0x007a1200
 80035bc:	003d0900 	.word	0x003d0900

080035c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000000 	.word	0x20000000

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d8:	f7ff fff2 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035dc:	4601      	mov	r1, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08005278 	.word	0x08005278

080035fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003600:	f7ff ffde 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 8003604:	4601      	mov	r1, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	0adb      	lsrs	r3, r3, #11
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4a03      	ldr	r2, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	08005278 	.word	0x08005278

08003624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <RCC_Delay+0x34>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <RCC_Delay+0x38>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0a5b      	lsrs	r3, r3, #9
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003640:	bf00      	nop
  }
  while (Delay --);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	60fa      	str	r2, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <RCC_Delay+0x1c>
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d07d      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003680:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	61d3      	str	r3, [r2, #28]
 8003698:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d118      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b4:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c0:	f7fe fb44 	bl	8001d4c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	e008      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fe fb40 	bl	8001d4c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e06d      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e6:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d02e      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d027      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003714:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe fb0f 	bl	8001d4c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fb0b 	bl	8001d4c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e036      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4917      	ldr	r1, [pc, #92]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	4313      	orrs	r3, r2
 8003764:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	490b      	ldr	r1, [pc, #44]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42420440 	.word	0x42420440

080037cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b08d      	sub	sp, #52	; 0x34
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037d4:	4b55      	ldr	r3, [pc, #340]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037d6:	f107 040c 	add.w	r4, r7, #12
 80037da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	2300      	movs	r3, #0
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d07f      	beq.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d002      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003804:	2b01      	cmp	r3, #1
 8003806:	d048      	beq.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003808:	e08b      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800380a:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d07f      	beq.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003828:	4413      	add	r3, r2
 800382a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800382e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0c5b      	lsrs	r3, r3, #17
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003848:	4413      	add	r3, r2
 800384a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	e004      	b.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	4a33      	ldr	r2, [pc, #204]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d102      	bne.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003888:	e048      	b.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003898:	e040      	b.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038aa:	d108      	bne.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80038bc:	e01f      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d109      	bne.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80038d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e8:	d11a      	bne.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d014      	beq.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80038f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038fc:	e010      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80038fe:	e00f      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003900:	f7ff fe7c 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0b9b      	lsrs	r3, r3, #14
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	3301      	adds	r3, #1
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003920:	bf00      	nop
    }
  }
  return (frequency);
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003924:	4618      	mov	r0, r3
 8003926:	3734      	adds	r7, #52	; 0x34
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	08005240 	.word	0x08005240
 8003930:	08005250 	.word	0x08005250
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	003d0900 	.word	0x003d0900
 8003940:	aaaaaaab 	.word	0xaaaaaaab

08003944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e053      	b.n	80039fe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd fecf 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	ea42 0103 	orr.w	r1, r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	0c1a      	lsrs	r2, r3, #16
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 0204 	and.w	r2, r2, #4
 80039dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01d      	b.n	8003a54 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fd febd 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 f9ed 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e01d      	b.n	8003aaa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f815 	bl	8003ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 f9c2 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fc24 	bl	8004324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_TIM_PWM_Start+0x60>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d107      	bne.n	8003af6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d007      	beq.n	8003b18 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40012c00 	.word	0x40012c00

08003b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e0b4      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	f200 809f 	bhi.w	8003c98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003c99 	.word	0x08003c99
 8003b68:	08003c99 	.word	0x08003c99
 8003b6c:	08003c99 	.word	0x08003c99
 8003b70:	08003bd5 	.word	0x08003bd5
 8003b74:	08003c99 	.word	0x08003c99
 8003b78:	08003c99 	.word	0x08003c99
 8003b7c:	08003c99 	.word	0x08003c99
 8003b80:	08003c17 	.word	0x08003c17
 8003b84:	08003c99 	.word	0x08003c99
 8003b88:	08003c99 	.word	0x08003c99
 8003b8c:	08003c99 	.word	0x08003c99
 8003b90:	08003c57 	.word	0x08003c57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f9a4 	bl	8003ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6999      	ldr	r1, [r3, #24]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	619a      	str	r2, [r3, #24]
      break;
 8003bd2:	e062      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f9ea 	bl	8003fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	619a      	str	r2, [r3, #24]
      break;
 8003c14:	e041      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fa33 	bl	8004088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0208 	orr.w	r2, r2, #8
 8003c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0204 	bic.w	r2, r2, #4
 8003c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69d9      	ldr	r1, [r3, #28]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	61da      	str	r2, [r3, #28]
      break;
 8003c54:	e021      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa7d 	bl	800415c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	021a      	lsls	r2, r3, #8
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	61da      	str	r2, [r3, #28]
      break;
 8003c96:	e000      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_ConfigClockSource+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0a6      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x166>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d067      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x120>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d80b      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x6c>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d073      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x140>
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d802      	bhi.n	8003d16 <HAL_TIM_ConfigClockSource+0x62>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d06f      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d14:	e078      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d06c      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x140>
 8003d1a:	2b30      	cmp	r3, #48	; 0x30
 8003d1c:	d06a      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d1e:	e073      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d20:	2b70      	cmp	r3, #112	; 0x70
 8003d22:	d00d      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0x8c>
 8003d24:	2b70      	cmp	r3, #112	; 0x70
 8003d26:	d804      	bhi.n	8003d32 <HAL_TIM_ConfigClockSource+0x7e>
 8003d28:	2b50      	cmp	r3, #80	; 0x50
 8003d2a:	d033      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0xe0>
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d041      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d30:	e06a      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d066      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x152>
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d017      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d3e:	e063      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f000 fac9 	bl	80042e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]
      break;
 8003d6c:	e04c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f000 fab2 	bl	80042e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d90:	609a      	str	r2, [r3, #8]
      break;
 8003d92:	e039      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f000 fa29 	bl	80041f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2150      	movs	r1, #80	; 0x50
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fa80 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003db2:	e029      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f000 fa47 	bl	8004254 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2160      	movs	r1, #96	; 0x60
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fa70 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e019      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f000 fa09 	bl	80041f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa60 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003df2:	e009      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fa57 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a29      	ldr	r2, [pc, #164]	; (8003edc <TIM_Base_SetConfig+0xb8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <TIM_Base_SetConfig+0xbc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x30>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a25      	ldr	r2, [pc, #148]	; (8003ee4 <TIM_Base_SetConfig+0xc0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <TIM_Base_SetConfig+0xb8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <TIM_Base_SetConfig+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <TIM_Base_SetConfig+0xc0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <TIM_Base_SetConfig+0xb8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800

08003ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f023 0302 	bic.w	r3, r3, #2
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <TIM_OC1_SetConfig+0xc8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10c      	bne.n	8003f5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0308 	bic.w	r3, r3, #8
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <TIM_OC1_SetConfig+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d111      	bne.n	8003f8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	621a      	str	r2, [r3, #32]
}
 8003fa4:	bf00      	nop
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40012c00 	.word	0x40012c00

08003fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0210 	bic.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0320 	bic.w	r3, r3, #32
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <TIM_OC2_SetConfig+0xd0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10d      	bne.n	8004030 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <TIM_OC2_SetConfig+0xd0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d113      	bne.n	8004060 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00

08004088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <TIM_OC3_SetConfig+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d10d      	bne.n	8004102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <TIM_OC3_SetConfig+0xd0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d113      	bne.n	8004132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00

0800415c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	031b      	lsls	r3, r3, #12
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <TIM_OC4_SetConfig+0x98>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d109      	bne.n	80041d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00

080041f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 030a 	bic.w	r3, r3, #10
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f023 0210 	bic.w	r2, r3, #16
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800427e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	031b      	lsls	r3, r3, #12
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f043 0307 	orr.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004300:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	431a      	orrs	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	609a      	str	r2, [r3, #8]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2201      	movs	r2, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1a      	ldr	r2, [r3, #32]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e032      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800440c:	2302      	movs	r3, #2
 800440e:	e03d      	b.n	800448c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e03f      	b.n	8004528 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fd f9c7 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2224      	movs	r2, #36	; 0x24
 80044c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f90c 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800450e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b20      	cmp	r3, #32
 800454e:	f040 8083 	bne.w	8004658 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UART_Transmit+0x2e>
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07b      	b.n	800465a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UART_Transmit+0x40>
 800456c:	2302      	movs	r3, #2
 800456e:	e074      	b.n	800465a <HAL_UART_Transmit+0x12a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2221      	movs	r2, #33	; 0x21
 8004582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004586:	f7fd fbe1 	bl	8001d4c <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004598:	e042      	b.n	8004620 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d122      	bne.n	80045f8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f850 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e046      	b.n	800465a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045de:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	3302      	adds	r3, #2
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	e017      	b.n	8004620 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	e013      	b.n	8004620 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f82d 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e023      	b.n	800465a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	60ba      	str	r2, [r7, #8]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1b7      	bne.n	800459a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	2140      	movs	r1, #64	; 0x40
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f814 	bl	8004662 <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e00a      	b.n	800465a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004672:	e02c      	b.n	80046ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467a:	d028      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0x30>
 8004682:	f7fd fb63 	bl	8001d4c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d21d      	bcs.n	80046ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e00f      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d0c3      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004732:	f023 030c 	bic.w	r3, r3, #12
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	430b      	orrs	r3, r1
 800473e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <UART_SetConfig+0x1ac>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d14e      	bne.n	80047fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe ff4c 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 8004764:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009a      	lsls	r2, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	4a4a      	ldr	r2, [pc, #296]	; (80048a8 <UART_SetConfig+0x1b0>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	0119      	lsls	r1, r3, #4
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fbb2 f2f3 	udiv	r2, r2, r3
 800479c:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <UART_SetConfig+0x1b0>)
 800479e:	fba3 0302 	umull	r0, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	2064      	movs	r0, #100	; 0x64
 80047a6:	fb00 f303 	mul.w	r3, r0, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	3332      	adds	r3, #50	; 0x32
 80047b0:	4a3d      	ldr	r2, [pc, #244]	; (80048a8 <UART_SetConfig+0x1b0>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047bc:	4419      	add	r1, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009a      	lsls	r2, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d4:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <UART_SetConfig+0x1b0>)
 80047d6:	fba3 0302 	umull	r0, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2064      	movs	r0, #100	; 0x64
 80047de:	fb00 f303 	mul.w	r3, r0, r3
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	3332      	adds	r3, #50	; 0x32
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <UART_SetConfig+0x1b0>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	f003 020f 	and.w	r2, r3, #15
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	440a      	add	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80047fc:	e04d      	b.n	800489a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe fee9 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8004802:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009a      	lsls	r2, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <UART_SetConfig+0x1b0>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	0119      	lsls	r1, r3, #4
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	fbb2 f2f3 	udiv	r2, r2, r3
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <UART_SetConfig+0x1b0>)
 800483c:	fba3 0302 	umull	r0, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2064      	movs	r0, #100	; 0x64
 8004844:	fb00 f303 	mul.w	r3, r0, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <UART_SetConfig+0x1b0>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485a:	4419      	add	r1, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009a      	lsls	r2, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <UART_SetConfig+0x1b0>)
 8004874:	fba3 0302 	umull	r0, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2064      	movs	r0, #100	; 0x64
 800487c:	fb00 f303 	mul.w	r3, r0, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	3332      	adds	r3, #50	; 0x32
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <UART_SetConfig+0x1b0>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	440a      	add	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40013800 	.word	0x40013800
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	; (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	2500      	movs	r5, #0
 80048bc:	4e0c      	ldr	r6, [pc, #48]	; (80048f0 <__libc_init_array+0x38>)
 80048be:	4c0d      	ldr	r4, [pc, #52]	; (80048f4 <__libc_init_array+0x3c>)
 80048c0:	1ba4      	subs	r4, r4, r6
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	42a5      	cmp	r5, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	f000 fc34 	bl	8005134 <_init>
 80048cc:	2500      	movs	r5, #0
 80048ce:	4e0a      	ldr	r6, [pc, #40]	; (80048f8 <__libc_init_array+0x40>)
 80048d0:	4c0a      	ldr	r4, [pc, #40]	; (80048fc <__libc_init_array+0x44>)
 80048d2:	1ba4      	subs	r4, r4, r6
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	42a5      	cmp	r5, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048e0:	4798      	blx	r3
 80048e2:	3501      	adds	r5, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ea:	4798      	blx	r3
 80048ec:	3501      	adds	r5, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	080052b4 	.word	0x080052b4
 80048f4:	080052b4 	.word	0x080052b4
 80048f8:	080052b4 	.word	0x080052b4
 80048fc:	080052b8 	.word	0x080052b8

08004900 <memset>:
 8004900:	4603      	mov	r3, r0
 8004902:	4402      	add	r2, r0
 8004904:	4293      	cmp	r3, r2
 8004906:	d100      	bne.n	800490a <memset+0xa>
 8004908:	4770      	bx	lr
 800490a:	f803 1b01 	strb.w	r1, [r3], #1
 800490e:	e7f9      	b.n	8004904 <memset+0x4>

08004910 <siprintf>:
 8004910:	b40e      	push	{r1, r2, r3}
 8004912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004916:	b500      	push	{lr}
 8004918:	b09c      	sub	sp, #112	; 0x70
 800491a:	ab1d      	add	r3, sp, #116	; 0x74
 800491c:	9002      	str	r0, [sp, #8]
 800491e:	9006      	str	r0, [sp, #24]
 8004920:	9107      	str	r1, [sp, #28]
 8004922:	9104      	str	r1, [sp, #16]
 8004924:	4808      	ldr	r0, [pc, #32]	; (8004948 <siprintf+0x38>)
 8004926:	4909      	ldr	r1, [pc, #36]	; (800494c <siprintf+0x3c>)
 8004928:	f853 2b04 	ldr.w	r2, [r3], #4
 800492c:	9105      	str	r1, [sp, #20]
 800492e:	6800      	ldr	r0, [r0, #0]
 8004930:	a902      	add	r1, sp, #8
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f000 f866 	bl	8004a04 <_svfiprintf_r>
 8004938:	2200      	movs	r2, #0
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	b01c      	add	sp, #112	; 0x70
 8004940:	f85d eb04 	ldr.w	lr, [sp], #4
 8004944:	b003      	add	sp, #12
 8004946:	4770      	bx	lr
 8004948:	2000000c 	.word	0x2000000c
 800494c:	ffff0208 	.word	0xffff0208

08004950 <__ssputs_r>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	688e      	ldr	r6, [r1, #8]
 8004956:	4682      	mov	sl, r0
 8004958:	429e      	cmp	r6, r3
 800495a:	460c      	mov	r4, r1
 800495c:	4690      	mov	r8, r2
 800495e:	4699      	mov	r9, r3
 8004960:	d837      	bhi.n	80049d2 <__ssputs_r+0x82>
 8004962:	898a      	ldrh	r2, [r1, #12]
 8004964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004968:	d031      	beq.n	80049ce <__ssputs_r+0x7e>
 800496a:	2302      	movs	r3, #2
 800496c:	6825      	ldr	r5, [r4, #0]
 800496e:	6909      	ldr	r1, [r1, #16]
 8004970:	1a6f      	subs	r7, r5, r1
 8004972:	6965      	ldr	r5, [r4, #20]
 8004974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004978:	fb95 f5f3 	sdiv	r5, r5, r3
 800497c:	f109 0301 	add.w	r3, r9, #1
 8004980:	443b      	add	r3, r7
 8004982:	429d      	cmp	r5, r3
 8004984:	bf38      	it	cc
 8004986:	461d      	movcc	r5, r3
 8004988:	0553      	lsls	r3, r2, #21
 800498a:	d530      	bpl.n	80049ee <__ssputs_r+0x9e>
 800498c:	4629      	mov	r1, r5
 800498e:	f000 fb37 	bl	8005000 <_malloc_r>
 8004992:	4606      	mov	r6, r0
 8004994:	b950      	cbnz	r0, 80049ac <__ssputs_r+0x5c>
 8004996:	230c      	movs	r3, #12
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	f8ca 3000 	str.w	r3, [sl]
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	463a      	mov	r2, r7
 80049ae:	6921      	ldr	r1, [r4, #16]
 80049b0:	f000 fab6 	bl	8004f20 <memcpy>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	6126      	str	r6, [r4, #16]
 80049c2:	443e      	add	r6, r7
 80049c4:	6026      	str	r6, [r4, #0]
 80049c6:	464e      	mov	r6, r9
 80049c8:	6165      	str	r5, [r4, #20]
 80049ca:	1bed      	subs	r5, r5, r7
 80049cc:	60a5      	str	r5, [r4, #8]
 80049ce:	454e      	cmp	r6, r9
 80049d0:	d900      	bls.n	80049d4 <__ssputs_r+0x84>
 80049d2:	464e      	mov	r6, r9
 80049d4:	4632      	mov	r2, r6
 80049d6:	4641      	mov	r1, r8
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	f000 faac 	bl	8004f36 <memmove>
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	2000      	movs	r0, #0
 80049e2:	1b9b      	subs	r3, r3, r6
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	441e      	add	r6, r3
 80049ea:	6026      	str	r6, [r4, #0]
 80049ec:	e7dc      	b.n	80049a8 <__ssputs_r+0x58>
 80049ee:	462a      	mov	r2, r5
 80049f0:	f000 fb60 	bl	80050b4 <_realloc_r>
 80049f4:	4606      	mov	r6, r0
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d1e2      	bne.n	80049c0 <__ssputs_r+0x70>
 80049fa:	6921      	ldr	r1, [r4, #16]
 80049fc:	4650      	mov	r0, sl
 80049fe:	f000 fab3 	bl	8004f68 <_free_r>
 8004a02:	e7c8      	b.n	8004996 <__ssputs_r+0x46>

08004a04 <_svfiprintf_r>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	461d      	mov	r5, r3
 8004a0a:	898b      	ldrh	r3, [r1, #12]
 8004a0c:	b09d      	sub	sp, #116	; 0x74
 8004a0e:	061f      	lsls	r7, r3, #24
 8004a10:	4680      	mov	r8, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4616      	mov	r6, r2
 8004a16:	d50f      	bpl.n	8004a38 <_svfiprintf_r+0x34>
 8004a18:	690b      	ldr	r3, [r1, #16]
 8004a1a:	b96b      	cbnz	r3, 8004a38 <_svfiprintf_r+0x34>
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	f000 faef 	bl	8005000 <_malloc_r>
 8004a22:	6020      	str	r0, [r4, #0]
 8004a24:	6120      	str	r0, [r4, #16]
 8004a26:	b928      	cbnz	r0, 8004a34 <_svfiprintf_r+0x30>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	f8c8 3000 	str.w	r3, [r8]
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a32:	e0c8      	b.n	8004bc6 <_svfiprintf_r+0x1c2>
 8004a34:	2340      	movs	r3, #64	; 0x40
 8004a36:	6163      	str	r3, [r4, #20]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a42:	2330      	movs	r3, #48	; 0x30
 8004a44:	f04f 0b01 	mov.w	fp, #1
 8004a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a4c:	9503      	str	r5, [sp, #12]
 8004a4e:	4637      	mov	r7, r6
 8004a50:	463d      	mov	r5, r7
 8004a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a56:	b10b      	cbz	r3, 8004a5c <_svfiprintf_r+0x58>
 8004a58:	2b25      	cmp	r3, #37	; 0x25
 8004a5a:	d13e      	bne.n	8004ada <_svfiprintf_r+0xd6>
 8004a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a60:	d00b      	beq.n	8004a7a <_svfiprintf_r+0x76>
 8004a62:	4653      	mov	r3, sl
 8004a64:	4632      	mov	r2, r6
 8004a66:	4621      	mov	r1, r4
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f7ff ff71 	bl	8004950 <__ssputs_r>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f000 80a4 	beq.w	8004bbc <_svfiprintf_r+0x1b8>
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	4453      	add	r3, sl
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	783b      	ldrb	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 809d 	beq.w	8004bbc <_svfiprintf_r+0x1b8>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	9307      	str	r3, [sp, #28]
 8004a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a94:	931a      	str	r3, [sp, #104]	; 0x68
 8004a96:	462f      	mov	r7, r5
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a9e:	4850      	ldr	r0, [pc, #320]	; (8004be0 <_svfiprintf_r+0x1dc>)
 8004aa0:	f000 fa30 	bl	8004f04 <memchr>
 8004aa4:	9b04      	ldr	r3, [sp, #16]
 8004aa6:	b9d0      	cbnz	r0, 8004ade <_svfiprintf_r+0xda>
 8004aa8:	06d9      	lsls	r1, r3, #27
 8004aaa:	bf44      	itt	mi
 8004aac:	2220      	movmi	r2, #32
 8004aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab2:	071a      	lsls	r2, r3, #28
 8004ab4:	bf44      	itt	mi
 8004ab6:	222b      	movmi	r2, #43	; 0x2b
 8004ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004abc:	782a      	ldrb	r2, [r5, #0]
 8004abe:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac0:	d015      	beq.n	8004aee <_svfiprintf_r+0xea>
 8004ac2:	462f      	mov	r7, r5
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	250a      	movs	r5, #10
 8004ac8:	9a07      	ldr	r2, [sp, #28]
 8004aca:	4639      	mov	r1, r7
 8004acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad0:	3b30      	subs	r3, #48	; 0x30
 8004ad2:	2b09      	cmp	r3, #9
 8004ad4:	d94d      	bls.n	8004b72 <_svfiprintf_r+0x16e>
 8004ad6:	b1b8      	cbz	r0, 8004b08 <_svfiprintf_r+0x104>
 8004ad8:	e00f      	b.n	8004afa <_svfiprintf_r+0xf6>
 8004ada:	462f      	mov	r7, r5
 8004adc:	e7b8      	b.n	8004a50 <_svfiprintf_r+0x4c>
 8004ade:	4a40      	ldr	r2, [pc, #256]	; (8004be0 <_svfiprintf_r+0x1dc>)
 8004ae0:	463d      	mov	r5, r7
 8004ae2:	1a80      	subs	r0, r0, r2
 8004ae4:	fa0b f000 	lsl.w	r0, fp, r0
 8004ae8:	4318      	orrs	r0, r3
 8004aea:	9004      	str	r0, [sp, #16]
 8004aec:	e7d3      	b.n	8004a96 <_svfiprintf_r+0x92>
 8004aee:	9a03      	ldr	r2, [sp, #12]
 8004af0:	1d11      	adds	r1, r2, #4
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	9103      	str	r1, [sp, #12]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	db01      	blt.n	8004afe <_svfiprintf_r+0xfa>
 8004afa:	9207      	str	r2, [sp, #28]
 8004afc:	e004      	b.n	8004b08 <_svfiprintf_r+0x104>
 8004afe:	4252      	negs	r2, r2
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	9207      	str	r2, [sp, #28]
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	783b      	ldrb	r3, [r7, #0]
 8004b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0c:	d10c      	bne.n	8004b28 <_svfiprintf_r+0x124>
 8004b0e:	787b      	ldrb	r3, [r7, #1]
 8004b10:	2b2a      	cmp	r3, #42	; 0x2a
 8004b12:	d133      	bne.n	8004b7c <_svfiprintf_r+0x178>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	3702      	adds	r7, #2
 8004b18:	1d1a      	adds	r2, r3, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	9203      	str	r2, [sp, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfb8      	it	lt
 8004b22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4d2e      	ldr	r5, [pc, #184]	; (8004be4 <_svfiprintf_r+0x1e0>)
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	7839      	ldrb	r1, [r7, #0]
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f9e8 	bl	8004f04 <memchr>
 8004b34:	b138      	cbz	r0, 8004b46 <_svfiprintf_r+0x142>
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	1b40      	subs	r0, r0, r5
 8004b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	3701      	adds	r7, #1
 8004b42:	4303      	orrs	r3, r0
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	7839      	ldrb	r1, [r7, #0]
 8004b48:	2206      	movs	r2, #6
 8004b4a:	4827      	ldr	r0, [pc, #156]	; (8004be8 <_svfiprintf_r+0x1e4>)
 8004b4c:	1c7e      	adds	r6, r7, #1
 8004b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b52:	f000 f9d7 	bl	8004f04 <memchr>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d038      	beq.n	8004bcc <_svfiprintf_r+0x1c8>
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <_svfiprintf_r+0x1e8>)
 8004b5c:	bb13      	cbnz	r3, 8004ba4 <_svfiprintf_r+0x1a0>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	3307      	adds	r3, #7
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	3308      	adds	r3, #8
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	444b      	add	r3, r9
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	e76d      	b.n	8004a4e <_svfiprintf_r+0x4a>
 8004b72:	fb05 3202 	mla	r2, r5, r2, r3
 8004b76:	2001      	movs	r0, #1
 8004b78:	460f      	mov	r7, r1
 8004b7a:	e7a6      	b.n	8004aca <_svfiprintf_r+0xc6>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	250a      	movs	r5, #10
 8004b80:	4619      	mov	r1, r3
 8004b82:	3701      	adds	r7, #1
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	4638      	mov	r0, r7
 8004b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b8c:	3a30      	subs	r2, #48	; 0x30
 8004b8e:	2a09      	cmp	r2, #9
 8004b90:	d903      	bls.n	8004b9a <_svfiprintf_r+0x196>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0c8      	beq.n	8004b28 <_svfiprintf_r+0x124>
 8004b96:	9105      	str	r1, [sp, #20]
 8004b98:	e7c6      	b.n	8004b28 <_svfiprintf_r+0x124>
 8004b9a:	fb05 2101 	mla	r1, r5, r1, r2
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	e7f0      	b.n	8004b86 <_svfiprintf_r+0x182>
 8004ba4:	ab03      	add	r3, sp, #12
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004bac:	a904      	add	r1, sp, #16
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f3af 8000 	nop.w
 8004bb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004bb8:	4681      	mov	r9, r0
 8004bba:	d1d6      	bne.n	8004b6a <_svfiprintf_r+0x166>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	065b      	lsls	r3, r3, #25
 8004bc0:	f53f af35 	bmi.w	8004a2e <_svfiprintf_r+0x2a>
 8004bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bc6:	b01d      	add	sp, #116	; 0x74
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bcc:	ab03      	add	r3, sp, #12
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004bd4:	a904      	add	r1, sp, #16
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f000 f882 	bl	8004ce0 <_printf_i>
 8004bdc:	e7ea      	b.n	8004bb4 <_svfiprintf_r+0x1b0>
 8004bde:	bf00      	nop
 8004be0:	08005280 	.word	0x08005280
 8004be4:	08005286 	.word	0x08005286
 8004be8:	0800528a 	.word	0x0800528a
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004951 	.word	0x08004951

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4691      	mov	r9, r2
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	4606      	mov	r6, r0
 8004c02:	4293      	cmp	r3, r2
 8004c04:	bfb8      	it	lt
 8004c06:	4613      	movlt	r3, r2
 8004c08:	f8c9 3000 	str.w	r3, [r9]
 8004c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c10:	460c      	mov	r4, r1
 8004c12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c16:	b112      	cbz	r2, 8004c1e <_printf_common+0x2a>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f8c9 3000 	str.w	r3, [r9]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c28:	3302      	addmi	r3, #2
 8004c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	f015 0506 	ands.w	r5, r5, #6
 8004c34:	d107      	bne.n	8004c46 <_printf_common+0x52>
 8004c36:	f104 0a19 	add.w	sl, r4, #25
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	dc29      	bgt.n	8004c9a <_printf_common+0xa6>
 8004c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	3300      	adds	r3, #0
 8004c4e:	bf18      	it	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	0692      	lsls	r2, r2, #26
 8004c54:	d42e      	bmi.n	8004cb4 <_printf_common+0xc0>
 8004c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	47c0      	blx	r8
 8004c60:	3001      	adds	r0, #1
 8004c62:	d021      	beq.n	8004ca8 <_printf_common+0xb4>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	68e5      	ldr	r5, [r4, #12]
 8004c68:	f003 0306 	and.w	r3, r3, #6
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	bf18      	it	ne
 8004c70:	2500      	movne	r5, #0
 8004c72:	f8d9 2000 	ldr.w	r2, [r9]
 8004c76:	f04f 0900 	mov.w	r9, #0
 8004c7a:	bf08      	it	eq
 8004c7c:	1aad      	subeq	r5, r5, r2
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	bf08      	it	eq
 8004c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bfc4      	itt	gt
 8004c8c:	1a9b      	subgt	r3, r3, r2
 8004c8e:	18ed      	addgt	r5, r5, r3
 8004c90:	341a      	adds	r4, #26
 8004c92:	454d      	cmp	r5, r9
 8004c94:	d11a      	bne.n	8004ccc <_printf_common+0xd8>
 8004c96:	2000      	movs	r0, #0
 8004c98:	e008      	b.n	8004cac <_printf_common+0xb8>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4652      	mov	r2, sl
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	47c0      	blx	r8
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d103      	bne.n	8004cb0 <_printf_common+0xbc>
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	e7c2      	b.n	8004c3a <_printf_common+0x46>
 8004cb4:	2030      	movs	r0, #48	; 0x30
 8004cb6:	18e1      	adds	r1, r4, r3
 8004cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc2:	4422      	add	r2, r4
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cca:	e7c4      	b.n	8004c56 <_printf_common+0x62>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4622      	mov	r2, r4
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d0e6      	beq.n	8004ca8 <_printf_common+0xb4>
 8004cda:	f109 0901 	add.w	r9, r9, #1
 8004cde:	e7d8      	b.n	8004c92 <_printf_common+0x9e>

08004ce0 <_printf_i>:
 8004ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ce8:	460c      	mov	r4, r1
 8004cea:	7e09      	ldrb	r1, [r1, #24]
 8004cec:	b085      	sub	sp, #20
 8004cee:	296e      	cmp	r1, #110	; 0x6e
 8004cf0:	4617      	mov	r7, r2
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	4698      	mov	r8, r3
 8004cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cf8:	f000 80b3 	beq.w	8004e62 <_printf_i+0x182>
 8004cfc:	d822      	bhi.n	8004d44 <_printf_i+0x64>
 8004cfe:	2963      	cmp	r1, #99	; 0x63
 8004d00:	d036      	beq.n	8004d70 <_printf_i+0x90>
 8004d02:	d80a      	bhi.n	8004d1a <_printf_i+0x3a>
 8004d04:	2900      	cmp	r1, #0
 8004d06:	f000 80b9 	beq.w	8004e7c <_printf_i+0x19c>
 8004d0a:	2958      	cmp	r1, #88	; 0x58
 8004d0c:	f000 8083 	beq.w	8004e16 <_printf_i+0x136>
 8004d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d18:	e032      	b.n	8004d80 <_printf_i+0xa0>
 8004d1a:	2964      	cmp	r1, #100	; 0x64
 8004d1c:	d001      	beq.n	8004d22 <_printf_i+0x42>
 8004d1e:	2969      	cmp	r1, #105	; 0x69
 8004d20:	d1f6      	bne.n	8004d10 <_printf_i+0x30>
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	6813      	ldr	r3, [r2, #0]
 8004d26:	0605      	lsls	r5, r0, #24
 8004d28:	f103 0104 	add.w	r1, r3, #4
 8004d2c:	d52a      	bpl.n	8004d84 <_printf_i+0xa4>
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6011      	str	r1, [r2, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	da03      	bge.n	8004d3e <_printf_i+0x5e>
 8004d36:	222d      	movs	r2, #45	; 0x2d
 8004d38:	425b      	negs	r3, r3
 8004d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d3e:	486f      	ldr	r0, [pc, #444]	; (8004efc <_printf_i+0x21c>)
 8004d40:	220a      	movs	r2, #10
 8004d42:	e039      	b.n	8004db8 <_printf_i+0xd8>
 8004d44:	2973      	cmp	r1, #115	; 0x73
 8004d46:	f000 809d 	beq.w	8004e84 <_printf_i+0x1a4>
 8004d4a:	d808      	bhi.n	8004d5e <_printf_i+0x7e>
 8004d4c:	296f      	cmp	r1, #111	; 0x6f
 8004d4e:	d020      	beq.n	8004d92 <_printf_i+0xb2>
 8004d50:	2970      	cmp	r1, #112	; 0x70
 8004d52:	d1dd      	bne.n	8004d10 <_printf_i+0x30>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f043 0320 	orr.w	r3, r3, #32
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	e003      	b.n	8004d66 <_printf_i+0x86>
 8004d5e:	2975      	cmp	r1, #117	; 0x75
 8004d60:	d017      	beq.n	8004d92 <_printf_i+0xb2>
 8004d62:	2978      	cmp	r1, #120	; 0x78
 8004d64:	d1d4      	bne.n	8004d10 <_printf_i+0x30>
 8004d66:	2378      	movs	r3, #120	; 0x78
 8004d68:	4865      	ldr	r0, [pc, #404]	; (8004f00 <_printf_i+0x220>)
 8004d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d6e:	e055      	b.n	8004e1c <_printf_i+0x13c>
 8004d70:	6813      	ldr	r3, [r2, #0]
 8004d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d76:	1d19      	adds	r1, r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6011      	str	r1, [r2, #0]
 8004d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d80:	2301      	movs	r3, #1
 8004d82:	e08c      	b.n	8004e9e <_printf_i+0x1be>
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d8a:	6011      	str	r1, [r2, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	b21b      	sxthne	r3, r3
 8004d90:	e7cf      	b.n	8004d32 <_printf_i+0x52>
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	6010      	str	r0, [r2, #0]
 8004d9a:	0628      	lsls	r0, r5, #24
 8004d9c:	d501      	bpl.n	8004da2 <_printf_i+0xc2>
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	e002      	b.n	8004da8 <_printf_i+0xc8>
 8004da2:	0668      	lsls	r0, r5, #25
 8004da4:	d5fb      	bpl.n	8004d9e <_printf_i+0xbe>
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	296f      	cmp	r1, #111	; 0x6f
 8004daa:	bf14      	ite	ne
 8004dac:	220a      	movne	r2, #10
 8004dae:	2208      	moveq	r2, #8
 8004db0:	4852      	ldr	r0, [pc, #328]	; (8004efc <_printf_i+0x21c>)
 8004db2:	2100      	movs	r1, #0
 8004db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db8:	6865      	ldr	r5, [r4, #4]
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	60a5      	str	r5, [r4, #8]
 8004dbe:	f2c0 8095 	blt.w	8004eec <_printf_i+0x20c>
 8004dc2:	6821      	ldr	r1, [r4, #0]
 8004dc4:	f021 0104 	bic.w	r1, r1, #4
 8004dc8:	6021      	str	r1, [r4, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d13d      	bne.n	8004e4a <_printf_i+0x16a>
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f040 808e 	bne.w	8004ef0 <_printf_i+0x210>
 8004dd4:	4665      	mov	r5, ip
 8004dd6:	2a08      	cmp	r2, #8
 8004dd8:	d10b      	bne.n	8004df2 <_printf_i+0x112>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	07db      	lsls	r3, r3, #31
 8004dde:	d508      	bpl.n	8004df2 <_printf_i+0x112>
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bfde      	ittt	le
 8004de8:	2330      	movle	r3, #48	; 0x30
 8004dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004df2:	ebac 0305 	sub.w	r3, ip, r5
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	f8cd 8000 	str.w	r8, [sp]
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	aa03      	add	r2, sp, #12
 8004e00:	4621      	mov	r1, r4
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff fef6 	bl	8004bf4 <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d14d      	bne.n	8004ea8 <_printf_i+0x1c8>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e10:	b005      	add	sp, #20
 8004e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e16:	4839      	ldr	r0, [pc, #228]	; (8004efc <_printf_i+0x21c>)
 8004e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	1d1d      	adds	r5, r3, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6015      	str	r5, [r2, #0]
 8004e26:	060a      	lsls	r2, r1, #24
 8004e28:	d50b      	bpl.n	8004e42 <_printf_i+0x162>
 8004e2a:	07ca      	lsls	r2, r1, #31
 8004e2c:	bf44      	itt	mi
 8004e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e32:	6021      	strmi	r1, [r4, #0]
 8004e34:	b91b      	cbnz	r3, 8004e3e <_printf_i+0x15e>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	f022 0220 	bic.w	r2, r2, #32
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	e7b7      	b.n	8004db2 <_printf_i+0xd2>
 8004e42:	064d      	lsls	r5, r1, #25
 8004e44:	bf48      	it	mi
 8004e46:	b29b      	uxthmi	r3, r3
 8004e48:	e7ef      	b.n	8004e2a <_printf_i+0x14a>
 8004e4a:	4665      	mov	r5, ip
 8004e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e50:	fb02 3311 	mls	r3, r2, r1, r3
 8004e54:	5cc3      	ldrb	r3, [r0, r3]
 8004e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d1f5      	bne.n	8004e4c <_printf_i+0x16c>
 8004e60:	e7b9      	b.n	8004dd6 <_printf_i+0xf6>
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	0628      	lsls	r0, r5, #24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0x196>
 8004e72:	6019      	str	r1, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <_printf_i+0x19c>
 8004e76:	066a      	lsls	r2, r5, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0x192>
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4665      	mov	r5, ip
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	e7b9      	b.n	8004df8 <_printf_i+0x118>
 8004e84:	6813      	ldr	r3, [r2, #0]
 8004e86:	1d19      	adds	r1, r3, #4
 8004e88:	6011      	str	r1, [r2, #0]
 8004e8a:	681d      	ldr	r5, [r3, #0]
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 f837 	bl	8004f04 <memchr>
 8004e96:	b108      	cbz	r0, 8004e9c <_printf_i+0x1bc>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	6060      	str	r0, [r4, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea6:	e7a7      	b.n	8004df8 <_printf_i+0x118>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	462a      	mov	r2, r5
 8004eac:	4639      	mov	r1, r7
 8004eae:	4630      	mov	r0, r6
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0aa      	beq.n	8004e0c <_printf_i+0x12c>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	079b      	lsls	r3, r3, #30
 8004eba:	d413      	bmi.n	8004ee4 <_printf_i+0x204>
 8004ebc:	68e0      	ldr	r0, [r4, #12]
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	bfb8      	it	lt
 8004ec4:	4618      	movlt	r0, r3
 8004ec6:	e7a3      	b.n	8004e10 <_printf_i+0x130>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	464a      	mov	r2, r9
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d09a      	beq.n	8004e0c <_printf_i+0x12c>
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9a03      	ldr	r2, [sp, #12]
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dcf2      	bgt.n	8004ec8 <_printf_i+0x1e8>
 8004ee2:	e7eb      	b.n	8004ebc <_printf_i+0x1dc>
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	f104 0919 	add.w	r9, r4, #25
 8004eea:	e7f5      	b.n	8004ed8 <_printf_i+0x1f8>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ac      	bne.n	8004e4a <_printf_i+0x16a>
 8004ef0:	7803      	ldrb	r3, [r0, #0]
 8004ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efa:	e76c      	b.n	8004dd6 <_printf_i+0xf6>
 8004efc:	08005291 	.word	0x08005291
 8004f00:	080052a2 	.word	0x080052a2

08004f04 <memchr>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	b2c9      	uxtb	r1, r1
 8004f08:	4402      	add	r2, r0
 8004f0a:	4290      	cmp	r0, r2
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	d101      	bne.n	8004f14 <memchr+0x10>
 8004f10:	2300      	movs	r3, #0
 8004f12:	e003      	b.n	8004f1c <memchr+0x18>
 8004f14:	781c      	ldrb	r4, [r3, #0]
 8004f16:	3001      	adds	r0, #1
 8004f18:	428c      	cmp	r4, r1
 8004f1a:	d1f6      	bne.n	8004f0a <memchr+0x6>
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd10      	pop	{r4, pc}

08004f20 <memcpy>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	1e43      	subs	r3, r0, #1
 8004f24:	440a      	add	r2, r1
 8004f26:	4291      	cmp	r1, r2
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f34:	e7f7      	b.n	8004f26 <memcpy+0x6>

08004f36 <memmove>:
 8004f36:	4288      	cmp	r0, r1
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	eb01 0302 	add.w	r3, r1, r2
 8004f3e:	d807      	bhi.n	8004f50 <memmove+0x1a>
 8004f40:	1e42      	subs	r2, r0, #1
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d00a      	beq.n	8004f5c <memmove+0x26>
 8004f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f4e:	e7f8      	b.n	8004f42 <memmove+0xc>
 8004f50:	4283      	cmp	r3, r0
 8004f52:	d9f5      	bls.n	8004f40 <memmove+0xa>
 8004f54:	1881      	adds	r1, r0, r2
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	42d3      	cmn	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memmove+0x28>
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f66:	e7f7      	b.n	8004f58 <memmove+0x22>

08004f68 <_free_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d043      	beq.n	8004ff8 <_free_r+0x90>
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f0c      	subs	r4, r1, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	18e4      	addlt	r4, r4, r3
 8004f7c:	f000 f8d0 	bl	8005120 <__malloc_lock>
 8004f80:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <_free_r+0x94>)
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	4610      	mov	r0, r2
 8004f86:	b933      	cbnz	r3, 8004f96 <_free_r+0x2e>
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6014      	str	r4, [r2, #0]
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f92:	f000 b8c6 	b.w	8005122 <__malloc_unlock>
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	d90b      	bls.n	8004fb2 <_free_r+0x4a>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	1862      	adds	r2, r4, r1
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf01      	itttt	eq
 8004fa2:	681a      	ldreq	r2, [r3, #0]
 8004fa4:	685b      	ldreq	r3, [r3, #4]
 8004fa6:	1852      	addeq	r2, r2, r1
 8004fa8:	6022      	streq	r2, [r4, #0]
 8004faa:	6063      	str	r3, [r4, #4]
 8004fac:	6004      	str	r4, [r0, #0]
 8004fae:	e7ed      	b.n	8004f8c <_free_r+0x24>
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	b10a      	cbz	r2, 8004fba <_free_r+0x52>
 8004fb6:	42a2      	cmp	r2, r4
 8004fb8:	d9fa      	bls.n	8004fb0 <_free_r+0x48>
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	1858      	adds	r0, r3, r1
 8004fbe:	42a0      	cmp	r0, r4
 8004fc0:	d10b      	bne.n	8004fda <_free_r+0x72>
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	4401      	add	r1, r0
 8004fc6:	1858      	adds	r0, r3, r1
 8004fc8:	4282      	cmp	r2, r0
 8004fca:	6019      	str	r1, [r3, #0]
 8004fcc:	d1de      	bne.n	8004f8c <_free_r+0x24>
 8004fce:	6810      	ldr	r0, [r2, #0]
 8004fd0:	6852      	ldr	r2, [r2, #4]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	6019      	str	r1, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	e7d8      	b.n	8004f8c <_free_r+0x24>
 8004fda:	d902      	bls.n	8004fe2 <_free_r+0x7a>
 8004fdc:	230c      	movs	r3, #12
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	e7d4      	b.n	8004f8c <_free_r+0x24>
 8004fe2:	6820      	ldr	r0, [r4, #0]
 8004fe4:	1821      	adds	r1, r4, r0
 8004fe6:	428a      	cmp	r2, r1
 8004fe8:	bf01      	itttt	eq
 8004fea:	6811      	ldreq	r1, [r2, #0]
 8004fec:	6852      	ldreq	r2, [r2, #4]
 8004fee:	1809      	addeq	r1, r1, r0
 8004ff0:	6021      	streq	r1, [r4, #0]
 8004ff2:	6062      	str	r2, [r4, #4]
 8004ff4:	605c      	str	r4, [r3, #4]
 8004ff6:	e7c9      	b.n	8004f8c <_free_r+0x24>
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
 8004ffa:	bf00      	nop
 8004ffc:	200000a0 	.word	0x200000a0

08005000 <_malloc_r>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	1ccd      	adds	r5, r1, #3
 8005004:	f025 0503 	bic.w	r5, r5, #3
 8005008:	3508      	adds	r5, #8
 800500a:	2d0c      	cmp	r5, #12
 800500c:	bf38      	it	cc
 800500e:	250c      	movcc	r5, #12
 8005010:	2d00      	cmp	r5, #0
 8005012:	4606      	mov	r6, r0
 8005014:	db01      	blt.n	800501a <_malloc_r+0x1a>
 8005016:	42a9      	cmp	r1, r5
 8005018:	d903      	bls.n	8005022 <_malloc_r+0x22>
 800501a:	230c      	movs	r3, #12
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	2000      	movs	r0, #0
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	f000 f87d 	bl	8005120 <__malloc_lock>
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <_malloc_r+0xac>)
 8005028:	6814      	ldr	r4, [r2, #0]
 800502a:	4621      	mov	r1, r4
 800502c:	b991      	cbnz	r1, 8005054 <_malloc_r+0x54>
 800502e:	4c20      	ldr	r4, [pc, #128]	; (80050b0 <_malloc_r+0xb0>)
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	b91b      	cbnz	r3, 800503c <_malloc_r+0x3c>
 8005034:	4630      	mov	r0, r6
 8005036:	f000 f863 	bl	8005100 <_sbrk_r>
 800503a:	6020      	str	r0, [r4, #0]
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f85e 	bl	8005100 <_sbrk_r>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d124      	bne.n	8005092 <_malloc_r+0x92>
 8005048:	230c      	movs	r3, #12
 800504a:	4630      	mov	r0, r6
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	f000 f868 	bl	8005122 <__malloc_unlock>
 8005052:	e7e4      	b.n	800501e <_malloc_r+0x1e>
 8005054:	680b      	ldr	r3, [r1, #0]
 8005056:	1b5b      	subs	r3, r3, r5
 8005058:	d418      	bmi.n	800508c <_malloc_r+0x8c>
 800505a:	2b0b      	cmp	r3, #11
 800505c:	d90f      	bls.n	800507e <_malloc_r+0x7e>
 800505e:	600b      	str	r3, [r1, #0]
 8005060:	18cc      	adds	r4, r1, r3
 8005062:	50cd      	str	r5, [r1, r3]
 8005064:	4630      	mov	r0, r6
 8005066:	f000 f85c 	bl	8005122 <__malloc_unlock>
 800506a:	f104 000b 	add.w	r0, r4, #11
 800506e:	1d23      	adds	r3, r4, #4
 8005070:	f020 0007 	bic.w	r0, r0, #7
 8005074:	1ac3      	subs	r3, r0, r3
 8005076:	d0d3      	beq.n	8005020 <_malloc_r+0x20>
 8005078:	425a      	negs	r2, r3
 800507a:	50e2      	str	r2, [r4, r3]
 800507c:	e7d0      	b.n	8005020 <_malloc_r+0x20>
 800507e:	684b      	ldr	r3, [r1, #4]
 8005080:	428c      	cmp	r4, r1
 8005082:	bf16      	itet	ne
 8005084:	6063      	strne	r3, [r4, #4]
 8005086:	6013      	streq	r3, [r2, #0]
 8005088:	460c      	movne	r4, r1
 800508a:	e7eb      	b.n	8005064 <_malloc_r+0x64>
 800508c:	460c      	mov	r4, r1
 800508e:	6849      	ldr	r1, [r1, #4]
 8005090:	e7cc      	b.n	800502c <_malloc_r+0x2c>
 8005092:	1cc4      	adds	r4, r0, #3
 8005094:	f024 0403 	bic.w	r4, r4, #3
 8005098:	42a0      	cmp	r0, r4
 800509a:	d005      	beq.n	80050a8 <_malloc_r+0xa8>
 800509c:	1a21      	subs	r1, r4, r0
 800509e:	4630      	mov	r0, r6
 80050a0:	f000 f82e 	bl	8005100 <_sbrk_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d0cf      	beq.n	8005048 <_malloc_r+0x48>
 80050a8:	6025      	str	r5, [r4, #0]
 80050aa:	e7db      	b.n	8005064 <_malloc_r+0x64>
 80050ac:	200000a0 	.word	0x200000a0
 80050b0:	200000a4 	.word	0x200000a4

080050b4 <_realloc_r>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	4607      	mov	r7, r0
 80050b8:	4614      	mov	r4, r2
 80050ba:	460e      	mov	r6, r1
 80050bc:	b921      	cbnz	r1, 80050c8 <_realloc_r+0x14>
 80050be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050c2:	4611      	mov	r1, r2
 80050c4:	f7ff bf9c 	b.w	8005000 <_malloc_r>
 80050c8:	b922      	cbnz	r2, 80050d4 <_realloc_r+0x20>
 80050ca:	f7ff ff4d 	bl	8004f68 <_free_r>
 80050ce:	4625      	mov	r5, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d4:	f000 f826 	bl	8005124 <_malloc_usable_size_r>
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d20f      	bcs.n	80050fc <_realloc_r+0x48>
 80050dc:	4621      	mov	r1, r4
 80050de:	4638      	mov	r0, r7
 80050e0:	f7ff ff8e 	bl	8005000 <_malloc_r>
 80050e4:	4605      	mov	r5, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0f2      	beq.n	80050d0 <_realloc_r+0x1c>
 80050ea:	4631      	mov	r1, r6
 80050ec:	4622      	mov	r2, r4
 80050ee:	f7ff ff17 	bl	8004f20 <memcpy>
 80050f2:	4631      	mov	r1, r6
 80050f4:	4638      	mov	r0, r7
 80050f6:	f7ff ff37 	bl	8004f68 <_free_r>
 80050fa:	e7e9      	b.n	80050d0 <_realloc_r+0x1c>
 80050fc:	4635      	mov	r5, r6
 80050fe:	e7e7      	b.n	80050d0 <_realloc_r+0x1c>

08005100 <_sbrk_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	2300      	movs	r3, #0
 8005104:	4c05      	ldr	r4, [pc, #20]	; (800511c <_sbrk_r+0x1c>)
 8005106:	4605      	mov	r5, r0
 8005108:	4608      	mov	r0, r1
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	f7fc fd40 	bl	8001b90 <_sbrk>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_sbrk_r+0x1a>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	b103      	cbz	r3, 800511a <_sbrk_r+0x1a>
 8005118:	602b      	str	r3, [r5, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000760 	.word	0x20000760

08005120 <__malloc_lock>:
 8005120:	4770      	bx	lr

08005122 <__malloc_unlock>:
 8005122:	4770      	bx	lr

08005124 <_malloc_usable_size_r>:
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f18      	subs	r0, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfbc      	itt	lt
 800512e:	580b      	ldrlt	r3, [r1, r0]
 8005130:	18c0      	addlt	r0, r0, r3
 8005132:	4770      	bx	lr

08005134 <_init>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr

08005140 <_fini>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr
