
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800af70  0800af70  0001af70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b558  0800b558  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b558  0800b558  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b558  0800b558  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000020c  0800b76c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  0800b76c  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e25  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000283e  00000000  00000000  0003405a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  00036898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00037b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165ef  00000000  00000000  00038d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da19  00000000  00000000  0004f31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d938  00000000  00000000  0005cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da670  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  000da6ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af58 	.word	0x0800af58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800af58 	.word	0x0800af58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2275      	movs	r2, #117	; 0x75
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f003 ff48 	bl	8004fc4 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b68      	cmp	r3, #104	; 0x68
 8001138:	d101      	bne.n	800113e <MPU6050_check+0x2e>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 800113e:	2300      	movs	r3, #0

}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	226b      	movs	r2, #107	; 0x6b
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f003 fe30 	bl	8004dd0 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8001170:	2307      	movs	r3, #7
 8001172:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2219      	movs	r2, #25
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f003 fe20 	bl	8004dd0 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001190:	2308      	movs	r3, #8
 8001192:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221b      	movs	r2, #27
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f003 fe10 	bl	8004dd0 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 80011b0:	2310      	movs	r3, #16
 80011b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030f 	add.w	r3, r7, #15
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	221c      	movs	r2, #28
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f003 fe00 	bl	8004dd0 <HAL_I2C_Mem_Write>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2306      	movs	r3, #6
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	223b      	movs	r2, #59	; 0x3b
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f003 fee3 	bl	8004fc4 <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	809a      	strh	r2, [r3, #4]

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2243      	movs	r2, #67	; 0x43
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 feb1 	bl	8004fc4 <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001262:	7a3b      	ldrb	r3, [r7, #8]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	815a      	strh	r2, [r3, #10]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b598      	push	{r3, r4, r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <main+0x120>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <main+0x120>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <main+0x124>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <main+0x124>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a42      	ldr	r2, [pc, #264]	; (800142c <main+0x124>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f002 fc61 	bl	8003bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 fb15 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fd4d 	bl	8001dd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001336:	f000 fb6d 	bl	8001a14 <MX_ADC1_Init>
  MX_I2C2_Init();
 800133a:	f000 fba9 	bl	8001a90 <MX_I2C2_Init>
  MX_SPI2_Init();
 800133e:	f000 fbd5 	bl	8001aec <MX_SPI2_Init>
  MX_TIM1_Init();
 8001342:	f000 fc09 	bl	8001b58 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd19 	bl	8001d7c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800134a:	f000 fccb 	bl	8001ce4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 800134e:	4838      	ldr	r0, [pc, #224]	; (8001430 <main+0x128>)
 8001350:	f003 f8e2 	bl	8004518 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <main+0x128>)
 8001356:	f002 fda7 	bl	8003ea8 <HAL_ADC_Start>

  HAL_Delay(400);//wait for stable power
 800135a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800135e:	f002 fca9 	bl	8003cb4 <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001362:	4834      	ldr	r0, [pc, #208]	; (8001434 <main+0x12c>)
 8001364:	f7ff fed4 	bl	8001110 <MPU6050_check>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <main+0x130>)
 800136e:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 8001370:	4830      	ldr	r0, [pc, #192]	; (8001434 <main+0x12c>)
 8001372:	f7ff fee9 	bl	8001148 <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 8001376:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800137a:	f002 fc9b 	bl	8003cb4 <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800137e:	4b2f      	ldr	r3, [pc, #188]	; (800143c <main+0x134>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <main+0x134>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x138>)
 8001392:	f003 fbc5 	bl	8004b20 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8001396:	f000 ff49 	bl	800222c <nRF24_Check>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <main+0x13c>)
 80013a0:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80013a2:	f000 fef1 	bl	8002188 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80013a6:	20ff      	movs	r0, #255	; 0xff
 80013a8:	f001 f8d2 	bl	8002550 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80013ac:	200f      	movs	r0, #15
 80013ae:	f000 ffcc 	bl	800234a <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80013b2:	2020      	movs	r0, #32
 80013b4:	f001 f85d 	bl	8002472 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80013b8:	2008      	movs	r0, #8
 80013ba:	f000 ffa5 	bl	8002308 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 ffd1 	bl	8002366 <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80013c4:	4920      	ldr	r1, [pc, #128]	; (8001448 <main+0x140>)
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 ffde 	bl	8002388 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 80013cc:	2207      	movs	r2, #7
 80013ce:	2100      	movs	r1, #0
 80013d0:	2001      	movs	r0, #1
 80013d2:	f001 f869 	bl	80024a8 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80013d6:	491c      	ldr	r1, [pc, #112]	; (8001448 <main+0x140>)
 80013d8:	2006      	movs	r0, #6
 80013da:	f000 ffd5 	bl	8002388 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80013de:	2004      	movs	r0, #4
 80013e0:	f001 f82c 	bl	800243c <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f000 ff6e 	bl	80022c6 <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80013ea:	f001 f8fb 	bl	80025e4 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 ff4a 	bl	8002288 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4811      	ldr	r0, [pc, #68]	; (8001440 <main+0x138>)
 80013fc:	f003 fb90 	bl	8004b20 <HAL_GPIO_WritePin>

  //get GYRO offset
  HAL_Delay(2000);//wait to connect battery
 8001400:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001404:	f002 fc56 	bl	8003cb4 <HAL_Delay>
  GyroCalibStatus=1;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <main+0x144>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

  SUMGyroX=0;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <main+0x148>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <main+0x14c>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <main+0x150>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

  for(i=0;i<1000;i++)
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <main+0x154>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e042      	b.n	80014ae <main+0x1a6>
 8001428:	e000edf0 	.word	0xe000edf0
 800142c:	e0001000 	.word	0xe0001000
 8001430:	2000041c 	.word	0x2000041c
 8001434:	20000300 	.word	0x20000300
 8001438:	20000492 	.word	0x20000492
 800143c:	40003800 	.word	0x40003800
 8001440:	40010c00 	.word	0x40010c00
 8001444:	20000384 	.word	0x20000384
 8001448:	0800b0e8 	.word	0x0800b0e8
 800144c:	20000234 	.word	0x20000234
 8001450:	20000568 	.word	0x20000568
 8001454:	200004a0 	.word	0x200004a0
 8001458:	200003f8 	.word	0x200003f8
 800145c:	2000022c 	.word	0x2000022c
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8001460:	49af      	ldr	r1, [pc, #700]	; (8001720 <main+0x418>)
 8001462:	48b0      	ldr	r0, [pc, #704]	; (8001724 <main+0x41c>)
 8001464:	f7ff feea 	bl	800123c <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001468:	4bad      	ldr	r3, [pc, #692]	; (8001720 <main+0x418>)
 800146a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800146e:	461a      	mov	r2, r3
 8001470:	4bad      	ldr	r3, [pc, #692]	; (8001728 <main+0x420>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4413      	add	r3, r2
 8001476:	4aac      	ldr	r2, [pc, #688]	; (8001728 <main+0x420>)
 8001478:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 800147a:	4ba9      	ldr	r3, [pc, #676]	; (8001720 <main+0x418>)
 800147c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	4baa      	ldr	r3, [pc, #680]	; (800172c <main+0x424>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4aa8      	ldr	r2, [pc, #672]	; (800172c <main+0x424>)
 800148a:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 800148c:	4ba4      	ldr	r3, [pc, #656]	; (8001720 <main+0x418>)
 800148e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001492:	461a      	mov	r2, r3
 8001494:	4ba6      	ldr	r3, [pc, #664]	; (8001730 <main+0x428>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4413      	add	r3, r2
 800149a:	4aa5      	ldr	r2, [pc, #660]	; (8001730 <main+0x428>)
 800149c:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f002 fc08 	bl	8003cb4 <HAL_Delay>
  for(i=0;i<1000;i++)
 80014a4:	4ba3      	ldr	r3, [pc, #652]	; (8001734 <main+0x42c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4aa2      	ldr	r2, [pc, #648]	; (8001734 <main+0x42c>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4ba1      	ldr	r3, [pc, #644]	; (8001734 <main+0x42c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b6:	d3d3      	bcc.n	8001460 <main+0x158>
  }

  GyroXOff=SUMGyroX/1000;
 80014b8:	4b9b      	ldr	r3, [pc, #620]	; (8001728 <main+0x420>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9e      	ldr	r2, [pc, #632]	; (8001738 <main+0x430>)
 80014be:	fb82 1203 	smull	r1, r2, r2, r3
 80014c2:	1192      	asrs	r2, r2, #6
 80014c4:	17db      	asrs	r3, r3, #31
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b9c      	ldr	r3, [pc, #624]	; (800173c <main+0x434>)
 80014cc:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 80014ce:	4b97      	ldr	r3, [pc, #604]	; (800172c <main+0x424>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a99      	ldr	r2, [pc, #612]	; (8001738 <main+0x430>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1192      	asrs	r2, r2, #6
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b97      	ldr	r3, [pc, #604]	; (8001740 <main+0x438>)
 80014e2:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 80014e4:	4b92      	ldr	r3, [pc, #584]	; (8001730 <main+0x428>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a93      	ldr	r2, [pc, #588]	; (8001738 <main+0x430>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	1192      	asrs	r2, r2, #6
 80014f0:	17db      	asrs	r3, r3, #31
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b93      	ldr	r3, [pc, #588]	; (8001744 <main+0x43c>)
 80014f8:	801a      	strh	r2, [r3, #0]

  GyroCalibStatus=0;
 80014fa:	4b93      	ldr	r3, [pc, #588]	; (8001748 <main+0x440>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

  //startup angles Accel to Gyro transfer
  AnglePitchGyro=AnglePitchAccel;
 8001500:	4b92      	ldr	r3, [pc, #584]	; (800174c <main+0x444>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a92      	ldr	r2, [pc, #584]	; (8001750 <main+0x448>)
 8001506:	6013      	str	r3, [r2, #0]
  AngleRollGyro=AngleRollAccel;
 8001508:	4b92      	ldr	r3, [pc, #584]	; (8001754 <main+0x44c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a92      	ldr	r2, [pc, #584]	; (8001758 <main+0x450>)
 800150e:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001510:	2100      	movs	r1, #0
 8001512:	4892      	ldr	r0, [pc, #584]	; (800175c <main+0x454>)
 8001514:	f005 f934 	bl	8006780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001518:	2104      	movs	r1, #4
 800151a:	4890      	ldr	r0, [pc, #576]	; (800175c <main+0x454>)
 800151c:	f005 f930 	bl	8006780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001520:	2108      	movs	r1, #8
 8001522:	488e      	ldr	r0, [pc, #568]	; (800175c <main+0x454>)
 8001524:	f005 f92c 	bl	8006780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001528:	210c      	movs	r1, #12
 800152a:	488c      	ldr	r0, [pc, #560]	; (800175c <main+0x454>)
 800152c:	f005 f928 	bl	8006780 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8001530:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <main+0x458>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001536:	488b      	ldr	r0, [pc, #556]	; (8001764 <main+0x45c>)
 8001538:	f005 f8ca 	bl	80066d0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 800153c:	2032      	movs	r0, #50	; 0x32
 800153e:	f002 fbb9 	bl	8003cb4 <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <main+0x460>)
 8001544:	4a89      	ldr	r2, [pc, #548]	; (800176c <main+0x464>)
 8001546:	6810      	ldr	r0, [r2, #0]
 8001548:	6018      	str	r0, [r3, #0]
 800154a:	7912      	ldrb	r2, [r2, #4]
 800154c:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800154e:	4886      	ldr	r0, [pc, #536]	; (8001768 <main+0x460>)
 8001550:	f7fe fdfe 	bl	8000150 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	2301      	movs	r3, #1
 800155a:	4983      	ldr	r1, [pc, #524]	; (8001768 <main+0x460>)
 800155c:	4884      	ldr	r0, [pc, #528]	; (8001770 <main+0x468>)
 800155e:	f005 ff8b 	bl	8007478 <HAL_UART_Transmit>
	 // HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <main+0x458>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4982      	ldr	r1, [pc, #520]	; (8001774 <main+0x46c>)
 800156a:	487f      	ldr	r0, [pc, #508]	; (8001768 <main+0x460>)
 800156c:	f006 fdc4 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001570:	487d      	ldr	r0, [pc, #500]	; (8001768 <main+0x460>)
 8001572:	f7fe fded 	bl	8000150 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	2301      	movs	r3, #1
 800157c:	497a      	ldr	r1, [pc, #488]	; (8001768 <main+0x460>)
 800157e:	487c      	ldr	r0, [pc, #496]	; (8001770 <main+0x468>)
 8001580:	f005 ff7a 	bl	8007478 <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8001584:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <main+0x470>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff4d 	bl	8000428 <__aeabi_f2d>
 800158e:	4603      	mov	r3, r0
 8001590:	460c      	mov	r4, r1
 8001592:	461a      	mov	r2, r3
 8001594:	4623      	mov	r3, r4
 8001596:	4979      	ldr	r1, [pc, #484]	; (800177c <main+0x474>)
 8001598:	4873      	ldr	r0, [pc, #460]	; (8001768 <main+0x460>)
 800159a:	f006 fdad 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800159e:	4872      	ldr	r0, [pc, #456]	; (8001768 <main+0x460>)
 80015a0:	f7fe fdd6 	bl	8000150 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	496f      	ldr	r1, [pc, #444]	; (8001768 <main+0x460>)
 80015ac:	4870      	ldr	r0, [pc, #448]	; (8001770 <main+0x468>)
 80015ae:	f005 ff63 	bl	8007478 <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <main+0x478>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff36 	bl	8000428 <__aeabi_f2d>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	496f      	ldr	r1, [pc, #444]	; (8001784 <main+0x47c>)
 80015c6:	4868      	ldr	r0, [pc, #416]	; (8001768 <main+0x460>)
 80015c8:	f006 fd96 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015cc:	4866      	ldr	r0, [pc, #408]	; (8001768 <main+0x460>)
 80015ce:	f7fe fdbf 	bl	8000150 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	4963      	ldr	r1, [pc, #396]	; (8001768 <main+0x460>)
 80015da:	4865      	ldr	r0, [pc, #404]	; (8001770 <main+0x468>)
 80015dc:	f005 ff4c 	bl	8007478 <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <main+0x480>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	461a      	mov	r2, r3
 80015f0:	4623      	mov	r3, r4
 80015f2:	4966      	ldr	r1, [pc, #408]	; (800178c <main+0x484>)
 80015f4:	485c      	ldr	r0, [pc, #368]	; (8001768 <main+0x460>)
 80015f6:	f006 fd7f 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015fa:	485b      	ldr	r0, [pc, #364]	; (8001768 <main+0x460>)
 80015fc:	f7fe fda8 	bl	8000150 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	2301      	movs	r3, #1
 8001606:	4958      	ldr	r1, [pc, #352]	; (8001768 <main+0x460>)
 8001608:	4859      	ldr	r0, [pc, #356]	; (8001770 <main+0x468>)
 800160a:	f005 ff35 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <main+0x488>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff08 	bl	8000428 <__aeabi_f2d>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	461a      	mov	r2, r3
 800161e:	4623      	mov	r3, r4
 8001620:	495c      	ldr	r1, [pc, #368]	; (8001794 <main+0x48c>)
 8001622:	4851      	ldr	r0, [pc, #324]	; (8001768 <main+0x460>)
 8001624:	f006 fd68 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001628:	484f      	ldr	r0, [pc, #316]	; (8001768 <main+0x460>)
 800162a:	f7fe fd91 	bl	8000150 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	494c      	ldr	r1, [pc, #304]	; (8001768 <main+0x460>)
 8001636:	484e      	ldr	r0, [pc, #312]	; (8001770 <main+0x468>)
 8001638:	f005 ff1e 	bl	8007478 <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "wfl1=%.3f \n\r",wfl1);
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <main+0x490>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	461a      	mov	r2, r3
 800164c:	4623      	mov	r3, r4
 800164e:	4953      	ldr	r1, [pc, #332]	; (800179c <main+0x494>)
 8001650:	4845      	ldr	r0, [pc, #276]	; (8001768 <main+0x460>)
 8001652:	f006 fd51 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001656:	4844      	ldr	r0, [pc, #272]	; (8001768 <main+0x460>)
 8001658:	f7fe fd7a 	bl	8000150 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	2301      	movs	r3, #1
 8001662:	4941      	ldr	r1, [pc, #260]	; (8001768 <main+0x460>)
 8001664:	4842      	ldr	r0, [pc, #264]	; (8001770 <main+0x468>)
 8001666:	f005 ff07 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "wfl2=%.3f \n\r",wfl2);
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <main+0x498>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe feda 	bl	8000428 <__aeabi_f2d>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	4949      	ldr	r1, [pc, #292]	; (80017a4 <main+0x49c>)
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <main+0x460>)
 8001680:	f006 fd3a 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001684:	4838      	ldr	r0, [pc, #224]	; (8001768 <main+0x460>)
 8001686:	f7fe fd63 	bl	8000150 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	2301      	movs	r3, #1
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <main+0x460>)
 8001692:	4837      	ldr	r0, [pc, #220]	; (8001770 <main+0x468>)
 8001694:	f005 fef0 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "wfl3=%.3f \n\r",wfl3);
 8001698:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <main+0x4a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	461a      	mov	r2, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	4940      	ldr	r1, [pc, #256]	; (80017ac <main+0x4a4>)
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <main+0x460>)
 80016ae:	f006 fd23 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016b2:	482d      	ldr	r0, [pc, #180]	; (8001768 <main+0x460>)
 80016b4:	f7fe fd4c 	bl	8000150 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	2301      	movs	r3, #1
 80016be:	492a      	ldr	r1, [pc, #168]	; (8001768 <main+0x460>)
 80016c0:	482b      	ldr	r0, [pc, #172]	; (8001770 <main+0x468>)
 80016c2:	f005 fed9 	bl	8007478 <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "GYROZ=%d Off=%d\n\r",GyroZcal,GyroZOff);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "ACC X RAW=%d \n\r",mpu6050DataStr.Gyroscope_X);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <main+0x418>)
 80016c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4938      	ldr	r1, [pc, #224]	; (80017b0 <main+0x4a8>)
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <main+0x460>)
 80016d2:	f006 fd11 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016d6:	4824      	ldr	r0, [pc, #144]	; (8001768 <main+0x460>)
 80016d8:	f7fe fd3a 	bl	8000150 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	4921      	ldr	r1, [pc, #132]	; (8001768 <main+0x460>)
 80016e4:	4822      	ldr	r0, [pc, #136]	; (8001770 <main+0x468>)
 80016e6:	f005 fec7 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Y RAW=%d \n\r",mpu6050DataStr.Gyroscope_Y);
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <main+0x418>)
 80016ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4930      	ldr	r1, [pc, #192]	; (80017b4 <main+0x4ac>)
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <main+0x460>)
 80016f6:	f006 fcff 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <main+0x460>)
 80016fc:	f7fe fd28 	bl	8000150 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	2301      	movs	r3, #1
 8001706:	4918      	ldr	r1, [pc, #96]	; (8001768 <main+0x460>)
 8001708:	4819      	ldr	r0, [pc, #100]	; (8001770 <main+0x468>)
 800170a:	f005 feb5 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Z RAW=%d \n\r",mpu6050DataStr.Gyroscope_Z);
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <main+0x418>)
 8001710:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001714:	461a      	mov	r2, r3
 8001716:	4928      	ldr	r1, [pc, #160]	; (80017b8 <main+0x4b0>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <main+0x460>)
 800171a:	f006 fced 	bl	80080f8 <siprintf>
 800171e:	e04d      	b.n	80017bc <main+0x4b4>
 8001720:	20000540 	.word	0x20000540
 8001724:	20000300 	.word	0x20000300
 8001728:	20000568 	.word	0x20000568
 800172c:	200004a0 	.word	0x200004a0
 8001730:	200003f8 	.word	0x200003f8
 8001734:	2000022c 	.word	0x2000022c
 8001738:	10624dd3 	.word	0x10624dd3
 800173c:	20000374 	.word	0x20000374
 8001740:	200003f4 	.word	0x200003f4
 8001744:	200002a2 	.word	0x200002a2
 8001748:	20000234 	.word	0x20000234
 800174c:	2000067c 	.word	0x2000067c
 8001750:	20000678 	.word	0x20000678
 8001754:	20000658 	.word	0x20000658
 8001758:	20000578 	.word	0x20000578
 800175c:	200004a4 	.word	0x200004a4
 8001760:	20000230 	.word	0x20000230
 8001764:	20000500 	.word	0x20000500
 8001768:	20000390 	.word	0x20000390
 800176c:	0800af70 	.word	0x0800af70
 8001770:	20000450 	.word	0x20000450
 8001774:	0800af78 	.word	0x0800af78
 8001778:	20000250 	.word	0x20000250
 800177c:	0800af8c 	.word	0x0800af8c
 8001780:	20000254 	.word	0x20000254
 8001784:	0800afa0 	.word	0x0800afa0
 8001788:	20000258 	.word	0x20000258
 800178c:	0800afb0 	.word	0x0800afb0
 8001790:	2000025c 	.word	0x2000025c
 8001794:	0800afc0 	.word	0x0800afc0
 8001798:	200004ec 	.word	0x200004ec
 800179c:	0800afd0 	.word	0x0800afd0
 80017a0:	2000049c 	.word	0x2000049c
 80017a4:	0800afe0 	.word	0x0800afe0
 80017a8:	20000298 	.word	0x20000298
 80017ac:	0800aff0 	.word	0x0800aff0
 80017b0:	0800b000 	.word	0x0800b000
 80017b4:	0800b010 	.word	0x0800b010
 80017b8:	0800b020 	.word	0x0800b020
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017bc:	4855      	ldr	r0, [pc, #340]	; (8001914 <main+0x60c>)
 80017be:	f7fe fcc7 	bl	8000150 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	2301      	movs	r3, #1
 80017c8:	4952      	ldr	r1, [pc, #328]	; (8001914 <main+0x60c>)
 80017ca:	4853      	ldr	r0, [pc, #332]	; (8001918 <main+0x610>)
 80017cc:	f005 fe54 	bl	8007478 <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "RollGy=%.2f RollAcc=%.2f \n\r",AngleRollGyro,AngleRollAccel);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <main+0x614>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe27 	bl	8000428 <__aeabi_f2d>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	494f      	ldr	r1, [pc, #316]	; (8001920 <main+0x618>)
 80017e4:	484b      	ldr	r0, [pc, #300]	; (8001914 <main+0x60c>)
 80017e6:	f006 fc87 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017ea:	484a      	ldr	r0, [pc, #296]	; (8001914 <main+0x60c>)
 80017ec:	f7fe fcb0 	bl	8000150 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2301      	movs	r3, #1
 80017f6:	4947      	ldr	r1, [pc, #284]	; (8001914 <main+0x60c>)
 80017f8:	4847      	ldr	r0, [pc, #284]	; (8001918 <main+0x610>)
 80017fa:	f005 fe3d 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <main+0x61c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe10 	bl	8000428 <__aeabi_f2d>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	4945      	ldr	r1, [pc, #276]	; (8001928 <main+0x620>)
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <main+0x60c>)
 8001814:	f006 fc70 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001818:	483e      	ldr	r0, [pc, #248]	; (8001914 <main+0x60c>)
 800181a:	f7fe fc99 	bl	8000150 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	2301      	movs	r3, #1
 8001824:	493b      	ldr	r1, [pc, #236]	; (8001914 <main+0x60c>)
 8001826:	483c      	ldr	r0, [pc, #240]	; (8001918 <main+0x610>)
 8001828:	f005 fe26 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot1=%u \n\r",PWM_Mot1);
 800182c:	4b3f      	ldr	r3, [pc, #252]	; (800192c <main+0x624>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	493f      	ldr	r1, [pc, #252]	; (8001930 <main+0x628>)
 8001834:	4837      	ldr	r0, [pc, #220]	; (8001914 <main+0x60c>)
 8001836:	f006 fc5f 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800183a:	4836      	ldr	r0, [pc, #216]	; (8001914 <main+0x60c>)
 800183c:	f7fe fc88 	bl	8000150 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	2301      	movs	r3, #1
 8001846:	4933      	ldr	r1, [pc, #204]	; (8001914 <main+0x60c>)
 8001848:	4833      	ldr	r0, [pc, #204]	; (8001918 <main+0x610>)
 800184a:	f005 fe15 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot2=%u \n\r",PWM_Mot2);
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <main+0x62c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4938      	ldr	r1, [pc, #224]	; (8001938 <main+0x630>)
 8001856:	482f      	ldr	r0, [pc, #188]	; (8001914 <main+0x60c>)
 8001858:	f006 fc4e 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800185c:	482d      	ldr	r0, [pc, #180]	; (8001914 <main+0x60c>)
 800185e:	f7fe fc77 	bl	8000150 <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	2301      	movs	r3, #1
 8001868:	492a      	ldr	r1, [pc, #168]	; (8001914 <main+0x60c>)
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <main+0x610>)
 800186c:	f005 fe04 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot3=%u \n\r",PWM_Mot3);
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <main+0x634>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4932      	ldr	r1, [pc, #200]	; (8001940 <main+0x638>)
 8001878:	4826      	ldr	r0, [pc, #152]	; (8001914 <main+0x60c>)
 800187a:	f006 fc3d 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800187e:	4825      	ldr	r0, [pc, #148]	; (8001914 <main+0x60c>)
 8001880:	f7fe fc66 	bl	8000150 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	2301      	movs	r3, #1
 800188a:	4922      	ldr	r1, [pc, #136]	; (8001914 <main+0x60c>)
 800188c:	4822      	ldr	r0, [pc, #136]	; (8001918 <main+0x610>)
 800188e:	f005 fdf3 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot4=%u \n\r",PWM_Mot4);
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <main+0x63c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	492b      	ldr	r1, [pc, #172]	; (8001948 <main+0x640>)
 800189a:	481e      	ldr	r0, [pc, #120]	; (8001914 <main+0x60c>)
 800189c:	f006 fc2c 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80018a0:	481c      	ldr	r0, [pc, #112]	; (8001914 <main+0x60c>)
 80018a2:	f7fe fc55 	bl	8000150 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	4919      	ldr	r1, [pc, #100]	; (8001914 <main+0x60c>)
 80018ae:	481a      	ldr	r0, [pc, #104]	; (8001918 <main+0x610>)
 80018b0:	f005 fde2 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PID roll=%.2f \n\r",pid_output_roll);
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <main+0x644>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdb5 	bl	8000428 <__aeabi_f2d>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	4922      	ldr	r1, [pc, #136]	; (8001950 <main+0x648>)
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <main+0x60c>)
 80018ca:	f006 fc15 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80018ce:	4811      	ldr	r0, [pc, #68]	; (8001914 <main+0x60c>)
 80018d0:	f7fe fc3e 	bl	8000150 <strlen>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2301      	movs	r3, #1
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <main+0x60c>)
 80018dc:	480e      	ldr	r0, [pc, #56]	; (8001918 <main+0x610>)
 80018de:	f005 fdcb 	bl	8007478 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PID pitch=%.2f \n\r",pid_output_pitch);
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <main+0x64c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd9e 	bl	8000428 <__aeabi_f2d>
 80018ec:	4603      	mov	r3, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	4918      	ldr	r1, [pc, #96]	; (8001958 <main+0x650>)
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <main+0x60c>)
 80018f8:	f006 fbfe 	bl	80080f8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <main+0x60c>)
 80018fe:	f7fe fc27 	bl	8000150 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	2301      	movs	r3, #1
 8001908:	4902      	ldr	r1, [pc, #8]	; (8001914 <main+0x60c>)
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <main+0x610>)
 800190c:	f005 fdb4 	bl	8007478 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8001910:	e614      	b.n	800153c <main+0x234>
 8001912:	bf00      	nop
 8001914:	20000390 	.word	0x20000390
 8001918:	20000450 	.word	0x20000450
 800191c:	20000664 	.word	0x20000664
 8001920:	0800b030 	.word	0x0800b030
 8001924:	2000069c 	.word	0x2000069c
 8001928:	0800b040 	.word	0x0800b040
 800192c:	20000684 	.word	0x20000684
 8001930:	0800b050 	.word	0x0800b050
 8001934:	20000580 	.word	0x20000580
 8001938:	0800b060 	.word	0x0800b060
 800193c:	2000057c 	.word	0x2000057c
 8001940:	0800b070 	.word	0x0800b070
 8001944:	20000668 	.word	0x20000668
 8001948:	0800b080 	.word	0x0800b080
 800194c:	2000026c 	.word	0x2000026c
 8001950:	0800b090 	.word	0x0800b090
 8001954:	20000268 	.word	0x20000268
 8001958:	0800b0a4 	.word	0x0800b0a4

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	; 0x50
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001966:	2228      	movs	r2, #40	; 0x28
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f005 ff6c 	bl	8007848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800198c:	2301      	movs	r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199a:	2301      	movs	r3, #1
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f872 	bl	8005a9c <HAL_RCC_OscConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019be:	f000 faa9 	bl	8001f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c2:	230f      	movs	r3, #15
 80019c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2102      	movs	r1, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 fadc 	bl	8005f9c <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019ea:	f000 fa93 	bl	8001f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019ee:	2302      	movs	r3, #2
 80019f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fc6a 	bl	80062d4 <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a06:	f000 fa85 	bl	8001f14 <Error_Handler>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3750      	adds	r7, #80	; 0x50
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <MX_ADC1_Init+0x78>)
 8001a28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a52:	f002 f951 	bl	8003cf8 <HAL_ADC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a5c:	f000 fa5a 	bl	8001f14 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_ADC1_Init+0x74>)
 8001a72:	f002 fbcd 	bl	8004210 <HAL_ADC_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a7c:	f000 fa4a 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000041c 	.word	0x2000041c
 8001a8c:	40012400 	.word	0x40012400

08001a90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <MX_I2C2_Init+0x54>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MX_I2C2_Init+0x58>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ace:	f003 f857 	bl	8004b80 <HAL_I2C_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ad8:	f000 fa1c 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000300 	.word	0x20000300
 8001ae4:	40005800 	.word	0x40005800
 8001ae8:	00061a80 	.word	0x00061a80

08001aec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <MX_SPI2_Init+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001afc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b20:	2208      	movs	r2, #8
 8001b22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b38:	220a      	movs	r2, #10
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_SPI2_Init+0x64>)
 8001b3e:	f004 fd3b 	bl	80065b8 <HAL_SPI_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b48:	f000 f9e4 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200002a4 	.word	0x200002a4
 8001b54:	40003800 	.word	0x40003800

08001b58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b096      	sub	sp, #88	; 0x58
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 fe59 	bl	8007848 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <MX_TIM1_Init+0x188>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b9c:	4b4f      	ldr	r3, [pc, #316]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001b9e:	2247      	movs	r2, #71	; 0x47
 8001ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001baa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc2:	4846      	ldr	r0, [pc, #280]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001bc4:	f004 fd59 	bl	800667a <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bce:	f000 f9a1 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bdc:	4619      	mov	r1, r3
 8001bde:	483f      	ldr	r0, [pc, #252]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001be0:	f004 ffce 	bl	8006b80 <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bea:	f000 f993 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bee:	483b      	ldr	r0, [pc, #236]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001bf0:	f004 fd91 	bl	8006716 <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bfa:	f000 f98b 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4833      	ldr	r0, [pc, #204]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001c0e:	f005 fb3f 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c18:	f000 f97c 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4826      	ldr	r0, [pc, #152]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001c44:	f004 fed6 	bl	80069f4 <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001c4e:	f000 f961 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	2204      	movs	r2, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4820      	ldr	r0, [pc, #128]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001c5c:	f004 feca 	bl	80069f4 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001c66:	f000 f955 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	2208      	movs	r2, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	481a      	ldr	r0, [pc, #104]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001c74:	f004 febe 	bl	80069f4 <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c7e:	f000 f949 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	220c      	movs	r2, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4814      	ldr	r0, [pc, #80]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001c8c:	f004 feb2 	bl	80069f4 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001c96:	f000 f93d 	bl	8001f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001cbe:	f005 fb2b 	bl	8007318 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001cc8:	f000 f924 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <MX_TIM1_Init+0x184>)
 8001cce:	f000 fe13 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001cd2:	bf00      	nop
 8001cd4:	3758      	adds	r7, #88	; 0x58
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200004a4 	.word	0x200004a4
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d0a:	2247      	movs	r2, #71	; 0x47
 8001d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d28:	4813      	ldr	r0, [pc, #76]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d2a:	f004 fca6 	bl	800667a <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d34:	f000 f8ee 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d46:	f004 ff1b 	bl	8006b80 <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d50:	f000 f8e0 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d62:	f005 fa95 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d6c:	f000 f8d2 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000500 	.word	0x20000500

08001d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <MX_USART1_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d88:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001db4:	f005 fb13 	bl	80073de <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 f8a9 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000450 	.word	0x20000450
 8001dcc:	40013800 	.word	0x40013800

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <MX_GPIO_Init+0x134>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4a:	482f      	ldr	r0, [pc, #188]	; (8001f08 <MX_GPIO_Init+0x138>)
 8001e4c:	f002 fe68 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001e56:	482d      	ldr	r0, [pc, #180]	; (8001f0c <MX_GPIO_Init+0x13c>)
 8001e58:	f002 fe62 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e62:	482b      	ldr	r0, [pc, #172]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001e64:	f002 fe5c 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4821      	ldr	r0, [pc, #132]	; (8001f08 <MX_GPIO_Init+0x138>)
 8001e82:	f002 fcf3 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	481b      	ldr	r0, [pc, #108]	; (8001f0c <MX_GPIO_Init+0x13c>)
 8001ea0:	f002 fce4 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001eba:	f002 fcd7 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480e      	ldr	r0, [pc, #56]	; (8001f10 <MX_GPIO_Init+0x140>)
 8001ed8:	f002 fcc8 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8001edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_GPIO_Init+0x13c>)
 8001ef6:	f002 fcb9 	bl	800486c <HAL_GPIO_Init>

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40010800 	.word	0x40010800

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <nRF24_TransmitPacket+0x98>)
 8001f2e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001f30:	2200      	movs	r2, #0
 8001f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f36:	4821      	ldr	r0, [pc, #132]	; (8001fbc <nRF24_TransmitPacket+0x9c>)
 8001f38:	f002 fdf2 	bl	8004b20 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fb64 	bl	800260e <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <nRF24_TransmitPacket+0x9c>)
 8001f4e:	f002 fde7 	bl	8004b20 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001f52:	f000 fb24 	bl	800259e <nRF24_GetStatus>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f1      	bne.n	8001f52 <nRF24_TransmitPacket+0x32>
 8001f6e:	e000      	b.n	8001f72 <nRF24_TransmitPacket+0x52>
			break;
 8001f70:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <nRF24_TransmitPacket+0x9c>)
 8001f7a:	f002 fdd1 	bl	8004b20 <HAL_GPIO_WritePin>

	if (!wait) {
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001f84:	2302      	movs	r3, #2
 8001f86:	e012      	b.n	8001fae <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001f88:	f000 fb2c 	bl	80025e4 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e009      	b.n	8001fae <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e002      	b.n	8001fae <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001fa8:	f000 fb0c 	bl	80025c4 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	000fffff 	.word	0x000fffff
 8001fbc:	40010c00 	.word	0x40010c00

08001fc0 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001fca:	bf00      	nop
 8001fcc:	2102      	movs	r1, #2
 8001fce:	480e      	ldr	r0, [pc, #56]	; (8002008 <nRF24_LL_RW+0x48>)
 8001fd0:	f7ff f980 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f8      	beq.n	8001fcc <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <nRF24_LL_RW+0x48>)
 8001fe2:	f7ff f95d 	bl	80012a0 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001fe6:	bf00      	nop
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <nRF24_LL_RW+0x48>)
 8001fec:	f7ff f972 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f8      	beq.n	8001fe8 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <nRF24_LL_RW+0x48>)
 8001ff8:	f7ff f960 	bl	80012bc <SPI_I2S_ReceiveData>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b2db      	uxtb	r3, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40003800 	.word	0x40003800

0800200c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <nRF24_ReadReg+0x44>)
 800201e:	f002 fd7f 	bl	8004b20 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffc8 	bl	8001fc0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002030:	20ff      	movs	r0, #255	; 0xff
 8002032:	f7ff ffc5 	bl	8001fc0 <nRF24_LL_RW>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <nRF24_ReadReg+0x44>)
 8002042:	f002 fd6d 	bl	8004b20 <HAL_GPIO_WritePin>

	return value;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010800 	.word	0x40010800

08002054 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206a:	481a      	ldr	r0, [pc, #104]	; (80020d4 <nRF24_WriteReg+0x80>)
 800206c:	f002 fd58 	bl	8004b20 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b1f      	cmp	r3, #31
 8002074:	d810      	bhi.n	8002098 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	b25b      	sxtb	r3, r3
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	b25b      	sxtb	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff99 	bl	8001fc0 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff95 	bl	8001fc0 <nRF24_LL_RW>
 8002096:	e013      	b.n	80020c0 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff90 	bl	8001fc0 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	2be1      	cmp	r3, #225	; 0xe1
 80020a4:	d00c      	beq.n	80020c0 <nRF24_WriteReg+0x6c>
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2be2      	cmp	r3, #226	; 0xe2
 80020aa:	d009      	beq.n	80020c0 <nRF24_WriteReg+0x6c>
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2be3      	cmp	r3, #227	; 0xe3
 80020b0:	d006      	beq.n	80020c0 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2bff      	cmp	r3, #255	; 0xff
 80020b6:	d003      	beq.n	80020c0 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff80 	bl	8001fc0 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <nRF24_WriteReg+0x80>)
 80020c8:	f002 fd2a 	bl	8004b20 <HAL_GPIO_WritePin>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010800 	.word	0x40010800

080020d8 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ee:	480f      	ldr	r0, [pc, #60]	; (800212c <nRF24_ReadMBReg+0x54>)
 80020f0:	f002 fd16 	bl	8004b20 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff62 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 80020fc:	e007      	b.n	800210e <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80020fe:	683c      	ldr	r4, [r7, #0]
 8002100:	1c63      	adds	r3, r4, #1
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	20ff      	movs	r0, #255	; 0xff
 8002106:	f7ff ff5b 	bl	8001fc0 <nRF24_LL_RW>
 800210a:	4603      	mov	r3, r0
 800210c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	71ba      	strb	r2, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f2      	bne.n	80020fe <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211e:	4803      	ldr	r0, [pc, #12]	; (800212c <nRF24_ReadMBReg+0x54>)
 8002120:	f002 fcfe 	bl	8004b20 <HAL_GPIO_WritePin>
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	40010800 	.word	0x40010800

08002130 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <nRF24_WriteMBReg+0x54>)
 8002148:	f002 fcea 	bl	8004b20 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff36 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 8002154:	e006      	b.n	8002164 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	603a      	str	r2, [r7, #0]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff2e 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	71ba      	strb	r2, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f3      	bne.n	8002156 <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <nRF24_WriteMBReg+0x54>)
 8002176:	f002 fcd3 	bl	8004b20 <HAL_GPIO_WritePin>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40010800 	.word	0x40010800

08002188 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800218c:	2108      	movs	r1, #8
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff ff60 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8002194:	213f      	movs	r1, #63	; 0x3f
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff ff5c 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800219c:	2103      	movs	r1, #3
 800219e:	2002      	movs	r0, #2
 80021a0:	f7ff ff58 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80021a4:	2103      	movs	r1, #3
 80021a6:	2003      	movs	r0, #3
 80021a8:	f7ff ff54 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80021ac:	2103      	movs	r1, #3
 80021ae:	2004      	movs	r0, #4
 80021b0:	f7ff ff50 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80021b4:	2102      	movs	r1, #2
 80021b6:	2005      	movs	r0, #5
 80021b8:	f7ff ff4c 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80021bc:	210e      	movs	r1, #14
 80021be:	2006      	movs	r0, #6
 80021c0:	f7ff ff48 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80021c4:	2100      	movs	r1, #0
 80021c6:	2007      	movs	r0, #7
 80021c8:	f7ff ff44 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2011      	movs	r0, #17
 80021d0:	f7ff ff40 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2012      	movs	r0, #18
 80021d8:	f7ff ff3c 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80021dc:	2100      	movs	r1, #0
 80021de:	2013      	movs	r0, #19
 80021e0:	f7ff ff38 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2014      	movs	r0, #20
 80021e8:	f7ff ff34 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2015      	movs	r0, #21
 80021f0:	f7ff ff30 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80021f4:	2100      	movs	r1, #0
 80021f6:	2016      	movs	r0, #22
 80021f8:	f7ff ff2c 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80021fc:	2100      	movs	r1, #0
 80021fe:	201c      	movs	r0, #28
 8002200:	f7ff ff28 	bl	8002054 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002204:	2100      	movs	r1, #0
 8002206:	201d      	movs	r0, #29
 8002208:	f7ff ff24 	bl	8002054 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800220c:	f000 f9e2 	bl	80025d4 <nRF24_FlushRX>
	nRF24_FlushTX();
 8002210:	f000 f9d8 	bl	80025c4 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8002214:	f000 f9e6 	bl	80025e4 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	4802      	ldr	r0, [pc, #8]	; (8002228 <nRF24_Init+0xa0>)
 8002220:	f002 fc7e 	bl	8004b20 <HAL_GPIO_WritePin>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010800 	.word	0x40010800

0800222c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <nRF24_Check+0x58>)
 8002234:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8002236:	2205      	movs	r2, #5
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	2030      	movs	r0, #48	; 0x30
 800223c:	f7ff ff78 	bl	8002130 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002240:	463b      	mov	r3, r7
 8002242:	2205      	movs	r2, #5
 8002244:	4619      	mov	r1, r3
 8002246:	2010      	movs	r0, #16
 8002248:	f7ff ff46 	bl	80020d8 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e010      	b.n	8002274 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f107 0210 	add.w	r2, r7, #16
 8002258:	4413      	add	r3, r2
 800225a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1c59      	adds	r1, r3, #1
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <nRF24_Check+0x42>
 800226a:	2300      	movs	r3, #0
 800226c:	e006      	b.n	800227c <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	3301      	adds	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d9eb      	bls.n	8002252 <nRF24_Check+0x26>
	}

	return 1;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	0800b0b8 	.word	0x0800b0b8

08002288 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002292:	2000      	movs	r0, #0
 8002294:	f7ff feba 	bl	800200c <nRF24_ReadReg>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d104      	bne.n	80022ac <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e003      	b.n	80022b4 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	f023 0302 	bic.w	r3, r3, #2
 80022b2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	4619      	mov	r1, r3
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff fecb 	bl	8002054 <nRF24_WriteReg>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff fe9b 	bl	800200c <nRF24_ReadReg>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	b25a      	sxtb	r2, r3
 80022ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	4619      	mov	r1, r3
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff feaa 	bl	8002054 <nRF24_WriteReg>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff fe7a 	bl	800200c <nRF24_ReadReg>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	f023 030c 	bic.w	r3, r3, #12
 8002322:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	b25a      	sxtb	r2, r3
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4313      	orrs	r3, r2
 8002334:	b25b      	sxtb	r3, r3
 8002336:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4619      	mov	r1, r3
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff fe89 	bl	8002054 <nRF24_WriteReg>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4619      	mov	r1, r3
 8002358:	2005      	movs	r0, #5
 800235a:	f7ff fe7b 	bl	8002054 <nRF24_WriteReg>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	3b02      	subs	r3, #2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4619      	mov	r1, r3
 8002378:	2003      	movs	r0, #3
 800237a:	f7ff fe6b 	bl	8002054 <nRF24_WriteReg>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d846      	bhi.n	8002428 <nRF24_SetAddr+0xa0>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <nRF24_SetAddr+0x18>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023bd 	.word	0x080023bd
 80023a4:	080023bd 	.word	0x080023bd
 80023a8:	08002415 	.word	0x08002415
 80023ac:	08002415 	.word	0x08002415
 80023b0:	08002415 	.word	0x08002415
 80023b4:	08002415 	.word	0x08002415
 80023b8:	080023bd 	.word	0x080023bd
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80023bc:	2003      	movs	r0, #3
 80023be:	f7ff fe25 	bl	800200c <nRF24_ReadReg>
 80023c2:	4603      	mov	r3, r0
 80023c4:	3301      	adds	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d6:	4817      	ldr	r0, [pc, #92]	; (8002434 <nRF24_SetAddr+0xac>)
 80023d8:	f002 fba2 	bl	8004b20 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4a16      	ldr	r2, [pc, #88]	; (8002438 <nRF24_SetAddr+0xb0>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fde9 	bl	8001fc0 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	603a      	str	r2, [r7, #0]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fde2 	bl	8001fc0 <nRF24_LL_RW>
			} while (addr_width--);
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	73fa      	strb	r2, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f3      	bne.n	80023ee <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240c:	4809      	ldr	r0, [pc, #36]	; (8002434 <nRF24_SetAddr+0xac>)
 800240e:	f002 fb87 	bl	8004b20 <HAL_GPIO_WritePin>
			break;
 8002412:	e00a      	b.n	800242a <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <nRF24_SetAddr+0xb0>)
 8002418:	5cd2      	ldrb	r2, [r2, r3]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7ff fe17 	bl	8002054 <nRF24_WriteReg>
			break;
 8002426:	e000      	b.n	800242a <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002428:	bf00      	nop
	}
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40010800 	.word	0x40010800
 8002438:	0800b0f4 	.word	0x0800b0f4

0800243c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002446:	2006      	movs	r0, #6
 8002448:	f7ff fde0 	bl	800200c <nRF24_ReadReg>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	f023 0306 	bic.w	r3, r3, #6
 8002456:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4313      	orrs	r3, r2
 800245e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	4619      	mov	r1, r3
 8002464:	2006      	movs	r0, #6
 8002466:	f7ff fdf5 	bl	8002054 <nRF24_WriteReg>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800247c:	2006      	movs	r0, #6
 800247e:	f7ff fdc5 	bl	800200c <nRF24_ReadReg>
 8002482:	4603      	mov	r3, r0
 8002484:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800248c:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4313      	orrs	r3, r2
 8002494:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	4619      	mov	r1, r3
 800249a:	2006      	movs	r0, #6
 800249c:	f7ff fdda 	bl	8002054 <nRF24_WriteReg>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	460b      	mov	r3, r1
 80024b4:	71bb      	strb	r3, [r7, #6]
 80024b6:	4613      	mov	r3, r2
 80024b8:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80024ba:	2002      	movs	r0, #2
 80024bc:	f7ff fda6 	bl	800200c <nRF24_ReadReg>
 80024c0:	4603      	mov	r3, r0
 80024c2:	b25a      	sxtb	r2, r3
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	4619      	mov	r1, r3
 80024de:	2002      	movs	r0, #2
 80024e0:	f7ff fdb8 	bl	8002054 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	4a19      	ldr	r2, [pc, #100]	; (800254c <nRF24_SetRXPipe+0xa4>)
 80024e8:	5cd2      	ldrb	r2, [r2, r3]
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f7ff fdad 	bl	8002054 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff fd86 	bl	800200c <nRF24_ReadReg>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10a      	bne.n	8002520 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	b25a      	sxtb	r2, r3
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002518:	4313      	orrs	r3, r2
 800251a:	b25b      	sxtb	r3, r3
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e00b      	b.n	8002538 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2201      	movs	r2, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	b25a      	sxtb	r2, r3
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4013      	ands	r3, r2
 8002534:	b25b      	sxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4619      	mov	r1, r3
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fd89 	bl	8002054 <nRF24_WriteReg>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	0800b0ec 	.word	0x0800b0ec

08002550 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d904      	bls.n	800256a <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8002560:	2100      	movs	r1, #0
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff fd76 	bl	8002054 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8002568:	e015      	b.n	8002596 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fd4e 	bl	800200c <nRF24_ReadReg>
 8002570:	4603      	mov	r3, r0
 8002572:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2201      	movs	r2, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	b25b      	sxtb	r3, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	b25a      	sxtb	r2, r3
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4013      	ands	r3, r2
 8002588:	b25b      	sxtb	r3, r3
 800258a:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4619      	mov	r1, r3
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff fd5f 	bl	8002054 <nRF24_WriteReg>
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80025a2:	2007      	movs	r0, #7
 80025a4:	f7ff fd32 	bl	800200c <nRF24_ReadReg>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}

080025ae <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80025b2:	2017      	movs	r0, #23
 80025b4:	f7ff fd2a 	bl	800200c <nRF24_ReadReg>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80025c8:	21ff      	movs	r1, #255	; 0xff
 80025ca:	20e1      	movs	r0, #225	; 0xe1
 80025cc:	f7ff fd42 	bl	8002054 <nRF24_WriteReg>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80025d8:	21ff      	movs	r1, #255	; 0xff
 80025da:	20e2      	movs	r0, #226	; 0xe2
 80025dc:	f7ff fd3a 	bl	8002054 <nRF24_WriteReg>
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80025ea:	2007      	movs	r0, #7
 80025ec:	f7ff fd0e 	bl	800200c <nRF24_ReadReg>
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80025fa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4619      	mov	r1, r3
 8002600:	2007      	movs	r0, #7
 8002602:	f7ff fd27 	bl	8002054 <nRF24_WriteReg>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	461a      	mov	r2, r3
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	20a0      	movs	r0, #160	; 0xa0
 8002622:	f7ff fd85 	bl	8002130 <nRF24_WriteMBReg>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800263a:	2007      	movs	r0, #7
 800263c:	f7ff fce6 	bl	800200c <nRF24_ReadReg>
 8002640:	4603      	mov	r3, r0
 8002642:	105b      	asrs	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d816      	bhi.n	8002680 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <nRF24_ReadPayload+0x60>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fcd7 	bl	800200c <nRF24_ReadReg>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	2061      	movs	r0, #97	; 0x61
 8002678:	f7ff fd2e 	bl	80020d8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	e003      	b.n	8002688 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8002686:	23ff      	movs	r3, #255	; 0xff
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	0800b0ec 	.word	0x0800b0ec

08002694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_MspInit+0x5c>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_MspInit+0x5c>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6193      	str	r3, [r2, #24]
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_MspInit+0x5c>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_MspInit+0x5c>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_MspInit+0x5c>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_MspInit+0x5c>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_MspInit+0x60>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_MspInit+0x60>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000

080026f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a14      	ldr	r2, [pc, #80]	; (8002764 <HAL_ADC_MspInit+0x6c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d121      	bne.n	800275c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_ADC_MspInit+0x70>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_ADC_MspInit+0x70>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_ADC_MspInit+0x70>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_ADC_MspInit+0x70>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_ADC_MspInit+0x70>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_ADC_MspInit+0x70>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002748:	2301      	movs	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800274c:	2303      	movs	r3, #3
 800274e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4619      	mov	r1, r3
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_ADC_MspInit+0x74>)
 8002758:	f002 f888 	bl	800486c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40012400 	.word	0x40012400
 8002768:	40021000 	.word	0x40021000
 800276c:	40010800 	.word	0x40010800

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_I2C_MspInit+0x74>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d124      	bne.n	80027da <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	2312      	movs	r3, #18
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4619      	mov	r1, r3
 80027bc:	480b      	ldr	r0, [pc, #44]	; (80027ec <HAL_I2C_MspInit+0x7c>)
 80027be:	f002 f855 	bl	800486c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 80027c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027cc:	61d3      	str	r3, [r2, #28]
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_I2C_MspInit+0x78>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40005800 	.word	0x40005800
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010c00 	.word	0x40010c00

080027f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_SPI_MspInit+0x8c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d131      	bne.n	8002874 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_SPI_MspInit+0x90>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_SPI_MspInit+0x90>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	61d3      	str	r3, [r2, #28]
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_SPI_MspInit+0x90>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_SPI_MspInit+0x90>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_SPI_MspInit+0x90>)
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_SPI_MspInit+0x90>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002840:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4619      	mov	r1, r3
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <HAL_SPI_MspInit+0x94>)
 8002856:	f002 f809 	bl	800486c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800285a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800285e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4619      	mov	r1, r3
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_SPI_MspInit+0x94>)
 8002870:	f001 fffc 	bl	800486c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	40021000 	.word	0x40021000
 8002884:	40010c00 	.word	0x40010c00

08002888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10c      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 80028a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028b2:	e018      	b.n	80028e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d113      	bne.n	80028e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_TIM_Base_MspInit+0x6c>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2101      	movs	r1, #1
 80028da:	201c      	movs	r0, #28
 80028dc:	f001 ff8f 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028e0:	201c      	movs	r0, #28
 80028e2:	f001 ffa8 	bl	8004836 <HAL_NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_TIM_MspPostInit+0x5c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d118      	bne.n	800294a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002930:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2302      	movs	r3, #2
 800293c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_TIM_MspPostInit+0x64>)
 8002946:	f001 ff91 	bl	800486c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40010800 	.word	0x40010800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_UART_MspInit+0xa4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d13d      	bne.n	80029fc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4812      	ldr	r0, [pc, #72]	; (8002a0c <HAL_UART_MspInit+0xac>)
 80029c4:	f001 ff52 	bl	800486c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HAL_UART_MspInit+0xac>)
 80029dc:	f001 ff46 	bl	800486c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_UART_MspInit+0xb0>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_UART_MspInit+0xb0>)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40010000 	.word	0x40010000

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <HardFault_Handler+0x4>

08002a26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <MemManage_Handler+0x4>

08002a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <BusFault_Handler+0x4>

08002a32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <UsageFault_Handler+0x4>

08002a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a60:	f001 f90c 	bl	8003c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a70:	488e      	ldr	r0, [pc, #568]	; (8002cac <TIM2_IRQHandler+0x244>)
 8002a72:	f003 feb7 	bl	80067e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 8002a76:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <TIM2_IRQHandler+0x248>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	4a8c      	ldr	r2, [pc, #560]	; (8002cb0 <TIM2_IRQHandler+0x248>)
 8002a7e:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 8002a80:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <TIM2_IRQHandler+0x248>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2bf9      	cmp	r3, #249	; 0xf9
 8002a86:	d907      	bls.n	8002a98 <TIM2_IRQHandler+0x30>
  {
	  LEDcount=0;
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <TIM2_IRQHandler+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8002a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a92:	4888      	ldr	r0, [pc, #544]	; (8002cb4 <TIM2_IRQHandler+0x24c>)
 8002a94:	f002 f85c 	bl	8004b50 <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a9e:	4886      	ldr	r0, [pc, #536]	; (8002cb8 <TIM2_IRQHandler+0x250>)
 8002aa0:	f002 f83e 	bl	8004b20 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 8002aa4:	210a      	movs	r1, #10
 8002aa6:	4885      	ldr	r0, [pc, #532]	; (8002cbc <TIM2_IRQHandler+0x254>)
 8002aa8:	f001 faac 	bl	8004004 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8002aac:	4883      	ldr	r0, [pc, #524]	; (8002cbc <TIM2_IRQHandler+0x254>)
 8002aae:	f001 fba3 	bl	80041f8 <HAL_ADC_GetValue>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe f8ed 	bl	8000c94 <__aeabi_ui2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4980      	ldr	r1, [pc, #512]	; (8002cc0 <TIM2_IRQHandler+0x258>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f940 	bl	8000d44 <__aeabi_fmul>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fb02 	bl	80010d0 <__aeabi_f2uiz>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b7d      	ldr	r3, [pc, #500]	; (8002cc4 <TIM2_IRQHandler+0x25c>)
 8002ad0:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <TIM2_IRQHandler+0x260>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7b      	ldr	r2, [pc, #492]	; (8002cc4 <TIM2_IRQHandler+0x25c>)
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	497c      	ldr	r1, [pc, #496]	; (8002ccc <TIM2_IRQHandler+0x264>)
 8002adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8002ae0:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <TIM2_IRQHandler+0x260>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a78      	ldr	r2, [pc, #480]	; (8002cc8 <TIM2_IRQHandler+0x260>)
 8002ae8:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8002aea:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <TIM2_IRQHandler+0x260>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b31      	cmp	r3, #49	; 0x31
 8002af0:	d902      	bls.n	8002af8 <TIM2_IRQHandler+0x90>
 8002af2:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <TIM2_IRQHandler+0x260>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <TIM2_IRQHandler+0x268>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8002afe:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <TIM2_IRQHandler+0x26c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e00e      	b.n	8002b24 <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <TIM2_IRQHandler+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a70      	ldr	r2, [pc, #448]	; (8002ccc <TIM2_IRQHandler+0x264>)
 8002b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b10:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <TIM2_IRQHandler+0x268>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <TIM2_IRQHandler+0x268>)
 8002b18:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <TIM2_IRQHandler+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <TIM2_IRQHandler+0x26c>)
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b6b      	ldr	r3, [pc, #428]	; (8002cd4 <TIM2_IRQHandler+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b31      	cmp	r3, #49	; 0x31
 8002b2a:	d9ec      	bls.n	8002b06 <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <TIM2_IRQHandler+0x268>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <TIM2_IRQHandler+0x270>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	4a68      	ldr	r2, [pc, #416]	; (8002cdc <TIM2_IRQHandler+0x274>)
 8002b3a:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------

  //save OLD button states
  butt1hist=butt1;
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <TIM2_IRQHandler+0x278>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a68      	ldr	r2, [pc, #416]	; (8002ce4 <TIM2_IRQHandler+0x27c>)
 8002b42:	6013      	str	r3, [r2, #0]
  butt2hist=butt2;
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <TIM2_IRQHandler+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	; (8002cec <TIM2_IRQHandler+0x284>)
 8002b4a:	6013      	str	r3, [r2, #0]
  butt3hist=butt3;
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <TIM2_IRQHandler+0x288>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <TIM2_IRQHandler+0x28c>)
 8002b52:	6013      	str	r3, [r2, #0]
  butt4hist=butt4;
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <TIM2_IRQHandler+0x290>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a68      	ldr	r2, [pc, #416]	; (8002cfc <TIM2_IRQHandler+0x294>)
 8002b5a:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <TIM2_IRQHandler+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d07a      	beq.n	8002c5a <TIM2_IRQHandler+0x1f2>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8002b64:	f7ff fd23 	bl	80025ae <nRF24_GetStatus_RXFIFO>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d075      	beq.n	8002c5a <TIM2_IRQHandler+0x1f2>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8002b6e:	4965      	ldr	r1, [pc, #404]	; (8002d04 <TIM2_IRQHandler+0x29c>)
 8002b70:	4865      	ldr	r0, [pc, #404]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b72:	f7ff fd5d 	bl	8002630 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8002b76:	f7ff fd35 	bl	80025e4 <nRF24_ClearIRQFlags>

  			//Check if Data is in correct ranges
  			if(nRF24_payloadRX[0]<=100 && nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d860      	bhi.n	8002c44 <TIM2_IRQHandler+0x1dc>
 8002b82:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d85c      	bhi.n	8002c44 <TIM2_IRQHandler+0x1dc>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b8c:	789b      	ldrb	r3, [r3, #2]
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d858      	bhi.n	8002c44 <TIM2_IRQHandler+0x1dc>
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b94:	78db      	ldrb	r3, [r3, #3]
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d854      	bhi.n	8002c44 <TIM2_IRQHandler+0x1dc>
  			{
  				Ljoyupdown=nRF24_payloadRX[0];
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b5a      	ldr	r3, [pc, #360]	; (8002d0c <TIM2_IRQHandler+0x2a4>)
 8002ba2:	601a      	str	r2, [r3, #0]
  				Ljoyleftright=nRF24_payloadRX[1];
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <TIM2_IRQHandler+0x2a8>)
 8002bac:	601a      	str	r2, [r3, #0]
  				Djoyupdown=nRF24_payloadRX[2];
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bb0:	789b      	ldrb	r3, [r3, #2]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b57      	ldr	r3, [pc, #348]	; (8002d14 <TIM2_IRQHandler+0x2ac>)
 8002bb6:	601a      	str	r2, [r3, #0]
  				Djoyleftright=nRF24_payloadRX[3];
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bba:	78db      	ldrb	r3, [r3, #3]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <TIM2_IRQHandler+0x2b0>)
 8002bc0:	601a      	str	r2, [r3, #0]
  				potenc1=nRF24_payloadRX[4];
 8002bc2:	4b51      	ldr	r3, [pc, #324]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bc4:	791b      	ldrb	r3, [r3, #4]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <TIM2_IRQHandler+0x2b4>)
 8002bca:	601a      	str	r2, [r3, #0]
  				potenc2=nRF24_payloadRX[5];
 8002bcc:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bce:	795b      	ldrb	r3, [r3, #5]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <TIM2_IRQHandler+0x2b8>)
 8002bd4:	601a      	str	r2, [r3, #0]

  				togg1=nRF24_payloadRX[6]>>7;
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bd8:	799b      	ldrb	r3, [r3, #6]
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <TIM2_IRQHandler+0x2bc>)
 8002be2:	601a      	str	r2, [r3, #0]
  				togg2=(nRF24_payloadRX[6] & 64 )>>6;
 8002be4:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002be6:	799b      	ldrb	r3, [r3, #6]
 8002be8:	119b      	asrs	r3, r3, #6
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <TIM2_IRQHandler+0x2c0>)
 8002bf0:	6013      	str	r3, [r2, #0]
  				butt1=(nRF24_payloadRX[6] & 32 )>>5;
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002bf4:	799b      	ldrb	r3, [r3, #6]
 8002bf6:	115b      	asrs	r3, r3, #5
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	4a38      	ldr	r2, [pc, #224]	; (8002ce0 <TIM2_IRQHandler+0x278>)
 8002bfe:	6013      	str	r3, [r2, #0]
  				butt2=(nRF24_payloadRX[6] & 16 )>>4;
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002c02:	799b      	ldrb	r3, [r3, #6]
 8002c04:	111b      	asrs	r3, r3, #4
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	4a37      	ldr	r2, [pc, #220]	; (8002ce8 <TIM2_IRQHandler+0x280>)
 8002c0c:	6013      	str	r3, [r2, #0]
  				butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	10db      	asrs	r3, r3, #3
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	4a35      	ldr	r2, [pc, #212]	; (8002cf0 <TIM2_IRQHandler+0x288>)
 8002c1a:	6013      	str	r3, [r2, #0]
  				butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	109b      	asrs	r3, r3, #2
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <TIM2_IRQHandler+0x290>)
 8002c28:	6013      	str	r3, [r2, #0]
  				buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002c2c:	799b      	ldrb	r3, [r3, #6]
 8002c2e:	105b      	asrs	r3, r3, #1
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	4a3d      	ldr	r2, [pc, #244]	; (8002d2c <TIM2_IRQHandler+0x2c4>)
 8002c36:	6013      	str	r3, [r2, #0]
  				buttD=(nRF24_payloadRX[6] & 1 );
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <TIM2_IRQHandler+0x2a0>)
 8002c3a:	799b      	ldrb	r3, [r3, #6]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <TIM2_IRQHandler+0x2c8>)
 8002c42:	6013      	str	r3, [r2, #0]


  			}
  			SendBackFlag=1;
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <TIM2_IRQHandler+0x2cc>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <TIM2_IRQHandler+0x298>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <TIM2_IRQHandler+0x2d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <TIM2_IRQHandler+0x2d0>)
 8002c58:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <TIM2_IRQHandler+0x2cc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80ff 	beq.w	8002e62 <TIM2_IRQHandler+0x3fa>
  {
    	BackTimer++;
 8002c64:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <TIM2_IRQHandler+0x2d4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <TIM2_IRQHandler+0x2d4>)
 8002c6c:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <TIM2_IRQHandler+0x2d4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	f200 80f4 	bhi.w	8002e62 <TIM2_IRQHandler+0x3fa>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <TIM2_IRQHandler+0x218>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002e63 	.word	0x08002e63
 8002c88:	08002e63 	.word	0x08002e63
 8002c8c:	08002d41 	.word	0x08002d41
 8002c90:	08002e3b 	.word	0x08002e3b
 8002c94:	08002e4f 	.word	0x08002e4f
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <TIM2_IRQHandler+0x250>)
 8002ca0:	f001 ff3e 	bl	8004b20 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff fb0e 	bl	80022c6 <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8002caa:	e0da      	b.n	8002e62 <TIM2_IRQHandler+0x3fa>
 8002cac:	20000500 	.word	0x20000500
 8002cb0:	20000690 	.word	0x20000690
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40010c00 	.word	0x40010c00
 8002cbc:	2000041c 	.word	0x2000041c
 8002cc0:	4090ac29 	.word	0x4090ac29
 8002cc4:	20000698 	.word	0x20000698
 8002cc8:	20000240 	.word	0x20000240
 8002ccc:	20000588 	.word	0x20000588
 8002cd0:	20000238 	.word	0x20000238
 8002cd4:	2000022c 	.word	0x2000022c
 8002cd8:	51eb851f 	.word	0x51eb851f
 8002cdc:	2000023c 	.word	0x2000023c
 8002ce0:	200004f4 	.word	0x200004f4
 8002ce4:	20000670 	.word	0x20000670
 8002ce8:	20000560 	.word	0x20000560
 8002cec:	20000674 	.word	0x20000674
 8002cf0:	20000494 	.word	0x20000494
 8002cf4:	20000660 	.word	0x20000660
 8002cf8:	2000029c 	.word	0x2000029c
 8002cfc:	2000065c 	.word	0x2000065c
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000228 	.word	0x20000228
 8002d08:	20000354 	.word	0x20000354
 8002d0c:	200004e4 	.word	0x200004e4
 8002d10:	2000044c 	.word	0x2000044c
 8002d14:	20000554 	.word	0x20000554
 8002d18:	20000294 	.word	0x20000294
 8002d1c:	200004fc 	.word	0x200004fc
 8002d20:	20000558 	.word	0x20000558
 8002d24:	20000498 	.word	0x20000498
 8002d28:	20000564 	.word	0x20000564
 8002d2c:	200002fc 	.word	0x200002fc
 8002d30:	200004f8 	.word	0x200004f8
 8002d34:	20000244 	.word	0x20000244
 8002d38:	20000584 	.word	0x20000584
 8002d3c:	20000248 	.word	0x20000248

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <TIM2_IRQHandler+0x430>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002d48:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <TIM2_IRQHandler+0x430>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002d54:	705a      	strb	r2, [r3, #1]


  	 	 			//save Angle for NRF24 transfer
  	 	 			if(AnglePitch<0)
 8002d56:	4b52      	ldr	r3, [pc, #328]	; (8002ea0 <TIM2_IRQHandler+0x438>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f98e 	bl	8001080 <__aeabi_fcmplt>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00e      	beq.n	8002d88 <TIM2_IRQHandler+0x320>
  	 	 			{
  	 	 				AnglePitchDIR=1;
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <TIM2_IRQHandler+0x43c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
  	 	 				AnglePitchNRF24=AnglePitch*(-1);
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <TIM2_IRQHandler+0x438>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe f9a9 	bl	80010d0 <__aeabi_f2uiz>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b49      	ldr	r3, [pc, #292]	; (8002ea8 <TIM2_IRQHandler+0x440>)
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e00b      	b.n	8002da0 <TIM2_IRQHandler+0x338>
  	 	 			}
  	 	 			else
  	 	 			{
  	 	 				AnglePitchDIR=0;
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <TIM2_IRQHandler+0x43c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
  	 	 				AnglePitchNRF24=AnglePitch;
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <TIM2_IRQHandler+0x438>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f99c 	bl	80010d0 <__aeabi_f2uiz>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <TIM2_IRQHandler+0x440>)
 8002d9e:	701a      	strb	r2, [r3, #0]
  	 	 			}


  	 	 			if(AngleRoll<0)
 8002da0:	4b42      	ldr	r3, [pc, #264]	; (8002eac <TIM2_IRQHandler+0x444>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f969 	bl	8001080 <__aeabi_fcmplt>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <TIM2_IRQHandler+0x36a>
  	 	 			{
  	 	 				AngleRollDIR=1;
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <TIM2_IRQHandler+0x448>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
  	 	 				AngleRollNRF24=AngleRoll*(-1);
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <TIM2_IRQHandler+0x444>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f984 	bl	80010d0 <__aeabi_f2uiz>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <TIM2_IRQHandler+0x44c>)
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e00b      	b.n	8002dea <TIM2_IRQHandler+0x382>
  	 	 			}
  	 	 			else
  	 	 			{
  	 	 				AngleRollDIR=0;
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <TIM2_IRQHandler+0x448>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  	 	 				AngleRollNRF24=AngleRoll;
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <TIM2_IRQHandler+0x444>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe f977 	bl	80010d0 <__aeabi_f2uiz>
 8002de2:	4603      	mov	r3, r0
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <TIM2_IRQHandler+0x44c>)
 8002de8:	701a      	strb	r2, [r3, #0]
  	 	 			}

  	 	 			nRF24_payloadTX[2] = (uint8_t)(AnglePitchNRF24);
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <TIM2_IRQHandler+0x440>)
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002df0:	709a      	strb	r2, [r3, #2]
  	 	 			nRF24_payloadTX[3] = (uint8_t)(AngleRollNRF24);
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <TIM2_IRQHandler+0x44c>)
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002df8:	70da      	strb	r2, [r3, #3]
  	 	 			nRF24_payloadTX[4] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <TIM2_IRQHandler+0x448>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <TIM2_IRQHandler+0x43c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <TIM2_IRQHandler+0x450>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <TIM2_IRQHandler+0x454>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002e2e:	711a      	strb	r2, [r3, #4]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 5);
 8002e30:	2105      	movs	r1, #5
 8002e32:	481a      	ldr	r0, [pc, #104]	; (8002e9c <TIM2_IRQHandler+0x434>)
 8002e34:	f7ff f874 	bl	8001f20 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8002e38:	e013      	b.n	8002e62 <TIM2_IRQHandler+0x3fa>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f7ff fa43 	bl	80022c6 <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8002e40:	2201      	movs	r2, #1
 8002e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e46:	481e      	ldr	r0, [pc, #120]	; (8002ec0 <TIM2_IRQHandler+0x458>)
 8002e48:	f001 fe6a 	bl	8004b20 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8002e4c:	e009      	b.n	8002e62 <TIM2_IRQHandler+0x3fa>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <TIM2_IRQHandler+0x45c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <TIM2_IRQHandler+0x460>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <TIM2_IRQHandler+0x464>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

  				}break;
 8002e60:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <TIM2_IRQHandler+0x468>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <TIM2_IRQHandler+0x468>)
 8002e6a:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <TIM2_IRQHandler+0x468>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e74:	d13f      	bne.n	8002ef6 <TIM2_IRQHandler+0x48e>
  {
    		MSGprerSecond=MSGcount;
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <TIM2_IRQHandler+0x46c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <TIM2_IRQHandler+0x470>)
 8002e7c:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <TIM2_IRQHandler+0x46c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	d82e      	bhi.n	8002ee4 <TIM2_IRQHandler+0x47c>
    		{
    			MSGLowCount++;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <TIM2_IRQHandler+0x474>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <TIM2_IRQHandler+0x474>)
 8002e8e:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <TIM2_IRQHandler+0x478>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e028      	b.n	8002eea <TIM2_IRQHandler+0x482>
 8002e98:	2000023c 	.word	0x2000023c
 8002e9c:	200003fc 	.word	0x200003fc
 8002ea0:	20000664 	.word	0x20000664
 8002ea4:	2000066c 	.word	0x2000066c
 8002ea8:	2000068c 	.word	0x2000068c
 8002eac:	2000069c 	.word	0x2000069c
 8002eb0:	20000680 	.word	0x20000680
 8002eb4:	20000694 	.word	0x20000694
 8002eb8:	20000234 	.word	0x20000234
 8002ebc:	20000230 	.word	0x20000230
 8002ec0:	40010c00 	.word	0x40010c00
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000244 	.word	0x20000244
 8002ecc:	20000248 	.word	0x20000248
 8002ed0:	20000570 	.word	0x20000570
 8002ed4:	20000584 	.word	0x20000584
 8002ed8:	20000654 	.word	0x20000654
 8002edc:	20000650 	.word	0x20000650
 8002ee0:	20000688 	.word	0x20000688
    		}
    		 else  ConnectWeakFlag=0;
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	; (80031c8 <TIM2_IRQHandler+0x760>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002eea:	4bb8      	ldr	r3, [pc, #736]	; (80031cc <TIM2_IRQHandler+0x764>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8002ef0:	4bb7      	ldr	r3, [pc, #732]	; (80031d0 <TIM2_IRQHandler+0x768>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------
  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8002ef6:	49b7      	ldr	r1, [pc, #732]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8002ef8:	48b7      	ldr	r0, [pc, #732]	; (80031d8 <TIM2_IRQHandler+0x770>)
 8002efa:	f7fe f96d 	bl	80011d8 <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8002efe:	49b5      	ldr	r1, [pc, #724]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8002f00:	48b5      	ldr	r0, [pc, #724]	; (80031d8 <TIM2_IRQHandler+0x770>)
 8002f02:	f7fe f99b 	bl	800123c <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8002f06:	4bb3      	ldr	r3, [pc, #716]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8002f08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4bb3      	ldr	r3, [pc, #716]	; (80031dc <TIM2_IRQHandler+0x774>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	4bb0      	ldr	r3, [pc, #704]	; (80031e0 <TIM2_IRQHandler+0x778>)
 8002f1e:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8002f20:	4bac      	ldr	r3, [pc, #688]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8002f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4bae      	ldr	r3, [pc, #696]	; (80031e4 <TIM2_IRQHandler+0x77c>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	4bac      	ldr	r3, [pc, #688]	; (80031e8 <TIM2_IRQHandler+0x780>)
 8002f38:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8002f3a:	4ba6      	ldr	r3, [pc, #664]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8002f3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4baa      	ldr	r3, [pc, #680]	; (80031ec <TIM2_IRQHandler+0x784>)
 8002f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	4ba7      	ldr	r3, [pc, #668]	; (80031f0 <TIM2_IRQHandler+0x788>)
 8002f52:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTORANGLE;
 8002f54:	4ba2      	ldr	r3, [pc, #648]	; (80031e0 <TIM2_IRQHandler+0x778>)
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fe9e 	bl	8000c9c <__aeabi_i2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	49a4      	ldr	r1, [pc, #656]	; (80031f4 <TIM2_IRQHandler+0x78c>)
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd feed 	bl	8000d44 <__aeabi_fmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4ba2      	ldr	r3, [pc, #648]	; (80031f8 <TIM2_IRQHandler+0x790>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7fd fddd 	bl	8000b34 <__addsf3>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b9e      	ldr	r3, [pc, #632]	; (80031f8 <TIM2_IRQHandler+0x790>)
 8002f80:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTORANGLE;
 8002f82:	4b99      	ldr	r3, [pc, #612]	; (80031e8 <TIM2_IRQHandler+0x780>)
 8002f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fe87 	bl	8000c9c <__aeabi_i2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4998      	ldr	r1, [pc, #608]	; (80031f4 <TIM2_IRQHandler+0x78c>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fed6 	bl	8000d44 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b97      	ldr	r3, [pc, #604]	; (80031fc <TIM2_IRQHandler+0x794>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f7fd fdc6 	bl	8000b34 <__addsf3>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b93      	ldr	r3, [pc, #588]	; (80031fc <TIM2_IRQHandler+0x794>)
 8002fae:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8002fb0:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <TIM2_IRQHandler+0x790>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa37 	bl	8000428 <__aeabi_f2d>
 8002fba:	4680      	mov	r8, r0
 8002fbc:	4689      	mov	r9, r1
 8002fbe:	4b8f      	ldr	r3, [pc, #572]	; (80031fc <TIM2_IRQHandler+0x794>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa30 	bl	8000428 <__aeabi_f2d>
 8002fc8:	4682      	mov	sl, r0
 8002fca:	468b      	mov	fp, r1
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <TIM2_IRQHandler+0x788>)
 8002fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fe62 	bl	8000c9c <__aeabi_i2f>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4989      	ldr	r1, [pc, #548]	; (8003200 <TIM2_IRQHandler+0x798>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd feb1 	bl	8000d44 <__aeabi_fmul>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4983      	ldr	r1, [pc, #524]	; (80031f4 <TIM2_IRQHandler+0x78c>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd feac 	bl	8000d44 <__aeabi_fmul>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fa1a 	bl	8000428 <__aeabi_f2d>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f006 fc6a 	bl	80098d4 <sin>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4650      	mov	r0, sl
 8003006:	4659      	mov	r1, fp
 8003008:	f7fd fa66 	bl	80004d8 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4640      	mov	r0, r8
 8003012:	4649      	mov	r1, r9
 8003014:	f7fd f8aa 	bl	800016c <__adddf3>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f7fd fd32 	bl	8000a88 <__aeabi_d2f>
 8003024:	4602      	mov	r2, r0
 8003026:	4b74      	ldr	r3, [pc, #464]	; (80031f8 <TIM2_IRQHandler+0x790>)
 8003028:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 800302a:	4b74      	ldr	r3, [pc, #464]	; (80031fc <TIM2_IRQHandler+0x794>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd f9fa 	bl	8000428 <__aeabi_f2d>
 8003034:	4680      	mov	r8, r0
 8003036:	4689      	mov	r9, r1
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <TIM2_IRQHandler+0x790>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd f9f3 	bl	8000428 <__aeabi_f2d>
 8003042:	4682      	mov	sl, r0
 8003044:	468b      	mov	fp, r1
 8003046:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <TIM2_IRQHandler+0x788>)
 8003048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fe25 	bl	8000c9c <__aeabi_i2f>
 8003052:	4603      	mov	r3, r0
 8003054:	496a      	ldr	r1, [pc, #424]	; (8003200 <TIM2_IRQHandler+0x798>)
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fe74 	bl	8000d44 <__aeabi_fmul>
 800305c:	4603      	mov	r3, r0
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <TIM2_IRQHandler+0x78c>)
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fe6f 	bl	8000d44 <__aeabi_fmul>
 8003066:	4603      	mov	r3, r0
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd f9dd 	bl	8000428 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f006 fc2d 	bl	80098d4 <sin>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4650      	mov	r0, sl
 8003080:	4659      	mov	r1, fp
 8003082:	f7fd fa29 	bl	80004d8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f7fd f86b 	bl	8000168 <__aeabi_dsub>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f7fd fcf5 	bl	8000a88 <__aeabi_d2f>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b56      	ldr	r3, [pc, #344]	; (80031fc <TIM2_IRQHandler+0x794>)
 80030a2:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b2:	fb03 f202 	mul.w	r2, r3, r2
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030bc:	4619      	mov	r1, r3
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030c4:	fb03 f301 	mul.w	r3, r3, r1
 80030c8:	441a      	add	r2, r3
 80030ca:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 80030d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d8:	fb03 f301 	mul.w	r3, r3, r1
 80030dc:	4413      	add	r3, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f990 	bl	8000404 <__aeabi_i2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f006 fc80 	bl	80099f0 <sqrt>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fd fcc6 	bl	8000a88 <__aeabi_d2f>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <TIM2_IRQHandler+0x79c>)
 8003100:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 8003104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fdc7 	bl	8000c9c <__aeabi_i2f>
 800310e:	4602      	mov	r2, r0
 8003110:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <TIM2_IRQHandler+0x79c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fd fec8 	bl	8000eac <__aeabi_fdiv>
 800311c:	4603      	mov	r3, r0
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f982 	bl	8000428 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f006 fc0c 	bl	8009948 <asin>
 8003130:	a323      	add	r3, pc, #140	; (adr r3, 80031c0 <TIM2_IRQHandler+0x758>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f7fd f9cf 	bl	80004d8 <__aeabi_dmul>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f7fd fca1 	bl	8000a88 <__aeabi_d2f>
 8003146:	4602      	mov	r2, r0
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <TIM2_IRQHandler+0x7a0>)
 800314a:	601a      	str	r2, [r3, #0]
  AngleRollAccel=-asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <TIM2_IRQHandler+0x76c>)
 800314e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fda2 	bl	8000c9c <__aeabi_i2f>
 8003158:	4602      	mov	r2, r0
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <TIM2_IRQHandler+0x79c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fd fea3 	bl	8000eac <__aeabi_fdiv>
 8003166:	4603      	mov	r3, r0
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f95d 	bl	8000428 <__aeabi_f2d>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f006 fbe7 	bl	8009948 <asin>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4614      	mov	r4, r2
 8003180:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003184:	a30e      	add	r3, pc, #56	; (adr r3, 80031c0 <TIM2_IRQHandler+0x758>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f7fd f9a3 	bl	80004d8 <__aeabi_dmul>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4618      	mov	r0, r3
 8003198:	4621      	mov	r1, r4
 800319a:	f7fd fc75 	bl	8000a88 <__aeabi_d2f>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <TIM2_IRQHandler+0x7a4>)
 80031a2:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <TIM2_IRQHandler+0x7a0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4919      	ldr	r1, [pc, #100]	; (8003210 <TIM2_IRQHandler+0x7a8>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fcc0 	bl	8000b30 <__aeabi_fsub>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <TIM2_IRQHandler+0x7a0>)
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e02c      	b.n	8003214 <TIM2_IRQHandler+0x7ac>
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w
 80031c0:	20000000 	.word	0x20000000
 80031c4:	404ca5dc 	.word	0x404ca5dc
 80031c8:	20000688 	.word	0x20000688
 80031cc:	20000584 	.word	0x20000584
 80031d0:	20000570 	.word	0x20000570
 80031d4:	20000540 	.word	0x20000540
 80031d8:	20000300 	.word	0x20000300
 80031dc:	20000374 	.word	0x20000374
 80031e0:	200002a0 	.word	0x200002a0
 80031e4:	200003f4 	.word	0x200003f4
 80031e8:	20000388 	.word	0x20000388
 80031ec:	200002a2 	.word	0x200002a2
 80031f0:	20000490 	.word	0x20000490
 80031f4:	38001203 	.word	0x38001203
 80031f8:	20000678 	.word	0x20000678
 80031fc:	20000578 	.word	0x20000578
 8003200:	3c8efa35 	.word	0x3c8efa35
 8003204:	20000574 	.word	0x20000574
 8003208:	2000067c 	.word	0x2000067c
 800320c:	20000658 	.word	0x20000658
 8003210:	3e4ccccd 	.word	0x3e4ccccd
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 8003214:	4bae      	ldr	r3, [pc, #696]	; (80034d0 <TIM2_IRQHandler+0xa68>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	49ae      	ldr	r1, [pc, #696]	; (80034d4 <TIM2_IRQHandler+0xa6c>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fc88 	bl	8000b30 <__aeabi_fsub>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4baa      	ldr	r3, [pc, #680]	; (80034d0 <TIM2_IRQHandler+0xa68>)
 8003226:	601a      	str	r2, [r3, #0]

  AnglePitch=0.998*AnglePitchGyro + 0.002*AnglePitchAccel;
 8003228:	4bab      	ldr	r3, [pc, #684]	; (80034d8 <TIM2_IRQHandler+0xa70>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f8fb 	bl	8000428 <__aeabi_f2d>
 8003232:	a39f      	add	r3, pc, #636	; (adr r3, 80034b0 <TIM2_IRQHandler+0xa48>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd f94e 	bl	80004d8 <__aeabi_dmul>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	4625      	mov	r5, r4
 8003242:	461c      	mov	r4, r3
 8003244:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <TIM2_IRQHandler+0xa74>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f8ed 	bl	8000428 <__aeabi_f2d>
 800324e:	a39a      	add	r3, pc, #616	; (adr r3, 80034b8 <TIM2_IRQHandler+0xa50>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f940 	bl	80004d8 <__aeabi_dmul>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fc ff84 	bl	800016c <__adddf3>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	4618      	mov	r0, r3
 800326a:	4621      	mov	r1, r4
 800326c:	f7fd fc0c 	bl	8000a88 <__aeabi_d2f>
 8003270:	4602      	mov	r2, r0
 8003272:	4b9b      	ldr	r3, [pc, #620]	; (80034e0 <TIM2_IRQHandler+0xa78>)
 8003274:	601a      	str	r2, [r3, #0]
  AngleRoll=0.998*AngleRollGyro + 0.002*AngleRollAccel;
 8003276:	4b9b      	ldr	r3, [pc, #620]	; (80034e4 <TIM2_IRQHandler+0xa7c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f8d4 	bl	8000428 <__aeabi_f2d>
 8003280:	a38b      	add	r3, pc, #556	; (adr r3, 80034b0 <TIM2_IRQHandler+0xa48>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f7fd f927 	bl	80004d8 <__aeabi_dmul>
 800328a:	4603      	mov	r3, r0
 800328c:	460c      	mov	r4, r1
 800328e:	4625      	mov	r5, r4
 8003290:	461c      	mov	r4, r3
 8003292:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <TIM2_IRQHandler+0xa68>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f8c6 	bl	8000428 <__aeabi_f2d>
 800329c:	a386      	add	r3, pc, #536	; (adr r3, 80034b8 <TIM2_IRQHandler+0xa50>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f919 	bl	80004d8 <__aeabi_dmul>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4620      	mov	r0, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	f7fc ff5d 	bl	800016c <__adddf3>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	4618      	mov	r0, r3
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7fd fbe5 	bl	8000a88 <__aeabi_d2f>
 80032be:	4602      	mov	r2, r0
 80032c0:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <TIM2_IRQHandler+0xa80>)
 80032c2:	601a      	str	r2, [r3, #0]


  //PID input Filtered
  PitchGyroPIDin =  (PitchGyroPIDin * 0.7) + (AnglePitch * 0.3);
 80032c4:	4b89      	ldr	r3, [pc, #548]	; (80034ec <TIM2_IRQHandler+0xa84>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8ad 	bl	8000428 <__aeabi_f2d>
 80032ce:	a37c      	add	r3, pc, #496	; (adr r3, 80034c0 <TIM2_IRQHandler+0xa58>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd f900 	bl	80004d8 <__aeabi_dmul>
 80032d8:	4603      	mov	r3, r0
 80032da:	460c      	mov	r4, r1
 80032dc:	4625      	mov	r5, r4
 80032de:	461c      	mov	r4, r3
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <TIM2_IRQHandler+0xa78>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f89f 	bl	8000428 <__aeabi_f2d>
 80032ea:	a377      	add	r3, pc, #476	; (adr r3, 80034c8 <TIM2_IRQHandler+0xa60>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd f8f2 	bl	80004d8 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fc ff36 	bl	800016c <__adddf3>
 8003300:	4603      	mov	r3, r0
 8003302:	460c      	mov	r4, r1
 8003304:	4618      	mov	r0, r3
 8003306:	4621      	mov	r1, r4
 8003308:	f7fd fbbe 	bl	8000a88 <__aeabi_d2f>
 800330c:	4602      	mov	r2, r0
 800330e:	4b77      	ldr	r3, [pc, #476]	; (80034ec <TIM2_IRQHandler+0xa84>)
 8003310:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (AngleRoll * 0.3);
 8003312:	4b77      	ldr	r3, [pc, #476]	; (80034f0 <TIM2_IRQHandler+0xa88>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f886 	bl	8000428 <__aeabi_f2d>
 800331c:	a368      	add	r3, pc, #416	; (adr r3, 80034c0 <TIM2_IRQHandler+0xa58>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fd f8d9 	bl	80004d8 <__aeabi_dmul>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	4625      	mov	r5, r4
 800332c:	461c      	mov	r4, r3
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <TIM2_IRQHandler+0xa80>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f878 	bl	8000428 <__aeabi_f2d>
 8003338:	a363      	add	r3, pc, #396	; (adr r3, 80034c8 <TIM2_IRQHandler+0xa60>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd f8cb 	bl	80004d8 <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f7fc ff0f 	bl	800016c <__adddf3>
 800334e:	4603      	mov	r3, r0
 8003350:	460c      	mov	r4, r1
 8003352:	4618      	mov	r0, r3
 8003354:	4621      	mov	r1, r4
 8003356:	f7fd fb97 	bl	8000a88 <__aeabi_d2f>
 800335a:	4602      	mov	r2, r0
 800335c:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <TIM2_IRQHandler+0xa88>)
 800335e:	601a      	str	r2, [r3, #0]
  //SCALE DATA
  //Input Controller Center to MAX 50 - >100  --->0-800 us
  //ThrottleINscaled=ScaleDataFl(Ljoyupdown,50,100,MINTRHOTTLE,THROTTLESCALE);//throttle limit to 80%

  //TESTING potenciometer=throttle
  ThrottleINscaled=ScaleDataFl(potenc1,0,100,0,1000);//direct 10-100 -->0-1000 testing
 8003360:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <TIM2_IRQHandler+0xa8c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fc95 	bl	8000c94 <__aeabi_ui2f>
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <TIM2_IRQHandler+0xa90>)
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	4a62      	ldr	r2, [pc, #392]	; (80034fc <TIM2_IRQHandler+0xa94>)
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	f000 fb04 	bl	8003984 <ScaleDataFl>
 800337c:	4602      	mov	r2, r0
 800337e:	4b60      	ldr	r3, [pc, #384]	; (8003500 <TIM2_IRQHandler+0xa98>)
 8003380:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-MAXPITCHSCALE,+MAXPITCHSCALE);
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <TIM2_IRQHandler+0xa9c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fc84 	bl	8000c94 <__aeabi_ui2f>
 800338c:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <TIM2_IRQHandler+0xaa0>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4b5e      	ldr	r3, [pc, #376]	; (800350c <TIM2_IRQHandler+0xaa4>)
 8003392:	4a5a      	ldr	r2, [pc, #360]	; (80034fc <TIM2_IRQHandler+0xa94>)
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	f000 faf4 	bl	8003984 <ScaleDataFl>
 800339c:	4602      	mov	r2, r0
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <TIM2_IRQHandler+0xaa8>)
 80033a0:	601a      	str	r2, [r3, #0]
  //Invert
  PitchINscaled*=(-1);
 80033a2:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <TIM2_IRQHandler+0xaa8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80033aa:	4a59      	ldr	r2, [pc, #356]	; (8003510 <TIM2_IRQHandler+0xaa8>)
 80033ac:	6013      	str	r3, [r2, #0]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-MAXROLLSCALE,MAXROLLSCALE);
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <TIM2_IRQHandler+0xaac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fc6e 	bl	8000c94 <__aeabi_ui2f>
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <TIM2_IRQHandler+0xaa0>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <TIM2_IRQHandler+0xaa4>)
 80033be:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <TIM2_IRQHandler+0xa94>)
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	f000 fade 	bl	8003984 <ScaleDataFl>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b53      	ldr	r3, [pc, #332]	; (8003518 <TIM2_IRQHandler+0xab0>)
 80033cc:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 ->scaling
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-MAXYAWSCALE,MAXYAWSCALE);
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <TIM2_IRQHandler+0xab4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fc5e 	bl	8000c94 <__aeabi_ui2f>
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <TIM2_IRQHandler+0xab8>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4b51      	ldr	r3, [pc, #324]	; (8003524 <TIM2_IRQHandler+0xabc>)
 80033de:	4a47      	ldr	r2, [pc, #284]	; (80034fc <TIM2_IRQHandler+0xa94>)
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	f000 face 	bl	8003984 <ScaleDataFl>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <TIM2_IRQHandler+0xac0>)
 80033ec:	601a      	str	r2, [r3, #0]

  //PID tunning
  //pid_p_gain_roll=potenc2*0.1;
  //pid_d_gain_roll=potenc1*8;
  //pid_i_gain_roll=potenc2*0.0001;
  wfl1=pid_p_gain_roll;
 80033ee:	4b4f      	ldr	r3, [pc, #316]	; (800352c <TIM2_IRQHandler+0xac4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4f      	ldr	r2, [pc, #316]	; (8003530 <TIM2_IRQHandler+0xac8>)
 80033f4:	6013      	str	r3, [r2, #0]
  wfl2=pid_d_gain_roll;
 80033f6:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <TIM2_IRQHandler+0xacc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <TIM2_IRQHandler+0xad0>)
 80033fc:	6013      	str	r3, [r2, #0]
  wfl3=pid_i_gain_roll;
 80033fe:	4b4f      	ldr	r3, [pc, #316]	; (800353c <TIM2_IRQHandler+0xad4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <TIM2_IRQHandler+0xad8>)
 8003404:	6013      	str	r3, [r2, #0]

  //PID
  pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, pid_p_gain_pitch, pid_i_gain_pitch, pid_d_gain_pitch,&pitch_integral, &pitch_diffErrHist, pid_i_max_pitch, pid_max_pitch);
 8003406:	4b42      	ldr	r3, [pc, #264]	; (8003510 <TIM2_IRQHandler+0xaa8>)
 8003408:	681d      	ldr	r5, [r3, #0]
 800340a:	4b38      	ldr	r3, [pc, #224]	; (80034ec <TIM2_IRQHandler+0xa84>)
 800340c:	681e      	ldr	r6, [r3, #0]
 800340e:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <TIM2_IRQHandler+0xadc>)
 8003410:	f8d3 8000 	ldr.w	r8, [r3]
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <TIM2_IRQHandler+0xae0>)
 8003416:	f8d3 9000 	ldr.w	r9, [r3]
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <TIM2_IRQHandler+0xae4>)
 800341c:	681c      	ldr	r4, [r3, #0]
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <TIM2_IRQHandler+0xae8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fc3a 	bl	8000c9c <__aeabi_i2f>
 8003428:	4682      	mov	sl, r0
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <TIM2_IRQHandler+0xaec>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc34 	bl	8000c9c <__aeabi_i2f>
 8003434:	4603      	mov	r3, r0
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	f8cd a00c 	str.w	sl, [sp, #12]
 800343c:	4b46      	ldr	r3, [pc, #280]	; (8003558 <TIM2_IRQHandler+0xaf0>)
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <TIM2_IRQHandler+0xaf4>)
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	9400      	str	r4, [sp, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	4642      	mov	r2, r8
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	f000 facf 	bl	80039f0 <pid>
 8003452:	4602      	mov	r2, r0
 8003454:	4b42      	ldr	r3, [pc, #264]	; (8003560 <TIM2_IRQHandler+0xaf8>)
 8003456:	601a      	str	r2, [r3, #0]
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, pid_p_gain_roll, pid_i_gain_roll, pid_d_gain_roll,&roll_integral,&roll_diffErrHist,pid_i_max_roll, pid_max_roll );
 8003458:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <TIM2_IRQHandler+0xab0>)
 800345a:	681d      	ldr	r5, [r3, #0]
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <TIM2_IRQHandler+0xa88>)
 800345e:	681e      	ldr	r6, [r3, #0]
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <TIM2_IRQHandler+0xac4>)
 8003462:	f8d3 8000 	ldr.w	r8, [r3]
 8003466:	4b35      	ldr	r3, [pc, #212]	; (800353c <TIM2_IRQHandler+0xad4>)
 8003468:	f8d3 9000 	ldr.w	r9, [r3]
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <TIM2_IRQHandler+0xacc>)
 800346e:	681c      	ldr	r4, [r3, #0]
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <TIM2_IRQHandler+0xafc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fc11 	bl	8000c9c <__aeabi_i2f>
 800347a:	4682      	mov	sl, r0
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <TIM2_IRQHandler+0xb00>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fc0b 	bl	8000c9c <__aeabi_i2f>
 8003486:	4603      	mov	r3, r0
 8003488:	9304      	str	r3, [sp, #16]
 800348a:	f8cd a00c 	str.w	sl, [sp, #12]
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <TIM2_IRQHandler+0xb04>)
 8003490:	9302      	str	r3, [sp, #8]
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <TIM2_IRQHandler+0xb08>)
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	9400      	str	r4, [sp, #0]
 8003498:	464b      	mov	r3, r9
 800349a:	4642      	mov	r2, r8
 800349c:	4631      	mov	r1, r6
 800349e:	4628      	mov	r0, r5
 80034a0:	f000 faa6 	bl	80039f0 <pid>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b33      	ldr	r3, [pc, #204]	; (8003574 <TIM2_IRQHandler+0xb0c>)
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e065      	b.n	8003578 <TIM2_IRQHandler+0xb10>
 80034ac:	f3af 8000 	nop.w
 80034b0:	b22d0e56 	.word	0xb22d0e56
 80034b4:	3fefef9d 	.word	0x3fefef9d
 80034b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034bc:	3f60624d 	.word	0x3f60624d
 80034c0:	66666666 	.word	0x66666666
 80034c4:	3fe66666 	.word	0x3fe66666
 80034c8:	33333333 	.word	0x33333333
 80034cc:	3fd33333 	.word	0x3fd33333
 80034d0:	20000658 	.word	0x20000658
 80034d4:	400ccccd 	.word	0x400ccccd
 80034d8:	20000678 	.word	0x20000678
 80034dc:	2000067c 	.word	0x2000067c
 80034e0:	20000664 	.word	0x20000664
 80034e4:	20000578 	.word	0x20000578
 80034e8:	2000069c 	.word	0x2000069c
 80034ec:	20000260 	.word	0x20000260
 80034f0:	20000264 	.word	0x20000264
 80034f4:	200004fc 	.word	0x200004fc
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	42c80000 	.word	0x42c80000
 8003500:	20000250 	.word	0x20000250
 8003504:	20000554 	.word	0x20000554
 8003508:	41a00000 	.word	0x41a00000
 800350c:	c1a00000 	.word	0xc1a00000
 8003510:	20000254 	.word	0x20000254
 8003514:	20000294 	.word	0x20000294
 8003518:	20000258 	.word	0x20000258
 800351c:	2000044c 	.word	0x2000044c
 8003520:	43340000 	.word	0x43340000
 8003524:	c3340000 	.word	0xc3340000
 8003528:	2000025c 	.word	0x2000025c
 800352c:	20000018 	.word	0x20000018
 8003530:	200004ec 	.word	0x200004ec
 8003534:	20000020 	.word	0x20000020
 8003538:	2000049c 	.word	0x2000049c
 800353c:	2000001c 	.word	0x2000001c
 8003540:	20000298 	.word	0x20000298
 8003544:	20000004 	.word	0x20000004
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000c 	.word	0x2000000c
 8003550:	20000014 	.word	0x20000014
 8003554:	20000010 	.word	0x20000010
 8003558:	20000274 	.word	0x20000274
 800355c:	20000270 	.word	0x20000270
 8003560:	20000268 	.word	0x20000268
 8003564:	20000028 	.word	0x20000028
 8003568:	20000024 	.word	0x20000024
 800356c:	2000027c 	.word	0x2000027c
 8003570:	20000278 	.word	0x20000278
 8003574:	2000026c 	.word	0x2000026c
  //pid_output_yaw = pid(YawINscaled, YawGyroPIDin, pid_p_gain_yaw, pid_i_gain_yaw, pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,pid_i_max_roll, pid_max_yaw );

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 8003578:	4b96      	ldr	r3, [pc, #600]	; (80037d4 <TIM2_IRQHandler+0xd6c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <TIM2_IRQHandler+0xb1e>
 8003580:	4b95      	ldr	r3, [pc, #596]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1)MotorStatus=MOTORSTARTING;
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <TIM2_IRQHandler+0xd74>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b95      	ldr	r3, [pc, #596]	; (80037e0 <TIM2_IRQHandler+0xd78>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d006      	beq.n	80035a0 <TIM2_IRQHandler+0xb38>
 8003592:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <TIM2_IRQHandler+0xd78>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d102      	bne.n	80035a0 <TIM2_IRQHandler+0xb38>
 800359a:	4b8f      	ldr	r3, [pc, #572]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 800359c:	2202      	movs	r2, #2
 800359e:	601a      	str	r2, [r3, #0]
  togg1hist=togg1;
 80035a0:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <TIM2_IRQHandler+0xd78>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a8d      	ldr	r2, [pc, #564]	; (80037dc <TIM2_IRQHandler+0xd74>)
 80035a6:	6013      	str	r3, [r2, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 80035a8:	4b8d      	ldr	r3, [pc, #564]	; (80037e0 <TIM2_IRQHandler+0xd78>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <TIM2_IRQHandler+0xb4e>
 80035b0:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(butt3hist==0 && butt3==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 80035b6:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <TIM2_IRQHandler+0xd7c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11a      	bne.n	80035f4 <TIM2_IRQHandler+0xb8c>
 80035be:	4b8a      	ldr	r3, [pc, #552]	; (80037e8 <TIM2_IRQHandler+0xd80>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d116      	bne.n	80035f4 <TIM2_IRQHandler+0xb8c>
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <TIM2_IRQHandler+0xd84>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d112      	bne.n	80035f4 <TIM2_IRQHandler+0xb8c>
 80035ce:	4b82      	ldr	r3, [pc, #520]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10e      	bne.n	80035f4 <TIM2_IRQHandler+0xb8c>
  {
	  GyroCalibStatus=1;
 80035d6:	4b85      	ldr	r3, [pc, #532]	; (80037ec <TIM2_IRQHandler+0xd84>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
	  SUMGyroX=0;
 80035dc:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <TIM2_IRQHandler+0xd88>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
	  SUMGyroY=0;
 80035e2:	4b84      	ldr	r3, [pc, #528]	; (80037f4 <TIM2_IRQHandler+0xd8c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
	  SUMGyroZ=0;
 80035e8:	4b83      	ldr	r3, [pc, #524]	; (80037f8 <TIM2_IRQHandler+0xd90>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
	  Gyrocalibcount=0;
 80035ee:	4b83      	ldr	r3, [pc, #524]	; (80037fc <TIM2_IRQHandler+0xd94>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
  }
  if(GyroCalibStatus==1)
 80035f4:	4b7d      	ldr	r3, [pc, #500]	; (80037ec <TIM2_IRQHandler+0xd84>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d150      	bne.n	800369e <TIM2_IRQHandler+0xc36>
  {
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <TIM2_IRQHandler+0xd98>)
 80035fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003602:	461a      	mov	r2, r3
 8003604:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <TIM2_IRQHandler+0xd88>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <TIM2_IRQHandler+0xd88>)
 800360c:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 800360e:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <TIM2_IRQHandler+0xd98>)
 8003610:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003614:	461a      	mov	r2, r3
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <TIM2_IRQHandler+0xd8c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4413      	add	r3, r2
 800361c:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <TIM2_IRQHandler+0xd8c>)
 800361e:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 8003620:	4b77      	ldr	r3, [pc, #476]	; (8003800 <TIM2_IRQHandler+0xd98>)
 8003622:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003626:	461a      	mov	r2, r3
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <TIM2_IRQHandler+0xd90>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4413      	add	r3, r2
 800362e:	4a72      	ldr	r2, [pc, #456]	; (80037f8 <TIM2_IRQHandler+0xd90>)
 8003630:	6013      	str	r3, [r2, #0]
	  Gyrocalibcount++;
 8003632:	4b72      	ldr	r3, [pc, #456]	; (80037fc <TIM2_IRQHandler+0xd94>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a70      	ldr	r2, [pc, #448]	; (80037fc <TIM2_IRQHandler+0xd94>)
 800363a:	6013      	str	r3, [r2, #0]

	  if(Gyrocalibcount==GYROCALIBVALUES)
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <TIM2_IRQHandler+0xd94>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003644:	d12b      	bne.n	800369e <TIM2_IRQHandler+0xc36>
	  {

		  GyroXOff=SUMGyroX/GYROCALIBVALUES;
 8003646:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <TIM2_IRQHandler+0xd88>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <TIM2_IRQHandler+0xd9c>)
 800364c:	fb82 1203 	smull	r1, r2, r2, r3
 8003650:	1192      	asrs	r2, r2, #6
 8003652:	17db      	asrs	r3, r3, #31
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	4b6b      	ldr	r3, [pc, #428]	; (8003808 <TIM2_IRQHandler+0xda0>)
 800365a:	801a      	strh	r2, [r3, #0]
		  GyroYOff=SUMGyroY/GYROCALIBVALUES;
 800365c:	4b65      	ldr	r3, [pc, #404]	; (80037f4 <TIM2_IRQHandler+0xd8c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <TIM2_IRQHandler+0xd9c>)
 8003662:	fb82 1203 	smull	r1, r2, r2, r3
 8003666:	1192      	asrs	r2, r2, #6
 8003668:	17db      	asrs	r3, r3, #31
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	b21a      	sxth	r2, r3
 800366e:	4b67      	ldr	r3, [pc, #412]	; (800380c <TIM2_IRQHandler+0xda4>)
 8003670:	801a      	strh	r2, [r3, #0]
		  GyroZOff=SUMGyroZ/GYROCALIBVALUES;
 8003672:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <TIM2_IRQHandler+0xd90>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <TIM2_IRQHandler+0xd9c>)
 8003678:	fb82 1203 	smull	r1, r2, r2, r3
 800367c:	1192      	asrs	r2, r2, #6
 800367e:	17db      	asrs	r3, r3, #31
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b21a      	sxth	r2, r3
 8003684:	4b62      	ldr	r3, [pc, #392]	; (8003810 <TIM2_IRQHandler+0xda8>)
 8003686:	801a      	strh	r2, [r3, #0]

		  //startup angles Accel to Gyro transfer
		  AnglePitchGyro=AnglePitchAccel;
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <TIM2_IRQHandler+0xdac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a62      	ldr	r2, [pc, #392]	; (8003818 <TIM2_IRQHandler+0xdb0>)
 800368e:	6013      	str	r3, [r2, #0]
		  AngleRollGyro=AngleRollAccel;
 8003690:	4b62      	ldr	r3, [pc, #392]	; (800381c <TIM2_IRQHandler+0xdb4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a62      	ldr	r2, [pc, #392]	; (8003820 <TIM2_IRQHandler+0xdb8>)
 8003696:	6013      	str	r3, [r2, #0]

		  GyroCalibStatus=0;
 8003698:	4b54      	ldr	r3, [pc, #336]	; (80037ec <TIM2_IRQHandler+0xd84>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
	  }
  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 800369e:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d10e      	bne.n	80036c4 <TIM2_IRQHandler+0xc5c>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <TIM2_IRQHandler+0xdac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5b      	ldr	r2, [pc, #364]	; (8003818 <TIM2_IRQHandler+0xdb0>)
 80036ac:	6013      	str	r3, [r2, #0]
	  AngleRollGyro=AngleRollAccel;
 80036ae:	4b5b      	ldr	r3, [pc, #364]	; (800381c <TIM2_IRQHandler+0xdb4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5b      	ldr	r2, [pc, #364]	; (8003820 <TIM2_IRQHandler+0xdb8>)
 80036b4:	6013      	str	r3, [r2, #0]

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 80036b6:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <TIM2_IRQHandler+0xd84>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <TIM2_IRQHandler+0xc5c>
	  MotorStatus=MOTORRUNNING;
 80036be:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 80036c0:	2203      	movs	r2, #3
 80036c2:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 80036c4:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <TIM2_IRQHandler+0xd70>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	f040 80fa 	bne.w	80038c2 <TIM2_IRQHandler+0xe5a>
  {
  	  case MOTORRUNNING:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - pid_output_pitch - pid_output_roll /*+ pid_output_yaw*/;
 80036ce:	4b55      	ldr	r3, [pc, #340]	; (8003824 <TIM2_IRQHandler+0xdbc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4955      	ldr	r1, [pc, #340]	; (8003828 <TIM2_IRQHandler+0xdc0>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fa2d 	bl	8000b34 <__addsf3>
 80036da:	4603      	mov	r3, r0
 80036dc:	461a      	mov	r2, r3
 80036de:	4b53      	ldr	r3, [pc, #332]	; (800382c <TIM2_IRQHandler+0xdc4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fd fa23 	bl	8000b30 <__aeabi_fsub>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b50      	ldr	r3, [pc, #320]	; (8003830 <TIM2_IRQHandler+0xdc8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7fd fa1b 	bl	8000b30 <__aeabi_fsub>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fce7 	bl	80010d0 <__aeabi_f2uiz>
 8003702:	4602      	mov	r2, r0
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <TIM2_IRQHandler+0xdcc>)
 8003706:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - pid_output_pitch + pid_output_roll /*- pid_output_yaw*/;
 8003708:	4b46      	ldr	r3, [pc, #280]	; (8003824 <TIM2_IRQHandler+0xdbc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4946      	ldr	r1, [pc, #280]	; (8003828 <TIM2_IRQHandler+0xdc0>)
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fa10 	bl	8000b34 <__addsf3>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b44      	ldr	r3, [pc, #272]	; (800382c <TIM2_IRQHandler+0xdc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fd fa06 	bl	8000b30 <__aeabi_fsub>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b41      	ldr	r3, [pc, #260]	; (8003830 <TIM2_IRQHandler+0xdc8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f7fd fa00 	bl	8000b34 <__addsf3>
 8003734:	4603      	mov	r3, r0
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fcca 	bl	80010d0 <__aeabi_f2uiz>
 800373c:	4602      	mov	r2, r0
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <TIM2_IRQHandler+0xdd0>)
 8003740:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + pid_output_pitch + pid_output_roll /*+ pid_output_yaw*/;
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <TIM2_IRQHandler+0xdbc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4938      	ldr	r1, [pc, #224]	; (8003828 <TIM2_IRQHandler+0xdc0>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd f9f3 	bl	8000b34 <__addsf3>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b36      	ldr	r3, [pc, #216]	; (800382c <TIM2_IRQHandler+0xdc4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fd f9eb 	bl	8000b34 <__addsf3>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	4b33      	ldr	r3, [pc, #204]	; (8003830 <TIM2_IRQHandler+0xdc8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fd f9e3 	bl	8000b34 <__addsf3>
 800376e:	4603      	mov	r3, r0
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fcad 	bl	80010d0 <__aeabi_f2uiz>
 8003776:	4602      	mov	r2, r0
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <TIM2_IRQHandler+0xdd4>)
 800377a:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + pid_output_pitch - pid_output_roll /*- pid_output_yaw*/;
 800377c:	4b29      	ldr	r3, [pc, #164]	; (8003824 <TIM2_IRQHandler+0xdbc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4929      	ldr	r1, [pc, #164]	; (8003828 <TIM2_IRQHandler+0xdc0>)
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd f9d6 	bl	8000b34 <__addsf3>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <TIM2_IRQHandler+0xdc4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fd f9ce 	bl	8000b34 <__addsf3>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <TIM2_IRQHandler+0xdc8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fd f9c4 	bl	8000b30 <__aeabi_fsub>
 80037a8:	4603      	mov	r3, r0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fc90 	bl	80010d0 <__aeabi_f2uiz>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <TIM2_IRQHandler+0xdd8>)
 80037b4:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ MINTRHOTTLE))PWM_Mot1=(1000+ MINTRHOTTLE);
 80037b6:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <TIM2_IRQHandler+0xdcc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 80037be:	d203      	bcs.n	80037c8 <TIM2_IRQHandler+0xd60>
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <TIM2_IRQHandler+0xdcc>)
 80037c2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80037c6:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ MINTRHOTTLE))PWM_Mot2=(1000+ MINTRHOTTLE);
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <TIM2_IRQHandler+0xdd0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 80037d0:	d23c      	bcs.n	800384c <TIM2_IRQHandler+0xde4>
 80037d2:	e037      	b.n	8003844 <TIM2_IRQHandler+0xddc>
 80037d4:	20000688 	.word	0x20000688
 80037d8:	20000230 	.word	0x20000230
 80037dc:	200006a0 	.word	0x200006a0
 80037e0:	20000498 	.word	0x20000498
 80037e4:	20000660 	.word	0x20000660
 80037e8:	20000494 	.word	0x20000494
 80037ec:	20000234 	.word	0x20000234
 80037f0:	20000568 	.word	0x20000568
 80037f4:	200004a0 	.word	0x200004a0
 80037f8:	200003f8 	.word	0x200003f8
 80037fc:	2000024c 	.word	0x2000024c
 8003800:	20000540 	.word	0x20000540
 8003804:	10624dd3 	.word	0x10624dd3
 8003808:	20000374 	.word	0x20000374
 800380c:	200003f4 	.word	0x200003f4
 8003810:	200002a2 	.word	0x200002a2
 8003814:	2000067c 	.word	0x2000067c
 8003818:	20000678 	.word	0x20000678
 800381c:	20000658 	.word	0x20000658
 8003820:	20000578 	.word	0x20000578
 8003824:	20000250 	.word	0x20000250
 8003828:	447a0000 	.word	0x447a0000
 800382c:	20000268 	.word	0x20000268
 8003830:	2000026c 	.word	0x2000026c
 8003834:	20000684 	.word	0x20000684
 8003838:	20000580 	.word	0x20000580
 800383c:	2000057c 	.word	0x2000057c
 8003840:	20000668 	.word	0x20000668
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <TIM2_IRQHandler+0xeec>)
 8003846:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800384a:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ MINTRHOTTLE))PWM_Mot3=(1000+ MINTRHOTTLE);
 800384c:	4b42      	ldr	r3, [pc, #264]	; (8003958 <TIM2_IRQHandler+0xef0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003854:	d203      	bcs.n	800385e <TIM2_IRQHandler+0xdf6>
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <TIM2_IRQHandler+0xef0>)
 8003858:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800385c:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ MINTRHOTTLE))PWM_Mot4=(1000+ MINTRHOTTLE);
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <TIM2_IRQHandler+0xef4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003866:	d203      	bcs.n	8003870 <TIM2_IRQHandler+0xe08>
 8003868:	4b3c      	ldr	r3, [pc, #240]	; (800395c <TIM2_IRQHandler+0xef4>)
 800386a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800386e:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8003870:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <TIM2_IRQHandler+0xef8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f240 729e 	movw	r2, #1950	; 0x79e
 8003878:	4293      	cmp	r3, r2
 800387a:	d903      	bls.n	8003884 <TIM2_IRQHandler+0xe1c>
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <TIM2_IRQHandler+0xef8>)
 800387e:	f240 729e 	movw	r2, #1950	; 0x79e
 8003882:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <TIM2_IRQHandler+0xeec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f240 729e 	movw	r2, #1950	; 0x79e
 800388c:	4293      	cmp	r3, r2
 800388e:	d903      	bls.n	8003898 <TIM2_IRQHandler+0xe30>
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <TIM2_IRQHandler+0xeec>)
 8003892:	f240 729e 	movw	r2, #1950	; 0x79e
 8003896:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 8003898:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <TIM2_IRQHandler+0xef0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f240 729e 	movw	r2, #1950	; 0x79e
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d903      	bls.n	80038ac <TIM2_IRQHandler+0xe44>
 80038a4:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <TIM2_IRQHandler+0xef0>)
 80038a6:	f240 729e 	movw	r2, #1950	; 0x79e
 80038aa:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <TIM2_IRQHandler+0xef4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f240 729e 	movw	r2, #1950	; 0x79e
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d92d      	bls.n	8003914 <TIM2_IRQHandler+0xeac>
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <TIM2_IRQHandler+0xef4>)
 80038ba:	f240 729e 	movw	r2, #1950	; 0x79e
 80038be:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 80038c0:	e028      	b.n	8003914 <TIM2_IRQHandler+0xeac>

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <TIM2_IRQHandler+0xef8>)
 80038c4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038c8:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <TIM2_IRQHandler+0xeec>)
 80038cc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038d0:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <TIM2_IRQHandler+0xef0>)
 80038d4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038d8:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <TIM2_IRQHandler+0xef4>)
 80038dc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038e0:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <TIM2_IRQHandler+0xefc>)
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <TIM2_IRQHandler+0xf00>)
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 80038f2:	4b1e      	ldr	r3, [pc, #120]	; (800396c <TIM2_IRQHandler+0xf04>)
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <TIM2_IRQHandler+0xf08>)
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <TIM2_IRQHandler+0xf0c>)
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <TIM2_IRQHandler+0xf10>)
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 8003912:	e000      	b.n	8003916 <TIM2_IRQHandler+0xeae>
  	  	  	  }break;
 8003914:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <TIM2_IRQHandler+0xf14>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a11      	ldr	r2, [pc, #68]	; (8003960 <TIM2_IRQHandler+0xef8>)
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <TIM2_IRQHandler+0xf14>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <TIM2_IRQHandler+0xeec>)
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <TIM2_IRQHandler+0xf14>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM2_IRQHandler+0xef0>)
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <TIM2_IRQHandler+0xf14>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a08      	ldr	r2, [pc, #32]	; (800395c <TIM2_IRQHandler+0xef4>)
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003944:	480e      	ldr	r0, [pc, #56]	; (8003980 <TIM2_IRQHandler+0xf18>)
 8003946:	f001 f8eb 	bl	8004b20 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	3704      	adds	r7, #4
 800394e:	46bd      	mov	sp, r7
 8003950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003954:	20000580 	.word	0x20000580
 8003958:	2000057c 	.word	0x2000057c
 800395c:	20000668 	.word	0x20000668
 8003960:	20000684 	.word	0x20000684
 8003964:	20000270 	.word	0x20000270
 8003968:	20000274 	.word	0x20000274
 800396c:	20000278 	.word	0x20000278
 8003970:	2000027c 	.word	0x2000027c
 8003974:	20000280 	.word	0x20000280
 8003978:	20000284 	.word	0x20000284
 800397c:	200004a4 	.word	0x200004a4
 8003980:	40010c00 	.word	0x40010c00

08003984 <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003996:	f7fd f8cb 	bl	8000b30 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	461c      	mov	r4, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd f8c5 	bl	8000b30 <__aeabi_fsub>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4619      	mov	r1, r3
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd fa7e 	bl	8000eac <__aeabi_fdiv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7fd f8ba 	bl	8000b30 <__aeabi_fsub>
 80039bc:	4603      	mov	r3, r0
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd f9bf 	bl	8000d44 <__aeabi_fmul>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4619      	mov	r1, r3
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f7fd f8b2 	bl	8000b34 <__addsf3>
 80039d0:	4603      	mov	r3, r0
 80039d2:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7fd fb52 	bl	8001080 <__aeabi_fcmplt>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <ScaleDataFl+0x62>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	617b      	str	r3, [r7, #20]

	return out;
 80039e6:	697b      	ldr	r3, [r7, #20]

}
 80039e8:	4618      	mov	r0, r3
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f7fd f895 	bl	8000b30 <__aeabi_fsub>
 8003a06:	4603      	mov	r3, r0
 8003a08:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	6939      	ldr	r1, [r7, #16]
 8003a10:	6838      	ldr	r0, [r7, #0]
 8003a12:	f7fd f997 	bl	8000d44 <__aeabi_fmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7fd f88a 	bl	8000b34 <__addsf3>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a30:	f7fd fb26 	bl	8001080 <__aeabi_fcmplt>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <pid+0x52>
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e010      	b.n	8003a64 <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fd fb16 	bl	8001080 <__aeabi_fcmplt>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <pid+0x74>
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 8003a64:	6939      	ldr	r1, [r7, #16]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd f96c 	bl	8000d44 <__aeabi_fmul>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fd f85c 	bl	8000b34 <__addsf3>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461c      	mov	r4, r3
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	6938      	ldr	r0, [r7, #16]
 8003a88:	f7fd f852 	bl	8000b30 <__aeabi_fsub>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd f957 	bl	8000d44 <__aeabi_fmul>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f7fd f84a 	bl	8000b34 <__addsf3>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 8003aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7fd fb08 	bl	80010bc <__aeabi_fcmpgt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <pid+0xc8>
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e00d      	b.n	8003ad4 <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f7fd fadd 	bl	8001080 <__aeabi_fcmplt>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <pid+0xe4>
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad2:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	601a      	str	r2, [r3, #0]


	return out;
 8003ada:	697b      	ldr	r3, [r7, #20]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}

08003ae4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <_sbrk+0x50>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <_sbrk+0x16>
		heap_end = &end;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <_sbrk+0x50>)
 8003af6:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <_sbrk+0x54>)
 8003af8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <_sbrk+0x50>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <_sbrk+0x50>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	466a      	mov	r2, sp
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d907      	bls.n	8003b1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b0e:	f003 fe71 	bl	80077f4 <__errno>
 8003b12:	4602      	mov	r2, r0
 8003b14:	230c      	movs	r3, #12
 8003b16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1c:	e006      	b.n	8003b2c <_sbrk+0x48>
	}

	heap_end += incr;
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <_sbrk+0x50>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <_sbrk+0x50>)
 8003b28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000288 	.word	0x20000288
 8003b38:	200006b0 	.word	0x200006b0

08003b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <SystemInit+0x5c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <SystemInit+0x5c>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <SystemInit+0x5c>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4911      	ldr	r1, [pc, #68]	; (8003b98 <SystemInit+0x5c>)
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <SystemInit+0x60>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <SystemInit+0x5c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <SystemInit+0x5c>)
 8003b5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <SystemInit+0x5c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <SystemInit+0x5c>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <SystemInit+0x5c>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <SystemInit+0x5c>)
 8003b7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003b7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SystemInit+0x5c>)
 8003b82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <SystemInit+0x64>)
 8003b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	f8ff0000 	.word	0xf8ff0000
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ba4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ba6:	e003      	b.n	8003bb0 <LoopCopyDataInit>

08003ba8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003baa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003bac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003bae:	3104      	adds	r1, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003bb0:	480a      	ldr	r0, [pc, #40]	; (8003bdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003bb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bb8:	d3f6      	bcc.n	8003ba8 <CopyDataInit>
  ldr r2, =_sbss
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003bbc:	e002      	b.n	8003bc4 <LoopFillZerobss>

08003bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003bc0:	f842 3b04 	str.w	r3, [r2], #4

08003bc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003bc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bc8:	d3f9      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bca:	f7ff ffb7 	bl	8003b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f003 fe17 	bl	8007800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bd2:	f7fd fb99 	bl	8001308 <main>
  bx lr
 8003bd6:	4770      	bx	lr
  ldr r3, =_sidata
 8003bd8:	0800b560 	.word	0x0800b560
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003be0:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 8003be4:	2000020c 	.word	0x2000020c
  ldr r3, = _ebss
 8003be8:	200006ac 	.word	0x200006ac

08003bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bec:	e7fe      	b.n	8003bec <ADC1_2_IRQHandler>
	...

08003bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_Init+0x28>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_Init+0x28>)
 8003bfa:	f043 0310 	orr.w	r3, r3, #16
 8003bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f000 fdf1 	bl	80047e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c06:	2002      	movs	r0, #2
 8003c08:	f000 f808 	bl	8003c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0c:	f7fe fd42 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_InitTick+0x54>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_InitTick+0x58>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fe09 	bl	8004852 <HAL_SYSTICK_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00e      	b.n	8003c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d80a      	bhi.n	8003c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c50:	2200      	movs	r2, #0
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	f000 fdd1 	bl	80047fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c5c:	4a06      	ldr	r2, [pc, #24]	; (8003c78 <HAL_InitTick+0x5c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000002c 	.word	0x2000002c
 8003c74:	20000034 	.word	0x20000034
 8003c78:	20000030 	.word	0x20000030

08003c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_IncTick+0x1c>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_IncTick+0x20>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <HAL_IncTick+0x20>)
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	20000034 	.word	0x20000034
 8003c9c:	200006a4 	.word	0x200006a4

08003ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca4:	4b02      	ldr	r3, [pc, #8]	; (8003cb0 <HAL_GetTick+0x10>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	200006a4 	.word	0x200006a4

08003cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ccc:	d005      	beq.n	8003cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_Delay+0x40>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cda:	bf00      	nop
 8003cdc:	f7ff ffe0 	bl	8003ca0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d8f7      	bhi.n	8003cdc <HAL_Delay+0x28>
  {
  }
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000034 	.word	0x20000034

08003cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0be      	b.n	8003e98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe fcde 	bl	80026f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fbb1 	bl	80044a4 <ADC_ConversionStop_Disable>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 8099 	bne.w	8003e86 <HAL_ADC_Init+0x18e>
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8095 	bne.w	8003e86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d90:	d003      	beq.n	8003d9a <HAL_ADC_Init+0xa2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_ADC_Init+0xa8>
 8003d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9e:	e000      	b.n	8003da2 <HAL_ADC_Init+0xaa>
 8003da0:	2300      	movs	r3, #0
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7d1b      	ldrb	r3, [r3, #20]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d119      	bne.n	8003de4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	7b1b      	ldrb	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	035a      	lsls	r2, r3, #13
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e00b      	b.n	8003de4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_ADC_Init+0x1a8>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e14:	d003      	beq.n	8003e1e <HAL_ADC_Init+0x126>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d104      	bne.n	8003e28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	051b      	lsls	r3, r3, #20
 8003e26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_ADC_Init+0x1ac>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d10b      	bne.n	8003e64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e62:	e018      	b.n	8003e96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f023 0312 	bic.w	r3, r3, #18
 8003e6c:	f043 0210 	orr.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e84:	e007      	b.n	8003e96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	ffe1f7fd 	.word	0xffe1f7fd
 8003ea4:	ff1f0efe 	.word	0xff1f0efe

08003ea8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_Start+0x1a>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e098      	b.n	8003ff4 <HAL_ADC_Start+0x14c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa98 	bl	8004400 <ADC_Enable>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8087 	bne.w	8003fea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <HAL_ADC_Start+0x154>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d105      	bne.n	8003f06 <HAL_ADC_Start+0x5e>
 8003efa:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_ADC_Start+0x158>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d115      	bne.n	8003f32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d026      	beq.n	8003f6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f30:	e01d      	b.n	8003f6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <HAL_ADC_Start+0x158>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_ADC_Start+0xaa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	; (8003ffc <HAL_ADC_Start+0x154>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10d      	bne.n	8003f6e <HAL_ADC_Start+0xc6>
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_ADC_Start+0x158>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f023 0206 	bic.w	r2, r3, #6
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f86:	e002      	b.n	8003f8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0202 	mvn.w	r2, #2
 8003f9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003faa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003fae:	d113      	bne.n	8003fd8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003fb4:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <HAL_ADC_Start+0x154>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d105      	bne.n	8003fc6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_ADC_Start+0x158>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e00c      	b.n	8003ff2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	e003      	b.n	8003ff2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40012800 	.word	0x40012800
 8004000:	40012400 	.word	0x40012400

08004004 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800401a:	f7ff fe41 	bl	8003ca0 <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0c8      	b.n	80041d8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d12a      	bne.n	80040aa <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800405e:	2b00      	cmp	r3, #0
 8004060:	d123      	bne.n	80040aa <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004062:	e01a      	b.n	800409a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406a:	d016      	beq.n	800409a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_ADC_PollForConversion+0x7e>
 8004072:	f7ff fe15 	bl	8003ca0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20b      	bcs.n	800409a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f043 0204 	orr.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e09e      	b.n	80041d8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0dd      	beq.n	8004064 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80040a8:	e06c      	b.n	8004184 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80040aa:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_ADC_PollForConversion+0x1dc>)
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	2002      	movs	r0, #2
 80040b0:	f002 f9c6 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 80040b4:	4603      	mov	r3, r0
 80040b6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6919      	ldr	r1, [r3, #16]
 80040c0:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <HAL_ADC_PollForConversion+0x1e0>)
 80040c2:	400b      	ands	r3, r1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d118      	bne.n	80040fa <HAL_ADC_PollForConversion+0xf6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_ADC_PollForConversion+0x1e4>)
 80040d0:	400b      	ands	r3, r1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d111      	bne.n	80040fa <HAL_ADC_PollForConversion+0xf6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6919      	ldr	r1, [r3, #16]
 80040dc:	4b43      	ldr	r3, [pc, #268]	; (80041ec <HAL_ADC_PollForConversion+0x1e8>)
 80040de:	400b      	ands	r3, r1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <HAL_ADC_PollForConversion+0xf2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68d9      	ldr	r1, [r3, #12]
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_ADC_PollForConversion+0x1ec>)
 80040ec:	400b      	ands	r3, r1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_PollForConversion+0xf2>
 80040f2:	2314      	movs	r3, #20
 80040f4:	e020      	b.n	8004138 <HAL_ADC_PollForConversion+0x134>
 80040f6:	2329      	movs	r3, #41	; 0x29
 80040f8:	e01e      	b.n	8004138 <HAL_ADC_PollForConversion+0x134>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6919      	ldr	r1, [r3, #16]
 8004100:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_ADC_PollForConversion+0x1e8>)
 8004102:	400b      	ands	r3, r1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_ADC_PollForConversion+0x112>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68d9      	ldr	r1, [r3, #12]
 800410e:	4b38      	ldr	r3, [pc, #224]	; (80041f0 <HAL_ADC_PollForConversion+0x1ec>)
 8004110:	400b      	ands	r3, r1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_ADC_PollForConversion+0x12e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6919      	ldr	r1, [r3, #16]
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_ADC_PollForConversion+0x1f0>)
 800411e:	400b      	ands	r3, r1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d108      	bne.n	8004136 <HAL_ADC_PollForConversion+0x132>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68d9      	ldr	r1, [r3, #12]
 800412a:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_ADC_PollForConversion+0x1f0>)
 800412c:	400b      	ands	r3, r1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_PollForConversion+0x132>
 8004132:	2354      	movs	r3, #84	; 0x54
 8004134:	e000      	b.n	8004138 <HAL_ADC_PollForConversion+0x134>
 8004136:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800413e:	e01d      	b.n	800417c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004146:	d016      	beq.n	8004176 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_ADC_PollForConversion+0x15a>
 800414e:	f7ff fda7 	bl	8003ca0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d20b      	bcs.n	8004176 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e030      	b.n	80041d8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8dd      	bhi.n	8004140 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0212 	mvn.w	r2, #18
 800418c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041a8:	d115      	bne.n	80041d6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d111      	bne.n	80041d6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	2000002c 	.word	0x2000002c
 80041e4:	24924924 	.word	0x24924924
 80041e8:	00924924 	.word	0x00924924
 80041ec:	12492492 	.word	0x12492492
 80041f0:	00492492 	.word	0x00492492
 80041f4:	00249249 	.word	0x00249249

080041f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x20>
 800422c:	2302      	movs	r3, #2
 800422e:	e0dc      	b.n	80043ea <HAL_ADC_ConfigChannel+0x1da>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d81c      	bhi.n	800427a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	3b05      	subs	r3, #5
 8004252:	221f      	movs	r2, #31
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	4019      	ands	r1, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b05      	subs	r3, #5
 800426c:	fa00 f203 	lsl.w	r2, r0, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	635a      	str	r2, [r3, #52]	; 0x34
 8004278:	e03c      	b.n	80042f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d81c      	bhi.n	80042bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	3b23      	subs	r3, #35	; 0x23
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	4019      	ands	r1, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	3b23      	subs	r3, #35	; 0x23
 80042ae:	fa00 f203 	lsl.w	r2, r0, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ba:	e01b      	b.n	80042f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	3b41      	subs	r3, #65	; 0x41
 80042ce:	221f      	movs	r2, #31
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	4019      	ands	r1, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	3b41      	subs	r3, #65	; 0x41
 80042e8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b09      	cmp	r3, #9
 80042fa:	d91c      	bls.n	8004336 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	3b1e      	subs	r3, #30
 800430e:	2207      	movs	r2, #7
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	4019      	ands	r1, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6898      	ldr	r0, [r3, #8]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4413      	add	r3, r2
 8004326:	3b1e      	subs	r3, #30
 8004328:	fa00 f203 	lsl.w	r2, r0, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e019      	b.n	800436a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6919      	ldr	r1, [r3, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	2207      	movs	r2, #7
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	4019      	ands	r1, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6898      	ldr	r0, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	fa00 f203 	lsl.w	r2, r0, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b10      	cmp	r3, #16
 8004370:	d003      	beq.n	800437a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004376:	2b11      	cmp	r3, #17
 8004378:	d132      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d125      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d126      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043a0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d11a      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_ADC_ConfigChannel+0x1ec>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	0c9a      	lsrs	r2, r3, #18
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043c0:	e002      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f9      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x1b2>
 80043ce:	e007      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40012400 	.word	0x40012400
 80043f8:	2000002c 	.word	0x2000002c
 80043fc:	431bde83 	.word	0x431bde83

08004400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d039      	beq.n	8004492 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <ADC_Enable+0x9c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <ADC_Enable+0xa0>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	0c9b      	lsrs	r3, r3, #18
 800443a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800443c:	e002      	b.n	8004444 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3b01      	subs	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f9      	bne.n	800443e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800444a:	f7ff fc29 	bl	8003ca0 <HAL_GetTick>
 800444e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004450:	e018      	b.n	8004484 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004452:	f7ff fc25 	bl	8003ca0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d911      	bls.n	8004484 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	f043 0210 	orr.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d1df      	bne.n	8004452 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	2000002c 	.word	0x2000002c
 80044a0:	431bde83 	.word	0x431bde83

080044a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d127      	bne.n	800450e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ce:	f7ff fbe7 	bl	8003ca0 <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044d4:	e014      	b.n	8004500 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044d6:	f7ff fbe3 	bl	8003ca0 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d90d      	bls.n	8004500 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f043 0210 	orr.w	r2, r3, #16
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d0e3      	beq.n	80044d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_ADCEx_Calibration_Start+0x1e>
 8004532:	2302      	movs	r3, #2
 8004534:	e086      	b.n	8004644 <HAL_ADCEx_Calibration_Start+0x12c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ffb0 	bl	80044a4 <ADC_ConversionStop_Disable>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d175      	bne.n	800463a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004556:	f023 0302 	bic.w	r3, r3, #2
 800455a:	f043 0202 	orr.w	r2, r3, #2
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_ADCEx_Calibration_Start+0x134>)
 8004564:	681c      	ldr	r4, [r3, #0]
 8004566:	2002      	movs	r0, #2
 8004568:	f001 ff6a 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 800456c:	4603      	mov	r3, r0
 800456e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004572:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004574:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004576:	e002      	b.n	800457e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f9      	bne.n	8004578 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff3b 	bl	8004400 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0208 	orr.w	r2, r2, #8
 8004598:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800459a:	f7ff fb81 	bl	8003ca0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80045a0:	e014      	b.n	80045cc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80045a2:	f7ff fb7d 	bl	8003ca0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b0a      	cmp	r3, #10
 80045ae:	d90d      	bls.n	80045cc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f023 0312 	bic.w	r3, r3, #18
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e03b      	b.n	8004644 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e3      	bne.n	80045a2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0204 	orr.w	r2, r2, #4
 80045e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80045ea:	f7ff fb59 	bl	8003ca0 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80045f0:	e014      	b.n	800461c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80045f2:	f7ff fb55 	bl	8003ca0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b0a      	cmp	r3, #10
 80045fe:	d90d      	bls.n	800461c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f023 0312 	bic.w	r3, r3, #18
 8004608:	f043 0210 	orr.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e013      	b.n	8004644 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e3      	bne.n	80045f2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	2000002c 	.word	0x2000002c

08004650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800467c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	60d3      	str	r3, [r2, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <__NVIC_GetPriorityGrouping+0x18>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0307 	and.w	r3, r3, #7
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	db0b      	blt.n	80046de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4906      	ldr	r1, [pc, #24]	; (80046e8 <__NVIC_EnableIRQ+0x34>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2001      	movs	r0, #1
 80046d6:	fa00 f202 	lsl.w	r2, r0, r2
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	e000e100 	.word	0xe000e100

080046ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0a      	blt.n	8004716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	490c      	ldr	r1, [pc, #48]	; (8004738 <__NVIC_SetPriority+0x4c>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	440b      	add	r3, r1
 8004710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004714:	e00a      	b.n	800472c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <__NVIC_SetPriority+0x50>)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	3b04      	subs	r3, #4
 8004724:	0112      	lsls	r2, r2, #4
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	440b      	add	r3, r1
 800472a:	761a      	strb	r2, [r3, #24]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	e000e100 	.word	0xe000e100
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f1c3 0307 	rsb	r3, r3, #7
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3304      	adds	r3, #4
 8004766:	2b06      	cmp	r3, #6
 8004768:	d902      	bls.n	8004770 <NVIC_EncodePriority+0x30>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3b03      	subs	r3, #3
 800476e:	e000      	b.n	8004772 <NVIC_EncodePriority+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	401a      	ands	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	43d9      	mvns	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	4313      	orrs	r3, r2
         );
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	; 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b4:	d301      	bcc.n	80047ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00f      	b.n	80047da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ba:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <SysTick_Config+0x40>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c2:	210f      	movs	r1, #15
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c8:	f7ff ff90 	bl	80046ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <SysTick_Config+0x40>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d2:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <SysTick_Config+0x40>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010

080047e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff2d 	bl	8004650 <__NVIC_SetPriorityGrouping>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004810:	f7ff ff42 	bl	8004698 <__NVIC_GetPriorityGrouping>
 8004814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7ff ff90 	bl	8004740 <NVIC_EncodePriority>
 8004820:	4602      	mov	r2, r0
 8004822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff5f 	bl	80046ec <__NVIC_SetPriority>
}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff35 	bl	80046b4 <__NVIC_EnableIRQ>
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ffa2 	bl	80047a4 <SysTick_Config>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800486c:	b480      	push	{r7}
 800486e:	b08b      	sub	sp, #44	; 0x2c
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800487e:	e127      	b.n	8004ad0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004880:	2201      	movs	r2, #1
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	429a      	cmp	r2, r3
 800489a:	f040 8116 	bne.w	8004aca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b12      	cmp	r3, #18
 80048a4:	d034      	beq.n	8004910 <HAL_GPIO_Init+0xa4>
 80048a6:	2b12      	cmp	r3, #18
 80048a8:	d80d      	bhi.n	80048c6 <HAL_GPIO_Init+0x5a>
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d02b      	beq.n	8004906 <HAL_GPIO_Init+0x9a>
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d804      	bhi.n	80048bc <HAL_GPIO_Init+0x50>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d031      	beq.n	800491a <HAL_GPIO_Init+0xae>
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d01c      	beq.n	80048f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048ba:	e048      	b.n	800494e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d043      	beq.n	8004948 <HAL_GPIO_Init+0xdc>
 80048c0:	2b11      	cmp	r3, #17
 80048c2:	d01b      	beq.n	80048fc <HAL_GPIO_Init+0x90>
          break;
 80048c4:	e043      	b.n	800494e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048c6:	4a89      	ldr	r2, [pc, #548]	; (8004aec <HAL_GPIO_Init+0x280>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d026      	beq.n	800491a <HAL_GPIO_Init+0xae>
 80048cc:	4a87      	ldr	r2, [pc, #540]	; (8004aec <HAL_GPIO_Init+0x280>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d806      	bhi.n	80048e0 <HAL_GPIO_Init+0x74>
 80048d2:	4a87      	ldr	r2, [pc, #540]	; (8004af0 <HAL_GPIO_Init+0x284>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d020      	beq.n	800491a <HAL_GPIO_Init+0xae>
 80048d8:	4a86      	ldr	r2, [pc, #536]	; (8004af4 <HAL_GPIO_Init+0x288>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_GPIO_Init+0xae>
          break;
 80048de:	e036      	b.n	800494e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048e0:	4a85      	ldr	r2, [pc, #532]	; (8004af8 <HAL_GPIO_Init+0x28c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d019      	beq.n	800491a <HAL_GPIO_Init+0xae>
 80048e6:	4a85      	ldr	r2, [pc, #532]	; (8004afc <HAL_GPIO_Init+0x290>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d016      	beq.n	800491a <HAL_GPIO_Init+0xae>
 80048ec:	4a84      	ldr	r2, [pc, #528]	; (8004b00 <HAL_GPIO_Init+0x294>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0xae>
          break;
 80048f2:	e02c      	b.n	800494e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	623b      	str	r3, [r7, #32]
          break;
 80048fa:	e028      	b.n	800494e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	623b      	str	r3, [r7, #32]
          break;
 8004904:	e023      	b.n	800494e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3308      	adds	r3, #8
 800490c:	623b      	str	r3, [r7, #32]
          break;
 800490e:	e01e      	b.n	800494e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	330c      	adds	r3, #12
 8004916:	623b      	str	r3, [r7, #32]
          break;
 8004918:	e019      	b.n	800494e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004922:	2304      	movs	r3, #4
 8004924:	623b      	str	r3, [r7, #32]
          break;
 8004926:	e012      	b.n	800494e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004930:	2308      	movs	r3, #8
 8004932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	611a      	str	r2, [r3, #16]
          break;
 800493a:	e008      	b.n	800494e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800493c:	2308      	movs	r3, #8
 800493e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	615a      	str	r2, [r3, #20]
          break;
 8004946:	e002      	b.n	800494e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
          break;
 800494c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2bff      	cmp	r3, #255	; 0xff
 8004952:	d801      	bhi.n	8004958 <HAL_GPIO_Init+0xec>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	e001      	b.n	800495c <HAL_GPIO_Init+0xf0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2bff      	cmp	r3, #255	; 0xff
 8004962:	d802      	bhi.n	800496a <HAL_GPIO_Init+0xfe>
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	e002      	b.n	8004970 <HAL_GPIO_Init+0x104>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	3b08      	subs	r3, #8
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	210f      	movs	r1, #15
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	401a      	ands	r2, r3
 8004982:	6a39      	ldr	r1, [r7, #32]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	431a      	orrs	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8096 	beq.w	8004aca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800499e:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <HAL_GPIO_Init+0x298>)
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <HAL_GPIO_Init+0x298>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6193      	str	r3, [r2, #24]
 80049aa:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <HAL_GPIO_Init+0x298>)
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049b6:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <HAL_GPIO_Init+0x29c>)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	220f      	movs	r2, #15
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4013      	ands	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4b      	ldr	r2, [pc, #300]	; (8004b0c <HAL_GPIO_Init+0x2a0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x19e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4a      	ldr	r2, [pc, #296]	; (8004b10 <HAL_GPIO_Init+0x2a4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x19a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a49      	ldr	r2, [pc, #292]	; (8004b14 <HAL_GPIO_Init+0x2a8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x196>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a48      	ldr	r2, [pc, #288]	; (8004b18 <HAL_GPIO_Init+0x2ac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x192>
 80049fa:	2303      	movs	r3, #3
 80049fc:	e006      	b.n	8004a0c <HAL_GPIO_Init+0x1a0>
 80049fe:	2304      	movs	r3, #4
 8004a00:	e004      	b.n	8004a0c <HAL_GPIO_Init+0x1a0>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e002      	b.n	8004a0c <HAL_GPIO_Init+0x1a0>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_GPIO_Init+0x1a0>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	f002 0203 	and.w	r2, r2, #3
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	4093      	lsls	r3, r2
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a1c:	493a      	ldr	r1, [pc, #232]	; (8004b08 <HAL_GPIO_Init+0x29c>)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	3302      	adds	r3, #2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4938      	ldr	r1, [pc, #224]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
 8004a42:	e006      	b.n	8004a52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a44:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	4933      	ldr	r1, [pc, #204]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	492e      	ldr	r1, [pc, #184]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	604b      	str	r3, [r1, #4]
 8004a6a:	e006      	b.n	8004a7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	4929      	ldr	r1, [pc, #164]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a86:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	4924      	ldr	r1, [pc, #144]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
 8004a92:	e006      	b.n	8004aa2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	491f      	ldr	r1, [pc, #124]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	491a      	ldr	r1, [pc, #104]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
 8004aba:	e006      	b.n	8004aca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	4915      	ldr	r1, [pc, #84]	; (8004b1c <HAL_GPIO_Init+0x2b0>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	3301      	adds	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f aed0 	bne.w	8004880 <HAL_GPIO_Init+0x14>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	372c      	adds	r7, #44	; 0x2c
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	10210000 	.word	0x10210000
 8004af0:	10110000 	.word	0x10110000
 8004af4:	10120000 	.word	0x10120000
 8004af8:	10310000 	.word	0x10310000
 8004afc:	10320000 	.word	0x10320000
 8004b00:	10220000 	.word	0x10220000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40010800 	.word	0x40010800
 8004b10:	40010c00 	.word	0x40010c00
 8004b14:	40011000 	.word	0x40011000
 8004b18:	40011400 	.word	0x40011400
 8004b1c:	40010400 	.word	0x40010400

08004b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b30:	787b      	ldrb	r3, [r7, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b3c:	e003      	b.n	8004b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	041a      	lsls	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	887b      	ldrh	r3, [r7, #2]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004b6e:	e002      	b.n	8004b76 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e10f      	b.n	8004db2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd fde2 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f001 fb40 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 8004bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4a7b      	ldr	r2, [pc, #492]	; (8004dbc <HAL_I2C_Init+0x23c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d807      	bhi.n	8004be4 <HAL_I2C_Init+0x64>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a7a      	ldr	r2, [pc, #488]	; (8004dc0 <HAL_I2C_Init+0x240>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	bf94      	ite	ls
 8004bdc:	2301      	movls	r3, #1
 8004bde:	2300      	movhi	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e006      	b.n	8004bf2 <HAL_I2C_Init+0x72>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a77      	ldr	r2, [pc, #476]	; (8004dc4 <HAL_I2C_Init+0x244>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bf94      	ite	ls
 8004bec:	2301      	movls	r3, #1
 8004bee:	2300      	movhi	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0db      	b.n	8004db2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a72      	ldr	r2, [pc, #456]	; (8004dc8 <HAL_I2C_Init+0x248>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	0c9b      	lsrs	r3, r3, #18
 8004c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a64      	ldr	r2, [pc, #400]	; (8004dbc <HAL_I2C_Init+0x23c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d802      	bhi.n	8004c34 <HAL_I2C_Init+0xb4>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3301      	adds	r3, #1
 8004c32:	e009      	b.n	8004c48 <HAL_I2C_Init+0xc8>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	4a63      	ldr	r2, [pc, #396]	; (8004dcc <HAL_I2C_Init+0x24c>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	3301      	adds	r3, #1
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4956      	ldr	r1, [pc, #344]	; (8004dbc <HAL_I2C_Init+0x23c>)
 8004c64:	428b      	cmp	r3, r1
 8004c66:	d80d      	bhi.n	8004c84 <HAL_I2C_Init+0x104>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e59      	subs	r1, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	bf38      	it	cc
 8004c80:	2304      	movcc	r3, #4
 8004c82:	e04f      	b.n	8004d24 <HAL_I2C_Init+0x1a4>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_I2C_Init+0x130>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1e58      	subs	r0, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	440b      	add	r3, r1
 8004c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e012      	b.n	8004cd6 <HAL_I2C_Init+0x156>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	0099      	lsls	r1, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Init+0x15e>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e022      	b.n	8004d24 <HAL_I2C_Init+0x1a4>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <HAL_I2C_Init+0x184>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1e58      	subs	r0, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d02:	e00f      	b.n	8004d24 <HAL_I2C_Init+0x1a4>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1e58      	subs	r0, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	0099      	lsls	r1, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6809      	ldr	r1, [r1, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6911      	ldr	r1, [r2, #16]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	000186a0 	.word	0x000186a0
 8004dc0:	001e847f 	.word	0x001e847f
 8004dc4:	003d08ff 	.word	0x003d08ff
 8004dc8:	431bde83 	.word	0x431bde83
 8004dcc:	10624dd3 	.word	0x10624dd3

08004dd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	460b      	mov	r3, r1
 8004de4:	813b      	strh	r3, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dea:	f7fe ff59 	bl	8003ca0 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 80d9 	bne.w	8004fb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2319      	movs	r3, #25
 8004e04:	2201      	movs	r2, #1
 8004e06:	496d      	ldr	r1, [pc, #436]	; (8004fbc <HAL_I2C_Mem_Write+0x1ec>)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fc6b 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0cc      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Mem_Write+0x56>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0c5      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d007      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2221      	movs	r2, #33	; 0x21
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a4d      	ldr	r2, [pc, #308]	; (8004fc0 <HAL_I2C_Mem_Write+0x1f0>)
 8004e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e8e:	88f8      	ldrh	r0, [r7, #6]
 8004e90:	893a      	ldrh	r2, [r7, #8]
 8004e92:	8979      	ldrh	r1, [r7, #10]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fac6 	bl	8005430 <I2C_RequestMemoryWrite>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d052      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e081      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fcec 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d107      	bne.n	8004ed6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e06b      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d11b      	bne.n	8004f50 <HAL_I2C_Mem_Write+0x180>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1aa      	bne.n	8004eae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fcd8 	bl	8005912 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d107      	bne.n	8004f80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e016      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	00100002 	.word	0x00100002
 8004fc0:	ffff0000 	.word	0xffff0000

08004fc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	817b      	strh	r3, [r7, #10]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	813b      	strh	r3, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fde:	f7fe fe5f 	bl	8003ca0 <HAL_GetTick>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	f040 8218 	bne.w	8005422 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2319      	movs	r3, #25
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4981      	ldr	r1, [pc, #516]	; (8005200 <HAL_I2C_Mem_Read+0x23c>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fb71 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
 800500a:	e20b      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_I2C_Mem_Read+0x56>
 8005016:	2302      	movs	r3, #2
 8005018:	e204      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d007      	beq.n	8005040 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2222      	movs	r2, #34	; 0x22
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a61      	ldr	r2, [pc, #388]	; (8005204 <HAL_I2C_Mem_Read+0x240>)
 8005080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005082:	88f8      	ldrh	r0, [r7, #6]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	8979      	ldrh	r1, [r7, #10]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fa56 	bl	8005544 <I2C_RequestMemoryRead>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e1c0      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050aa:	2300      	movs	r3, #0
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e194      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d11d      	bne.n	8005116 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005112:	b662      	cpsie	i
 8005114:	e172      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b02      	cmp	r3, #2
 800511c:	d11d      	bne.n	800515a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800512e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005156:	b662      	cpsie	i
 8005158:	e150      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005180:	e13c      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	2b03      	cmp	r3, #3
 8005188:	f200 80f5 	bhi.w	8005376 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b01      	cmp	r3, #1
 8005192:	d123      	bne.n	80051dc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fbfb 	bl	8005994 <I2C_WaitOnRXNEFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e13d      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051da:	e10f      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d150      	bne.n	8005286 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2200      	movs	r2, #0
 80051ec:	4906      	ldr	r1, [pc, #24]	; (8005208 <HAL_I2C_Mem_Read+0x244>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa78 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e112      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
 80051fe:	bf00      	nop
 8005200:	00100002 	.word	0x00100002
 8005204:	ffff0000 	.word	0xffff0000
 8005208:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800520c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005250:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005284:	e0ba      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	2200      	movs	r2, #0
 800528e:	4967      	ldr	r1, [pc, #412]	; (800542c <HAL_I2C_Mem_Read+0x468>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fa27 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0c1      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	2200      	movs	r2, #0
 80052ec:	494f      	ldr	r1, [pc, #316]	; (800542c <HAL_I2C_Mem_Read+0x468>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f9f8 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e092      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005340:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005374:	e042      	b.n	80053fc <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fb0a 	bl	8005994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e04c      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d118      	bne.n	80053fc <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f aebe 	bne.w	8005182 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	00010004 	.word	0x00010004

08005430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	4603      	mov	r3, r0
 8005440:	817b      	strh	r3, [r7, #10]
 8005442:	460b      	mov	r3, r1
 8005444:	813b      	strh	r3, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2200      	movs	r2, #0
 8005462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f93c 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e05f      	b.n	8005536 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	492d      	ldr	r1, [pc, #180]	; (8005540 <I2C_RequestMemoryWrite+0x110>)
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f980 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e04c      	b.n	8005536 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f9ea 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d107      	bne.n	80054da <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e02b      	b.n	8005536 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d105      	bne.n	80054f0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	611a      	str	r2, [r3, #16]
 80054ee:	e021      	b.n	8005534 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	6a39      	ldr	r1, [r7, #32]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9c4 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b04      	cmp	r3, #4
 8005514:	d107      	bne.n	8005526 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e005      	b.n	8005536 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552a:	893b      	ldrh	r3, [r7, #8]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	00010002 	.word	0x00010002

08005544 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	460b      	mov	r3, r1
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800556c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	2200      	movs	r2, #0
 8005586:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8aa 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e09e      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	494c      	ldr	r1, [pc, #304]	; (80056e0 <I2C_RequestMemoryRead+0x19c>)
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8ee 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e08b      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	6a39      	ldr	r1, [r7, #32]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f958 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06a      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005608:	893b      	ldrh	r3, [r7, #8]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]
 8005612:	e021      	b.n	8005658 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005614:	893b      	ldrh	r3, [r7, #8]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b29b      	uxth	r3, r3
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	6a39      	ldr	r1, [r7, #32]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f932 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b04      	cmp	r3, #4
 8005638:	d107      	bne.n	800564a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e044      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800564e:	893b      	ldrh	r3, [r7, #8]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	6a39      	ldr	r1, [r7, #32]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f917 	bl	8005890 <I2C_WaitOnTXEFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b04      	cmp	r3, #4
 800566e:	d107      	bne.n	8005680 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e029      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2200      	movs	r2, #0
 800569c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f81f 	bl	80056e4 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e013      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056b0:	897b      	ldrh	r3, [r7, #10]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	6a3a      	ldr	r2, [r7, #32]
 80056c4:	4906      	ldr	r1, [pc, #24]	; (80056e0 <I2C_RequestMemoryRead+0x19c>)
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f863 	bl	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	00010002 	.word	0x00010002

080056e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f4:	e025      	b.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fc:	d021      	beq.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fe facf 	bl	8003ca0 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e023      	b.n	800578a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10d      	bne.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	e00c      	b.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	43da      	mvns	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d0b6      	beq.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057a0:	e051      	b.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d123      	bne.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0204 	orr.w	r2, r3, #4
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e046      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005800:	d021      	beq.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005802:	f7fe fa4d 	bl	8003ca0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	d302      	bcc.n	8005818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d116      	bne.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e020      	b.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10c      	bne.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	43da      	mvns	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d18d      	bne.n	80057a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800589c:	e02d      	b.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f8ce 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e02d      	b.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b4:	d021      	beq.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fe f9f3 	bl	8003ca0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d116      	bne.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e007      	b.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d1ca      	bne.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800591e:	e02d      	b.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f88d 	bl	8005a40 <I2C_IsAcknowledgeFailed>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e02d      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005936:	d021      	beq.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005938:	f7fe f9b2 	bl	8003ca0 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d116      	bne.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e007      	b.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d1ca      	bne.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a0:	e042      	b.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d119      	bne.n	80059e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0210 	mvn.w	r2, #16
 80059b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e029      	b.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fe f95c 	bl	8003ca0 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e007      	b.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d1b5      	bne.n	80059a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	d11b      	bne.n	8005a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0204 	orr.w	r2, r3, #4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e26c      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8087 	beq.w	8005bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005abc:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ac8:	4b8f      	ldr	r3, [pc, #572]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d112      	bne.n	8005afa <HAL_RCC_OscConfig+0x5e>
 8005ad4:	4b8c      	ldr	r3, [pc, #560]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae0:	d10b      	bne.n	8005afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae2:	4b89      	ldr	r3, [pc, #548]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d06c      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x12c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d168      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e246      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d106      	bne.n	8005b12 <HAL_RCC_OscConfig+0x76>
 8005b04:	4b80      	ldr	r3, [pc, #512]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7f      	ldr	r2, [pc, #508]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e02e      	b.n	8005b70 <HAL_RCC_OscConfig+0xd4>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x98>
 8005b1a:	4b7b      	ldr	r3, [pc, #492]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a7a      	ldr	r2, [pc, #488]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4b78      	ldr	r3, [pc, #480]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a77      	ldr	r2, [pc, #476]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	e01d      	b.n	8005b70 <HAL_RCC_OscConfig+0xd4>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0xbc>
 8005b3e:	4b72      	ldr	r3, [pc, #456]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a71      	ldr	r2, [pc, #452]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e00b      	b.n	8005b70 <HAL_RCC_OscConfig+0xd4>
 8005b58:	4b6b      	ldr	r3, [pc, #428]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a6a      	ldr	r2, [pc, #424]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b68      	ldr	r3, [pc, #416]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a67      	ldr	r2, [pc, #412]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b78:	f7fe f892 	bl	8003ca0 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7fe f88e 	bl	8003ca0 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e1fa      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b92:	4b5d      	ldr	r3, [pc, #372]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0xe4>
 8005b9e:	e014      	b.n	8005bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fe f87e 	bl	8003ca0 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fe f87a 	bl	8003ca0 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e1e6      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bba:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x10c>
 8005bc6:	e000      	b.n	8005bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d063      	beq.n	8005c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bd6:	4b4c      	ldr	r3, [pc, #304]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005be2:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d11c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x18c>
 8005bee:	4b46      	ldr	r3, [pc, #280]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d116      	bne.n	8005c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfa:	4b43      	ldr	r3, [pc, #268]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_RCC_OscConfig+0x176>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d001      	beq.n	8005c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e1ba      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c12:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4939      	ldr	r1, [pc, #228]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c26:	e03a      	b.n	8005c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d020      	beq.n	8005c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c30:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <HAL_RCC_OscConfig+0x270>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fe f833 	bl	8003ca0 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3e:	f7fe f82f 	bl	8003ca0 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e19b      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4927      	ldr	r1, [pc, #156]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]
 8005c70:	e015      	b.n	8005c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c72:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <HAL_RCC_OscConfig+0x270>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fe f812 	bl	8003ca0 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c80:	f7fe f80e 	bl	8003ca0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e17a      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d03a      	beq.n	8005d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d019      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <HAL_RCC_OscConfig+0x274>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb8:	f7fd fff2 	bl	8003ca0 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc0:	f7fd ffee 	bl	8003ca0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e15a      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f000 fada 	bl	8006298 <RCC_Delay>
 8005ce4:	e01c      	b.n	8005d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <HAL_RCC_OscConfig+0x274>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cec:	f7fd ffd8 	bl	8003ca0 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf2:	e00f      	b.n	8005d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf4:	f7fd ffd4 	bl	8003ca0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d908      	bls.n	8005d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e140      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	42420000 	.word	0x42420000
 8005d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d14:	4b9e      	ldr	r3, [pc, #632]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e9      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80a6 	beq.w	8005e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d32:	4b97      	ldr	r3, [pc, #604]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10d      	bne.n	8005d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3e:	4b94      	ldr	r3, [pc, #592]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	4a93      	ldr	r2, [pc, #588]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	61d3      	str	r3, [r2, #28]
 8005d4a:	4b91      	ldr	r3, [pc, #580]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5a:	4b8e      	ldr	r3, [pc, #568]	; (8005f94 <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d118      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d66:	4b8b      	ldr	r3, [pc, #556]	; (8005f94 <HAL_RCC_OscConfig+0x4f8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a8a      	ldr	r2, [pc, #552]	; (8005f94 <HAL_RCC_OscConfig+0x4f8>)
 8005d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d72:	f7fd ff95 	bl	8003ca0 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7a:	f7fd ff91 	bl	8003ca0 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b64      	cmp	r3, #100	; 0x64
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e0fd      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	4b81      	ldr	r3, [pc, #516]	; (8005f94 <HAL_RCC_OscConfig+0x4f8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_OscConfig+0x312>
 8005da0:	4b7b      	ldr	r3, [pc, #492]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4a7a      	ldr	r2, [pc, #488]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	6213      	str	r3, [r2, #32]
 8005dac:	e02d      	b.n	8005e0a <HAL_RCC_OscConfig+0x36e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x334>
 8005db6:	4b76      	ldr	r3, [pc, #472]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4a75      	ldr	r2, [pc, #468]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	6213      	str	r3, [r2, #32]
 8005dc2:	4b73      	ldr	r3, [pc, #460]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	4a72      	ldr	r2, [pc, #456]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	6213      	str	r3, [r2, #32]
 8005dce:	e01c      	b.n	8005e0a <HAL_RCC_OscConfig+0x36e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	d10c      	bne.n	8005df2 <HAL_RCC_OscConfig+0x356>
 8005dd8:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a6c      	ldr	r2, [pc, #432]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	f043 0304 	orr.w	r3, r3, #4
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	4b6a      	ldr	r3, [pc, #424]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	4a69      	ldr	r2, [pc, #420]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6213      	str	r3, [r2, #32]
 8005df0:	e00b      	b.n	8005e0a <HAL_RCC_OscConfig+0x36e>
 8005df2:	4b67      	ldr	r3, [pc, #412]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a66      	ldr	r2, [pc, #408]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	6213      	str	r3, [r2, #32]
 8005dfe:	4b64      	ldr	r3, [pc, #400]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	4a63      	ldr	r2, [pc, #396]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d015      	beq.n	8005e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e12:	f7fd ff45 	bl	8003ca0 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fd ff41 	bl	8003ca0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0ab      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e30:	4b57      	ldr	r3, [pc, #348]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ee      	beq.n	8005e1a <HAL_RCC_OscConfig+0x37e>
 8005e3c:	e014      	b.n	8005e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e3e:	f7fd ff2f 	bl	8003ca0 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e46:	f7fd ff2b 	bl	8003ca0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e095      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ee      	bne.n	8005e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6e:	4b48      	ldr	r3, [pc, #288]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4a47      	ldr	r2, [pc, #284]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8081 	beq.w	8005f86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e84:	4b42      	ldr	r3, [pc, #264]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d061      	beq.n	8005f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d146      	bne.n	8005f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e98:	4b3f      	ldr	r3, [pc, #252]	; (8005f98 <HAL_RCC_OscConfig+0x4fc>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fd feff 	bl	8003ca0 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd fefb 	bl	8003ca0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e067      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eb8:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d108      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ece:	4b30      	ldr	r3, [pc, #192]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	492d      	ldr	r1, [pc, #180]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ee0:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a19      	ldr	r1, [r3, #32]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	4927      	ldr	r1, [pc, #156]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <HAL_RCC_OscConfig+0x4fc>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efe:	f7fd fecf 	bl	8003ca0 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f06:	f7fd fecb 	bl	8003ca0 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e037      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f18:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0x46a>
 8005f24:	e02f      	b.n	8005f86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f26:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <HAL_RCC_OscConfig+0x4fc>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fd feb8 	bl	8003ca0 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fd feb4 	bl	8003ca0 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e020      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x498>
 8005f52:	e018      	b.n	8005f86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e013      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_OscConfig+0x4f4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d106      	bne.n	8005f82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d001      	beq.n	8005f86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40007000 	.word	0x40007000
 8005f98:	42420060 	.word	0x42420060

08005f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0d0      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b6a      	ldr	r3, [pc, #424]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d910      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b67      	ldr	r3, [pc, #412]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 0207 	bic.w	r2, r3, #7
 8005fc6:	4965      	ldr	r1, [pc, #404]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0b8      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d020      	beq.n	800602e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff8:	4b59      	ldr	r3, [pc, #356]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a58      	ldr	r2, [pc, #352]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006010:	4b53      	ldr	r3, [pc, #332]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a52      	ldr	r2, [pc, #328]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800601a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800601c:	4b50      	ldr	r3, [pc, #320]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	494d      	ldr	r1, [pc, #308]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d040      	beq.n	80060bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d107      	bne.n	8006052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b47      	ldr	r3, [pc, #284]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d115      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	4b41      	ldr	r3, [pc, #260]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e073      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606a:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e06b      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4936      	ldr	r1, [pc, #216]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800608c:	f7fd fe08 	bl	8003ca0 <HAL_GetTick>
 8006090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006092:	e00a      	b.n	80060aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006094:	f7fd fe04 	bl	8003ca0 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e053      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060aa:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f003 020c 	and.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d1eb      	bne.n	8006094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060bc:	4b27      	ldr	r3, [pc, #156]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d210      	bcs.n	80060ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b24      	ldr	r3, [pc, #144]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 0207 	bic.w	r2, r3, #7
 80060d2:	4922      	ldr	r1, [pc, #136]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCC_ClockConfig+0x1c0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e032      	b.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f8:	4b19      	ldr	r3, [pc, #100]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4916      	ldr	r1, [pc, #88]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	490e      	ldr	r1, [pc, #56]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800612a:	f000 f821 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800612e:	4601      	mov	r1, r0
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	fa21 f303 	lsr.w	r3, r1, r3
 8006142:	4a09      	ldr	r2, [pc, #36]	; (8006168 <HAL_RCC_ClockConfig+0x1cc>)
 8006144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_RCC_ClockConfig+0x1d0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd fd66 	bl	8003c1c <HAL_InitTick>

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40022000 	.word	0x40022000
 8006160:	40021000 	.word	0x40021000
 8006164:	0800b0fc 	.word	0x0800b0fc
 8006168:	2000002c 	.word	0x2000002c
 800616c:	20000030 	.word	0x20000030

08006170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	b490      	push	{r4, r7}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006176:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006178:	1d3c      	adds	r4, r7, #4
 800617a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800617c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	2300      	movs	r3, #0
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	2300      	movs	r3, #0
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800619a:	4b23      	ldr	r3, [pc, #140]	; (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d002      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x40>
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d003      	beq.n	80061b6 <HAL_RCC_GetSysClockFreq+0x46>
 80061ae:	e02d      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061b0:	4b1e      	ldr	r3, [pc, #120]	; (800622c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061b2:	623b      	str	r3, [r7, #32]
      break;
 80061b4:	e02d      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	0c9b      	lsrs	r3, r3, #18
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061c2:	4413      	add	r3, r2
 80061c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80061c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061d4:	4b14      	ldr	r3, [pc, #80]	; (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	0c5b      	lsrs	r3, r3, #17
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061e2:	4413      	add	r3, r2
 80061e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4a0f      	ldr	r2, [pc, #60]	; (800622c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061ee:	fb02 f203 	mul.w	r2, r2, r3
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e004      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	623b      	str	r3, [r7, #32]
      break;
 800620a:	e002      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <HAL_RCC_GetSysClockFreq+0xbc>)
 800620e:	623b      	str	r3, [r7, #32]
      break;
 8006210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006212:	6a3b      	ldr	r3, [r7, #32]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3728      	adds	r7, #40	; 0x28
 8006218:	46bd      	mov	sp, r7
 800621a:	bc90      	pop	{r4, r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	0800b0c0 	.word	0x0800b0c0
 8006224:	0800b0d0 	.word	0x0800b0d0
 8006228:	40021000 	.word	0x40021000
 800622c:	007a1200 	.word	0x007a1200
 8006230:	003d0900 	.word	0x003d0900

08006234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006238:	4b02      	ldr	r3, [pc, #8]	; (8006244 <HAL_RCC_GetHCLKFreq+0x10>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	2000002c 	.word	0x2000002c

08006248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800624c:	f7ff fff2 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006250:	4601      	mov	r1, r0
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4a03      	ldr	r2, [pc, #12]	; (800626c <HAL_RCC_GetPCLK1Freq+0x24>)
 800625e:	5cd3      	ldrb	r3, [r2, r3]
 8006260:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000
 800626c:	0800b10c 	.word	0x0800b10c

08006270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006274:	f7ff ffde 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006278:	4601      	mov	r1, r0
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	0adb      	lsrs	r3, r3, #11
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4a03      	ldr	r2, [pc, #12]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006286:	5cd3      	ldrb	r3, [r2, r3]
 8006288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000
 8006294:	0800b10c 	.word	0x0800b10c

08006298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <RCC_Delay+0x34>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <RCC_Delay+0x38>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	0a5b      	lsrs	r3, r3, #9
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062b4:	bf00      	nop
  }
  while (Delay --);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	60fa      	str	r2, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f9      	bne.n	80062b4 <RCC_Delay+0x1c>
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	2000002c 	.word	0x2000002c
 80062d0:	10624dd3 	.word	0x10624dd3

080062d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d07d      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062f4:	4b4f      	ldr	r3, [pc, #316]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10d      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006300:	4b4c      	ldr	r3, [pc, #304]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4a4b      	ldr	r2, [pc, #300]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630a:	61d3      	str	r3, [r2, #28]
 800630c:	4b49      	ldr	r3, [pc, #292]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631c:	4b46      	ldr	r3, [pc, #280]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d118      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006328:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a42      	ldr	r2, [pc, #264]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800632e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006334:	f7fd fcb4 	bl	8003ca0 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633a:	e008      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fd fcb0 	bl	8003ca0 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e06d      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b3a      	ldr	r3, [pc, #232]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800635a:	4b36      	ldr	r3, [pc, #216]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006362:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02e      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d027      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006378:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006388:	4b2c      	ldr	r3, [pc, #176]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800638e:	4a29      	ldr	r2, [pc, #164]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d014      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639e:	f7fd fc7f 	bl	8003ca0 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a4:	e00a      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fd fc7b 	bl	8003ca0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e036      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0ee      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4917      	ldr	r1, [pc, #92]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d105      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e0:	4b14      	ldr	r3, [pc, #80]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4a13      	ldr	r2, [pc, #76]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	490b      	ldr	r1, [pc, #44]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006406:	4313      	orrs	r3, r2
 8006408:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4904      	ldr	r1, [pc, #16]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	40007000 	.word	0x40007000
 800643c:	42420440 	.word	0x42420440

08006440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b08d      	sub	sp, #52	; 0x34
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006448:	4b55      	ldr	r3, [pc, #340]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800644a:	f107 040c 	add.w	r4, r7, #12
 800644e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006454:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	2300      	movs	r3, #0
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006462:	2300      	movs	r3, #0
 8006464:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	2300      	movs	r3, #0
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d07f      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d002      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006478:	2b01      	cmp	r3, #1
 800647a:	d048      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800647c:	e08b      	b.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800647e:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006484:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d07f      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	0c9b      	lsrs	r3, r3, #18
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800649c:	4413      	add	r3, r2
 800649e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064a2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064ae:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	0c5b      	lsrs	r3, r3, #17
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064bc:	4413      	add	r3, r2
 80064be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80064ce:	4a37      	ldr	r2, [pc, #220]	; (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	4a33      	ldr	r2, [pc, #204]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80064ea:	4b2f      	ldr	r3, [pc, #188]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f6:	d102      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064fc:	e048      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800650c:	e040      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	d108      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e01f      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653c:	d109      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800653e:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800654a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	e00f      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d11a      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d014      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800656a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006570:	e010      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006572:	e00f      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006574:	f7ff fe7c 	bl	8006270 <HAL_RCC_GetPCLK2Freq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	0b9b      	lsrs	r3, r3, #14
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	3301      	adds	r3, #1
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006594:	bf00      	nop
    }
  }
  return (frequency);
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006598:	4618      	mov	r0, r3
 800659a:	3734      	adds	r7, #52	; 0x34
 800659c:	46bd      	mov	sp, r7
 800659e:	bd90      	pop	{r4, r7, pc}
 80065a0:	0800b0d4 	.word	0x0800b0d4
 80065a4:	0800b0e4 	.word	0x0800b0e4
 80065a8:	40021000 	.word	0x40021000
 80065ac:	007a1200 	.word	0x007a1200
 80065b0:	003d0900 	.word	0x003d0900
 80065b4:	aaaaaaab 	.word	0xaaaaaaab

080065b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e053      	b.n	8006672 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fc f903 	bl	80027f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	ea42 0103 	orr.w	r1, r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	0c1a      	lsrs	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f002 0204 	and.w	r2, r2, #4
 8006650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e01d      	b.n	80066c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fc f8f1 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f000 fb45 	bl	8006d48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d007      	beq.n	800670a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0201 	orr.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e01d      	b.n	8006764 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f815 	bl	800676c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 faf7 	bl	8006d48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2201      	movs	r2, #1
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fd58 	bl	8007248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <HAL_TIM_PWM_Start+0x60>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b06      	cmp	r3, #6
 80067c2:	d007      	beq.n	80067d4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40012c00 	.word	0x40012c00

080067e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0202 	mvn.w	r2, #2
 8006810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa73 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa66 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fa75 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b04      	cmp	r3, #4
 800684c:	d122      	bne.n	8006894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b04      	cmp	r3, #4
 800685a:	d11b      	bne.n	8006894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0204 	mvn.w	r2, #4
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa49 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa3c 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fa4b 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d122      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d11b      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0208 	mvn.w	r2, #8
 80068b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2204      	movs	r2, #4
 80068be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa1f 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa12 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa21 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b10      	cmp	r3, #16
 80068f4:	d122      	bne.n	800693c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	d11b      	bne.n	800693c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0210 	mvn.w	r2, #16
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2208      	movs	r2, #8
 8006912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9f5 	bl	8006d12 <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9e8 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9f7 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10e      	bne.n	8006968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b01      	cmp	r3, #1
 8006956:	d107      	bne.n	8006968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0201 	mvn.w	r2, #1
 8006960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9c3 	bl	8006cee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d10e      	bne.n	8006994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d107      	bne.n	8006994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800698c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd1c 	bl	80073cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d10e      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b40      	cmp	r3, #64	; 0x40
 80069ae:	d107      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9bb 	bl	8006d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d10e      	bne.n	80069ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d107      	bne.n	80069ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0220 	mvn.w	r2, #32
 80069e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fce7 	bl	80073ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0b4      	b.n	8006b78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	f200 809f 	bhi.w	8006b64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006b65 	.word	0x08006b65
 8006a34:	08006b65 	.word	0x08006b65
 8006a38:	08006b65 	.word	0x08006b65
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006b65 	.word	0x08006b65
 8006a44:	08006b65 	.word	0x08006b65
 8006a48:	08006b65 	.word	0x08006b65
 8006a4c:	08006ae3 	.word	0x08006ae3
 8006a50:	08006b65 	.word	0x08006b65
 8006a54:	08006b65 	.word	0x08006b65
 8006a58:	08006b65 	.word	0x08006b65
 8006a5c:	08006b23 	.word	0x08006b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f9d0 	bl	8006e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0204 	bic.w	r2, r2, #4
 8006a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6999      	ldr	r1, [r3, #24]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	619a      	str	r2, [r3, #24]
      break;
 8006a9e:	e062      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fa16 	bl	8006ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6999      	ldr	r1, [r3, #24]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	619a      	str	r2, [r3, #24]
      break;
 8006ae0:	e041      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fa5f 	bl	8006fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0208 	orr.w	r2, r2, #8
 8006afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0204 	bic.w	r2, r2, #4
 8006b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	61da      	str	r2, [r3, #28]
      break;
 8006b20:	e021      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 faa9 	bl	8007080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69d9      	ldr	r1, [r3, #28]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	021a      	lsls	r2, r3, #8
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	61da      	str	r2, [r3, #28]
      break;
 8006b62:	e000      	b.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_ConfigClockSource+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0a6      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x166>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d067      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x120>
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d80b      	bhi.n	8006bec <HAL_TIM_ConfigClockSource+0x6c>
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d073      	beq.n	8006cc0 <HAL_TIM_ConfigClockSource+0x140>
 8006bd8:	2b10      	cmp	r3, #16
 8006bda:	d802      	bhi.n	8006be2 <HAL_TIM_ConfigClockSource+0x62>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d06f      	beq.n	8006cc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006be0:	e078      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d06c      	beq.n	8006cc0 <HAL_TIM_ConfigClockSource+0x140>
 8006be6:	2b30      	cmp	r3, #48	; 0x30
 8006be8:	d06a      	beq.n	8006cc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bea:	e073      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bec:	2b70      	cmp	r3, #112	; 0x70
 8006bee:	d00d      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x8c>
 8006bf0:	2b70      	cmp	r3, #112	; 0x70
 8006bf2:	d804      	bhi.n	8006bfe <HAL_TIM_ConfigClockSource+0x7e>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d033      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0xe0>
 8006bf8:	2b60      	cmp	r3, #96	; 0x60
 8006bfa:	d041      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bfc:	e06a      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	d066      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x152>
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c08:	d017      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006c0a:	e063      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6899      	ldr	r1, [r3, #8]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f000 faf5 	bl	800720a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	609a      	str	r2, [r3, #8]
      break;
 8006c38:	e04c      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6899      	ldr	r1, [r3, #8]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f000 fade 	bl	800720a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5c:	609a      	str	r2, [r3, #8]
      break;
 8006c5e:	e039      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f000 fa55 	bl	800711c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2150      	movs	r1, #80	; 0x50
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 faac 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 8006c7e:	e029      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f000 fa73 	bl	8007178 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2160      	movs	r1, #96	; 0x60
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fa9c 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 8006c9e:	e019      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	461a      	mov	r2, r3
 8006cae:	f000 fa35 	bl	800711c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2140      	movs	r1, #64	; 0x40
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fa8c 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 8006cbe:	e009      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 fa83 	bl	80071d6 <TIM_ITRx_SetConfig>
      break;
 8006cd0:	e000      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <TIM_Base_SetConfig+0xb8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_Base_SetConfig+0x30>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d66:	d007      	beq.n	8006d78 <TIM_Base_SetConfig+0x30>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_Base_SetConfig+0xbc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0x30>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0xc0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d108      	bne.n	8006d8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <TIM_Base_SetConfig+0xb8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_Base_SetConfig+0x62>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d98:	d007      	beq.n	8006daa <TIM_Base_SetConfig+0x62>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <TIM_Base_SetConfig+0xbc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_Base_SetConfig+0x62>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <TIM_Base_SetConfig+0xc0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <TIM_Base_SetConfig+0xb8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d103      	bne.n	8006df0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	615a      	str	r2, [r3, #20]
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800

08006e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 0302 	bic.w	r3, r3, #2
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <TIM_OC1_SetConfig+0xc8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0308 	bic.w	r3, r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <TIM_OC1_SetConfig+0xc8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40012c00 	.word	0x40012c00

08006ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0210 	bic.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <TIM_OC2_SetConfig+0xd0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d10d      	bne.n	8006f54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <TIM_OC2_SetConfig+0xd0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d113      	bne.n	8006f84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	40012c00 	.word	0x40012c00

08006fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1d      	ldr	r2, [pc, #116]	; (800707c <TIM_OC3_SetConfig+0xd0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d10d      	bne.n	8007026 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a14      	ldr	r2, [pc, #80]	; (800707c <TIM_OC3_SetConfig+0xd0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d113      	bne.n	8007056 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800703c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40012c00 	.word	0x40012c00

08007080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0f      	ldr	r2, [pc, #60]	; (8007118 <TIM_OC4_SetConfig+0x98>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d109      	bne.n	80070f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr
 8007118:	40012c00 	.word	0x40012c00

0800711c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0201 	bic.w	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f023 030a 	bic.w	r3, r3, #10
 8007158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f023 0210 	bic.w	r2, r3, #16
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	031b      	lsls	r3, r3, #12
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr

080071d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f043 0307 	orr.w	r3, r3, #7
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	609a      	str	r2, [r3, #8]
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr

0800720a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800720a:	b480      	push	{r7}
 800720c:	b087      	sub	sp, #28
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	021a      	lsls	r2, r3, #8
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	431a      	orrs	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4313      	orrs	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	609a      	str	r2, [r3, #8]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	2201      	movs	r2, #1
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1a      	ldr	r2, [r3, #32]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	43db      	mvns	r3, r3
 800726a:	401a      	ands	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1a      	ldr	r2, [r3, #32]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	fa01 f303 	lsl.w	r3, r1, r3
 8007280:	431a      	orrs	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e032      	b.n	800730e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007330:	2302      	movs	r3, #2
 8007332:	e03d      	b.n	80073b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr

080073ba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e03f      	b.n	8007470 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7fb faab 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2224      	movs	r2, #36	; 0x24
 800740e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007420:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f90c 	bl	8007640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007436:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007446:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007456:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b20      	cmp	r3, #32
 8007496:	f040 8083 	bne.w	80075a0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_UART_Transmit+0x2e>
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e07b      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_UART_Transmit+0x40>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e074      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2221      	movs	r2, #33	; 0x21
 80074ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80074ce:	f7fc fbe7 	bl	8003ca0 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	88fa      	ldrh	r2, [r7, #6]
 80074de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074e0:	e042      	b.n	8007568 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f8:	d122      	bne.n	8007540 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2200      	movs	r2, #0
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f850 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e046      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007526:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3302      	adds	r3, #2
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	e017      	b.n	8007568 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3301      	adds	r3, #1
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	e013      	b.n	8007568 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2200      	movs	r2, #0
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f82d 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e023      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	60ba      	str	r2, [r7, #8]
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1b7      	bne.n	80074e2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2200      	movs	r2, #0
 800757a:	2140      	movs	r1, #64	; 0x40
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f814 	bl	80075aa <UART_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e00a      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ba:	e02c      	b.n	8007616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c2:	d028      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x30>
 80075ca:	f7fc fb69 	bl	8003ca0 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d21d      	bcs.n	8007616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e00f      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4013      	ands	r3, r2
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	429a      	cmp	r2, r3
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	429a      	cmp	r2, r3
 8007632:	d0c3      	beq.n	80075bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800767a:	f023 030c 	bic.w	r3, r3, #12
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	430b      	orrs	r3, r1
 8007686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a52      	ldr	r2, [pc, #328]	; (80077ec <UART_SetConfig+0x1ac>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d14e      	bne.n	8007746 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076a8:	f7fe fde2 	bl	8006270 <HAL_RCC_GetPCLK2Freq>
 80076ac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009a      	lsls	r2, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	4a4a      	ldr	r2, [pc, #296]	; (80077f0 <UART_SetConfig+0x1b0>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	0119      	lsls	r1, r3, #4
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009a      	lsls	r2, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076e4:	4b42      	ldr	r3, [pc, #264]	; (80077f0 <UART_SetConfig+0x1b0>)
 80076e6:	fba3 0302 	umull	r0, r3, r3, r2
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	2064      	movs	r0, #100	; 0x64
 80076ee:	fb00 f303 	mul.w	r3, r0, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	3332      	adds	r3, #50	; 0x32
 80076f8:	4a3d      	ldr	r2, [pc, #244]	; (80077f0 <UART_SetConfig+0x1b0>)
 80076fa:	fba2 2303 	umull	r2, r3, r2, r3
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007704:	4419      	add	r1, r3
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009a      	lsls	r2, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	fbb2 f2f3 	udiv	r2, r2, r3
 800771c:	4b34      	ldr	r3, [pc, #208]	; (80077f0 <UART_SetConfig+0x1b0>)
 800771e:	fba3 0302 	umull	r0, r3, r3, r2
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2064      	movs	r0, #100	; 0x64
 8007726:	fb00 f303 	mul.w	r3, r0, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	3332      	adds	r3, #50	; 0x32
 8007730:	4a2f      	ldr	r2, [pc, #188]	; (80077f0 <UART_SetConfig+0x1b0>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	440a      	add	r2, r1
 8007742:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007744:	e04d      	b.n	80077e2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007746:	f7fe fd7f 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 800774a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009a      	lsls	r2, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <UART_SetConfig+0x1b0>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	0119      	lsls	r1, r3, #4
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009a      	lsls	r2, r3, #2
 8007776:	441a      	add	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <UART_SetConfig+0x1b0>)
 8007784:	fba3 0302 	umull	r0, r3, r3, r2
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	2064      	movs	r0, #100	; 0x64
 800778c:	fb00 f303 	mul.w	r3, r0, r3
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	3332      	adds	r3, #50	; 0x32
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <UART_SetConfig+0x1b0>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077a2:	4419      	add	r1, r3
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <UART_SetConfig+0x1b0>)
 80077bc:	fba3 0302 	umull	r0, r3, r3, r2
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	2064      	movs	r0, #100	; 0x64
 80077c4:	fb00 f303 	mul.w	r3, r0, r3
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	3332      	adds	r3, #50	; 0x32
 80077ce:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <UART_SetConfig+0x1b0>)
 80077d0:	fba2 2303 	umull	r2, r3, r2, r3
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	f003 020f 	and.w	r2, r3, #15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	440a      	add	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40013800 	.word	0x40013800
 80077f0:	51eb851f 	.word	0x51eb851f

080077f4 <__errno>:
 80077f4:	4b01      	ldr	r3, [pc, #4]	; (80077fc <__errno+0x8>)
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20000038 	.word	0x20000038

08007800 <__libc_init_array>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	2500      	movs	r5, #0
 8007804:	4e0c      	ldr	r6, [pc, #48]	; (8007838 <__libc_init_array+0x38>)
 8007806:	4c0d      	ldr	r4, [pc, #52]	; (800783c <__libc_init_array+0x3c>)
 8007808:	1ba4      	subs	r4, r4, r6
 800780a:	10a4      	asrs	r4, r4, #2
 800780c:	42a5      	cmp	r5, r4
 800780e:	d109      	bne.n	8007824 <__libc_init_array+0x24>
 8007810:	f003 fba2 	bl	800af58 <_init>
 8007814:	2500      	movs	r5, #0
 8007816:	4e0a      	ldr	r6, [pc, #40]	; (8007840 <__libc_init_array+0x40>)
 8007818:	4c0a      	ldr	r4, [pc, #40]	; (8007844 <__libc_init_array+0x44>)
 800781a:	1ba4      	subs	r4, r4, r6
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	42a5      	cmp	r5, r4
 8007820:	d105      	bne.n	800782e <__libc_init_array+0x2e>
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007828:	4798      	blx	r3
 800782a:	3501      	adds	r5, #1
 800782c:	e7ee      	b.n	800780c <__libc_init_array+0xc>
 800782e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007832:	4798      	blx	r3
 8007834:	3501      	adds	r5, #1
 8007836:	e7f2      	b.n	800781e <__libc_init_array+0x1e>
 8007838:	0800b558 	.word	0x0800b558
 800783c:	0800b558 	.word	0x0800b558
 8007840:	0800b558 	.word	0x0800b558
 8007844:	0800b55c 	.word	0x0800b55c

08007848 <memset>:
 8007848:	4603      	mov	r3, r0
 800784a:	4402      	add	r2, r0
 800784c:	4293      	cmp	r3, r2
 800784e:	d100      	bne.n	8007852 <memset+0xa>
 8007850:	4770      	bx	lr
 8007852:	f803 1b01 	strb.w	r1, [r3], #1
 8007856:	e7f9      	b.n	800784c <memset+0x4>

08007858 <__cvt>:
 8007858:	2b00      	cmp	r3, #0
 800785a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785e:	461e      	mov	r6, r3
 8007860:	bfbb      	ittet	lt
 8007862:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007866:	461e      	movlt	r6, r3
 8007868:	2300      	movge	r3, #0
 800786a:	232d      	movlt	r3, #45	; 0x2d
 800786c:	b088      	sub	sp, #32
 800786e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007870:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007874:	f027 0720 	bic.w	r7, r7, #32
 8007878:	2f46      	cmp	r7, #70	; 0x46
 800787a:	4614      	mov	r4, r2
 800787c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800787e:	700b      	strb	r3, [r1, #0]
 8007880:	d004      	beq.n	800788c <__cvt+0x34>
 8007882:	2f45      	cmp	r7, #69	; 0x45
 8007884:	d100      	bne.n	8007888 <__cvt+0x30>
 8007886:	3501      	adds	r5, #1
 8007888:	2302      	movs	r3, #2
 800788a:	e000      	b.n	800788e <__cvt+0x36>
 800788c:	2303      	movs	r3, #3
 800788e:	aa07      	add	r2, sp, #28
 8007890:	9204      	str	r2, [sp, #16]
 8007892:	aa06      	add	r2, sp, #24
 8007894:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007898:	e9cd 3500 	strd	r3, r5, [sp]
 800789c:	4622      	mov	r2, r4
 800789e:	4633      	mov	r3, r6
 80078a0:	f000 fcda 	bl	8008258 <_dtoa_r>
 80078a4:	2f47      	cmp	r7, #71	; 0x47
 80078a6:	4680      	mov	r8, r0
 80078a8:	d102      	bne.n	80078b0 <__cvt+0x58>
 80078aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078ac:	07db      	lsls	r3, r3, #31
 80078ae:	d526      	bpl.n	80078fe <__cvt+0xa6>
 80078b0:	2f46      	cmp	r7, #70	; 0x46
 80078b2:	eb08 0905 	add.w	r9, r8, r5
 80078b6:	d111      	bne.n	80078dc <__cvt+0x84>
 80078b8:	f898 3000 	ldrb.w	r3, [r8]
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d10a      	bne.n	80078d6 <__cvt+0x7e>
 80078c0:	2200      	movs	r2, #0
 80078c2:	2300      	movs	r3, #0
 80078c4:	4620      	mov	r0, r4
 80078c6:	4631      	mov	r1, r6
 80078c8:	f7f9 f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80078cc:	b918      	cbnz	r0, 80078d6 <__cvt+0x7e>
 80078ce:	f1c5 0501 	rsb	r5, r5, #1
 80078d2:	f8ca 5000 	str.w	r5, [sl]
 80078d6:	f8da 3000 	ldr.w	r3, [sl]
 80078da:	4499      	add	r9, r3
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4620      	mov	r0, r4
 80078e2:	4631      	mov	r1, r6
 80078e4:	f7f9 f860 	bl	80009a8 <__aeabi_dcmpeq>
 80078e8:	b938      	cbnz	r0, 80078fa <__cvt+0xa2>
 80078ea:	2230      	movs	r2, #48	; 0x30
 80078ec:	9b07      	ldr	r3, [sp, #28]
 80078ee:	454b      	cmp	r3, r9
 80078f0:	d205      	bcs.n	80078fe <__cvt+0xa6>
 80078f2:	1c59      	adds	r1, r3, #1
 80078f4:	9107      	str	r1, [sp, #28]
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e7f8      	b.n	80078ec <__cvt+0x94>
 80078fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80078fe:	4640      	mov	r0, r8
 8007900:	9b07      	ldr	r3, [sp, #28]
 8007902:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007904:	eba3 0308 	sub.w	r3, r3, r8
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	b008      	add	sp, #32
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007910 <__exponent>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	2900      	cmp	r1, #0
 8007914:	bfb4      	ite	lt
 8007916:	232d      	movlt	r3, #45	; 0x2d
 8007918:	232b      	movge	r3, #43	; 0x2b
 800791a:	4604      	mov	r4, r0
 800791c:	bfb8      	it	lt
 800791e:	4249      	neglt	r1, r1
 8007920:	2909      	cmp	r1, #9
 8007922:	f804 2b02 	strb.w	r2, [r4], #2
 8007926:	7043      	strb	r3, [r0, #1]
 8007928:	dd21      	ble.n	800796e <__exponent+0x5e>
 800792a:	f10d 0307 	add.w	r3, sp, #7
 800792e:	461f      	mov	r7, r3
 8007930:	260a      	movs	r6, #10
 8007932:	fb91 f5f6 	sdiv	r5, r1, r6
 8007936:	fb06 1115 	mls	r1, r6, r5, r1
 800793a:	2d09      	cmp	r5, #9
 800793c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007940:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007944:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007948:	4629      	mov	r1, r5
 800794a:	dc09      	bgt.n	8007960 <__exponent+0x50>
 800794c:	3130      	adds	r1, #48	; 0x30
 800794e:	3b02      	subs	r3, #2
 8007950:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007954:	42bb      	cmp	r3, r7
 8007956:	4622      	mov	r2, r4
 8007958:	d304      	bcc.n	8007964 <__exponent+0x54>
 800795a:	1a10      	subs	r0, r2, r0
 800795c:	b003      	add	sp, #12
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007960:	4613      	mov	r3, r2
 8007962:	e7e6      	b.n	8007932 <__exponent+0x22>
 8007964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007968:	f804 2b01 	strb.w	r2, [r4], #1
 800796c:	e7f2      	b.n	8007954 <__exponent+0x44>
 800796e:	2330      	movs	r3, #48	; 0x30
 8007970:	4419      	add	r1, r3
 8007972:	7083      	strb	r3, [r0, #2]
 8007974:	1d02      	adds	r2, r0, #4
 8007976:	70c1      	strb	r1, [r0, #3]
 8007978:	e7ef      	b.n	800795a <__exponent+0x4a>
	...

0800797c <_printf_float>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	b091      	sub	sp, #68	; 0x44
 8007982:	460c      	mov	r4, r1
 8007984:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007986:	4693      	mov	fp, r2
 8007988:	461e      	mov	r6, r3
 800798a:	4605      	mov	r5, r0
 800798c:	f001 fa18 	bl	8008dc0 <_localeconv_r>
 8007990:	6803      	ldr	r3, [r0, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	9309      	str	r3, [sp, #36]	; 0x24
 8007996:	f7f8 fbdb 	bl	8000150 <strlen>
 800799a:	2300      	movs	r3, #0
 800799c:	930e      	str	r3, [sp, #56]	; 0x38
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	900a      	str	r0, [sp, #40]	; 0x28
 80079a2:	3307      	adds	r3, #7
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	f103 0208 	add.w	r2, r3, #8
 80079ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80079b0:	f8d4 a000 	ldr.w	sl, [r4]
 80079b4:	603a      	str	r2, [r7, #0]
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80079c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079cc:	4ba6      	ldr	r3, [pc, #664]	; (8007c68 <_printf_float+0x2ec>)
 80079ce:	4638      	mov	r0, r7
 80079d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079d2:	f7f9 f81b 	bl	8000a0c <__aeabi_dcmpun>
 80079d6:	bb68      	cbnz	r0, 8007a34 <_printf_float+0xb8>
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079dc:	4ba2      	ldr	r3, [pc, #648]	; (8007c68 <_printf_float+0x2ec>)
 80079de:	4638      	mov	r0, r7
 80079e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079e2:	f7f8 fff5 	bl	80009d0 <__aeabi_dcmple>
 80079e6:	bb28      	cbnz	r0, 8007a34 <_printf_float+0xb8>
 80079e8:	2200      	movs	r2, #0
 80079ea:	2300      	movs	r3, #0
 80079ec:	4638      	mov	r0, r7
 80079ee:	4649      	mov	r1, r9
 80079f0:	f7f8 ffe4 	bl	80009bc <__aeabi_dcmplt>
 80079f4:	b110      	cbz	r0, 80079fc <_printf_float+0x80>
 80079f6:	232d      	movs	r3, #45	; 0x2d
 80079f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079fc:	4f9b      	ldr	r7, [pc, #620]	; (8007c6c <_printf_float+0x2f0>)
 80079fe:	4b9c      	ldr	r3, [pc, #624]	; (8007c70 <_printf_float+0x2f4>)
 8007a00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a04:	bf98      	it	ls
 8007a06:	461f      	movls	r7, r3
 8007a08:	2303      	movs	r3, #3
 8007a0a:	f04f 0900 	mov.w	r9, #0
 8007a0e:	6123      	str	r3, [r4, #16]
 8007a10:	f02a 0304 	bic.w	r3, sl, #4
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	9600      	str	r6, [sp, #0]
 8007a18:	465b      	mov	r3, fp
 8007a1a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f9e2 	bl	8007de8 <_printf_common>
 8007a24:	3001      	adds	r0, #1
 8007a26:	f040 8090 	bne.w	8007b4a <_printf_float+0x1ce>
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2e:	b011      	add	sp, #68	; 0x44
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	463a      	mov	r2, r7
 8007a36:	464b      	mov	r3, r9
 8007a38:	4638      	mov	r0, r7
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	f7f8 ffe6 	bl	8000a0c <__aeabi_dcmpun>
 8007a40:	b110      	cbz	r0, 8007a48 <_printf_float+0xcc>
 8007a42:	4f8c      	ldr	r7, [pc, #560]	; (8007c74 <_printf_float+0x2f8>)
 8007a44:	4b8c      	ldr	r3, [pc, #560]	; (8007c78 <_printf_float+0x2fc>)
 8007a46:	e7db      	b.n	8007a00 <_printf_float+0x84>
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	a80d      	add	r0, sp, #52	; 0x34
 8007a52:	a90e      	add	r1, sp, #56	; 0x38
 8007a54:	d140      	bne.n	8007ad8 <_printf_float+0x15c>
 8007a56:	2306      	movs	r3, #6
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	f04f 0c00 	mov.w	ip, #0
 8007a5e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007a62:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	463a      	mov	r2, r7
 8007a72:	464b      	mov	r3, r9
 8007a74:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff feed 	bl	8007858 <__cvt>
 8007a7e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007a82:	2b47      	cmp	r3, #71	; 0x47
 8007a84:	4607      	mov	r7, r0
 8007a86:	d109      	bne.n	8007a9c <_printf_float+0x120>
 8007a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a8a:	1cd8      	adds	r0, r3, #3
 8007a8c:	db02      	blt.n	8007a94 <_printf_float+0x118>
 8007a8e:	6862      	ldr	r2, [r4, #4]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	dd47      	ble.n	8007b24 <_printf_float+0x1a8>
 8007a94:	f1a8 0802 	sub.w	r8, r8, #2
 8007a98:	fa5f f888 	uxtb.w	r8, r8
 8007a9c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007aa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007aa2:	d824      	bhi.n	8007aee <_printf_float+0x172>
 8007aa4:	3901      	subs	r1, #1
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aac:	910d      	str	r1, [sp, #52]	; 0x34
 8007aae:	f7ff ff2f 	bl	8007910 <__exponent>
 8007ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	1813      	adds	r3, r2, r0
 8007ab8:	2a01      	cmp	r2, #1
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	dc02      	bgt.n	8007ac4 <_printf_float+0x148>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	07d1      	lsls	r1, r2, #31
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_float+0x14c>
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0a2      	beq.n	8007a16 <_printf_float+0x9a>
 8007ad0:	232d      	movs	r3, #45	; 0x2d
 8007ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad6:	e79e      	b.n	8007a16 <_printf_float+0x9a>
 8007ad8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007adc:	f000 816e 	beq.w	8007dbc <_printf_float+0x440>
 8007ae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ae4:	d1b9      	bne.n	8007a5a <_printf_float+0xde>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1b7      	bne.n	8007a5a <_printf_float+0xde>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e7b4      	b.n	8007a58 <_printf_float+0xdc>
 8007aee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007af2:	d119      	bne.n	8007b28 <_printf_float+0x1ac>
 8007af4:	2900      	cmp	r1, #0
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	dd0c      	ble.n	8007b14 <_printf_float+0x198>
 8007afa:	6121      	str	r1, [r4, #16]
 8007afc:	b913      	cbnz	r3, 8007b04 <_printf_float+0x188>
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	07d2      	lsls	r2, r2, #31
 8007b02:	d502      	bpl.n	8007b0a <_printf_float+0x18e>
 8007b04:	3301      	adds	r3, #1
 8007b06:	440b      	add	r3, r1
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b0c:	f04f 0900 	mov.w	r9, #0
 8007b10:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b12:	e7d9      	b.n	8007ac8 <_printf_float+0x14c>
 8007b14:	b913      	cbnz	r3, 8007b1c <_printf_float+0x1a0>
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	07d0      	lsls	r0, r2, #31
 8007b1a:	d501      	bpl.n	8007b20 <_printf_float+0x1a4>
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	e7f3      	b.n	8007b08 <_printf_float+0x18c>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7f1      	b.n	8007b08 <_printf_float+0x18c>
 8007b24:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007b28:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	db05      	blt.n	8007b3c <_printf_float+0x1c0>
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	07d1      	lsls	r1, r2, #31
 8007b36:	d5e8      	bpl.n	8007b0a <_printf_float+0x18e>
 8007b38:	3301      	adds	r3, #1
 8007b3a:	e7e5      	b.n	8007b08 <_printf_float+0x18c>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfcc      	ite	gt
 8007b40:	2301      	movgt	r3, #1
 8007b42:	f1c3 0302 	rsble	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	e7de      	b.n	8007b08 <_printf_float+0x18c>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	055a      	lsls	r2, r3, #21
 8007b4e:	d407      	bmi.n	8007b60 <_printf_float+0x1e4>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	463a      	mov	r2, r7
 8007b54:	4659      	mov	r1, fp
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d129      	bne.n	8007bb2 <_printf_float+0x236>
 8007b5e:	e764      	b.n	8007a2a <_printf_float+0xae>
 8007b60:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007b64:	f240 80d7 	bls.w	8007d16 <_printf_float+0x39a>
 8007b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f7f8 ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007b74:	b388      	cbz	r0, 8007bda <_printf_float+0x25e>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4a40      	ldr	r2, [pc, #256]	; (8007c7c <_printf_float+0x300>)
 8007b7a:	4659      	mov	r1, fp
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b0      	blx	r6
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f af52 	beq.w	8007a2a <_printf_float+0xae>
 8007b86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	db02      	blt.n	8007b94 <_printf_float+0x218>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07d8      	lsls	r0, r3, #31
 8007b92:	d50e      	bpl.n	8007bb2 <_printf_float+0x236>
 8007b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b98:	4659      	mov	r1, fp
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b0      	blx	r6
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af43 	beq.w	8007a2a <_printf_float+0xae>
 8007ba4:	2700      	movs	r7, #0
 8007ba6:	f104 081a 	add.w	r8, r4, #26
 8007baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bac:	3b01      	subs	r3, #1
 8007bae:	42bb      	cmp	r3, r7
 8007bb0:	dc09      	bgt.n	8007bc6 <_printf_float+0x24a>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	079f      	lsls	r7, r3, #30
 8007bb6:	f100 80fd 	bmi.w	8007db4 <_printf_float+0x438>
 8007bba:	68e0      	ldr	r0, [r4, #12]
 8007bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bbe:	4298      	cmp	r0, r3
 8007bc0:	bfb8      	it	lt
 8007bc2:	4618      	movlt	r0, r3
 8007bc4:	e733      	b.n	8007a2e <_printf_float+0xb2>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4642      	mov	r2, r8
 8007bca:	4659      	mov	r1, fp
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f af2a 	beq.w	8007a2a <_printf_float+0xae>
 8007bd6:	3701      	adds	r7, #1
 8007bd8:	e7e7      	b.n	8007baa <_printf_float+0x22e>
 8007bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc2b      	bgt.n	8007c38 <_printf_float+0x2bc>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4a26      	ldr	r2, [pc, #152]	; (8007c7c <_printf_float+0x300>)
 8007be4:	4659      	mov	r1, fp
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b0      	blx	r6
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f af1d 	beq.w	8007a2a <_printf_float+0xae>
 8007bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf2:	b923      	cbnz	r3, 8007bfe <_printf_float+0x282>
 8007bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bf6:	b913      	cbnz	r3, 8007bfe <_printf_float+0x282>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	d5d9      	bpl.n	8007bb2 <_printf_float+0x236>
 8007bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c02:	4659      	mov	r1, fp
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b0      	blx	r6
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f af0e 	beq.w	8007a2a <_printf_float+0xae>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	f104 091a 	add.w	r9, r4, #26
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	425b      	negs	r3, r3
 8007c1a:	4543      	cmp	r3, r8
 8007c1c:	dc01      	bgt.n	8007c22 <_printf_float+0x2a6>
 8007c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c20:	e797      	b.n	8007b52 <_printf_float+0x1d6>
 8007c22:	2301      	movs	r3, #1
 8007c24:	464a      	mov	r2, r9
 8007c26:	4659      	mov	r1, fp
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b0      	blx	r6
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f aefc 	beq.w	8007a2a <_printf_float+0xae>
 8007c32:	f108 0801 	add.w	r8, r8, #1
 8007c36:	e7ee      	b.n	8007c16 <_printf_float+0x29a>
 8007c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bfa8      	it	ge
 8007c40:	461a      	movge	r2, r3
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	4690      	mov	r8, r2
 8007c46:	dd07      	ble.n	8007c58 <_printf_float+0x2dc>
 8007c48:	4613      	mov	r3, r2
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	463a      	mov	r2, r7
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b0      	blx	r6
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f aee9 	beq.w	8007a2a <_printf_float+0xae>
 8007c58:	f104 031a 	add.w	r3, r4, #26
 8007c5c:	f04f 0a00 	mov.w	sl, #0
 8007c60:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c66:	e015      	b.n	8007c94 <_printf_float+0x318>
 8007c68:	7fefffff 	.word	0x7fefffff
 8007c6c:	0800b118 	.word	0x0800b118
 8007c70:	0800b114 	.word	0x0800b114
 8007c74:	0800b120 	.word	0x0800b120
 8007c78:	0800b11c 	.word	0x0800b11c
 8007c7c:	0800b124 	.word	0x0800b124
 8007c80:	2301      	movs	r3, #1
 8007c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c84:	4659      	mov	r1, fp
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b0      	blx	r6
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f aecd 	beq.w	8007a2a <_printf_float+0xae>
 8007c90:	f10a 0a01 	add.w	sl, sl, #1
 8007c94:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007c98:	eba9 0308 	sub.w	r3, r9, r8
 8007c9c:	4553      	cmp	r3, sl
 8007c9e:	dcef      	bgt.n	8007c80 <_printf_float+0x304>
 8007ca0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	444f      	add	r7, r9
 8007ca8:	db14      	blt.n	8007cd4 <_printf_float+0x358>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	d411      	bmi.n	8007cd4 <_printf_float+0x358>
 8007cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cb4:	eba3 0209 	sub.w	r2, r3, r9
 8007cb8:	eba3 0901 	sub.w	r9, r3, r1
 8007cbc:	4591      	cmp	r9, r2
 8007cbe:	bfa8      	it	ge
 8007cc0:	4691      	movge	r9, r2
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	dc0d      	bgt.n	8007ce4 <_printf_float+0x368>
 8007cc8:	2700      	movs	r7, #0
 8007cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cce:	f104 081a 	add.w	r8, r4, #26
 8007cd2:	e018      	b.n	8007d06 <_printf_float+0x38a>
 8007cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cd8:	4659      	mov	r1, fp
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b0      	blx	r6
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d1e6      	bne.n	8007cb0 <_printf_float+0x334>
 8007ce2:	e6a2      	b.n	8007a2a <_printf_float+0xae>
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	463a      	mov	r2, r7
 8007ce8:	4659      	mov	r1, fp
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b0      	blx	r6
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d1ea      	bne.n	8007cc8 <_printf_float+0x34c>
 8007cf2:	e69a      	b.n	8007a2a <_printf_float+0xae>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b0      	blx	r6
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f ae93 	beq.w	8007a2a <_printf_float+0xae>
 8007d04:	3701      	adds	r7, #1
 8007d06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	eba3 0309 	sub.w	r3, r3, r9
 8007d10:	42bb      	cmp	r3, r7
 8007d12:	dcef      	bgt.n	8007cf4 <_printf_float+0x378>
 8007d14:	e74d      	b.n	8007bb2 <_printf_float+0x236>
 8007d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d18:	2a01      	cmp	r2, #1
 8007d1a:	dc01      	bgt.n	8007d20 <_printf_float+0x3a4>
 8007d1c:	07db      	lsls	r3, r3, #31
 8007d1e:	d538      	bpl.n	8007d92 <_printf_float+0x416>
 8007d20:	2301      	movs	r3, #1
 8007d22:	463a      	mov	r2, r7
 8007d24:	4659      	mov	r1, fp
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b0      	blx	r6
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f ae7d 	beq.w	8007a2a <_printf_float+0xae>
 8007d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d34:	4659      	mov	r1, fp
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b0      	blx	r6
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f107 0701 	add.w	r7, r7, #1
 8007d40:	f43f ae73 	beq.w	8007a2a <_printf_float+0xae>
 8007d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007d50:	2300      	movs	r3, #0
 8007d52:	f7f8 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 8007d56:	b9c0      	cbnz	r0, 8007d8a <_printf_float+0x40e>
 8007d58:	4643      	mov	r3, r8
 8007d5a:	463a      	mov	r2, r7
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b0      	blx	r6
 8007d62:	3001      	adds	r0, #1
 8007d64:	d10d      	bne.n	8007d82 <_printf_float+0x406>
 8007d66:	e660      	b.n	8007a2a <_printf_float+0xae>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b0      	blx	r6
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f ae59 	beq.w	8007a2a <_printf_float+0xae>
 8007d78:	3701      	adds	r7, #1
 8007d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	42bb      	cmp	r3, r7
 8007d80:	dcf2      	bgt.n	8007d68 <_printf_float+0x3ec>
 8007d82:	464b      	mov	r3, r9
 8007d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d88:	e6e4      	b.n	8007b54 <_printf_float+0x1d8>
 8007d8a:	2700      	movs	r7, #0
 8007d8c:	f104 081a 	add.w	r8, r4, #26
 8007d90:	e7f3      	b.n	8007d7a <_printf_float+0x3fe>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e7e1      	b.n	8007d5a <_printf_float+0x3de>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4642      	mov	r2, r8
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b0      	blx	r6
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f ae42 	beq.w	8007a2a <_printf_float+0xae>
 8007da6:	3701      	adds	r7, #1
 8007da8:	68e3      	ldr	r3, [r4, #12]
 8007daa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dac:	1a9b      	subs	r3, r3, r2
 8007dae:	42bb      	cmp	r3, r7
 8007db0:	dcf1      	bgt.n	8007d96 <_printf_float+0x41a>
 8007db2:	e702      	b.n	8007bba <_printf_float+0x23e>
 8007db4:	2700      	movs	r7, #0
 8007db6:	f104 0819 	add.w	r8, r4, #25
 8007dba:	e7f5      	b.n	8007da8 <_printf_float+0x42c>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f43f ae94 	beq.w	8007aea <_printf_float+0x16e>
 8007dc2:	f04f 0c00 	mov.w	ip, #0
 8007dc6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007dca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007dce:	6022      	str	r2, [r4, #0]
 8007dd0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007dd4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	463a      	mov	r2, r7
 8007ddc:	464b      	mov	r3, r9
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7ff fd3a 	bl	8007858 <__cvt>
 8007de4:	4607      	mov	r7, r0
 8007de6:	e64f      	b.n	8007a88 <_printf_float+0x10c>

08007de8 <_printf_common>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	4691      	mov	r9, r2
 8007dee:	461f      	mov	r7, r3
 8007df0:	688a      	ldr	r2, [r1, #8]
 8007df2:	690b      	ldr	r3, [r1, #16]
 8007df4:	4606      	mov	r6, r0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bfb8      	it	lt
 8007dfa:	4613      	movlt	r3, r2
 8007dfc:	f8c9 3000 	str.w	r3, [r9]
 8007e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e04:	460c      	mov	r4, r1
 8007e06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e0a:	b112      	cbz	r2, 8007e12 <_printf_common+0x2a>
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f8c9 3000 	str.w	r3, [r9]
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	0699      	lsls	r1, r3, #26
 8007e16:	bf42      	ittt	mi
 8007e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e1c:	3302      	addmi	r3, #2
 8007e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	f015 0506 	ands.w	r5, r5, #6
 8007e28:	d107      	bne.n	8007e3a <_printf_common+0x52>
 8007e2a:	f104 0a19 	add.w	sl, r4, #25
 8007e2e:	68e3      	ldr	r3, [r4, #12]
 8007e30:	f8d9 2000 	ldr.w	r2, [r9]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	dc29      	bgt.n	8007e8e <_printf_common+0xa6>
 8007e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	3300      	adds	r3, #0
 8007e42:	bf18      	it	ne
 8007e44:	2301      	movne	r3, #1
 8007e46:	0692      	lsls	r2, r2, #26
 8007e48:	d42e      	bmi.n	8007ea8 <_printf_common+0xc0>
 8007e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e4e:	4639      	mov	r1, r7
 8007e50:	4630      	mov	r0, r6
 8007e52:	47c0      	blx	r8
 8007e54:	3001      	adds	r0, #1
 8007e56:	d021      	beq.n	8007e9c <_printf_common+0xb4>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	68e5      	ldr	r5, [r4, #12]
 8007e5c:	f003 0306 	and.w	r3, r3, #6
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	bf18      	it	ne
 8007e64:	2500      	movne	r5, #0
 8007e66:	f8d9 2000 	ldr.w	r2, [r9]
 8007e6a:	f04f 0900 	mov.w	r9, #0
 8007e6e:	bf08      	it	eq
 8007e70:	1aad      	subeq	r5, r5, r2
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	6922      	ldr	r2, [r4, #16]
 8007e76:	bf08      	it	eq
 8007e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bfc4      	itt	gt
 8007e80:	1a9b      	subgt	r3, r3, r2
 8007e82:	18ed      	addgt	r5, r5, r3
 8007e84:	341a      	adds	r4, #26
 8007e86:	454d      	cmp	r5, r9
 8007e88:	d11a      	bne.n	8007ec0 <_printf_common+0xd8>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e008      	b.n	8007ea0 <_printf_common+0xb8>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4652      	mov	r2, sl
 8007e92:	4639      	mov	r1, r7
 8007e94:	4630      	mov	r0, r6
 8007e96:	47c0      	blx	r8
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d103      	bne.n	8007ea4 <_printf_common+0xbc>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	e7c2      	b.n	8007e2e <_printf_common+0x46>
 8007ea8:	2030      	movs	r0, #48	; 0x30
 8007eaa:	18e1      	adds	r1, r4, r3
 8007eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eb6:	4422      	add	r2, r4
 8007eb8:	3302      	adds	r3, #2
 8007eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ebe:	e7c4      	b.n	8007e4a <_printf_common+0x62>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d0e6      	beq.n	8007e9c <_printf_common+0xb4>
 8007ece:	f109 0901 	add.w	r9, r9, #1
 8007ed2:	e7d8      	b.n	8007e86 <_printf_common+0x9e>

08007ed4 <_printf_i>:
 8007ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007edc:	460c      	mov	r4, r1
 8007ede:	7e09      	ldrb	r1, [r1, #24]
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	296e      	cmp	r1, #110	; 0x6e
 8007ee4:	4617      	mov	r7, r2
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	4698      	mov	r8, r3
 8007eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eec:	f000 80b3 	beq.w	8008056 <_printf_i+0x182>
 8007ef0:	d822      	bhi.n	8007f38 <_printf_i+0x64>
 8007ef2:	2963      	cmp	r1, #99	; 0x63
 8007ef4:	d036      	beq.n	8007f64 <_printf_i+0x90>
 8007ef6:	d80a      	bhi.n	8007f0e <_printf_i+0x3a>
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	f000 80b9 	beq.w	8008070 <_printf_i+0x19c>
 8007efe:	2958      	cmp	r1, #88	; 0x58
 8007f00:	f000 8083 	beq.w	800800a <_printf_i+0x136>
 8007f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f0c:	e032      	b.n	8007f74 <_printf_i+0xa0>
 8007f0e:	2964      	cmp	r1, #100	; 0x64
 8007f10:	d001      	beq.n	8007f16 <_printf_i+0x42>
 8007f12:	2969      	cmp	r1, #105	; 0x69
 8007f14:	d1f6      	bne.n	8007f04 <_printf_i+0x30>
 8007f16:	6820      	ldr	r0, [r4, #0]
 8007f18:	6813      	ldr	r3, [r2, #0]
 8007f1a:	0605      	lsls	r5, r0, #24
 8007f1c:	f103 0104 	add.w	r1, r3, #4
 8007f20:	d52a      	bpl.n	8007f78 <_printf_i+0xa4>
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da03      	bge.n	8007f32 <_printf_i+0x5e>
 8007f2a:	222d      	movs	r2, #45	; 0x2d
 8007f2c:	425b      	negs	r3, r3
 8007f2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f32:	486f      	ldr	r0, [pc, #444]	; (80080f0 <_printf_i+0x21c>)
 8007f34:	220a      	movs	r2, #10
 8007f36:	e039      	b.n	8007fac <_printf_i+0xd8>
 8007f38:	2973      	cmp	r1, #115	; 0x73
 8007f3a:	f000 809d 	beq.w	8008078 <_printf_i+0x1a4>
 8007f3e:	d808      	bhi.n	8007f52 <_printf_i+0x7e>
 8007f40:	296f      	cmp	r1, #111	; 0x6f
 8007f42:	d020      	beq.n	8007f86 <_printf_i+0xb2>
 8007f44:	2970      	cmp	r1, #112	; 0x70
 8007f46:	d1dd      	bne.n	8007f04 <_printf_i+0x30>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	f043 0320 	orr.w	r3, r3, #32
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	e003      	b.n	8007f5a <_printf_i+0x86>
 8007f52:	2975      	cmp	r1, #117	; 0x75
 8007f54:	d017      	beq.n	8007f86 <_printf_i+0xb2>
 8007f56:	2978      	cmp	r1, #120	; 0x78
 8007f58:	d1d4      	bne.n	8007f04 <_printf_i+0x30>
 8007f5a:	2378      	movs	r3, #120	; 0x78
 8007f5c:	4865      	ldr	r0, [pc, #404]	; (80080f4 <_printf_i+0x220>)
 8007f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f62:	e055      	b.n	8008010 <_printf_i+0x13c>
 8007f64:	6813      	ldr	r3, [r2, #0]
 8007f66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f6a:	1d19      	adds	r1, r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6011      	str	r1, [r2, #0]
 8007f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f74:	2301      	movs	r3, #1
 8007f76:	e08c      	b.n	8008092 <_printf_i+0x1be>
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f7e:	6011      	str	r1, [r2, #0]
 8007f80:	bf18      	it	ne
 8007f82:	b21b      	sxthne	r3, r3
 8007f84:	e7cf      	b.n	8007f26 <_printf_i+0x52>
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	1d18      	adds	r0, r3, #4
 8007f8c:	6010      	str	r0, [r2, #0]
 8007f8e:	0628      	lsls	r0, r5, #24
 8007f90:	d501      	bpl.n	8007f96 <_printf_i+0xc2>
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	e002      	b.n	8007f9c <_printf_i+0xc8>
 8007f96:	0668      	lsls	r0, r5, #25
 8007f98:	d5fb      	bpl.n	8007f92 <_printf_i+0xbe>
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	296f      	cmp	r1, #111	; 0x6f
 8007f9e:	bf14      	ite	ne
 8007fa0:	220a      	movne	r2, #10
 8007fa2:	2208      	moveq	r2, #8
 8007fa4:	4852      	ldr	r0, [pc, #328]	; (80080f0 <_printf_i+0x21c>)
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fac:	6865      	ldr	r5, [r4, #4]
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	60a5      	str	r5, [r4, #8]
 8007fb2:	f2c0 8095 	blt.w	80080e0 <_printf_i+0x20c>
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	f021 0104 	bic.w	r1, r1, #4
 8007fbc:	6021      	str	r1, [r4, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d13d      	bne.n	800803e <_printf_i+0x16a>
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	f040 808e 	bne.w	80080e4 <_printf_i+0x210>
 8007fc8:	4665      	mov	r5, ip
 8007fca:	2a08      	cmp	r2, #8
 8007fcc:	d10b      	bne.n	8007fe6 <_printf_i+0x112>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	07db      	lsls	r3, r3, #31
 8007fd2:	d508      	bpl.n	8007fe6 <_printf_i+0x112>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	bfde      	ittt	le
 8007fdc:	2330      	movle	r3, #48	; 0x30
 8007fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fe6:	ebac 0305 	sub.w	r3, ip, r5
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	f8cd 8000 	str.w	r8, [sp]
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	aa03      	add	r2, sp, #12
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7ff fef6 	bl	8007de8 <_printf_common>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d14d      	bne.n	800809c <_printf_i+0x1c8>
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008004:	b005      	add	sp, #20
 8008006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800800a:	4839      	ldr	r0, [pc, #228]	; (80080f0 <_printf_i+0x21c>)
 800800c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	6821      	ldr	r1, [r4, #0]
 8008014:	1d1d      	adds	r5, r3, #4
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6015      	str	r5, [r2, #0]
 800801a:	060a      	lsls	r2, r1, #24
 800801c:	d50b      	bpl.n	8008036 <_printf_i+0x162>
 800801e:	07ca      	lsls	r2, r1, #31
 8008020:	bf44      	itt	mi
 8008022:	f041 0120 	orrmi.w	r1, r1, #32
 8008026:	6021      	strmi	r1, [r4, #0]
 8008028:	b91b      	cbnz	r3, 8008032 <_printf_i+0x15e>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	f022 0220 	bic.w	r2, r2, #32
 8008030:	6022      	str	r2, [r4, #0]
 8008032:	2210      	movs	r2, #16
 8008034:	e7b7      	b.n	8007fa6 <_printf_i+0xd2>
 8008036:	064d      	lsls	r5, r1, #25
 8008038:	bf48      	it	mi
 800803a:	b29b      	uxthmi	r3, r3
 800803c:	e7ef      	b.n	800801e <_printf_i+0x14a>
 800803e:	4665      	mov	r5, ip
 8008040:	fbb3 f1f2 	udiv	r1, r3, r2
 8008044:	fb02 3311 	mls	r3, r2, r1, r3
 8008048:	5cc3      	ldrb	r3, [r0, r3]
 800804a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800804e:	460b      	mov	r3, r1
 8008050:	2900      	cmp	r1, #0
 8008052:	d1f5      	bne.n	8008040 <_printf_i+0x16c>
 8008054:	e7b9      	b.n	8007fca <_printf_i+0xf6>
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	6825      	ldr	r5, [r4, #0]
 800805a:	1d18      	adds	r0, r3, #4
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	6010      	str	r0, [r2, #0]
 8008060:	0628      	lsls	r0, r5, #24
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	d501      	bpl.n	800806a <_printf_i+0x196>
 8008066:	6019      	str	r1, [r3, #0]
 8008068:	e002      	b.n	8008070 <_printf_i+0x19c>
 800806a:	066a      	lsls	r2, r5, #25
 800806c:	d5fb      	bpl.n	8008066 <_printf_i+0x192>
 800806e:	8019      	strh	r1, [r3, #0]
 8008070:	2300      	movs	r3, #0
 8008072:	4665      	mov	r5, ip
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	e7b9      	b.n	8007fec <_printf_i+0x118>
 8008078:	6813      	ldr	r3, [r2, #0]
 800807a:	1d19      	adds	r1, r3, #4
 800807c:	6011      	str	r1, [r2, #0]
 800807e:	681d      	ldr	r5, [r3, #0]
 8008080:	6862      	ldr	r2, [r4, #4]
 8008082:	2100      	movs	r1, #0
 8008084:	4628      	mov	r0, r5
 8008086:	f000 feb1 	bl	8008dec <memchr>
 800808a:	b108      	cbz	r0, 8008090 <_printf_i+0x1bc>
 800808c:	1b40      	subs	r0, r0, r5
 800808e:	6060      	str	r0, [r4, #4]
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	6123      	str	r3, [r4, #16]
 8008094:	2300      	movs	r3, #0
 8008096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809a:	e7a7      	b.n	8007fec <_printf_i+0x118>
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	462a      	mov	r2, r5
 80080a0:	4639      	mov	r1, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	47c0      	blx	r8
 80080a6:	3001      	adds	r0, #1
 80080a8:	d0aa      	beq.n	8008000 <_printf_i+0x12c>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	079b      	lsls	r3, r3, #30
 80080ae:	d413      	bmi.n	80080d8 <_printf_i+0x204>
 80080b0:	68e0      	ldr	r0, [r4, #12]
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	4298      	cmp	r0, r3
 80080b6:	bfb8      	it	lt
 80080b8:	4618      	movlt	r0, r3
 80080ba:	e7a3      	b.n	8008004 <_printf_i+0x130>
 80080bc:	2301      	movs	r3, #1
 80080be:	464a      	mov	r2, r9
 80080c0:	4639      	mov	r1, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d09a      	beq.n	8008000 <_printf_i+0x12c>
 80080ca:	3501      	adds	r5, #1
 80080cc:	68e3      	ldr	r3, [r4, #12]
 80080ce:	9a03      	ldr	r2, [sp, #12]
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	42ab      	cmp	r3, r5
 80080d4:	dcf2      	bgt.n	80080bc <_printf_i+0x1e8>
 80080d6:	e7eb      	b.n	80080b0 <_printf_i+0x1dc>
 80080d8:	2500      	movs	r5, #0
 80080da:	f104 0919 	add.w	r9, r4, #25
 80080de:	e7f5      	b.n	80080cc <_printf_i+0x1f8>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1ac      	bne.n	800803e <_printf_i+0x16a>
 80080e4:	7803      	ldrb	r3, [r0, #0]
 80080e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080ee:	e76c      	b.n	8007fca <_printf_i+0xf6>
 80080f0:	0800b126 	.word	0x0800b126
 80080f4:	0800b137 	.word	0x0800b137

080080f8 <siprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080fe:	b500      	push	{lr}
 8008100:	b09c      	sub	sp, #112	; 0x70
 8008102:	ab1d      	add	r3, sp, #116	; 0x74
 8008104:	9002      	str	r0, [sp, #8]
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	9107      	str	r1, [sp, #28]
 800810a:	9104      	str	r1, [sp, #16]
 800810c:	4808      	ldr	r0, [pc, #32]	; (8008130 <siprintf+0x38>)
 800810e:	4909      	ldr	r1, [pc, #36]	; (8008134 <siprintf+0x3c>)
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	9105      	str	r1, [sp, #20]
 8008116:	6800      	ldr	r0, [r0, #0]
 8008118:	a902      	add	r1, sp, #8
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	f001 fa6a 	bl	80095f4 <_svfiprintf_r>
 8008120:	2200      	movs	r2, #0
 8008122:	9b02      	ldr	r3, [sp, #8]
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	b01c      	add	sp, #112	; 0x70
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	20000038 	.word	0x20000038
 8008134:	ffff0208 	.word	0xffff0208

08008138 <quorem>:
 8008138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	6903      	ldr	r3, [r0, #16]
 800813e:	690c      	ldr	r4, [r1, #16]
 8008140:	4680      	mov	r8, r0
 8008142:	42a3      	cmp	r3, r4
 8008144:	f2c0 8084 	blt.w	8008250 <quorem+0x118>
 8008148:	3c01      	subs	r4, #1
 800814a:	f101 0714 	add.w	r7, r1, #20
 800814e:	f100 0614 	add.w	r6, r0, #20
 8008152:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008156:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800815a:	3501      	adds	r5, #1
 800815c:	fbb0 f5f5 	udiv	r5, r0, r5
 8008160:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008164:	eb06 030c 	add.w	r3, r6, ip
 8008168:	eb07 090c 	add.w	r9, r7, ip
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	b39d      	cbz	r5, 80081d8 <quorem+0xa0>
 8008170:	f04f 0a00 	mov.w	sl, #0
 8008174:	4638      	mov	r0, r7
 8008176:	46b6      	mov	lr, r6
 8008178:	46d3      	mov	fp, sl
 800817a:	f850 2b04 	ldr.w	r2, [r0], #4
 800817e:	b293      	uxth	r3, r2
 8008180:	fb05 a303 	mla	r3, r5, r3, sl
 8008184:	0c12      	lsrs	r2, r2, #16
 8008186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800818a:	fb05 a202 	mla	r2, r5, r2, sl
 800818e:	b29b      	uxth	r3, r3
 8008190:	ebab 0303 	sub.w	r3, fp, r3
 8008194:	f8de b000 	ldr.w	fp, [lr]
 8008198:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800819c:	fa1f fb8b 	uxth.w	fp, fp
 80081a0:	445b      	add	r3, fp
 80081a2:	fa1f fb82 	uxth.w	fp, r2
 80081a6:	f8de 2000 	ldr.w	r2, [lr]
 80081aa:	4581      	cmp	r9, r0
 80081ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80081b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80081be:	f84e 3b04 	str.w	r3, [lr], #4
 80081c2:	d2da      	bcs.n	800817a <quorem+0x42>
 80081c4:	f856 300c 	ldr.w	r3, [r6, ip]
 80081c8:	b933      	cbnz	r3, 80081d8 <quorem+0xa0>
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	429e      	cmp	r6, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	d331      	bcc.n	8008238 <quorem+0x100>
 80081d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80081d8:	4640      	mov	r0, r8
 80081da:	f001 f835 	bl	8009248 <__mcmp>
 80081de:	2800      	cmp	r0, #0
 80081e0:	db26      	blt.n	8008230 <quorem+0xf8>
 80081e2:	4630      	mov	r0, r6
 80081e4:	f04f 0c00 	mov.w	ip, #0
 80081e8:	3501      	adds	r5, #1
 80081ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80081ee:	f8d0 e000 	ldr.w	lr, [r0]
 80081f2:	b28b      	uxth	r3, r1
 80081f4:	ebac 0303 	sub.w	r3, ip, r3
 80081f8:	fa1f f28e 	uxth.w	r2, lr
 80081fc:	4413      	add	r3, r2
 80081fe:	0c0a      	lsrs	r2, r1, #16
 8008200:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820e:	45b9      	cmp	r9, r7
 8008210:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008214:	f840 3b04 	str.w	r3, [r0], #4
 8008218:	d2e7      	bcs.n	80081ea <quorem+0xb2>
 800821a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800821e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008222:	b92a      	cbnz	r2, 8008230 <quorem+0xf8>
 8008224:	3b04      	subs	r3, #4
 8008226:	429e      	cmp	r6, r3
 8008228:	461a      	mov	r2, r3
 800822a:	d30b      	bcc.n	8008244 <quorem+0x10c>
 800822c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008230:	4628      	mov	r0, r5
 8008232:	b003      	add	sp, #12
 8008234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	3b04      	subs	r3, #4
 800823c:	2a00      	cmp	r2, #0
 800823e:	d1c9      	bne.n	80081d4 <quorem+0x9c>
 8008240:	3c01      	subs	r4, #1
 8008242:	e7c4      	b.n	80081ce <quorem+0x96>
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	3b04      	subs	r3, #4
 8008248:	2a00      	cmp	r2, #0
 800824a:	d1ef      	bne.n	800822c <quorem+0xf4>
 800824c:	3c01      	subs	r4, #1
 800824e:	e7ea      	b.n	8008226 <quorem+0xee>
 8008250:	2000      	movs	r0, #0
 8008252:	e7ee      	b.n	8008232 <quorem+0xfa>
 8008254:	0000      	movs	r0, r0
	...

08008258 <_dtoa_r>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	4616      	mov	r6, r2
 800825e:	461f      	mov	r7, r3
 8008260:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008262:	b095      	sub	sp, #84	; 0x54
 8008264:	4604      	mov	r4, r0
 8008266:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800826a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800826e:	b93d      	cbnz	r5, 8008280 <_dtoa_r+0x28>
 8008270:	2010      	movs	r0, #16
 8008272:	f000 fdb3 	bl	8008ddc <malloc>
 8008276:	6260      	str	r0, [r4, #36]	; 0x24
 8008278:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800827c:	6005      	str	r5, [r0, #0]
 800827e:	60c5      	str	r5, [r0, #12]
 8008280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	b151      	cbz	r1, 800829c <_dtoa_r+0x44>
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	2301      	movs	r3, #1
 800828a:	4093      	lsls	r3, r2
 800828c:	604a      	str	r2, [r1, #4]
 800828e:	608b      	str	r3, [r1, #8]
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fdf8 	bl	8008e86 <_Bfree>
 8008296:	2200      	movs	r2, #0
 8008298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	1e3b      	subs	r3, r7, #0
 800829e:	bfaf      	iteee	ge
 80082a0:	2300      	movge	r3, #0
 80082a2:	2201      	movlt	r2, #1
 80082a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082a8:	9303      	strlt	r3, [sp, #12]
 80082aa:	bfac      	ite	ge
 80082ac:	f8c8 3000 	strge.w	r3, [r8]
 80082b0:	f8c8 2000 	strlt.w	r2, [r8]
 80082b4:	4bae      	ldr	r3, [pc, #696]	; (8008570 <_dtoa_r+0x318>)
 80082b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082ba:	ea33 0308 	bics.w	r3, r3, r8
 80082be:	d11b      	bne.n	80082f8 <_dtoa_r+0xa0>
 80082c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80082c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	9b02      	ldr	r3, [sp, #8]
 80082ca:	b923      	cbnz	r3, 80082d6 <_dtoa_r+0x7e>
 80082cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80082d0:	2800      	cmp	r0, #0
 80082d2:	f000 8545 	beq.w	8008d60 <_dtoa_r+0xb08>
 80082d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082d8:	b953      	cbnz	r3, 80082f0 <_dtoa_r+0x98>
 80082da:	4ba6      	ldr	r3, [pc, #664]	; (8008574 <_dtoa_r+0x31c>)
 80082dc:	e021      	b.n	8008322 <_dtoa_r+0xca>
 80082de:	4ba6      	ldr	r3, [pc, #664]	; (8008578 <_dtoa_r+0x320>)
 80082e0:	9306      	str	r3, [sp, #24]
 80082e2:	3308      	adds	r3, #8
 80082e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	9806      	ldr	r0, [sp, #24]
 80082ea:	b015      	add	sp, #84	; 0x54
 80082ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f0:	4ba0      	ldr	r3, [pc, #640]	; (8008574 <_dtoa_r+0x31c>)
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	3303      	adds	r3, #3
 80082f6:	e7f5      	b.n	80082e4 <_dtoa_r+0x8c>
 80082f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2300      	movs	r3, #0
 8008300:	4630      	mov	r0, r6
 8008302:	4639      	mov	r1, r7
 8008304:	f7f8 fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8008308:	4682      	mov	sl, r0
 800830a:	b160      	cbz	r0, 8008326 <_dtoa_r+0xce>
 800830c:	2301      	movs	r3, #1
 800830e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8520 	beq.w	8008d5a <_dtoa_r+0xb02>
 800831a:	4b98      	ldr	r3, [pc, #608]	; (800857c <_dtoa_r+0x324>)
 800831c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	9306      	str	r3, [sp, #24]
 8008324:	e7e0      	b.n	80082e8 <_dtoa_r+0x90>
 8008326:	ab12      	add	r3, sp, #72	; 0x48
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	ab13      	add	r3, sp, #76	; 0x4c
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4632      	mov	r2, r6
 8008330:	463b      	mov	r3, r7
 8008332:	4620      	mov	r0, r4
 8008334:	f001 f800 	bl	8009338 <__d2b>
 8008338:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800833c:	4683      	mov	fp, r0
 800833e:	2d00      	cmp	r5, #0
 8008340:	d07d      	beq.n	800843e <_dtoa_r+0x1e6>
 8008342:	46b0      	mov	r8, r6
 8008344:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008348:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800834c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008350:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008354:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008358:	2200      	movs	r2, #0
 800835a:	4b89      	ldr	r3, [pc, #548]	; (8008580 <_dtoa_r+0x328>)
 800835c:	4640      	mov	r0, r8
 800835e:	4649      	mov	r1, r9
 8008360:	f7f7 ff02 	bl	8000168 <__aeabi_dsub>
 8008364:	a37c      	add	r3, pc, #496	; (adr r3, 8008558 <_dtoa_r+0x300>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f7f8 f8b5 	bl	80004d8 <__aeabi_dmul>
 800836e:	a37c      	add	r3, pc, #496	; (adr r3, 8008560 <_dtoa_r+0x308>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f7 fefa 	bl	800016c <__adddf3>
 8008378:	4606      	mov	r6, r0
 800837a:	4628      	mov	r0, r5
 800837c:	460f      	mov	r7, r1
 800837e:	f7f8 f841 	bl	8000404 <__aeabi_i2d>
 8008382:	a379      	add	r3, pc, #484	; (adr r3, 8008568 <_dtoa_r+0x310>)
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7f8 f8a6 	bl	80004d8 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	f7f7 feea 	bl	800016c <__adddf3>
 8008398:	4606      	mov	r6, r0
 800839a:	460f      	mov	r7, r1
 800839c:	f7f8 fb4c 	bl	8000a38 <__aeabi_d2iz>
 80083a0:	2200      	movs	r2, #0
 80083a2:	4682      	mov	sl, r0
 80083a4:	2300      	movs	r3, #0
 80083a6:	4630      	mov	r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	f7f8 fb07 	bl	80009bc <__aeabi_dcmplt>
 80083ae:	b148      	cbz	r0, 80083c4 <_dtoa_r+0x16c>
 80083b0:	4650      	mov	r0, sl
 80083b2:	f7f8 f827 	bl	8000404 <__aeabi_i2d>
 80083b6:	4632      	mov	r2, r6
 80083b8:	463b      	mov	r3, r7
 80083ba:	f7f8 faf5 	bl	80009a8 <__aeabi_dcmpeq>
 80083be:	b908      	cbnz	r0, 80083c4 <_dtoa_r+0x16c>
 80083c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80083c4:	f1ba 0f16 	cmp.w	sl, #22
 80083c8:	d85a      	bhi.n	8008480 <_dtoa_r+0x228>
 80083ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ce:	496d      	ldr	r1, [pc, #436]	; (8008584 <_dtoa_r+0x32c>)
 80083d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80083d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d8:	f7f8 fb0e 	bl	80009f8 <__aeabi_dcmpgt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d051      	beq.n	8008484 <_dtoa_r+0x22c>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80083e6:	930d      	str	r3, [sp, #52]	; 0x34
 80083e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ea:	1b5d      	subs	r5, r3, r5
 80083ec:	1e6b      	subs	r3, r5, #1
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	bf43      	ittte	mi
 80083f2:	2300      	movmi	r3, #0
 80083f4:	f1c5 0901 	rsbmi	r9, r5, #1
 80083f8:	9307      	strmi	r3, [sp, #28]
 80083fa:	f04f 0900 	movpl.w	r9, #0
 80083fe:	f1ba 0f00 	cmp.w	sl, #0
 8008402:	db41      	blt.n	8008488 <_dtoa_r+0x230>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800840a:	4453      	add	r3, sl
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	2300      	movs	r3, #0
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008414:	2b09      	cmp	r3, #9
 8008416:	f200 808f 	bhi.w	8008538 <_dtoa_r+0x2e0>
 800841a:	2b05      	cmp	r3, #5
 800841c:	bfc4      	itt	gt
 800841e:	3b04      	subgt	r3, #4
 8008420:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008422:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008424:	bfc8      	it	gt
 8008426:	2500      	movgt	r5, #0
 8008428:	f1a3 0302 	sub.w	r3, r3, #2
 800842c:	bfd8      	it	le
 800842e:	2501      	movle	r5, #1
 8008430:	2b03      	cmp	r3, #3
 8008432:	f200 808d 	bhi.w	8008550 <_dtoa_r+0x2f8>
 8008436:	e8df f003 	tbb	[pc, r3]
 800843a:	7d7b      	.short	0x7d7b
 800843c:	6f2f      	.short	0x6f2f
 800843e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008442:	441d      	add	r5, r3
 8008444:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008448:	2820      	cmp	r0, #32
 800844a:	dd13      	ble.n	8008474 <_dtoa_r+0x21c>
 800844c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008450:	9b02      	ldr	r3, [sp, #8]
 8008452:	fa08 f800 	lsl.w	r8, r8, r0
 8008456:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800845a:	fa23 f000 	lsr.w	r0, r3, r0
 800845e:	ea48 0000 	orr.w	r0, r8, r0
 8008462:	f7f7 ffbf 	bl	80003e4 <__aeabi_ui2d>
 8008466:	2301      	movs	r3, #1
 8008468:	4680      	mov	r8, r0
 800846a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800846e:	3d01      	subs	r5, #1
 8008470:	9310      	str	r3, [sp, #64]	; 0x40
 8008472:	e771      	b.n	8008358 <_dtoa_r+0x100>
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	f1c0 0020 	rsb	r0, r0, #32
 800847a:	fa03 f000 	lsl.w	r0, r3, r0
 800847e:	e7f0      	b.n	8008462 <_dtoa_r+0x20a>
 8008480:	2301      	movs	r3, #1
 8008482:	e7b0      	b.n	80083e6 <_dtoa_r+0x18e>
 8008484:	900d      	str	r0, [sp, #52]	; 0x34
 8008486:	e7af      	b.n	80083e8 <_dtoa_r+0x190>
 8008488:	f1ca 0300 	rsb	r3, sl, #0
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	2300      	movs	r3, #0
 8008490:	eba9 090a 	sub.w	r9, r9, sl
 8008494:	930c      	str	r3, [sp, #48]	; 0x30
 8008496:	e7bc      	b.n	8008412 <_dtoa_r+0x1ba>
 8008498:	2301      	movs	r3, #1
 800849a:	9309      	str	r3, [sp, #36]	; 0x24
 800849c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dd74      	ble.n	800858c <_dtoa_r+0x334>
 80084a2:	4698      	mov	r8, r3
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	2200      	movs	r2, #0
 80084a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084aa:	6072      	str	r2, [r6, #4]
 80084ac:	2204      	movs	r2, #4
 80084ae:	f102 0014 	add.w	r0, r2, #20
 80084b2:	4298      	cmp	r0, r3
 80084b4:	6871      	ldr	r1, [r6, #4]
 80084b6:	d96e      	bls.n	8008596 <_dtoa_r+0x33e>
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fcb0 	bl	8008e1e <_Balloc>
 80084be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c0:	6030      	str	r0, [r6, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f1b8 0f0e 	cmp.w	r8, #14
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	f200 80ed 	bhi.w	80086a8 <_dtoa_r+0x450>
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f000 80ea 	beq.w	80086a8 <_dtoa_r+0x450>
 80084d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084d8:	f1ba 0f00 	cmp.w	sl, #0
 80084dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80084e0:	dd77      	ble.n	80085d2 <_dtoa_r+0x37a>
 80084e2:	4a28      	ldr	r2, [pc, #160]	; (8008584 <_dtoa_r+0x32c>)
 80084e4:	f00a 030f 	and.w	r3, sl, #15
 80084e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80084ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084f0:	06f0      	lsls	r0, r6, #27
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80084fa:	d568      	bpl.n	80085ce <_dtoa_r+0x376>
 80084fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008500:	4b21      	ldr	r3, [pc, #132]	; (8008588 <_dtoa_r+0x330>)
 8008502:	2503      	movs	r5, #3
 8008504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008508:	f7f8 f910 	bl	800072c <__aeabi_ddiv>
 800850c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008510:	f006 060f 	and.w	r6, r6, #15
 8008514:	4f1c      	ldr	r7, [pc, #112]	; (8008588 <_dtoa_r+0x330>)
 8008516:	e04f      	b.n	80085b8 <_dtoa_r+0x360>
 8008518:	2301      	movs	r3, #1
 800851a:	9309      	str	r3, [sp, #36]	; 0x24
 800851c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800851e:	4453      	add	r3, sl
 8008520:	f103 0801 	add.w	r8, r3, #1
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	4643      	mov	r3, r8
 8008528:	2b01      	cmp	r3, #1
 800852a:	bfb8      	it	lt
 800852c:	2301      	movlt	r3, #1
 800852e:	e7ba      	b.n	80084a6 <_dtoa_r+0x24e>
 8008530:	2300      	movs	r3, #0
 8008532:	e7b2      	b.n	800849a <_dtoa_r+0x242>
 8008534:	2300      	movs	r3, #0
 8008536:	e7f0      	b.n	800851a <_dtoa_r+0x2c2>
 8008538:	2501      	movs	r5, #1
 800853a:	2300      	movs	r3, #0
 800853c:	9509      	str	r5, [sp, #36]	; 0x24
 800853e:	931e      	str	r3, [sp, #120]	; 0x78
 8008540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008544:	2200      	movs	r2, #0
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	4698      	mov	r8, r3
 800854a:	2312      	movs	r3, #18
 800854c:	921f      	str	r2, [sp, #124]	; 0x7c
 800854e:	e7aa      	b.n	80084a6 <_dtoa_r+0x24e>
 8008550:	2301      	movs	r3, #1
 8008552:	9309      	str	r3, [sp, #36]	; 0x24
 8008554:	e7f4      	b.n	8008540 <_dtoa_r+0x2e8>
 8008556:	bf00      	nop
 8008558:	636f4361 	.word	0x636f4361
 800855c:	3fd287a7 	.word	0x3fd287a7
 8008560:	8b60c8b3 	.word	0x8b60c8b3
 8008564:	3fc68a28 	.word	0x3fc68a28
 8008568:	509f79fb 	.word	0x509f79fb
 800856c:	3fd34413 	.word	0x3fd34413
 8008570:	7ff00000 	.word	0x7ff00000
 8008574:	0800b151 	.word	0x0800b151
 8008578:	0800b148 	.word	0x0800b148
 800857c:	0800b125 	.word	0x0800b125
 8008580:	3ff80000 	.word	0x3ff80000
 8008584:	0800b180 	.word	0x0800b180
 8008588:	0800b158 	.word	0x0800b158
 800858c:	2301      	movs	r3, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	4698      	mov	r8, r3
 8008592:	461a      	mov	r2, r3
 8008594:	e7da      	b.n	800854c <_dtoa_r+0x2f4>
 8008596:	3101      	adds	r1, #1
 8008598:	6071      	str	r1, [r6, #4]
 800859a:	0052      	lsls	r2, r2, #1
 800859c:	e787      	b.n	80084ae <_dtoa_r+0x256>
 800859e:	07f1      	lsls	r1, r6, #31
 80085a0:	d508      	bpl.n	80085b4 <_dtoa_r+0x35c>
 80085a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085aa:	f7f7 ff95 	bl	80004d8 <__aeabi_dmul>
 80085ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80085b2:	3501      	adds	r5, #1
 80085b4:	1076      	asrs	r6, r6, #1
 80085b6:	3708      	adds	r7, #8
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	d1f0      	bne.n	800859e <_dtoa_r+0x346>
 80085bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c4:	f7f8 f8b2 	bl	800072c <__aeabi_ddiv>
 80085c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085cc:	e01b      	b.n	8008606 <_dtoa_r+0x3ae>
 80085ce:	2502      	movs	r5, #2
 80085d0:	e7a0      	b.n	8008514 <_dtoa_r+0x2bc>
 80085d2:	f000 80a4 	beq.w	800871e <_dtoa_r+0x4c6>
 80085d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085da:	f1ca 0600 	rsb	r6, sl, #0
 80085de:	4ba0      	ldr	r3, [pc, #640]	; (8008860 <_dtoa_r+0x608>)
 80085e0:	f006 020f 	and.w	r2, r6, #15
 80085e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f7f7 ff74 	bl	80004d8 <__aeabi_dmul>
 80085f0:	2502      	movs	r5, #2
 80085f2:	2300      	movs	r3, #0
 80085f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f8:	4f9a      	ldr	r7, [pc, #616]	; (8008864 <_dtoa_r+0x60c>)
 80085fa:	1136      	asrs	r6, r6, #4
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	f040 8083 	bne.w	8008708 <_dtoa_r+0x4b0>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e0      	bne.n	80085c8 <_dtoa_r+0x370>
 8008606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 808a 	beq.w	8008722 <_dtoa_r+0x4ca>
 800860e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008612:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800861a:	2200      	movs	r2, #0
 800861c:	4b92      	ldr	r3, [pc, #584]	; (8008868 <_dtoa_r+0x610>)
 800861e:	f7f8 f9cd 	bl	80009bc <__aeabi_dcmplt>
 8008622:	2800      	cmp	r0, #0
 8008624:	d07d      	beq.n	8008722 <_dtoa_r+0x4ca>
 8008626:	f1b8 0f00 	cmp.w	r8, #0
 800862a:	d07a      	beq.n	8008722 <_dtoa_r+0x4ca>
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dd36      	ble.n	80086a0 <_dtoa_r+0x448>
 8008632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008636:	2200      	movs	r2, #0
 8008638:	4b8c      	ldr	r3, [pc, #560]	; (800886c <_dtoa_r+0x614>)
 800863a:	f7f7 ff4d 	bl	80004d8 <__aeabi_dmul>
 800863e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008642:	9e04      	ldr	r6, [sp, #16]
 8008644:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8008648:	3501      	adds	r5, #1
 800864a:	4628      	mov	r0, r5
 800864c:	f7f7 feda 	bl	8000404 <__aeabi_i2d>
 8008650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008654:	f7f7 ff40 	bl	80004d8 <__aeabi_dmul>
 8008658:	2200      	movs	r2, #0
 800865a:	4b85      	ldr	r3, [pc, #532]	; (8008870 <_dtoa_r+0x618>)
 800865c:	f7f7 fd86 	bl	800016c <__adddf3>
 8008660:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008664:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008668:	950b      	str	r5, [sp, #44]	; 0x2c
 800866a:	2e00      	cmp	r6, #0
 800866c:	d15c      	bne.n	8008728 <_dtoa_r+0x4d0>
 800866e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	4b7f      	ldr	r3, [pc, #508]	; (8008874 <_dtoa_r+0x61c>)
 8008676:	f7f7 fd77 	bl	8000168 <__aeabi_dsub>
 800867a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867c:	462b      	mov	r3, r5
 800867e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008682:	f7f8 f9b9 	bl	80009f8 <__aeabi_dcmpgt>
 8008686:	2800      	cmp	r0, #0
 8008688:	f040 8281 	bne.w	8008b8e <_dtoa_r+0x936>
 800868c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008692:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008696:	f7f8 f991 	bl	80009bc <__aeabi_dcmplt>
 800869a:	2800      	cmp	r0, #0
 800869c:	f040 8275 	bne.w	8008b8a <_dtoa_r+0x932>
 80086a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f2c0 814b 	blt.w	8008946 <_dtoa_r+0x6ee>
 80086b0:	f1ba 0f0e 	cmp.w	sl, #14
 80086b4:	f300 8147 	bgt.w	8008946 <_dtoa_r+0x6ee>
 80086b8:	4b69      	ldr	r3, [pc, #420]	; (8008860 <_dtoa_r+0x608>)
 80086ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f280 80d7 	bge.w	800887c <_dtoa_r+0x624>
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	f300 80d3 	bgt.w	800887c <_dtoa_r+0x624>
 80086d6:	f040 8257 	bne.w	8008b88 <_dtoa_r+0x930>
 80086da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086de:	2200      	movs	r2, #0
 80086e0:	4b64      	ldr	r3, [pc, #400]	; (8008874 <_dtoa_r+0x61c>)
 80086e2:	f7f7 fef9 	bl	80004d8 <__aeabi_dmul>
 80086e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ea:	f7f8 f97b 	bl	80009e4 <__aeabi_dcmpge>
 80086ee:	4646      	mov	r6, r8
 80086f0:	4647      	mov	r7, r8
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f040 822d 	bne.w	8008b52 <_dtoa_r+0x8fa>
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	9a06      	ldr	r2, [sp, #24]
 80086fc:	1c5d      	adds	r5, r3, #1
 80086fe:	2331      	movs	r3, #49	; 0x31
 8008700:	f10a 0a01 	add.w	sl, sl, #1
 8008704:	7013      	strb	r3, [r2, #0]
 8008706:	e228      	b.n	8008b5a <_dtoa_r+0x902>
 8008708:	07f2      	lsls	r2, r6, #31
 800870a:	d505      	bpl.n	8008718 <_dtoa_r+0x4c0>
 800870c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008710:	f7f7 fee2 	bl	80004d8 <__aeabi_dmul>
 8008714:	2301      	movs	r3, #1
 8008716:	3501      	adds	r5, #1
 8008718:	1076      	asrs	r6, r6, #1
 800871a:	3708      	adds	r7, #8
 800871c:	e76e      	b.n	80085fc <_dtoa_r+0x3a4>
 800871e:	2502      	movs	r5, #2
 8008720:	e771      	b.n	8008606 <_dtoa_r+0x3ae>
 8008722:	4657      	mov	r7, sl
 8008724:	4646      	mov	r6, r8
 8008726:	e790      	b.n	800864a <_dtoa_r+0x3f2>
 8008728:	4b4d      	ldr	r3, [pc, #308]	; (8008860 <_dtoa_r+0x608>)
 800872a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800872e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d048      	beq.n	80087ca <_dtoa_r+0x572>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	2000      	movs	r0, #0
 800873e:	494e      	ldr	r1, [pc, #312]	; (8008878 <_dtoa_r+0x620>)
 8008740:	f7f7 fff4 	bl	800072c <__aeabi_ddiv>
 8008744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008748:	f7f7 fd0e 	bl	8000168 <__aeabi_dsub>
 800874c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008750:	9d06      	ldr	r5, [sp, #24]
 8008752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008756:	f7f8 f96f 	bl	8000a38 <__aeabi_d2iz>
 800875a:	9011      	str	r0, [sp, #68]	; 0x44
 800875c:	f7f7 fe52 	bl	8000404 <__aeabi_i2d>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008768:	f7f7 fcfe 	bl	8000168 <__aeabi_dsub>
 800876c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800876e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008772:	3330      	adds	r3, #48	; 0x30
 8008774:	f805 3b01 	strb.w	r3, [r5], #1
 8008778:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800877c:	f7f8 f91e 	bl	80009bc <__aeabi_dcmplt>
 8008780:	2800      	cmp	r0, #0
 8008782:	d163      	bne.n	800884c <_dtoa_r+0x5f4>
 8008784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008788:	2000      	movs	r0, #0
 800878a:	4937      	ldr	r1, [pc, #220]	; (8008868 <_dtoa_r+0x610>)
 800878c:	f7f7 fcec 	bl	8000168 <__aeabi_dsub>
 8008790:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008794:	f7f8 f912 	bl	80009bc <__aeabi_dcmplt>
 8008798:	2800      	cmp	r0, #0
 800879a:	f040 80b5 	bne.w	8008908 <_dtoa_r+0x6b0>
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	1aeb      	subs	r3, r5, r3
 80087a2:	429e      	cmp	r6, r3
 80087a4:	f77f af7c 	ble.w	80086a0 <_dtoa_r+0x448>
 80087a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087ac:	2200      	movs	r2, #0
 80087ae:	4b2f      	ldr	r3, [pc, #188]	; (800886c <_dtoa_r+0x614>)
 80087b0:	f7f7 fe92 	bl	80004d8 <__aeabi_dmul>
 80087b4:	2200      	movs	r2, #0
 80087b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087be:	4b2b      	ldr	r3, [pc, #172]	; (800886c <_dtoa_r+0x614>)
 80087c0:	f7f7 fe8a 	bl	80004d8 <__aeabi_dmul>
 80087c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c8:	e7c3      	b.n	8008752 <_dtoa_r+0x4fa>
 80087ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	9b06      	ldr	r3, [sp, #24]
 80087d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087d8:	199d      	adds	r5, r3, r6
 80087da:	461e      	mov	r6, r3
 80087dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e0:	f7f8 f92a 	bl	8000a38 <__aeabi_d2iz>
 80087e4:	9011      	str	r0, [sp, #68]	; 0x44
 80087e6:	f7f7 fe0d 	bl	8000404 <__aeabi_i2d>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f2:	f7f7 fcb9 	bl	8000168 <__aeabi_dsub>
 80087f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fc:	3330      	adds	r3, #48	; 0x30
 80087fe:	f806 3b01 	strb.w	r3, [r6], #1
 8008802:	42ae      	cmp	r6, r5
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	d124      	bne.n	8008854 <_dtoa_r+0x5fc>
 800880a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800880e:	4b1a      	ldr	r3, [pc, #104]	; (8008878 <_dtoa_r+0x620>)
 8008810:	f7f7 fcac 	bl	800016c <__adddf3>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881c:	f7f8 f8ec 	bl	80009f8 <__aeabi_dcmpgt>
 8008820:	2800      	cmp	r0, #0
 8008822:	d171      	bne.n	8008908 <_dtoa_r+0x6b0>
 8008824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008828:	2000      	movs	r0, #0
 800882a:	4913      	ldr	r1, [pc, #76]	; (8008878 <_dtoa_r+0x620>)
 800882c:	f7f7 fc9c 	bl	8000168 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008838:	f7f8 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800883c:	2800      	cmp	r0, #0
 800883e:	f43f af2f 	beq.w	80086a0 <_dtoa_r+0x448>
 8008842:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008846:	1e6a      	subs	r2, r5, #1
 8008848:	2b30      	cmp	r3, #48	; 0x30
 800884a:	d001      	beq.n	8008850 <_dtoa_r+0x5f8>
 800884c:	46ba      	mov	sl, r7
 800884e:	e04a      	b.n	80088e6 <_dtoa_r+0x68e>
 8008850:	4615      	mov	r5, r2
 8008852:	e7f6      	b.n	8008842 <_dtoa_r+0x5ea>
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <_dtoa_r+0x614>)
 8008856:	f7f7 fe3f 	bl	80004d8 <__aeabi_dmul>
 800885a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800885e:	e7bd      	b.n	80087dc <_dtoa_r+0x584>
 8008860:	0800b180 	.word	0x0800b180
 8008864:	0800b158 	.word	0x0800b158
 8008868:	3ff00000 	.word	0x3ff00000
 800886c:	40240000 	.word	0x40240000
 8008870:	401c0000 	.word	0x401c0000
 8008874:	40140000 	.word	0x40140000
 8008878:	3fe00000 	.word	0x3fe00000
 800887c:	9d06      	ldr	r5, [sp, #24]
 800887e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 ff4f 	bl	800072c <__aeabi_ddiv>
 800888e:	f7f8 f8d3 	bl	8000a38 <__aeabi_d2iz>
 8008892:	4681      	mov	r9, r0
 8008894:	f7f7 fdb6 	bl	8000404 <__aeabi_i2d>
 8008898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889c:	f7f7 fe1c 	bl	80004d8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f7 fc5e 	bl	8000168 <__aeabi_dsub>
 80088ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80088b0:	f805 6b01 	strb.w	r6, [r5], #1
 80088b4:	9e06      	ldr	r6, [sp, #24]
 80088b6:	4602      	mov	r2, r0
 80088b8:	1bae      	subs	r6, r5, r6
 80088ba:	45b0      	cmp	r8, r6
 80088bc:	460b      	mov	r3, r1
 80088be:	d135      	bne.n	800892c <_dtoa_r+0x6d4>
 80088c0:	f7f7 fc54 	bl	800016c <__adddf3>
 80088c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	f7f8 f894 	bl	80009f8 <__aeabi_dcmpgt>
 80088d0:	b9c8      	cbnz	r0, 8008906 <_dtoa_r+0x6ae>
 80088d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80088de:	b110      	cbz	r0, 80088e6 <_dtoa_r+0x68e>
 80088e0:	f019 0f01 	tst.w	r9, #1
 80088e4:	d10f      	bne.n	8008906 <_dtoa_r+0x6ae>
 80088e6:	4659      	mov	r1, fp
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 facc 	bl	8008e86 <_Bfree>
 80088ee:	2300      	movs	r3, #0
 80088f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088f2:	702b      	strb	r3, [r5, #0]
 80088f4:	f10a 0301 	add.w	r3, sl, #1
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f43f acf3 	beq.w	80082e8 <_dtoa_r+0x90>
 8008902:	601d      	str	r5, [r3, #0]
 8008904:	e4f0      	b.n	80082e8 <_dtoa_r+0x90>
 8008906:	4657      	mov	r7, sl
 8008908:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800890c:	1e6b      	subs	r3, r5, #1
 800890e:	2a39      	cmp	r2, #57	; 0x39
 8008910:	d106      	bne.n	8008920 <_dtoa_r+0x6c8>
 8008912:	9a06      	ldr	r2, [sp, #24]
 8008914:	429a      	cmp	r2, r3
 8008916:	d107      	bne.n	8008928 <_dtoa_r+0x6d0>
 8008918:	2330      	movs	r3, #48	; 0x30
 800891a:	7013      	strb	r3, [r2, #0]
 800891c:	4613      	mov	r3, r2
 800891e:	3701      	adds	r7, #1
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e791      	b.n	800884c <_dtoa_r+0x5f4>
 8008928:	461d      	mov	r5, r3
 800892a:	e7ed      	b.n	8008908 <_dtoa_r+0x6b0>
 800892c:	2200      	movs	r2, #0
 800892e:	4b99      	ldr	r3, [pc, #612]	; (8008b94 <_dtoa_r+0x93c>)
 8008930:	f7f7 fdd2 	bl	80004d8 <__aeabi_dmul>
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	4606      	mov	r6, r0
 800893a:	460f      	mov	r7, r1
 800893c:	f7f8 f834 	bl	80009a8 <__aeabi_dcmpeq>
 8008940:	2800      	cmp	r0, #0
 8008942:	d09e      	beq.n	8008882 <_dtoa_r+0x62a>
 8008944:	e7cf      	b.n	80088e6 <_dtoa_r+0x68e>
 8008946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008948:	2a00      	cmp	r2, #0
 800894a:	f000 8088 	beq.w	8008a5e <_dtoa_r+0x806>
 800894e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008950:	2a01      	cmp	r2, #1
 8008952:	dc6d      	bgt.n	8008a30 <_dtoa_r+0x7d8>
 8008954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008956:	2a00      	cmp	r2, #0
 8008958:	d066      	beq.n	8008a28 <_dtoa_r+0x7d0>
 800895a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800895e:	464d      	mov	r5, r9
 8008960:	9e08      	ldr	r6, [sp, #32]
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	2101      	movs	r1, #1
 8008966:	441a      	add	r2, r3
 8008968:	4620      	mov	r0, r4
 800896a:	4499      	add	r9, r3
 800896c:	9207      	str	r2, [sp, #28]
 800896e:	f000 fb2a 	bl	8008fc6 <__i2b>
 8008972:	4607      	mov	r7, r0
 8008974:	2d00      	cmp	r5, #0
 8008976:	dd0b      	ble.n	8008990 <_dtoa_r+0x738>
 8008978:	9b07      	ldr	r3, [sp, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd08      	ble.n	8008990 <_dtoa_r+0x738>
 800897e:	42ab      	cmp	r3, r5
 8008980:	bfa8      	it	ge
 8008982:	462b      	movge	r3, r5
 8008984:	9a07      	ldr	r2, [sp, #28]
 8008986:	eba9 0903 	sub.w	r9, r9, r3
 800898a:	1aed      	subs	r5, r5, r3
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	9307      	str	r3, [sp, #28]
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	b1eb      	cbz	r3, 80089d0 <_dtoa_r+0x778>
 8008994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d065      	beq.n	8008a66 <_dtoa_r+0x80e>
 800899a:	b18e      	cbz	r6, 80089c0 <_dtoa_r+0x768>
 800899c:	4639      	mov	r1, r7
 800899e:	4632      	mov	r2, r6
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fbaf 	bl	8009104 <__pow5mult>
 80089a6:	465a      	mov	r2, fp
 80089a8:	4601      	mov	r1, r0
 80089aa:	4607      	mov	r7, r0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fb13 	bl	8008fd8 <__multiply>
 80089b2:	4659      	mov	r1, fp
 80089b4:	900a      	str	r0, [sp, #40]	; 0x28
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fa65 	bl	8008e86 <_Bfree>
 80089bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089be:	469b      	mov	fp, r3
 80089c0:	9b08      	ldr	r3, [sp, #32]
 80089c2:	1b9a      	subs	r2, r3, r6
 80089c4:	d004      	beq.n	80089d0 <_dtoa_r+0x778>
 80089c6:	4659      	mov	r1, fp
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fb9b 	bl	8009104 <__pow5mult>
 80089ce:	4683      	mov	fp, r0
 80089d0:	2101      	movs	r1, #1
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 faf7 	bl	8008fc6 <__i2b>
 80089d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089da:	4606      	mov	r6, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 81c6 	beq.w	8008d6e <_dtoa_r+0xb16>
 80089e2:	461a      	mov	r2, r3
 80089e4:	4601      	mov	r1, r0
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fb8c 	bl	8009104 <__pow5mult>
 80089ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089ee:	4606      	mov	r6, r0
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	dc3e      	bgt.n	8008a72 <_dtoa_r+0x81a>
 80089f4:	9b02      	ldr	r3, [sp, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d137      	bne.n	8008a6a <_dtoa_r+0x812>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d134      	bne.n	8008a6e <_dtoa_r+0x816>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a0a:	0d1b      	lsrs	r3, r3, #20
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	b12b      	cbz	r3, 8008a1c <_dtoa_r+0x7c4>
 8008a10:	9b07      	ldr	r3, [sp, #28]
 8008a12:	f109 0901 	add.w	r9, r9, #1
 8008a16:	3301      	adds	r3, #1
 8008a18:	9307      	str	r3, [sp, #28]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	9308      	str	r3, [sp, #32]
 8008a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d128      	bne.n	8008a76 <_dtoa_r+0x81e>
 8008a24:	2001      	movs	r0, #1
 8008a26:	e02e      	b.n	8008a86 <_dtoa_r+0x82e>
 8008a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a2e:	e796      	b.n	800895e <_dtoa_r+0x706>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8008a36:	42b3      	cmp	r3, r6
 8008a38:	bfb7      	itett	lt
 8008a3a:	9b08      	ldrlt	r3, [sp, #32]
 8008a3c:	1b9e      	subge	r6, r3, r6
 8008a3e:	1af2      	sublt	r2, r6, r3
 8008a40:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008a42:	bfbf      	itttt	lt
 8008a44:	9608      	strlt	r6, [sp, #32]
 8008a46:	189b      	addlt	r3, r3, r2
 8008a48:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008a4a:	2600      	movlt	r6, #0
 8008a4c:	f1b8 0f00 	cmp.w	r8, #0
 8008a50:	bfb9      	ittee	lt
 8008a52:	eba9 0508 	sublt.w	r5, r9, r8
 8008a56:	2300      	movlt	r3, #0
 8008a58:	464d      	movge	r5, r9
 8008a5a:	4643      	movge	r3, r8
 8008a5c:	e781      	b.n	8008962 <_dtoa_r+0x70a>
 8008a5e:	9e08      	ldr	r6, [sp, #32]
 8008a60:	464d      	mov	r5, r9
 8008a62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a64:	e786      	b.n	8008974 <_dtoa_r+0x71c>
 8008a66:	9a08      	ldr	r2, [sp, #32]
 8008a68:	e7ad      	b.n	80089c6 <_dtoa_r+0x76e>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e7d6      	b.n	8008a1c <_dtoa_r+0x7c4>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	e7d4      	b.n	8008a1c <_dtoa_r+0x7c4>
 8008a72:	2300      	movs	r3, #0
 8008a74:	9308      	str	r3, [sp, #32]
 8008a76:	6933      	ldr	r3, [r6, #16]
 8008a78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a7c:	6918      	ldr	r0, [r3, #16]
 8008a7e:	f000 fa54 	bl	8008f2a <__hi0bits>
 8008a82:	f1c0 0020 	rsb	r0, r0, #32
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	4418      	add	r0, r3
 8008a8a:	f010 001f 	ands.w	r0, r0, #31
 8008a8e:	d047      	beq.n	8008b20 <_dtoa_r+0x8c8>
 8008a90:	f1c0 0320 	rsb	r3, r0, #32
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	dd3b      	ble.n	8008b10 <_dtoa_r+0x8b8>
 8008a98:	9b07      	ldr	r3, [sp, #28]
 8008a9a:	f1c0 001c 	rsb	r0, r0, #28
 8008a9e:	4481      	add	r9, r0
 8008aa0:	4405      	add	r5, r0
 8008aa2:	4403      	add	r3, r0
 8008aa4:	9307      	str	r3, [sp, #28]
 8008aa6:	f1b9 0f00 	cmp.w	r9, #0
 8008aaa:	dd05      	ble.n	8008ab8 <_dtoa_r+0x860>
 8008aac:	4659      	mov	r1, fp
 8008aae:	464a      	mov	r2, r9
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fb75 	bl	80091a0 <__lshift>
 8008ab6:	4683      	mov	fp, r0
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dd05      	ble.n	8008aca <_dtoa_r+0x872>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fb6c 	bl	80091a0 <__lshift>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008acc:	b353      	cbz	r3, 8008b24 <_dtoa_r+0x8cc>
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	f000 fbb9 	bl	8009248 <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	da24      	bge.n	8008b24 <_dtoa_r+0x8cc>
 8008ada:	2300      	movs	r3, #0
 8008adc:	4659      	mov	r1, fp
 8008ade:	220a      	movs	r2, #10
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 f9e7 	bl	8008eb4 <__multadd>
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008aec:	4683      	mov	fp, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 8144 	beq.w	8008d7c <_dtoa_r+0xb24>
 8008af4:	2300      	movs	r3, #0
 8008af6:	4639      	mov	r1, r7
 8008af8:	220a      	movs	r2, #10
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 f9da 	bl	8008eb4 <__multadd>
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	4607      	mov	r7, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dc4d      	bgt.n	8008ba4 <_dtoa_r+0x94c>
 8008b08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	dd4a      	ble.n	8008ba4 <_dtoa_r+0x94c>
 8008b0e:	e011      	b.n	8008b34 <_dtoa_r+0x8dc>
 8008b10:	d0c9      	beq.n	8008aa6 <_dtoa_r+0x84e>
 8008b12:	9a07      	ldr	r2, [sp, #28]
 8008b14:	331c      	adds	r3, #28
 8008b16:	441a      	add	r2, r3
 8008b18:	4499      	add	r9, r3
 8008b1a:	441d      	add	r5, r3
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	e7c1      	b.n	8008aa4 <_dtoa_r+0x84c>
 8008b20:	4603      	mov	r3, r0
 8008b22:	e7f6      	b.n	8008b12 <_dtoa_r+0x8ba>
 8008b24:	f1b8 0f00 	cmp.w	r8, #0
 8008b28:	dc36      	bgt.n	8008b98 <_dtoa_r+0x940>
 8008b2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	dd33      	ble.n	8008b98 <_dtoa_r+0x940>
 8008b30:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b34:	9b04      	ldr	r3, [sp, #16]
 8008b36:	b963      	cbnz	r3, 8008b52 <_dtoa_r+0x8fa>
 8008b38:	4631      	mov	r1, r6
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 f9b9 	bl	8008eb4 <__multadd>
 8008b42:	4601      	mov	r1, r0
 8008b44:	4606      	mov	r6, r0
 8008b46:	4658      	mov	r0, fp
 8008b48:	f000 fb7e 	bl	8009248 <__mcmp>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f73f add3 	bgt.w	80086f8 <_dtoa_r+0x4a0>
 8008b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b54:	9d06      	ldr	r5, [sp, #24]
 8008b56:	ea6f 0a03 	mvn.w	sl, r3
 8008b5a:	f04f 0900 	mov.w	r9, #0
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 f990 	bl	8008e86 <_Bfree>
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	f43f aebd 	beq.w	80088e6 <_dtoa_r+0x68e>
 8008b6c:	f1b9 0f00 	cmp.w	r9, #0
 8008b70:	d005      	beq.n	8008b7e <_dtoa_r+0x926>
 8008b72:	45b9      	cmp	r9, r7
 8008b74:	d003      	beq.n	8008b7e <_dtoa_r+0x926>
 8008b76:	4649      	mov	r1, r9
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 f984 	bl	8008e86 <_Bfree>
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f980 	bl	8008e86 <_Bfree>
 8008b86:	e6ae      	b.n	80088e6 <_dtoa_r+0x68e>
 8008b88:	2600      	movs	r6, #0
 8008b8a:	4637      	mov	r7, r6
 8008b8c:	e7e1      	b.n	8008b52 <_dtoa_r+0x8fa>
 8008b8e:	46ba      	mov	sl, r7
 8008b90:	4637      	mov	r7, r6
 8008b92:	e5b1      	b.n	80086f8 <_dtoa_r+0x4a0>
 8008b94:	40240000 	.word	0x40240000
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80f3 	beq.w	8008d8a <_dtoa_r+0xb32>
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	dd05      	ble.n	8008bb4 <_dtoa_r+0x95c>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	462a      	mov	r2, r5
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 faf7 	bl	80091a0 <__lshift>
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	9b08      	ldr	r3, [sp, #32]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d04c      	beq.n	8008c54 <_dtoa_r+0x9fc>
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f92e 	bl	8008e1e <_Balloc>
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	f107 010c 	add.w	r1, r7, #12
 8008bca:	3202      	adds	r2, #2
 8008bcc:	0092      	lsls	r2, r2, #2
 8008bce:	300c      	adds	r0, #12
 8008bd0:	f000 f91a 	bl	8008e08 <memcpy>
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fae1 	bl	80091a0 <__lshift>
 8008bde:	46b9      	mov	r9, r7
 8008be0:	4607      	mov	r7, r0
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	9307      	str	r3, [sp, #28]
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	9308      	str	r3, [sp, #32]
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4658      	mov	r0, fp
 8008bf2:	f7ff faa1 	bl	8008138 <quorem>
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008bfe:	4658      	mov	r0, fp
 8008c00:	f000 fb22 	bl	8009248 <__mcmp>
 8008c04:	463a      	mov	r2, r7
 8008c06:	9002      	str	r0, [sp, #8]
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 fb36 	bl	800927c <__mdiff>
 8008c10:	68c3      	ldr	r3, [r0, #12]
 8008c12:	4602      	mov	r2, r0
 8008c14:	bb03      	cbnz	r3, 8008c58 <_dtoa_r+0xa00>
 8008c16:	4601      	mov	r1, r0
 8008c18:	9009      	str	r0, [sp, #36]	; 0x24
 8008c1a:	4658      	mov	r0, fp
 8008c1c:	f000 fb14 	bl	8009248 <__mcmp>
 8008c20:	4603      	mov	r3, r0
 8008c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c24:	4611      	mov	r1, r2
 8008c26:	4620      	mov	r0, r4
 8008c28:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2a:	f000 f92c 	bl	8008e86 <_Bfree>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	b9a3      	cbnz	r3, 8008c5c <_dtoa_r+0xa04>
 8008c32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c34:	b992      	cbnz	r2, 8008c5c <_dtoa_r+0xa04>
 8008c36:	9a08      	ldr	r2, [sp, #32]
 8008c38:	b982      	cbnz	r2, 8008c5c <_dtoa_r+0xa04>
 8008c3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c3e:	d029      	beq.n	8008c94 <_dtoa_r+0xa3c>
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd01      	ble.n	8008c4a <_dtoa_r+0x9f2>
 8008c46:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	1c5d      	adds	r5, r3, #1
 8008c4e:	f883 8000 	strb.w	r8, [r3]
 8008c52:	e784      	b.n	8008b5e <_dtoa_r+0x906>
 8008c54:	4638      	mov	r0, r7
 8008c56:	e7c2      	b.n	8008bde <_dtoa_r+0x986>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e7e3      	b.n	8008c24 <_dtoa_r+0x9cc>
 8008c5c:	9a02      	ldr	r2, [sp, #8]
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	db04      	blt.n	8008c6c <_dtoa_r+0xa14>
 8008c62:	d123      	bne.n	8008cac <_dtoa_r+0xa54>
 8008c64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c66:	bb0a      	cbnz	r2, 8008cac <_dtoa_r+0xa54>
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	b9fa      	cbnz	r2, 8008cac <_dtoa_r+0xa54>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	ddec      	ble.n	8008c4a <_dtoa_r+0x9f2>
 8008c70:	4659      	mov	r1, fp
 8008c72:	2201      	movs	r2, #1
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fa93 	bl	80091a0 <__lshift>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4683      	mov	fp, r0
 8008c7e:	f000 fae3 	bl	8009248 <__mcmp>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	dc03      	bgt.n	8008c8e <_dtoa_r+0xa36>
 8008c86:	d1e0      	bne.n	8008c4a <_dtoa_r+0x9f2>
 8008c88:	f018 0f01 	tst.w	r8, #1
 8008c8c:	d0dd      	beq.n	8008c4a <_dtoa_r+0x9f2>
 8008c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c92:	d1d8      	bne.n	8008c46 <_dtoa_r+0x9ee>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	9a07      	ldr	r2, [sp, #28]
 8008c98:	1c5d      	adds	r5, r3, #1
 8008c9a:	2339      	movs	r3, #57	; 0x39
 8008c9c:	7013      	strb	r3, [r2, #0]
 8008c9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ca2:	1e6a      	subs	r2, r5, #1
 8008ca4:	2b39      	cmp	r3, #57	; 0x39
 8008ca6:	d04d      	beq.n	8008d44 <_dtoa_r+0xaec>
 8008ca8:	3301      	adds	r3, #1
 8008caa:	e052      	b.n	8008d52 <_dtoa_r+0xafa>
 8008cac:	9a07      	ldr	r2, [sp, #28]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f102 0501 	add.w	r5, r2, #1
 8008cb4:	dd06      	ble.n	8008cc4 <_dtoa_r+0xa6c>
 8008cb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cba:	d0eb      	beq.n	8008c94 <_dtoa_r+0xa3c>
 8008cbc:	f108 0801 	add.w	r8, r8, #1
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	e7c4      	b.n	8008c4e <_dtoa_r+0x9f6>
 8008cc4:	9b06      	ldr	r3, [sp, #24]
 8008cc6:	9a04      	ldr	r2, [sp, #16]
 8008cc8:	1aeb      	subs	r3, r5, r3
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008cd0:	d021      	beq.n	8008d16 <_dtoa_r+0xabe>
 8008cd2:	4659      	mov	r1, fp
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	220a      	movs	r2, #10
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 f8eb 	bl	8008eb4 <__multadd>
 8008cde:	45b9      	cmp	r9, r7
 8008ce0:	4683      	mov	fp, r0
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	f04f 020a 	mov.w	r2, #10
 8008cea:	4649      	mov	r1, r9
 8008cec:	4620      	mov	r0, r4
 8008cee:	d105      	bne.n	8008cfc <_dtoa_r+0xaa4>
 8008cf0:	f000 f8e0 	bl	8008eb4 <__multadd>
 8008cf4:	4681      	mov	r9, r0
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	9507      	str	r5, [sp, #28]
 8008cfa:	e778      	b.n	8008bee <_dtoa_r+0x996>
 8008cfc:	f000 f8da 	bl	8008eb4 <__multadd>
 8008d00:	4639      	mov	r1, r7
 8008d02:	4681      	mov	r9, r0
 8008d04:	2300      	movs	r3, #0
 8008d06:	220a      	movs	r2, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f8d3 	bl	8008eb4 <__multadd>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	e7f2      	b.n	8008cf8 <_dtoa_r+0xaa0>
 8008d12:	f04f 0900 	mov.w	r9, #0
 8008d16:	4659      	mov	r1, fp
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fa40 	bl	80091a0 <__lshift>
 8008d20:	4631      	mov	r1, r6
 8008d22:	4683      	mov	fp, r0
 8008d24:	f000 fa90 	bl	8009248 <__mcmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	dcb8      	bgt.n	8008c9e <_dtoa_r+0xa46>
 8008d2c:	d102      	bne.n	8008d34 <_dtoa_r+0xadc>
 8008d2e:	f018 0f01 	tst.w	r8, #1
 8008d32:	d1b4      	bne.n	8008c9e <_dtoa_r+0xa46>
 8008d34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d38:	1e6a      	subs	r2, r5, #1
 8008d3a:	2b30      	cmp	r3, #48	; 0x30
 8008d3c:	f47f af0f 	bne.w	8008b5e <_dtoa_r+0x906>
 8008d40:	4615      	mov	r5, r2
 8008d42:	e7f7      	b.n	8008d34 <_dtoa_r+0xadc>
 8008d44:	9b06      	ldr	r3, [sp, #24]
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d105      	bne.n	8008d56 <_dtoa_r+0xafe>
 8008d4a:	2331      	movs	r3, #49	; 0x31
 8008d4c:	9a06      	ldr	r2, [sp, #24]
 8008d4e:	f10a 0a01 	add.w	sl, sl, #1
 8008d52:	7013      	strb	r3, [r2, #0]
 8008d54:	e703      	b.n	8008b5e <_dtoa_r+0x906>
 8008d56:	4615      	mov	r5, r2
 8008d58:	e7a1      	b.n	8008c9e <_dtoa_r+0xa46>
 8008d5a:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <_dtoa_r+0xb60>)
 8008d5c:	f7ff bae1 	b.w	8008322 <_dtoa_r+0xca>
 8008d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f47f aabb 	bne.w	80082de <_dtoa_r+0x86>
 8008d68:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <_dtoa_r+0xb64>)
 8008d6a:	f7ff bada 	b.w	8008322 <_dtoa_r+0xca>
 8008d6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f77f ae3f 	ble.w	80089f4 <_dtoa_r+0x79c>
 8008d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d78:	9308      	str	r3, [sp, #32]
 8008d7a:	e653      	b.n	8008a24 <_dtoa_r+0x7cc>
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dc03      	bgt.n	8008d8a <_dtoa_r+0xb32>
 8008d82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	f73f aed5 	bgt.w	8008b34 <_dtoa_r+0x8dc>
 8008d8a:	9d06      	ldr	r5, [sp, #24]
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f7ff f9d2 	bl	8008138 <quorem>
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d9a:	f805 8b01 	strb.w	r8, [r5], #1
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	1aeb      	subs	r3, r5, r3
 8008da2:	429a      	cmp	r2, r3
 8008da4:	ddb5      	ble.n	8008d12 <_dtoa_r+0xaba>
 8008da6:	4659      	mov	r1, fp
 8008da8:	2300      	movs	r3, #0
 8008daa:	220a      	movs	r2, #10
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 f881 	bl	8008eb4 <__multadd>
 8008db2:	4683      	mov	fp, r0
 8008db4:	e7ea      	b.n	8008d8c <_dtoa_r+0xb34>
 8008db6:	bf00      	nop
 8008db8:	0800b124 	.word	0x0800b124
 8008dbc:	0800b148 	.word	0x0800b148

08008dc0 <_localeconv_r>:
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <_localeconv_r+0x14>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6a18      	ldr	r0, [r3, #32]
 8008dc6:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <_localeconv_r+0x18>)
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	bf08      	it	eq
 8008dcc:	4618      	moveq	r0, r3
 8008dce:	30f0      	adds	r0, #240	; 0xf0
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000038 	.word	0x20000038
 8008dd8:	2000009c 	.word	0x2000009c

08008ddc <malloc>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <malloc+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f000 bb53 	b.w	800948c <_malloc_r>
 8008de6:	bf00      	nop
 8008de8:	20000038 	.word	0x20000038

08008dec <memchr>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	b2c9      	uxtb	r1, r1
 8008df0:	4402      	add	r2, r0
 8008df2:	4290      	cmp	r0, r2
 8008df4:	4603      	mov	r3, r0
 8008df6:	d101      	bne.n	8008dfc <memchr+0x10>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e003      	b.n	8008e04 <memchr+0x18>
 8008dfc:	781c      	ldrb	r4, [r3, #0]
 8008dfe:	3001      	adds	r0, #1
 8008e00:	428c      	cmp	r4, r1
 8008e02:	d1f6      	bne.n	8008df2 <memchr+0x6>
 8008e04:	4618      	mov	r0, r3
 8008e06:	bd10      	pop	{r4, pc}

08008e08 <memcpy>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	1e43      	subs	r3, r0, #1
 8008e0c:	440a      	add	r2, r1
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	d100      	bne.n	8008e14 <memcpy+0xc>
 8008e12:	bd10      	pop	{r4, pc}
 8008e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1c:	e7f7      	b.n	8008e0e <memcpy+0x6>

08008e1e <_Balloc>:
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e22:	4604      	mov	r4, r0
 8008e24:	460e      	mov	r6, r1
 8008e26:	b93d      	cbnz	r5, 8008e38 <_Balloc+0x1a>
 8008e28:	2010      	movs	r0, #16
 8008e2a:	f7ff ffd7 	bl	8008ddc <malloc>
 8008e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e34:	6005      	str	r5, [r0, #0]
 8008e36:	60c5      	str	r5, [r0, #12]
 8008e38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e3a:	68eb      	ldr	r3, [r5, #12]
 8008e3c:	b183      	cbz	r3, 8008e60 <_Balloc+0x42>
 8008e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e46:	b9b8      	cbnz	r0, 8008e78 <_Balloc+0x5a>
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f506 	lsl.w	r5, r1, r6
 8008e4e:	1d6a      	adds	r2, r5, #5
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fabf 	bl	80093d6 <_calloc_r>
 8008e58:	b160      	cbz	r0, 8008e74 <_Balloc+0x56>
 8008e5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008e5e:	e00e      	b.n	8008e7e <_Balloc+0x60>
 8008e60:	2221      	movs	r2, #33	; 0x21
 8008e62:	2104      	movs	r1, #4
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fab6 	bl	80093d6 <_calloc_r>
 8008e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6c:	60e8      	str	r0, [r5, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <_Balloc+0x20>
 8008e74:	2000      	movs	r0, #0
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	6802      	ldr	r2, [r0, #0]
 8008e7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e84:	e7f7      	b.n	8008e76 <_Balloc+0x58>

08008e86 <_Bfree>:
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	b93c      	cbnz	r4, 8008ea0 <_Bfree+0x1a>
 8008e90:	2010      	movs	r0, #16
 8008e92:	f7ff ffa3 	bl	8008ddc <malloc>
 8008e96:	6270      	str	r0, [r6, #36]	; 0x24
 8008e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e9c:	6004      	str	r4, [r0, #0]
 8008e9e:	60c4      	str	r4, [r0, #12]
 8008ea0:	b13d      	cbz	r5, 8008eb2 <_Bfree+0x2c>
 8008ea2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ea4:	686a      	ldr	r2, [r5, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eac:	6029      	str	r1, [r5, #0]
 8008eae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}

08008eb4 <__multadd>:
 8008eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb8:	461f      	mov	r7, r3
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	690d      	ldr	r5, [r1, #16]
 8008ec2:	f101 0c14 	add.w	ip, r1, #20
 8008ec6:	f8dc 0000 	ldr.w	r0, [ip]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	b281      	uxth	r1, r0
 8008ece:	fb02 7101 	mla	r1, r2, r1, r7
 8008ed2:	0c00      	lsrs	r0, r0, #16
 8008ed4:	0c0f      	lsrs	r7, r1, #16
 8008ed6:	fb02 7000 	mla	r0, r2, r0, r7
 8008eda:	b289      	uxth	r1, r1
 8008edc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008ee6:	f84c 1b04 	str.w	r1, [ip], #4
 8008eea:	dcec      	bgt.n	8008ec6 <__multadd+0x12>
 8008eec:	b1d7      	cbz	r7, 8008f24 <__multadd+0x70>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc12      	bgt.n	8008f1a <__multadd+0x66>
 8008ef4:	6861      	ldr	r1, [r4, #4]
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	3101      	adds	r1, #1
 8008efa:	f7ff ff90 	bl	8008e1e <_Balloc>
 8008efe:	4680      	mov	r8, r0
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	f104 010c 	add.w	r1, r4, #12
 8008f06:	3202      	adds	r2, #2
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	300c      	adds	r0, #12
 8008f0c:	f7ff ff7c 	bl	8008e08 <memcpy>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ffb7 	bl	8008e86 <_Bfree>
 8008f18:	4644      	mov	r4, r8
 8008f1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f1e:	3501      	adds	r5, #1
 8008f20:	615f      	str	r7, [r3, #20]
 8008f22:	6125      	str	r5, [r4, #16]
 8008f24:	4620      	mov	r0, r4
 8008f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f2a <__hi0bits>:
 8008f2a:	0c02      	lsrs	r2, r0, #16
 8008f2c:	0412      	lsls	r2, r2, #16
 8008f2e:	4603      	mov	r3, r0
 8008f30:	b9b2      	cbnz	r2, 8008f60 <__hi0bits+0x36>
 8008f32:	0403      	lsls	r3, r0, #16
 8008f34:	2010      	movs	r0, #16
 8008f36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f3a:	bf04      	itt	eq
 8008f3c:	021b      	lsleq	r3, r3, #8
 8008f3e:	3008      	addeq	r0, #8
 8008f40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f44:	bf04      	itt	eq
 8008f46:	011b      	lsleq	r3, r3, #4
 8008f48:	3004      	addeq	r0, #4
 8008f4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f4e:	bf04      	itt	eq
 8008f50:	009b      	lsleq	r3, r3, #2
 8008f52:	3002      	addeq	r0, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db06      	blt.n	8008f66 <__hi0bits+0x3c>
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	d503      	bpl.n	8008f64 <__hi0bits+0x3a>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	4770      	bx	lr
 8008f60:	2000      	movs	r0, #0
 8008f62:	e7e8      	b.n	8008f36 <__hi0bits+0xc>
 8008f64:	2020      	movs	r0, #32
 8008f66:	4770      	bx	lr

08008f68 <__lo0bits>:
 8008f68:	6803      	ldr	r3, [r0, #0]
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	f013 0207 	ands.w	r2, r3, #7
 8008f70:	d00b      	beq.n	8008f8a <__lo0bits+0x22>
 8008f72:	07da      	lsls	r2, r3, #31
 8008f74:	d423      	bmi.n	8008fbe <__lo0bits+0x56>
 8008f76:	0798      	lsls	r0, r3, #30
 8008f78:	bf49      	itett	mi
 8008f7a:	085b      	lsrmi	r3, r3, #1
 8008f7c:	089b      	lsrpl	r3, r3, #2
 8008f7e:	2001      	movmi	r0, #1
 8008f80:	600b      	strmi	r3, [r1, #0]
 8008f82:	bf5c      	itt	pl
 8008f84:	600b      	strpl	r3, [r1, #0]
 8008f86:	2002      	movpl	r0, #2
 8008f88:	4770      	bx	lr
 8008f8a:	b298      	uxth	r0, r3
 8008f8c:	b9a8      	cbnz	r0, 8008fba <__lo0bits+0x52>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	0c1b      	lsrs	r3, r3, #16
 8008f92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f96:	bf04      	itt	eq
 8008f98:	0a1b      	lsreq	r3, r3, #8
 8008f9a:	3008      	addeq	r0, #8
 8008f9c:	071a      	lsls	r2, r3, #28
 8008f9e:	bf04      	itt	eq
 8008fa0:	091b      	lsreq	r3, r3, #4
 8008fa2:	3004      	addeq	r0, #4
 8008fa4:	079a      	lsls	r2, r3, #30
 8008fa6:	bf04      	itt	eq
 8008fa8:	089b      	lsreq	r3, r3, #2
 8008faa:	3002      	addeq	r0, #2
 8008fac:	07da      	lsls	r2, r3, #31
 8008fae:	d402      	bmi.n	8008fb6 <__lo0bits+0x4e>
 8008fb0:	085b      	lsrs	r3, r3, #1
 8008fb2:	d006      	beq.n	8008fc2 <__lo0bits+0x5a>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	600b      	str	r3, [r1, #0]
 8008fb8:	4770      	bx	lr
 8008fba:	4610      	mov	r0, r2
 8008fbc:	e7e9      	b.n	8008f92 <__lo0bits+0x2a>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4770      	bx	lr
 8008fc2:	2020      	movs	r0, #32
 8008fc4:	4770      	bx	lr

08008fc6 <__i2b>:
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	460c      	mov	r4, r1
 8008fca:	2101      	movs	r1, #1
 8008fcc:	f7ff ff27 	bl	8008e1e <_Balloc>
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	6144      	str	r4, [r0, #20]
 8008fd4:	6102      	str	r2, [r0, #16]
 8008fd6:	bd10      	pop	{r4, pc}

08008fd8 <__multiply>:
 8008fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4614      	mov	r4, r2
 8008fde:	690a      	ldr	r2, [r1, #16]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	4688      	mov	r8, r1
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	bfbe      	ittt	lt
 8008fe8:	460b      	movlt	r3, r1
 8008fea:	46a0      	movlt	r8, r4
 8008fec:	461c      	movlt	r4, r3
 8008fee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ff2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ffa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ffe:	eb07 0609 	add.w	r6, r7, r9
 8009002:	42b3      	cmp	r3, r6
 8009004:	bfb8      	it	lt
 8009006:	3101      	addlt	r1, #1
 8009008:	f7ff ff09 	bl	8008e1e <_Balloc>
 800900c:	f100 0514 	add.w	r5, r0, #20
 8009010:	462b      	mov	r3, r5
 8009012:	2200      	movs	r2, #0
 8009014:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009018:	4573      	cmp	r3, lr
 800901a:	d316      	bcc.n	800904a <__multiply+0x72>
 800901c:	f104 0214 	add.w	r2, r4, #20
 8009020:	f108 0114 	add.w	r1, r8, #20
 8009024:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009028:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	9b00      	ldr	r3, [sp, #0]
 8009030:	9201      	str	r2, [sp, #4]
 8009032:	4293      	cmp	r3, r2
 8009034:	d80c      	bhi.n	8009050 <__multiply+0x78>
 8009036:	2e00      	cmp	r6, #0
 8009038:	dd03      	ble.n	8009042 <__multiply+0x6a>
 800903a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800903e:	2b00      	cmp	r3, #0
 8009040:	d05d      	beq.n	80090fe <__multiply+0x126>
 8009042:	6106      	str	r6, [r0, #16]
 8009044:	b003      	add	sp, #12
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	f843 2b04 	str.w	r2, [r3], #4
 800904e:	e7e3      	b.n	8009018 <__multiply+0x40>
 8009050:	f8b2 b000 	ldrh.w	fp, [r2]
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	d023      	beq.n	80090a2 <__multiply+0xca>
 800905a:	4689      	mov	r9, r1
 800905c:	46ac      	mov	ip, r5
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	f859 4b04 	ldr.w	r4, [r9], #4
 8009066:	f8dc a000 	ldr.w	sl, [ip]
 800906a:	b2a3      	uxth	r3, r4
 800906c:	fa1f fa8a 	uxth.w	sl, sl
 8009070:	fb0b a303 	mla	r3, fp, r3, sl
 8009074:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009078:	f8dc 4000 	ldr.w	r4, [ip]
 800907c:	4443      	add	r3, r8
 800907e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009082:	fb0b 840a 	mla	r4, fp, sl, r8
 8009086:	46e2      	mov	sl, ip
 8009088:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800908c:	b29b      	uxth	r3, r3
 800908e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009092:	454f      	cmp	r7, r9
 8009094:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009098:	f84a 3b04 	str.w	r3, [sl], #4
 800909c:	d82b      	bhi.n	80090f6 <__multiply+0x11e>
 800909e:	f8cc 8004 	str.w	r8, [ip, #4]
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	3204      	adds	r2, #4
 80090a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80090aa:	f1ba 0f00 	cmp.w	sl, #0
 80090ae:	d020      	beq.n	80090f2 <__multiply+0x11a>
 80090b0:	4689      	mov	r9, r1
 80090b2:	46a8      	mov	r8, r5
 80090b4:	f04f 0b00 	mov.w	fp, #0
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	f8b9 c000 	ldrh.w	ip, [r9]
 80090be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80090c8:	46c4      	mov	ip, r8
 80090ca:	445c      	add	r4, fp
 80090cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80090d0:	f84c 3b04 	str.w	r3, [ip], #4
 80090d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80090d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	fb0a b303 	mla	r3, sl, r3, fp
 80090e2:	454f      	cmp	r7, r9
 80090e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80090e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80090ec:	d805      	bhi.n	80090fa <__multiply+0x122>
 80090ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80090f2:	3504      	adds	r5, #4
 80090f4:	e79b      	b.n	800902e <__multiply+0x56>
 80090f6:	46d4      	mov	ip, sl
 80090f8:	e7b3      	b.n	8009062 <__multiply+0x8a>
 80090fa:	46e0      	mov	r8, ip
 80090fc:	e7dd      	b.n	80090ba <__multiply+0xe2>
 80090fe:	3e01      	subs	r6, #1
 8009100:	e799      	b.n	8009036 <__multiply+0x5e>
	...

08009104 <__pow5mult>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	4615      	mov	r5, r2
 800910a:	f012 0203 	ands.w	r2, r2, #3
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	d007      	beq.n	8009124 <__pow5mult+0x20>
 8009114:	4c21      	ldr	r4, [pc, #132]	; (800919c <__pow5mult+0x98>)
 8009116:	3a01      	subs	r2, #1
 8009118:	2300      	movs	r3, #0
 800911a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800911e:	f7ff fec9 	bl	8008eb4 <__multadd>
 8009122:	4607      	mov	r7, r0
 8009124:	10ad      	asrs	r5, r5, #2
 8009126:	d035      	beq.n	8009194 <__pow5mult+0x90>
 8009128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800912a:	b93c      	cbnz	r4, 800913c <__pow5mult+0x38>
 800912c:	2010      	movs	r0, #16
 800912e:	f7ff fe55 	bl	8008ddc <malloc>
 8009132:	6270      	str	r0, [r6, #36]	; 0x24
 8009134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009138:	6004      	str	r4, [r0, #0]
 800913a:	60c4      	str	r4, [r0, #12]
 800913c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009144:	b94c      	cbnz	r4, 800915a <__pow5mult+0x56>
 8009146:	f240 2171 	movw	r1, #625	; 0x271
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ff3b 	bl	8008fc6 <__i2b>
 8009150:	2300      	movs	r3, #0
 8009152:	4604      	mov	r4, r0
 8009154:	f8c8 0008 	str.w	r0, [r8, #8]
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	f04f 0800 	mov.w	r8, #0
 800915e:	07eb      	lsls	r3, r5, #31
 8009160:	d50a      	bpl.n	8009178 <__pow5mult+0x74>
 8009162:	4639      	mov	r1, r7
 8009164:	4622      	mov	r2, r4
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ff36 	bl	8008fd8 <__multiply>
 800916c:	4681      	mov	r9, r0
 800916e:	4639      	mov	r1, r7
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff fe88 	bl	8008e86 <_Bfree>
 8009176:	464f      	mov	r7, r9
 8009178:	106d      	asrs	r5, r5, #1
 800917a:	d00b      	beq.n	8009194 <__pow5mult+0x90>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	b938      	cbnz	r0, 8009190 <__pow5mult+0x8c>
 8009180:	4622      	mov	r2, r4
 8009182:	4621      	mov	r1, r4
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff ff27 	bl	8008fd8 <__multiply>
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	f8c0 8000 	str.w	r8, [r0]
 8009190:	4604      	mov	r4, r0
 8009192:	e7e4      	b.n	800915e <__pow5mult+0x5a>
 8009194:	4638      	mov	r0, r7
 8009196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919a:	bf00      	nop
 800919c:	0800b248 	.word	0x0800b248

080091a0 <__lshift>:
 80091a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	4607      	mov	r7, r0
 80091a8:	4616      	mov	r6, r2
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091b0:	eb0a 0903 	add.w	r9, sl, r3
 80091b4:	6849      	ldr	r1, [r1, #4]
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	f109 0501 	add.w	r5, r9, #1
 80091bc:	42ab      	cmp	r3, r5
 80091be:	db32      	blt.n	8009226 <__lshift+0x86>
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7ff fe2c 	bl	8008e1e <_Balloc>
 80091c6:	2300      	movs	r3, #0
 80091c8:	4680      	mov	r8, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	f100 0114 	add.w	r1, r0, #20
 80091d0:	4553      	cmp	r3, sl
 80091d2:	db2b      	blt.n	800922c <__lshift+0x8c>
 80091d4:	6920      	ldr	r0, [r4, #16]
 80091d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091da:	f104 0314 	add.w	r3, r4, #20
 80091de:	f016 021f 	ands.w	r2, r6, #31
 80091e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091ea:	d025      	beq.n	8009238 <__lshift+0x98>
 80091ec:	2000      	movs	r0, #0
 80091ee:	f1c2 0e20 	rsb	lr, r2, #32
 80091f2:	468a      	mov	sl, r1
 80091f4:	681e      	ldr	r6, [r3, #0]
 80091f6:	4096      	lsls	r6, r2
 80091f8:	4330      	orrs	r0, r6
 80091fa:	f84a 0b04 	str.w	r0, [sl], #4
 80091fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8009202:	459c      	cmp	ip, r3
 8009204:	fa20 f00e 	lsr.w	r0, r0, lr
 8009208:	d814      	bhi.n	8009234 <__lshift+0x94>
 800920a:	6048      	str	r0, [r1, #4]
 800920c:	b108      	cbz	r0, 8009212 <__lshift+0x72>
 800920e:	f109 0502 	add.w	r5, r9, #2
 8009212:	3d01      	subs	r5, #1
 8009214:	4638      	mov	r0, r7
 8009216:	f8c8 5010 	str.w	r5, [r8, #16]
 800921a:	4621      	mov	r1, r4
 800921c:	f7ff fe33 	bl	8008e86 <_Bfree>
 8009220:	4640      	mov	r0, r8
 8009222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009226:	3101      	adds	r1, #1
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	e7c7      	b.n	80091bc <__lshift+0x1c>
 800922c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009230:	3301      	adds	r3, #1
 8009232:	e7cd      	b.n	80091d0 <__lshift+0x30>
 8009234:	4651      	mov	r1, sl
 8009236:	e7dc      	b.n	80091f2 <__lshift+0x52>
 8009238:	3904      	subs	r1, #4
 800923a:	f853 2b04 	ldr.w	r2, [r3], #4
 800923e:	459c      	cmp	ip, r3
 8009240:	f841 2f04 	str.w	r2, [r1, #4]!
 8009244:	d8f9      	bhi.n	800923a <__lshift+0x9a>
 8009246:	e7e4      	b.n	8009212 <__lshift+0x72>

08009248 <__mcmp>:
 8009248:	6903      	ldr	r3, [r0, #16]
 800924a:	690a      	ldr	r2, [r1, #16]
 800924c:	b530      	push	{r4, r5, lr}
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	d10c      	bne.n	800926c <__mcmp+0x24>
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	3014      	adds	r0, #20
 8009256:	3114      	adds	r1, #20
 8009258:	1884      	adds	r4, r0, r2
 800925a:	4411      	add	r1, r2
 800925c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009264:	4295      	cmp	r5, r2
 8009266:	d003      	beq.n	8009270 <__mcmp+0x28>
 8009268:	d305      	bcc.n	8009276 <__mcmp+0x2e>
 800926a:	2301      	movs	r3, #1
 800926c:	4618      	mov	r0, r3
 800926e:	bd30      	pop	{r4, r5, pc}
 8009270:	42a0      	cmp	r0, r4
 8009272:	d3f3      	bcc.n	800925c <__mcmp+0x14>
 8009274:	e7fa      	b.n	800926c <__mcmp+0x24>
 8009276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800927a:	e7f7      	b.n	800926c <__mcmp+0x24>

0800927c <__mdiff>:
 800927c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009280:	460d      	mov	r5, r1
 8009282:	4607      	mov	r7, r0
 8009284:	4611      	mov	r1, r2
 8009286:	4628      	mov	r0, r5
 8009288:	4614      	mov	r4, r2
 800928a:	f7ff ffdd 	bl	8009248 <__mcmp>
 800928e:	1e06      	subs	r6, r0, #0
 8009290:	d108      	bne.n	80092a4 <__mdiff+0x28>
 8009292:	4631      	mov	r1, r6
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff fdc2 	bl	8008e1e <_Balloc>
 800929a:	2301      	movs	r3, #1
 800929c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80092a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a4:	bfa4      	itt	ge
 80092a6:	4623      	movge	r3, r4
 80092a8:	462c      	movge	r4, r5
 80092aa:	4638      	mov	r0, r7
 80092ac:	6861      	ldr	r1, [r4, #4]
 80092ae:	bfa6      	itte	ge
 80092b0:	461d      	movge	r5, r3
 80092b2:	2600      	movge	r6, #0
 80092b4:	2601      	movlt	r6, #1
 80092b6:	f7ff fdb2 	bl	8008e1e <_Balloc>
 80092ba:	f04f 0e00 	mov.w	lr, #0
 80092be:	60c6      	str	r6, [r0, #12]
 80092c0:	692b      	ldr	r3, [r5, #16]
 80092c2:	6926      	ldr	r6, [r4, #16]
 80092c4:	f104 0214 	add.w	r2, r4, #20
 80092c8:	f105 0914 	add.w	r9, r5, #20
 80092cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80092d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80092d4:	f100 0114 	add.w	r1, r0, #20
 80092d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80092dc:	f859 5b04 	ldr.w	r5, [r9], #4
 80092e0:	fa1f f38a 	uxth.w	r3, sl
 80092e4:	4473      	add	r3, lr
 80092e6:	b2ac      	uxth	r4, r5
 80092e8:	1b1b      	subs	r3, r3, r4
 80092ea:	0c2c      	lsrs	r4, r5, #16
 80092ec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80092f0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80092fa:	45c8      	cmp	r8, r9
 80092fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009300:	4694      	mov	ip, r2
 8009302:	f841 4b04 	str.w	r4, [r1], #4
 8009306:	d8e7      	bhi.n	80092d8 <__mdiff+0x5c>
 8009308:	45bc      	cmp	ip, r7
 800930a:	d304      	bcc.n	8009316 <__mdiff+0x9a>
 800930c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009310:	b183      	cbz	r3, 8009334 <__mdiff+0xb8>
 8009312:	6106      	str	r6, [r0, #16]
 8009314:	e7c4      	b.n	80092a0 <__mdiff+0x24>
 8009316:	f85c 4b04 	ldr.w	r4, [ip], #4
 800931a:	b2a2      	uxth	r2, r4
 800931c:	4472      	add	r2, lr
 800931e:	1413      	asrs	r3, r2, #16
 8009320:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009324:	b292      	uxth	r2, r2
 8009326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800932a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800932e:	f841 2b04 	str.w	r2, [r1], #4
 8009332:	e7e9      	b.n	8009308 <__mdiff+0x8c>
 8009334:	3e01      	subs	r6, #1
 8009336:	e7e9      	b.n	800930c <__mdiff+0x90>

08009338 <__d2b>:
 8009338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800933c:	461c      	mov	r4, r3
 800933e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009342:	2101      	movs	r1, #1
 8009344:	4690      	mov	r8, r2
 8009346:	f7ff fd6a 	bl	8008e1e <_Balloc>
 800934a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800934e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009352:	4607      	mov	r7, r0
 8009354:	bb34      	cbnz	r4, 80093a4 <__d2b+0x6c>
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	f1b8 0200 	subs.w	r2, r8, #0
 800935c:	d027      	beq.n	80093ae <__d2b+0x76>
 800935e:	a802      	add	r0, sp, #8
 8009360:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009364:	f7ff fe00 	bl	8008f68 <__lo0bits>
 8009368:	9900      	ldr	r1, [sp, #0]
 800936a:	b1f0      	cbz	r0, 80093aa <__d2b+0x72>
 800936c:	9a01      	ldr	r2, [sp, #4]
 800936e:	f1c0 0320 	rsb	r3, r0, #32
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	430b      	orrs	r3, r1
 8009378:	40c2      	lsrs	r2, r0
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	9201      	str	r2, [sp, #4]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf14      	ite	ne
 8009384:	2102      	movne	r1, #2
 8009386:	2101      	moveq	r1, #1
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	6139      	str	r1, [r7, #16]
 800938c:	b1c4      	cbz	r4, 80093c0 <__d2b+0x88>
 800938e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009392:	4404      	add	r4, r0
 8009394:	6034      	str	r4, [r6, #0]
 8009396:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800939a:	6028      	str	r0, [r5, #0]
 800939c:	4638      	mov	r0, r7
 800939e:	b002      	add	sp, #8
 80093a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80093a8:	e7d5      	b.n	8009356 <__d2b+0x1e>
 80093aa:	6179      	str	r1, [r7, #20]
 80093ac:	e7e7      	b.n	800937e <__d2b+0x46>
 80093ae:	a801      	add	r0, sp, #4
 80093b0:	f7ff fdda 	bl	8008f68 <__lo0bits>
 80093b4:	2101      	movs	r1, #1
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	6139      	str	r1, [r7, #16]
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	3020      	adds	r0, #32
 80093be:	e7e5      	b.n	800938c <__d2b+0x54>
 80093c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80093c8:	6030      	str	r0, [r6, #0]
 80093ca:	6918      	ldr	r0, [r3, #16]
 80093cc:	f7ff fdad 	bl	8008f2a <__hi0bits>
 80093d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80093d4:	e7e1      	b.n	800939a <__d2b+0x62>

080093d6 <_calloc_r>:
 80093d6:	b538      	push	{r3, r4, r5, lr}
 80093d8:	fb02 f401 	mul.w	r4, r2, r1
 80093dc:	4621      	mov	r1, r4
 80093de:	f000 f855 	bl	800948c <_malloc_r>
 80093e2:	4605      	mov	r5, r0
 80093e4:	b118      	cbz	r0, 80093ee <_calloc_r+0x18>
 80093e6:	4622      	mov	r2, r4
 80093e8:	2100      	movs	r1, #0
 80093ea:	f7fe fa2d 	bl	8007848 <memset>
 80093ee:	4628      	mov	r0, r5
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080093f4 <_free_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d043      	beq.n	8009484 <_free_r+0x90>
 80093fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009400:	1f0c      	subs	r4, r1, #4
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfb8      	it	lt
 8009406:	18e4      	addlt	r4, r4, r3
 8009408:	f000 fa27 	bl	800985a <__malloc_lock>
 800940c:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <_free_r+0x94>)
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	4610      	mov	r0, r2
 8009412:	b933      	cbnz	r3, 8009422 <_free_r+0x2e>
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	6014      	str	r4, [r2, #0]
 8009418:	4628      	mov	r0, r5
 800941a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941e:	f000 ba1d 	b.w	800985c <__malloc_unlock>
 8009422:	42a3      	cmp	r3, r4
 8009424:	d90b      	bls.n	800943e <_free_r+0x4a>
 8009426:	6821      	ldr	r1, [r4, #0]
 8009428:	1862      	adds	r2, r4, r1
 800942a:	4293      	cmp	r3, r2
 800942c:	bf01      	itttt	eq
 800942e:	681a      	ldreq	r2, [r3, #0]
 8009430:	685b      	ldreq	r3, [r3, #4]
 8009432:	1852      	addeq	r2, r2, r1
 8009434:	6022      	streq	r2, [r4, #0]
 8009436:	6063      	str	r3, [r4, #4]
 8009438:	6004      	str	r4, [r0, #0]
 800943a:	e7ed      	b.n	8009418 <_free_r+0x24>
 800943c:	4613      	mov	r3, r2
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	b10a      	cbz	r2, 8009446 <_free_r+0x52>
 8009442:	42a2      	cmp	r2, r4
 8009444:	d9fa      	bls.n	800943c <_free_r+0x48>
 8009446:	6819      	ldr	r1, [r3, #0]
 8009448:	1858      	adds	r0, r3, r1
 800944a:	42a0      	cmp	r0, r4
 800944c:	d10b      	bne.n	8009466 <_free_r+0x72>
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	4401      	add	r1, r0
 8009452:	1858      	adds	r0, r3, r1
 8009454:	4282      	cmp	r2, r0
 8009456:	6019      	str	r1, [r3, #0]
 8009458:	d1de      	bne.n	8009418 <_free_r+0x24>
 800945a:	6810      	ldr	r0, [r2, #0]
 800945c:	6852      	ldr	r2, [r2, #4]
 800945e:	4401      	add	r1, r0
 8009460:	6019      	str	r1, [r3, #0]
 8009462:	605a      	str	r2, [r3, #4]
 8009464:	e7d8      	b.n	8009418 <_free_r+0x24>
 8009466:	d902      	bls.n	800946e <_free_r+0x7a>
 8009468:	230c      	movs	r3, #12
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	e7d4      	b.n	8009418 <_free_r+0x24>
 800946e:	6820      	ldr	r0, [r4, #0]
 8009470:	1821      	adds	r1, r4, r0
 8009472:	428a      	cmp	r2, r1
 8009474:	bf01      	itttt	eq
 8009476:	6811      	ldreq	r1, [r2, #0]
 8009478:	6852      	ldreq	r2, [r2, #4]
 800947a:	1809      	addeq	r1, r1, r0
 800947c:	6021      	streq	r1, [r4, #0]
 800947e:	6062      	str	r2, [r4, #4]
 8009480:	605c      	str	r4, [r3, #4]
 8009482:	e7c9      	b.n	8009418 <_free_r+0x24>
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	2000028c 	.word	0x2000028c

0800948c <_malloc_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	1ccd      	adds	r5, r1, #3
 8009490:	f025 0503 	bic.w	r5, r5, #3
 8009494:	3508      	adds	r5, #8
 8009496:	2d0c      	cmp	r5, #12
 8009498:	bf38      	it	cc
 800949a:	250c      	movcc	r5, #12
 800949c:	2d00      	cmp	r5, #0
 800949e:	4606      	mov	r6, r0
 80094a0:	db01      	blt.n	80094a6 <_malloc_r+0x1a>
 80094a2:	42a9      	cmp	r1, r5
 80094a4:	d903      	bls.n	80094ae <_malloc_r+0x22>
 80094a6:	230c      	movs	r3, #12
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	2000      	movs	r0, #0
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	f000 f9d4 	bl	800985a <__malloc_lock>
 80094b2:	4a21      	ldr	r2, [pc, #132]	; (8009538 <_malloc_r+0xac>)
 80094b4:	6814      	ldr	r4, [r2, #0]
 80094b6:	4621      	mov	r1, r4
 80094b8:	b991      	cbnz	r1, 80094e0 <_malloc_r+0x54>
 80094ba:	4c20      	ldr	r4, [pc, #128]	; (800953c <_malloc_r+0xb0>)
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	b91b      	cbnz	r3, 80094c8 <_malloc_r+0x3c>
 80094c0:	4630      	mov	r0, r6
 80094c2:	f000 f98f 	bl	80097e4 <_sbrk_r>
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	4629      	mov	r1, r5
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 f98a 	bl	80097e4 <_sbrk_r>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d124      	bne.n	800951e <_malloc_r+0x92>
 80094d4:	230c      	movs	r3, #12
 80094d6:	4630      	mov	r0, r6
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	f000 f9bf 	bl	800985c <__malloc_unlock>
 80094de:	e7e4      	b.n	80094aa <_malloc_r+0x1e>
 80094e0:	680b      	ldr	r3, [r1, #0]
 80094e2:	1b5b      	subs	r3, r3, r5
 80094e4:	d418      	bmi.n	8009518 <_malloc_r+0x8c>
 80094e6:	2b0b      	cmp	r3, #11
 80094e8:	d90f      	bls.n	800950a <_malloc_r+0x7e>
 80094ea:	600b      	str	r3, [r1, #0]
 80094ec:	18cc      	adds	r4, r1, r3
 80094ee:	50cd      	str	r5, [r1, r3]
 80094f0:	4630      	mov	r0, r6
 80094f2:	f000 f9b3 	bl	800985c <__malloc_unlock>
 80094f6:	f104 000b 	add.w	r0, r4, #11
 80094fa:	1d23      	adds	r3, r4, #4
 80094fc:	f020 0007 	bic.w	r0, r0, #7
 8009500:	1ac3      	subs	r3, r0, r3
 8009502:	d0d3      	beq.n	80094ac <_malloc_r+0x20>
 8009504:	425a      	negs	r2, r3
 8009506:	50e2      	str	r2, [r4, r3]
 8009508:	e7d0      	b.n	80094ac <_malloc_r+0x20>
 800950a:	684b      	ldr	r3, [r1, #4]
 800950c:	428c      	cmp	r4, r1
 800950e:	bf16      	itet	ne
 8009510:	6063      	strne	r3, [r4, #4]
 8009512:	6013      	streq	r3, [r2, #0]
 8009514:	460c      	movne	r4, r1
 8009516:	e7eb      	b.n	80094f0 <_malloc_r+0x64>
 8009518:	460c      	mov	r4, r1
 800951a:	6849      	ldr	r1, [r1, #4]
 800951c:	e7cc      	b.n	80094b8 <_malloc_r+0x2c>
 800951e:	1cc4      	adds	r4, r0, #3
 8009520:	f024 0403 	bic.w	r4, r4, #3
 8009524:	42a0      	cmp	r0, r4
 8009526:	d005      	beq.n	8009534 <_malloc_r+0xa8>
 8009528:	1a21      	subs	r1, r4, r0
 800952a:	4630      	mov	r0, r6
 800952c:	f000 f95a 	bl	80097e4 <_sbrk_r>
 8009530:	3001      	adds	r0, #1
 8009532:	d0cf      	beq.n	80094d4 <_malloc_r+0x48>
 8009534:	6025      	str	r5, [r4, #0]
 8009536:	e7db      	b.n	80094f0 <_malloc_r+0x64>
 8009538:	2000028c 	.word	0x2000028c
 800953c:	20000290 	.word	0x20000290

08009540 <__ssputs_r>:
 8009540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	688e      	ldr	r6, [r1, #8]
 8009546:	4682      	mov	sl, r0
 8009548:	429e      	cmp	r6, r3
 800954a:	460c      	mov	r4, r1
 800954c:	4690      	mov	r8, r2
 800954e:	4699      	mov	r9, r3
 8009550:	d837      	bhi.n	80095c2 <__ssputs_r+0x82>
 8009552:	898a      	ldrh	r2, [r1, #12]
 8009554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009558:	d031      	beq.n	80095be <__ssputs_r+0x7e>
 800955a:	2302      	movs	r3, #2
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	6909      	ldr	r1, [r1, #16]
 8009560:	1a6f      	subs	r7, r5, r1
 8009562:	6965      	ldr	r5, [r4, #20]
 8009564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009568:	fb95 f5f3 	sdiv	r5, r5, r3
 800956c:	f109 0301 	add.w	r3, r9, #1
 8009570:	443b      	add	r3, r7
 8009572:	429d      	cmp	r5, r3
 8009574:	bf38      	it	cc
 8009576:	461d      	movcc	r5, r3
 8009578:	0553      	lsls	r3, r2, #21
 800957a:	d530      	bpl.n	80095de <__ssputs_r+0x9e>
 800957c:	4629      	mov	r1, r5
 800957e:	f7ff ff85 	bl	800948c <_malloc_r>
 8009582:	4606      	mov	r6, r0
 8009584:	b950      	cbnz	r0, 800959c <__ssputs_r+0x5c>
 8009586:	230c      	movs	r3, #12
 8009588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800958c:	f8ca 3000 	str.w	r3, [sl]
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959c:	463a      	mov	r2, r7
 800959e:	6921      	ldr	r1, [r4, #16]
 80095a0:	f7ff fc32 	bl	8008e08 <memcpy>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	6126      	str	r6, [r4, #16]
 80095b2:	443e      	add	r6, r7
 80095b4:	6026      	str	r6, [r4, #0]
 80095b6:	464e      	mov	r6, r9
 80095b8:	6165      	str	r5, [r4, #20]
 80095ba:	1bed      	subs	r5, r5, r7
 80095bc:	60a5      	str	r5, [r4, #8]
 80095be:	454e      	cmp	r6, r9
 80095c0:	d900      	bls.n	80095c4 <__ssputs_r+0x84>
 80095c2:	464e      	mov	r6, r9
 80095c4:	4632      	mov	r2, r6
 80095c6:	4641      	mov	r1, r8
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	f000 f92d 	bl	8009828 <memmove>
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	2000      	movs	r0, #0
 80095d2:	1b9b      	subs	r3, r3, r6
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	441e      	add	r6, r3
 80095da:	6026      	str	r6, [r4, #0]
 80095dc:	e7dc      	b.n	8009598 <__ssputs_r+0x58>
 80095de:	462a      	mov	r2, r5
 80095e0:	f000 f93d 	bl	800985e <_realloc_r>
 80095e4:	4606      	mov	r6, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1e2      	bne.n	80095b0 <__ssputs_r+0x70>
 80095ea:	6921      	ldr	r1, [r4, #16]
 80095ec:	4650      	mov	r0, sl
 80095ee:	f7ff ff01 	bl	80093f4 <_free_r>
 80095f2:	e7c8      	b.n	8009586 <__ssputs_r+0x46>

080095f4 <_svfiprintf_r>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	461d      	mov	r5, r3
 80095fa:	898b      	ldrh	r3, [r1, #12]
 80095fc:	b09d      	sub	sp, #116	; 0x74
 80095fe:	061f      	lsls	r7, r3, #24
 8009600:	4680      	mov	r8, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4616      	mov	r6, r2
 8009606:	d50f      	bpl.n	8009628 <_svfiprintf_r+0x34>
 8009608:	690b      	ldr	r3, [r1, #16]
 800960a:	b96b      	cbnz	r3, 8009628 <_svfiprintf_r+0x34>
 800960c:	2140      	movs	r1, #64	; 0x40
 800960e:	f7ff ff3d 	bl	800948c <_malloc_r>
 8009612:	6020      	str	r0, [r4, #0]
 8009614:	6120      	str	r0, [r4, #16]
 8009616:	b928      	cbnz	r0, 8009624 <_svfiprintf_r+0x30>
 8009618:	230c      	movs	r3, #12
 800961a:	f8c8 3000 	str.w	r3, [r8]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009622:	e0c8      	b.n	80097b6 <_svfiprintf_r+0x1c2>
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	6163      	str	r3, [r4, #20]
 8009628:	2300      	movs	r3, #0
 800962a:	9309      	str	r3, [sp, #36]	; 0x24
 800962c:	2320      	movs	r3, #32
 800962e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009632:	2330      	movs	r3, #48	; 0x30
 8009634:	f04f 0b01 	mov.w	fp, #1
 8009638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800963c:	9503      	str	r5, [sp, #12]
 800963e:	4637      	mov	r7, r6
 8009640:	463d      	mov	r5, r7
 8009642:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009646:	b10b      	cbz	r3, 800964c <_svfiprintf_r+0x58>
 8009648:	2b25      	cmp	r3, #37	; 0x25
 800964a:	d13e      	bne.n	80096ca <_svfiprintf_r+0xd6>
 800964c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009650:	d00b      	beq.n	800966a <_svfiprintf_r+0x76>
 8009652:	4653      	mov	r3, sl
 8009654:	4632      	mov	r2, r6
 8009656:	4621      	mov	r1, r4
 8009658:	4640      	mov	r0, r8
 800965a:	f7ff ff71 	bl	8009540 <__ssputs_r>
 800965e:	3001      	adds	r0, #1
 8009660:	f000 80a4 	beq.w	80097ac <_svfiprintf_r+0x1b8>
 8009664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009666:	4453      	add	r3, sl
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	783b      	ldrb	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 809d 	beq.w	80097ac <_svfiprintf_r+0x1b8>
 8009672:	2300      	movs	r3, #0
 8009674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800967c:	9304      	str	r3, [sp, #16]
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009684:	931a      	str	r3, [sp, #104]	; 0x68
 8009686:	462f      	mov	r7, r5
 8009688:	2205      	movs	r2, #5
 800968a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800968e:	4850      	ldr	r0, [pc, #320]	; (80097d0 <_svfiprintf_r+0x1dc>)
 8009690:	f7ff fbac 	bl	8008dec <memchr>
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	b9d0      	cbnz	r0, 80096ce <_svfiprintf_r+0xda>
 8009698:	06d9      	lsls	r1, r3, #27
 800969a:	bf44      	itt	mi
 800969c:	2220      	movmi	r2, #32
 800969e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096a2:	071a      	lsls	r2, r3, #28
 80096a4:	bf44      	itt	mi
 80096a6:	222b      	movmi	r2, #43	; 0x2b
 80096a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096ac:	782a      	ldrb	r2, [r5, #0]
 80096ae:	2a2a      	cmp	r2, #42	; 0x2a
 80096b0:	d015      	beq.n	80096de <_svfiprintf_r+0xea>
 80096b2:	462f      	mov	r7, r5
 80096b4:	2000      	movs	r0, #0
 80096b6:	250a      	movs	r5, #10
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	4639      	mov	r1, r7
 80096bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c0:	3b30      	subs	r3, #48	; 0x30
 80096c2:	2b09      	cmp	r3, #9
 80096c4:	d94d      	bls.n	8009762 <_svfiprintf_r+0x16e>
 80096c6:	b1b8      	cbz	r0, 80096f8 <_svfiprintf_r+0x104>
 80096c8:	e00f      	b.n	80096ea <_svfiprintf_r+0xf6>
 80096ca:	462f      	mov	r7, r5
 80096cc:	e7b8      	b.n	8009640 <_svfiprintf_r+0x4c>
 80096ce:	4a40      	ldr	r2, [pc, #256]	; (80097d0 <_svfiprintf_r+0x1dc>)
 80096d0:	463d      	mov	r5, r7
 80096d2:	1a80      	subs	r0, r0, r2
 80096d4:	fa0b f000 	lsl.w	r0, fp, r0
 80096d8:	4318      	orrs	r0, r3
 80096da:	9004      	str	r0, [sp, #16]
 80096dc:	e7d3      	b.n	8009686 <_svfiprintf_r+0x92>
 80096de:	9a03      	ldr	r2, [sp, #12]
 80096e0:	1d11      	adds	r1, r2, #4
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	9103      	str	r1, [sp, #12]
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	db01      	blt.n	80096ee <_svfiprintf_r+0xfa>
 80096ea:	9207      	str	r2, [sp, #28]
 80096ec:	e004      	b.n	80096f8 <_svfiprintf_r+0x104>
 80096ee:	4252      	negs	r2, r2
 80096f0:	f043 0302 	orr.w	r3, r3, #2
 80096f4:	9207      	str	r2, [sp, #28]
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	783b      	ldrb	r3, [r7, #0]
 80096fa:	2b2e      	cmp	r3, #46	; 0x2e
 80096fc:	d10c      	bne.n	8009718 <_svfiprintf_r+0x124>
 80096fe:	787b      	ldrb	r3, [r7, #1]
 8009700:	2b2a      	cmp	r3, #42	; 0x2a
 8009702:	d133      	bne.n	800976c <_svfiprintf_r+0x178>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	3702      	adds	r7, #2
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	9203      	str	r2, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bfb8      	it	lt
 8009712:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4d2e      	ldr	r5, [pc, #184]	; (80097d4 <_svfiprintf_r+0x1e0>)
 800971a:	2203      	movs	r2, #3
 800971c:	7839      	ldrb	r1, [r7, #0]
 800971e:	4628      	mov	r0, r5
 8009720:	f7ff fb64 	bl	8008dec <memchr>
 8009724:	b138      	cbz	r0, 8009736 <_svfiprintf_r+0x142>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	1b40      	subs	r0, r0, r5
 800972a:	fa03 f000 	lsl.w	r0, r3, r0
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	3701      	adds	r7, #1
 8009732:	4303      	orrs	r3, r0
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	7839      	ldrb	r1, [r7, #0]
 8009738:	2206      	movs	r2, #6
 800973a:	4827      	ldr	r0, [pc, #156]	; (80097d8 <_svfiprintf_r+0x1e4>)
 800973c:	1c7e      	adds	r6, r7, #1
 800973e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009742:	f7ff fb53 	bl	8008dec <memchr>
 8009746:	2800      	cmp	r0, #0
 8009748:	d038      	beq.n	80097bc <_svfiprintf_r+0x1c8>
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <_svfiprintf_r+0x1e8>)
 800974c:	bb13      	cbnz	r3, 8009794 <_svfiprintf_r+0x1a0>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	3308      	adds	r3, #8
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	444b      	add	r3, r9
 800975e:	9309      	str	r3, [sp, #36]	; 0x24
 8009760:	e76d      	b.n	800963e <_svfiprintf_r+0x4a>
 8009762:	fb05 3202 	mla	r2, r5, r2, r3
 8009766:	2001      	movs	r0, #1
 8009768:	460f      	mov	r7, r1
 800976a:	e7a6      	b.n	80096ba <_svfiprintf_r+0xc6>
 800976c:	2300      	movs	r3, #0
 800976e:	250a      	movs	r5, #10
 8009770:	4619      	mov	r1, r3
 8009772:	3701      	adds	r7, #1
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	4638      	mov	r0, r7
 8009778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800977c:	3a30      	subs	r2, #48	; 0x30
 800977e:	2a09      	cmp	r2, #9
 8009780:	d903      	bls.n	800978a <_svfiprintf_r+0x196>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0c8      	beq.n	8009718 <_svfiprintf_r+0x124>
 8009786:	9105      	str	r1, [sp, #20]
 8009788:	e7c6      	b.n	8009718 <_svfiprintf_r+0x124>
 800978a:	fb05 2101 	mla	r1, r5, r1, r2
 800978e:	2301      	movs	r3, #1
 8009790:	4607      	mov	r7, r0
 8009792:	e7f0      	b.n	8009776 <_svfiprintf_r+0x182>
 8009794:	ab03      	add	r3, sp, #12
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4622      	mov	r2, r4
 800979a:	4b11      	ldr	r3, [pc, #68]	; (80097e0 <_svfiprintf_r+0x1ec>)
 800979c:	a904      	add	r1, sp, #16
 800979e:	4640      	mov	r0, r8
 80097a0:	f7fe f8ec 	bl	800797c <_printf_float>
 80097a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80097a8:	4681      	mov	r9, r0
 80097aa:	d1d6      	bne.n	800975a <_svfiprintf_r+0x166>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	065b      	lsls	r3, r3, #25
 80097b0:	f53f af35 	bmi.w	800961e <_svfiprintf_r+0x2a>
 80097b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b6:	b01d      	add	sp, #116	; 0x74
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4622      	mov	r2, r4
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <_svfiprintf_r+0x1ec>)
 80097c4:	a904      	add	r1, sp, #16
 80097c6:	4640      	mov	r0, r8
 80097c8:	f7fe fb84 	bl	8007ed4 <_printf_i>
 80097cc:	e7ea      	b.n	80097a4 <_svfiprintf_r+0x1b0>
 80097ce:	bf00      	nop
 80097d0:	0800b254 	.word	0x0800b254
 80097d4:	0800b25a 	.word	0x0800b25a
 80097d8:	0800b25e 	.word	0x0800b25e
 80097dc:	0800797d 	.word	0x0800797d
 80097e0:	08009541 	.word	0x08009541

080097e4 <_sbrk_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	2300      	movs	r3, #0
 80097e8:	4c05      	ldr	r4, [pc, #20]	; (8009800 <_sbrk_r+0x1c>)
 80097ea:	4605      	mov	r5, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	f7fa f978 	bl	8003ae4 <_sbrk>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_sbrk_r+0x1a>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_sbrk_r+0x1a>
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	200006a8 	.word	0x200006a8

08009804 <__ascii_mbtowc>:
 8009804:	b082      	sub	sp, #8
 8009806:	b901      	cbnz	r1, 800980a <__ascii_mbtowc+0x6>
 8009808:	a901      	add	r1, sp, #4
 800980a:	b142      	cbz	r2, 800981e <__ascii_mbtowc+0x1a>
 800980c:	b14b      	cbz	r3, 8009822 <__ascii_mbtowc+0x1e>
 800980e:	7813      	ldrb	r3, [r2, #0]
 8009810:	600b      	str	r3, [r1, #0]
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	1c10      	adds	r0, r2, #0
 8009816:	bf18      	it	ne
 8009818:	2001      	movne	r0, #1
 800981a:	b002      	add	sp, #8
 800981c:	4770      	bx	lr
 800981e:	4610      	mov	r0, r2
 8009820:	e7fb      	b.n	800981a <__ascii_mbtowc+0x16>
 8009822:	f06f 0001 	mvn.w	r0, #1
 8009826:	e7f8      	b.n	800981a <__ascii_mbtowc+0x16>

08009828 <memmove>:
 8009828:	4288      	cmp	r0, r1
 800982a:	b510      	push	{r4, lr}
 800982c:	eb01 0302 	add.w	r3, r1, r2
 8009830:	d807      	bhi.n	8009842 <memmove+0x1a>
 8009832:	1e42      	subs	r2, r0, #1
 8009834:	4299      	cmp	r1, r3
 8009836:	d00a      	beq.n	800984e <memmove+0x26>
 8009838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009840:	e7f8      	b.n	8009834 <memmove+0xc>
 8009842:	4283      	cmp	r3, r0
 8009844:	d9f5      	bls.n	8009832 <memmove+0xa>
 8009846:	1881      	adds	r1, r0, r2
 8009848:	1ad2      	subs	r2, r2, r3
 800984a:	42d3      	cmn	r3, r2
 800984c:	d100      	bne.n	8009850 <memmove+0x28>
 800984e:	bd10      	pop	{r4, pc}
 8009850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009854:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009858:	e7f7      	b.n	800984a <memmove+0x22>

0800985a <__malloc_lock>:
 800985a:	4770      	bx	lr

0800985c <__malloc_unlock>:
 800985c:	4770      	bx	lr

0800985e <_realloc_r>:
 800985e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009860:	4607      	mov	r7, r0
 8009862:	4614      	mov	r4, r2
 8009864:	460e      	mov	r6, r1
 8009866:	b921      	cbnz	r1, 8009872 <_realloc_r+0x14>
 8009868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800986c:	4611      	mov	r1, r2
 800986e:	f7ff be0d 	b.w	800948c <_malloc_r>
 8009872:	b922      	cbnz	r2, 800987e <_realloc_r+0x20>
 8009874:	f7ff fdbe 	bl	80093f4 <_free_r>
 8009878:	4625      	mov	r5, r4
 800987a:	4628      	mov	r0, r5
 800987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987e:	f000 f821 	bl	80098c4 <_malloc_usable_size_r>
 8009882:	42a0      	cmp	r0, r4
 8009884:	d20f      	bcs.n	80098a6 <_realloc_r+0x48>
 8009886:	4621      	mov	r1, r4
 8009888:	4638      	mov	r0, r7
 800988a:	f7ff fdff 	bl	800948c <_malloc_r>
 800988e:	4605      	mov	r5, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	d0f2      	beq.n	800987a <_realloc_r+0x1c>
 8009894:	4631      	mov	r1, r6
 8009896:	4622      	mov	r2, r4
 8009898:	f7ff fab6 	bl	8008e08 <memcpy>
 800989c:	4631      	mov	r1, r6
 800989e:	4638      	mov	r0, r7
 80098a0:	f7ff fda8 	bl	80093f4 <_free_r>
 80098a4:	e7e9      	b.n	800987a <_realloc_r+0x1c>
 80098a6:	4635      	mov	r5, r6
 80098a8:	e7e7      	b.n	800987a <_realloc_r+0x1c>

080098aa <__ascii_wctomb>:
 80098aa:	b149      	cbz	r1, 80098c0 <__ascii_wctomb+0x16>
 80098ac:	2aff      	cmp	r2, #255	; 0xff
 80098ae:	bf8b      	itete	hi
 80098b0:	238a      	movhi	r3, #138	; 0x8a
 80098b2:	700a      	strbls	r2, [r1, #0]
 80098b4:	6003      	strhi	r3, [r0, #0]
 80098b6:	2001      	movls	r0, #1
 80098b8:	bf88      	it	hi
 80098ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80098be:	4770      	bx	lr
 80098c0:	4608      	mov	r0, r1
 80098c2:	4770      	bx	lr

080098c4 <_malloc_usable_size_r>:
 80098c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c8:	1f18      	subs	r0, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfbc      	itt	lt
 80098ce:	580b      	ldrlt	r3, [r1, r0]
 80098d0:	18c0      	addlt	r0, r0, r3
 80098d2:	4770      	bx	lr

080098d4 <sin>:
 80098d4:	b530      	push	{r4, r5, lr}
 80098d6:	4a1a      	ldr	r2, [pc, #104]	; (8009940 <sin+0x6c>)
 80098d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098dc:	4293      	cmp	r3, r2
 80098de:	b087      	sub	sp, #28
 80098e0:	dc06      	bgt.n	80098f0 <sin+0x1c>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2200      	movs	r2, #0
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	f001 f975 	bl	800abd8 <__kernel_sin>
 80098ee:	e006      	b.n	80098fe <sin+0x2a>
 80098f0:	4a14      	ldr	r2, [pc, #80]	; (8009944 <sin+0x70>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	dd05      	ble.n	8009902 <sin+0x2e>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	f7f6 fc35 	bl	8000168 <__aeabi_dsub>
 80098fe:	b007      	add	sp, #28
 8009900:	bd30      	pop	{r4, r5, pc}
 8009902:	aa02      	add	r2, sp, #8
 8009904:	f000 fac4 	bl	8009e90 <__ieee754_rem_pio2>
 8009908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800990c:	f000 0403 	and.w	r4, r0, #3
 8009910:	2c01      	cmp	r4, #1
 8009912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009916:	d005      	beq.n	8009924 <sin+0x50>
 8009918:	2c02      	cmp	r4, #2
 800991a:	d006      	beq.n	800992a <sin+0x56>
 800991c:	b964      	cbnz	r4, 8009938 <sin+0x64>
 800991e:	2401      	movs	r4, #1
 8009920:	9400      	str	r4, [sp, #0]
 8009922:	e7e2      	b.n	80098ea <sin+0x16>
 8009924:	f000 fd50 	bl	800a3c8 <__kernel_cos>
 8009928:	e7e9      	b.n	80098fe <sin+0x2a>
 800992a:	2401      	movs	r4, #1
 800992c:	9400      	str	r4, [sp, #0]
 800992e:	f001 f953 	bl	800abd8 <__kernel_sin>
 8009932:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009936:	e7e2      	b.n	80098fe <sin+0x2a>
 8009938:	f000 fd46 	bl	800a3c8 <__kernel_cos>
 800993c:	e7f9      	b.n	8009932 <sin+0x5e>
 800993e:	bf00      	nop
 8009940:	3fe921fb 	.word	0x3fe921fb
 8009944:	7fefffff 	.word	0x7fefffff

08009948 <asin>:
 8009948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800994c:	b08b      	sub	sp, #44	; 0x2c
 800994e:	4604      	mov	r4, r0
 8009950:	460d      	mov	r5, r1
 8009952:	f000 f8a1 	bl	8009a98 <__ieee754_asin>
 8009956:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80099ec <asin+0xa4>
 800995a:	4606      	mov	r6, r0
 800995c:	f998 3000 	ldrsb.w	r3, [r8]
 8009960:	460f      	mov	r7, r1
 8009962:	3301      	adds	r3, #1
 8009964:	d036      	beq.n	80099d4 <asin+0x8c>
 8009966:	4622      	mov	r2, r4
 8009968:	462b      	mov	r3, r5
 800996a:	4620      	mov	r0, r4
 800996c:	4629      	mov	r1, r5
 800996e:	f7f7 f84d 	bl	8000a0c <__aeabi_dcmpun>
 8009972:	4681      	mov	r9, r0
 8009974:	2800      	cmp	r0, #0
 8009976:	d12d      	bne.n	80099d4 <asin+0x8c>
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f001 f9e2 	bl	800ad44 <fabs>
 8009980:	2200      	movs	r2, #0
 8009982:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <asin+0x98>)
 8009984:	f7f7 f838 	bl	80009f8 <__aeabi_dcmpgt>
 8009988:	b320      	cbz	r0, 80099d4 <asin+0x8c>
 800998a:	2301      	movs	r3, #1
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	4b15      	ldr	r3, [pc, #84]	; (80099e4 <asin+0x9c>)
 8009990:	4815      	ldr	r0, [pc, #84]	; (80099e8 <asin+0xa0>)
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	f8cd 9020 	str.w	r9, [sp, #32]
 8009998:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800999c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80099a0:	f001 fa5c 	bl	800ae5c <nan>
 80099a4:	f998 3000 	ldrsb.w	r3, [r8]
 80099a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d104      	bne.n	80099ba <asin+0x72>
 80099b0:	f7fd ff20 	bl	80077f4 <__errno>
 80099b4:	2321      	movs	r3, #33	; 0x21
 80099b6:	6003      	str	r3, [r0, #0]
 80099b8:	e004      	b.n	80099c4 <asin+0x7c>
 80099ba:	4668      	mov	r0, sp
 80099bc:	f001 fa4c 	bl	800ae58 <matherr>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d0f5      	beq.n	80099b0 <asin+0x68>
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	b11b      	cbz	r3, 80099d0 <asin+0x88>
 80099c8:	f7fd ff14 	bl	80077f4 <__errno>
 80099cc:	9b08      	ldr	r3, [sp, #32]
 80099ce:	6003      	str	r3, [r0, #0]
 80099d0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	b00b      	add	sp, #44	; 0x2c
 80099da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099de:	bf00      	nop
 80099e0:	3ff00000 	.word	0x3ff00000
 80099e4:	0800b370 	.word	0x0800b370
 80099e8:	0800b259 	.word	0x0800b259
 80099ec:	20000208 	.word	0x20000208

080099f0 <sqrt>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	b08b      	sub	sp, #44	; 0x2c
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	f000 fc39 	bl	800a270 <__ieee754_sqrt>
 80099fe:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <sqrt+0xa0>)
 8009a00:	4680      	mov	r8, r0
 8009a02:	f993 a000 	ldrsb.w	sl, [r3]
 8009a06:	4689      	mov	r9, r1
 8009a08:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009a0c:	d02b      	beq.n	8009a66 <sqrt+0x76>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fff9 	bl	8000a0c <__aeabi_dcmpun>
 8009a1a:	4683      	mov	fp, r0
 8009a1c:	bb18      	cbnz	r0, 8009a66 <sqrt+0x76>
 8009a1e:	2600      	movs	r6, #0
 8009a20:	2700      	movs	r7, #0
 8009a22:	4632      	mov	r2, r6
 8009a24:	463b      	mov	r3, r7
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f6 ffc7 	bl	80009bc <__aeabi_dcmplt>
 8009a2e:	b1d0      	cbz	r0, 8009a66 <sqrt+0x76>
 8009a30:	2301      	movs	r3, #1
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4b17      	ldr	r3, [pc, #92]	; (8009a94 <sqrt+0xa4>)
 8009a36:	f8cd b020 	str.w	fp, [sp, #32]
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009a40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a44:	f1ba 0f00 	cmp.w	sl, #0
 8009a48:	d112      	bne.n	8009a70 <sqrt+0x80>
 8009a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a4e:	4668      	mov	r0, sp
 8009a50:	f001 fa02 	bl	800ae58 <matherr>
 8009a54:	b1b8      	cbz	r0, 8009a86 <sqrt+0x96>
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	b11b      	cbz	r3, 8009a62 <sqrt+0x72>
 8009a5a:	f7fd fecb 	bl	80077f4 <__errno>
 8009a5e:	9b08      	ldr	r3, [sp, #32]
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	b00b      	add	sp, #44	; 0x2c
 8009a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a70:	4632      	mov	r2, r6
 8009a72:	463b      	mov	r3, r7
 8009a74:	4630      	mov	r0, r6
 8009a76:	4639      	mov	r1, r7
 8009a78:	f7f6 fe58 	bl	800072c <__aeabi_ddiv>
 8009a7c:	f1ba 0f02 	cmp.w	sl, #2
 8009a80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a84:	d1e3      	bne.n	8009a4e <sqrt+0x5e>
 8009a86:	f7fd feb5 	bl	80077f4 <__errno>
 8009a8a:	2321      	movs	r3, #33	; 0x21
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	e7e2      	b.n	8009a56 <sqrt+0x66>
 8009a90:	20000208 	.word	0x20000208
 8009a94:	0800b375 	.word	0x0800b375

08009a98 <__ieee754_asin>:
 8009a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	4bc4      	ldr	r3, [pc, #784]	; (8009db0 <__ieee754_asin+0x318>)
 8009a9e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	429f      	cmp	r7, r3
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	9103      	str	r1, [sp, #12]
 8009aac:	dd2a      	ble.n	8009b04 <__ieee754_asin+0x6c>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009ab4:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009ab8:	433b      	orrs	r3, r7
 8009aba:	d114      	bne.n	8009ae6 <__ieee754_asin+0x4e>
 8009abc:	a3a2      	add	r3, pc, #648	; (adr r3, 8009d48 <__ieee754_asin+0x2b0>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fd09 	bl	80004d8 <__aeabi_dmul>
 8009ac6:	a3a2      	add	r3, pc, #648	; (adr r3, 8009d50 <__ieee754_asin+0x2b8>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	4606      	mov	r6, r0
 8009ace:	460f      	mov	r7, r1
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f7f6 fd00 	bl	80004d8 <__aeabi_dmul>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f6 fb44 	bl	800016c <__adddf3>
 8009ae4:	e007      	b.n	8009af6 <__ieee754_asin+0x5e>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	f7f6 fb3d 	bl	8000168 <__aeabi_dsub>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	f7f6 fe1b 	bl	800072c <__aeabi_ddiv>
 8009af6:	4604      	mov	r4, r0
 8009af8:	460d      	mov	r5, r1
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	b007      	add	sp, #28
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	4bab      	ldr	r3, [pc, #684]	; (8009db4 <__ieee754_asin+0x31c>)
 8009b06:	429f      	cmp	r7, r3
 8009b08:	dc0e      	bgt.n	8009b28 <__ieee754_asin+0x90>
 8009b0a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009b0e:	f280 80ab 	bge.w	8009c68 <__ieee754_asin+0x1d0>
 8009b12:	a391      	add	r3, pc, #580	; (adr r3, 8009d58 <__ieee754_asin+0x2c0>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fb28 	bl	800016c <__adddf3>
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4ba6      	ldr	r3, [pc, #664]	; (8009db8 <__ieee754_asin+0x320>)
 8009b20:	f7f6 ff6a 	bl	80009f8 <__aeabi_dcmpgt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1e8      	bne.n	8009afa <__ieee754_asin+0x62>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	f001 f90a 	bl	800ad44 <fabs>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	2000      	movs	r0, #0
 8009b36:	49a0      	ldr	r1, [pc, #640]	; (8009db8 <__ieee754_asin+0x320>)
 8009b38:	f7f6 fb16 	bl	8000168 <__aeabi_dsub>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4b9f      	ldr	r3, [pc, #636]	; (8009dbc <__ieee754_asin+0x324>)
 8009b40:	f7f6 fcca 	bl	80004d8 <__aeabi_dmul>
 8009b44:	a386      	add	r3, pc, #536	; (adr r3, 8009d60 <__ieee754_asin+0x2c8>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	f7f6 fcc3 	bl	80004d8 <__aeabi_dmul>
 8009b52:	a385      	add	r3, pc, #532	; (adr r3, 8009d68 <__ieee754_asin+0x2d0>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fb08 	bl	800016c <__adddf3>
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	462b      	mov	r3, r5
 8009b60:	f7f6 fcba 	bl	80004d8 <__aeabi_dmul>
 8009b64:	a382      	add	r3, pc, #520	; (adr r3, 8009d70 <__ieee754_asin+0x2d8>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f7f6 fafd 	bl	8000168 <__aeabi_dsub>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	f7f6 fcb1 	bl	80004d8 <__aeabi_dmul>
 8009b76:	a380      	add	r3, pc, #512	; (adr r3, 8009d78 <__ieee754_asin+0x2e0>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 faf6 	bl	800016c <__adddf3>
 8009b80:	4622      	mov	r2, r4
 8009b82:	462b      	mov	r3, r5
 8009b84:	f7f6 fca8 	bl	80004d8 <__aeabi_dmul>
 8009b88:	a37d      	add	r3, pc, #500	; (adr r3, 8009d80 <__ieee754_asin+0x2e8>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 faeb 	bl	8000168 <__aeabi_dsub>
 8009b92:	4622      	mov	r2, r4
 8009b94:	462b      	mov	r3, r5
 8009b96:	f7f6 fc9f 	bl	80004d8 <__aeabi_dmul>
 8009b9a:	a37b      	add	r3, pc, #492	; (adr r3, 8009d88 <__ieee754_asin+0x2f0>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fae4 	bl	800016c <__adddf3>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	a378      	add	r3, pc, #480	; (adr r3, 8009d90 <__ieee754_asin+0x2f8>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 fc8d 	bl	80004d8 <__aeabi_dmul>
 8009bbe:	a376      	add	r3, pc, #472	; (adr r3, 8009d98 <__ieee754_asin+0x300>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 fad0 	bl	8000168 <__aeabi_dsub>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	462b      	mov	r3, r5
 8009bcc:	f7f6 fc84 	bl	80004d8 <__aeabi_dmul>
 8009bd0:	a373      	add	r3, pc, #460	; (adr r3, 8009da0 <__ieee754_asin+0x308>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fac9 	bl	800016c <__adddf3>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	f7f6 fc7b 	bl	80004d8 <__aeabi_dmul>
 8009be2:	a371      	add	r3, pc, #452	; (adr r3, 8009da8 <__ieee754_asin+0x310>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fabe 	bl	8000168 <__aeabi_dsub>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 fc72 	bl	80004d8 <__aeabi_dmul>
 8009bf4:	4b70      	ldr	r3, [pc, #448]	; (8009db8 <__ieee754_asin+0x320>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f7f6 fab8 	bl	800016c <__adddf3>
 8009bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8009c00:	4620      	mov	r0, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	f000 fb34 	bl	800a270 <__ieee754_sqrt>
 8009c08:	4b6d      	ldr	r3, [pc, #436]	; (8009dc0 <__ieee754_asin+0x328>)
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	429f      	cmp	r7, r3
 8009c0e:	468b      	mov	fp, r1
 8009c10:	f340 80d8 	ble.w	8009dc4 <__ieee754_asin+0x32c>
 8009c14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fd86 	bl	800072c <__aeabi_ddiv>
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	f7f6 fc58 	bl	80004d8 <__aeabi_dmul>
 8009c28:	4652      	mov	r2, sl
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	f7f6 fa9e 	bl	800016c <__adddf3>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	f7f6 fa9a 	bl	800016c <__adddf3>
 8009c38:	a345      	add	r3, pc, #276	; (adr r3, 8009d50 <__ieee754_asin+0x2b8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fa93 	bl	8000168 <__aeabi_dsub>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	a140      	add	r1, pc, #256	; (adr r1, 8009d48 <__ieee754_asin+0x2b0>)
 8009c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4c:	f7f6 fa8c 	bl	8000168 <__aeabi_dsub>
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	4604      	mov	r4, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfdc      	itt	le
 8009c58:	4602      	movle	r2, r0
 8009c5a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009c5e:	460d      	mov	r5, r1
 8009c60:	bfdc      	itt	le
 8009c62:	4614      	movle	r4, r2
 8009c64:	461d      	movle	r5, r3
 8009c66:	e748      	b.n	8009afa <__ieee754_asin+0x62>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	f7f6 fc34 	bl	80004d8 <__aeabi_dmul>
 8009c70:	a33b      	add	r3, pc, #236	; (adr r3, 8009d60 <__ieee754_asin+0x2c8>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	f7f6 fc2d 	bl	80004d8 <__aeabi_dmul>
 8009c7e:	a33a      	add	r3, pc, #232	; (adr r3, 8009d68 <__ieee754_asin+0x2d0>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fa72 	bl	800016c <__adddf3>
 8009c88:	4632      	mov	r2, r6
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	f7f6 fc24 	bl	80004d8 <__aeabi_dmul>
 8009c90:	a337      	add	r3, pc, #220	; (adr r3, 8009d70 <__ieee754_asin+0x2d8>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f7f6 fa67 	bl	8000168 <__aeabi_dsub>
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	f7f6 fc1b 	bl	80004d8 <__aeabi_dmul>
 8009ca2:	a335      	add	r3, pc, #212	; (adr r3, 8009d78 <__ieee754_asin+0x2e0>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 fa60 	bl	800016c <__adddf3>
 8009cac:	4632      	mov	r2, r6
 8009cae:	463b      	mov	r3, r7
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	a332      	add	r3, pc, #200	; (adr r3, 8009d80 <__ieee754_asin+0x2e8>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fa55 	bl	8000168 <__aeabi_dsub>
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	f7f6 fc09 	bl	80004d8 <__aeabi_dmul>
 8009cc6:	a330      	add	r3, pc, #192	; (adr r3, 8009d88 <__ieee754_asin+0x2f0>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f7f6 fa4e 	bl	800016c <__adddf3>
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	f7f6 fc00 	bl	80004d8 <__aeabi_dmul>
 8009cd8:	a32d      	add	r3, pc, #180	; (adr r3, 8009d90 <__ieee754_asin+0x2f8>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fbf7 	bl	80004d8 <__aeabi_dmul>
 8009cea:	a32b      	add	r3, pc, #172	; (adr r3, 8009d98 <__ieee754_asin+0x300>)
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f7f6 fa3a 	bl	8000168 <__aeabi_dsub>
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	f7f6 fbee 	bl	80004d8 <__aeabi_dmul>
 8009cfc:	a328      	add	r3, pc, #160	; (adr r3, 8009da0 <__ieee754_asin+0x308>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f7f6 fa33 	bl	800016c <__adddf3>
 8009d06:	4632      	mov	r2, r6
 8009d08:	463b      	mov	r3, r7
 8009d0a:	f7f6 fbe5 	bl	80004d8 <__aeabi_dmul>
 8009d0e:	a326      	add	r3, pc, #152	; (adr r3, 8009da8 <__ieee754_asin+0x310>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f7f6 fa28 	bl	8000168 <__aeabi_dsub>
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	f7f6 fbdc 	bl	80004d8 <__aeabi_dmul>
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <__ieee754_asin+0x320>)
 8009d24:	f7f6 fa22 	bl	800016c <__adddf3>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fcfc 	bl	800072c <__aeabi_ddiv>
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	e6cc      	b.n	8009ae0 <__ieee754_asin+0x48>
 8009d46:	bf00      	nop
 8009d48:	54442d18 	.word	0x54442d18
 8009d4c:	3ff921fb 	.word	0x3ff921fb
 8009d50:	33145c07 	.word	0x33145c07
 8009d54:	3c91a626 	.word	0x3c91a626
 8009d58:	8800759c 	.word	0x8800759c
 8009d5c:	7e37e43c 	.word	0x7e37e43c
 8009d60:	0dfdf709 	.word	0x0dfdf709
 8009d64:	3f023de1 	.word	0x3f023de1
 8009d68:	7501b288 	.word	0x7501b288
 8009d6c:	3f49efe0 	.word	0x3f49efe0
 8009d70:	b5688f3b 	.word	0xb5688f3b
 8009d74:	3fa48228 	.word	0x3fa48228
 8009d78:	0e884455 	.word	0x0e884455
 8009d7c:	3fc9c155 	.word	0x3fc9c155
 8009d80:	03eb6f7d 	.word	0x03eb6f7d
 8009d84:	3fd4d612 	.word	0x3fd4d612
 8009d88:	55555555 	.word	0x55555555
 8009d8c:	3fc55555 	.word	0x3fc55555
 8009d90:	b12e9282 	.word	0xb12e9282
 8009d94:	3fb3b8c5 	.word	0x3fb3b8c5
 8009d98:	1b8d0159 	.word	0x1b8d0159
 8009d9c:	3fe6066c 	.word	0x3fe6066c
 8009da0:	9c598ac8 	.word	0x9c598ac8
 8009da4:	40002ae5 	.word	0x40002ae5
 8009da8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009dac:	40033a27 	.word	0x40033a27
 8009db0:	3fefffff 	.word	0x3fefffff
 8009db4:	3fdfffff 	.word	0x3fdfffff
 8009db8:	3ff00000 	.word	0x3ff00000
 8009dbc:	3fe00000 	.word	0x3fe00000
 8009dc0:	3fef3332 	.word	0x3fef3332
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	460f      	mov	r7, r1
 8009dca:	f7f6 f9cf 	bl	800016c <__adddf3>
 8009dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fca7 	bl	800072c <__aeabi_ddiv>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009de6:	f7f6 fb77 	bl	80004d8 <__aeabi_dmul>
 8009dea:	2600      	movs	r6, #0
 8009dec:	4680      	mov	r8, r0
 8009dee:	4689      	mov	r9, r1
 8009df0:	4632      	mov	r2, r6
 8009df2:	465b      	mov	r3, fp
 8009df4:	4630      	mov	r0, r6
 8009df6:	4659      	mov	r1, fp
 8009df8:	f7f6 fb6e 	bl	80004d8 <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7f6 f9b0 	bl	8000168 <__aeabi_dsub>
 8009e08:	4632      	mov	r2, r6
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	465b      	mov	r3, fp
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 f9aa 	bl	800016c <__adddf3>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 fc84 	bl	800072c <__aeabi_ddiv>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	f7f6 f9a0 	bl	800016c <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	a113      	add	r1, pc, #76	; (adr r1, 8009e80 <__ieee754_asin+0x3e8>)
 8009e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e36:	f7f6 f997 	bl	8000168 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	4632      	mov	r2, r6
 8009e48:	4604      	mov	r4, r0
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 f98b 	bl	800016c <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	a10b      	add	r1, pc, #44	; (adr r1, 8009e88 <__ieee754_asin+0x3f0>)
 8009e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e60:	f7f6 f982 	bl	8000168 <__aeabi_dsub>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4620      	mov	r0, r4
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	f7f6 f97c 	bl	8000168 <__aeabi_dsub>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	a104      	add	r1, pc, #16	; (adr r1, 8009e88 <__ieee754_asin+0x3f0>)
 8009e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e7a:	e6e7      	b.n	8009c4c <__ieee754_asin+0x1b4>
 8009e7c:	f3af 8000 	nop.w
 8009e80:	33145c07 	.word	0x33145c07
 8009e84:	3c91a626 	.word	0x3c91a626
 8009e88:	54442d18 	.word	0x54442d18
 8009e8c:	3fe921fb 	.word	0x3fe921fb

08009e90 <__ieee754_rem_pio2>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	4614      	mov	r4, r2
 8009e96:	4ac2      	ldr	r2, [pc, #776]	; (800a1a0 <__ieee754_rem_pio2+0x310>)
 8009e98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009e9c:	4592      	cmp	sl, r2
 8009e9e:	b08d      	sub	sp, #52	; 0x34
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	dc07      	bgt.n	8009eb4 <__ieee754_rem_pio2+0x24>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	e9c4 0100 	strd	r0, r1, [r4]
 8009eac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	e023      	b.n	8009efc <__ieee754_rem_pio2+0x6c>
 8009eb4:	4abb      	ldr	r2, [pc, #748]	; (800a1a4 <__ieee754_rem_pio2+0x314>)
 8009eb6:	4592      	cmp	sl, r2
 8009eb8:	dc71      	bgt.n	8009f9e <__ieee754_rem_pio2+0x10e>
 8009eba:	a3ab      	add	r3, pc, #684	; (adr r3, 800a168 <__ieee754_rem_pio2+0x2d8>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	4db9      	ldr	r5, [pc, #740]	; (800a1a8 <__ieee754_rem_pio2+0x318>)
 8009ec4:	dd36      	ble.n	8009f34 <__ieee754_rem_pio2+0xa4>
 8009ec6:	f7f6 f94f 	bl	8000168 <__aeabi_dsub>
 8009eca:	45aa      	cmp	sl, r5
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	d018      	beq.n	8009f04 <__ieee754_rem_pio2+0x74>
 8009ed2:	a3a7      	add	r3, pc, #668	; (adr r3, 800a170 <__ieee754_rem_pio2+0x2e0>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f7f6 f946 	bl	8000168 <__aeabi_dsub>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	e9c4 2300 	strd	r2, r3, [r4]
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 f93e 	bl	8000168 <__aeabi_dsub>
 8009eec:	a3a0      	add	r3, pc, #640	; (adr r3, 800a170 <__ieee754_rem_pio2+0x2e0>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 f939 	bl	8000168 <__aeabi_dsub>
 8009ef6:	2501      	movs	r5, #1
 8009ef8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009efc:	4628      	mov	r0, r5
 8009efe:	b00d      	add	sp, #52	; 0x34
 8009f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	a39c      	add	r3, pc, #624	; (adr r3, 800a178 <__ieee754_rem_pio2+0x2e8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f92d 	bl	8000168 <__aeabi_dsub>
 8009f0e:	a39c      	add	r3, pc, #624	; (adr r3, 800a180 <__ieee754_rem_pio2+0x2f0>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 f926 	bl	8000168 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4630      	mov	r0, r6
 8009f22:	e9c4 2300 	strd	r2, r3, [r4]
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 f91e 	bl	8000168 <__aeabi_dsub>
 8009f2c:	a394      	add	r3, pc, #592	; (adr r3, 800a180 <__ieee754_rem_pio2+0x2f0>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	e7de      	b.n	8009ef2 <__ieee754_rem_pio2+0x62>
 8009f34:	f7f6 f91a 	bl	800016c <__adddf3>
 8009f38:	45aa      	cmp	sl, r5
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	d016      	beq.n	8009f6e <__ieee754_rem_pio2+0xde>
 8009f40:	a38b      	add	r3, pc, #556	; (adr r3, 800a170 <__ieee754_rem_pio2+0x2e0>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 f911 	bl	800016c <__adddf3>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4630      	mov	r0, r6
 8009f50:	e9c4 2300 	strd	r2, r3, [r4]
 8009f54:	4639      	mov	r1, r7
 8009f56:	f7f6 f907 	bl	8000168 <__aeabi_dsub>
 8009f5a:	a385      	add	r3, pc, #532	; (adr r3, 800a170 <__ieee754_rem_pio2+0x2e0>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 f904 	bl	800016c <__adddf3>
 8009f64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009f68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f6c:	e7c6      	b.n	8009efc <__ieee754_rem_pio2+0x6c>
 8009f6e:	a382      	add	r3, pc, #520	; (adr r3, 800a178 <__ieee754_rem_pio2+0x2e8>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 f8fa 	bl	800016c <__adddf3>
 8009f78:	a381      	add	r3, pc, #516	; (adr r3, 800a180 <__ieee754_rem_pio2+0x2f0>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	f7f6 f8f3 	bl	800016c <__adddf3>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	e9c4 2300 	strd	r2, r3, [r4]
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 f8e9 	bl	8000168 <__aeabi_dsub>
 8009f96:	a37a      	add	r3, pc, #488	; (adr r3, 800a180 <__ieee754_rem_pio2+0x2f0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	e7e0      	b.n	8009f60 <__ieee754_rem_pio2+0xd0>
 8009f9e:	4a83      	ldr	r2, [pc, #524]	; (800a1ac <__ieee754_rem_pio2+0x31c>)
 8009fa0:	4592      	cmp	sl, r2
 8009fa2:	f300 80d2 	bgt.w	800a14a <__ieee754_rem_pio2+0x2ba>
 8009fa6:	f000 fecd 	bl	800ad44 <fabs>
 8009faa:	a377      	add	r3, pc, #476	; (adr r3, 800a188 <__ieee754_rem_pio2+0x2f8>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	460f      	mov	r7, r1
 8009fb4:	f7f6 fa90 	bl	80004d8 <__aeabi_dmul>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4b7d      	ldr	r3, [pc, #500]	; (800a1b0 <__ieee754_rem_pio2+0x320>)
 8009fbc:	f7f6 f8d6 	bl	800016c <__adddf3>
 8009fc0:	f7f6 fd3a 	bl	8000a38 <__aeabi_d2iz>
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	f7f6 fa1d 	bl	8000404 <__aeabi_i2d>
 8009fca:	a367      	add	r3, pc, #412	; (adr r3, 800a168 <__ieee754_rem_pio2+0x2d8>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd4:	f7f6 fa80 	bl	80004d8 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f7f6 f8c2 	bl	8000168 <__aeabi_dsub>
 8009fe4:	a362      	add	r3, pc, #392	; (adr r3, 800a170 <__ieee754_rem_pio2+0x2e0>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	4606      	mov	r6, r0
 8009fec:	460f      	mov	r7, r1
 8009fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff2:	f7f6 fa71 	bl	80004d8 <__aeabi_dmul>
 8009ff6:	2d1f      	cmp	r5, #31
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	dc0e      	bgt.n	800a01c <__ieee754_rem_pio2+0x18c>
 8009ffe:	4b6d      	ldr	r3, [pc, #436]	; (800a1b4 <__ieee754_rem_pio2+0x324>)
 800a000:	1e6a      	subs	r2, r5, #1
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	4553      	cmp	r3, sl
 800a008:	d008      	beq.n	800a01c <__ieee754_rem_pio2+0x18c>
 800a00a:	4642      	mov	r2, r8
 800a00c:	464b      	mov	r3, r9
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f8a9 	bl	8000168 <__aeabi_dsub>
 800a016:	e9c4 0100 	strd	r0, r1, [r4]
 800a01a:	e011      	b.n	800a040 <__ieee754_rem_pio2+0x1b0>
 800a01c:	464b      	mov	r3, r9
 800a01e:	4642      	mov	r2, r8
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 f8a0 	bl	8000168 <__aeabi_dsub>
 800a028:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a02c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a030:	ebaa 0303 	sub.w	r3, sl, r3
 800a034:	2b10      	cmp	r3, #16
 800a036:	dc1f      	bgt.n	800a078 <__ieee754_rem_pio2+0x1e8>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	e9c4 2300 	strd	r2, r3, [r4]
 800a040:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a044:	4630      	mov	r0, r6
 800a046:	4653      	mov	r3, sl
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 f88d 	bl	8000168 <__aeabi_dsub>
 800a04e:	4642      	mov	r2, r8
 800a050:	464b      	mov	r3, r9
 800a052:	f7f6 f889 	bl	8000168 <__aeabi_dsub>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	f1bb 0f00 	cmp.w	fp, #0
 800a05e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a062:	f6bf af4b 	bge.w	8009efc <__ieee754_rem_pio2+0x6c>
 800a066:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a06a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800a06e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a072:	60e1      	str	r1, [r4, #12]
 800a074:	426d      	negs	r5, r5
 800a076:	e741      	b.n	8009efc <__ieee754_rem_pio2+0x6c>
 800a078:	a33f      	add	r3, pc, #252	; (adr r3, 800a178 <__ieee754_rem_pio2+0x2e8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a082:	f7f6 fa29 	bl	80004d8 <__aeabi_dmul>
 800a086:	4680      	mov	r8, r0
 800a088:	4689      	mov	r9, r1
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 f869 	bl	8000168 <__aeabi_dsub>
 800a096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f861 	bl	8000168 <__aeabi_dsub>
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	a334      	add	r3, pc, #208	; (adr r3, 800a180 <__ieee754_rem_pio2+0x2f0>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0bc:	f7f6 fa0c 	bl	80004d8 <__aeabi_dmul>
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 f850 	bl	8000168 <__aeabi_dsub>
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4689      	mov	r9, r1
 800a0d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d4:	f7f6 f848 	bl	8000168 <__aeabi_dsub>
 800a0d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0dc:	ebaa 0a03 	sub.w	sl, sl, r3
 800a0e0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800a0e4:	dc06      	bgt.n	800a0f4 <__ieee754_rem_pio2+0x264>
 800a0e6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	e9c4 2300 	strd	r2, r3, [r4]
 800a0f2:	e7a5      	b.n	800a040 <__ieee754_rem_pio2+0x1b0>
 800a0f4:	a326      	add	r3, pc, #152	; (adr r3, 800a190 <__ieee754_rem_pio2+0x300>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0fe:	f7f6 f9eb 	bl	80004d8 <__aeabi_dmul>
 800a102:	4680      	mov	r8, r0
 800a104:	4689      	mov	r9, r1
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a10e:	f7f6 f82b 	bl	8000168 <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a11e:	f7f6 f823 	bl	8000168 <__aeabi_dsub>
 800a122:	4642      	mov	r2, r8
 800a124:	464b      	mov	r3, r9
 800a126:	f7f6 f81f 	bl	8000168 <__aeabi_dsub>
 800a12a:	a31b      	add	r3, pc, #108	; (adr r3, 800a198 <__ieee754_rem_pio2+0x308>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4680      	mov	r8, r0
 800a132:	4689      	mov	r9, r1
 800a134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a138:	f7f6 f9ce 	bl	80004d8 <__aeabi_dmul>
 800a13c:	4642      	mov	r2, r8
 800a13e:	464b      	mov	r3, r9
 800a140:	f7f6 f812 	bl	8000168 <__aeabi_dsub>
 800a144:	4680      	mov	r8, r0
 800a146:	4689      	mov	r9, r1
 800a148:	e75f      	b.n	800a00a <__ieee754_rem_pio2+0x17a>
 800a14a:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <__ieee754_rem_pio2+0x328>)
 800a14c:	4592      	cmp	sl, r2
 800a14e:	dd35      	ble.n	800a1bc <__ieee754_rem_pio2+0x32c>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	f7f6 f808 	bl	8000168 <__aeabi_dsub>
 800a158:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a15c:	e9c4 0100 	strd	r0, r1, [r4]
 800a160:	e6a6      	b.n	8009eb0 <__ieee754_rem_pio2+0x20>
 800a162:	bf00      	nop
 800a164:	f3af 8000 	nop.w
 800a168:	54400000 	.word	0x54400000
 800a16c:	3ff921fb 	.word	0x3ff921fb
 800a170:	1a626331 	.word	0x1a626331
 800a174:	3dd0b461 	.word	0x3dd0b461
 800a178:	1a600000 	.word	0x1a600000
 800a17c:	3dd0b461 	.word	0x3dd0b461
 800a180:	2e037073 	.word	0x2e037073
 800a184:	3ba3198a 	.word	0x3ba3198a
 800a188:	6dc9c883 	.word	0x6dc9c883
 800a18c:	3fe45f30 	.word	0x3fe45f30
 800a190:	2e000000 	.word	0x2e000000
 800a194:	3ba3198a 	.word	0x3ba3198a
 800a198:	252049c1 	.word	0x252049c1
 800a19c:	397b839a 	.word	0x397b839a
 800a1a0:	3fe921fb 	.word	0x3fe921fb
 800a1a4:	4002d97b 	.word	0x4002d97b
 800a1a8:	3ff921fb 	.word	0x3ff921fb
 800a1ac:	413921fb 	.word	0x413921fb
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	0800b37c 	.word	0x0800b37c
 800a1b8:	7fefffff 	.word	0x7fefffff
 800a1bc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a1c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a1c4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	f7f6 fc34 	bl	8000a38 <__aeabi_d2iz>
 800a1d0:	f7f6 f918 	bl	8000404 <__aeabi_i2d>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1e0:	f7f5 ffc2 	bl	8000168 <__aeabi_dsub>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4b20      	ldr	r3, [pc, #128]	; (800a268 <__ieee754_rem_pio2+0x3d8>)
 800a1e8:	f7f6 f976 	bl	80004d8 <__aeabi_dmul>
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	f7f6 fc22 	bl	8000a38 <__aeabi_d2iz>
 800a1f4:	f7f6 f906 	bl	8000404 <__aeabi_i2d>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a204:	f7f5 ffb0 	bl	8000168 <__aeabi_dsub>
 800a208:	2200      	movs	r2, #0
 800a20a:	4b17      	ldr	r3, [pc, #92]	; (800a268 <__ieee754_rem_pio2+0x3d8>)
 800a20c:	f7f6 f964 	bl	80004d8 <__aeabi_dmul>
 800a210:	f04f 0803 	mov.w	r8, #3
 800a214:	2600      	movs	r6, #0
 800a216:	2700      	movs	r7, #0
 800a218:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a21c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a220:	4632      	mov	r2, r6
 800a222:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a226:	463b      	mov	r3, r7
 800a228:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a22c:	f7f6 fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 800a230:	b9b8      	cbnz	r0, 800a262 <__ieee754_rem_pio2+0x3d2>
 800a232:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <__ieee754_rem_pio2+0x3dc>)
 800a234:	462a      	mov	r2, r5
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	2302      	movs	r3, #2
 800a23a:	4621      	mov	r1, r4
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	a806      	add	r0, sp, #24
 800a240:	4643      	mov	r3, r8
 800a242:	f000 f97f 	bl	800a544 <__kernel_rem_pio2>
 800a246:	f1bb 0f00 	cmp.w	fp, #0
 800a24a:	4605      	mov	r5, r0
 800a24c:	f6bf ae56 	bge.w	8009efc <__ieee754_rem_pio2+0x6c>
 800a250:	6863      	ldr	r3, [r4, #4]
 800a252:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a256:	6063      	str	r3, [r4, #4]
 800a258:	68e3      	ldr	r3, [r4, #12]
 800a25a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a25e:	60e3      	str	r3, [r4, #12]
 800a260:	e708      	b.n	800a074 <__ieee754_rem_pio2+0x1e4>
 800a262:	46d0      	mov	r8, sl
 800a264:	e7dc      	b.n	800a220 <__ieee754_rem_pio2+0x390>
 800a266:	bf00      	nop
 800a268:	41700000 	.word	0x41700000
 800a26c:	0800b3fc 	.word	0x0800b3fc

0800a270 <__ieee754_sqrt>:
 800a270:	4b54      	ldr	r3, [pc, #336]	; (800a3c4 <__ieee754_sqrt+0x154>)
 800a272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a276:	438b      	bics	r3, r1
 800a278:	4606      	mov	r6, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	460a      	mov	r2, r1
 800a27e:	460c      	mov	r4, r1
 800a280:	d10f      	bne.n	800a2a2 <__ieee754_sqrt+0x32>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	f7f6 f927 	bl	80004d8 <__aeabi_dmul>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4630      	mov	r0, r6
 800a290:	4629      	mov	r1, r5
 800a292:	f7f5 ff6b 	bl	800016c <__adddf3>
 800a296:	4606      	mov	r6, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	4630      	mov	r0, r6
 800a29c:	4629      	mov	r1, r5
 800a29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	dc0e      	bgt.n	800a2c8 <__ieee754_sqrt+0x58>
 800a2aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a2ae:	ea5c 0707 	orrs.w	r7, ip, r7
 800a2b2:	d0f2      	beq.n	800a29a <__ieee754_sqrt+0x2a>
 800a2b4:	b141      	cbz	r1, 800a2c8 <__ieee754_sqrt+0x58>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	f7f5 ff55 	bl	8000168 <__aeabi_dsub>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	f7f6 fa33 	bl	800072c <__aeabi_ddiv>
 800a2c6:	e7e6      	b.n	800a296 <__ieee754_sqrt+0x26>
 800a2c8:	1512      	asrs	r2, r2, #20
 800a2ca:	d074      	beq.n	800a3b6 <__ieee754_sqrt+0x146>
 800a2cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a2d0:	07d5      	lsls	r5, r2, #31
 800a2d2:	f04f 0500 	mov.w	r5, #0
 800a2d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2da:	bf48      	it	mi
 800a2dc:	0fd9      	lsrmi	r1, r3, #31
 800a2de:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a2e2:	bf44      	itt	mi
 800a2e4:	005b      	lslmi	r3, r3, #1
 800a2e6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a2ea:	1051      	asrs	r1, r2, #1
 800a2ec:	0fda      	lsrs	r2, r3, #31
 800a2ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	2216      	movs	r2, #22
 800a2f6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	1987      	adds	r7, r0, r6
 800a2fe:	42a7      	cmp	r7, r4
 800a300:	bfde      	ittt	le
 800a302:	19b8      	addle	r0, r7, r6
 800a304:	1be4      	suble	r4, r4, r7
 800a306:	19ad      	addle	r5, r5, r6
 800a308:	0fdf      	lsrs	r7, r3, #31
 800a30a:	3a01      	subs	r2, #1
 800a30c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a310:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a314:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a318:	d1f0      	bne.n	800a2fc <__ieee754_sqrt+0x8c>
 800a31a:	f04f 0c20 	mov.w	ip, #32
 800a31e:	4696      	mov	lr, r2
 800a320:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a324:	4284      	cmp	r4, r0
 800a326:	eb06 070e 	add.w	r7, r6, lr
 800a32a:	dc02      	bgt.n	800a332 <__ieee754_sqrt+0xc2>
 800a32c:	d112      	bne.n	800a354 <__ieee754_sqrt+0xe4>
 800a32e:	429f      	cmp	r7, r3
 800a330:	d810      	bhi.n	800a354 <__ieee754_sqrt+0xe4>
 800a332:	2f00      	cmp	r7, #0
 800a334:	eb07 0e06 	add.w	lr, r7, r6
 800a338:	da42      	bge.n	800a3c0 <__ieee754_sqrt+0x150>
 800a33a:	f1be 0f00 	cmp.w	lr, #0
 800a33e:	db3f      	blt.n	800a3c0 <__ieee754_sqrt+0x150>
 800a340:	f100 0801 	add.w	r8, r0, #1
 800a344:	1a24      	subs	r4, r4, r0
 800a346:	4640      	mov	r0, r8
 800a348:	429f      	cmp	r7, r3
 800a34a:	bf88      	it	hi
 800a34c:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800a350:	1bdb      	subs	r3, r3, r7
 800a352:	4432      	add	r2, r6
 800a354:	0064      	lsls	r4, r4, #1
 800a356:	f1bc 0c01 	subs.w	ip, ip, #1
 800a35a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a35e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a366:	d1dd      	bne.n	800a324 <__ieee754_sqrt+0xb4>
 800a368:	4323      	orrs	r3, r4
 800a36a:	d006      	beq.n	800a37a <__ieee754_sqrt+0x10a>
 800a36c:	1c54      	adds	r4, r2, #1
 800a36e:	bf0b      	itete	eq
 800a370:	4662      	moveq	r2, ip
 800a372:	3201      	addne	r2, #1
 800a374:	3501      	addeq	r5, #1
 800a376:	f022 0201 	bicne.w	r2, r2, #1
 800a37a:	106b      	asrs	r3, r5, #1
 800a37c:	0852      	lsrs	r2, r2, #1
 800a37e:	07e8      	lsls	r0, r5, #31
 800a380:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a384:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a388:	bf48      	it	mi
 800a38a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a38e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a392:	4616      	mov	r6, r2
 800a394:	e781      	b.n	800a29a <__ieee754_sqrt+0x2a>
 800a396:	0adc      	lsrs	r4, r3, #11
 800a398:	3915      	subs	r1, #21
 800a39a:	055b      	lsls	r3, r3, #21
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	d0fa      	beq.n	800a396 <__ieee754_sqrt+0x126>
 800a3a0:	02e6      	lsls	r6, r4, #11
 800a3a2:	d50a      	bpl.n	800a3ba <__ieee754_sqrt+0x14a>
 800a3a4:	f1c2 0020 	rsb	r0, r2, #32
 800a3a8:	fa23 f000 	lsr.w	r0, r3, r0
 800a3ac:	1e55      	subs	r5, r2, #1
 800a3ae:	4093      	lsls	r3, r2
 800a3b0:	4304      	orrs	r4, r0
 800a3b2:	1b4a      	subs	r2, r1, r5
 800a3b4:	e78a      	b.n	800a2cc <__ieee754_sqrt+0x5c>
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	e7f0      	b.n	800a39c <__ieee754_sqrt+0x12c>
 800a3ba:	0064      	lsls	r4, r4, #1
 800a3bc:	3201      	adds	r2, #1
 800a3be:	e7ef      	b.n	800a3a0 <__ieee754_sqrt+0x130>
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	e7bf      	b.n	800a344 <__ieee754_sqrt+0xd4>
 800a3c4:	7ff00000 	.word	0x7ff00000

0800a3c8 <__kernel_cos>:
 800a3c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a3d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	e9cd 2300 	strd	r2, r3, [sp]
 800a3dc:	da04      	bge.n	800a3e8 <__kernel_cos+0x20>
 800a3de:	f7f6 fb2b 	bl	8000a38 <__aeabi_d2iz>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f000 8086 	beq.w	800a4f4 <__kernel_cos+0x12c>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f6 f872 	bl	80004d8 <__aeabi_dmul>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4b4e      	ldr	r3, [pc, #312]	; (800a530 <__kernel_cos+0x168>)
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	f7f6 f86c 	bl	80004d8 <__aeabi_dmul>
 800a400:	a33f      	add	r3, pc, #252	; (adr r3, 800a500 <__kernel_cos+0x138>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	4682      	mov	sl, r0
 800a408:	468b      	mov	fp, r1
 800a40a:	4620      	mov	r0, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f6 f863 	bl	80004d8 <__aeabi_dmul>
 800a412:	a33d      	add	r3, pc, #244	; (adr r3, 800a508 <__kernel_cos+0x140>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 fea8 	bl	800016c <__adddf3>
 800a41c:	4622      	mov	r2, r4
 800a41e:	462b      	mov	r3, r5
 800a420:	f7f6 f85a 	bl	80004d8 <__aeabi_dmul>
 800a424:	a33a      	add	r3, pc, #232	; (adr r3, 800a510 <__kernel_cos+0x148>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 fe9d 	bl	8000168 <__aeabi_dsub>
 800a42e:	4622      	mov	r2, r4
 800a430:	462b      	mov	r3, r5
 800a432:	f7f6 f851 	bl	80004d8 <__aeabi_dmul>
 800a436:	a338      	add	r3, pc, #224	; (adr r3, 800a518 <__kernel_cos+0x150>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 fe96 	bl	800016c <__adddf3>
 800a440:	4622      	mov	r2, r4
 800a442:	462b      	mov	r3, r5
 800a444:	f7f6 f848 	bl	80004d8 <__aeabi_dmul>
 800a448:	a335      	add	r3, pc, #212	; (adr r3, 800a520 <__kernel_cos+0x158>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 fe8b 	bl	8000168 <__aeabi_dsub>
 800a452:	4622      	mov	r2, r4
 800a454:	462b      	mov	r3, r5
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	a333      	add	r3, pc, #204	; (adr r3, 800a528 <__kernel_cos+0x160>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 fe84 	bl	800016c <__adddf3>
 800a464:	4622      	mov	r2, r4
 800a466:	462b      	mov	r3, r5
 800a468:	f7f6 f836 	bl	80004d8 <__aeabi_dmul>
 800a46c:	4622      	mov	r2, r4
 800a46e:	462b      	mov	r3, r5
 800a470:	f7f6 f832 	bl	80004d8 <__aeabi_dmul>
 800a474:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4639      	mov	r1, r7
 800a480:	f7f6 f82a 	bl	80004d8 <__aeabi_dmul>
 800a484:	460b      	mov	r3, r1
 800a486:	4602      	mov	r2, r0
 800a488:	4629      	mov	r1, r5
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7f5 fe6c 	bl	8000168 <__aeabi_dsub>
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <__kernel_cos+0x16c>)
 800a492:	4680      	mov	r8, r0
 800a494:	429e      	cmp	r6, r3
 800a496:	4689      	mov	r9, r1
 800a498:	dc0e      	bgt.n	800a4b8 <__kernel_cos+0xf0>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4650      	mov	r0, sl
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	f7f5 fe61 	bl	8000168 <__aeabi_dsub>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4922      	ldr	r1, [pc, #136]	; (800a538 <__kernel_cos+0x170>)
 800a4ae:	f7f5 fe5b 	bl	8000168 <__aeabi_dsub>
 800a4b2:	b003      	add	sp, #12
 800a4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b8:	2400      	movs	r4, #0
 800a4ba:	4b20      	ldr	r3, [pc, #128]	; (800a53c <__kernel_cos+0x174>)
 800a4bc:	4622      	mov	r2, r4
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	bfcc      	ite	gt
 800a4c2:	4d1f      	ldrgt	r5, [pc, #124]	; (800a540 <__kernel_cos+0x178>)
 800a4c4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a4c8:	462b      	mov	r3, r5
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	491a      	ldr	r1, [pc, #104]	; (800a538 <__kernel_cos+0x170>)
 800a4ce:	f7f5 fe4b 	bl	8000168 <__aeabi_dsub>
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	462b      	mov	r3, r5
 800a4da:	4650      	mov	r0, sl
 800a4dc:	4659      	mov	r1, fp
 800a4de:	f7f5 fe43 	bl	8000168 <__aeabi_dsub>
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	f7f5 fe3f 	bl	8000168 <__aeabi_dsub>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	e7dc      	b.n	800a4ae <__kernel_cos+0xe6>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	4910      	ldr	r1, [pc, #64]	; (800a538 <__kernel_cos+0x170>)
 800a4f8:	e7db      	b.n	800a4b2 <__kernel_cos+0xea>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	be8838d4 	.word	0xbe8838d4
 800a504:	bda8fae9 	.word	0xbda8fae9
 800a508:	bdb4b1c4 	.word	0xbdb4b1c4
 800a50c:	3e21ee9e 	.word	0x3e21ee9e
 800a510:	809c52ad 	.word	0x809c52ad
 800a514:	3e927e4f 	.word	0x3e927e4f
 800a518:	19cb1590 	.word	0x19cb1590
 800a51c:	3efa01a0 	.word	0x3efa01a0
 800a520:	16c15177 	.word	0x16c15177
 800a524:	3f56c16c 	.word	0x3f56c16c
 800a528:	5555554c 	.word	0x5555554c
 800a52c:	3fa55555 	.word	0x3fa55555
 800a530:	3fe00000 	.word	0x3fe00000
 800a534:	3fd33332 	.word	0x3fd33332
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fe90000 	.word	0x3fe90000
 800a540:	3fd20000 	.word	0x3fd20000

0800a544 <__kernel_rem_pio2>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	9104      	str	r1, [sp, #16]
 800a550:	4bbf      	ldr	r3, [pc, #764]	; (800a850 <__kernel_rem_pio2+0x30c>)
 800a552:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a554:	1ed4      	subs	r4, r2, #3
 800a556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a55a:	2500      	movs	r5, #0
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	9008      	str	r0, [sp, #32]
 800a562:	3b01      	subs	r3, #1
 800a564:	9306      	str	r3, [sp, #24]
 800a566:	2318      	movs	r3, #24
 800a568:	fb94 f4f3 	sdiv	r4, r4, r3
 800a56c:	f06f 0317 	mvn.w	r3, #23
 800a570:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a574:	fb04 3303 	mla	r3, r4, r3, r3
 800a578:	eb03 0a02 	add.w	sl, r3, r2
 800a57c:	9a06      	ldr	r2, [sp, #24]
 800a57e:	9b02      	ldr	r3, [sp, #8]
 800a580:	1aa7      	subs	r7, r4, r2
 800a582:	eb03 0802 	add.w	r8, r3, r2
 800a586:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a588:	2200      	movs	r2, #0
 800a58a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a58e:	2300      	movs	r3, #0
 800a590:	ae1e      	add	r6, sp, #120	; 0x78
 800a592:	4545      	cmp	r5, r8
 800a594:	dd14      	ble.n	800a5c0 <__kernel_rem_pio2+0x7c>
 800a596:	2600      	movs	r6, #0
 800a598:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	429e      	cmp	r6, r3
 800a5a0:	dc39      	bgt.n	800a616 <__kernel_rem_pio2+0xd2>
 800a5a2:	9b08      	ldr	r3, [sp, #32]
 800a5a4:	f04f 0800 	mov.w	r8, #0
 800a5a8:	3b08      	subs	r3, #8
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	9b07      	ldr	r3, [sp, #28]
 800a5ae:	f04f 0900 	mov.w	r9, #0
 800a5b2:	199d      	adds	r5, r3, r6
 800a5b4:	ab20      	add	r3, sp, #128	; 0x80
 800a5b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	2700      	movs	r7, #0
 800a5be:	e023      	b.n	800a608 <__kernel_rem_pio2+0xc4>
 800a5c0:	42ef      	cmn	r7, r5
 800a5c2:	d40b      	bmi.n	800a5dc <__kernel_rem_pio2+0x98>
 800a5c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5c8:	e9cd 2300 	strd	r2, r3, [sp]
 800a5cc:	f7f5 ff1a 	bl	8000404 <__aeabi_i2d>
 800a5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800a5d8:	3501      	adds	r5, #1
 800a5da:	e7da      	b.n	800a592 <__kernel_rem_pio2+0x4e>
 800a5dc:	4610      	mov	r0, r2
 800a5de:	4619      	mov	r1, r3
 800a5e0:	e7f8      	b.n	800a5d4 <__kernel_rem_pio2+0x90>
 800a5e2:	9905      	ldr	r1, [sp, #20]
 800a5e4:	9d00      	ldr	r5, [sp, #0]
 800a5e6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a5ea:	9105      	str	r1, [sp, #20]
 800a5ec:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a5f0:	9500      	str	r5, [sp, #0]
 800a5f2:	f7f5 ff71 	bl	80004d8 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f5 fdb5 	bl	800016c <__adddf3>
 800a602:	4680      	mov	r8, r0
 800a604:	4689      	mov	r9, r1
 800a606:	3701      	adds	r7, #1
 800a608:	9b06      	ldr	r3, [sp, #24]
 800a60a:	429f      	cmp	r7, r3
 800a60c:	dde9      	ble.n	800a5e2 <__kernel_rem_pio2+0x9e>
 800a60e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a612:	3601      	adds	r6, #1
 800a614:	e7c2      	b.n	800a59c <__kernel_rem_pio2+0x58>
 800a616:	9b02      	ldr	r3, [sp, #8]
 800a618:	aa0c      	add	r2, sp, #48	; 0x30
 800a61a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a61e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a620:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a622:	9f02      	ldr	r7, [sp, #8]
 800a624:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a628:	930a      	str	r3, [sp, #40]	; 0x28
 800a62a:	2600      	movs	r6, #0
 800a62c:	ab98      	add	r3, sp, #608	; 0x260
 800a62e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a632:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a636:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a63a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a63e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a642:	ab98      	add	r3, sp, #608	; 0x260
 800a644:	445b      	add	r3, fp
 800a646:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800a64a:	1bbb      	subs	r3, r7, r6
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dc71      	bgt.n	800a734 <__kernel_rem_pio2+0x1f0>
 800a650:	4652      	mov	r2, sl
 800a652:	4640      	mov	r0, r8
 800a654:	4649      	mov	r1, r9
 800a656:	f000 fc07 	bl	800ae68 <scalbn>
 800a65a:	2200      	movs	r2, #0
 800a65c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	f7f5 ff38 	bl	80004d8 <__aeabi_dmul>
 800a668:	f000 fb72 	bl	800ad50 <floor>
 800a66c:	2200      	movs	r2, #0
 800a66e:	4b79      	ldr	r3, [pc, #484]	; (800a854 <__kernel_rem_pio2+0x310>)
 800a670:	f7f5 ff32 	bl	80004d8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	f7f5 fd74 	bl	8000168 <__aeabi_dsub>
 800a680:	460d      	mov	r5, r1
 800a682:	4604      	mov	r4, r0
 800a684:	f7f6 f9d8 	bl	8000a38 <__aeabi_d2iz>
 800a688:	9005      	str	r0, [sp, #20]
 800a68a:	f7f5 febb 	bl	8000404 <__aeabi_i2d>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f7f5 fd67 	bl	8000168 <__aeabi_dsub>
 800a69a:	f1ba 0f00 	cmp.w	sl, #0
 800a69e:	4680      	mov	r8, r0
 800a6a0:	4689      	mov	r9, r1
 800a6a2:	dd6c      	ble.n	800a77e <__kernel_rem_pio2+0x23a>
 800a6a4:	1e7a      	subs	r2, r7, #1
 800a6a6:	ab0c      	add	r3, sp, #48	; 0x30
 800a6a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a6ac:	f1ca 0118 	rsb	r1, sl, #24
 800a6b0:	9c05      	ldr	r4, [sp, #20]
 800a6b2:	fa40 f301 	asr.w	r3, r0, r1
 800a6b6:	441c      	add	r4, r3
 800a6b8:	408b      	lsls	r3, r1
 800a6ba:	1ac0      	subs	r0, r0, r3
 800a6bc:	ab0c      	add	r3, sp, #48	; 0x30
 800a6be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a6c2:	f1ca 0317 	rsb	r3, sl, #23
 800a6c6:	9405      	str	r4, [sp, #20]
 800a6c8:	fa40 f303 	asr.w	r3, r0, r3
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	9b00      	ldr	r3, [sp, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dd62      	ble.n	800a79a <__kernel_rem_pio2+0x256>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a6da:	4614      	mov	r4, r2
 800a6dc:	9b05      	ldr	r3, [sp, #20]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	9305      	str	r3, [sp, #20]
 800a6e2:	4297      	cmp	r7, r2
 800a6e4:	f300 809f 	bgt.w	800a826 <__kernel_rem_pio2+0x2e2>
 800a6e8:	f1ba 0f00 	cmp.w	sl, #0
 800a6ec:	dd07      	ble.n	800a6fe <__kernel_rem_pio2+0x1ba>
 800a6ee:	f1ba 0f01 	cmp.w	sl, #1
 800a6f2:	f000 80bb 	beq.w	800a86c <__kernel_rem_pio2+0x328>
 800a6f6:	f1ba 0f02 	cmp.w	sl, #2
 800a6fa:	f000 80c1 	beq.w	800a880 <__kernel_rem_pio2+0x33c>
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d14a      	bne.n	800a79a <__kernel_rem_pio2+0x256>
 800a704:	4642      	mov	r2, r8
 800a706:	464b      	mov	r3, r9
 800a708:	2000      	movs	r0, #0
 800a70a:	4953      	ldr	r1, [pc, #332]	; (800a858 <__kernel_rem_pio2+0x314>)
 800a70c:	f7f5 fd2c 	bl	8000168 <__aeabi_dsub>
 800a710:	4680      	mov	r8, r0
 800a712:	4689      	mov	r9, r1
 800a714:	2c00      	cmp	r4, #0
 800a716:	d040      	beq.n	800a79a <__kernel_rem_pio2+0x256>
 800a718:	4652      	mov	r2, sl
 800a71a:	2000      	movs	r0, #0
 800a71c:	494e      	ldr	r1, [pc, #312]	; (800a858 <__kernel_rem_pio2+0x314>)
 800a71e:	f000 fba3 	bl	800ae68 <scalbn>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 fd1d 	bl	8000168 <__aeabi_dsub>
 800a72e:	4680      	mov	r8, r0
 800a730:	4689      	mov	r9, r1
 800a732:	e032      	b.n	800a79a <__kernel_rem_pio2+0x256>
 800a734:	2200      	movs	r2, #0
 800a736:	4b49      	ldr	r3, [pc, #292]	; (800a85c <__kernel_rem_pio2+0x318>)
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f5 fecc 	bl	80004d8 <__aeabi_dmul>
 800a740:	f7f6 f97a 	bl	8000a38 <__aeabi_d2iz>
 800a744:	f7f5 fe5e 	bl	8000404 <__aeabi_i2d>
 800a748:	2200      	movs	r2, #0
 800a74a:	4b45      	ldr	r3, [pc, #276]	; (800a860 <__kernel_rem_pio2+0x31c>)
 800a74c:	e9cd 0100 	strd	r0, r1, [sp]
 800a750:	f7f5 fec2 	bl	80004d8 <__aeabi_dmul>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	f7f5 fd04 	bl	8000168 <__aeabi_dsub>
 800a760:	f7f6 f96a 	bl	8000a38 <__aeabi_d2iz>
 800a764:	ab0c      	add	r3, sp, #48	; 0x30
 800a766:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a76a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a772:	f7f5 fcfb 	bl	800016c <__adddf3>
 800a776:	3601      	adds	r6, #1
 800a778:	4680      	mov	r8, r0
 800a77a:	4689      	mov	r9, r1
 800a77c:	e765      	b.n	800a64a <__kernel_rem_pio2+0x106>
 800a77e:	d105      	bne.n	800a78c <__kernel_rem_pio2+0x248>
 800a780:	1e7b      	subs	r3, r7, #1
 800a782:	aa0c      	add	r2, sp, #48	; 0x30
 800a784:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a788:	15c3      	asrs	r3, r0, #23
 800a78a:	e79f      	b.n	800a6cc <__kernel_rem_pio2+0x188>
 800a78c:	2200      	movs	r2, #0
 800a78e:	4b35      	ldr	r3, [pc, #212]	; (800a864 <__kernel_rem_pio2+0x320>)
 800a790:	f7f6 f928 	bl	80009e4 <__aeabi_dcmpge>
 800a794:	2800      	cmp	r0, #0
 800a796:	d143      	bne.n	800a820 <__kernel_rem_pio2+0x2dc>
 800a798:	9000      	str	r0, [sp, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	2300      	movs	r3, #0
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f6 f901 	bl	80009a8 <__aeabi_dcmpeq>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f000 80c3 	beq.w	800a932 <__kernel_rem_pio2+0x3ee>
 800a7ac:	1e7c      	subs	r4, r7, #1
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	9902      	ldr	r1, [sp, #8]
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	da6a      	bge.n	800a88e <__kernel_rem_pio2+0x34a>
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	f000 8084 	beq.w	800a8c6 <__kernel_rem_pio2+0x382>
 800a7be:	ab0c      	add	r3, sp, #48	; 0x30
 800a7c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a7c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 80b0 	beq.w	800a92e <__kernel_rem_pio2+0x3ea>
 800a7ce:	4652      	mov	r2, sl
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	4921      	ldr	r1, [pc, #132]	; (800a858 <__kernel_rem_pio2+0x314>)
 800a7d4:	f000 fb48 	bl	800ae68 <scalbn>
 800a7d8:	4625      	mov	r5, r4
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460f      	mov	r7, r1
 800a7de:	f04f 0a00 	mov.w	sl, #0
 800a7e2:	00e3      	lsls	r3, r4, #3
 800a7e4:	aa98      	add	r2, sp, #608	; 0x260
 800a7e6:	eb02 0803 	add.w	r8, r2, r3
 800a7ea:	f8df b070 	ldr.w	fp, [pc, #112]	; 800a85c <__kernel_rem_pio2+0x318>
 800a7ee:	9306      	str	r3, [sp, #24]
 800a7f0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	f280 80d2 	bge.w	800a99e <__kernel_rem_pio2+0x45a>
 800a7fa:	2500      	movs	r5, #0
 800a7fc:	9a06      	ldr	r2, [sp, #24]
 800a7fe:	ab98      	add	r3, sp, #608	; 0x260
 800a800:	189e      	adds	r6, r3, r2
 800a802:	3ea8      	subs	r6, #168	; 0xa8
 800a804:	1b63      	subs	r3, r4, r5
 800a806:	2b00      	cmp	r3, #0
 800a808:	f2c0 80f9 	blt.w	800a9fe <__kernel_rem_pio2+0x4ba>
 800a80c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a868 <__kernel_rem_pio2+0x324>
 800a810:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	2700      	movs	r7, #0
 800a81e:	e0e2      	b.n	800a9e6 <__kernel_rem_pio2+0x4a2>
 800a820:	2302      	movs	r3, #2
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	e756      	b.n	800a6d4 <__kernel_rem_pio2+0x190>
 800a826:	ab0c      	add	r3, sp, #48	; 0x30
 800a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82c:	b94c      	cbnz	r4, 800a842 <__kernel_rem_pio2+0x2fe>
 800a82e:	b12b      	cbz	r3, 800a83c <__kernel_rem_pio2+0x2f8>
 800a830:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a834:	a80c      	add	r0, sp, #48	; 0x30
 800a836:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a83a:	2301      	movs	r3, #1
 800a83c:	3201      	adds	r2, #1
 800a83e:	461c      	mov	r4, r3
 800a840:	e74f      	b.n	800a6e2 <__kernel_rem_pio2+0x19e>
 800a842:	1acb      	subs	r3, r1, r3
 800a844:	a80c      	add	r0, sp, #48	; 0x30
 800a846:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a84a:	4623      	mov	r3, r4
 800a84c:	e7f6      	b.n	800a83c <__kernel_rem_pio2+0x2f8>
 800a84e:	bf00      	nop
 800a850:	0800b548 	.word	0x0800b548
 800a854:	40200000 	.word	0x40200000
 800a858:	3ff00000 	.word	0x3ff00000
 800a85c:	3e700000 	.word	0x3e700000
 800a860:	41700000 	.word	0x41700000
 800a864:	3fe00000 	.word	0x3fe00000
 800a868:	0800b500 	.word	0x0800b500
 800a86c:	1e7a      	subs	r2, r7, #1
 800a86e:	ab0c      	add	r3, sp, #48	; 0x30
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a878:	a90c      	add	r1, sp, #48	; 0x30
 800a87a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a87e:	e73e      	b.n	800a6fe <__kernel_rem_pio2+0x1ba>
 800a880:	1e7a      	subs	r2, r7, #1
 800a882:	ab0c      	add	r3, sp, #48	; 0x30
 800a884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a888:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a88c:	e7f4      	b.n	800a878 <__kernel_rem_pio2+0x334>
 800a88e:	a90c      	add	r1, sp, #48	; 0x30
 800a890:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a894:	3b01      	subs	r3, #1
 800a896:	430a      	orrs	r2, r1
 800a898:	e78b      	b.n	800a7b2 <__kernel_rem_pio2+0x26e>
 800a89a:	3401      	adds	r4, #1
 800a89c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	d0fa      	beq.n	800a89a <__kernel_rem_pio2+0x356>
 800a8a4:	ab98      	add	r3, sp, #608	; 0x260
 800a8a6:	449b      	add	fp, r3
 800a8a8:	9b07      	ldr	r3, [sp, #28]
 800a8aa:	1c7e      	adds	r6, r7, #1
 800a8ac:	19dd      	adds	r5, r3, r7
 800a8ae:	ab98      	add	r3, sp, #608	; 0x260
 800a8b0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a8b4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800a8b8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800a8bc:	443c      	add	r4, r7
 800a8be:	42b4      	cmp	r4, r6
 800a8c0:	da04      	bge.n	800a8cc <__kernel_rem_pio2+0x388>
 800a8c2:	4627      	mov	r7, r4
 800a8c4:	e6b1      	b.n	800a62a <__kernel_rem_pio2+0xe6>
 800a8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c8:	2401      	movs	r4, #1
 800a8ca:	e7e7      	b.n	800a89c <__kernel_rem_pio2+0x358>
 800a8cc:	f105 0308 	add.w	r3, r5, #8
 800a8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a8da:	f7f5 fd93 	bl	8000404 <__aeabi_i2d>
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	9b08      	ldr	r3, [sp, #32]
 800a8e8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a8ec:	3b08      	subs	r3, #8
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	f105 0310 	add.w	r3, r5, #16
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	429f      	cmp	r7, r3
 800a8fa:	dd04      	ble.n	800a906 <__kernel_rem_pio2+0x3c2>
 800a8fc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a900:	3601      	adds	r6, #1
 800a902:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a904:	e7db      	b.n	800a8be <__kernel_rem_pio2+0x37a>
 800a906:	9905      	ldr	r1, [sp, #20]
 800a908:	9d00      	ldr	r5, [sp, #0]
 800a90a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a914:	9500      	str	r5, [sp, #0]
 800a916:	f7f5 fddf 	bl	80004d8 <__aeabi_dmul>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4640      	mov	r0, r8
 800a920:	4649      	mov	r1, r9
 800a922:	f7f5 fc23 	bl	800016c <__adddf3>
 800a926:	3701      	adds	r7, #1
 800a928:	4680      	mov	r8, r0
 800a92a:	4689      	mov	r9, r1
 800a92c:	e7e3      	b.n	800a8f6 <__kernel_rem_pio2+0x3b2>
 800a92e:	3c01      	subs	r4, #1
 800a930:	e745      	b.n	800a7be <__kernel_rem_pio2+0x27a>
 800a932:	f1ca 0200 	rsb	r2, sl, #0
 800a936:	4640      	mov	r0, r8
 800a938:	4649      	mov	r1, r9
 800a93a:	f000 fa95 	bl	800ae68 <scalbn>
 800a93e:	2200      	movs	r2, #0
 800a940:	4ba3      	ldr	r3, [pc, #652]	; (800abd0 <__kernel_rem_pio2+0x68c>)
 800a942:	4604      	mov	r4, r0
 800a944:	460d      	mov	r5, r1
 800a946:	f7f6 f84d 	bl	80009e4 <__aeabi_dcmpge>
 800a94a:	b1f8      	cbz	r0, 800a98c <__kernel_rem_pio2+0x448>
 800a94c:	2200      	movs	r2, #0
 800a94e:	4ba1      	ldr	r3, [pc, #644]	; (800abd4 <__kernel_rem_pio2+0x690>)
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fdc0 	bl	80004d8 <__aeabi_dmul>
 800a958:	f7f6 f86e 	bl	8000a38 <__aeabi_d2iz>
 800a95c:	4606      	mov	r6, r0
 800a95e:	f7f5 fd51 	bl	8000404 <__aeabi_i2d>
 800a962:	2200      	movs	r2, #0
 800a964:	4b9a      	ldr	r3, [pc, #616]	; (800abd0 <__kernel_rem_pio2+0x68c>)
 800a966:	f7f5 fdb7 	bl	80004d8 <__aeabi_dmul>
 800a96a:	460b      	mov	r3, r1
 800a96c:	4602      	mov	r2, r0
 800a96e:	4629      	mov	r1, r5
 800a970:	4620      	mov	r0, r4
 800a972:	f7f5 fbf9 	bl	8000168 <__aeabi_dsub>
 800a976:	f7f6 f85f 	bl	8000a38 <__aeabi_d2iz>
 800a97a:	1c7c      	adds	r4, r7, #1
 800a97c:	ab0c      	add	r3, sp, #48	; 0x30
 800a97e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a982:	f10a 0a18 	add.w	sl, sl, #24
 800a986:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a98a:	e720      	b.n	800a7ce <__kernel_rem_pio2+0x28a>
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f6 f852 	bl	8000a38 <__aeabi_d2iz>
 800a994:	ab0c      	add	r3, sp, #48	; 0x30
 800a996:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a99a:	463c      	mov	r4, r7
 800a99c:	e717      	b.n	800a7ce <__kernel_rem_pio2+0x28a>
 800a99e:	ab0c      	add	r3, sp, #48	; 0x30
 800a9a0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9a4:	f7f5 fd2e 	bl	8000404 <__aeabi_i2d>
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	463b      	mov	r3, r7
 800a9ac:	f7f5 fd94 	bl	80004d8 <__aeabi_dmul>
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a9b6:	465b      	mov	r3, fp
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f5 fd8c 	bl	80004d8 <__aeabi_dmul>
 800a9c0:	3d01      	subs	r5, #1
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	e715      	b.n	800a7f4 <__kernel_rem_pio2+0x2b0>
 800a9c8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a9cc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a9d0:	f7f5 fd82 	bl	80004d8 <__aeabi_dmul>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4650      	mov	r0, sl
 800a9da:	4659      	mov	r1, fp
 800a9dc:	f7f5 fbc6 	bl	800016c <__adddf3>
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	468b      	mov	fp, r1
 800a9e4:	3701      	adds	r7, #1
 800a9e6:	9b02      	ldr	r3, [sp, #8]
 800a9e8:	429f      	cmp	r7, r3
 800a9ea:	dc01      	bgt.n	800a9f0 <__kernel_rem_pio2+0x4ac>
 800a9ec:	42bd      	cmp	r5, r7
 800a9ee:	daeb      	bge.n	800a9c8 <__kernel_rem_pio2+0x484>
 800a9f0:	ab48      	add	r3, sp, #288	; 0x120
 800a9f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9f6:	e9c3 ab00 	strd	sl, fp, [r3]
 800a9fa:	3501      	adds	r5, #1
 800a9fc:	e702      	b.n	800a804 <__kernel_rem_pio2+0x2c0>
 800a9fe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d86c      	bhi.n	800aade <__kernel_rem_pio2+0x59a>
 800aa04:	e8df f003 	tbb	[pc, r3]
 800aa08:	022f2f59 	.word	0x022f2f59
 800aa0c:	9a06      	ldr	r2, [sp, #24]
 800aa0e:	ab48      	add	r3, sp, #288	; 0x120
 800aa10:	189d      	adds	r5, r3, r2
 800aa12:	46aa      	mov	sl, r5
 800aa14:	46a3      	mov	fp, r4
 800aa16:	f1bb 0f00 	cmp.w	fp, #0
 800aa1a:	f300 8087 	bgt.w	800ab2c <__kernel_rem_pio2+0x5e8>
 800aa1e:	46a2      	mov	sl, r4
 800aa20:	f1ba 0f01 	cmp.w	sl, #1
 800aa24:	f300 809f 	bgt.w	800ab66 <__kernel_rem_pio2+0x622>
 800aa28:	2700      	movs	r7, #0
 800aa2a:	463e      	mov	r6, r7
 800aa2c:	9d06      	ldr	r5, [sp, #24]
 800aa2e:	ab48      	add	r3, sp, #288	; 0x120
 800aa30:	3508      	adds	r5, #8
 800aa32:	441d      	add	r5, r3
 800aa34:	2c01      	cmp	r4, #1
 800aa36:	f300 80b3 	bgt.w	800aba0 <__kernel_rem_pio2+0x65c>
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800aa3e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800aa40:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800aa42:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 80b5 	bne.w	800abb4 <__kernel_rem_pio2+0x670>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	9804      	ldr	r0, [sp, #16]
 800aa50:	e9c0 2300 	strd	r2, r3, [r0]
 800aa54:	4622      	mov	r2, r4
 800aa56:	460b      	mov	r3, r1
 800aa58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa5c:	463a      	mov	r2, r7
 800aa5e:	4633      	mov	r3, r6
 800aa60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800aa64:	e03b      	b.n	800aade <__kernel_rem_pio2+0x59a>
 800aa66:	f04f 0c00 	mov.w	ip, #0
 800aa6a:	4626      	mov	r6, r4
 800aa6c:	4667      	mov	r7, ip
 800aa6e:	9d06      	ldr	r5, [sp, #24]
 800aa70:	ab48      	add	r3, sp, #288	; 0x120
 800aa72:	3508      	adds	r5, #8
 800aa74:	441d      	add	r5, r3
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	da42      	bge.n	800ab00 <__kernel_rem_pio2+0x5bc>
 800aa7a:	9b00      	ldr	r3, [sp, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d049      	beq.n	800ab14 <__kernel_rem_pio2+0x5d0>
 800aa80:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800aa84:	4662      	mov	r2, ip
 800aa86:	460b      	mov	r3, r1
 800aa88:	9904      	ldr	r1, [sp, #16]
 800aa8a:	2601      	movs	r6, #1
 800aa8c:	e9c1 2300 	strd	r2, r3, [r1]
 800aa90:	a948      	add	r1, sp, #288	; 0x120
 800aa92:	463b      	mov	r3, r7
 800aa94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa98:	f7f5 fb66 	bl	8000168 <__aeabi_dsub>
 800aa9c:	4684      	mov	ip, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	ad48      	add	r5, sp, #288	; 0x120
 800aaa2:	42b4      	cmp	r4, r6
 800aaa4:	da38      	bge.n	800ab18 <__kernel_rem_pio2+0x5d4>
 800aaa6:	9b00      	ldr	r3, [sp, #0]
 800aaa8:	b10b      	cbz	r3, 800aaae <__kernel_rem_pio2+0x56a>
 800aaaa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800aaae:	4662      	mov	r2, ip
 800aab0:	463b      	mov	r3, r7
 800aab2:	9904      	ldr	r1, [sp, #16]
 800aab4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800aab8:	e011      	b.n	800aade <__kernel_rem_pio2+0x59a>
 800aaba:	2700      	movs	r7, #0
 800aabc:	463d      	mov	r5, r7
 800aabe:	9b06      	ldr	r3, [sp, #24]
 800aac0:	aa98      	add	r2, sp, #608	; 0x260
 800aac2:	4413      	add	r3, r2
 800aac4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	da0f      	bge.n	800aaec <__kernel_rem_pio2+0x5a8>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	b10b      	cbz	r3, 800aad4 <__kernel_rem_pio2+0x590>
 800aad0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800aad4:	463a      	mov	r2, r7
 800aad6:	462b      	mov	r3, r5
 800aad8:	9904      	ldr	r1, [sp, #16]
 800aada:	e9c1 2300 	strd	r2, r3, [r1]
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	f003 0007 	and.w	r0, r3, #7
 800aae4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaec:	4638      	mov	r0, r7
 800aaee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	f7f5 fb3a 	bl	800016c <__adddf3>
 800aaf8:	3c01      	subs	r4, #1
 800aafa:	4607      	mov	r7, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	e7e3      	b.n	800aac8 <__kernel_rem_pio2+0x584>
 800ab00:	4660      	mov	r0, ip
 800ab02:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ab06:	4639      	mov	r1, r7
 800ab08:	f7f5 fb30 	bl	800016c <__adddf3>
 800ab0c:	3e01      	subs	r6, #1
 800ab0e:	4684      	mov	ip, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	e7b0      	b.n	800aa76 <__kernel_rem_pio2+0x532>
 800ab14:	4639      	mov	r1, r7
 800ab16:	e7b5      	b.n	800aa84 <__kernel_rem_pio2+0x540>
 800ab18:	4660      	mov	r0, ip
 800ab1a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 fb24 	bl	800016c <__adddf3>
 800ab24:	3601      	adds	r6, #1
 800ab26:	4684      	mov	ip, r0
 800ab28:	460f      	mov	r7, r1
 800ab2a:	e7ba      	b.n	800aaa2 <__kernel_rem_pio2+0x55e>
 800ab2c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800ab30:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800ab34:	4640      	mov	r0, r8
 800ab36:	4649      	mov	r1, r9
 800ab38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab3c:	f7f5 fb16 	bl	800016c <__adddf3>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fb0c 	bl	8000168 <__aeabi_dsub>
 800ab50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab54:	f7f5 fb0a 	bl	800016c <__adddf3>
 800ab58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab60:	e9ca 6700 	strd	r6, r7, [sl]
 800ab64:	e757      	b.n	800aa16 <__kernel_rem_pio2+0x4d2>
 800ab66:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800ab6a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab76:	f7f5 faf9 	bl	800016c <__adddf3>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4680      	mov	r8, r0
 800ab80:	4689      	mov	r9, r1
 800ab82:	4630      	mov	r0, r6
 800ab84:	4639      	mov	r1, r7
 800ab86:	f7f5 faef 	bl	8000168 <__aeabi_dsub>
 800ab8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab8e:	f7f5 faed 	bl	800016c <__adddf3>
 800ab92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ab96:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ab9a:	e9c5 8900 	strd	r8, r9, [r5]
 800ab9e:	e73f      	b.n	800aa20 <__kernel_rem_pio2+0x4dc>
 800aba0:	4638      	mov	r0, r7
 800aba2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800aba6:	4631      	mov	r1, r6
 800aba8:	f7f5 fae0 	bl	800016c <__adddf3>
 800abac:	3c01      	subs	r4, #1
 800abae:	4607      	mov	r7, r0
 800abb0:	460e      	mov	r6, r1
 800abb2:	e73f      	b.n	800aa34 <__kernel_rem_pio2+0x4f0>
 800abb4:	9b04      	ldr	r3, [sp, #16]
 800abb6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800abba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800abbe:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800abc2:	601d      	str	r5, [r3, #0]
 800abc4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800abc8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800abcc:	615e      	str	r6, [r3, #20]
 800abce:	e786      	b.n	800aade <__kernel_rem_pio2+0x59a>
 800abd0:	41700000 	.word	0x41700000
 800abd4:	3e700000 	.word	0x3e700000

0800abd8 <__kernel_sin>:
 800abd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	e9cd 2300 	strd	r2, r3, [sp]
 800abe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abe6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800abea:	4682      	mov	sl, r0
 800abec:	460c      	mov	r4, r1
 800abee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800abf0:	da03      	bge.n	800abfa <__kernel_sin+0x22>
 800abf2:	f7f5 ff21 	bl	8000a38 <__aeabi_d2iz>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d050      	beq.n	800ac9c <__kernel_sin+0xc4>
 800abfa:	4652      	mov	r2, sl
 800abfc:	4623      	mov	r3, r4
 800abfe:	4650      	mov	r0, sl
 800ac00:	4621      	mov	r1, r4
 800ac02:	f7f5 fc69 	bl	80004d8 <__aeabi_dmul>
 800ac06:	4606      	mov	r6, r0
 800ac08:	460f      	mov	r7, r1
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4650      	mov	r0, sl
 800ac10:	4621      	mov	r1, r4
 800ac12:	f7f5 fc61 	bl	80004d8 <__aeabi_dmul>
 800ac16:	a33e      	add	r3, pc, #248	; (adr r3, 800ad10 <__kernel_sin+0x138>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	4680      	mov	r8, r0
 800ac1e:	4689      	mov	r9, r1
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 fc58 	bl	80004d8 <__aeabi_dmul>
 800ac28:	a33b      	add	r3, pc, #236	; (adr r3, 800ad18 <__kernel_sin+0x140>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fa9b 	bl	8000168 <__aeabi_dsub>
 800ac32:	4632      	mov	r2, r6
 800ac34:	463b      	mov	r3, r7
 800ac36:	f7f5 fc4f 	bl	80004d8 <__aeabi_dmul>
 800ac3a:	a339      	add	r3, pc, #228	; (adr r3, 800ad20 <__kernel_sin+0x148>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fa94 	bl	800016c <__adddf3>
 800ac44:	4632      	mov	r2, r6
 800ac46:	463b      	mov	r3, r7
 800ac48:	f7f5 fc46 	bl	80004d8 <__aeabi_dmul>
 800ac4c:	a336      	add	r3, pc, #216	; (adr r3, 800ad28 <__kernel_sin+0x150>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fa89 	bl	8000168 <__aeabi_dsub>
 800ac56:	4632      	mov	r2, r6
 800ac58:	463b      	mov	r3, r7
 800ac5a:	f7f5 fc3d 	bl	80004d8 <__aeabi_dmul>
 800ac5e:	a334      	add	r3, pc, #208	; (adr r3, 800ad30 <__kernel_sin+0x158>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fa82 	bl	800016c <__adddf3>
 800ac68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6c:	b9dd      	cbnz	r5, 800aca6 <__kernel_sin+0xce>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 fc2f 	bl	80004d8 <__aeabi_dmul>
 800ac7a:	a32f      	add	r3, pc, #188	; (adr r3, 800ad38 <__kernel_sin+0x160>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f7f5 fa72 	bl	8000168 <__aeabi_dsub>
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	f7f5 fc26 	bl	80004d8 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4650      	mov	r0, sl
 800ac92:	4621      	mov	r1, r4
 800ac94:	f7f5 fa6a 	bl	800016c <__adddf3>
 800ac98:	4682      	mov	sl, r0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	4650      	mov	r0, sl
 800ac9e:	4621      	mov	r1, r4
 800aca0:	b006      	add	sp, #24
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca6:	2200      	movs	r2, #0
 800aca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acac:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <__kernel_sin+0x168>)
 800acae:	f7f5 fc13 	bl	80004d8 <__aeabi_dmul>
 800acb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acba:	4640      	mov	r0, r8
 800acbc:	4649      	mov	r1, r9
 800acbe:	f7f5 fc0b 	bl	80004d8 <__aeabi_dmul>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acca:	f7f5 fa4d 	bl	8000168 <__aeabi_dsub>
 800acce:	4632      	mov	r2, r6
 800acd0:	463b      	mov	r3, r7
 800acd2:	f7f5 fc01 	bl	80004d8 <__aeabi_dmul>
 800acd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acda:	f7f5 fa45 	bl	8000168 <__aeabi_dsub>
 800acde:	a316      	add	r3, pc, #88	; (adr r3, 800ad38 <__kernel_sin+0x160>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	4640      	mov	r0, r8
 800acea:	4649      	mov	r1, r9
 800acec:	f7f5 fbf4 	bl	80004d8 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fa38 	bl	800016c <__adddf3>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4650      	mov	r0, sl
 800ad02:	4621      	mov	r1, r4
 800ad04:	f7f5 fa30 	bl	8000168 <__aeabi_dsub>
 800ad08:	e7c6      	b.n	800ac98 <__kernel_sin+0xc0>
 800ad0a:	bf00      	nop
 800ad0c:	f3af 8000 	nop.w
 800ad10:	5acfd57c 	.word	0x5acfd57c
 800ad14:	3de5d93a 	.word	0x3de5d93a
 800ad18:	8a2b9ceb 	.word	0x8a2b9ceb
 800ad1c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ad20:	57b1fe7d 	.word	0x57b1fe7d
 800ad24:	3ec71de3 	.word	0x3ec71de3
 800ad28:	19c161d5 	.word	0x19c161d5
 800ad2c:	3f2a01a0 	.word	0x3f2a01a0
 800ad30:	1110f8a6 	.word	0x1110f8a6
 800ad34:	3f811111 	.word	0x3f811111
 800ad38:	55555549 	.word	0x55555549
 800ad3c:	3fc55555 	.word	0x3fc55555
 800ad40:	3fe00000 	.word	0x3fe00000

0800ad44 <fabs>:
 800ad44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4770      	bx	lr
 800ad4c:	0000      	movs	r0, r0
	...

0800ad50 <floor>:
 800ad50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad54:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ad58:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ad5c:	2e13      	cmp	r6, #19
 800ad5e:	4607      	mov	r7, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	460c      	mov	r4, r1
 800ad64:	4605      	mov	r5, r0
 800ad66:	dc35      	bgt.n	800add4 <floor+0x84>
 800ad68:	2e00      	cmp	r6, #0
 800ad6a:	da16      	bge.n	800ad9a <floor+0x4a>
 800ad6c:	a336      	add	r3, pc, #216	; (adr r3, 800ae48 <floor+0xf8>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 f9fb 	bl	800016c <__adddf3>
 800ad76:	2200      	movs	r2, #0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f7f5 fe3d 	bl	80009f8 <__aeabi_dcmpgt>
 800ad7e:	b148      	cbz	r0, 800ad94 <floor+0x44>
 800ad80:	2c00      	cmp	r4, #0
 800ad82:	da5b      	bge.n	800ae3c <floor+0xec>
 800ad84:	2500      	movs	r5, #0
 800ad86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad8a:	4a31      	ldr	r2, [pc, #196]	; (800ae50 <floor+0x100>)
 800ad8c:	433b      	orrs	r3, r7
 800ad8e:	42ab      	cmp	r3, r5
 800ad90:	bf18      	it	ne
 800ad92:	4614      	movne	r4, r2
 800ad94:	4623      	mov	r3, r4
 800ad96:	462f      	mov	r7, r5
 800ad98:	e026      	b.n	800ade8 <floor+0x98>
 800ad9a:	4a2e      	ldr	r2, [pc, #184]	; (800ae54 <floor+0x104>)
 800ad9c:	fa42 f806 	asr.w	r8, r2, r6
 800ada0:	ea01 0208 	and.w	r2, r1, r8
 800ada4:	4302      	orrs	r2, r0
 800ada6:	d01f      	beq.n	800ade8 <floor+0x98>
 800ada8:	a327      	add	r3, pc, #156	; (adr r3, 800ae48 <floor+0xf8>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f7f5 f9dd 	bl	800016c <__adddf3>
 800adb2:	2200      	movs	r2, #0
 800adb4:	2300      	movs	r3, #0
 800adb6:	f7f5 fe1f 	bl	80009f8 <__aeabi_dcmpgt>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0ea      	beq.n	800ad94 <floor+0x44>
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	bfbe      	ittt	lt
 800adc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800adc6:	fa43 f606 	asrlt.w	r6, r3, r6
 800adca:	19a4      	addlt	r4, r4, r6
 800adcc:	ea24 0408 	bic.w	r4, r4, r8
 800add0:	2500      	movs	r5, #0
 800add2:	e7df      	b.n	800ad94 <floor+0x44>
 800add4:	2e33      	cmp	r6, #51	; 0x33
 800add6:	dd0b      	ble.n	800adf0 <floor+0xa0>
 800add8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800addc:	d104      	bne.n	800ade8 <floor+0x98>
 800adde:	4602      	mov	r2, r0
 800ade0:	f7f5 f9c4 	bl	800016c <__adddf3>
 800ade4:	4607      	mov	r7, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4638      	mov	r0, r7
 800adea:	4619      	mov	r1, r3
 800adec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adf4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800adf8:	fa22 f808 	lsr.w	r8, r2, r8
 800adfc:	ea18 0f00 	tst.w	r8, r0
 800ae00:	d0f2      	beq.n	800ade8 <floor+0x98>
 800ae02:	a311      	add	r3, pc, #68	; (adr r3, 800ae48 <floor+0xf8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7f5 f9b0 	bl	800016c <__adddf3>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f7f5 fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d0bd      	beq.n	800ad94 <floor+0x44>
 800ae18:	2c00      	cmp	r4, #0
 800ae1a:	da02      	bge.n	800ae22 <floor+0xd2>
 800ae1c:	2e14      	cmp	r6, #20
 800ae1e:	d103      	bne.n	800ae28 <floor+0xd8>
 800ae20:	3401      	adds	r4, #1
 800ae22:	ea25 0508 	bic.w	r5, r5, r8
 800ae26:	e7b5      	b.n	800ad94 <floor+0x44>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ae2e:	fa03 f606 	lsl.w	r6, r3, r6
 800ae32:	4435      	add	r5, r6
 800ae34:	42bd      	cmp	r5, r7
 800ae36:	bf38      	it	cc
 800ae38:	18e4      	addcc	r4, r4, r3
 800ae3a:	e7f2      	b.n	800ae22 <floor+0xd2>
 800ae3c:	2500      	movs	r5, #0
 800ae3e:	462c      	mov	r4, r5
 800ae40:	e7a8      	b.n	800ad94 <floor+0x44>
 800ae42:	bf00      	nop
 800ae44:	f3af 8000 	nop.w
 800ae48:	8800759c 	.word	0x8800759c
 800ae4c:	7e37e43c 	.word	0x7e37e43c
 800ae50:	bff00000 	.word	0xbff00000
 800ae54:	000fffff 	.word	0x000fffff

0800ae58 <matherr>:
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4770      	bx	lr

0800ae5c <nan>:
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4901      	ldr	r1, [pc, #4]	; (800ae64 <nan+0x8>)
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	7ff80000 	.word	0x7ff80000

0800ae68 <scalbn>:
 800ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	460b      	mov	r3, r1
 800ae76:	b982      	cbnz	r2, 800ae9a <scalbn+0x32>
 800ae78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae7c:	4303      	orrs	r3, r0
 800ae7e:	d034      	beq.n	800aeea <scalbn+0x82>
 800ae80:	4b2d      	ldr	r3, [pc, #180]	; (800af38 <scalbn+0xd0>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	f7f5 fb28 	bl	80004d8 <__aeabi_dmul>
 800ae88:	4b2c      	ldr	r3, [pc, #176]	; (800af3c <scalbn+0xd4>)
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	429e      	cmp	r6, r3
 800ae8e:	460d      	mov	r5, r1
 800ae90:	da0d      	bge.n	800aeae <scalbn+0x46>
 800ae92:	a325      	add	r3, pc, #148	; (adr r3, 800af28 <scalbn+0xc0>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	e01c      	b.n	800aed4 <scalbn+0x6c>
 800ae9a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ae9e:	42ba      	cmp	r2, r7
 800aea0:	d109      	bne.n	800aeb6 <scalbn+0x4e>
 800aea2:	4602      	mov	r2, r0
 800aea4:	f7f5 f962 	bl	800016c <__adddf3>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	e01d      	b.n	800aeea <scalbn+0x82>
 800aeae:	460b      	mov	r3, r1
 800aeb0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aeb4:	3a36      	subs	r2, #54	; 0x36
 800aeb6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aeba:	4432      	add	r2, r6
 800aebc:	428a      	cmp	r2, r1
 800aebe:	dd0c      	ble.n	800aeda <scalbn+0x72>
 800aec0:	4622      	mov	r2, r4
 800aec2:	462b      	mov	r3, r5
 800aec4:	a11a      	add	r1, pc, #104	; (adr r1, 800af30 <scalbn+0xc8>)
 800aec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeca:	f000 f83b 	bl	800af44 <copysign>
 800aece:	a318      	add	r3, pc, #96	; (adr r3, 800af30 <scalbn+0xc8>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 fb00 	bl	80004d8 <__aeabi_dmul>
 800aed8:	e7e6      	b.n	800aea8 <scalbn+0x40>
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	dd08      	ble.n	800aef0 <scalbn+0x88>
 800aede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aee2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aee6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aef4:	da0b      	bge.n	800af0e <scalbn+0xa6>
 800aef6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aefa:	429e      	cmp	r6, r3
 800aefc:	4622      	mov	r2, r4
 800aefe:	462b      	mov	r3, r5
 800af00:	dce0      	bgt.n	800aec4 <scalbn+0x5c>
 800af02:	a109      	add	r1, pc, #36	; (adr r1, 800af28 <scalbn+0xc0>)
 800af04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af08:	f000 f81c 	bl	800af44 <copysign>
 800af0c:	e7c1      	b.n	800ae92 <scalbn+0x2a>
 800af0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af12:	3236      	adds	r2, #54	; 0x36
 800af14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af1c:	4620      	mov	r0, r4
 800af1e:	4629      	mov	r1, r5
 800af20:	2200      	movs	r2, #0
 800af22:	4b07      	ldr	r3, [pc, #28]	; (800af40 <scalbn+0xd8>)
 800af24:	e7d6      	b.n	800aed4 <scalbn+0x6c>
 800af26:	bf00      	nop
 800af28:	c2f8f359 	.word	0xc2f8f359
 800af2c:	01a56e1f 	.word	0x01a56e1f
 800af30:	8800759c 	.word	0x8800759c
 800af34:	7e37e43c 	.word	0x7e37e43c
 800af38:	43500000 	.word	0x43500000
 800af3c:	ffff3cb0 	.word	0xffff3cb0
 800af40:	3c900000 	.word	0x3c900000

0800af44 <copysign>:
 800af44:	b530      	push	{r4, r5, lr}
 800af46:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800af4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af4e:	ea42 0503 	orr.w	r5, r2, r3
 800af52:	4629      	mov	r1, r5
 800af54:	bd30      	pop	{r4, r5, pc}
	...

0800af58 <_init>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr

0800af64 <_fini>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	bf00      	nop
 800af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6a:	bc08      	pop	{r3}
 800af6c:	469e      	mov	lr, r3
 800af6e:	4770      	bx	lr
