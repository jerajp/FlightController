
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  0800c098  0800c098  0001c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce08  0800ce08  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce08  0800ce08  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce08  0800ce08  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce0c  0800ce0c  0001ce0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ce10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  200001e8  0800cff8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800cff8  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a7a  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb9  00000000  00000000  00037c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017199  00000000  00000000  0003d500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6af  00000000  00000000  00054699  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f1d6  00000000  00000000  00063d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2f1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000684c  00000000  00000000  000e2f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c080 	.word	0x0800c080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c080 	.word	0x0800c080

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <MPU6050_Write_Single_Bit>:

};


void MPU6050_Write_Single_Bit(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitPosition, uint8_t BitValue)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &data, 1, 1000);//read whole Register
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	b299      	uxth	r1, r3
 800116e:	78bb      	ldrb	r3, [r7, #2]
 8001170:	b29a      	uxth	r2, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 030f 	add.w	r3, r7, #15
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f006 f84f 	bl	8007228 <HAL_I2C_Mem_Read>

	if(BitValue==1)			data|= 1<<BitPosition; 		 //force 1 to bit in BitPosition
 800118a:	7e3b      	ldrb	r3, [r7, #24]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d10b      	bne.n	80011a8 <MPU6050_Write_Single_Bit+0x58>
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	b25a      	sxtb	r2, r3
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e00f      	b.n	80011c8 <MPU6050_Write_Single_Bit+0x78>
	else if(BitValue==0) 	data&=~(1<<BitPosition); 	 //force 0 to bit in BitPosition
 80011a8:	7e3b      	ldrb	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <MPU6050_Write_Single_Bit+0x78>
 80011ae:	787b      	ldrb	r3, [r7, #1]
 80011b0:	2201      	movs	r2, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, RegisterAddress, 1,&data, 1, 1000); //write corected data (1 bit only) back to register
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	b299      	uxth	r1, r3
 80011cc:	78bb      	ldrb	r3, [r7, #2]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f005 ff26 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <MPU6050_Write_Few_Bits>:

void MPU6050_Write_Few_Bits(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitStart, uint8_t Length, uint8_t data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af04      	add	r7, sp, #16
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	460b      	mov	r3, r1
 8001204:	70bb      	strb	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	707b      	strb	r3, [r7, #1]
	uint8_t mask;
	uint8_t temp;

	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &temp, 1, 1000);//read whole Register
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	b299      	uxth	r1, r3
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	b29a      	uxth	r2, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	2301      	movs	r3, #1
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	f107 030e 	add.w	r3, r7, #14
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f005 ffff 	bl	8007228 <HAL_I2C_Mem_Read>

    mask = ((1 << Length) - 1) << (BitStart - Length + 1);
 800122a:	7e3b      	ldrb	r3, [r7, #24]
 800122c:	2201      	movs	r2, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	7879      	ldrb	r1, [r7, #1]
 8001236:	7e3b      	ldrb	r3, [r7, #24]
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	3301      	adds	r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	73fb      	strb	r3, [r7, #15]
    data <<= (BitStart - Length + 1); // shift data into correct position
 8001242:	7f3a      	ldrb	r2, [r7, #28]
 8001244:	7879      	ldrb	r1, [r7, #1]
 8001246:	7e3b      	ldrb	r3, [r7, #24]
 8001248:	1acb      	subs	r3, r1, r3
 800124a:	3301      	adds	r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	773b      	strb	r3, [r7, #28]
    data &= mask; // zero all non-important bits in data
 8001252:	7f3a      	ldrb	r2, [r7, #28]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4013      	ands	r3, r2
 8001258:	773b      	strb	r3, [r7, #28]
    temp &= ~(mask); // zero all important bits in existing word
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	43db      	mvns	r3, r3
 8001260:	b25a      	sxtb	r2, r3
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73bb      	strb	r3, [r7, #14]
    temp |= data; // combine data with existing word
 800126e:	7bba      	ldrb	r2, [r7, #14]
 8001270:	7f3b      	ldrb	r3, [r7, #28]
 8001272:	4313      	orrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, RegisterAddress, 1,&temp, 1, 1000); //write corected data (1 bit only) back to register
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	b299      	uxth	r1, r3
 800127c:	78bb      	ldrb	r3, [r7, #2]
 800127e:	b29a      	uxth	r2, r3
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 030e 	add.w	r3, r7, #14
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f005 fece 	bl	8007034 <HAL_I2C_Mem_Write>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <MPU6050_Read_Single_Bit>:

uint8_t MPU6050_Read_Single_Bit(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitPosition)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	70fb      	strb	r3, [r7, #3]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70bb      	strb	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &data, 1, 1000);//read whole Register
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	b299      	uxth	r1, r3
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030f 	add.w	r3, r7, #15
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f005 ffa7 	bl	8007228 <HAL_I2C_Mem_Read>

	//filter bit data
	data&=(1<<BitPosition);
 80012da:	787b      	ldrb	r3, [r7, #1]
 80012dc:	2201      	movs	r2, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	73fb      	strb	r3, [r7, #15]
	//shift bit
	data=data>>BitPosition;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	461a      	mov	r2, r3
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]

	return data;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MPU6050_check>:

MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af04      	add	r7, sp, #16
 800130e:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I,1, &data, 1, 1000);
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	2301      	movs	r3, #1
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	f107 030f 	add.w	r3, r7, #15
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	2275      	movs	r2, #117	; 0x75
 8001324:	21d0      	movs	r1, #208	; 0xd0
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f005 ff7e 	bl	8007228 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM_VAL) return MPU6050_DETECTED;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b68      	cmp	r3, #104	; 0x68
 8001330:	d101      	bne.n	8001336 <MPU6050_check+0x2e>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 8001336:	2300      	movs	r3, #0

}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <MPU6050_DMP_Enable>:
	MPU6050_SetGyroRange(I2Cx,MPU6050_ADDRESS, MPU6050_GYRO_FS_1000);
	MPU6050_SetAccelRange(I2Cx,MPU6050_ADDRESS, MPU6050_ACCEL_FS_2);
}

void MPU6050_DMP_Enable(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t enable)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
 800134c:	4613      	mov	r3, r2
 800134e:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enable);
 8001350:	78f9      	ldrb	r1, [r7, #3]
 8001352:	78bb      	ldrb	r3, [r7, #2]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2307      	movs	r3, #7
 8001358:	226a      	movs	r2, #106	; 0x6a
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fef8 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <MPU6050_DMP_Reset>:

void MPU6050_DMP_Reset(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddres)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddres, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);
 8001374:	78f9      	ldrb	r1, [r7, #3]
 8001376:	2301      	movs	r3, #1
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2303      	movs	r3, #3
 800137c:	226a      	movs	r2, #106	; 0x6a
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fee6 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <MPU6050_Set_Memory_Bank>:
	data=MPU6050_Read_Single_Bit(I2Cx, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT);
	return data;
}

void MPU6050_Set_Memory_Bank(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t bank, uint8_t prefetchEnabled, uint8_t userBank)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4603      	mov	r3, r0
 800139c:	70fb      	strb	r3, [r7, #3]
 800139e:	460b      	mov	r3, r1
 80013a0:	70bb      	strb	r3, [r7, #2]
 80013a2:	4613      	mov	r3, r2
 80013a4:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 80013a6:	78bb      	ldrb	r3, [r7, #2]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	70bb      	strb	r3, [r7, #2]
	if (userBank) bank |= 0x20;
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <MPU6050_Set_Memory_Bank+0x34>
 80013b6:	78bb      	ldrb	r3, [r7, #2]
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	70bb      	strb	r3, [r7, #2]
	if (prefetchEnabled) bank |= 0x40;
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <MPU6050_Set_Memory_Bank+0x44>
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_BANK_SEL, 1,&bank, 1, 1000);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	b299      	uxth	r1, r3
 80013d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2301      	movs	r3, #1
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	226d      	movs	r2, #109	; 0x6d
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f005 fe24 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <MPU6050_Set_Memory_Start_Address>:

void MPU6050_Set_Memory_Start_Address(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t address)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	4613      	mov	r3, r2
 8001402:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MEM_START_ADDR, 1, &address, 1, 1000);
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	b299      	uxth	r1, r3
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	226e      	movs	r2, #110	; 0x6e
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f005 fe0a 	bl	8007034 <HAL_I2C_Mem_Write>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <MPU6050_Read_Memory_Bank>:

uint8_t MPU6050_Read_Memory_Bank(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af04      	add	r7, sp, #16
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, &data, 1, 1000);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	b299      	uxth	r1, r3
 8001438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 030f 	add.w	r3, r7, #15
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	226f      	movs	r2, #111	; 0x6f
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 feeb 	bl	8007228 <HAL_I2C_Mem_Read>
	return data;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MPU6050_getOTPBankValid>:

uint8_t MPU6050_getOTPBankValid(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT);
 8001468:	78f9      	ldrb	r1, [r7, #3]
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff16 	bl	80012a0 <MPU6050_Read_Single_Bit>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
	return data;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <MPU6050_Set_SlaveAddress>:

void MPU6050_Set_SlaveAddress(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t num, uint8_t address)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af04      	add	r7, sp, #16
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	4608      	mov	r0, r1
 800148c:	4611      	mov	r1, r2
 800148e:	461a      	mov	r2, r3
 8001490:	4603      	mov	r3, r0
 8001492:	70fb      	strb	r3, [r7, #3]
 8001494:	460b      	mov	r3, r1
 8001496:	70bb      	strb	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_I2C_SLV0_ADDR + num*3, 1, &address, 1, 1000);
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	b299      	uxth	r1, r3
 80014a0:	78bb      	ldrb	r3, [r7, #2]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	0052      	lsls	r2, r2, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3325      	adds	r3, #37	; 0x25
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	1c7b      	adds	r3, r7, #1
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f005 fdb7 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <MPU6050_Set_MasterModeEnable>:

void MPU6050_Set_MasterModeEnable(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	70fb      	strb	r3, [r7, #3]
 80014da:	4613      	mov	r3, r2
 80014dc:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT ,enable);
 80014de:	78f9      	ldrb	r1, [r7, #3]
 80014e0:	78bb      	ldrb	r3, [r7, #2]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2305      	movs	r3, #5
 80014e6:	226a      	movs	r2, #106	; 0x6a
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe31 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <MPU6050_Reset_I2CMaster>:

void MPU6050_Reset_I2CMaster(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT ,1);
 8001502:	78f9      	ldrb	r1, [r7, #3]
 8001504:	2301      	movs	r3, #1
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	226a      	movs	r2, #106	; 0x6a
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fe1f 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MPU6050_Set_CLK_Source>:

void MPU6050_Set_CLK_Source(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t source)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx,DeviceAddress, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH ,source);
 800152a:	78f9      	ldrb	r1, [r7, #3]
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2303      	movs	r3, #3
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2302      	movs	r3, #2
 8001536:	226b      	movs	r2, #107	; 0x6b
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe59 	bl	80011f0 <MPU6050_Write_Few_Bits>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <MPU6050_Reset>:

void MPU6050_Reset(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af02      	add	r7, sp, #8
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT ,1);
 8001552:	2301      	movs	r3, #1
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2307      	movs	r3, #7
 8001558:	226b      	movs	r2, #107	; 0x6b
 800155a:	21d0      	movs	r1, #208	; 0xd0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fdf7 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af02      	add	r7, sp, #8
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
 8001576:	4613      	mov	r3, r2
 8001578:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT ,enable);
 800157a:	78bb      	ldrb	r3, [r7, #2]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2306      	movs	r3, #6
 8001580:	226b      	movs	r2, #107	; 0x6b
 8001582:	21d0      	movs	r1, #208	; 0xd0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fde3 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <MPU6050_SetIntEnabled>:

void MPU6050_SetIntEnabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t enable)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af04      	add	r7, sp, #16
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	4613      	mov	r3, r2
 80015a0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_INT_ENABLE, 1, &enable, 1, 1000);
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	b299      	uxth	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2301      	movs	r3, #1
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	2238      	movs	r2, #56	; 0x38
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 fd3b 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <MPU6050_SetRate>:

void MPU6050_SetRate(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t rate)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af04      	add	r7, sp, #16
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	4613      	mov	r3, r2
 80015d4:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_SMPLRT_DIV, 1, &rate, 1, 1000);
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2301      	movs	r3, #1
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	1cbb      	adds	r3, r7, #2
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2301      	movs	r3, #1
 80015ea:	2219      	movs	r2, #25
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f005 fd21 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <MPU6050_SetGyroRange>:

void MPU6050_SetGyroRange(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t range)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af02      	add	r7, sp, #8
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	4613      	mov	r3, r2
 8001608:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH,range);
 800160a:	78f9      	ldrb	r1, [r7, #3]
 800160c:	78bb      	ldrb	r3, [r7, #2]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2302      	movs	r3, #2
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2304      	movs	r3, #4
 8001616:	221b      	movs	r2, #27
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fde9 	bl	80011f0 <MPU6050_Write_Few_Bits>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <SetExternalFrameSync>:
{
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH,range);
}

void SetExternalFrameSync(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t sync)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af02      	add	r7, sp, #8
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	4613      	mov	r3, r2
 8001634:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH,sync);
 8001636:	78f9      	ldrb	r1, [r7, #3]
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2303      	movs	r3, #3
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2305      	movs	r3, #5
 8001642:	221a      	movs	r2, #26
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fdd3 	bl	80011f0 <MPU6050_Write_Few_Bits>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <SetDLPFMode>:

void SetDLPFMode(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t mode)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af02      	add	r7, sp, #8
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	4613      	mov	r3, r2
 8001660:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH,mode);
 8001662:	78f9      	ldrb	r1, [r7, #3]
 8001664:	78bb      	ldrb	r3, [r7, #2]
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2303      	movs	r3, #3
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2302      	movs	r3, #2
 800166e:	221a      	movs	r2, #26
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fdbd 	bl	80011f0 <MPU6050_Write_Few_Bits>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <MPU6050_DMPConfig1>:

void MPU6050_DMPConfig1(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t config)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	70fb      	strb	r3, [r7, #3]
 800168a:	4613      	mov	r3, r2
 800168c:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_DMP_CFG_1, 1, &config, 1, 1000);
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	b299      	uxth	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	2270      	movs	r2, #112	; 0x70
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f005 fcc5 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <MPU6050_DMPConfig2>:

void MPU6050_DMPConfig2(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t config)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af04      	add	r7, sp, #16
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	4613      	mov	r3, r2
 80016c0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_DMP_CFG_2, 1, &config, 1, 1000);
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	1cbb      	adds	r3, r7, #2
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2271      	movs	r2, #113	; 0x71
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 fcab 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <MPU6050_SetOTPBankValid>:

void MPU6050_SetOTPBankValid(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af02      	add	r7, sp, #8
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
 80016f2:	4613      	mov	r3, r2
 80016f4:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT ,enable);
 80016f6:	78bb      	ldrb	r3, [r7, #2]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	2200      	movs	r2, #0
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fd25 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <MPU6050_SetMotionDetectionThreshold>:

void MPU6050_SetMotionDetectionThreshold(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t threshold)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af04      	add	r7, sp, #16
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	70fb      	strb	r3, [r7, #3]
 800171a:	4613      	mov	r3, r2
 800171c:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MOT_THR, 1, &threshold, 1, 1000);
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	b299      	uxth	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	221f      	movs	r2, #31
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f005 fc7d 	bl	8007034 <HAL_I2C_Mem_Write>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <MPU6050_SetZeroMotionDetectionThreshold>:

void MPU6050_SetZeroMotionDetectionThreshold(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t threshold)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af04      	add	r7, sp, #16
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
 800174e:	4613      	mov	r3, r2
 8001750:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_ZRMOT_THR, 1, &threshold, 1, 1000);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	b299      	uxth	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	1cbb      	adds	r3, r7, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2301      	movs	r3, #1
 8001766:	2221      	movs	r2, #33	; 0x21
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f005 fc63 	bl	8007034 <HAL_I2C_Mem_Write>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <MPU6050_SetMotionDetectionDuration>:

void MPU6050_SetMotionDetectionDuration(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t duration)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af04      	add	r7, sp, #16
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
 8001782:	4613      	mov	r3, r2
 8001784:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MOT_DUR, 1, &duration, 1, 1000);
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	b299      	uxth	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	2301      	movs	r3, #1
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	2220      	movs	r2, #32
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 fc49 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <MPU6050_SetZeroMotionDetectionDuration>:

void MPU6050_SetZeroMotionDetectionDuration(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t duration)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af04      	add	r7, sp, #16
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	4613      	mov	r3, r2
 80017b8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_ZRMOT_DUR, 1, &duration, 1, 1000);
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	b299      	uxth	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	1cbb      	adds	r3, r7, #2
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	2222      	movs	r2, #34	; 0x22
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f005 fc2f 	bl	8007034 <HAL_I2C_Mem_Write>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <MPU6050_SetFIFOenabled>:

void MPU6050_SetFIFOenabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af02      	add	r7, sp, #8
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	4613      	mov	r3, r2
 80017ec:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT ,enable);
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2306      	movs	r3, #6
 80017f4:	226a      	movs	r2, #106	; 0x6a
 80017f6:	21d0      	movs	r1, #208	; 0xd0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fca9 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <MPU6050_ResetFIFO>:

void MPU6050_ResetFIFO(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af02      	add	r7, sp, #8
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT ,1);
 8001812:	2301      	movs	r3, #1
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2302      	movs	r3, #2
 8001818:	226a      	movs	r2, #106	; 0x6a
 800181a:	21d0      	movs	r1, #208	; 0xd0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fc97 	bl	8001150 <MPU6050_Write_Single_Bit>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <MPU6050_GetFifoCount>:

uint16_t MPU6050_GetFifoCount(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b088      	sub	sp, #32
 800182e:	af04      	add	r7, sp, #16
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_FIFO_COUNTH, 1, data, 2, 1000);
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	b299      	uxth	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2302      	movs	r3, #2
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	2272      	movs	r2, #114	; 0x72
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f005 fcea 	bl	8007228 <HAL_I2C_Mem_Read>
	return (((uint16_t)data[0]) << 8) | data[1];
 8001854:	7b3b      	ldrb	r3, [r7, #12]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21b      	sxth	r3, r3
 8001862:	b29b      	uxth	r3, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <MPU6050_GetFifoBytes>:
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT);
	return data;
}

void MPU6050_GetFifoBytes(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t *data, uint8_t length)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	72fb      	strb	r3, [r7, #11]
 800187c:	4613      	mov	r3, r2
 800187e:	72bb      	strb	r3, [r7, #10]
    if(length > 0)
 8001880:	7abb      	ldrb	r3, [r7, #10]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00f      	beq.n	80018a6 <MPU6050_GetFifoBytes+0x3a>
    {
    	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_FIFO_R_W, 1 , data, length, 1000);
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	b299      	uxth	r1, r3
 800188a:	7abb      	ldrb	r3, [r7, #10]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001892:	9202      	str	r2, [sp, #8]
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	2274      	movs	r2, #116	; 0x74
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f005 fcc2 	bl	8007228 <HAL_I2C_Mem_Read>

    else
    {
    	*data = 0;
    }
}
 80018a4:	e002      	b.n	80018ac <MPU6050_GetFifoBytes+0x40>
    	*data = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <MPU6050_GetIntStatus>:
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT);
	return data;
}

uint8_t MPU6050_GetIntStatus(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af04      	add	r7, sp, #16
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_INT_STATUS, 1, &data, 1, 1000);
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	b299      	uxth	r1, r3
 80018c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	f107 030f 	add.w	r3, r7, #15
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2301      	movs	r3, #1
 80018d6:	223a      	movs	r2, #58	; 0x3a
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f005 fca5 	bl	8007228 <HAL_I2C_Mem_Read>
	return data;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <MPU6050_GetCurrentFIFOPacket>:

uint32_t MPU6050_GetCurrentFIFOPacket(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t *data,uint8_t length)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	460b      	mov	r3, r1
 80018f6:	72fb      	strb	r3, [r7, #11]
 80018f8:	4613      	mov	r3, r2
 80018fa:	72bb      	strb	r3, [r7, #10]
    int16_t fifoC;

    fifoC = MPU6050_GetFifoCount(I2Cx, DeviceAddress);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff ff92 	bl	800182a <MPU6050_GetFifoCount>
 8001906:	4603      	mov	r3, r0
 8001908:	82fb      	strh	r3, [r7, #22]

    if(!fifoC)//No data in FIFO
 800190a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <MPU6050_GetCurrentFIFOPacket+0x2e>
    {
    	return 0;
 8001912:	2300      	movs	r3, #0
 8001914:	e011      	b.n	800193a <MPU6050_GetCurrentFIFOPacket+0x52>
    }

    if(fifoC > length)//reset Buffer, more than expected 42 packets clr buffer read in next cycle
 8001916:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800191a:	7abb      	ldrb	r3, [r7, #10]
 800191c:	429a      	cmp	r2, r3
 800191e:	dd05      	ble.n	800192c <MPU6050_GetCurrentFIFOPacket+0x44>
    {
    	MPU6050_ResetFIFO(I2Cx,MPU6050_ADDRESS);
 8001920:	21d0      	movs	r1, #208	; 0xd0
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff ff6f 	bl	8001806 <MPU6050_ResetFIFO>
    	return 0;
 8001928:	2300      	movs	r3, #0
 800192a:	e006      	b.n	800193a <MPU6050_GetCurrentFIFOPacket+0x52>
    }

    else //read expected 42 bytes
    {
    	MPU6050_GetFifoBytes(I2Cx, DeviceAddress,data, length);
 800192c:	7abb      	ldrb	r3, [r7, #10]
 800192e:	7af9      	ldrb	r1, [r7, #11]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff ff9a 	bl	800186c <MPU6050_GetFifoBytes>
    	return 1;
 8001938:	2301      	movs	r3, #1
    }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <MPU6050_WriteMemoryBlock>:

uint8_t MPU6050_WriteMemoryBlock(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address,uint8_t verify, uint8_t useProgMem)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b08c      	sub	sp, #48	; 0x30
 8001946:	af04      	add	r7, sp, #16
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	461a      	mov	r2, r3
 800194e:	460b      	mov	r3, r1
 8001950:	72fb      	strb	r3, [r7, #11]
 8001952:	4613      	mov	r3, r2
 8001954:	813b      	strh	r3, [r7, #8]
	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 8001956:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800195a:	7af9      	ldrb	r1, [r7, #11]
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2300      	movs	r3, #0
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fd12 	bl	800138c <MPU6050_Set_Memory_Bank>
	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 8001968:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	4619      	mov	r1, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fd3f 	bl	80013f4 <MPU6050_Set_Memory_Start_Address>

    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) 	verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 800197e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <MPU6050_WriteMemoryBlock+0x4e>
 8001986:	2010      	movs	r0, #16
 8001988:	f007 ffac 	bl	80098e4 <malloc>
 800198c:	4603      	mov	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001990:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <MPU6050_WriteMemoryBlock+0x60>
 8001998:	2010      	movs	r0, #16
 800199a:	f007 ffa3 	bl	80098e4 <malloc>
 800199e:	4603      	mov	r3, r0
 80019a0:	617b      	str	r3, [r7, #20]

    for (i = 0; i < dataSize;)
 80019a2:	2300      	movs	r3, #0
 80019a4:	827b      	strh	r3, [r7, #18]
 80019a6:	e0a7      	b.n	8001af8 <MPU6050_WriteMemoryBlock+0x1b6>
    {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80019a8:	2310      	movs	r3, #16
 80019aa:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80019ac:	8a7a      	ldrh	r2, [r7, #18]
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	441a      	add	r2, r3
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dd05      	ble.n	80019c4 <MPU6050_WriteMemoryBlock+0x82>
 80019b8:	893b      	ldrh	r3, [r7, #8]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	8a7b      	ldrh	r3, [r7, #18]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80019c4:	7ffa      	ldrb	r2, [r7, #31]
 80019c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dd03      	ble.n	80019da <MPU6050_WriteMemoryBlock+0x98>
 80019d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d6:	425b      	negs	r3, r3
 80019d8:	77fb      	strb	r3, [r7, #31]

        if (useProgMem) {
 80019da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d014      	beq.n	8001a0c <MPU6050_WriteMemoryBlock+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80019e2:	2300      	movs	r3, #0
 80019e4:	747b      	strb	r3, [r7, #17]
 80019e6:	e00c      	b.n	8001a02 <MPU6050_WriteMemoryBlock+0xc0>
 80019e8:	8a7a      	ldrh	r2, [r7, #18]
 80019ea:	7c7b      	ldrb	r3, [r7, #17]
 80019ec:	4413      	add	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	441a      	add	r2, r3
 80019f2:	7c7b      	ldrb	r3, [r7, #17]
 80019f4:	6979      	ldr	r1, [r7, #20]
 80019f6:	440b      	add	r3, r1
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	7c7b      	ldrb	r3, [r7, #17]
 80019fe:	3301      	adds	r3, #1
 8001a00:	747b      	strb	r3, [r7, #17]
 8001a02:	7c7a      	ldrb	r2, [r7, #17]
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3ee      	bcc.n	80019e8 <MPU6050_WriteMemoryBlock+0xa6>
 8001a0a:	e003      	b.n	8001a14 <MPU6050_WriteMemoryBlock+0xd2>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8001a0c:	8a7b      	ldrh	r3, [r7, #18]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
        }

        HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, progBuffer, chunkSize, 1000);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b299      	uxth	r1, r3
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a20:	9202      	str	r2, [sp, #8]
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	226f      	movs	r2, #111	; 0x6f
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f005 fb01 	bl	8007034 <HAL_I2C_Mem_Write>

        // verify data if needed
        if (verify && verifyBuffer)
 8001a32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d036      	beq.n	8001aa8 <MPU6050_WriteMemoryBlock+0x166>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d033      	beq.n	8001aa8 <MPU6050_WriteMemoryBlock+0x166>
        {
        	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 8001a40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a44:	7af9      	ldrb	r1, [r7, #11]
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fc9d 	bl	800138c <MPU6050_Set_Memory_Bank>
        	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 8001a52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fcca 	bl	80013f4 <MPU6050_Set_Memory_Start_Address>

        	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, verifyBuffer, chunkSize, 1000);
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	b299      	uxth	r1, r3
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6c:	9202      	str	r2, [sp, #8]
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	226f      	movs	r2, #111	; 0x6f
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f005 fbd5 	bl	8007228 <HAL_I2C_Mem_Read>

            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	461a      	mov	r2, r3
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f007 ff3d 	bl	8009904 <memcmp>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <MPU6050_WriteMemoryBlock+0x166>
            {
                free(verifyBuffer);
 8001a90:	69b8      	ldr	r0, [r7, #24]
 8001a92:	f007 ff2f 	bl	80098f4 <free>
                if (useProgMem) free(progBuffer);
 8001a96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <MPU6050_WriteMemoryBlock+0x162>
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f007 ff28 	bl	80098f4 <free>
                return 0; // uh oh.
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e03b      	b.n	8001b20 <MPU6050_WriteMemoryBlock+0x1de>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8001aa8:	7ffb      	ldrb	r3, [r7, #31]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	8a7b      	ldrh	r3, [r7, #18]
 8001aae:	4413      	add	r3, r2
 8001ab0:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8001ab2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize)
 8001abe:	8a7a      	ldrh	r2, [r7, #18]
 8001ac0:	893b      	ldrh	r3, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d218      	bcs.n	8001af8 <MPU6050_WriteMemoryBlock+0x1b6>
        {
            if (address == 0) bank++;
 8001ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <MPU6050_WriteMemoryBlock+0x196>
 8001ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 8001ad8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001adc:	7af9      	ldrb	r1, [r7, #11]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff fc51 	bl	800138c <MPU6050_Set_Memory_Bank>
        	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 8001aea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fc7e 	bl	80013f4 <MPU6050_Set_Memory_Start_Address>
    for (i = 0; i < dataSize;)
 8001af8:	8a7a      	ldrh	r2, [r7, #18]
 8001afa:	893b      	ldrh	r3, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f4ff af53 	bcc.w	80019a8 <MPU6050_WriteMemoryBlock+0x66>
        }
    }
    if (verify) free(verifyBuffer);
 8001b02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <MPU6050_WriteMemoryBlock+0x1ce>
 8001b0a:	69b8      	ldr	r0, [r7, #24]
 8001b0c:	f007 fef2 	bl	80098f4 <free>
    if (useProgMem) free(progBuffer);
 8001b10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <MPU6050_WriteMemoryBlock+0x1dc>
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f007 feeb 	bl	80098f4 <free>
    return 1;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <MPU6050_DMP_Init>:

uint8_t MPU6050_DMP_Init(I2C_HandleTypeDef* I2Cx)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]

	//reset Device
	MPU6050_Reset(I2Cx,MPU6050_ADDRESS);
 8001b30:	21d0      	movs	r1, #208	; 0xd0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fd07 	bl	8001546 <MPU6050_Reset>

	HAL_Delay(30);
 8001b38:	201e      	movs	r0, #30
 8001b3a:	f003 ffed 	bl	8005b18 <HAL_Delay>

	//Sleep False
	MPU6050_SetSleepEnabled(I2Cx,MPU6050_ADDRESS,0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	21d0      	movs	r1, #208	; 0xd0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd11 	bl	800156a <MPU6050_SetSleepEnabled>

	MPU6050_Set_Memory_Bank(I2Cx,MPU6050_ADDRESS, 0x10, 1, 1);
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2210      	movs	r2, #16
 8001b50:	21d0      	movs	r1, #208	; 0xd0
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fc1a 	bl	800138c <MPU6050_Set_Memory_Bank>
	MPU6050_Set_Memory_Start_Address(I2Cx,MPU6050_ADDRESS,0x06);
 8001b58:	2206      	movs	r2, #6
 8001b5a:	21d0      	movs	r1, #208	; 0xd0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fc49 	bl	80013f4 <MPU6050_Set_Memory_Start_Address>
	MPU6050_Read_Memory_Bank(I2Cx,MPU6050_ADDRESS);
 8001b62:	21d0      	movs	r1, #208	; 0xd0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fc5f 	bl	8001428 <MPU6050_Read_Memory_Bank>
	MPU6050_Set_Memory_Bank(I2Cx,MPU6050_ADDRESS, 0, 0, 0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	21d0      	movs	r1, #208	; 0xd0
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fc09 	bl	800138c <MPU6050_Set_Memory_Bank>
	MPU6050_getOTPBankValid(I2Cx,MPU6050_ADDRESS);
 8001b7a:	21d0      	movs	r1, #208	; 0xd0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fc6d 	bl	800145c <MPU6050_getOTPBankValid>

	//Set Slave Stuff
	MPU6050_Set_SlaveAddress(I2Cx, MPU6050_ADDRESS, 0, 0x7F);	//slave 0 to address 0x7F
 8001b82:	237f      	movs	r3, #127	; 0x7f
 8001b84:	2200      	movs	r2, #0
 8001b86:	21d0      	movs	r1, #208	; 0xd0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fc7a 	bl	8001482 <MPU6050_Set_SlaveAddress>
	MPU6050_Set_MasterModeEnable(I2Cx, MPU6050_ADDRESS,0); 		//disable master mode
 8001b8e:	2200      	movs	r2, #0
 8001b90:	21d0      	movs	r1, #208	; 0xd0
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fc9b 	bl	80014ce <MPU6050_Set_MasterModeEnable>
	MPU6050_Set_SlaveAddress(I2Cx, MPU6050_ADDRESS, 0, 0x68);	//slave 0 to address 0x68
 8001b98:	2368      	movs	r3, #104	; 0x68
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	21d0      	movs	r1, #208	; 0xd0
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fc6f 	bl	8001482 <MPU6050_Set_SlaveAddress>
	MPU6050_Reset_I2CMaster(I2Cx,MPU6050_ADDRESS);
 8001ba4:	21d0      	movs	r1, #208	; 0xd0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fca5 	bl	80014f6 <MPU6050_Reset_I2CMaster>

	HAL_Delay(20);
 8001bac:	2014      	movs	r0, #20
 8001bae:	f003 ffb3 	bl	8005b18 <HAL_Delay>

	MPU6050_Set_CLK_Source(I2Cx,MPU6050_ADDRESS,MPU6050_CLOCK_PLL_ZGYRO);
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	21d0      	movs	r1, #208	; 0xd0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fcaf 	bl	800151a <MPU6050_Set_CLK_Source>
	MPU6050_SetIntEnabled(I2Cx,MPU6050_ADDRESS,1<<MPU6050_INTERRUPT_FIFO_OFLOW_BIT|1<<MPU6050_INTERRUPT_DMP_INT_BIT);
 8001bbc:	2212      	movs	r2, #18
 8001bbe:	21d0      	movs	r1, #208	; 0xd0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fce6 	bl	8001592 <MPU6050_SetIntEnabled>

	MPU6050_SetRate(I2Cx,MPU6050_ADDRESS, 39);// if GYRO clk 1khz (depends on BW setting) 1Khz / (1+4)=200hZ  ,, else 8kHz /(39+1)=200hZ
 8001bc6:	2227      	movs	r2, #39	; 0x27
 8001bc8:	21d0      	movs	r1, #208	; 0xd0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fcfb 	bl	80015c6 <MPU6050_SetRate>

	SetExternalFrameSync(I2Cx,MPU6050_ADDRESS, MPU6050_EXT_SYNC_TEMP_OUT_L);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	21d0      	movs	r1, #208	; 0xd0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fd26 	bl	8001626 <SetExternalFrameSync>

	SetDLPFMode(I2Cx,MPU6050_ADDRESS, MPU6050_DLPF_BW_256);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	21d0      	movs	r1, #208	; 0xd0
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fd37 	bl	8001652 <SetDLPFMode>

	MPU6050_SetGyroRange(I2Cx,MPU6050_ADDRESS, MPU6050_GYRO_FS_2000); //Gyro range
 8001be4:	2203      	movs	r2, #3
 8001be6:	21d0      	movs	r1, #208	; 0xd0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fd06 	bl	80015fa <MPU6050_SetGyroRange>

	//MPU6050_SetAccelRange(I2Cx,MPU6050_ADDRESS, MPU6050_ACCEL_FS_2); //+-8g

	//Load DMP Code in Memory Bank
	MPU6050_WriteMemoryBlock(I2Cx,MPU6050_ADDRESS,dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0,1,0);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	f240 7389 	movw	r3, #1929	; 0x789
 8001c02:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <MPU6050_DMP_Init+0x188>)
 8001c04:	21d0      	movs	r1, #208	; 0xd0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fe9b 	bl	8001942 <MPU6050_WriteMemoryBlock>

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	733b      	strb	r3, [r7, #12]
 8001c10:	2301      	movs	r3, #1
 8001c12:	737b      	strb	r3, [r7, #13]
	MPU6050_WriteMemoryBlock(I2Cx,MPU6050_ADDRESS,dmpUpdate, 0x02, 0x02, 0x16,1,0); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9303      	str	r3, [sp, #12]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	2316      	movs	r3, #22
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2302      	movs	r3, #2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	21d0      	movs	r1, #208	; 0xd0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fe88 	bl	8001942 <MPU6050_WriteMemoryBlock>

	//write start address MSB into register
	MPU6050_DMPConfig1(I2Cx,MPU6050_ADDRESS, 0x03);
 8001c32:	2203      	movs	r2, #3
 8001c34:	21d0      	movs	r1, #208	; 0xd0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd21 	bl	800167e <MPU6050_DMPConfig1>

	//write start address LSB into register
	MPU6050_DMPConfig2(I2Cx,MPU6050_ADDRESS, 0x00);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	21d0      	movs	r1, #208	; 0xd0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fd36 	bl	80016b2 <MPU6050_DMPConfig2>

	MPU6050_SetOTPBankValid(I2Cx,MPU6050_ADDRESS,0);// Clear OTP flag
 8001c46:	2200      	movs	r2, #0
 8001c48:	21d0      	movs	r1, #208	; 0xd0
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fd4b 	bl	80016e6 <MPU6050_SetOTPBankValid>

	MPU6050_SetMotionDetectionThreshold(I2Cx,MPU6050_ADDRESS,2);
 8001c50:	2202      	movs	r2, #2
 8001c52:	21d0      	movs	r1, #208	; 0xd0
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fd5a 	bl	800170e <MPU6050_SetMotionDetectionThreshold>
	MPU6050_SetZeroMotionDetectionThreshold(I2Cx,MPU6050_ADDRESS,156);
 8001c5a:	229c      	movs	r2, #156	; 0x9c
 8001c5c:	21d0      	movs	r1, #208	; 0xd0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fd6f 	bl	8001742 <MPU6050_SetZeroMotionDetectionThreshold>
	MPU6050_SetMotionDetectionDuration(I2Cx,MPU6050_ADDRESS,80);
 8001c64:	2250      	movs	r2, #80	; 0x50
 8001c66:	21d0      	movs	r1, #208	; 0xd0
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fd84 	bl	8001776 <MPU6050_SetMotionDetectionDuration>
	MPU6050_SetZeroMotionDetectionDuration(I2Cx,MPU6050_ADDRESS,0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	21d0      	movs	r1, #208	; 0xd0
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd99 	bl	80017aa <MPU6050_SetZeroMotionDetectionDuration>

	MPU6050_SetFIFOenabled(I2Cx,MPU6050_ADDRESS,1);//enable FIFO
 8001c78:	2201      	movs	r2, #1
 8001c7a:	21d0      	movs	r1, #208	; 0xd0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fdae 	bl	80017de <MPU6050_SetFIFOenabled>

	MPU6050_DMP_Reset(I2Cx,MPU6050_ADDRESS);
 8001c82:	21d0      	movs	r1, #208	; 0xd0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fb6f 	bl	8001368 <MPU6050_DMP_Reset>

	MPU6050_DMP_Enable(I2Cx,MPU6050_ADDRESS,0);//disable DMP
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	21d0      	movs	r1, #208	; 0xd0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fb56 	bl	8001340 <MPU6050_DMP_Enable>

	MPU6050_ResetFIFO(I2Cx,MPU6050_ADDRESS); //reset FIFO
 8001c94:	21d0      	movs	r1, #208	; 0xd0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fdb5 	bl	8001806 <MPU6050_ResetFIFO>

	MPU6050_GetIntStatus(I2Cx,MPU6050_ADDRESS);
 8001c9c:	21d0      	movs	r1, #208	; 0xd0
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fe08 	bl	80018b4 <MPU6050_GetIntStatus>
}
 8001ca4:	bf00      	nop
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	0800c3a8 	.word	0x0800c3a8

08001cb4 <CalculateQuaternions>:


void CalculateQuaternions(struct Quaternions *q, uint8_t *fifo_data)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]

	int32_t q1,q2,q3,q4;

	q1=((int32_t)fifo_data[0] << 24) | ((int32_t)fifo_data[1] << 16) | ((int32_t)fifo_data[2] << 8) | fifo_data[3];
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	061a      	lsls	r2, r3, #24
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	3203      	adds	r2, #3
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
	q2=((int32_t)fifo_data[4] << 24) | ((int32_t)fifo_data[5] << 16) | ((int32_t)fifo_data[6] << 8) | fifo_data[7];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	061a      	lsls	r2, r3, #24
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3305      	adds	r3, #5
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3306      	adds	r3, #6
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	3207      	adds	r2, #7
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
	q3=((int32_t)fifo_data[8] << 24) | ((int32_t)fifo_data[9] << 16) | ((int32_t)fifo_data[10] << 8) | fifo_data[11];
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	061a      	lsls	r2, r3, #24
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3309      	adds	r3, #9
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	330a      	adds	r3, #10
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	4313      	orrs	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	320b      	adds	r2, #11
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
	q4=((int32_t)fifo_data[12] << 24) | ((int32_t)fifo_data[13] << 16) | ((int32_t)fifo_data[14] << 8) | fifo_data[15];
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	330c      	adds	r3, #12
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	061a      	lsls	r2, r3, #24
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	330d      	adds	r3, #13
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	330e      	adds	r3, #14
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	320f      	adds	r2, #15
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

	q->w=(float)(q1>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	141b      	asrs	r3, r3, #16
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ffbf 	bl	8000cdc <__aeabi_i2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8c1 	bl	8000eec <__aeabi_fdiv>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
	q->x=(float)(q2>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	141b      	asrs	r3, r3, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ffb0 	bl	8000cdc <__aeabi_i2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f8b2 	bl	8000eec <__aeabi_fdiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	605a      	str	r2, [r3, #4]
	q->y=(float)(q3>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	141b      	asrs	r3, r3, #16
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ffa1 	bl	8000cdc <__aeabi_i2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f8a3 	bl	8000eec <__aeabi_fdiv>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
	q->z=(float)(q4>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	141b      	asrs	r3, r3, #16
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff92 	bl	8000cdc <__aeabi_i2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f894 	bl	8000eec <__aeabi_fdiv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <CalculateGravityVector>:

void CalculateGravityVector(struct Quaternions *q, struct GravityVector *v)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	v -> x = 2 * (q -> x * q -> z - q -> w * q -> y);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe ffcb 	bl	8000d84 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461c      	mov	r4, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7fe ffc1 	bl	8000d84 <__aeabi_fmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4619      	mov	r1, r3
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7fe feb2 	bl	8000b70 <__aeabi_fsub>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe feaf 	bl	8000b74 <__addsf3>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	601a      	str	r2, [r3, #0]
	v -> y = 2 * (q -> w * q -> x + q -> y * q -> z);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4619      	mov	r1, r3
 8001e28:	4610      	mov	r0, r2
 8001e2a:	f7fe ffab 	bl	8000d84 <__aeabi_fmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461c      	mov	r4, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f7fe ffa1 	bl	8000d84 <__aeabi_fmul>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4619      	mov	r1, r3
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7fe fe94 	bl	8000b74 <__addsf3>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fe8f 	bl	8000b74 <__addsf3>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
	v -> z = q -> w * q -> w - q -> x * q -> x - q -> y * q -> y + q -> z * q -> z;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7fe ff8b 	bl	8000d84 <__aeabi_fmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461c      	mov	r4, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f7fe ff81 	bl	8000d84 <__aeabi_fmul>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7fe fe72 	bl	8000b70 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461c      	mov	r4, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7fe ff72 	bl	8000d84 <__aeabi_fmul>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7fe fe63 	bl	8000b70 <__aeabi_fsub>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7fe ff63 	bl	8000d84 <__aeabi_fmul>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7fe fe56 	bl	8000b74 <__addsf3>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}

08001ed8 <CalculateYawPitchRoll>:

void CalculateYawPitchRoll(struct Quaternions *q, struct GravityVector *v, struct Angles *ang)
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	float zRad;
	float yRad;
	float xRad;

	//(about Z axis)
	zRad = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fe42 	bl	8000b74 <__addsf3>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7fe ff42 	bl	8000d84 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461c      	mov	r4, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fe32 	bl	8000b74 <__addsf3>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7fe ff32 	bl	8000d84 <__aeabi_fmul>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4619      	mov	r1, r3
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7fe fe23 	bl	8000b70 <__aeabi_fsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa7b 	bl	8000428 <__aeabi_f2d>
 8001f32:	4604      	mov	r4, r0
 8001f34:	460d      	mov	r5, r1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fe19 	bl	8000b74 <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7fe ff19 	bl	8000d84 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461e      	mov	r6, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fe09 	bl	8000b74 <__addsf3>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7fe ff09 	bl	8000d84 <__aeabi_fmul>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4619      	mov	r1, r3
 8001f76:	4630      	mov	r0, r6
 8001f78:	f7fe fdfc 	bl	8000b74 <__addsf3>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fdf4 	bl	8000b70 <__aeabi_fsub>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa4c 	bl	8000428 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f009 fcfe 	bl	800b998 <atan2>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f7fe fd90 	bl	8000ac8 <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	61bb      	str	r3, [r7, #24]

	//(about Y axis)
	yRad = atan2(v -> x , sqrt(v -> y*v -> y + v -> z*v -> z));
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa39 	bl	8000428 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7fe fedd 	bl	8000d84 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461e      	mov	r6, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f7fe fed3 	bl	8000d84 <__aeabi_fmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	f7fe fdc6 	bl	8000b74 <__addsf3>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa1c 	bl	8000428 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 fcd0 	bl	800b99c <sqrt>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f009 fcc8 	bl	800b998 <atan2>
 8002008:	4603      	mov	r3, r0
 800200a:	460c      	mov	r4, r1
 800200c:	4618      	mov	r0, r3
 800200e:	4621      	mov	r1, r4
 8002010:	f7fe fd5a 	bl	8000ac8 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	617b      	str	r3, [r7, #20]

	//(about X axis)
	xRad = atan2(v -> y , v -> z);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa03 	bl	8000428 <__aeabi_f2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe f9fc 	bl	8000428 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f009 fcae 	bl	800b998 <atan2>
 800203c:	4603      	mov	r3, r0
 800203e:	460c      	mov	r4, r1
 8002040:	4618      	mov	r0, r3
 8002042:	4621      	mov	r1, r4
 8002044:	f7fe fd40 	bl	8000ac8 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	61fb      	str	r3, [r7, #28]
	if (v -> z < 0)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f833 	bl	80010c0 <__aeabi_fcmplt>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <CalculateYawPitchRoll+0x1b2>
	{
		if(xRad > 0)
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	69f8      	ldr	r0, [r7, #28]
 8002066:	f7ff f849 	bl	80010fc <__aeabi_fcmpgt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <CalculateYawPitchRoll+0x1a6>
		{
			xRad = PI - xRad;
 8002070:	69f9      	ldr	r1, [r7, #28]
 8002072:	4843      	ldr	r0, [pc, #268]	; (8002180 <CalculateYawPitchRoll+0x2a8>)
 8002074:	f7fe fd7c 	bl	8000b70 <__aeabi_fsub>
 8002078:	4603      	mov	r3, r0
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	e005      	b.n	800208a <CalculateYawPitchRoll+0x1b2>
		}
		else
		{
			xRad = -PI - xRad;
 800207e:	69f9      	ldr	r1, [r7, #28]
 8002080:	4840      	ldr	r0, [pc, #256]	; (8002184 <CalculateYawPitchRoll+0x2ac>)
 8002082:	f7fe fd75 	bl	8000b70 <__aeabi_fsub>
 8002086:	4603      	mov	r3, r0
 8002088:	61fb      	str	r3, [r7, #28]
		}
	}

	//MPU6050 position on Drone--> X direction (+ drone right)-Rotation around x Pitch, Y direction (+ drone front) -Rotation around Y Roll
	ang->yaw=zRad*RADIANSTODEGREES;
 800208a:	69b8      	ldr	r0, [r7, #24]
 800208c:	f7fe f9cc 	bl	8000428 <__aeabi_f2d>
 8002090:	a339      	add	r3, pc, #228	; (adr r3, 8002178 <CalculateYawPitchRoll+0x2a0>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fa1f 	bl	80004d8 <__aeabi_dmul>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	4618      	mov	r0, r3
 80020a0:	4621      	mov	r1, r4
 80020a2:	f7fe fd11 	bl	8000ac8 <__aeabi_d2f>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
	if ( ang->yaw < -180 ) ang->yaw += 360;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <CalculateYawPitchRoll+0x2b0>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f804 	bl	80010c0 <__aeabi_fcmplt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <CalculateYawPitchRoll+0x1fa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4932      	ldr	r1, [pc, #200]	; (800218c <CalculateYawPitchRoll+0x2b4>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd55 	bl	8000b74 <__addsf3>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]

	ang->pitch=xRad*RADIANSTODEGREES;
 80020d2:	69f8      	ldr	r0, [r7, #28]
 80020d4:	f7fe f9a8 	bl	8000428 <__aeabi_f2d>
 80020d8:	a327      	add	r3, pc, #156	; (adr r3, 8002178 <CalculateYawPitchRoll+0x2a0>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f9fb 	bl	80004d8 <__aeabi_dmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	4618      	mov	r0, r3
 80020e8:	4621      	mov	r1, r4
 80020ea:	f7fe fced 	bl	8000ac8 <__aeabi_d2f>
 80020ee:	4602      	mov	r2, r0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	605a      	str	r2, [r3, #4]
	if ( ang->pitch < -180 ) ang->pitch += 360;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4923      	ldr	r1, [pc, #140]	; (8002188 <CalculateYawPitchRoll+0x2b0>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe ffe0 	bl	80010c0 <__aeabi_fcmplt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <CalculateYawPitchRoll+0x242>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4920      	ldr	r1, [pc, #128]	; (800218c <CalculateYawPitchRoll+0x2b4>)
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fd31 	bl	8000b74 <__addsf3>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

	ang->roll=yRad*RADIANSTODEGREES;
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7fe f984 	bl	8000428 <__aeabi_f2d>
 8002120:	a315      	add	r3, pc, #84	; (adr r3, 8002178 <CalculateYawPitchRoll+0x2a0>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe f9d7 	bl	80004d8 <__aeabi_dmul>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	4618      	mov	r0, r3
 8002130:	4621      	mov	r1, r4
 8002132:	f7fe fcc9 	bl	8000ac8 <__aeabi_d2f>
 8002136:	4602      	mov	r2, r0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
	if ( ang->roll < -180 ) ang->roll += 360;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4911      	ldr	r1, [pc, #68]	; (8002188 <CalculateYawPitchRoll+0x2b0>)
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ffbc 	bl	80010c0 <__aeabi_fcmplt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <CalculateYawPitchRoll+0x28a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <CalculateYawPitchRoll+0x2b4>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fd0d 	bl	8000b74 <__addsf3>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
	ang->roll=-ang->roll; //positive angle drone tilt to right
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]


}
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002176:	bf00      	nop
 8002178:	1a47a9e3 	.word	0x1a47a9e3
 800217c:	404ca5dc 	.word	0x404ca5dc
 8002180:	40490fdb 	.word	0x40490fdb
 8002184:	c0490fdb 	.word	0xc0490fdb
 8002188:	c3340000 	.word	0xc3340000
 800218c:	43b40000 	.word	0x43b40000

08002190 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60da      	str	r2, [r3, #12]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	b29b      	uxth	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <main+0xfc>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <main+0xfc>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <main+0x100>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <main+0x100>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <main+0x100>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221e:	f003 fc19 	bl	8005a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002222:	f000 fceb 	bl	8002bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002226:	f000 ff23 	bl	8003070 <MX_GPIO_Init>
  MX_ADC1_Init();
 800222a:	f000 fd43 	bl	8002cb4 <MX_ADC1_Init>
  MX_I2C2_Init();
 800222e:	f000 fd7f 	bl	8002d30 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002232:	f000 fdab 	bl	8002d8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002236:	f000 fddf 	bl	8002df8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800223a:	f000 feef 	bl	800301c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800223e:	f000 fea1 	bl	8002f84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8002242:	482e      	ldr	r0, [pc, #184]	; (80022fc <main+0x104>)
 8002244:	f004 f89a 	bl	800637c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8002248:	482c      	ldr	r0, [pc, #176]	; (80022fc <main+0x104>)
 800224a:	f003 fd5f 	bl	8005d0c <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 800224e:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <main+0x108>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=5.0;
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <main+0x108>)
 8002256:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <main+0x10c>)
 8002258:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.001;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <main+0x108>)
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <main+0x110>)
 800225e:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=500.0;
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <main+0x108>)
 8002262:	4a2a      	ldr	r2, [pc, #168]	; (800230c <main+0x114>)
 8002264:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=5.0;
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <main+0x108>)
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <main+0x10c>)
 800226a:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.001;
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <main+0x108>)
 800226e:	4a26      	ldr	r2, [pc, #152]	; (8002308 <main+0x110>)
 8002270:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=500.0;
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <main+0x108>)
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <main+0x114>)
 8002276:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=4;
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <main+0x108>)
 800227a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800227e:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <main+0x108>)
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=0;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <main+0x108>)
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <main+0x108>)
 8002292:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <main+0x108>)
 800229a:	2264      	movs	r2, #100	; 0x64
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <main+0x108>)
 80022a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <main+0x108>)
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 0;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <main+0x108>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 0;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <main+0x108>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c
  FlashDataDefault.maxpitchdegree=20; //degrees
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <main+0x108>)
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <main+0x118>)
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
  FlashDataDefault.maxrolldegree=20;  //degrees
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <main+0x108>)
 80022c0:	4a13      	ldr	r2, [pc, #76]	; (8002310 <main+0x118>)
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
  FlashDataDefault.maxyawdegree=180;  //degrees
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <main+0x108>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <main+0x11c>)
 80022c8:	649a      	str	r2, [r3, #72]	; 0x48
  FlashDataDefault.minthrottle=80;    //80counts of 1000 to spin rotors
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <main+0x108>)
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <main+0x120>)
 80022ce:	64da      	str	r2, [r3, #76]	; 0x4c
  FlashDataDefault.maxthrottle=800;   //800counts of 1000 (80%)
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <main+0x108>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <main+0x124>)
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50


  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 80022d6:	4812      	ldr	r0, [pc, #72]	; (8002320 <main+0x128>)
 80022d8:	f001 f91c 	bl	8003514 <CheckFlashData>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d124      	bne.n	800232c <main+0x134>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 80022e2:	4910      	ldr	r1, [pc, #64]	; (8002324 <main+0x12c>)
 80022e4:	480e      	ldr	r0, [pc, #56]	; (8002320 <main+0x128>)
 80022e6:	f001 f921 	bl	800352c <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 80022ea:	490f      	ldr	r1, [pc, #60]	; (8002328 <main+0x130>)
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <main+0x128>)
 80022ee:	f001 f91d 	bl	800352c <ReadFlashData>
 80022f2:	e027      	b.n	8002344 <main+0x14c>
 80022f4:	e000edf0 	.word	0xe000edf0
 80022f8:	e0001000 	.word	0xe0001000
 80022fc:	200004b0 	.word	0x200004b0
 8002300:	200003b8 	.word	0x200003b8
 8002304:	40a00000 	.word	0x40a00000
 8002308:	3a83126f 	.word	0x3a83126f
 800230c:	43fa0000 	.word	0x43fa0000
 8002310:	41a00000 	.word	0x41a00000
 8002314:	43340000 	.word	0x43340000
 8002318:	42a00000 	.word	0x42a00000
 800231c:	44480000 	.word	0x44480000
 8002320:	0800fc00 	.word	0x0800fc00
 8002324:	20000598 	.word	0x20000598
 8002328:	20000640 	.word	0x20000640

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR, &FlashDataDefault);
 800232c:	49b1      	ldr	r1, [pc, #708]	; (80025f4 <main+0x3fc>)
 800232e:	48b2      	ldr	r0, [pc, #712]	; (80025f8 <main+0x400>)
 8002330:	f000 ff4c 	bl	80031cc <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8002334:	49b1      	ldr	r1, [pc, #708]	; (80025fc <main+0x404>)
 8002336:	48b0      	ldr	r0, [pc, #704]	; (80025f8 <main+0x400>)
 8002338:	f001 f8f8 	bl	800352c <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 800233c:	49b0      	ldr	r1, [pc, #704]	; (8002600 <main+0x408>)
 800233e:	48ae      	ldr	r0, [pc, #696]	; (80025f8 <main+0x400>)
 8002340:	f001 f8f4 	bl	800352c <ReadFlashData>
  }//------------------------------------------------------------------------------------------------------


  HAL_Delay(400);//wait for stable power
 8002344:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002348:	f003 fbe6 	bl	8005b18 <HAL_Delay>

  //MPU6050 Init
  MPU6050rezulatat=MPU6050_check(&hi2c2);
 800234c:	48ad      	ldr	r0, [pc, #692]	; (8002604 <main+0x40c>)
 800234e:	f7fe ffdb 	bl	8001308 <MPU6050_check>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4bac      	ldr	r3, [pc, #688]	; (8002608 <main+0x410>)
 8002358:	701a      	strb	r2, [r3, #0]
  MPU6050_DMP_Init(&hi2c2);
 800235a:	48aa      	ldr	r0, [pc, #680]	; (8002604 <main+0x40c>)
 800235c:	f7ff fbe4 	bl	8001b28 <MPU6050_DMP_Init>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8002360:	4baa      	ldr	r3, [pc, #680]	; (800260c <main+0x414>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4aa9      	ldr	r2, [pc, #676]	; (800260c <main+0x414>)
 8002366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236a:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002372:	48a7      	ldr	r0, [pc, #668]	; (8002610 <main+0x418>)
 8002374:	f004 fd06 	bl	8006d84 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8002378:	f001 fb80 	bl	8003a7c <nRF24_Check>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4ba4      	ldr	r3, [pc, #656]	; (8002614 <main+0x41c>)
 8002382:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8002384:	f001 fb28 	bl	80039d8 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8002388:	20ff      	movs	r0, #255	; 0xff
 800238a:	f001 fd09 	bl	8003da0 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 800238e:	200f      	movs	r0, #15
 8002390:	f001 fc03 	bl	8003b9a <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8002394:	2020      	movs	r0, #32
 8002396:	f001 fc94 	bl	8003cc2 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 800239a:	2008      	movs	r0, #8
 800239c:	f001 fbdc 	bl	8003b58 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 fc08 	bl	8003bb6 <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80023a6:	499c      	ldr	r1, [pc, #624]	; (8002618 <main+0x420>)
 80023a8:	2001      	movs	r0, #1
 80023aa:	f001 fc15 	bl	8003bd8 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 80023ae:	2208      	movs	r2, #8
 80023b0:	2100      	movs	r1, #0
 80023b2:	2001      	movs	r0, #1
 80023b4:	f001 fca0 	bl	8003cf8 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80023b8:	4997      	ldr	r1, [pc, #604]	; (8002618 <main+0x420>)
 80023ba:	2006      	movs	r0, #6
 80023bc:	f001 fc0c 	bl	8003bd8 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f001 fc63 	bl	8003c8c <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f001 fba5 	bl	8003b16 <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80023cc:	f001 fd32 	bl	8003e34 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f001 fb81 	bl	8003ad8 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023dc:	488c      	ldr	r0, [pc, #560]	; (8002610 <main+0x418>)
 80023de:	f004 fcd1 	bl	8006d84 <HAL_GPIO_WritePin>

  HAL_Delay(2000);//wait to connect battery
 80023e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023e6:	f003 fb97 	bl	8005b18 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80023ea:	2100      	movs	r1, #0
 80023ec:	488b      	ldr	r0, [pc, #556]	; (800261c <main+0x424>)
 80023ee:	f006 faf9 	bl	80089e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80023f2:	2104      	movs	r1, #4
 80023f4:	4889      	ldr	r0, [pc, #548]	; (800261c <main+0x424>)
 80023f6:	f006 faf5 	bl	80089e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80023fa:	2108      	movs	r1, #8
 80023fc:	4887      	ldr	r0, [pc, #540]	; (800261c <main+0x424>)
 80023fe:	f006 faf1 	bl	80089e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002402:	210c      	movs	r1, #12
 8002404:	4885      	ldr	r0, [pc, #532]	; (800261c <main+0x424>)
 8002406:	f006 faed 	bl	80089e4 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <main+0x428>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  MPU6050_DMP_Enable(&hi2c2,MPU6050_ADDRESS,1);//enable DMP (writing to FIFO)
 8002410:	2201      	movs	r2, #1
 8002412:	21d0      	movs	r1, #208	; 0xd0
 8002414:	487b      	ldr	r0, [pc, #492]	; (8002604 <main+0x40c>)
 8002416:	f7fe ff93 	bl	8001340 <MPU6050_DMP_Enable>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 800241a:	4882      	ldr	r0, [pc, #520]	; (8002624 <main+0x42c>)
 800241c:	f006 fa8a 	bl	8008934 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 8002420:	2064      	movs	r0, #100	; 0x64
 8002422:	f003 fb79 	bl	8005b18 <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 8002426:	4b80      	ldr	r3, [pc, #512]	; (8002628 <main+0x430>)
 8002428:	4a80      	ldr	r2, [pc, #512]	; (800262c <main+0x434>)
 800242a:	6810      	ldr	r0, [r2, #0]
 800242c:	6018      	str	r0, [r3, #0]
 800242e:	8891      	ldrh	r1, [r2, #4]
 8002430:	7992      	ldrb	r2, [r2, #6]
 8002432:	8099      	strh	r1, [r3, #4]
 8002434:	719a      	strb	r2, [r3, #6]
	  WriteString(UartTXbuff0);
 8002436:	487c      	ldr	r0, [pc, #496]	; (8002628 <main+0x430>)
 8002438:	f001 f960 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 800243c:	2301      	movs	r3, #1
 800243e:	2201      	movs	r2, #1
 8002440:	497b      	ldr	r1, [pc, #492]	; (8002630 <main+0x438>)
 8002442:	4879      	ldr	r0, [pc, #484]	; (8002628 <main+0x430>)
 8002444:	f007 ff86 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002448:	4877      	ldr	r0, [pc, #476]	; (8002628 <main+0x430>)
 800244a:	f001 f957 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <main+0x430>)
 8002450:	4a78      	ldr	r2, [pc, #480]	; (8002634 <main+0x43c>)
 8002452:	6810      	ldr	r0, [r2, #0]
 8002454:	6018      	str	r0, [r3, #0]
 8002456:	7912      	ldrb	r2, [r2, #4]
 8002458:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 800245a:	4873      	ldr	r0, [pc, #460]	; (8002628 <main+0x430>)
 800245c:	f001 f94e 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u MPU=%u \n\r",MotorStatus,MPU6050rezulatat);
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <main+0x428>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <main+0x410>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4973      	ldr	r1, [pc, #460]	; (8002638 <main+0x440>)
 800246a:	486f      	ldr	r0, [pc, #444]	; (8002628 <main+0x430>)
 800246c:	f007 ff72 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002470:	486d      	ldr	r0, [pc, #436]	; (8002628 <main+0x430>)
 8002472:	f001 f943 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8002476:	4b71      	ldr	r3, [pc, #452]	; (800263c <main+0x444>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd ffd4 	bl	8000428 <__aeabi_f2d>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	461a      	mov	r2, r3
 8002486:	4623      	mov	r3, r4
 8002488:	496d      	ldr	r1, [pc, #436]	; (8002640 <main+0x448>)
 800248a:	4867      	ldr	r0, [pc, #412]	; (8002628 <main+0x430>)
 800248c:	f007 ff62 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002490:	4865      	ldr	r0, [pc, #404]	; (8002628 <main+0x430>)
 8002492:	f001 f933 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 8002496:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <main+0x44c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd ffc4 	bl	8000428 <__aeabi_f2d>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	4967      	ldr	r1, [pc, #412]	; (8002648 <main+0x450>)
 80024aa:	485f      	ldr	r0, [pc, #380]	; (8002628 <main+0x430>)
 80024ac:	f007 ff52 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80024b0:	485d      	ldr	r0, [pc, #372]	; (8002628 <main+0x430>)
 80024b2:	f001 f923 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <main+0x454>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd ffb4 	bl	8000428 <__aeabi_f2d>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	461a      	mov	r2, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	4961      	ldr	r1, [pc, #388]	; (8002650 <main+0x458>)
 80024ca:	4857      	ldr	r0, [pc, #348]	; (8002628 <main+0x430>)
 80024cc:	f007 ff42 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80024d0:	4855      	ldr	r0, [pc, #340]	; (8002628 <main+0x430>)
 80024d2:	f001 f913 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <main+0x45c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd ffa4 	bl	8000428 <__aeabi_f2d>
 80024e0:	4603      	mov	r3, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	461a      	mov	r2, r3
 80024e6:	4623      	mov	r3, r4
 80024e8:	495b      	ldr	r1, [pc, #364]	; (8002658 <main+0x460>)
 80024ea:	484f      	ldr	r0, [pc, #316]	; (8002628 <main+0x430>)
 80024ec:	f007 ff32 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80024f0:	484d      	ldr	r0, [pc, #308]	; (8002628 <main+0x430>)
 80024f2:	f001 f903 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <main+0x430>)
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <main+0x464>)
 80024fa:	8811      	ldrh	r1, [r2, #0]
 80024fc:	7892      	ldrb	r2, [r2, #2]
 80024fe:	8019      	strh	r1, [r3, #0]
 8002500:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002502:	4849      	ldr	r0, [pc, #292]	; (8002628 <main+0x430>)
 8002504:	f001 f8fa 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <main+0x468>)
 800250a:	cb18      	ldmia	r3, {r3, r4}
 800250c:	461a      	mov	r2, r3
 800250e:	4623      	mov	r3, r4
 8002510:	4954      	ldr	r1, [pc, #336]	; (8002664 <main+0x46c>)
 8002512:	4845      	ldr	r0, [pc, #276]	; (8002628 <main+0x430>)
 8002514:	f007 ff1e 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002518:	4843      	ldr	r0, [pc, #268]	; (8002628 <main+0x430>)
 800251a:	f001 f8ef 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <main+0x470>)
 8002520:	cb18      	ldmia	r3, {r3, r4}
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	4951      	ldr	r1, [pc, #324]	; (800266c <main+0x474>)
 8002528:	483f      	ldr	r0, [pc, #252]	; (8002628 <main+0x430>)
 800252a:	f007 ff13 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 800252e:	483e      	ldr	r0, [pc, #248]	; (8002628 <main+0x430>)
 8002530:	f001 f8e4 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw=%.2f \n\r",AngleYaw);
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <main+0x478>)
 8002536:	cb18      	ldmia	r3, {r3, r4}
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	494d      	ldr	r1, [pc, #308]	; (8002674 <main+0x47c>)
 800253e:	483a      	ldr	r0, [pc, #232]	; (8002628 <main+0x430>)
 8002540:	f007 ff08 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002544:	4838      	ldr	r0, [pc, #224]	; (8002628 <main+0x430>)
 8002546:	f001 f8d9 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch ACC=%.2f GYRO=%.2f\n\r",AnglePitchAccel,AnglePitchGyro);
 800254a:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <main+0x480>)
 800254c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002550:	4b4a      	ldr	r3, [pc, #296]	; (800267c <main+0x484>)
 8002552:	cb18      	ldmia	r3, {r3, r4}
 8002554:	e9cd 3400 	strd	r3, r4, [sp]
 8002558:	4613      	mov	r3, r2
 800255a:	460a      	mov	r2, r1
 800255c:	4948      	ldr	r1, [pc, #288]	; (8002680 <main+0x488>)
 800255e:	4832      	ldr	r0, [pc, #200]	; (8002628 <main+0x430>)
 8002560:	f007 fef8 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002564:	4830      	ldr	r0, [pc, #192]	; (8002628 <main+0x430>)
 8002566:	f001 f8c9 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll ACC=%.2f GYRO=%.2f\n\r",AngleRollAccel,AngleRollGyro);
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <main+0x48c>)
 800256c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <main+0x490>)
 8002572:	cb18      	ldmia	r3, {r3, r4}
 8002574:	e9cd 3400 	strd	r3, r4, [sp]
 8002578:	4613      	mov	r3, r2
 800257a:	460a      	mov	r2, r1
 800257c:	4943      	ldr	r1, [pc, #268]	; (800268c <main+0x494>)
 800257e:	482a      	ldr	r0, [pc, #168]	; (8002628 <main+0x430>)
 8002580:	f007 fee8 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002584:	4828      	ldr	r0, [pc, #160]	; (8002628 <main+0x430>)
 8002586:	f001 f8b9 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw GYRO=%.2f\n\r",AngleYawGyro);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <main+0x498>)
 800258c:	cb18      	ldmia	r3, {r3, r4}
 800258e:	461a      	mov	r2, r3
 8002590:	4623      	mov	r3, r4
 8002592:	4940      	ldr	r1, [pc, #256]	; (8002694 <main+0x49c>)
 8002594:	4824      	ldr	r0, [pc, #144]	; (8002628 <main+0x430>)
 8002596:	f007 fedd 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 800259a:	4823      	ldr	r0, [pc, #140]	; (8002628 <main+0x430>)
 800259c:	f001 f8ae 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <main+0x430>)
 80025a2:	4a2e      	ldr	r2, [pc, #184]	; (800265c <main+0x464>)
 80025a4:	8811      	ldrh	r1, [r2, #0]
 80025a6:	7892      	ldrb	r2, [r2, #2]
 80025a8:	8019      	strh	r1, [r3, #0]
 80025aa:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 80025ac:	481e      	ldr	r0, [pc, #120]	; (8002628 <main+0x430>)
 80025ae:	f001 f8a5 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "PWM 1:%u  2:%u  3:%u  4:%u   \n\r",PWM_Mot1,PWM_Mot2,PWM_Mot3,PWM_Mot4);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <main+0x4a0>)
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <main+0x4a4>)
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <main+0x4a8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <main+0x4ac>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	4603      	mov	r3, r0
 80025c8:	460a      	mov	r2, r1
 80025ca:	4937      	ldr	r1, [pc, #220]	; (80026a8 <main+0x4b0>)
 80025cc:	4816      	ldr	r0, [pc, #88]	; (8002628 <main+0x430>)
 80025ce:	f007 fec1 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80025d2:	4815      	ldr	r0, [pc, #84]	; (8002628 <main+0x430>)
 80025d4:	f001 f892 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d  ",togg1,togg2,togg3,togg4,togg5,togg6);
 80025d8:	4b34      	ldr	r3, [pc, #208]	; (80026ac <main+0x4b4>)
 80025da:	681c      	ldr	r4, [r3, #0]
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <main+0x4b8>)
 80025de:	681d      	ldr	r5, [r3, #0]
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <main+0x4bc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <main+0x4c0>)
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	4934      	ldr	r1, [pc, #208]	; (80026bc <main+0x4c4>)
 80025ea:	6809      	ldr	r1, [r1, #0]
 80025ec:	4834      	ldr	r0, [pc, #208]	; (80026c0 <main+0x4c8>)
 80025ee:	6800      	ldr	r0, [r0, #0]
 80025f0:	9003      	str	r0, [sp, #12]
 80025f2:	e067      	b.n	80026c4 <main+0x4cc>
 80025f4:	200003b8 	.word	0x200003b8
 80025f8:	0800fc00 	.word	0x0800fc00
 80025fc:	20000598 	.word	0x20000598
 8002600:	20000640 	.word	0x20000640
 8002604:	200002ec 	.word	0x200002ec
 8002608:	20000530 	.word	0x20000530
 800260c:	40003800 	.word	0x40003800
 8002610:	40010c00 	.word	0x40010c00
 8002614:	20000414 	.word	0x20000414
 8002618:	0800cb34 	.word	0x0800cb34
 800261c:	20000540 	.word	0x20000540
 8002620:	2000020c 	.word	0x2000020c
 8002624:	200005f4 	.word	0x200005f4
 8002628:	20000420 	.word	0x20000420
 800262c:	0800c098 	.word	0x0800c098
 8002630:	0800c0a0 	.word	0x0800c0a0
 8002634:	0800c0ac 	.word	0x0800c0ac
 8002638:	0800c0b4 	.word	0x0800c0b4
 800263c:	2000022c 	.word	0x2000022c
 8002640:	0800c0d0 	.word	0x0800c0d0
 8002644:	20000230 	.word	0x20000230
 8002648:	0800c0e4 	.word	0x0800c0e4
 800264c:	20000234 	.word	0x20000234
 8002650:	0800c0f4 	.word	0x0800c0f4
 8002654:	20000238 	.word	0x20000238
 8002658:	0800c104 	.word	0x0800c104
 800265c:	0800c114 	.word	0x0800c114
 8002660:	20000890 	.word	0x20000890
 8002664:	0800c118 	.word	0x0800c118
 8002668:	20000968 	.word	0x20000968
 800266c:	0800c128 	.word	0x0800c128
 8002670:	20000950 	.word	0x20000950
 8002674:	0800c138 	.word	0x0800c138
 8002678:	200008b8 	.word	0x200008b8
 800267c:	200008a8 	.word	0x200008a8
 8002680:	0800c144 	.word	0x0800c144
 8002684:	200007c0 	.word	0x200007c0
 8002688:	200006c0 	.word	0x200006c0
 800268c:	0800c160 	.word	0x0800c160
 8002690:	20000938 	.word	0x20000938
 8002694:	0800c17c 	.word	0x0800c17c
 8002698:	200008cc 	.word	0x200008cc
 800269c:	200006d0 	.word	0x200006d0
 80026a0:	200006c8 	.word	0x200006c8
 80026a4:	20000898 	.word	0x20000898
 80026a8:	0800c18c 	.word	0x0800c18c
 80026ac:	20000538 	.word	0x20000538
 80026b0:	200006a0 	.word	0x200006a0
 80026b4:	200002e4 	.word	0x200002e4
 80026b8:	20000594 	.word	0x20000594
 80026bc:	20000484 	.word	0x20000484
 80026c0:	200002e8 	.word	0x200002e8
 80026c4:	9102      	str	r1, [sp, #8]
 80026c6:	9201      	str	r2, [sp, #4]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	462b      	mov	r3, r5
 80026cc:	4622      	mov	r2, r4
 80026ce:	49ac      	ldr	r1, [pc, #688]	; (8002980 <main+0x788>)
 80026d0:	48ac      	ldr	r0, [pc, #688]	; (8002984 <main+0x78c>)
 80026d2:	f007 fe3f 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80026d6:	48ab      	ldr	r0, [pc, #684]	; (8002984 <main+0x78c>)
 80026d8:	f001 f810 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d  ",potenc1,potenc2);
 80026dc:	4baa      	ldr	r3, [pc, #680]	; (8002988 <main+0x790>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4baa      	ldr	r3, [pc, #680]	; (800298c <main+0x794>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	49aa      	ldr	r1, [pc, #680]	; (8002990 <main+0x798>)
 80026e6:	48a7      	ldr	r0, [pc, #668]	; (8002984 <main+0x78c>)
 80026e8:	f007 fe34 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80026ec:	48a5      	ldr	r0, [pc, #660]	; (8002984 <main+0x78c>)
 80026ee:	f001 f805 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 80026f2:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <main+0x79c>)
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	4ba8      	ldr	r3, [pc, #672]	; (8002998 <main+0x7a0>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	4ba8      	ldr	r3, [pc, #672]	; (800299c <main+0x7a4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4aa8      	ldr	r2, [pc, #672]	; (80029a0 <main+0x7a8>)
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4603      	mov	r3, r0
 8002708:	460a      	mov	r2, r1
 800270a:	49a6      	ldr	r1, [pc, #664]	; (80029a4 <main+0x7ac>)
 800270c:	489d      	ldr	r0, [pc, #628]	; (8002984 <main+0x78c>)
 800270e:	f007 fe21 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002712:	489c      	ldr	r0, [pc, #624]	; (8002984 <main+0x78c>)
 8002714:	f000 fff2 	bl	80036fc <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 8002718:	4a9a      	ldr	r2, [pc, #616]	; (8002984 <main+0x78c>)
 800271a:	4ba3      	ldr	r3, [pc, #652]	; (80029a8 <main+0x7b0>)
 800271c:	4615      	mov	r5, r2
 800271e:	461c      	mov	r4, r3
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	6028      	str	r0, [r5, #0]
 8002724:	6069      	str	r1, [r5, #4]
 8002726:	60aa      	str	r2, [r5, #8]
 8002728:	60eb      	str	r3, [r5, #12]
 800272a:	cc03      	ldmia	r4!, {r0, r1}
 800272c:	6128      	str	r0, [r5, #16]
 800272e:	6169      	str	r1, [r5, #20]
 8002730:	8823      	ldrh	r3, [r4, #0]
 8002732:	78a2      	ldrb	r2, [r4, #2]
 8002734:	832b      	strh	r3, [r5, #24]
 8002736:	4613      	mov	r3, r2
 8002738:	76ab      	strb	r3, [r5, #26]
	  WriteString(UartTXbuff0);
 800273a:	4892      	ldr	r0, [pc, #584]	; (8002984 <main+0x78c>)
 800273c:	f000 ffde 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 8002740:	4b9a      	ldr	r3, [pc, #616]	; (80029ac <main+0x7b4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fe6f 	bl	8000428 <__aeabi_f2d>
 800274a:	4680      	mov	r8, r0
 800274c:	4689      	mov	r9, r1
 800274e:	4b97      	ldr	r3, [pc, #604]	; (80029ac <main+0x7b4>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fe68 	bl	8000428 <__aeabi_f2d>
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
 800275c:	4b93      	ldr	r3, [pc, #588]	; (80029ac <main+0x7b4>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fe61 	bl	8000428 <__aeabi_f2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800276e:	e9cd 4500 	strd	r4, r5, [sp]
 8002772:	4642      	mov	r2, r8
 8002774:	464b      	mov	r3, r9
 8002776:	498e      	ldr	r1, [pc, #568]	; (80029b0 <main+0x7b8>)
 8002778:	4882      	ldr	r0, [pc, #520]	; (8002984 <main+0x78c>)
 800277a:	f007 fdeb 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 800277e:	4881      	ldr	r0, [pc, #516]	; (8002984 <main+0x78c>)
 8002780:	f000 ffbc 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 8002784:	4b89      	ldr	r3, [pc, #548]	; (80029ac <main+0x7b4>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe4d 	bl	8000428 <__aeabi_f2d>
 800278e:	4680      	mov	r8, r0
 8002790:	4689      	mov	r9, r1
 8002792:	4b86      	ldr	r3, [pc, #536]	; (80029ac <main+0x7b4>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe46 	bl	8000428 <__aeabi_f2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	4b82      	ldr	r3, [pc, #520]	; (80029ac <main+0x7b4>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe3f 	bl	8000428 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027b2:	e9cd 4500 	strd	r4, r5, [sp]
 80027b6:	4642      	mov	r2, r8
 80027b8:	464b      	mov	r3, r9
 80027ba:	497e      	ldr	r1, [pc, #504]	; (80029b4 <main+0x7bc>)
 80027bc:	4871      	ldr	r0, [pc, #452]	; (8002984 <main+0x78c>)
 80027be:	f007 fdc9 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80027c2:	4870      	ldr	r0, [pc, #448]	; (8002984 <main+0x78c>)
 80027c4:	f000 ff9a 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 80027c8:	4b78      	ldr	r3, [pc, #480]	; (80029ac <main+0x7b4>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe2b 	bl	8000428 <__aeabi_f2d>
 80027d2:	4680      	mov	r8, r0
 80027d4:	4689      	mov	r9, r1
 80027d6:	4b75      	ldr	r3, [pc, #468]	; (80029ac <main+0x7b4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fe24 	bl	8000428 <__aeabi_f2d>
 80027e0:	4604      	mov	r4, r0
 80027e2:	460d      	mov	r5, r1
 80027e4:	4b71      	ldr	r3, [pc, #452]	; (80029ac <main+0x7b4>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe1d 	bl	8000428 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027f6:	e9cd 4500 	strd	r4, r5, [sp]
 80027fa:	4642      	mov	r2, r8
 80027fc:	464b      	mov	r3, r9
 80027fe:	496e      	ldr	r1, [pc, #440]	; (80029b8 <main+0x7c0>)
 8002800:	4860      	ldr	r0, [pc, #384]	; (8002984 <main+0x78c>)
 8002802:	f007 fda7 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002806:	485f      	ldr	r0, [pc, #380]	; (8002984 <main+0x78c>)
 8002808:	f000 ff78 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 800280c:	4b67      	ldr	r3, [pc, #412]	; (80029ac <main+0x7b4>)
 800280e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <main+0x7b4>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	4969      	ldr	r1, [pc, #420]	; (80029bc <main+0x7c4>)
 8002816:	485b      	ldr	r0, [pc, #364]	; (8002984 <main+0x78c>)
 8002818:	f007 fd9c 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 800281c:	4859      	ldr	r0, [pc, #356]	; (8002984 <main+0x78c>)
 800281e:	f000 ff6d 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 8002822:	4b62      	ldr	r3, [pc, #392]	; (80029ac <main+0x7b4>)
 8002824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <main+0x7b4>)
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	4965      	ldr	r1, [pc, #404]	; (80029c0 <main+0x7c8>)
 800282c:	4855      	ldr	r0, [pc, #340]	; (8002984 <main+0x78c>)
 800282e:	f007 fd91 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002832:	4854      	ldr	r0, [pc, #336]	; (8002984 <main+0x78c>)
 8002834:	f000 ff62 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 8002838:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <main+0x7b4>)
 800283a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283c:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <main+0x7b4>)
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	4960      	ldr	r1, [pc, #384]	; (80029c4 <main+0x7cc>)
 8002842:	4850      	ldr	r0, [pc, #320]	; (8002984 <main+0x78c>)
 8002844:	f007 fd86 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002848:	484e      	ldr	r0, [pc, #312]	; (8002984 <main+0x78c>)
 800284a:	f000 ff57 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataActive.maxpitchdegree);
 800284e:	4b57      	ldr	r3, [pc, #348]	; (80029ac <main+0x7b4>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fde8 	bl	8000428 <__aeabi_f2d>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	461a      	mov	r2, r3
 800285e:	4623      	mov	r3, r4
 8002860:	4959      	ldr	r1, [pc, #356]	; (80029c8 <main+0x7d0>)
 8002862:	4848      	ldr	r0, [pc, #288]	; (8002984 <main+0x78c>)
 8002864:	f007 fd76 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002868:	4846      	ldr	r0, [pc, #280]	; (8002984 <main+0x78c>)
 800286a:	f000 ff47 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataActive.maxrolldegree);
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <main+0x7b4>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fdd8 	bl	8000428 <__aeabi_f2d>
 8002878:	4603      	mov	r3, r0
 800287a:	460c      	mov	r4, r1
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	4952      	ldr	r1, [pc, #328]	; (80029cc <main+0x7d4>)
 8002882:	4840      	ldr	r0, [pc, #256]	; (8002984 <main+0x78c>)
 8002884:	f007 fd66 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002888:	483e      	ldr	r0, [pc, #248]	; (8002984 <main+0x78c>)
 800288a:	f000 ff37 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataActive.maxyawdegree);
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <main+0x7b4>)
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fdc8 	bl	8000428 <__aeabi_f2d>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	494b      	ldr	r1, [pc, #300]	; (80029d0 <main+0x7d8>)
 80028a2:	4838      	ldr	r0, [pc, #224]	; (8002984 <main+0x78c>)
 80028a4:	f007 fd56 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80028a8:	4836      	ldr	r0, [pc, #216]	; (8002984 <main+0x78c>)
 80028aa:	f000 ff27 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataActive.maxthrottle, FlashDataActive.minthrottle);
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <main+0x7b4>)
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fdb8 	bl	8000428 <__aeabi_f2d>
 80028b8:	4605      	mov	r5, r0
 80028ba:	460e      	mov	r6, r1
 80028bc:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <main+0x7b4>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fdb1 	bl	8000428 <__aeabi_f2d>
 80028c6:	4603      	mov	r3, r0
 80028c8:	460c      	mov	r4, r1
 80028ca:	e9cd 3400 	strd	r3, r4, [sp]
 80028ce:	462a      	mov	r2, r5
 80028d0:	4633      	mov	r3, r6
 80028d2:	4940      	ldr	r1, [pc, #256]	; (80029d4 <main+0x7dc>)
 80028d4:	482b      	ldr	r0, [pc, #172]	; (8002984 <main+0x78c>)
 80028d6:	f007 fd3d 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80028da:	482a      	ldr	r0, [pc, #168]	; (8002984 <main+0x78c>)
 80028dc:	f000 ff0e 	bl	80036fc <WriteString>


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 80028e0:	4a28      	ldr	r2, [pc, #160]	; (8002984 <main+0x78c>)
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <main+0x7e0>)
 80028e4:	4615      	mov	r5, r2
 80028e6:	461c      	mov	r4, r3
 80028e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ea:	6028      	str	r0, [r5, #0]
 80028ec:	6069      	str	r1, [r5, #4]
 80028ee:	60aa      	str	r2, [r5, #8]
 80028f0:	60eb      	str	r3, [r5, #12]
 80028f2:	cc03      	ldmia	r4!, {r0, r1}
 80028f4:	6128      	str	r0, [r5, #16]
 80028f6:	6169      	str	r1, [r5, #20]
 80028f8:	8823      	ldrh	r3, [r4, #0]
 80028fa:	832b      	strh	r3, [r5, #24]
	  WriteString(UartTXbuff0);
 80028fc:	4821      	ldr	r0, [pc, #132]	; (8002984 <main+0x78c>)
 80028fe:	f000 fefd 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <main+0x7e4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fd8e 	bl	8000428 <__aeabi_f2d>
 800290c:	4680      	mov	r8, r0
 800290e:	4689      	mov	r9, r1
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <main+0x7e4>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fd87 	bl	8000428 <__aeabi_f2d>
 800291a:	4604      	mov	r4, r0
 800291c:	460d      	mov	r5, r1
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <main+0x7e4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fd80 	bl	8000428 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002930:	e9cd 4500 	strd	r4, r5, [sp]
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	491d      	ldr	r1, [pc, #116]	; (80029b0 <main+0x7b8>)
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <main+0x78c>)
 800293c:	f007 fd0a 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002940:	4810      	ldr	r0, [pc, #64]	; (8002984 <main+0x78c>)
 8002942:	f000 fedb 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <main+0x7e4>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fd6c 	bl	8000428 <__aeabi_f2d>
 8002950:	4680      	mov	r8, r0
 8002952:	4689      	mov	r9, r1
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <main+0x7e4>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fd65 	bl	8000428 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <main+0x7e4>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fd5e 	bl	8000428 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002974:	e9cd 4500 	strd	r4, r5, [sp]
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	490d      	ldr	r1, [pc, #52]	; (80029b4 <main+0x7bc>)
 800297e:	e02f      	b.n	80029e0 <main+0x7e8>
 8002980:	0800c1ac 	.word	0x0800c1ac
 8002984:	20000420 	.word	0x20000420
 8002988:	200005f0 	.word	0x200005f0
 800298c:	20000698 	.word	0x20000698
 8002990:	0800c1c8 	.word	0x0800c1c8
 8002994:	20000580 	.word	0x20000580
 8002998:	200004e0 	.word	0x200004e0
 800299c:	20000694 	.word	0x20000694
 80029a0:	20000278 	.word	0x20000278
 80029a4:	0800c1d8 	.word	0x0800c1d8
 80029a8:	0800c1f0 	.word	0x0800c1f0
 80029ac:	20000598 	.word	0x20000598
 80029b0:	0800c20c 	.word	0x0800c20c
 80029b4:	0800c22c 	.word	0x0800c22c
 80029b8:	0800c24c 	.word	0x0800c24c
 80029bc:	0800c268 	.word	0x0800c268
 80029c0:	0800c284 	.word	0x0800c284
 80029c4:	0800c29c 	.word	0x0800c29c
 80029c8:	0800c2b4 	.word	0x0800c2b4
 80029cc:	0800c2d0 	.word	0x0800c2d0
 80029d0:	0800c2e8 	.word	0x0800c2e8
 80029d4:	0800c300 	.word	0x0800c300
 80029d8:	0800c320 	.word	0x0800c320
 80029dc:	20000640 	.word	0x20000640
 80029e0:	486f      	ldr	r0, [pc, #444]	; (8002ba0 <main+0x9a8>)
 80029e2:	f007 fcb7 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 80029e6:	486e      	ldr	r0, [pc, #440]	; (8002ba0 <main+0x9a8>)
 80029e8:	f000 fe88 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 80029ec:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <main+0x9ac>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd19 	bl	8000428 <__aeabi_f2d>
 80029f6:	4680      	mov	r8, r0
 80029f8:	4689      	mov	r9, r1
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <main+0x9ac>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fd12 	bl	8000428 <__aeabi_f2d>
 8002a04:	4604      	mov	r4, r0
 8002a06:	460d      	mov	r5, r1
 8002a08:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <main+0x9ac>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd0b 	bl	8000428 <__aeabi_f2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a1a:	e9cd 4500 	strd	r4, r5, [sp]
 8002a1e:	4642      	mov	r2, r8
 8002a20:	464b      	mov	r3, r9
 8002a22:	4961      	ldr	r1, [pc, #388]	; (8002ba8 <main+0x9b0>)
 8002a24:	485e      	ldr	r0, [pc, #376]	; (8002ba0 <main+0x9a8>)
 8002a26:	f007 fc95 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002a2a:	485d      	ldr	r0, [pc, #372]	; (8002ba0 <main+0x9a8>)
 8002a2c:	f000 fe66 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 8002a30:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <main+0x9ac>)
 8002a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <main+0x9ac>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	495c      	ldr	r1, [pc, #368]	; (8002bac <main+0x9b4>)
 8002a3a:	4859      	ldr	r0, [pc, #356]	; (8002ba0 <main+0x9a8>)
 8002a3c:	f007 fc8a 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002a40:	4857      	ldr	r0, [pc, #348]	; (8002ba0 <main+0x9a8>)
 8002a42:	f000 fe5b 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <main+0x9ac>)
 8002a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4a:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <main+0x9ac>)
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	4958      	ldr	r1, [pc, #352]	; (8002bb0 <main+0x9b8>)
 8002a50:	4853      	ldr	r0, [pc, #332]	; (8002ba0 <main+0x9a8>)
 8002a52:	f007 fc7f 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002a56:	4852      	ldr	r0, [pc, #328]	; (8002ba0 <main+0x9a8>)
 8002a58:	f000 fe50 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 8002a5c:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <main+0x9ac>)
 8002a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <main+0x9ac>)
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	4953      	ldr	r1, [pc, #332]	; (8002bb4 <main+0x9bc>)
 8002a66:	484e      	ldr	r0, [pc, #312]	; (8002ba0 <main+0x9a8>)
 8002a68:	f007 fc74 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002a6c:	484c      	ldr	r0, [pc, #304]	; (8002ba0 <main+0x9a8>)
 8002a6e:	f000 fe45 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataFlash.maxpitchdegree);
 8002a72:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <main+0x9ac>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fcd6 	bl	8000428 <__aeabi_f2d>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	494c      	ldr	r1, [pc, #304]	; (8002bb8 <main+0x9c0>)
 8002a86:	4846      	ldr	r0, [pc, #280]	; (8002ba0 <main+0x9a8>)
 8002a88:	f007 fc64 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002a8c:	4844      	ldr	r0, [pc, #272]	; (8002ba0 <main+0x9a8>)
 8002a8e:	f000 fe35 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataFlash.maxrolldegree);
 8002a92:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <main+0x9ac>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fcc6 	bl	8000428 <__aeabi_f2d>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	4945      	ldr	r1, [pc, #276]	; (8002bbc <main+0x9c4>)
 8002aa6:	483e      	ldr	r0, [pc, #248]	; (8002ba0 <main+0x9a8>)
 8002aa8:	f007 fc54 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002aac:	483c      	ldr	r0, [pc, #240]	; (8002ba0 <main+0x9a8>)
 8002aae:	f000 fe25 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataFlash.maxyawdegree);
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <main+0x9ac>)
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fcb6 	bl	8000428 <__aeabi_f2d>
 8002abc:	4603      	mov	r3, r0
 8002abe:	460c      	mov	r4, r1
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	493e      	ldr	r1, [pc, #248]	; (8002bc0 <main+0x9c8>)
 8002ac6:	4836      	ldr	r0, [pc, #216]	; (8002ba0 <main+0x9a8>)
 8002ac8:	f007 fc44 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002acc:	4834      	ldr	r0, [pc, #208]	; (8002ba0 <main+0x9a8>)
 8002ace:	f000 fe15 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <main+0x9ac>)
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fca6 	bl	8000428 <__aeabi_f2d>
 8002adc:	4605      	mov	r5, r0
 8002ade:	460e      	mov	r6, r1
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <main+0x9ac>)
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fc9f 	bl	8000428 <__aeabi_f2d>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	e9cd 3400 	strd	r3, r4, [sp]
 8002af2:	462a      	mov	r2, r5
 8002af4:	4633      	mov	r3, r6
 8002af6:	4933      	ldr	r1, [pc, #204]	; (8002bc4 <main+0x9cc>)
 8002af8:	4829      	ldr	r0, [pc, #164]	; (8002ba0 <main+0x9a8>)
 8002afa:	f007 fc2b 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002afe:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <main+0x9a8>)
 8002b00:	f000 fdfc 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <main+0x9a8>)
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <main+0x9d0>)
 8002b08:	8811      	ldrh	r1, [r2, #0]
 8002b0a:	7892      	ldrb	r2, [r2, #2]
 8002b0c:	8019      	strh	r1, [r3, #0]
 8002b0e:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002b10:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <main+0x9a8>)
 8002b12:	f000 fdf3 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <main+0x9d4>)
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <main+0x9d8>)
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <main+0x9dc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <main+0x9e0>)
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	492d      	ldr	r1, [pc, #180]	; (8002bdc <main+0x9e4>)
 8002b28:	6809      	ldr	r1, [r1, #0]
 8002b2a:	482d      	ldr	r0, [pc, #180]	; (8002be0 <main+0x9e8>)
 8002b2c:	6800      	ldr	r0, [r0, #0]
 8002b2e:	9003      	str	r0, [sp, #12]
 8002b30:	9102      	str	r1, [sp, #8]
 8002b32:	9201      	str	r2, [sp, #4]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	462b      	mov	r3, r5
 8002b38:	4622      	mov	r2, r4
 8002b3a:	492a      	ldr	r1, [pc, #168]	; (8002be4 <main+0x9ec>)
 8002b3c:	4818      	ldr	r0, [pc, #96]	; (8002ba0 <main+0x9a8>)
 8002b3e:	f007 fc09 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002b42:	4817      	ldr	r0, [pc, #92]	; (8002ba0 <main+0x9a8>)
 8002b44:	f000 fdda 	bl	80036fc <WriteString>

	  sprintf(UartTXbuff0, "watch %.2f %.2f %.2f %.2f \n\r",watch1fl,watch2fl,watch3fl,watch4fl);
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <main+0x9f0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fc6b 	bl	8000428 <__aeabi_f2d>
 8002b52:	4682      	mov	sl, r0
 8002b54:	468b      	mov	fp, r1
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <main+0x9f4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fc64 	bl	8000428 <__aeabi_f2d>
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <main+0x9f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fc5d 	bl	8000428 <__aeabi_f2d>
 8002b6e:	4680      	mov	r8, r0
 8002b70:	4689      	mov	r9, r1
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <main+0x9fc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc56 	bl	8000428 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b84:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b88:	e9cd 4500 	strd	r4, r5, [sp]
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	465b      	mov	r3, fp
 8002b90:	4919      	ldr	r1, [pc, #100]	; (8002bf8 <main+0xa00>)
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <main+0x9a8>)
 8002b94:	f007 fbde 	bl	800a354 <siprintf>
	  WriteString(UartTXbuff0);
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <main+0x9a8>)
 8002b9a:	f000 fdaf 	bl	80036fc <WriteString>
	  HAL_Delay(100);
 8002b9e:	e43f      	b.n	8002420 <main+0x228>
 8002ba0:	20000420 	.word	0x20000420
 8002ba4:	20000640 	.word	0x20000640
 8002ba8:	0800c24c 	.word	0x0800c24c
 8002bac:	0800c268 	.word	0x0800c268
 8002bb0:	0800c284 	.word	0x0800c284
 8002bb4:	0800c29c 	.word	0x0800c29c
 8002bb8:	0800c2b4 	.word	0x0800c2b4
 8002bbc:	0800c2d0 	.word	0x0800c2d0
 8002bc0:	0800c2e8 	.word	0x0800c2e8
 8002bc4:	0800c300 	.word	0x0800c300
 8002bc8:	0800c114 	.word	0x0800c114
 8002bcc:	2000041c 	.word	0x2000041c
 8002bd0:	2000040c 	.word	0x2000040c
 8002bd4:	20000590 	.word	0x20000590
 8002bd8:	20000410 	.word	0x20000410
 8002bdc:	200006a8 	.word	0x200006a8
 8002be0:	200004e4 	.word	0x200004e4
 8002be4:	0800c33c 	.word	0x0800c33c
 8002be8:	20000534 	.word	0x20000534
 8002bec:	200005ec 	.word	0x200005ec
 8002bf0:	20000364 	.word	0x20000364
 8002bf4:	2000052c 	.word	0x2000052c
 8002bf8:	0800c358 	.word	0x0800c358

08002bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b094      	sub	sp, #80	; 0x50
 8002c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c06:	2228      	movs	r2, #40	; 0x28
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fe94 	bl	8009938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 f854 	bl	8007d00 <HAL_RCC_OscConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c5e:	f000 fd81 	bl	8003764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c62:	230f      	movs	r3, #15
 8002c64:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c66:	2302      	movs	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f005 fabe 	bl	8008200 <HAL_RCC_ClockConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c8a:	f000 fd6b 	bl	8003764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fc4c 	bl	8008538 <HAL_RCCEx_PeriphCLKConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002ca6:	f000 fd5d 	bl	8003764 <Error_Handler>
  }
}
 8002caa:	bf00      	nop
 8002cac:	3750      	adds	r7, #80	; 0x50
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <MX_ADC1_Init+0x78>)
 8002cc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ce2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cf0:	480d      	ldr	r0, [pc, #52]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002cf2:	f002 ff33 	bl	8005b5c <HAL_ADC_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002cfc:	f000 fd32 	bl	8003764 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_ADC1_Init+0x74>)
 8002d12:	f003 f9af 	bl	8006074 <HAL_ADC_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d1c:	f000 fd22 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200004b0 	.word	0x200004b0
 8002d2c:	40012400 	.word	0x40012400

08002d30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <MX_I2C2_Init+0x54>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <MX_I2C2_Init+0x58>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <MX_I2C2_Init+0x50>)
 8002d6e:	f004 f839 	bl	8006de4 <HAL_I2C_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d78:	f000 fcf4 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200002ec 	.word	0x200002ec
 8002d84:	40005800 	.word	0x40005800
 8002d88:	00061a80 	.word	0x00061a80

08002d8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <MX_SPI2_Init+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dd8:	220a      	movs	r2, #10
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ddc:	4804      	ldr	r0, [pc, #16]	; (8002df0 <MX_SPI2_Init+0x64>)
 8002dde:	f005 fd1d 	bl	800881c <HAL_SPI_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002de8:	f000 fcbc 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000028c 	.word	0x2000028c
 8002df4:	40003800 	.word	0x40003800

08002df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b096      	sub	sp, #88	; 0x58
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f006 fd81 	bl	8009938 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e36:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <MX_TIM1_Init+0x188>)
 8002e3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e3e:	2247      	movs	r2, #71	; 0x47
 8002e40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e62:	4846      	ldr	r0, [pc, #280]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e64:	f005 fd3b 	bl	80088de <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e6e:	f000 fc79 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	483f      	ldr	r0, [pc, #252]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e80:	f005 ffb0 	bl	8008de4 <HAL_TIM_ConfigClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e8a:	f000 fc6b 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e8e:	483b      	ldr	r0, [pc, #236]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002e90:	f005 fd73 	bl	800897a <HAL_TIM_PWM_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e9a:	f000 fc63 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4833      	ldr	r0, [pc, #204]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002eae:	f006 fb21 	bl	80094f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002eb8:	f000 fc54 	bl	8003764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ebc:	2360      	movs	r3, #96	; 0x60
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8002ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4826      	ldr	r0, [pc, #152]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002ee4:	f005 feb8 	bl	8008c58 <HAL_TIM_PWM_ConfigChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002eee:	f000 fc39 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4820      	ldr	r0, [pc, #128]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002efc:	f005 feac 	bl	8008c58 <HAL_TIM_PWM_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002f06:	f000 fc2d 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4619      	mov	r1, r3
 8002f12:	481a      	ldr	r0, [pc, #104]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002f14:	f005 fea0 	bl	8008c58 <HAL_TIM_PWM_ConfigChannel>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002f1e:	f000 fc21 	bl	8003764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	220c      	movs	r2, #12
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4814      	ldr	r0, [pc, #80]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002f2c:	f005 fe94 	bl	8008c58 <HAL_TIM_PWM_ConfigChannel>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002f36:	f000 fc15 	bl	8003764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4807      	ldr	r0, [pc, #28]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002f5e:	f006 fb0d 	bl	800957c <HAL_TIMEx_ConfigBreakDeadTime>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002f68:	f000 fbfc 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f6c:	4803      	ldr	r0, [pc, #12]	; (8002f7c <MX_TIM1_Init+0x184>)
 8002f6e:	f001 f8eb 	bl	8004148 <HAL_TIM_MspPostInit>

}
 8002f72:	bf00      	nop
 8002f74:	3758      	adds	r7, #88	; 0x58
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000540 	.word	0x20000540
 8002f80:	40012c00 	.word	0x40012c00

08002f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <MX_TIM2_Init+0x94>)
 8002faa:	2247      	movs	r2, #71	; 0x47
 8002fac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fc8:	4813      	ldr	r0, [pc, #76]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fca:	f005 fc88 	bl	80088de <HAL_TIM_Base_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fd4:	f000 fbc6 	bl	8003764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <MX_TIM2_Init+0x94>)
 8002fe6:	f005 fefd 	bl	8008de4 <HAL_TIM_ConfigClockSource>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ff0:	f000 fbb8 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	4619      	mov	r1, r3
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_TIM2_Init+0x94>)
 8003002:	f006 fa77 	bl	80094f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800300c:	f000 fbaa 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200005f4 	.word	0x200005f4

0800301c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <MX_USART1_UART_Init+0x50>)
 8003024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003028:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800302c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART1_UART_Init+0x4c>)
 8003054:	f006 faf5 	bl	8009642 <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800305e:	f000 fb81 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200004e8 	.word	0x200004e8
 800306c:	40013800 	.word	0x40013800

08003070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <MX_GPIO_Init+0x14c>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <MX_GPIO_Init+0x14c>)
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <MX_GPIO_Init+0x14c>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <MX_GPIO_Init+0x14c>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4a46      	ldr	r2, [pc, #280]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	6193      	str	r3, [r2, #24]
 80030a8:	4b44      	ldr	r3, [pc, #272]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b4:	4b41      	ldr	r3, [pc, #260]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4a40      	ldr	r2, [pc, #256]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6193      	str	r3, [r2, #24]
 80030c0:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a3a      	ldr	r2, [pc, #232]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b38      	ldr	r3, [pc, #224]	; (80031bc <MX_GPIO_Init+0x14c>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ea:	4835      	ldr	r0, [pc, #212]	; (80031c0 <MX_GPIO_Init+0x150>)
 80030ec:	f003 fe4a 	bl	8006d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80030f6:	4833      	ldr	r0, [pc, #204]	; (80031c4 <MX_GPIO_Init+0x154>)
 80030f8:	f003 fe44 	bl	8006d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80030fc:	2200      	movs	r2, #0
 80030fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003102:	4831      	ldr	r0, [pc, #196]	; (80031c8 <MX_GPIO_Init+0x158>)
 8003104:	f003 fe3e 	bl	8006d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800310c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310e:	2301      	movs	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2302      	movs	r3, #2
 8003118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800311a:	f107 0310 	add.w	r3, r7, #16
 800311e:	4619      	mov	r1, r3
 8003120:	4827      	ldr	r0, [pc, #156]	; (80031c0 <MX_GPIO_Init+0x150>)
 8003122:	f003 fcd5 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8003126:	2301      	movs	r3, #1
 8003128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4619      	mov	r1, r3
 8003138:	4822      	ldr	r0, [pc, #136]	; (80031c4 <MX_GPIO_Init+0x154>)
 800313a:	f003 fcc9 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4619      	mov	r1, r3
 8003156:	481b      	ldr	r0, [pc, #108]	; (80031c4 <MX_GPIO_Init+0x154>)
 8003158:	f003 fcba 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800315c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 0310 	add.w	r3, r7, #16
 800316e:	4619      	mov	r1, r3
 8003170:	4815      	ldr	r0, [pc, #84]	; (80031c8 <MX_GPIO_Init+0x158>)
 8003172:	f003 fcad 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2302      	movs	r3, #2
 8003186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	480e      	ldr	r0, [pc, #56]	; (80031c8 <MX_GPIO_Init+0x158>)
 8003190:	f003 fc9e 	bl	8006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_GPIO_Init+0x154>)
 80031ae:	f003 fc8f 	bl	8006ad0 <HAL_GPIO_Init>

}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40011000 	.word	0x40011000
 80031c4:	40010c00 	.word	0x40010c00
 80031c8:	40010800 	.word	0x40010800

080031cc <WriteFlashData>:

/* USER CODE BEGIN 4 */
//Write Data into Flash starting from given address
void WriteFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 80031e2:	f003 fae5 	bl	80067b0 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80031e6:	f107 020c 	add.w	r2, r7, #12
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fbc5 	bl	8006980 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f04f 0400 	mov.w	r4, #0
 80031fe:	461a      	mov	r2, r3
 8003200:	4623      	mov	r3, r4
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	2002      	movs	r0, #2
 8003206:	f003 fa63 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, (uint32_t) ( p->pid_p_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1d1d      	adds	r5, r3, #4
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	49b2      	ldr	r1, [pc, #712]	; (80034dc <WriteFlashData+0x310>)
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fdb5 	bl	8000d84 <__aeabi_fmul>
 800321a:	4603      	mov	r3, r0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd ff77 	bl	8001110 <__aeabi_f2uiz>
 8003222:	4603      	mov	r3, r0
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	461a      	mov	r2, r3
 800322a:	4623      	mov	r3, r4
 800322c:	4629      	mov	r1, r5
 800322e:	2002      	movs	r0, #2
 8003230:	f003 fa4e 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, (uint32_t) ( p->pid_i_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f103 0508 	add.w	r5, r3, #8
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	49a7      	ldr	r1, [pc, #668]	; (80034dc <WriteFlashData+0x310>)
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fd9f 	bl	8000d84 <__aeabi_fmul>
 8003246:	4603      	mov	r3, r0
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ff61 	bl	8001110 <__aeabi_f2uiz>
 800324e:	4603      	mov	r3, r0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	4629      	mov	r1, r5
 800325a:	2002      	movs	r0, #2
 800325c:	f003 fa38 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12,(uint32_t) ( p->pid_d_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 050c 	add.w	r5, r3, #12
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	499c      	ldr	r1, [pc, #624]	; (80034dc <WriteFlashData+0x310>)
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd fd89 	bl	8000d84 <__aeabi_fmul>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd ff4b 	bl	8001110 <__aeabi_f2uiz>
 800327a:	4603      	mov	r3, r0
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	4629      	mov	r1, r5
 8003286:	2002      	movs	r0, #2
 8003288:	f003 fa22 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16,(uint32_t) ( p->pid_p_gain_roll * FLASHCONSTANTMULTIPLIER) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0510 	add.w	r5, r3, #16
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	4991      	ldr	r1, [pc, #580]	; (80034dc <WriteFlashData+0x310>)
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd fd73 	bl	8000d84 <__aeabi_fmul>
 800329e:	4603      	mov	r3, r0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd ff35 	bl	8001110 <__aeabi_f2uiz>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	461a      	mov	r2, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	2002      	movs	r0, #2
 80032b4:	f003 fa0c 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20,(uint32_t) ( p->pid_i_gain_roll * FLASHCONSTANTMULTIPLIER) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0514 	add.w	r5, r3, #20
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4986      	ldr	r1, [pc, #536]	; (80034dc <WriteFlashData+0x310>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fd5d 	bl	8000d84 <__aeabi_fmul>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd ff1f 	bl	8001110 <__aeabi_f2uiz>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f04f 0400 	mov.w	r4, #0
 80032d8:	461a      	mov	r2, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	2002      	movs	r0, #2
 80032e0:	f003 f9f6 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24,(uint32_t) ( p->pid_d_gain_roll * FLASHCONSTANTMULTIPLIER) );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0518 	add.w	r5, r3, #24
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	497b      	ldr	r1, [pc, #492]	; (80034dc <WriteFlashData+0x310>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fd47 	bl	8000d84 <__aeabi_fmul>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd ff09 	bl	8001110 <__aeabi_f2uiz>
 80032fe:	4603      	mov	r3, r0
 8003300:	f04f 0400 	mov.w	r4, #0
 8003304:	461a      	mov	r2, r3
 8003306:	4623      	mov	r3, r4
 8003308:	4629      	mov	r1, r5
 800330a:	2002      	movs	r0, #2
 800330c:	f003 f9e0 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28,(uint32_t) ( p->pid_p_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 051c 	add.w	r5, r3, #28
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4970      	ldr	r1, [pc, #448]	; (80034dc <WriteFlashData+0x310>)
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fd31 	bl	8000d84 <__aeabi_fmul>
 8003322:	4603      	mov	r3, r0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fef3 	bl	8001110 <__aeabi_f2uiz>
 800332a:	4603      	mov	r3, r0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	461a      	mov	r2, r3
 8003332:	4623      	mov	r3, r4
 8003334:	4629      	mov	r1, r5
 8003336:	2002      	movs	r0, #2
 8003338:	f003 f9ca 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32,(uint32_t) ( p->pid_i_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f103 0520 	add.w	r5, r3, #32
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4965      	ldr	r1, [pc, #404]	; (80034dc <WriteFlashData+0x310>)
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fd1b 	bl	8000d84 <__aeabi_fmul>
 800334e:	4603      	mov	r3, r0
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fedd 	bl	8001110 <__aeabi_f2uiz>
 8003356:	4603      	mov	r3, r0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	461a      	mov	r2, r3
 800335e:	4623      	mov	r3, r4
 8003360:	4629      	mov	r1, r5
 8003362:	2002      	movs	r0, #2
 8003364:	f003 f9b4 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36,(uint32_t) ( p->pid_d_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0524 	add.w	r5, r3, #36	; 0x24
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	495a      	ldr	r1, [pc, #360]	; (80034dc <WriteFlashData+0x310>)
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fd05 	bl	8000d84 <__aeabi_fmul>
 800337a:	4603      	mov	r3, r0
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fec7 	bl	8001110 <__aeabi_f2uiz>
 8003382:	4603      	mov	r3, r0
 8003384:	f04f 0400 	mov.w	r4, #0
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	4629      	mov	r1, r5
 800338e:	2002      	movs	r0, #2
 8003390:	f003 f99e 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	2002      	movs	r0, #2
 80033a8:	f003 f992 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80033ba:	461a      	mov	r2, r3
 80033bc:	4623      	mov	r3, r4
 80033be:	2002      	movs	r0, #2
 80033c0:	f003 f986 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	2002      	movs	r0, #2
 80033d8:	f003 f97a 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80033ea:	461a      	mov	r2, r3
 80033ec:	4623      	mov	r3, r4
 80033ee:	2002      	movs	r0, #2
 80033f0:	f003 f96e 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003402:	461a      	mov	r2, r3
 8003404:	4623      	mov	r3, r4
 8003406:	2002      	movs	r0, #2
 8003408:	f003 f962 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800341a:	461a      	mov	r2, r3
 800341c:	4623      	mov	r3, r4
 800341e:	2002      	movs	r0, #2
 8003420:	f003 f956 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+64,(uint32_t)(p->maxpitchdegree) );
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f103 0540 	add.w	r5, r3, #64	; 0x40
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fe6e 	bl	8001110 <__aeabi_f2uiz>
 8003434:	4603      	mov	r3, r0
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	461a      	mov	r2, r3
 800343c:	4623      	mov	r3, r4
 800343e:	4629      	mov	r1, r5
 8003440:	2002      	movs	r0, #2
 8003442:	f003 f945 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+68,(uint32_t)(p->maxrolldegree) );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0544 	add.w	r5, r3, #68	; 0x44
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd fe5d 	bl	8001110 <__aeabi_f2uiz>
 8003456:	4603      	mov	r3, r0
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	4629      	mov	r1, r5
 8003462:	2002      	movs	r0, #2
 8003464:	f003 f934 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+72,(uint32_t)(p->maxyawdegree) );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fe4c 	bl	8001110 <__aeabi_f2uiz>
 8003478:	4603      	mov	r3, r0
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	461a      	mov	r2, r3
 8003480:	4623      	mov	r3, r4
 8003482:	4629      	mov	r1, r5
 8003484:	2002      	movs	r0, #2
 8003486:	f003 f923 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+76,(uint32_t)(p->minthrottle) );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fe3b 	bl	8001110 <__aeabi_f2uiz>
 800349a:	4603      	mov	r3, r0
 800349c:	f04f 0400 	mov.w	r4, #0
 80034a0:	461a      	mov	r2, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	2002      	movs	r0, #2
 80034a8:	f003 f912 	bl	80066d0 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+80,(uint32_t)(p->maxthrottle) );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fe2a 	bl	8001110 <__aeabi_f2uiz>
 80034bc:	4603      	mov	r3, r0
 80034be:	f04f 0400 	mov.w	r4, #0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4623      	mov	r3, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	2002      	movs	r0, #2
 80034ca:	f003 f901 	bl	80066d0 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 80034ce:	f003 f995 	bl	80067fc <HAL_FLASH_Lock>
}
 80034d2:	bf00      	nop
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	bf00      	nop
 80034dc:	47c35000 	.word	0x47c35000

080034e0 <EraseFlashData>:

void EraseFlashData(uint32_t StartAddr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 80034f4:	f003 f95c 	bl	80067b0 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fa3c 	bl	8006980 <HAL_FLASHEx_Erase>

	HAL_FLASH_Lock();
 8003508:	f003 f978 	bl	80067fc <HAL_FLASH_Lock>
}
 800350c:	bf00      	nop
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <CheckFlashData>:


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
	...

0800352c <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+4) )) )/FLASHCONSTANTMULTIPLIER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fd fbc5 	bl	8000cd4 <__aeabi_ui2f>
 800354a:	4603      	mov	r3, r0
 800354c:	496a      	ldr	r1, [pc, #424]	; (80036f8 <ReadFlashData+0x1cc>)
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fccc 	bl	8000eec <__aeabi_fdiv>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	605a      	str	r2, [r3, #4]
	p->pid_i_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+8) )) )/FLASHCONSTANTMULTIPLIER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3308      	adds	r3, #8
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fbb6 	bl	8000cd4 <__aeabi_ui2f>
 8003568:	4603      	mov	r3, r0
 800356a:	4963      	ldr	r1, [pc, #396]	; (80036f8 <ReadFlashData+0x1cc>)
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fcbd 	bl	8000eec <__aeabi_fdiv>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]
	p->pid_d_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+12) )) )/FLASHCONSTANTMULTIPLIER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	330c      	adds	r3, #12
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fba7 	bl	8000cd4 <__aeabi_ui2f>
 8003586:	4603      	mov	r3, r0
 8003588:	495b      	ldr	r1, [pc, #364]	; (80036f8 <ReadFlashData+0x1cc>)
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fcae 	bl	8000eec <__aeabi_fdiv>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	60da      	str	r2, [r3, #12]
	p->pid_p_gain_roll=(float)( (*(( uint32_t *) (StartAddr+16) ))  )/FLASHCONSTANTMULTIPLIER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3310      	adds	r3, #16
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fb98 	bl	8000cd4 <__aeabi_ui2f>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4954      	ldr	r1, [pc, #336]	; (80036f8 <ReadFlashData+0x1cc>)
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fc9f 	bl	8000eec <__aeabi_fdiv>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	611a      	str	r2, [r3, #16]
	p->pid_i_gain_roll=(float)( (*(( uint32_t *) (StartAddr+20) )) )/FLASHCONSTANTMULTIPLIER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3314      	adds	r3, #20
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd fb89 	bl	8000cd4 <__aeabi_ui2f>
 80035c2:	4603      	mov	r3, r0
 80035c4:	494c      	ldr	r1, [pc, #304]	; (80036f8 <ReadFlashData+0x1cc>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fc90 	bl	8000eec <__aeabi_fdiv>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	615a      	str	r2, [r3, #20]
	p->pid_d_gain_roll=(float)( (*(( uint32_t *) (StartAddr+24) )) )/FLASHCONSTANTMULTIPLIER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3318      	adds	r3, #24
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fb7a 	bl	8000cd4 <__aeabi_ui2f>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4945      	ldr	r1, [pc, #276]	; (80036f8 <ReadFlashData+0x1cc>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fc81 	bl	8000eec <__aeabi_fdiv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	619a      	str	r2, [r3, #24]
	p->pid_p_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+28) )) )/FLASHCONSTANTMULTIPLIER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	331c      	adds	r3, #28
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fb6b 	bl	8000cd4 <__aeabi_ui2f>
 80035fe:	4603      	mov	r3, r0
 8003600:	493d      	ldr	r1, [pc, #244]	; (80036f8 <ReadFlashData+0x1cc>)
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fc72 	bl	8000eec <__aeabi_fdiv>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	61da      	str	r2, [r3, #28]
	p->pid_i_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+32) )) )/FLASHCONSTANTMULTIPLIER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3320      	adds	r3, #32
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fb5c 	bl	8000cd4 <__aeabi_ui2f>
 800361c:	4603      	mov	r3, r0
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <ReadFlashData+0x1cc>)
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd fc63 	bl	8000eec <__aeabi_fdiv>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	621a      	str	r2, [r3, #32]
	p->pid_d_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+36) )) )/FLASHCONSTANTMULTIPLIER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3324      	adds	r3, #36	; 0x24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fb4d 	bl	8000cd4 <__aeabi_ui2f>
 800363a:	4603      	mov	r3, r0
 800363c:	492e      	ldr	r1, [pc, #184]	; (80036f8 <ReadFlashData+0x1cc>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fc54 	bl	8000eec <__aeabi_fdiv>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	332c      	adds	r3, #44	; 0x2c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3330      	adds	r3, #48	; 0x30
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3334      	adds	r3, #52	; 0x34
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3338      	adds	r3, #56	; 0x38
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	333c      	adds	r3, #60	; 0x3c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	63da      	str	r2, [r3, #60]	; 0x3c
	p->maxpitchdegree=(float)( (*(( uint32_t *) (StartAddr+64) )) );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3340      	adds	r3, #64	; 0x40
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fb1a 	bl	8000cd4 <__aeabi_ui2f>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
	p->maxrolldegree=(float)( (*(( uint32_t *) (StartAddr+68) )) );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3344      	adds	r3, #68	; 0x44
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fb11 	bl	8000cd4 <__aeabi_ui2f>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
	p->maxyawdegree=(float)( (*(( uint32_t *) (StartAddr+72) )) );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3348      	adds	r3, #72	; 0x48
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fb08 	bl	8000cd4 <__aeabi_ui2f>
 80036c4:	4602      	mov	r2, r0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	649a      	str	r2, [r3, #72]	; 0x48
	p->minthrottle=(float)( (*(( uint32_t *) (StartAddr+76) )) );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	334c      	adds	r3, #76	; 0x4c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd faff 	bl	8000cd4 <__aeabi_ui2f>
 80036d6:	4602      	mov	r2, r0
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3350      	adds	r3, #80	; 0x50
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd faf6 	bl	8000cd4 <__aeabi_ui2f>
 80036e8:	4602      	mov	r2, r0
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	47c35000 	.word	0x47c35000

080036fc <WriteString>:

void WriteString(char string[])
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8003708:	e009      	b.n	800371e <WriteString+0x22>
	{
	PrintCharUart (string[i]);
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f80e 	bl	8003734 <PrintCharUart>
	i++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
  while (string[i])
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ef      	bne.n	800370a <WriteString+0xe>
  }
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <PrintCharUart>:


void PrintCharUart (int ch) 	 /* Write character to Serial Port    */
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 800373c:	bf00      	nop
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <PrintCharUart+0x2c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f9      	beq.n	800373e <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <PrintCharUart+0x2c>)
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	6053      	str	r3, [r2, #4]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40013800 	.word	0x40013800

08003764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <nRF24_TransmitPacket+0x98>)
 800377e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003786:	4821      	ldr	r0, [pc, #132]	; (800380c <nRF24_TransmitPacket+0x9c>)
 8003788:	f003 fafc 	bl	8006d84 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb64 	bl	8003e5e <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8003796:	2201      	movs	r2, #1
 8003798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800379c:	481b      	ldr	r0, [pc, #108]	; (800380c <nRF24_TransmitPacket+0x9c>)
 800379e:	f003 faf1 	bl	8006d84 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80037a2:	f000 fb24 	bl	8003dee <nRF24_GetStatus>
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	60ba      	str	r2, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f1      	bne.n	80037a2 <nRF24_TransmitPacket+0x32>
 80037be:	e000      	b.n	80037c2 <nRF24_TransmitPacket+0x52>
			break;
 80037c0:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80037c2:	2200      	movs	r2, #0
 80037c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037c8:	4810      	ldr	r0, [pc, #64]	; (800380c <nRF24_TransmitPacket+0x9c>)
 80037ca:	f003 fadb 	bl	8006d84 <HAL_GPIO_WritePin>

	if (!wait) {
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e012      	b.n	80037fe <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80037d8:	f000 fb2c 	bl	8003e34 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e009      	b.n	80037fe <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e002      	b.n	80037fe <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80037f8:	f000 fb0c 	bl	8003e14 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	000fffff 	.word	0x000fffff
 800380c:	40010c00 	.word	0x40010c00

08003810 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 800381a:	bf00      	nop
 800381c:	2102      	movs	r1, #2
 800381e:	480e      	ldr	r0, [pc, #56]	; (8003858 <nRF24_LL_RW+0x48>)
 8003820:	f7fe fcd0 	bl	80021c4 <SPI_I2S_GetFlagStatus>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f8      	beq.n	800381c <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	b29b      	uxth	r3, r3
 800382e:	4619      	mov	r1, r3
 8003830:	4809      	ldr	r0, [pc, #36]	; (8003858 <nRF24_LL_RW+0x48>)
 8003832:	f7fe fcad 	bl	8002190 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8003836:	bf00      	nop
 8003838:	2101      	movs	r1, #1
 800383a:	4807      	ldr	r0, [pc, #28]	; (8003858 <nRF24_LL_RW+0x48>)
 800383c:	f7fe fcc2 	bl	80021c4 <SPI_I2S_GetFlagStatus>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f8      	beq.n	8003838 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8003846:	4804      	ldr	r0, [pc, #16]	; (8003858 <nRF24_LL_RW+0x48>)
 8003848:	f7fe fcb0 	bl	80021ac <SPI_I2S_ReceiveData>
 800384c:	4603      	mov	r3, r0
 800384e:	b2db      	uxtb	r3, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40003800 	.word	0x40003800

0800385c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8003866:	2200      	movs	r2, #0
 8003868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <nRF24_ReadReg+0x44>)
 800386e:	f003 fa89 	bl	8006d84 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffc8 	bl	8003810 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003880:	20ff      	movs	r0, #255	; 0xff
 8003882:	f7ff ffc5 	bl	8003810 <nRF24_LL_RW>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800388a:	2201      	movs	r2, #1
 800388c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003890:	4803      	ldr	r0, [pc, #12]	; (80038a0 <nRF24_ReadReg+0x44>)
 8003892:	f003 fa77 	bl	8006d84 <HAL_GPIO_WritePin>

	return value;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010800 	.word	0x40010800

080038a4 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	460a      	mov	r2, r1
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ba:	481a      	ldr	r0, [pc, #104]	; (8003924 <nRF24_WriteReg+0x80>)
 80038bc:	f003 fa62 	bl	8006d84 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2b1f      	cmp	r3, #31
 80038c4:	d810      	bhi.n	80038e8 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	f043 0320 	orr.w	r3, r3, #32
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff99 	bl	8003810 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80038de:	79bb      	ldrb	r3, [r7, #6]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff95 	bl	8003810 <nRF24_LL_RW>
 80038e6:	e013      	b.n	8003910 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff90 	bl	8003810 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2be1      	cmp	r3, #225	; 0xe1
 80038f4:	d00c      	beq.n	8003910 <nRF24_WriteReg+0x6c>
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	2be2      	cmp	r3, #226	; 0xe2
 80038fa:	d009      	beq.n	8003910 <nRF24_WriteReg+0x6c>
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	2be3      	cmp	r3, #227	; 0xe3
 8003900:	d006      	beq.n	8003910 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	d003      	beq.n	8003910 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8003908:	79bb      	ldrb	r3, [r7, #6]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff80 	bl	8003810 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8003910:	2201      	movs	r2, #1
 8003912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003916:	4803      	ldr	r0, [pc, #12]	; (8003924 <nRF24_WriteReg+0x80>)
 8003918:	f003 fa34 	bl	8006d84 <HAL_GPIO_WritePin>
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40010800 	.word	0x40010800

08003928 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	4613      	mov	r3, r2
 8003936:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800393e:	480f      	ldr	r0, [pc, #60]	; (800397c <nRF24_ReadMBReg+0x54>)
 8003940:	f003 fa20 	bl	8006d84 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff62 	bl	8003810 <nRF24_LL_RW>
	while (count--) {
 800394c:	e007      	b.n	800395e <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800394e:	683c      	ldr	r4, [r7, #0]
 8003950:	1c63      	adds	r3, r4, #1
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	20ff      	movs	r0, #255	; 0xff
 8003956:	f7ff ff5b 	bl	8003810 <nRF24_LL_RW>
 800395a:	4603      	mov	r3, r0
 800395c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800395e:	79bb      	ldrb	r3, [r7, #6]
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	71ba      	strb	r2, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f2      	bne.n	800394e <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8003968:	2201      	movs	r2, #1
 800396a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800396e:	4803      	ldr	r0, [pc, #12]	; (800397c <nRF24_ReadMBReg+0x54>)
 8003970:	f003 fa08 	bl	8006d84 <HAL_GPIO_WritePin>
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	40010800 	.word	0x40010800

08003980 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003996:	480f      	ldr	r0, [pc, #60]	; (80039d4 <nRF24_WriteMBReg+0x54>)
 8003998:	f003 f9f4 	bl	8006d84 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff36 	bl	8003810 <nRF24_LL_RW>
	while (count--) {
 80039a4:	e006      	b.n	80039b4 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	603a      	str	r2, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff2e 	bl	8003810 <nRF24_LL_RW>
	while (count--) {
 80039b4:	79bb      	ldrb	r3, [r7, #6]
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	71ba      	strb	r2, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f3      	bne.n	80039a6 <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 80039be:	2201      	movs	r2, #1
 80039c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <nRF24_WriteMBReg+0x54>)
 80039c6:	f003 f9dd 	bl	8006d84 <HAL_GPIO_WritePin>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40010800 	.word	0x40010800

080039d8 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80039dc:	2108      	movs	r1, #8
 80039de:	2000      	movs	r0, #0
 80039e0:	f7ff ff60 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80039e4:	213f      	movs	r1, #63	; 0x3f
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7ff ff5c 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80039ec:	2103      	movs	r1, #3
 80039ee:	2002      	movs	r0, #2
 80039f0:	f7ff ff58 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80039f4:	2103      	movs	r1, #3
 80039f6:	2003      	movs	r0, #3
 80039f8:	f7ff ff54 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80039fc:	2103      	movs	r1, #3
 80039fe:	2004      	movs	r0, #4
 8003a00:	f7ff ff50 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003a04:	2102      	movs	r1, #2
 8003a06:	2005      	movs	r0, #5
 8003a08:	f7ff ff4c 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8003a0c:	210e      	movs	r1, #14
 8003a0e:	2006      	movs	r0, #6
 8003a10:	f7ff ff48 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8003a14:	2100      	movs	r1, #0
 8003a16:	2007      	movs	r0, #7
 8003a18:	f7ff ff44 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2011      	movs	r0, #17
 8003a20:	f7ff ff40 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8003a24:	2100      	movs	r1, #0
 8003a26:	2012      	movs	r0, #18
 8003a28:	f7ff ff3c 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2013      	movs	r0, #19
 8003a30:	f7ff ff38 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8003a34:	2100      	movs	r1, #0
 8003a36:	2014      	movs	r0, #20
 8003a38:	f7ff ff34 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	2015      	movs	r0, #21
 8003a40:	f7ff ff30 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8003a44:	2100      	movs	r1, #0
 8003a46:	2016      	movs	r0, #22
 8003a48:	f7ff ff2c 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	201c      	movs	r0, #28
 8003a50:	f7ff ff28 	bl	80038a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8003a54:	2100      	movs	r1, #0
 8003a56:	201d      	movs	r0, #29
 8003a58:	f7ff ff24 	bl	80038a4 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8003a5c:	f000 f9e2 	bl	8003e24 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003a60:	f000 f9d8 	bl	8003e14 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8003a64:	f000 f9e6 	bl	8003e34 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a6e:	4802      	ldr	r0, [pc, #8]	; (8003a78 <nRF24_Init+0xa0>)
 8003a70:	f003 f988 	bl	8006d84 <HAL_GPIO_WritePin>
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40010800 	.word	0x40010800

08003a7c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <nRF24_Check+0x58>)
 8003a84:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8003a86:	2205      	movs	r2, #5
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	2030      	movs	r0, #48	; 0x30
 8003a8c:	f7ff ff78 	bl	8003980 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8003a90:	463b      	mov	r3, r7
 8003a92:	2205      	movs	r2, #5
 8003a94:	4619      	mov	r1, r3
 8003a96:	2010      	movs	r0, #16
 8003a98:	f7ff ff46 	bl	8003928 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e010      	b.n	8003ac4 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	f107 0210 	add.w	r2, r7, #16
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <nRF24_Check+0x42>
 8003aba:	2300      	movs	r3, #0
 8003abc:	e006      	b.n	8003acc <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d9eb      	bls.n	8003aa2 <nRF24_Check+0x26>
	}

	return 1;
 8003aca:	2301      	movs	r3, #1
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	0800c378 	.word	0x0800c378

08003ad8 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7ff feba 	bl	800385c <nRF24_ReadReg>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d104      	bne.n	8003afc <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e003      	b.n	8003b04 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	f023 0302 	bic.w	r3, r3, #2
 8003b02:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	4619      	mov	r1, r3
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7ff fecb 	bl	80038a4 <nRF24_WriteReg>
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff fe9b 	bl	800385c <nRF24_ReadReg>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	b25a      	sxtb	r2, r3
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7ff feaa 	bl	80038a4 <nRF24_WriteReg>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7ff fe7a 	bl	800385c <nRF24_ReadReg>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	f023 030c 	bic.w	r3, r3, #12
 8003b72:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	b25a      	sxtb	r2, r3
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7ff fe89 	bl	80038a4 <nRF24_WriteReg>
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	2005      	movs	r0, #5
 8003baa:	f7ff fe7b 	bl	80038a4 <nRF24_WriteReg>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	3b02      	subs	r3, #2
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f7ff fe6b 	bl	80038a4 <nRF24_WriteReg>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d846      	bhi.n	8003c78 <nRF24_SetAddr+0xa0>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <nRF24_SetAddr+0x18>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	08003c0d 	.word	0x08003c0d
 8003bf8:	08003c65 	.word	0x08003c65
 8003bfc:	08003c65 	.word	0x08003c65
 8003c00:	08003c65 	.word	0x08003c65
 8003c04:	08003c65 	.word	0x08003c65
 8003c08:	08003c0d 	.word	0x08003c0d
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003c0c:	2003      	movs	r0, #3
 8003c0e:	f7ff fe25 	bl	800385c <nRF24_ReadReg>
 8003c12:	4603      	mov	r3, r0
 8003c14:	3301      	adds	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c26:	4817      	ldr	r0, [pc, #92]	; (8003c84 <nRF24_SetAddr+0xac>)
 8003c28:	f003 f8ac 	bl	8006d84 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <nRF24_SetAddr+0xb0>)
 8003c30:	5cd3      	ldrb	r3, [r2, r3]
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fde9 	bl	8003810 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	603a      	str	r2, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fde2 	bl	8003810 <nRF24_LL_RW>
			} while (addr_width--);
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	1e5a      	subs	r2, r3, #1
 8003c50:	73fa      	strb	r2, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f3      	bne.n	8003c3e <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c5c:	4809      	ldr	r0, [pc, #36]	; (8003c84 <nRF24_SetAddr+0xac>)
 8003c5e:	f003 f891 	bl	8006d84 <HAL_GPIO_WritePin>
			break;
 8003c62:	e00a      	b.n	8003c7a <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <nRF24_SetAddr+0xb0>)
 8003c68:	5cd2      	ldrb	r2, [r2, r3]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7ff fe17 	bl	80038a4 <nRF24_WriteReg>
			break;
 8003c76:	e000      	b.n	8003c7a <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8003c78:	bf00      	nop
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40010800 	.word	0x40010800
 8003c88:	0800cb40 	.word	0x0800cb40

08003c8c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003c96:	2006      	movs	r0, #6
 8003c98:	f7ff fde0 	bl	800385c <nRF24_ReadReg>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	f023 0306 	bic.w	r3, r3, #6
 8003ca6:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2006      	movs	r0, #6
 8003cb6:	f7ff fdf5 	bl	80038a4 <nRF24_WriteReg>
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003ccc:	2006      	movs	r0, #6
 8003cce:	f7ff fdc5 	bl	800385c <nRF24_ReadReg>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003cdc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	2006      	movs	r0, #6
 8003cec:	f7ff fdda 	bl	80038a4 <nRF24_WriteReg>
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
 8003d02:	460b      	mov	r3, r1
 8003d04:	71bb      	strb	r3, [r7, #6]
 8003d06:	4613      	mov	r3, r2
 8003d08:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8003d0a:	2002      	movs	r0, #2
 8003d0c:	f7ff fda6 	bl	800385c <nRF24_ReadReg>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b25a      	sxtb	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	b25b      	sxtb	r3, r3
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff fdb8 	bl	80038a4 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <nRF24_SetRXPipe+0xa4>)
 8003d38:	5cd2      	ldrb	r2, [r2, r3]
 8003d3a:	797b      	ldrb	r3, [r7, #5]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7ff fdad 	bl	80038a4 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7ff fd86 	bl	800385c <nRF24_ReadReg>
 8003d50:	4603      	mov	r3, r0
 8003d52:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10a      	bne.n	8003d70 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	e00b      	b.n	8003d88 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2201      	movs	r2, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4013      	ands	r3, r2
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7ff fd89 	bl	80038a4 <nRF24_WriteReg>
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800cb38 	.word	0x0800cb38

08003da0 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d904      	bls.n	8003dba <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8003db0:	2100      	movs	r1, #0
 8003db2:	2001      	movs	r0, #1
 8003db4:	f7ff fd76 	bl	80038a4 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8003db8:	e015      	b.n	8003de6 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f7ff fd4e 	bl	800385c <nRF24_ReadReg>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	b25a      	sxtb	r2, r3
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	4619      	mov	r1, r3
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7ff fd5f 	bl	80038a4 <nRF24_WriteReg>
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8003dee:	b580      	push	{r7, lr}
 8003df0:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8003df2:	2007      	movs	r0, #7
 8003df4:	f7ff fd32 	bl	800385c <nRF24_ReadReg>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8003e02:	2017      	movs	r0, #23
 8003e04:	f7ff fd2a 	bl	800385c <nRF24_ReadReg>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	b2db      	uxtb	r3, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8003e18:	21ff      	movs	r1, #255	; 0xff
 8003e1a:	20e1      	movs	r0, #225	; 0xe1
 8003e1c:	f7ff fd42 	bl	80038a4 <nRF24_WriteReg>
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8003e28:	21ff      	movs	r1, #255	; 0xff
 8003e2a:	20e2      	movs	r0, #226	; 0xe2
 8003e2c:	f7ff fd3a 	bl	80038a4 <nRF24_WriteReg>
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8003e3a:	2007      	movs	r0, #7
 8003e3c:	f7ff fd0e 	bl	800385c <nRF24_ReadReg>
 8003e40:	4603      	mov	r3, r0
 8003e42:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003e4a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	2007      	movs	r0, #7
 8003e52:	f7ff fd27 	bl	80038a4 <nRF24_WriteReg>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	20a0      	movs	r0, #160	; 0xa0
 8003e72:	f7ff fd85 	bl	8003980 <nRF24_WriteMBReg>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8003e8a:	2007      	movs	r0, #7
 8003e8c:	f7ff fce6 	bl	800385c <nRF24_ReadReg>
 8003e90:	4603      	mov	r3, r0
 8003e92:	105b      	asrs	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d816      	bhi.n	8003ed0 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <nRF24_ReadPayload+0x60>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fcd7 	bl	800385c <nRF24_ReadReg>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	2061      	movs	r0, #97	; 0x61
 8003ec8:	f7ff fd2e 	bl	8003928 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	e003      	b.n	8003ed8 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8003ed6:	23ff      	movs	r3, #255	; 0xff
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	0800cb38 	.word	0x0800cb38

08003ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_MspInit+0x5c>)
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <HAL_MspInit+0x5c>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6193      	str	r3, [r2, #24]
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_MspInit+0x5c>)
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_MspInit+0x5c>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <HAL_MspInit+0x5c>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	61d3      	str	r3, [r2, #28]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_MspInit+0x5c>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_MspInit+0x60>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <HAL_MspInit+0x60>)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010000 	.word	0x40010000

08003f48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0310 	add.w	r3, r7, #16
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_ADC_MspInit+0x6c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d121      	bne.n	8003fac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_ADC_MspInit+0x70>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4805      	ldr	r0, [pc, #20]	; (8003fbc <HAL_ADC_MspInit+0x74>)
 8003fa8:	f002 fd92 	bl	8006ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fac:	bf00      	nop
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40012400 	.word	0x40012400
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40010800 	.word	0x40010800

08003fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_I2C_MspInit+0x74>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d124      	bne.n	800402a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe0:	4b15      	ldr	r3, [pc, #84]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8003fe6:	f043 0308 	orr.w	r3, r3, #8
 8003fea:	6193      	str	r3, [r2, #24]
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ff8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffe:	2312      	movs	r3, #18
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004002:	2303      	movs	r3, #3
 8004004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004006:	f107 0310 	add.w	r3, r7, #16
 800400a:	4619      	mov	r1, r3
 800400c:	480b      	ldr	r0, [pc, #44]	; (800403c <HAL_I2C_MspInit+0x7c>)
 800400e:	f002 fd5f 	bl	8006ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8004018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800401c:	61d3      	str	r3, [r2, #28]
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_I2C_MspInit+0x78>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800402a:	bf00      	nop
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40005800 	.word	0x40005800
 8004038:	40021000 	.word	0x40021000
 800403c:	40010c00 	.word	0x40010c00

08004040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <HAL_SPI_MspInit+0x8c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d131      	bne.n	80040c4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 8004066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406a:	61d3      	str	r3, [r2, #28]
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 800407e:	f043 0308 	orr.w	r3, r3, #8
 8004082:	6193      	str	r3, [r2, #24]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_SPI_MspInit+0x90>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004090:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409e:	f107 0310 	add.w	r3, r7, #16
 80040a2:	4619      	mov	r1, r3
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <HAL_SPI_MspInit+0x94>)
 80040a6:	f002 fd13 	bl	8006ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80040aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	4619      	mov	r1, r3
 80040be:	4805      	ldr	r0, [pc, #20]	; (80040d4 <HAL_SPI_MspInit+0x94>)
 80040c0:	f002 fd06 	bl	8006ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40003800 	.word	0x40003800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010c00 	.word	0x40010c00

080040d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_TIM_Base_MspInit+0x68>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10c      	bne.n	8004104 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 80040f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040f4:	6193      	str	r3, [r2, #24]
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004102:	e018      	b.n	8004136 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d113      	bne.n	8004136 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	61d3      	str	r3, [r2, #28]
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_TIM_Base_MspInit+0x6c>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2101      	movs	r1, #1
 800412a:	201c      	movs	r0, #28
 800412c:	f002 fa99 	bl	8006662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004130:	201c      	movs	r0, #28
 8004132:	f002 fab2 	bl	800669a <HAL_NVIC_EnableIRQ>
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40021000 	.word	0x40021000

08004148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <HAL_TIM_MspPostInit+0x5c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d118      	bne.n	800419a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_TIM_MspPostInit+0x60>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_TIM_MspPostInit+0x60>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_TIM_MspPostInit+0x60>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004180:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004186:	2302      	movs	r3, #2
 8004188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418a:	2302      	movs	r3, #2
 800418c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418e:	f107 0310 	add.w	r3, r7, #16
 8004192:	4619      	mov	r1, r3
 8004194:	4805      	ldr	r0, [pc, #20]	; (80041ac <HAL_TIM_MspPostInit+0x64>)
 8004196:	f002 fc9b 	bl	8006ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800419a:	bf00      	nop
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40010800 	.word	0x40010800

080041b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a22      	ldr	r2, [pc, #136]	; (8004254 <HAL_UART_MspInit+0xa4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d13d      	bne.n	800424c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041d0:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4a20      	ldr	r2, [pc, #128]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041da:	6193      	str	r3, [r2, #24]
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041ee:	f043 0308 	orr.w	r3, r3, #8
 80041f2:	6193      	str	r3, [r2, #24]
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_UART_MspInit+0xa8>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4619      	mov	r1, r3
 8004212:	4812      	ldr	r0, [pc, #72]	; (800425c <HAL_UART_MspInit+0xac>)
 8004214:	f002 fc5c 	bl	8006ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800421c:	2300      	movs	r3, #0
 800421e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4619      	mov	r1, r3
 800422a:	480c      	ldr	r0, [pc, #48]	; (800425c <HAL_UART_MspInit+0xac>)
 800422c:	f002 fc50 	bl	8006ad0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_UART_MspInit+0xb0>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <HAL_UART_MspInit+0xb0>)
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800424c:	bf00      	nop
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40013800 	.word	0x40013800
 8004258:	40021000 	.word	0x40021000
 800425c:	40010c00 	.word	0x40010c00
 8004260:	40010000 	.word	0x40010000

08004264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004274:	e7fe      	b.n	8004274 <HardFault_Handler+0x4>

08004276 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427a:	e7fe      	b.n	800427a <MemManage_Handler+0x4>

0800427c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <BusFault_Handler+0x4>

08004282 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004286:	e7fe      	b.n	8004286 <UsageFault_Handler+0x4>

08004288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b0:	f001 fc16 	bl	8005ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042c0:	4893      	ldr	r0, [pc, #588]	; (8004510 <TIM2_IRQHandler+0x258>)
 80042c2:	f004 fbc1 	bl	8008a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042cc:	4891      	ldr	r0, [pc, #580]	; (8004514 <TIM2_IRQHandler+0x25c>)
 80042ce:	f002 fd59 	bl	8006d84 <HAL_GPIO_WritePin>

  //blinky
  LEDcount++;
 80042d2:	4b91      	ldr	r3, [pc, #580]	; (8004518 <TIM2_IRQHandler+0x260>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a8f      	ldr	r2, [pc, #572]	; (8004518 <TIM2_IRQHandler+0x260>)
 80042da:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 80042dc:	4b8e      	ldr	r3, [pc, #568]	; (8004518 <TIM2_IRQHandler+0x260>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2bf9      	cmp	r3, #249	; 0xf9
 80042e2:	d907      	bls.n	80042f4 <TIM2_IRQHandler+0x3c>
  {
	  LEDcount=0;
 80042e4:	4b8c      	ldr	r3, [pc, #560]	; (8004518 <TIM2_IRQHandler+0x260>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80042ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042ee:	488b      	ldr	r0, [pc, #556]	; (800451c <TIM2_IRQHandler+0x264>)
 80042f0:	f002 fd60 	bl	8006db4 <HAL_GPIO_TogglePin>
  }



  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 80042f4:	210a      	movs	r1, #10
 80042f6:	488a      	ldr	r0, [pc, #552]	; (8004520 <TIM2_IRQHandler+0x268>)
 80042f8:	f001 fdb6 	bl	8005e68 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 80042fc:	4888      	ldr	r0, [pc, #544]	; (8004520 <TIM2_IRQHandler+0x268>)
 80042fe:	f001 fead 	bl	800605c <HAL_ADC_GetValue>
 8004302:	4603      	mov	r3, r0
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc fce5 	bl	8000cd4 <__aeabi_ui2f>
 800430a:	4603      	mov	r3, r0
 800430c:	4985      	ldr	r1, [pc, #532]	; (8004524 <TIM2_IRQHandler+0x26c>)
 800430e:	4618      	mov	r0, r3
 8004310:	f7fc fd38 	bl	8000d84 <__aeabi_fmul>
 8004314:	4603      	mov	r3, r0
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fefa 	bl	8001110 <__aeabi_f2uiz>
 800431c:	4602      	mov	r2, r0
 800431e:	4b82      	ldr	r3, [pc, #520]	; (8004528 <TIM2_IRQHandler+0x270>)
 8004320:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8004322:	4b82      	ldr	r3, [pc, #520]	; (800452c <TIM2_IRQHandler+0x274>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a80      	ldr	r2, [pc, #512]	; (8004528 <TIM2_IRQHandler+0x270>)
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	4981      	ldr	r1, [pc, #516]	; (8004530 <TIM2_IRQHandler+0x278>)
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8004330:	4b7e      	ldr	r3, [pc, #504]	; (800452c <TIM2_IRQHandler+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a7d      	ldr	r2, [pc, #500]	; (800452c <TIM2_IRQHandler+0x274>)
 8004338:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 800433a:	4b7c      	ldr	r3, [pc, #496]	; (800452c <TIM2_IRQHandler+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b31      	cmp	r3, #49	; 0x31
 8004340:	d902      	bls.n	8004348 <TIM2_IRQHandler+0x90>
 8004342:	4b7a      	ldr	r3, [pc, #488]	; (800452c <TIM2_IRQHandler+0x274>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8004348:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <TIM2_IRQHandler+0x27c>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 800434e:	4b7a      	ldr	r3, [pc, #488]	; (8004538 <TIM2_IRQHandler+0x280>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e00e      	b.n	8004374 <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 8004356:	4b78      	ldr	r3, [pc, #480]	; (8004538 <TIM2_IRQHandler+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a75      	ldr	r2, [pc, #468]	; (8004530 <TIM2_IRQHandler+0x278>)
 800435c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004360:	4b74      	ldr	r3, [pc, #464]	; (8004534 <TIM2_IRQHandler+0x27c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4413      	add	r3, r2
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <TIM2_IRQHandler+0x27c>)
 8004368:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 800436a:	4b73      	ldr	r3, [pc, #460]	; (8004538 <TIM2_IRQHandler+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	4a71      	ldr	r2, [pc, #452]	; (8004538 <TIM2_IRQHandler+0x280>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b70      	ldr	r3, [pc, #448]	; (8004538 <TIM2_IRQHandler+0x280>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b31      	cmp	r3, #49	; 0x31
 800437a:	d9ec      	bls.n	8004356 <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 800437c:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <TIM2_IRQHandler+0x27c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	; (800453c <TIM2_IRQHandler+0x284>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	4a6d      	ldr	r2, [pc, #436]	; (8004540 <TIM2_IRQHandler+0x288>)
 800438a:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 800438c:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <TIM2_IRQHandler+0x28c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6d      	ldr	r2, [pc, #436]	; (8004548 <TIM2_IRQHandler+0x290>)
 8004392:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 8004394:	4b6d      	ldr	r3, [pc, #436]	; (800454c <TIM2_IRQHandler+0x294>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6d      	ldr	r2, [pc, #436]	; (8004550 <TIM2_IRQHandler+0x298>)
 800439a:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 800439c:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <TIM2_IRQHandler+0x29c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6d      	ldr	r2, [pc, #436]	; (8004558 <TIM2_IRQHandler+0x2a0>)
 80043a2:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 80043a4:	4b6d      	ldr	r3, [pc, #436]	; (800455c <TIM2_IRQHandler+0x2a4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a6d      	ldr	r2, [pc, #436]	; (8004560 <TIM2_IRQHandler+0x2a8>)
 80043aa:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 80043ac:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <TIM2_IRQHandler+0x2ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6d      	ldr	r2, [pc, #436]	; (8004568 <TIM2_IRQHandler+0x2b0>)
 80043b2:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 80043b4:	4b6d      	ldr	r3, [pc, #436]	; (800456c <TIM2_IRQHandler+0x2b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6d      	ldr	r2, [pc, #436]	; (8004570 <TIM2_IRQHandler+0x2b8>)
 80043ba:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 80043bc:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <TIM2_IRQHandler+0x2bc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8257 	beq.w	8004874 <TIM2_IRQHandler+0x5bc>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 80043c6:	f7ff fd1a 	bl	8003dfe <nRF24_GetStatus_RXFIFO>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f000 8251 	beq.w	8004874 <TIM2_IRQHandler+0x5bc>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 80043d2:	4969      	ldr	r1, [pc, #420]	; (8004578 <TIM2_IRQHandler+0x2c0>)
 80043d4:	4869      	ldr	r0, [pc, #420]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80043d6:	f7ff fd53 	bl	8003e80 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 80043da:	f7ff fd2b 	bl	8003e34 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <TIM2_IRQHandler+0x2c8>)
 80043e6:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <TIM2_IRQHandler+0x2c8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	f200 80de 	bhi.w	80045ae <TIM2_IRQHandler+0x2f6>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <TIM2_IRQHandler+0x140>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800440d 	.word	0x0800440d
 80043fc:	080044d7 	.word	0x080044d7
 8004400:	08004505 	.word	0x08004505
 8004404:	080044c7 	.word	0x080044c7
 8004408:	080044cf 	.word	0x080044cf
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 800440c:	4b5b      	ldr	r3, [pc, #364]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	2b64      	cmp	r3, #100	; 0x64
 8004412:	f200 80cb 	bhi.w	80045ac <TIM2_IRQHandler+0x2f4>
 8004416:	4b59      	ldr	r3, [pc, #356]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004418:	789b      	ldrb	r3, [r3, #2]
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	f200 80c6 	bhi.w	80045ac <TIM2_IRQHandler+0x2f4>
 8004420:	4b56      	ldr	r3, [pc, #344]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004422:	78db      	ldrb	r3, [r3, #3]
 8004424:	2b64      	cmp	r3, #100	; 0x64
 8004426:	f200 80c1 	bhi.w	80045ac <TIM2_IRQHandler+0x2f4>
 800442a:	4b54      	ldr	r3, [pc, #336]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800442c:	791b      	ldrb	r3, [r3, #4]
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	f200 80bc 	bhi.w	80045ac <TIM2_IRQHandler+0x2f4>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 8004434:	4b51      	ldr	r3, [pc, #324]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	461a      	mov	r2, r3
 800443a:	4b52      	ldr	r3, [pc, #328]	; (8004584 <TIM2_IRQHandler+0x2cc>)
 800443c:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 800443e:	4b4f      	ldr	r3, [pc, #316]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004440:	789b      	ldrb	r3, [r3, #2]
 8004442:	461a      	mov	r2, r3
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <TIM2_IRQHandler+0x2d0>)
 8004446:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 8004448:	4b4c      	ldr	r3, [pc, #304]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800444a:	78db      	ldrb	r3, [r3, #3]
 800444c:	461a      	mov	r2, r3
 800444e:	4b4f      	ldr	r3, [pc, #316]	; (800458c <TIM2_IRQHandler+0x2d4>)
 8004450:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 8004452:	4b4a      	ldr	r3, [pc, #296]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004454:	791b      	ldrb	r3, [r3, #4]
 8004456:	461a      	mov	r2, r3
 8004458:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <TIM2_IRQHandler+0x2d8>)
 800445a:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800445e:	795b      	ldrb	r3, [r3, #5]
 8004460:	461a      	mov	r2, r3
 8004462:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <TIM2_IRQHandler+0x2dc>)
 8004464:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 8004466:	4b45      	ldr	r3, [pc, #276]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004468:	799b      	ldrb	r3, [r3, #6]
 800446a:	461a      	mov	r2, r3
 800446c:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <TIM2_IRQHandler+0x2e0>)
 800446e:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 8004470:	4b42      	ldr	r3, [pc, #264]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004472:	79db      	ldrb	r3, [r3, #7]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <TIM2_IRQHandler+0x28c>)
 800447c:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 800447e:	4b3f      	ldr	r3, [pc, #252]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004480:	79db      	ldrb	r3, [r3, #7]
 8004482:	119b      	asrs	r3, r3, #6
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	4a30      	ldr	r2, [pc, #192]	; (800454c <TIM2_IRQHandler+0x294>)
 800448a:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 800448c:	4b3b      	ldr	r3, [pc, #236]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800448e:	79db      	ldrb	r3, [r3, #7]
 8004490:	115b      	asrs	r3, r3, #5
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <TIM2_IRQHandler+0x29c>)
 8004498:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 800449a:	4b38      	ldr	r3, [pc, #224]	; (800457c <TIM2_IRQHandler+0x2c4>)
 800449c:	79db      	ldrb	r3, [r3, #7]
 800449e:	111b      	asrs	r3, r3, #4
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <TIM2_IRQHandler+0x2a4>)
 80044a6:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044aa:	79db      	ldrb	r3, [r3, #7]
 80044ac:	10db      	asrs	r3, r3, #3
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <TIM2_IRQHandler+0x2ac>)
 80044b4:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044b8:	79db      	ldrb	r3, [r3, #7]
 80044ba:	109b      	asrs	r3, r3, #2
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <TIM2_IRQHandler+0x2b4>)
 80044c2:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 80044c4:	e072      	b.n	80045ac <TIM2_IRQHandler+0x2f4>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 80044c6:	4b35      	ldr	r3, [pc, #212]	; (800459c <TIM2_IRQHandler+0x2e4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  									}break;
 80044cc:	e06f      	b.n	80045ae <TIM2_IRQHandler+0x2f6>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 80044ce:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <TIM2_IRQHandler+0x2e8>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

  									}break;
 80044d4:	e06b      	b.n	80045ae <TIM2_IRQHandler+0x2f6>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 80044d6:	4b29      	ldr	r3, [pc, #164]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	461a      	mov	r2, r3
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <TIM2_IRQHandler+0x2ec>)
 80044de:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 80044e0:	4b26      	ldr	r3, [pc, #152]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044e2:	789b      	ldrb	r3, [r3, #2]
 80044e4:	061a      	lsls	r2, r3, #24
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044e8:	78db      	ldrb	r3, [r3, #3]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	441a      	add	r2, r3
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044f0:	791b      	ldrb	r3, [r3, #4]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	4413      	add	r3, r2
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <TIM2_IRQHandler+0x2c4>)
 80044f8:	7952      	ldrb	r2, [r2, #5]
 80044fa:	4413      	add	r3, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <TIM2_IRQHandler+0x2f0>)
 8004500:	601a      	str	r2, [r3, #0]

  				  					}break;
 8004502:	e054      	b.n	80045ae <TIM2_IRQHandler+0x2f6>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <TIM2_IRQHandler+0x2c4>)
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	461a      	mov	r2, r3
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <TIM2_IRQHandler+0x2ec>)
 800450c:	601a      	str	r2, [r3, #0]

  				  					}break;
 800450e:	e04e      	b.n	80045ae <TIM2_IRQHandler+0x2f6>
 8004510:	200005f4 	.word	0x200005f4
 8004514:	40010c00 	.word	0x40010c00
 8004518:	20000930 	.word	0x20000930
 800451c:	40011000 	.word	0x40011000
 8004520:	200004b0 	.word	0x200004b0
 8004524:	4090ac29 	.word	0x4090ac29
 8004528:	2000095c 	.word	0x2000095c
 800452c:	2000021c 	.word	0x2000021c
 8004530:	200006e4 	.word	0x200006e4
 8004534:	20000214 	.word	0x20000214
 8004538:	20000208 	.word	0x20000208
 800453c:	51eb851f 	.word	0x51eb851f
 8004540:	20000218 	.word	0x20000218
 8004544:	20000538 	.word	0x20000538
 8004548:	20000978 	.word	0x20000978
 800454c:	200006a0 	.word	0x200006a0
 8004550:	200008c4 	.word	0x200008c4
 8004554:	200002e4 	.word	0x200002e4
 8004558:	20000974 	.word	0x20000974
 800455c:	20000594 	.word	0x20000594
 8004560:	200007ac 	.word	0x200007ac
 8004564:	20000484 	.word	0x20000484
 8004568:	200006dc 	.word	0x200006dc
 800456c:	200002e8 	.word	0x200002e8
 8004570:	20000944 	.word	0x20000944
 8004574:	20000004 	.word	0x20000004
 8004578:	20000204 	.word	0x20000204
 800457c:	20000340 	.word	0x20000340
 8004580:	200006e0 	.word	0x200006e0
 8004584:	20000580 	.word	0x20000580
 8004588:	200004e0 	.word	0x200004e0
 800458c:	20000694 	.word	0x20000694
 8004590:	20000278 	.word	0x20000278
 8004594:	200005f0 	.word	0x200005f0
 8004598:	20000698 	.word	0x20000698
 800459c:	200006cc 	.word	0x200006cc
 80045a0:	20000958 	.word	0x20000958
 80045a4:	200008a0 	.word	0x200008a0
 80045a8:	200007b4 	.word	0x200007b4
  									}break;
 80045ac:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 80045ae:	4b9e      	ldr	r3, [pc, #632]	; (8004828 <TIM2_IRQHandler+0x570>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 8153 	bne.w	800485e <TIM2_IRQHandler+0x5a6>
  			{
  				switch(ParamSelector)
 80045b8:	4b9c      	ldr	r3, [pc, #624]	; (800482c <TIM2_IRQHandler+0x574>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b13      	cmp	r3, #19
 80045c0:	f200 814d 	bhi.w	800485e <TIM2_IRQHandler+0x5a6>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <TIM2_IRQHandler+0x314>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800463b 	.word	0x0800463b
 80045d4:	08004659 	.word	0x08004659
 80045d8:	08004677 	.word	0x08004677
 80045dc:	08004695 	.word	0x08004695
 80045e0:	080046b3 	.word	0x080046b3
 80045e4:	080046d1 	.word	0x080046d1
 80045e8:	080046ef 	.word	0x080046ef
 80045ec:	0800470d 	.word	0x0800470d
 80045f0:	0800472b 	.word	0x0800472b
 80045f4:	08004741 	.word	0x08004741
 80045f8:	08004757 	.word	0x08004757
 80045fc:	0800476d 	.word	0x0800476d
 8004600:	08004783 	.word	0x08004783
 8004604:	08004799 	.word	0x08004799
 8004608:	080047af 	.word	0x080047af
 800460c:	080047cd 	.word	0x080047cd
 8004610:	080047eb 	.word	0x080047eb
 8004614:	08004809 	.word	0x08004809
 8004618:	08004841 	.word	0x08004841
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800461c:	4b84      	ldr	r3, [pc, #528]	; (8004830 <TIM2_IRQHandler+0x578>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc fb57 	bl	8000cd4 <__aeabi_ui2f>
 8004626:	4603      	mov	r3, r0
 8004628:	4982      	ldr	r1, [pc, #520]	; (8004834 <TIM2_IRQHandler+0x57c>)
 800462a:	4618      	mov	r0, r3
 800462c:	f7fc fc5e 	bl	8000eec <__aeabi_fdiv>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	4b80      	ldr	r3, [pc, #512]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	e111      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800463a:	4b7d      	ldr	r3, [pc, #500]	; (8004830 <TIM2_IRQHandler+0x578>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fb48 	bl	8000cd4 <__aeabi_ui2f>
 8004644:	4603      	mov	r3, r0
 8004646:	497b      	ldr	r1, [pc, #492]	; (8004834 <TIM2_IRQHandler+0x57c>)
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fc4f 	bl	8000eec <__aeabi_fdiv>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	4b79      	ldr	r3, [pc, #484]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004654:	609a      	str	r2, [r3, #8]
 8004656:	e102      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <TIM2_IRQHandler+0x578>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fc fb39 	bl	8000cd4 <__aeabi_ui2f>
 8004662:	4603      	mov	r3, r0
 8004664:	4973      	ldr	r1, [pc, #460]	; (8004834 <TIM2_IRQHandler+0x57c>)
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fc40 	bl	8000eec <__aeabi_fdiv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	4b71      	ldr	r3, [pc, #452]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	e0f3      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004676:	4b6e      	ldr	r3, [pc, #440]	; (8004830 <TIM2_IRQHandler+0x578>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fb2a 	bl	8000cd4 <__aeabi_ui2f>
 8004680:	4603      	mov	r3, r0
 8004682:	496c      	ldr	r1, [pc, #432]	; (8004834 <TIM2_IRQHandler+0x57c>)
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fc31 	bl	8000eec <__aeabi_fdiv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004690:	611a      	str	r2, [r3, #16]
 8004692:	e0e4      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <TIM2_IRQHandler+0x578>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fc fb1b 	bl	8000cd4 <__aeabi_ui2f>
 800469e:	4603      	mov	r3, r0
 80046a0:	4964      	ldr	r1, [pc, #400]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fc22 	bl	8000eec <__aeabi_fdiv>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b62      	ldr	r3, [pc, #392]	; (8004838 <TIM2_IRQHandler+0x580>)
 80046ae:	615a      	str	r2, [r3, #20]
 80046b0:	e0d5      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80046b2:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <TIM2_IRQHandler+0x578>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fb0c 	bl	8000cd4 <__aeabi_ui2f>
 80046bc:	4603      	mov	r3, r0
 80046be:	495d      	ldr	r1, [pc, #372]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fc13 	bl	8000eec <__aeabi_fdiv>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <TIM2_IRQHandler+0x580>)
 80046cc:	619a      	str	r2, [r3, #24]
 80046ce:	e0c6      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80046d0:	4b57      	ldr	r3, [pc, #348]	; (8004830 <TIM2_IRQHandler+0x578>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc fafd 	bl	8000cd4 <__aeabi_ui2f>
 80046da:	4603      	mov	r3, r0
 80046dc:	4955      	ldr	r1, [pc, #340]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fc04 	bl	8000eec <__aeabi_fdiv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <TIM2_IRQHandler+0x580>)
 80046ea:	61da      	str	r2, [r3, #28]
 80046ec:	e0b7      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80046ee:	4b50      	ldr	r3, [pc, #320]	; (8004830 <TIM2_IRQHandler+0x578>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fc faee 	bl	8000cd4 <__aeabi_ui2f>
 80046f8:	4603      	mov	r3, r0
 80046fa:	494e      	ldr	r1, [pc, #312]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc fbf5 	bl	8000eec <__aeabi_fdiv>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004708:	621a      	str	r2, [r3, #32]
 800470a:	e0a8      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800470c:	4b48      	ldr	r3, [pc, #288]	; (8004830 <TIM2_IRQHandler+0x578>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fc fadf 	bl	8000cd4 <__aeabi_ui2f>
 8004716:	4603      	mov	r3, r0
 8004718:	4946      	ldr	r1, [pc, #280]	; (8004834 <TIM2_IRQHandler+0x57c>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fbe6 	bl	8000eec <__aeabi_fdiv>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	4b44      	ldr	r3, [pc, #272]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004726:	625a      	str	r2, [r3, #36]	; 0x24
 8004728:	e099      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <TIM2_IRQHandler+0x578>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	4a42      	ldr	r2, [pc, #264]	; (800483c <TIM2_IRQHandler+0x584>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	461a      	mov	r2, r3
 800473a:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <TIM2_IRQHandler+0x580>)
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
 800473e:	e08e      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <TIM2_IRQHandler+0x578>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <TIM2_IRQHandler+0x584>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	09db      	lsrs	r3, r3, #7
 800474e:	461a      	mov	r2, r3
 8004750:	4b39      	ldr	r3, [pc, #228]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
 8004754:	e083      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004756:	4b36      	ldr	r3, [pc, #216]	; (8004830 <TIM2_IRQHandler+0x578>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	4a37      	ldr	r2, [pc, #220]	; (800483c <TIM2_IRQHandler+0x584>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	09db      	lsrs	r3, r3, #7
 8004764:	461a      	mov	r2, r3
 8004766:	4b34      	ldr	r3, [pc, #208]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
 800476a:	e078      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800476c:	4b30      	ldr	r3, [pc, #192]	; (8004830 <TIM2_IRQHandler+0x578>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	4a32      	ldr	r2, [pc, #200]	; (800483c <TIM2_IRQHandler+0x584>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	461a      	mov	r2, r3
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <TIM2_IRQHandler+0x580>)
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
 8004780:	e06d      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <TIM2_IRQHandler+0x578>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <TIM2_IRQHandler+0x584>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	09db      	lsrs	r3, r3, #7
 8004790:	461a      	mov	r2, r3
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
 8004796:	e062      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <TIM2_IRQHandler+0x578>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	4a27      	ldr	r2, [pc, #156]	; (800483c <TIM2_IRQHandler+0x584>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	09db      	lsrs	r3, r3, #7
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <TIM2_IRQHandler+0x580>)
 80047aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80047ac:	e057      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <TIM2_IRQHandler+0x578>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc fa8e 	bl	8000cd4 <__aeabi_ui2f>
 80047b8:	4603      	mov	r3, r0
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc fb95 	bl	8000eec <__aeabi_fdiv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <TIM2_IRQHandler+0x580>)
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
 80047ca:	e048      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <TIM2_IRQHandler+0x578>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc fa7f 	bl	8000cd4 <__aeabi_ui2f>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4916      	ldr	r1, [pc, #88]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fb86 	bl	8000eec <__aeabi_fdiv>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <TIM2_IRQHandler+0x580>)
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
 80047e8:	e039      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <TIM2_IRQHandler+0x578>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fa70 	bl	8000cd4 <__aeabi_ui2f>
 80047f4:	4603      	mov	r3, r0
 80047f6:	490f      	ldr	r1, [pc, #60]	; (8004834 <TIM2_IRQHandler+0x57c>)
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fc fb77 	bl	8000eec <__aeabi_fdiv>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004804:	649a      	str	r2, [r3, #72]	; 0x48
 8004806:	e02a      	b.n	800485e <TIM2_IRQHandler+0x5a6>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <TIM2_IRQHandler+0x578>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc fa61 	bl	8000cd4 <__aeabi_ui2f>
 8004812:	4603      	mov	r3, r0
 8004814:	4907      	ldr	r1, [pc, #28]	; (8004834 <TIM2_IRQHandler+0x57c>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7fc fb68 	bl	8000eec <__aeabi_fdiv>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <TIM2_IRQHandler+0x580>)
 8004822:	64da      	str	r2, [r3, #76]	; 0x4c
 8004824:	e01b      	b.n	800485e <TIM2_IRQHandler+0x5a6>
 8004826:	bf00      	nop
 8004828:	200006e0 	.word	0x200006e0
 800482c:	200008a0 	.word	0x200008a0
 8004830:	200007b4 	.word	0x200007b4
 8004834:	47c35000 	.word	0x47c35000
 8004838:	20000598 	.word	0x20000598
 800483c:	0a7c5ac5 	.word	0x0a7c5ac5
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004840:	4ba1      	ldr	r3, [pc, #644]	; (8004ac8 <TIM2_IRQHandler+0x810>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fc fa45 	bl	8000cd4 <__aeabi_ui2f>
 800484a:	4603      	mov	r3, r0
 800484c:	499f      	ldr	r1, [pc, #636]	; (8004acc <TIM2_IRQHandler+0x814>)
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fb4c 	bl	8000eec <__aeabi_fdiv>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	4b9d      	ldr	r3, [pc, #628]	; (8004ad0 <TIM2_IRQHandler+0x818>)
 800485a:	651a      	str	r2, [r3, #80]	; 0x50
 800485c:	bf00      	nop
  				}
  			}



  			SendBackFlag=1;
 800485e:	4b9d      	ldr	r3, [pc, #628]	; (8004ad4 <TIM2_IRQHandler+0x81c>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8004864:	4b9c      	ldr	r3, [pc, #624]	; (8004ad8 <TIM2_IRQHandler+0x820>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 800486a:	4b9c      	ldr	r3, [pc, #624]	; (8004adc <TIM2_IRQHandler+0x824>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a9a      	ldr	r2, [pc, #616]	; (8004adc <TIM2_IRQHandler+0x824>)
 8004872:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8004874:	4b97      	ldr	r3, [pc, #604]	; (8004ad4 <TIM2_IRQHandler+0x81c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 82c5 	beq.w	8004e08 <TIM2_IRQHandler+0xb50>
  {
    	BackTimer++;
 800487e:	4b98      	ldr	r3, [pc, #608]	; (8004ae0 <TIM2_IRQHandler+0x828>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a96      	ldr	r2, [pc, #600]	; (8004ae0 <TIM2_IRQHandler+0x828>)
 8004886:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 8004888:	4b96      	ldr	r3, [pc, #600]	; (8004ae4 <TIM2_IRQHandler+0x82c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d004      	beq.n	800489a <TIM2_IRQHandler+0x5e2>
 8004890:	4b94      	ldr	r3, [pc, #592]	; (8004ae4 <TIM2_IRQHandler+0x82c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b02      	cmp	r3, #2
 8004896:	f040 815b 	bne.w	8004b50 <TIM2_IRQHandler+0x898>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 800489a:	4b92      	ldr	r3, [pc, #584]	; (8004ae4 <TIM2_IRQHandler+0x82c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d108      	bne.n	80048b4 <TIM2_IRQHandler+0x5fc>
 80048a2:	4a91      	ldr	r2, [pc, #580]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 80048a4:	4b8a      	ldr	r3, [pc, #552]	; (8004ad0 <TIM2_IRQHandler+0x818>)
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	2354      	movs	r3, #84	; 0x54
 80048ac:	461a      	mov	r2, r3
 80048ae:	f005 f838 	bl	8009922 <memcpy>
 80048b2:	e007      	b.n	80048c4 <TIM2_IRQHandler+0x60c>
    		 else FlashDataTemp=FlashDataFlash;
 80048b4:	4a8c      	ldr	r2, [pc, #560]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 80048b6:	4b8d      	ldr	r3, [pc, #564]	; (8004aec <TIM2_IRQHandler+0x834>)
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	2354      	movs	r3, #84	; 0x54
 80048be:	461a      	mov	r2, r3
 80048c0:	f005 f82f 	bl	8009922 <memcpy>

    		 switch(ParamSelector)
 80048c4:	4b8a      	ldr	r3, [pc, #552]	; (8004af0 <TIM2_IRQHandler+0x838>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	2b13      	cmp	r3, #19
 80048cc:	f200 8140 	bhi.w	8004b50 <TIM2_IRQHandler+0x898>
 80048d0:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <TIM2_IRQHandler+0x620>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004945 	.word	0x08004945
 80048e0:	08004961 	.word	0x08004961
 80048e4:	0800497d 	.word	0x0800497d
 80048e8:	08004999 	.word	0x08004999
 80048ec:	080049b5 	.word	0x080049b5
 80048f0:	080049d1 	.word	0x080049d1
 80048f4:	080049ed 	.word	0x080049ed
 80048f8:	08004a09 	.word	0x08004a09
 80048fc:	08004a25 	.word	0x08004a25
 8004900:	08004a37 	.word	0x08004a37
 8004904:	08004a49 	.word	0x08004a49
 8004908:	08004a5b 	.word	0x08004a5b
 800490c:	08004a6d 	.word	0x08004a6d
 8004910:	08004a7f 	.word	0x08004a7f
 8004914:	08004a91 	.word	0x08004a91
 8004918:	08004aad 	.word	0x08004aad
 800491c:	08004afd 	.word	0x08004afd
 8004920:	08004b19 	.word	0x08004b19
 8004924:	08004b35 	.word	0x08004b35
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004928:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4967      	ldr	r1, [pc, #412]	; (8004acc <TIM2_IRQHandler+0x814>)
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc fa28 	bl	8000d84 <__aeabi_fmul>
 8004934:	4603      	mov	r3, r0
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc fbea 	bl	8001110 <__aeabi_f2uiz>
 800493c:	4602      	mov	r2, r0
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e105      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4960      	ldr	r1, [pc, #384]	; (8004acc <TIM2_IRQHandler+0x814>)
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc fa1a 	bl	8000d84 <__aeabi_fmul>
 8004950:	4603      	mov	r3, r0
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fbdc 	bl	8001110 <__aeabi_f2uiz>
 8004958:	4602      	mov	r2, r0
 800495a:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e0f7      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004960:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4959      	ldr	r1, [pc, #356]	; (8004acc <TIM2_IRQHandler+0x814>)
 8004966:	4618      	mov	r0, r3
 8004968:	f7fc fa0c 	bl	8000d84 <__aeabi_fmul>
 800496c:	4603      	mov	r3, r0
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fbce 	bl	8001110 <__aeabi_f2uiz>
 8004974:	4602      	mov	r2, r0
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e0e9      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 800497c:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	4952      	ldr	r1, [pc, #328]	; (8004acc <TIM2_IRQHandler+0x814>)
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc f9fe 	bl	8000d84 <__aeabi_fmul>
 8004988:	4603      	mov	r3, r0
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fbc0 	bl	8001110 <__aeabi_f2uiz>
 8004990:	4602      	mov	r2, r0
 8004992:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e0db      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004998:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	494b      	ldr	r1, [pc, #300]	; (8004acc <TIM2_IRQHandler+0x814>)
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc f9f0 	bl	8000d84 <__aeabi_fmul>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fbb2 	bl	8001110 <__aeabi_f2uiz>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e0cd      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	4944      	ldr	r1, [pc, #272]	; (8004acc <TIM2_IRQHandler+0x814>)
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc f9e2 	bl	8000d84 <__aeabi_fmul>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fc fba4 	bl	8001110 <__aeabi_f2uiz>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e0bf      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	493d      	ldr	r1, [pc, #244]	; (8004acc <TIM2_IRQHandler+0x814>)
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc f9d4 	bl	8000d84 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc fb96 	bl	8001110 <__aeabi_f2uiz>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e0b1      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80049ec:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4936      	ldr	r1, [pc, #216]	; (8004acc <TIM2_IRQHandler+0x814>)
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc f9c6 	bl	8000d84 <__aeabi_fmul>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc fb88 	bl	8001110 <__aeabi_f2uiz>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e0a3      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004a08:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	492f      	ldr	r1, [pc, #188]	; (8004acc <TIM2_IRQHandler+0x814>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc f9b8 	bl	8000d84 <__aeabi_fmul>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fb7a 	bl	8001110 <__aeabi_f2uiz>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e095      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e08c      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e083      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e07a      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004a5a:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e071      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e068      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <TIM2_IRQHandler+0x840>)
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e05f      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	490d      	ldr	r1, [pc, #52]	; (8004acc <TIM2_IRQHandler+0x814>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc f974 	bl	8000d84 <__aeabi_fmul>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc fb36 	bl	8001110 <__aeabi_f2uiz>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e051      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <TIM2_IRQHandler+0x830>)
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	4906      	ldr	r1, [pc, #24]	; (8004acc <TIM2_IRQHandler+0x814>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc f966 	bl	8000d84 <__aeabi_fmul>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fb28 	bl	8001110 <__aeabi_f2uiz>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <TIM2_IRQHandler+0x83c>)
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e043      	b.n	8004b50 <TIM2_IRQHandler+0x898>
 8004ac8:	200007b4 	.word	0x200007b4
 8004acc:	47c35000 	.word	0x47c35000
 8004ad0:	20000598 	.word	0x20000598
 8004ad4:	20000220 	.word	0x20000220
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	200006d8 	.word	0x200006d8
 8004ae0:	20000224 	.word	0x20000224
 8004ae4:	200006e0 	.word	0x200006e0
 8004ae8:	200008d4 	.word	0x200008d4
 8004aec:	20000640 	.word	0x20000640
 8004af0:	200008a0 	.word	0x200008a0
 8004af4:	200008b0 	.word	0x200008b0
 8004af8:	000186a0 	.word	0x000186a0
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 8004afc:	4ba5      	ldr	r3, [pc, #660]	; (8004d94 <TIM2_IRQHandler+0xadc>)
 8004afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b00:	49a5      	ldr	r1, [pc, #660]	; (8004d98 <TIM2_IRQHandler+0xae0>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc f93e 	bl	8000d84 <__aeabi_fmul>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc fb00 	bl	8001110 <__aeabi_f2uiz>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4ba2      	ldr	r3, [pc, #648]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e01b      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8004b18:	4b9e      	ldr	r3, [pc, #632]	; (8004d94 <TIM2_IRQHandler+0xadc>)
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	499e      	ldr	r1, [pc, #632]	; (8004d98 <TIM2_IRQHandler+0xae0>)
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc f930 	bl	8000d84 <__aeabi_fmul>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fc faf2 	bl	8001110 <__aeabi_f2uiz>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b9b      	ldr	r3, [pc, #620]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e00d      	b.n	8004b50 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8004b34:	4b97      	ldr	r3, [pc, #604]	; (8004d94 <TIM2_IRQHandler+0xadc>)
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	4997      	ldr	r1, [pc, #604]	; (8004d98 <TIM2_IRQHandler+0xae0>)
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fc f922 	bl	8000d84 <__aeabi_fmul>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc fae4 	bl	8001110 <__aeabi_f2uiz>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b94      	ldr	r3, [pc, #592]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	bf00      	nop
    		 }
    	 }

      	switch(BackTimer)
 8004b50:	4b93      	ldr	r3, [pc, #588]	; (8004da0 <TIM2_IRQHandler+0xae8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	f200 8156 	bhi.w	8004e08 <TIM2_IRQHandler+0xb50>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <TIM2_IRQHandler+0x8ac>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b7d 	.word	0x08004b7d
 8004b68:	08004e09 	.word	0x08004e09
 8004b6c:	08004e09 	.word	0x08004e09
 8004b70:	08004b91 	.word	0x08004b91
 8004b74:	08004de1 	.word	0x08004de1
 8004b78:	08004df5 	.word	0x08004df5
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b82:	4888      	ldr	r0, [pc, #544]	; (8004da4 <TIM2_IRQHandler+0xaec>)
 8004b84:	f002 f8fe 	bl	8006d84 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7fe ffc4 	bl	8003b16 <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8004b8e:	e13b      	b.n	8004e08 <TIM2_IRQHandler+0xb50>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8004b90:	4b85      	ldr	r3, [pc, #532]	; (8004da8 <TIM2_IRQHandler+0xaf0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4b85      	ldr	r3, [pc, #532]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004b98:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8004b9a:	4b83      	ldr	r3, [pc, #524]	; (8004da8 <TIM2_IRQHandler+0xaf0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	f200 80f3 	bhi.w	8004d8a <TIM2_IRQHandler+0xad2>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <TIM2_IRQHandler+0x8f4>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bc1 	.word	0x08004bc1
 8004bb0:	08004d17 	.word	0x08004d17
 8004bb4:	08004d51 	.word	0x08004d51
 8004bb8:	08004cc7 	.word	0x08004cc7
 8004bbc:	08004cef 	.word	0x08004cef
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8004bc0:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <TIM2_IRQHandler+0xaf8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4b79      	ldr	r3, [pc, #484]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004bc8:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8004bca:	4b79      	ldr	r3, [pc, #484]	; (8004db0 <TIM2_IRQHandler+0xaf8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b76      	ldr	r3, [pc, #472]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004bd4:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(AnglePitch<0)
 8004bd6:	4b77      	ldr	r3, [pc, #476]	; (8004db4 <TIM2_IRQHandler+0xafc>)
 8004bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f7fb feea 	bl	80009bc <__aeabi_dcmplt>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <TIM2_IRQHandler+0x958>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 8004bee:	4b72      	ldr	r3, [pc, #456]	; (8004db8 <TIM2_IRQHandler+0xb00>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch*(-1);
 8004bf4:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <TIM2_IRQHandler+0xafc>)
 8004bf6:	cb18      	ldmia	r3, {r3, r4}
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f7fb ff41 	bl	8000a88 <__aeabi_d2uiz>
 8004c06:	4603      	mov	r3, r0
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	; (8004dbc <TIM2_IRQHandler+0xb04>)
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e00c      	b.n	8004c2a <TIM2_IRQHandler+0x972>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 8004c10:	4b69      	ldr	r3, [pc, #420]	; (8004db8 <TIM2_IRQHandler+0xb00>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch;
 8004c16:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <TIM2_IRQHandler+0xafc>)
 8004c18:	cb18      	ldmia	r3, {r3, r4}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	f7fb ff33 	bl	8000a88 <__aeabi_d2uiz>
 8004c22:	4603      	mov	r3, r0
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <TIM2_IRQHandler+0xb04>)
 8004c28:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(AngleRoll<0)
 8004c2a:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <TIM2_IRQHandler+0xb08>)
 8004c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f7fb fec0 	bl	80009bc <__aeabi_dcmplt>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <TIM2_IRQHandler+0x9ac>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8004c42:	4b60      	ldr	r3, [pc, #384]	; (8004dc4 <TIM2_IRQHandler+0xb0c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll*(-1);
 8004c48:	4b5d      	ldr	r3, [pc, #372]	; (8004dc0 <TIM2_IRQHandler+0xb08>)
 8004c4a:	cb18      	ldmia	r3, {r3, r4}
 8004c4c:	461d      	mov	r5, r3
 8004c4e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8004c52:	4628      	mov	r0, r5
 8004c54:	4631      	mov	r1, r6
 8004c56:	f7fb ff17 	bl	8000a88 <__aeabi_d2uiz>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b5a      	ldr	r3, [pc, #360]	; (8004dc8 <TIM2_IRQHandler+0xb10>)
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e00c      	b.n	8004c7e <TIM2_IRQHandler+0x9c6>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 8004c64:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <TIM2_IRQHandler+0xb0c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll;
 8004c6a:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <TIM2_IRQHandler+0xb08>)
 8004c6c:	cb18      	ldmia	r3, {r3, r4}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4621      	mov	r1, r4
 8004c72:	f7fb ff09 	bl	8000a88 <__aeabi_d2uiz>
 8004c76:	4603      	mov	r3, r0
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <TIM2_IRQHandler+0xb10>)
 8004c7c:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 8004c7e:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <TIM2_IRQHandler+0xb04>)
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	4b4a      	ldr	r3, [pc, #296]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004c84:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 8004c86:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <TIM2_IRQHandler+0xb10>)
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	4b48      	ldr	r3, [pc, #288]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004c8c:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8004c8e:	4b4d      	ldr	r3, [pc, #308]	; (8004dc4 <TIM2_IRQHandler+0xb0c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b48      	ldr	r3, [pc, #288]	; (8004db8 <TIM2_IRQHandler+0xb00>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b4b      	ldr	r3, [pc, #300]	; (8004dcc <TIM2_IRQHandler+0xb14>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	4b48      	ldr	r3, [pc, #288]	; (8004dd0 <TIM2_IRQHandler+0xb18>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cc2:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004cc4:	e061      	b.n	8004d8a <TIM2_IRQHandler+0xad2>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8004cc6:	4b39      	ldr	r3, [pc, #228]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 8004ccc:	4b37      	ldr	r3, [pc, #220]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 8004cd8:	4b34      	ldr	r3, [pc, #208]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 8004ce4:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <TIM2_IRQHandler+0xb1c>)
 8004ce6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004cea:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8004cec:	e04d      	b.n	8004d8a <TIM2_IRQHandler+0xad2>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8004cee:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 8004d0c:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <TIM2_IRQHandler+0xb20>)
 8004d0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004d12:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8004d14:	e039      	b.n	8004d8a <TIM2_IRQHandler+0xad2>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8004d16:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <TIM2_IRQHandler+0xb24>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d1e:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d2a:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d36:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d42:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d4c:	715a      	strb	r2, [r3, #5]
											}break;
 8004d4e:	e01c      	b.n	8004d8a <TIM2_IRQHandler+0xad2>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8004d50:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <TIM2_IRQHandler+0xb24>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d58:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d64:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d70:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d7c:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <TIM2_IRQHandler+0xae4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d86:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004d88:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 8004d8a:	2106      	movs	r1, #6
 8004d8c:	4807      	ldr	r0, [pc, #28]	; (8004dac <TIM2_IRQHandler+0xaf4>)
 8004d8e:	f7fe fcef 	bl	8003770 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8004d92:	e039      	b.n	8004e08 <TIM2_IRQHandler+0xb50>
 8004d94:	200008d4 	.word	0x200008d4
 8004d98:	47c35000 	.word	0x47c35000
 8004d9c:	200008b0 	.word	0x200008b0
 8004da0:	20000224 	.word	0x20000224
 8004da4:	40010c00 	.word	0x40010c00
 8004da8:	200006e0 	.word	0x200006e0
 8004dac:	20000490 	.word	0x20000490
 8004db0:	20000218 	.word	0x20000218
 8004db4:	20000890 	.word	0x20000890
 8004db8:	2000089c 	.word	0x2000089c
 8004dbc:	2000092c 	.word	0x2000092c
 8004dc0:	20000968 	.word	0x20000968
 8004dc4:	200008c8 	.word	0x200008c8
 8004dc8:	20000940 	.word	0x20000940
 8004dcc:	20000210 	.word	0x20000210
 8004dd0:	2000020c 	.word	0x2000020c
 8004dd4:	200006d4 	.word	0x200006d4
 8004dd8:	20000970 	.word	0x20000970
 8004ddc:	200008a0 	.word	0x200008a0

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8004de0:	2001      	movs	r0, #1
 8004de2:	f7fe fe98 	bl	8003b16 <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8004de6:	2201      	movs	r2, #1
 8004de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dec:	4814      	ldr	r0, [pc, #80]	; (8004e40 <TIM2_IRQHandler+0xb88>)
 8004dee:	f001 ffc9 	bl	8006d84 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8004df2:	e009      	b.n	8004e08 <TIM2_IRQHandler+0xb50>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8004df4:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <TIM2_IRQHandler+0xb8c>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <TIM2_IRQHandler+0xb90>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <TIM2_IRQHandler+0xb94>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]

  				}break;
 8004e06:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <TIM2_IRQHandler+0xb98>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a10      	ldr	r2, [pc, #64]	; (8004e50 <TIM2_IRQHandler+0xb98>)
 8004e10:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8004e12:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <TIM2_IRQHandler+0xb98>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e1a:	d12c      	bne.n	8004e76 <TIM2_IRQHandler+0xbbe>
  {
    		MSGprerSecond=MSGcount;
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <TIM2_IRQHandler+0xb9c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0d      	ldr	r2, [pc, #52]	; (8004e58 <TIM2_IRQHandler+0xba0>)
 8004e22:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <TIM2_IRQHandler+0xb9c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b09      	cmp	r3, #9
 8004e2a:	d81b      	bhi.n	8004e64 <TIM2_IRQHandler+0xbac>
    		{
    			MSGLowCount++;
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <TIM2_IRQHandler+0xba4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <TIM2_IRQHandler+0xba4>)
 8004e34:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <TIM2_IRQHandler+0xba8>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e015      	b.n	8004e6a <TIM2_IRQHandler+0xbb2>
 8004e3e:	bf00      	nop
 8004e40:	40010c00 	.word	0x40010c00
 8004e44:	20000004 	.word	0x20000004
 8004e48:	20000220 	.word	0x20000220
 8004e4c:	20000224 	.word	0x20000224
 8004e50:	200006b0 	.word	0x200006b0
 8004e54:	200006d8 	.word	0x200006d8
 8004e58:	200007bc 	.word	0x200007bc
 8004e5c:	200007b8 	.word	0x200007b8
 8004e60:	200008d0 	.word	0x200008d0
    		}
    		 else  ConnectWeakFlag=0;
 8004e64:	4baa      	ldr	r3, [pc, #680]	; (8005110 <TIM2_IRQHandler+0xe58>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8004e6a:	4baa      	ldr	r3, [pc, #680]	; (8005114 <TIM2_IRQHandler+0xe5c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8004e70:	4ba9      	ldr	r3, [pc, #676]	; (8005118 <TIM2_IRQHandler+0xe60>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------
  MPU6050_GetCurrentFIFOPacket(&hi2c2,MPU6050_ADDRESS,fifoBuffer,packetSize);
 8004e76:	4ba9      	ldr	r3, [pc, #676]	; (800511c <TIM2_IRQHandler+0xe64>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	4aa8      	ldr	r2, [pc, #672]	; (8005120 <TIM2_IRQHandler+0xe68>)
 8004e7e:	21d0      	movs	r1, #208	; 0xd0
 8004e80:	48a8      	ldr	r0, [pc, #672]	; (8005124 <TIM2_IRQHandler+0xe6c>)
 8004e82:	f7fc fd31 	bl	80018e8 <MPU6050_GetCurrentFIFOPacket>
  CalculateQuaternions(&QuaternionMPU60500,fifoBuffer);
 8004e86:	49a6      	ldr	r1, [pc, #664]	; (8005120 <TIM2_IRQHandler+0xe68>)
 8004e88:	48a7      	ldr	r0, [pc, #668]	; (8005128 <TIM2_IRQHandler+0xe70>)
 8004e8a:	f7fc ff13 	bl	8001cb4 <CalculateQuaternions>
  CalculateGravityVector(&QuaternionMPU60500, &GravityVectorMPU6050);
 8004e8e:	49a7      	ldr	r1, [pc, #668]	; (800512c <TIM2_IRQHandler+0xe74>)
 8004e90:	48a5      	ldr	r0, [pc, #660]	; (8005128 <TIM2_IRQHandler+0xe70>)
 8004e92:	f7fc ff9f 	bl	8001dd4 <CalculateGravityVector>
  CalculateYawPitchRoll(&QuaternionMPU60500, &GravityVectorMPU6050,&AnglesMPU6050_DMP);
 8004e96:	4aa6      	ldr	r2, [pc, #664]	; (8005130 <TIM2_IRQHandler+0xe78>)
 8004e98:	49a4      	ldr	r1, [pc, #656]	; (800512c <TIM2_IRQHandler+0xe74>)
 8004e9a:	48a3      	ldr	r0, [pc, #652]	; (8005128 <TIM2_IRQHandler+0xe70>)
 8004e9c:	f7fd f81c 	bl	8001ed8 <CalculateYawPitchRoll>

  AnglePitch=AnglesMPU6050_DMP.pitch;
 8004ea0:	4ba3      	ldr	r3, [pc, #652]	; (8005130 <TIM2_IRQHandler+0xe78>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fb fabf 	bl	8000428 <__aeabi_f2d>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	4aa1      	ldr	r2, [pc, #644]	; (8005134 <TIM2_IRQHandler+0xe7c>)
 8004eb0:	e9c2 3400 	strd	r3, r4, [r2]
  AngleRoll=AnglesMPU6050_DMP.roll;
 8004eb4:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <TIM2_IRQHandler+0xe78>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb fab5 	bl	8000428 <__aeabi_f2d>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	4a9d      	ldr	r2, [pc, #628]	; (8005138 <TIM2_IRQHandler+0xe80>)
 8004ec4:	e9c2 3400 	strd	r3, r4, [r2]
  AngleYaw=AnglesMPU6050_DMP.yaw;
 8004ec8:	4b99      	ldr	r3, [pc, #612]	; (8005130 <TIM2_IRQHandler+0xe78>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb faab 	bl	8000428 <__aeabi_f2d>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4a99      	ldr	r2, [pc, #612]	; (800513c <TIM2_IRQHandler+0xe84>)
 8004ed8:	e9c2 3400 	strd	r3, r4, [r2]

  //PID input Filtered
  PitchGyroPIDin =  (PitchGyroPIDin * 0.7) + (AnglePitch * 0.3);
 8004edc:	4b98      	ldr	r3, [pc, #608]	; (8005140 <TIM2_IRQHandler+0xe88>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb faa1 	bl	8000428 <__aeabi_f2d>
 8004ee6:	a386      	add	r3, pc, #536	; (adr r3, 8005100 <TIM2_IRQHandler+0xe48>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb faf4 	bl	80004d8 <__aeabi_dmul>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	4625      	mov	r5, r4
 8004ef6:	461c      	mov	r4, r3
 8004ef8:	4b8e      	ldr	r3, [pc, #568]	; (8005134 <TIM2_IRQHandler+0xe7c>)
 8004efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004efe:	a382      	add	r3, pc, #520	; (adr r3, 8005108 <TIM2_IRQHandler+0xe50>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb f92c 	bl	800016c <__adddf3>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	f7fb fdd4 	bl	8000ac8 <__aeabi_d2f>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b87      	ldr	r3, [pc, #540]	; (8005140 <TIM2_IRQHandler+0xe88>)
 8004f24:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (AngleRoll * 0.3);
 8004f26:	4b87      	ldr	r3, [pc, #540]	; (8005144 <TIM2_IRQHandler+0xe8c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb fa7c 	bl	8000428 <__aeabi_f2d>
 8004f30:	a373      	add	r3, pc, #460	; (adr r3, 8005100 <TIM2_IRQHandler+0xe48>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb facf 	bl	80004d8 <__aeabi_dmul>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4625      	mov	r5, r4
 8004f40:	461c      	mov	r4, r3
 8004f42:	4b7d      	ldr	r3, [pc, #500]	; (8005138 <TIM2_IRQHandler+0xe80>)
 8004f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f48:	a36f      	add	r3, pc, #444	; (adr r3, 8005108 <TIM2_IRQHandler+0xe50>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fac3 	bl	80004d8 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb f907 	bl	800016c <__adddf3>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	4618      	mov	r0, r3
 8004f64:	4621      	mov	r1, r4
 8004f66:	f7fb fdaf 	bl	8000ac8 <__aeabi_d2f>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4b75      	ldr	r3, [pc, #468]	; (8005144 <TIM2_IRQHandler+0xe8c>)
 8004f6e:	601a      	str	r2, [r3, #0]
  YawGyroPIDin = (YawGyroPIDin * 0.7) + (AngleYaw * 0.3);
 8004f70:	4b75      	ldr	r3, [pc, #468]	; (8005148 <TIM2_IRQHandler+0xe90>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fb fa57 	bl	8000428 <__aeabi_f2d>
 8004f7a:	a361      	add	r3, pc, #388	; (adr r3, 8005100 <TIM2_IRQHandler+0xe48>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb faaa 	bl	80004d8 <__aeabi_dmul>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	4625      	mov	r5, r4
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	4b6b      	ldr	r3, [pc, #428]	; (800513c <TIM2_IRQHandler+0xe84>)
 8004f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f92:	a35d      	add	r3, pc, #372	; (adr r3, 8005108 <TIM2_IRQHandler+0xe50>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb fa9e 	bl	80004d8 <__aeabi_dmul>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb f8e2 	bl	800016c <__adddf3>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	4618      	mov	r0, r3
 8004fae:	4621      	mov	r1, r4
 8004fb0:	f7fb fd8a 	bl	8000ac8 <__aeabi_d2f>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b64      	ldr	r3, [pc, #400]	; (8005148 <TIM2_IRQHandler+0xe90>)
 8004fb8:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA
  //Throttle UP->DOWN 0-100 ->scaling
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,FlashDataActive.minthrottle,FlashDataActive.maxthrottle);
 8004fba:	4b64      	ldr	r3, [pc, #400]	; (800514c <TIM2_IRQHandler+0xe94>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fe88 	bl	8000cd4 <__aeabi_ui2f>
 8004fc4:	4b62      	ldr	r3, [pc, #392]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8004fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fc8:	4b61      	ldr	r3, [pc, #388]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8004fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	4a60      	ldr	r2, [pc, #384]	; (8005154 <TIM2_IRQHandler+0xe9c>)
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	f000 fc07 	bl	80057e8 <ScaleDataFl>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	; (8005158 <TIM2_IRQHandler+0xea0>)
 8004fde:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-FlashDataActive.maxpitchdegree,FlashDataActive.maxpitchdegree);
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	; (800515c <TIM2_IRQHandler+0xea4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fe75 	bl	8000cd4 <__aeabi_ui2f>
 8004fea:	4b59      	ldr	r3, [pc, #356]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004ff2:	4b57      	ldr	r3, [pc, #348]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	4a56      	ldr	r2, [pc, #344]	; (8005154 <TIM2_IRQHandler+0xe9c>)
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f000 fbf2 	bl	80057e8 <ScaleDataFl>
 8005004:	4602      	mov	r2, r0
 8005006:	4b56      	ldr	r3, [pc, #344]	; (8005160 <TIM2_IRQHandler+0xea8>)
 8005008:	601a      	str	r2, [r3, #0]
  //Invert
  PitchINscaled*=(-1);
 800500a:	4b55      	ldr	r3, [pc, #340]	; (8005160 <TIM2_IRQHandler+0xea8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005012:	4a53      	ldr	r2, [pc, #332]	; (8005160 <TIM2_IRQHandler+0xea8>)
 8005014:	6013      	str	r3, [r2, #0]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-FlashDataActive.maxrolldegree,FlashDataActive.maxrolldegree);
 8005016:	4b53      	ldr	r3, [pc, #332]	; (8005164 <TIM2_IRQHandler+0xeac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fb fe5a 	bl	8000cd4 <__aeabi_ui2f>
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005028:	4b49      	ldr	r3, [pc, #292]	; (8005150 <TIM2_IRQHandler+0xe98>)
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	4a48      	ldr	r2, [pc, #288]	; (8005154 <TIM2_IRQHandler+0xe9c>)
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	f000 fbd7 	bl	80057e8 <ScaleDataFl>
 800503a:	4602      	mov	r2, r0
 800503c:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <TIM2_IRQHandler+0xeb0>)
 800503e:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 ->scaling
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-FlashDataActive.maxyawdegree,FlashDataActive.maxyawdegree);
 8005040:	4b4a      	ldr	r3, [pc, #296]	; (800516c <TIM2_IRQHandler+0xeb4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fb fe45 	bl	8000cd4 <__aeabi_ui2f>
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <TIM2_IRQHandler+0xe98>)
 800504c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	4a3e      	ldr	r2, [pc, #248]	; (8005154 <TIM2_IRQHandler+0xe9c>)
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	f000 fbc2 	bl	80057e8 <ScaleDataFl>
 8005064:	4602      	mov	r2, r0
 8005066:	4b42      	ldr	r3, [pc, #264]	; (8005170 <TIM2_IRQHandler+0xeb8>)
 8005068:	601a      	str	r2, [r3, #0]

  //MOTOR CONTROL

  //PID
  pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 800506a:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <TIM2_IRQHandler+0xea8>)
 800506c:	681d      	ldr	r5, [r3, #0]
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <TIM2_IRQHandler+0xe88>)
 8005070:	681e      	ldr	r6, [r3, #0]
 8005072:	4b37      	ldr	r3, [pc, #220]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005074:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005078:	4b35      	ldr	r3, [pc, #212]	; (8005150 <TIM2_IRQHandler+0xe98>)
 800507a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005080:	68dc      	ldr	r4, [r3, #12]
 8005082:	4b33      	ldr	r3, [pc, #204]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fe28 	bl	8000cdc <__aeabi_i2f>
 800508c:	4682      	mov	sl, r0
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <TIM2_IRQHandler+0xe98>)
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb fe22 	bl	8000cdc <__aeabi_i2f>
 8005098:	4603      	mov	r3, r0
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	f8cd a00c 	str.w	sl, [sp, #12]
 80050a0:	4b34      	ldr	r3, [pc, #208]	; (8005174 <TIM2_IRQHandler+0xebc>)
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <TIM2_IRQHandler+0xec0>)
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	9400      	str	r4, [sp, #0]
 80050aa:	464b      	mov	r3, r9
 80050ac:	4642      	mov	r2, r8
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 fbcf 	bl	8005854 <pid>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b30      	ldr	r3, [pc, #192]	; (800517c <TIM2_IRQHandler+0xec4>)
 80050ba:	601a      	str	r2, [r3, #0]
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 80050bc:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <TIM2_IRQHandler+0xeb0>)
 80050be:	681d      	ldr	r5, [r3, #0]
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <TIM2_IRQHandler+0xe8c>)
 80050c2:	681e      	ldr	r6, [r3, #0]
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <TIM2_IRQHandler+0xe98>)
 80050c6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <TIM2_IRQHandler+0xe98>)
 80050cc:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80050d0:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <TIM2_IRQHandler+0xe98>)
 80050d2:	699c      	ldr	r4, [r3, #24]
 80050d4:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <TIM2_IRQHandler+0xe98>)
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fb fdff 	bl	8000cdc <__aeabi_i2f>
 80050de:	4682      	mov	sl, r0
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <TIM2_IRQHandler+0xe98>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fdf9 	bl	8000cdc <__aeabi_i2f>
 80050ea:	4603      	mov	r3, r0
 80050ec:	9304      	str	r3, [sp, #16]
 80050ee:	f8cd a00c 	str.w	sl, [sp, #12]
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <TIM2_IRQHandler+0xec8>)
 80050f4:	9302      	str	r3, [sp, #8]
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <TIM2_IRQHandler+0xecc>)
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	e045      	b.n	8005188 <TIM2_IRQHandler+0xed0>
 80050fc:	f3af 8000 	nop.w
 8005100:	66666666 	.word	0x66666666
 8005104:	3fe66666 	.word	0x3fe66666
 8005108:	33333333 	.word	0x33333333
 800510c:	3fd33333 	.word	0x3fd33333
 8005110:	200008d0 	.word	0x200008d0
 8005114:	200006d8 	.word	0x200006d8
 8005118:	200006b0 	.word	0x200006b0
 800511c:	20000000 	.word	0x20000000
 8005120:	20000368 	.word	0x20000368
 8005124:	200002ec 	.word	0x200002ec
 8005128:	200003a8 	.word	0x200003a8
 800512c:	2000027c 	.word	0x2000027c
 8005130:	20000584 	.word	0x20000584
 8005134:	20000890 	.word	0x20000890
 8005138:	20000968 	.word	0x20000968
 800513c:	20000950 	.word	0x20000950
 8005140:	2000023c 	.word	0x2000023c
 8005144:	20000240 	.word	0x20000240
 8005148:	20000244 	.word	0x20000244
 800514c:	20000580 	.word	0x20000580
 8005150:	20000598 	.word	0x20000598
 8005154:	42c80000 	.word	0x42c80000
 8005158:	2000022c 	.word	0x2000022c
 800515c:	20000694 	.word	0x20000694
 8005160:	20000230 	.word	0x20000230
 8005164:	20000278 	.word	0x20000278
 8005168:	20000234 	.word	0x20000234
 800516c:	200004e0 	.word	0x200004e0
 8005170:	20000238 	.word	0x20000238
 8005174:	20000258 	.word	0x20000258
 8005178:	20000254 	.word	0x20000254
 800517c:	20000248 	.word	0x20000248
 8005180:	20000260 	.word	0x20000260
 8005184:	2000025c 	.word	0x2000025c
 8005188:	9400      	str	r4, [sp, #0]
 800518a:	464b      	mov	r3, r9
 800518c:	4642      	mov	r2, r8
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	f000 fb5f 	bl	8005854 <pid>
 8005196:	4602      	mov	r2, r0
 8005198:	4b93      	ldr	r3, [pc, #588]	; (80053e8 <TIM2_IRQHandler+0x1130>)
 800519a:	601a      	str	r2, [r3, #0]
  pid_output_yaw = pid(YawINscaled, YawGyroPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 800519c:	4b93      	ldr	r3, [pc, #588]	; (80053ec <TIM2_IRQHandler+0x1134>)
 800519e:	681d      	ldr	r5, [r3, #0]
 80051a0:	4b93      	ldr	r3, [pc, #588]	; (80053f0 <TIM2_IRQHandler+0x1138>)
 80051a2:	681e      	ldr	r6, [r3, #0]
 80051a4:	4b93      	ldr	r3, [pc, #588]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80051a6:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80051aa:	4b92      	ldr	r3, [pc, #584]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80051ac:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80051b0:	4b90      	ldr	r3, [pc, #576]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80051b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80051b4:	4b8f      	ldr	r3, [pc, #572]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb fd8f 	bl	8000cdc <__aeabi_i2f>
 80051be:	4682      	mov	sl, r0
 80051c0:	4b8c      	ldr	r3, [pc, #560]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb fd89 	bl	8000cdc <__aeabi_i2f>
 80051ca:	4603      	mov	r3, r0
 80051cc:	9304      	str	r3, [sp, #16]
 80051ce:	f8cd a00c 	str.w	sl, [sp, #12]
 80051d2:	4b89      	ldr	r3, [pc, #548]	; (80053f8 <TIM2_IRQHandler+0x1140>)
 80051d4:	9302      	str	r3, [sp, #8]
 80051d6:	4b89      	ldr	r3, [pc, #548]	; (80053fc <TIM2_IRQHandler+0x1144>)
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	9400      	str	r4, [sp, #0]
 80051dc:	464b      	mov	r3, r9
 80051de:	4642      	mov	r2, r8
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fb36 	bl	8005854 <pid>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b85      	ldr	r3, [pc, #532]	; (8005400 <TIM2_IRQHandler+0x1148>)
 80051ec:	601a      	str	r2, [r3, #0]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 80051ee:	4b85      	ldr	r3, [pc, #532]	; (8005404 <TIM2_IRQHandler+0x114c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d102      	bne.n	80051fc <TIM2_IRQHandler+0xf44>
 80051f6:	4b84      	ldr	r3, [pc, #528]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 80051fc:	4b83      	ldr	r3, [pc, #524]	; (800540c <TIM2_IRQHandler+0x1154>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b83      	ldr	r3, [pc, #524]	; (8005410 <TIM2_IRQHandler+0x1158>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d00f      	beq.n	8005228 <TIM2_IRQHandler+0xf70>
 8005208:	4b81      	ldr	r3, [pc, #516]	; (8005410 <TIM2_IRQHandler+0x1158>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10b      	bne.n	8005228 <TIM2_IRQHandler+0xf70>
 8005210:	4b80      	ldr	r3, [pc, #512]	; (8005414 <TIM2_IRQHandler+0x115c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4980      	ldr	r1, [pc, #512]	; (8005418 <TIM2_IRQHandler+0x1160>)
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb ff52 	bl	80010c0 <__aeabi_fcmplt>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <TIM2_IRQHandler+0xf70>
 8005222:	4b79      	ldr	r3, [pc, #484]	; (8005408 <TIM2_IRQHandler+0x1150>)
 8005224:	2202      	movs	r2, #2
 8005226:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 8005228:	4b79      	ldr	r3, [pc, #484]	; (8005410 <TIM2_IRQHandler+0x1158>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <TIM2_IRQHandler+0xf7e>
 8005230:	4b75      	ldr	r3, [pc, #468]	; (8005408 <TIM2_IRQHandler+0x1150>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8005236:	4b79      	ldr	r3, [pc, #484]	; (800541c <TIM2_IRQHandler+0x1164>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11a      	bne.n	8005274 <TIM2_IRQHandler+0xfbc>
 800523e:	4b78      	ldr	r3, [pc, #480]	; (8005420 <TIM2_IRQHandler+0x1168>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d116      	bne.n	8005274 <TIM2_IRQHandler+0xfbc>
 8005246:	4b77      	ldr	r3, [pc, #476]	; (8005424 <TIM2_IRQHandler+0x116c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d112      	bne.n	8005274 <TIM2_IRQHandler+0xfbc>
 800524e:	4b6e      	ldr	r3, [pc, #440]	; (8005408 <TIM2_IRQHandler+0x1150>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d10e      	bne.n	8005274 <TIM2_IRQHandler+0xfbc>
  {
	  GyroCalibStatus=1;
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <TIM2_IRQHandler+0x116c>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
	  SUMGyroX=0;
 800525c:	4b72      	ldr	r3, [pc, #456]	; (8005428 <TIM2_IRQHandler+0x1170>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
	  SUMGyroY=0;
 8005262:	4b72      	ldr	r3, [pc, #456]	; (800542c <TIM2_IRQHandler+0x1174>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
	  SUMGyroZ=0;
 8005268:	4b71      	ldr	r3, [pc, #452]	; (8005430 <TIM2_IRQHandler+0x1178>)
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
	  Gyrocalibcount=0;
 800526e:	4b71      	ldr	r3, [pc, #452]	; (8005434 <TIM2_IRQHandler+0x117c>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
  }

  //Write and Erase Flash operation timeout to prevent multiple calls in sequence
  if(FlashWriteTimeoutCount>0)FlashWriteTimeoutCount--;
 8005274:	4b70      	ldr	r3, [pc, #448]	; (8005438 <TIM2_IRQHandler+0x1180>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <TIM2_IRQHandler+0xfce>
 800527c:	4b6e      	ldr	r3, [pc, #440]	; (8005438 <TIM2_IRQHandler+0x1180>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a6d      	ldr	r2, [pc, #436]	; (8005438 <TIM2_IRQHandler+0x1180>)
 8005284:	6013      	str	r3, [r2, #0]
  if(FlashEraseTimeoutCount>0)FlashEraseTimeoutCount--;
 8005286:	4b6d      	ldr	r3, [pc, #436]	; (800543c <TIM2_IRQHandler+0x1184>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <TIM2_IRQHandler+0xfe0>
 800528e:	4b6b      	ldr	r3, [pc, #428]	; (800543c <TIM2_IRQHandler+0x1184>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	4a69      	ldr	r2, [pc, #420]	; (800543c <TIM2_IRQHandler+0x1184>)
 8005296:	6013      	str	r3, [r2, #0]

  //Write active parameters in flash
  if(FlashWriteFlag && MotorStatus==MOTOROFF && FlashWriteTimeoutCount==0)
 8005298:	4b69      	ldr	r3, [pc, #420]	; (8005440 <TIM2_IRQHandler+0x1188>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <TIM2_IRQHandler+0x1018>
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d113      	bne.n	80052d0 <TIM2_IRQHandler+0x1018>
 80052a8:	4b63      	ldr	r3, [pc, #396]	; (8005438 <TIM2_IRQHandler+0x1180>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10f      	bne.n	80052d0 <TIM2_IRQHandler+0x1018>
  {
	  WriteFlashData(FLASHCONSTADDR, &FlashDataActive);
 80052b0:	4950      	ldr	r1, [pc, #320]	; (80053f4 <TIM2_IRQHandler+0x113c>)
 80052b2:	4864      	ldr	r0, [pc, #400]	; (8005444 <TIM2_IRQHandler+0x118c>)
 80052b4:	f7fd ff8a 	bl	80031cc <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);//Read back values to Flash structure
 80052b8:	4963      	ldr	r1, [pc, #396]	; (8005448 <TIM2_IRQHandler+0x1190>)
 80052ba:	4862      	ldr	r0, [pc, #392]	; (8005444 <TIM2_IRQHandler+0x118c>)
 80052bc:	f7fe f936 	bl	800352c <ReadFlashData>
	  FlashWriteFlag=0;//reset
 80052c0:	4b5f      	ldr	r3, [pc, #380]	; (8005440 <TIM2_IRQHandler+0x1188>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
	  watch1++;
 80052c6:	4b61      	ldr	r3, [pc, #388]	; (800544c <TIM2_IRQHandler+0x1194>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a5f      	ldr	r2, [pc, #380]	; (800544c <TIM2_IRQHandler+0x1194>)
 80052ce:	6013      	str	r3, [r2, #0]
  }

  //Erase Flash Data
  if(FlashEraseFlag && MotorStatus==MOTOROFF && FlashEraseTimeoutCount==0)
 80052d0:	4b5f      	ldr	r3, [pc, #380]	; (8005450 <TIM2_IRQHandler+0x1198>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <TIM2_IRQHandler+0x1046>
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10e      	bne.n	80052fe <TIM2_IRQHandler+0x1046>
 80052e0:	4b56      	ldr	r3, [pc, #344]	; (800543c <TIM2_IRQHandler+0x1184>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <TIM2_IRQHandler+0x1046>
  {
	  EraseFlashData(FLASHCONSTADDR);
 80052e8:	4856      	ldr	r0, [pc, #344]	; (8005444 <TIM2_IRQHandler+0x118c>)
 80052ea:	f7fe f8f9 	bl	80034e0 <EraseFlashData>
	  FlashEraseFlag=0;//reset
 80052ee:	4b58      	ldr	r3, [pc, #352]	; (8005450 <TIM2_IRQHandler+0x1198>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
	  watch2++;
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <TIM2_IRQHandler+0x119c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	4a56      	ldr	r2, [pc, #344]	; (8005454 <TIM2_IRQHandler+0x119c>)
 80052fc:	6013      	str	r3, [r2, #0]
  }

  if(GyroCalibStatus==1)
 80052fe:	4b49      	ldr	r3, [pc, #292]	; (8005424 <TIM2_IRQHandler+0x116c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d152      	bne.n	80053ac <TIM2_IRQHandler+0x10f4>
  {
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8005306:	4b54      	ldr	r3, [pc, #336]	; (8005458 <TIM2_IRQHandler+0x11a0>)
 8005308:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800530c:	461a      	mov	r2, r3
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <TIM2_IRQHandler+0x1170>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4413      	add	r3, r2
 8005314:	4a44      	ldr	r2, [pc, #272]	; (8005428 <TIM2_IRQHandler+0x1170>)
 8005316:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 8005318:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <TIM2_IRQHandler+0x11a0>)
 800531a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800531e:	461a      	mov	r2, r3
 8005320:	4b42      	ldr	r3, [pc, #264]	; (800542c <TIM2_IRQHandler+0x1174>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4413      	add	r3, r2
 8005326:	4a41      	ldr	r2, [pc, #260]	; (800542c <TIM2_IRQHandler+0x1174>)
 8005328:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 800532a:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <TIM2_IRQHandler+0x11a0>)
 800532c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005330:	461a      	mov	r2, r3
 8005332:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <TIM2_IRQHandler+0x1178>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a3d      	ldr	r2, [pc, #244]	; (8005430 <TIM2_IRQHandler+0x1178>)
 800533a:	6013      	str	r3, [r2, #0]
	  Gyrocalibcount++;
 800533c:	4b3d      	ldr	r3, [pc, #244]	; (8005434 <TIM2_IRQHandler+0x117c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <TIM2_IRQHandler+0x117c>)
 8005344:	6013      	str	r3, [r2, #0]

	  if(Gyrocalibcount==GYROCALIBVALUES)
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <TIM2_IRQHandler+0x117c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800534e:	d12d      	bne.n	80053ac <TIM2_IRQHandler+0x10f4>
	  {

		  GyroXOff=SUMGyroX/GYROCALIBVALUES;
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <TIM2_IRQHandler+0x1170>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a41      	ldr	r2, [pc, #260]	; (800545c <TIM2_IRQHandler+0x11a4>)
 8005356:	fb82 1203 	smull	r1, r2, r2, r3
 800535a:	1192      	asrs	r2, r2, #6
 800535c:	17db      	asrs	r3, r3, #31
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	b21a      	sxth	r2, r3
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <TIM2_IRQHandler+0x11a8>)
 8005364:	801a      	strh	r2, [r3, #0]
		  GyroYOff=SUMGyroY/GYROCALIBVALUES;
 8005366:	4b31      	ldr	r3, [pc, #196]	; (800542c <TIM2_IRQHandler+0x1174>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a3c      	ldr	r2, [pc, #240]	; (800545c <TIM2_IRQHandler+0x11a4>)
 800536c:	fb82 1203 	smull	r1, r2, r2, r3
 8005370:	1192      	asrs	r2, r2, #6
 8005372:	17db      	asrs	r3, r3, #31
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	b21a      	sxth	r2, r3
 8005378:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <TIM2_IRQHandler+0x11ac>)
 800537a:	801a      	strh	r2, [r3, #0]
		  GyroZOff=SUMGyroZ/GYROCALIBVALUES;
 800537c:	4b2c      	ldr	r3, [pc, #176]	; (8005430 <TIM2_IRQHandler+0x1178>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a36      	ldr	r2, [pc, #216]	; (800545c <TIM2_IRQHandler+0x11a4>)
 8005382:	fb82 1203 	smull	r1, r2, r2, r3
 8005386:	1192      	asrs	r2, r2, #6
 8005388:	17db      	asrs	r3, r3, #31
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b21a      	sxth	r2, r3
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <TIM2_IRQHandler+0x11b0>)
 8005390:	801a      	strh	r2, [r3, #0]

		  //startup angles Accel to Gyro transfer
		  AnglePitchGyro=AnglePitchAccel;
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <TIM2_IRQHandler+0x11b4>)
 8005394:	cb18      	ldmia	r3, {r3, r4}
 8005396:	4a36      	ldr	r2, [pc, #216]	; (8005470 <TIM2_IRQHandler+0x11b8>)
 8005398:	e9c2 3400 	strd	r3, r4, [r2]
		  AngleRollGyro=AngleRollAccel;
 800539c:	4b35      	ldr	r3, [pc, #212]	; (8005474 <TIM2_IRQHandler+0x11bc>)
 800539e:	cb18      	ldmia	r3, {r3, r4}
 80053a0:	4a35      	ldr	r2, [pc, #212]	; (8005478 <TIM2_IRQHandler+0x11c0>)
 80053a2:	e9c2 3400 	strd	r3, r4, [r2]

		  GyroCalibStatus=0;
 80053a6:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <TIM2_IRQHandler+0x116c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
	  }
  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 80053ac:	4b16      	ldr	r3, [pc, #88]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d110      	bne.n	80053d6 <TIM2_IRQHandler+0x111e>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <TIM2_IRQHandler+0x11b4>)
 80053b6:	cb18      	ldmia	r3, {r3, r4}
 80053b8:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <TIM2_IRQHandler+0x11b8>)
 80053ba:	e9c2 3400 	strd	r3, r4, [r2]
	  AngleRollGyro=AngleRollAccel;
 80053be:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <TIM2_IRQHandler+0x11bc>)
 80053c0:	cb18      	ldmia	r3, {r3, r4}
 80053c2:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <TIM2_IRQHandler+0x11c0>)
 80053c4:	e9c2 3400 	strd	r3, r4, [r2]

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <TIM2_IRQHandler+0x116c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <TIM2_IRQHandler+0x111e>
	  MotorStatus=MOTORRUNNING;
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80053d2:	2203      	movs	r2, #3
 80053d4:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <TIM2_IRQHandler+0x1150>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	f040 81a3 	bne.w	8005726 <TIM2_IRQHandler+0x146e>
  {
  	  case MOTORRUNNING:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - pid_output_pitch - pid_output_roll + pid_output_yaw;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <TIM2_IRQHandler+0x115c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	e04a      	b.n	800547c <TIM2_IRQHandler+0x11c4>
 80053e6:	bf00      	nop
 80053e8:	2000024c 	.word	0x2000024c
 80053ec:	20000238 	.word	0x20000238
 80053f0:	20000244 	.word	0x20000244
 80053f4:	20000598 	.word	0x20000598
 80053f8:	20000268 	.word	0x20000268
 80053fc:	20000264 	.word	0x20000264
 8005400:	20000250 	.word	0x20000250
 8005404:	200008d0 	.word	0x200008d0
 8005408:	2000020c 	.word	0x2000020c
 800540c:	20000978 	.word	0x20000978
 8005410:	20000538 	.word	0x20000538
 8005414:	2000022c 	.word	0x2000022c
 8005418:	43480000 	.word	0x43480000
 800541c:	200008c4 	.word	0x200008c4
 8005420:	200006a0 	.word	0x200006a0
 8005424:	20000210 	.word	0x20000210
 8005428:	200006a4 	.word	0x200006a4
 800542c:	2000053c 	.word	0x2000053c
 8005430:	2000048c 	.word	0x2000048c
 8005434:	20000228 	.word	0x20000228
 8005438:	20000970 	.word	0x20000970
 800543c:	200006d4 	.word	0x200006d4
 8005440:	20000958 	.word	0x20000958
 8005444:	0800fc00 	.word	0x0800fc00
 8005448:	20000640 	.word	0x20000640
 800544c:	2000041c 	.word	0x2000041c
 8005450:	200006cc 	.word	0x200006cc
 8005454:	2000040c 	.word	0x2000040c
 8005458:	20000634 	.word	0x20000634
 800545c:	10624dd3 	.word	0x10624dd3
 8005460:	20000360 	.word	0x20000360
 8005464:	20000488 	.word	0x20000488
 8005468:	2000028a 	.word	0x2000028a
 800546c:	200008b8 	.word	0x200008b8
 8005470:	200008a8 	.word	0x200008a8
 8005474:	200007c0 	.word	0x200007c0
 8005478:	200006c0 	.word	0x200006c0
 800547c:	499b      	ldr	r1, [pc, #620]	; (80056ec <TIM2_IRQHandler+0x1434>)
 800547e:	4618      	mov	r0, r3
 8005480:	f7fb fb78 	bl	8000b74 <__addsf3>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	4b99      	ldr	r3, [pc, #612]	; (80056f0 <TIM2_IRQHandler+0x1438>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fb fb6e 	bl	8000b70 <__aeabi_fsub>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	4b96      	ldr	r3, [pc, #600]	; (80056f4 <TIM2_IRQHandler+0x143c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fb fb66 	bl	8000b70 <__aeabi_fsub>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <TIM2_IRQHandler+0x1440>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fb fb60 	bl	8000b74 <__addsf3>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb fe2a 	bl	8001110 <__aeabi_f2uiz>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <TIM2_IRQHandler+0x1444>)
 80054c0:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - pid_output_pitch + pid_output_roll - pid_output_yaw;
 80054c2:	4b8f      	ldr	r3, [pc, #572]	; (8005700 <TIM2_IRQHandler+0x1448>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4989      	ldr	r1, [pc, #548]	; (80056ec <TIM2_IRQHandler+0x1434>)
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fb53 	bl	8000b74 <__addsf3>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b87      	ldr	r3, [pc, #540]	; (80056f0 <TIM2_IRQHandler+0x1438>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fb fb49 	bl	8000b70 <__aeabi_fsub>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b84      	ldr	r3, [pc, #528]	; (80056f4 <TIM2_IRQHandler+0x143c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fb fb43 	bl	8000b74 <__addsf3>
 80054ee:	4603      	mov	r3, r0
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <TIM2_IRQHandler+0x1440>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fb fb39 	bl	8000b70 <__aeabi_fsub>
 80054fe:	4603      	mov	r3, r0
 8005500:	4618      	mov	r0, r3
 8005502:	f7fb fe05 	bl	8001110 <__aeabi_f2uiz>
 8005506:	4602      	mov	r2, r0
 8005508:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <TIM2_IRQHandler+0x144c>)
 800550a:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + pid_output_pitch + pid_output_roll + pid_output_yaw;
 800550c:	4b7c      	ldr	r3, [pc, #496]	; (8005700 <TIM2_IRQHandler+0x1448>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4976      	ldr	r1, [pc, #472]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb fb2e 	bl	8000b74 <__addsf3>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	4b74      	ldr	r3, [pc, #464]	; (80056f0 <TIM2_IRQHandler+0x1438>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7fb fb26 	bl	8000b74 <__addsf3>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	4b71      	ldr	r3, [pc, #452]	; (80056f4 <TIM2_IRQHandler+0x143c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fb fb1e 	bl	8000b74 <__addsf3>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	4b6e      	ldr	r3, [pc, #440]	; (80056f8 <TIM2_IRQHandler+0x1440>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7fb fb16 	bl	8000b74 <__addsf3>
 8005548:	4603      	mov	r3, r0
 800554a:	4618      	mov	r0, r3
 800554c:	f7fb fde0 	bl	8001110 <__aeabi_f2uiz>
 8005550:	4602      	mov	r2, r0
 8005552:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <TIM2_IRQHandler+0x1450>)
 8005554:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + pid_output_pitch - pid_output_roll - pid_output_yaw;
 8005556:	4b6a      	ldr	r3, [pc, #424]	; (8005700 <TIM2_IRQHandler+0x1448>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4964      	ldr	r1, [pc, #400]	; (80056ec <TIM2_IRQHandler+0x1434>)
 800555c:	4618      	mov	r0, r3
 800555e:	f7fb fb09 	bl	8000b74 <__addsf3>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	4b62      	ldr	r3, [pc, #392]	; (80056f0 <TIM2_IRQHandler+0x1438>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fb fb01 	bl	8000b74 <__addsf3>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
 8005576:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <TIM2_IRQHandler+0x143c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fb faf7 	bl	8000b70 <__aeabi_fsub>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	4b5c      	ldr	r3, [pc, #368]	; (80056f8 <TIM2_IRQHandler+0x1440>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fb faef 	bl	8000b70 <__aeabi_fsub>
 8005592:	4603      	mov	r3, r0
 8005594:	4618      	mov	r0, r3
 8005596:	f7fb fdbb 	bl	8001110 <__aeabi_f2uiz>
 800559a:	4602      	mov	r2, r0
 800559c:	4b5b      	ldr	r3, [pc, #364]	; (800570c <TIM2_IRQHandler+0x1454>)
 800559e:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ FlashDataActive.minthrottle))PWM_Mot1=(1000+ FlashDataActive.minthrottle);
 80055a0:	4b56      	ldr	r3, [pc, #344]	; (80056fc <TIM2_IRQHandler+0x1444>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fb fb95 	bl	8000cd4 <__aeabi_ui2f>
 80055aa:	4604      	mov	r4, r0
 80055ac:	4b58      	ldr	r3, [pc, #352]	; (8005710 <TIM2_IRQHandler+0x1458>)
 80055ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b0:	494e      	ldr	r1, [pc, #312]	; (80056ec <TIM2_IRQHandler+0x1434>)
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fade 	bl	8000b74 <__addsf3>
 80055b8:	4603      	mov	r3, r0
 80055ba:	4619      	mov	r1, r3
 80055bc:	4620      	mov	r0, r4
 80055be:	f7fb fd7f 	bl	80010c0 <__aeabi_fcmplt>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <TIM2_IRQHandler+0x132a>
 80055c8:	4b51      	ldr	r3, [pc, #324]	; (8005710 <TIM2_IRQHandler+0x1458>)
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	4947      	ldr	r1, [pc, #284]	; (80056ec <TIM2_IRQHandler+0x1434>)
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fb fad0 	bl	8000b74 <__addsf3>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fb fd9a 	bl	8001110 <__aeabi_f2uiz>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <TIM2_IRQHandler+0x1444>)
 80055e0:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ FlashDataActive.minthrottle))PWM_Mot2=(1000+ FlashDataActive.minthrottle);
 80055e2:	4b48      	ldr	r3, [pc, #288]	; (8005704 <TIM2_IRQHandler+0x144c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fb fb74 	bl	8000cd4 <__aeabi_ui2f>
 80055ec:	4604      	mov	r4, r0
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <TIM2_IRQHandler+0x1458>)
 80055f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f2:	493e      	ldr	r1, [pc, #248]	; (80056ec <TIM2_IRQHandler+0x1434>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fabd 	bl	8000b74 <__addsf3>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4619      	mov	r1, r3
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb fd5e 	bl	80010c0 <__aeabi_fcmplt>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <TIM2_IRQHandler+0x136c>
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <TIM2_IRQHandler+0x1458>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	4937      	ldr	r1, [pc, #220]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005610:	4618      	mov	r0, r3
 8005612:	f7fb faaf 	bl	8000b74 <__addsf3>
 8005616:	4603      	mov	r3, r0
 8005618:	4618      	mov	r0, r3
 800561a:	f7fb fd79 	bl	8001110 <__aeabi_f2uiz>
 800561e:	4602      	mov	r2, r0
 8005620:	4b38      	ldr	r3, [pc, #224]	; (8005704 <TIM2_IRQHandler+0x144c>)
 8005622:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ FlashDataActive.minthrottle))PWM_Mot3=(1000+ FlashDataActive.minthrottle);
 8005624:	4b38      	ldr	r3, [pc, #224]	; (8005708 <TIM2_IRQHandler+0x1450>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7fb fb53 	bl	8000cd4 <__aeabi_ui2f>
 800562e:	4604      	mov	r4, r0
 8005630:	4b37      	ldr	r3, [pc, #220]	; (8005710 <TIM2_IRQHandler+0x1458>)
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	492d      	ldr	r1, [pc, #180]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005636:	4618      	mov	r0, r3
 8005638:	f7fb fa9c 	bl	8000b74 <__addsf3>
 800563c:	4603      	mov	r3, r0
 800563e:	4619      	mov	r1, r3
 8005640:	4620      	mov	r0, r4
 8005642:	f7fb fd3d 	bl	80010c0 <__aeabi_fcmplt>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <TIM2_IRQHandler+0x13ae>
 800564c:	4b30      	ldr	r3, [pc, #192]	; (8005710 <TIM2_IRQHandler+0x1458>)
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	4926      	ldr	r1, [pc, #152]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005652:	4618      	mov	r0, r3
 8005654:	f7fb fa8e 	bl	8000b74 <__addsf3>
 8005658:	4603      	mov	r3, r0
 800565a:	4618      	mov	r0, r3
 800565c:	f7fb fd58 	bl	8001110 <__aeabi_f2uiz>
 8005660:	4602      	mov	r2, r0
 8005662:	4b29      	ldr	r3, [pc, #164]	; (8005708 <TIM2_IRQHandler+0x1450>)
 8005664:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ FlashDataActive.minthrottle))PWM_Mot4=(1000+ FlashDataActive.minthrottle);
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <TIM2_IRQHandler+0x1454>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fb fb32 	bl	8000cd4 <__aeabi_ui2f>
 8005670:	4604      	mov	r4, r0
 8005672:	4b27      	ldr	r3, [pc, #156]	; (8005710 <TIM2_IRQHandler+0x1458>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	491d      	ldr	r1, [pc, #116]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fa7b 	bl	8000b74 <__addsf3>
 800567e:	4603      	mov	r3, r0
 8005680:	4619      	mov	r1, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f7fb fd1c 	bl	80010c0 <__aeabi_fcmplt>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <TIM2_IRQHandler+0x13f0>
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <TIM2_IRQHandler+0x1458>)
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	4916      	ldr	r1, [pc, #88]	; (80056ec <TIM2_IRQHandler+0x1434>)
 8005694:	4618      	mov	r0, r3
 8005696:	f7fb fa6d 	bl	8000b74 <__addsf3>
 800569a:	4603      	mov	r3, r0
 800569c:	4618      	mov	r0, r3
 800569e:	f7fb fd37 	bl	8001110 <__aeabi_f2uiz>
 80056a2:	4602      	mov	r2, r0
 80056a4:	4b19      	ldr	r3, [pc, #100]	; (800570c <TIM2_IRQHandler+0x1454>)
 80056a6:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <TIM2_IRQHandler+0x1444>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f240 729e 	movw	r2, #1950	; 0x79e
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d903      	bls.n	80056bc <TIM2_IRQHandler+0x1404>
 80056b4:	4b11      	ldr	r3, [pc, #68]	; (80056fc <TIM2_IRQHandler+0x1444>)
 80056b6:	f240 729e 	movw	r2, #1950	; 0x79e
 80056ba:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 80056bc:	4b11      	ldr	r3, [pc, #68]	; (8005704 <TIM2_IRQHandler+0x144c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f240 729e 	movw	r2, #1950	; 0x79e
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d903      	bls.n	80056d0 <TIM2_IRQHandler+0x1418>
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <TIM2_IRQHandler+0x144c>)
 80056ca:	f240 729e 	movw	r2, #1950	; 0x79e
 80056ce:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <TIM2_IRQHandler+0x1450>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f240 729e 	movw	r2, #1950	; 0x79e
 80056d8:	4293      	cmp	r3, r2
 80056da:	d903      	bls.n	80056e4 <TIM2_IRQHandler+0x142c>
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <TIM2_IRQHandler+0x1450>)
 80056de:	f240 729e 	movw	r2, #1950	; 0x79e
 80056e2:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <TIM2_IRQHandler+0x1454>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	e014      	b.n	8005714 <TIM2_IRQHandler+0x145c>
 80056ea:	bf00      	nop
 80056ec:	447a0000 	.word	0x447a0000
 80056f0:	20000248 	.word	0x20000248
 80056f4:	2000024c 	.word	0x2000024c
 80056f8:	20000250 	.word	0x20000250
 80056fc:	200008cc 	.word	0x200008cc
 8005700:	2000022c 	.word	0x2000022c
 8005704:	200006d0 	.word	0x200006d0
 8005708:	200006c8 	.word	0x200006c8
 800570c:	20000898 	.word	0x20000898
 8005710:	20000598 	.word	0x20000598
 8005714:	f240 729e 	movw	r2, #1950	; 0x79e
 8005718:	4293      	cmp	r3, r2
 800571a:	d92d      	bls.n	8005778 <TIM2_IRQHandler+0x14c0>
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <TIM2_IRQHandler+0x1500>)
 800571e:	f240 729e 	movw	r2, #1950	; 0x79e
 8005722:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 8005724:	e028      	b.n	8005778 <TIM2_IRQHandler+0x14c0>

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 8005726:	4b25      	ldr	r3, [pc, #148]	; (80057bc <TIM2_IRQHandler+0x1504>)
 8005728:	f44f 7261 	mov.w	r2, #900	; 0x384
 800572c:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <TIM2_IRQHandler+0x1508>)
 8005730:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005734:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 8005736:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <TIM2_IRQHandler+0x150c>)
 8005738:	f44f 7261 	mov.w	r2, #900	; 0x384
 800573c:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <TIM2_IRQHandler+0x1500>)
 8005740:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005744:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <TIM2_IRQHandler+0x1510>)
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <TIM2_IRQHandler+0x1514>)
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 8005756:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <TIM2_IRQHandler+0x1518>)
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <TIM2_IRQHandler+0x151c>)
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 8005766:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <TIM2_IRQHandler+0x1520>)
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 800576e:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <TIM2_IRQHandler+0x1524>)
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 8005776:	e000      	b.n	800577a <TIM2_IRQHandler+0x14c2>
  	  	  	  }break;
 8005778:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <TIM2_IRQHandler+0x1528>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <TIM2_IRQHandler+0x1504>)
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <TIM2_IRQHandler+0x1528>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <TIM2_IRQHandler+0x1508>)
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <TIM2_IRQHandler+0x1528>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0c      	ldr	r2, [pc, #48]	; (80057c4 <TIM2_IRQHandler+0x150c>)
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8005798:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <TIM2_IRQHandler+0x1528>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <TIM2_IRQHandler+0x1500>)
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 80057a2:	2200      	movs	r2, #0
 80057a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057a8:	480e      	ldr	r0, [pc, #56]	; (80057e4 <TIM2_IRQHandler+0x152c>)
 80057aa:	f001 faeb 	bl	8006d84 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	bf00      	nop
 80057b8:	20000898 	.word	0x20000898
 80057bc:	200008cc 	.word	0x200008cc
 80057c0:	200006d0 	.word	0x200006d0
 80057c4:	200006c8 	.word	0x200006c8
 80057c8:	20000254 	.word	0x20000254
 80057cc:	20000258 	.word	0x20000258
 80057d0:	2000025c 	.word	0x2000025c
 80057d4:	20000260 	.word	0x20000260
 80057d8:	20000264 	.word	0x20000264
 80057dc:	20000268 	.word	0x20000268
 80057e0:	20000540 	.word	0x20000540
 80057e4:	40010c00 	.word	0x40010c00

080057e8 <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fa:	f7fb f9b9 	bl	8000b70 <__aeabi_fsub>
 80057fe:	4603      	mov	r3, r0
 8005800:	461c      	mov	r4, r3
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7fb f9b3 	bl	8000b70 <__aeabi_fsub>
 800580a:	4603      	mov	r3, r0
 800580c:	4619      	mov	r1, r3
 800580e:	4620      	mov	r0, r4
 8005810:	f7fb fb6c 	bl	8000eec <__aeabi_fdiv>
 8005814:	4603      	mov	r3, r0
 8005816:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7fb f9a8 	bl	8000b70 <__aeabi_fsub>
 8005820:	4603      	mov	r3, r0
 8005822:	6939      	ldr	r1, [r7, #16]
 8005824:	4618      	mov	r0, r3
 8005826:	f7fb faad 	bl	8000d84 <__aeabi_fmul>
 800582a:	4603      	mov	r3, r0
 800582c:	4619      	mov	r1, r3
 800582e:	6838      	ldr	r0, [r7, #0]
 8005830:	f7fb f9a0 	bl	8000b74 <__addsf3>
 8005834:	4603      	mov	r3, r0
 8005836:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f7fb fc40 	bl	80010c0 <__aeabi_fcmplt>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <ScaleDataFl+0x62>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	617b      	str	r3, [r7, #20]

	return out;
 800584a:	697b      	ldr	r3, [r7, #20]

}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd90      	pop	{r4, r7, pc}

08005854 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	68b8      	ldr	r0, [r7, #8]
 8005866:	f7fb f983 	bl	8000b70 <__aeabi_fsub>
 800586a:	4603      	mov	r3, r0
 800586c:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	6939      	ldr	r1, [r7, #16]
 8005874:	6838      	ldr	r0, [r7, #0]
 8005876:	f7fb fa85 	bl	8000d84 <__aeabi_fmul>
 800587a:	4603      	mov	r3, r0
 800587c:	4619      	mov	r1, r3
 800587e:	4620      	mov	r0, r4
 8005880:	f7fb f978 	bl	8000b74 <__addsf3>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005894:	f7fb fc14 	bl	80010c0 <__aeabi_fcmplt>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <pid+0x52>
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e010      	b.n	80058c8 <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fb fc04 	bl	80010c0 <__aeabi_fcmplt>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <pid+0x74>
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 80058c8:	6939      	ldr	r1, [r7, #16]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb fa5a 	bl	8000d84 <__aeabi_fmul>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fb f94a 	bl	8000b74 <__addsf3>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461c      	mov	r4, r3
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6938      	ldr	r0, [r7, #16]
 80058ec:	f7fb f940 	bl	8000b70 <__aeabi_fsub>
 80058f0:	4603      	mov	r3, r0
 80058f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fb fa45 	bl	8000d84 <__aeabi_fmul>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4619      	mov	r1, r3
 80058fe:	4620      	mov	r0, r4
 8005900:	f7fb f938 	bl	8000b74 <__addsf3>
 8005904:	4603      	mov	r3, r0
 8005906:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 8005908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800590a:	6978      	ldr	r0, [r7, #20]
 800590c:	f7fb fbf6 	bl	80010fc <__aeabi_fcmpgt>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <pid+0xc8>
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e00d      	b.n	8005938 <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005922:	4619      	mov	r1, r3
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f7fb fbcb 	bl	80010c0 <__aeabi_fcmplt>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <pid+0xe4>
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005936:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	601a      	str	r2, [r3, #0]


	return out;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}

08005948 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <_sbrk+0x50>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <_sbrk+0x16>
		heap_end = &end;
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <_sbrk+0x50>)
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <_sbrk+0x54>)
 800595c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <_sbrk+0x50>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <_sbrk+0x50>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	466a      	mov	r2, sp
 800596e:	4293      	cmp	r3, r2
 8005970:	d907      	bls.n	8005982 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005972:	f003 ff8d 	bl	8009890 <__errno>
 8005976:	4602      	mov	r2, r0
 8005978:	230c      	movs	r3, #12
 800597a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005980:	e006      	b.n	8005990 <_sbrk+0x48>
	}

	heap_end += incr;
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <_sbrk+0x50>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	4a03      	ldr	r2, [pc, #12]	; (8005998 <_sbrk+0x50>)
 800598c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000026c 	.word	0x2000026c
 800599c:	200009a8 	.word	0x200009a8

080059a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80059a4:	4b15      	ldr	r3, [pc, #84]	; (80059fc <SystemInit+0x5c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a14      	ldr	r2, [pc, #80]	; (80059fc <SystemInit+0x5c>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <SystemInit+0x5c>)
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4911      	ldr	r1, [pc, #68]	; (80059fc <SystemInit+0x5c>)
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <SystemInit+0x60>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <SystemInit+0x5c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <SystemInit+0x5c>)
 80059c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <SystemInit+0x5c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <SystemInit+0x5c>)
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <SystemInit+0x5c>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a07      	ldr	r2, [pc, #28]	; (80059fc <SystemInit+0x5c>)
 80059de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80059e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <SystemInit+0x5c>)
 80059e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80059ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <SystemInit+0x64>)
 80059ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	40021000 	.word	0x40021000
 8005a00:	f8ff0000 	.word	0xf8ff0000
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a0a:	e003      	b.n	8005a14 <LoopCopyDataInit>

08005a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a12:	3104      	adds	r1, #4

08005a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a14:	480a      	ldr	r0, [pc, #40]	; (8005a40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005a1c:	d3f6      	bcc.n	8005a0c <CopyDataInit>
  ldr r2, =_sbss
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005a20:	e002      	b.n	8005a28 <LoopFillZerobss>

08005a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005a24:	f842 3b04 	str.w	r3, [r2], #4

08005a28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005a28:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005a2c:	d3f9      	bcc.n	8005a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005a2e:	f7ff ffb7 	bl	80059a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a32:	f003 ff33 	bl	800989c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a36:	f7fc fbdf 	bl	80021f8 <main>
  bx lr
 8005a3a:	4770      	bx	lr
  ldr r3, =_sidata
 8005a3c:	0800ce10 	.word	0x0800ce10
  ldr r0, =_sdata
 8005a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005a44:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8005a48:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8005a4c:	200009a4 	.word	0x200009a4

08005a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a50:	e7fe      	b.n	8005a50 <ADC1_2_IRQHandler>
	...

08005a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_Init+0x28>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <HAL_Init+0x28>)
 8005a5e:	f043 0310 	orr.w	r3, r3, #16
 8005a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a64:	2003      	movs	r0, #3
 8005a66:	f000 fdf1 	bl	800664c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a6a:	2002      	movs	r0, #2
 8005a6c:	f000 f808 	bl	8005a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a70:	f7fe fa38 	bl	8003ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40022000 	.word	0x40022000

08005a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a88:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_InitTick+0x54>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_InitTick+0x58>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4619      	mov	r1, r3
 8005a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe09 	bl	80066b6 <HAL_SYSTICK_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00e      	b.n	8005acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b0f      	cmp	r3, #15
 8005ab2:	d80a      	bhi.n	8005aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005abc:	f000 fdd1 	bl	8006662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ac0:	4a06      	ldr	r2, [pc, #24]	; (8005adc <HAL_InitTick+0x5c>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000008 	.word	0x20000008
 8005ad8:	20000010 	.word	0x20000010
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_IncTick+0x1c>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_IncTick+0x20>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4413      	add	r3, r2
 8005af0:	4a03      	ldr	r2, [pc, #12]	; (8005b00 <HAL_IncTick+0x20>)
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	20000010 	.word	0x20000010
 8005b00:	2000097c 	.word	0x2000097c

08005b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return uwTick;
 8005b08:	4b02      	ldr	r3, [pc, #8]	; (8005b14 <HAL_GetTick+0x10>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	2000097c 	.word	0x2000097c

08005b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b20:	f7ff fff0 	bl	8005b04 <HAL_GetTick>
 8005b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b30:	d005      	beq.n	8005b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_Delay+0x40>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b3e:	bf00      	nop
 8005b40:	f7ff ffe0 	bl	8005b04 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d8f7      	bhi.n	8005b40 <HAL_Delay+0x28>
  {
  }
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000010 	.word	0x20000010

08005b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e0be      	b.n	8005cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fe f9d4 	bl	8003f48 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fbb1 	bl	8006308 <ADC_ConversionStop_Disable>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f040 8099 	bne.w	8005cea <HAL_ADC_Init+0x18e>
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8095 	bne.w	8005cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	f043 0202 	orr.w	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7b1b      	ldrb	r3, [r3, #12]
 8005be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	d003      	beq.n	8005bfe <HAL_ADC_Init+0xa2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d102      	bne.n	8005c04 <HAL_ADC_Init+0xa8>
 8005bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c02:	e000      	b.n	8005c06 <HAL_ADC_Init+0xaa>
 8005c04:	2300      	movs	r3, #0
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	7d1b      	ldrb	r3, [r3, #20]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d119      	bne.n	8005c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	035a      	lsls	r2, r3, #13
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e00b      	b.n	8005c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_ADC_Init+0x1a8>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c78:	d003      	beq.n	8005c82 <HAL_ADC_Init+0x126>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d104      	bne.n	8005c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	051b      	lsls	r3, r3, #20
 8005c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_ADC_Init+0x1ac>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d10b      	bne.n	8005cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005cc6:	e018      	b.n	8005cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f023 0312 	bic.w	r3, r3, #18
 8005cd0:	f043 0210 	orr.w	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005ce8:	e007      	b.n	8005cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	f043 0210 	orr.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	ffe1f7fd 	.word	0xffe1f7fd
 8005d08:	ff1f0efe 	.word	0xff1f0efe

08005d0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_ADC_Start+0x1a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e098      	b.n	8005e58 <HAL_ADC_Start+0x14c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa98 	bl	8006264 <ADC_Enable>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8087 	bne.w	8005e4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a41      	ldr	r2, [pc, #260]	; (8005e60 <HAL_ADC_Start+0x154>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d105      	bne.n	8005d6a <HAL_ADC_Start+0x5e>
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_ADC_Start+0x158>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d115      	bne.n	8005d96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d026      	beq.n	8005dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d94:	e01d      	b.n	8005dd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <HAL_ADC_Start+0x158>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_ADC_Start+0xaa>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <HAL_ADC_Start+0x154>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10d      	bne.n	8005dd2 <HAL_ADC_Start+0xc6>
 8005db6:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_ADC_Start+0x158>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	f023 0206 	bic.w	r2, r3, #6
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005dea:	e002      	b.n	8005df2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0202 	mvn.w	r2, #2
 8005e02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005e0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005e12:	d113      	bne.n	8005e3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e18:	4a11      	ldr	r2, [pc, #68]	; (8005e60 <HAL_ADC_Start+0x154>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d105      	bne.n	8005e2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <HAL_ADC_Start+0x158>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	e00c      	b.n	8005e56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	e003      	b.n	8005e56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40012800 	.word	0x40012800
 8005e64:	40012400 	.word	0x40012400

08005e68 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005e7e:	f7ff fe41 	bl	8005b04 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0c8      	b.n	800603c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d12a      	bne.n	8005f0e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d123      	bne.n	8005f0e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005ec6:	e01a      	b.n	8005efe <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ece:	d016      	beq.n	8005efe <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_ADC_PollForConversion+0x7e>
 8005ed6:	f7ff fe15 	bl	8005b04 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d20b      	bcs.n	8005efe <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e09e      	b.n	800603c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0dd      	beq.n	8005ec8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f0c:	e06c      	b.n	8005fe8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005f0e:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <HAL_ADC_PollForConversion+0x1dc>)
 8005f10:	681c      	ldr	r4, [r3, #0]
 8005f12:	2002      	movs	r0, #2
 8005f14:	f002 fbc6 	bl	80086a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6919      	ldr	r1, [r3, #16]
 8005f24:	4b48      	ldr	r3, [pc, #288]	; (8006048 <HAL_ADC_PollForConversion+0x1e0>)
 8005f26:	400b      	ands	r3, r1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d118      	bne.n	8005f5e <HAL_ADC_PollForConversion+0xf6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68d9      	ldr	r1, [r3, #12]
 8005f32:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_ADC_PollForConversion+0x1e4>)
 8005f34:	400b      	ands	r3, r1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d111      	bne.n	8005f5e <HAL_ADC_PollForConversion+0xf6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6919      	ldr	r1, [r3, #16]
 8005f40:	4b43      	ldr	r3, [pc, #268]	; (8006050 <HAL_ADC_PollForConversion+0x1e8>)
 8005f42:	400b      	ands	r3, r1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <HAL_ADC_PollForConversion+0xf2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68d9      	ldr	r1, [r3, #12]
 8005f4e:	4b41      	ldr	r3, [pc, #260]	; (8006054 <HAL_ADC_PollForConversion+0x1ec>)
 8005f50:	400b      	ands	r3, r1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_ADC_PollForConversion+0xf2>
 8005f56:	2314      	movs	r3, #20
 8005f58:	e020      	b.n	8005f9c <HAL_ADC_PollForConversion+0x134>
 8005f5a:	2329      	movs	r3, #41	; 0x29
 8005f5c:	e01e      	b.n	8005f9c <HAL_ADC_PollForConversion+0x134>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6919      	ldr	r1, [r3, #16]
 8005f64:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <HAL_ADC_PollForConversion+0x1e8>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <HAL_ADC_PollForConversion+0x112>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68d9      	ldr	r1, [r3, #12]
 8005f72:	4b38      	ldr	r3, [pc, #224]	; (8006054 <HAL_ADC_PollForConversion+0x1ec>)
 8005f74:	400b      	ands	r3, r1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <HAL_ADC_PollForConversion+0x12e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6919      	ldr	r1, [r3, #16]
 8005f80:	4b35      	ldr	r3, [pc, #212]	; (8006058 <HAL_ADC_PollForConversion+0x1f0>)
 8005f82:	400b      	ands	r3, r1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d108      	bne.n	8005f9a <HAL_ADC_PollForConversion+0x132>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68d9      	ldr	r1, [r3, #12]
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <HAL_ADC_PollForConversion+0x1f0>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_ADC_PollForConversion+0x132>
 8005f96:	2354      	movs	r3, #84	; 0x54
 8005f98:	e000      	b.n	8005f9c <HAL_ADC_PollForConversion+0x134>
 8005f9a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005fa2:	e01d      	b.n	8005fe0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005faa:	d016      	beq.n	8005fda <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_ADC_PollForConversion+0x15a>
 8005fb2:	f7ff fda7 	bl	8005b04 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d20b      	bcs.n	8005fda <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e030      	b.n	800603c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d8dd      	bhi.n	8005fa4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0212 	mvn.w	r2, #18
 8005ff0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006008:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800600c:	d115      	bne.n	800603a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006012:	2b00      	cmp	r3, #0
 8006014:	d111      	bne.n	800603a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	bd90      	pop	{r4, r7, pc}
 8006044:	20000008 	.word	0x20000008
 8006048:	24924924 	.word	0x24924924
 800604c:	00924924 	.word	0x00924924
 8006050:	12492492 	.word	0x12492492
 8006054:	00492492 	.word	0x00492492
 8006058:	00249249 	.word	0x00249249

0800605c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_ADC_ConfigChannel+0x20>
 8006090:	2302      	movs	r3, #2
 8006092:	e0dc      	b.n	800624e <HAL_ADC_ConfigChannel+0x1da>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d81c      	bhi.n	80060de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	3b05      	subs	r3, #5
 80060b6:	221f      	movs	r2, #31
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	4019      	ands	r1, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	3b05      	subs	r3, #5
 80060d0:	fa00 f203 	lsl.w	r2, r0, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	635a      	str	r2, [r3, #52]	; 0x34
 80060dc:	e03c      	b.n	8006158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b0c      	cmp	r3, #12
 80060e4:	d81c      	bhi.n	8006120 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	3b23      	subs	r3, #35	; 0x23
 80060f8:	221f      	movs	r2, #31
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	43db      	mvns	r3, r3
 8006100:	4019      	ands	r1, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	3b23      	subs	r3, #35	; 0x23
 8006112:	fa00 f203 	lsl.w	r2, r0, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
 800611e:	e01b      	b.n	8006158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	3b41      	subs	r3, #65	; 0x41
 8006132:	221f      	movs	r2, #31
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	4019      	ands	r1, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	3b41      	subs	r3, #65	; 0x41
 800614c:	fa00 f203 	lsl.w	r2, r0, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b09      	cmp	r3, #9
 800615e:	d91c      	bls.n	800619a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68d9      	ldr	r1, [r3, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	3b1e      	subs	r3, #30
 8006172:	2207      	movs	r2, #7
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	4019      	ands	r1, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6898      	ldr	r0, [r3, #8]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	3b1e      	subs	r3, #30
 800618c:	fa00 f203 	lsl.w	r2, r0, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	e019      	b.n	80061ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6919      	ldr	r1, [r3, #16]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	2207      	movs	r2, #7
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	4019      	ands	r1, r3
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6898      	ldr	r0, [r3, #8]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	fa00 f203 	lsl.w	r2, r0, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d003      	beq.n	80061de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80061da:	2b11      	cmp	r3, #17
 80061dc:	d132      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <HAL_ADC_ConfigChannel+0x1e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d125      	bne.n	8006234 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d126      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006204:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b10      	cmp	r3, #16
 800620c:	d11a      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800620e:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_ADC_ConfigChannel+0x1e8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <HAL_ADC_ConfigChannel+0x1ec>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	0c9a      	lsrs	r2, r3, #18
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006224:	e002      	b.n	800622c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3b01      	subs	r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f9      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x1b2>
 8006232:	e007      	b.n	8006244 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40012400 	.word	0x40012400
 800625c:	20000008 	.word	0x20000008
 8006260:	431bde83 	.word	0x431bde83

08006264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d039      	beq.n	80062f6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006292:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <ADC_Enable+0x9c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <ADC_Enable+0xa0>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	0c9b      	lsrs	r3, r3, #18
 800629e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80062a0:	e002      	b.n	80062a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f9      	bne.n	80062a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80062ae:	f7ff fc29 	bl	8005b04 <HAL_GetTick>
 80062b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80062b4:	e018      	b.n	80062e8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062b6:	f7ff fc25 	bl	8005b04 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d911      	bls.n	80062e8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f043 0210 	orr.w	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e007      	b.n	80062f8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d1df      	bne.n	80062b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000008 	.word	0x20000008
 8006304:	431bde83 	.word	0x431bde83

08006308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d127      	bne.n	8006372 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006332:	f7ff fbe7 	bl	8005b04 <HAL_GetTick>
 8006336:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006338:	e014      	b.n	8006364 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800633a:	f7ff fbe3 	bl	8005b04 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d90d      	bls.n	8006364 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	f043 0210 	orr.w	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f043 0201 	orr.w	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e007      	b.n	8006374 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d0e3      	beq.n	800633a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_ADCEx_Calibration_Start+0x1e>
 8006396:	2302      	movs	r3, #2
 8006398:	e086      	b.n	80064a8 <HAL_ADCEx_Calibration_Start+0x12c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff ffb0 	bl	8006308 <ADC_ConversionStop_Disable>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d175      	bne.n	800649e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063ba:	f023 0302 	bic.w	r3, r3, #2
 80063be:	f043 0202 	orr.w	r2, r3, #2
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80063c6:	4b3a      	ldr	r3, [pc, #232]	; (80064b0 <HAL_ADCEx_Calibration_Start+0x134>)
 80063c8:	681c      	ldr	r4, [r3, #0]
 80063ca:	2002      	movs	r0, #2
 80063cc:	f002 f96a 	bl	80086a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80063d0:	4603      	mov	r3, r0
 80063d2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80063d6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80063d8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80063da:	e002      	b.n	80063e2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f9      	bne.n	80063dc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff ff3b 	bl	8006264 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0208 	orr.w	r2, r2, #8
 80063fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80063fe:	f7ff fb81 	bl	8005b04 <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006404:	e014      	b.n	8006430 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006406:	f7ff fb7d 	bl	8005b04 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b0a      	cmp	r3, #10
 8006412:	d90d      	bls.n	8006430 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	f023 0312 	bic.w	r3, r3, #18
 800641c:	f043 0210 	orr.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e03b      	b.n	80064a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0204 	orr.w	r2, r2, #4
 800644c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800644e:	f7ff fb59 	bl	8005b04 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006454:	e014      	b.n	8006480 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006456:	f7ff fb55 	bl	8005b04 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b0a      	cmp	r3, #10
 8006462:	d90d      	bls.n	8006480 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f023 0312 	bic.w	r3, r3, #18
 800646c:	f043 0210 	orr.w	r2, r3, #16
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e013      	b.n	80064a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e3      	bne.n	8006456 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	f043 0201 	orr.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd90      	pop	{r4, r7, pc}
 80064b0:	20000008 	.word	0x20000008

080064b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <__NVIC_SetPriorityGrouping+0x44>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064d0:	4013      	ands	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064e6:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <__NVIC_SetPriorityGrouping+0x44>)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	60d3      	str	r3, [r2, #12]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <__NVIC_GetPriorityGrouping+0x18>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f003 0307 	and.w	r3, r3, #7
}
 800650a:	4618      	mov	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	db0b      	blt.n	8006542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	f003 021f 	and.w	r2, r3, #31
 8006530:	4906      	ldr	r1, [pc, #24]	; (800654c <__NVIC_EnableIRQ+0x34>)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2001      	movs	r0, #1
 800653a:	fa00 f202 	lsl.w	r2, r0, r2
 800653e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	e000e100 	.word	0xe000e100

08006550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800655c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006560:	2b00      	cmp	r3, #0
 8006562:	db0a      	blt.n	800657a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	490c      	ldr	r1, [pc, #48]	; (800659c <__NVIC_SetPriority+0x4c>)
 800656a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656e:	0112      	lsls	r2, r2, #4
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	440b      	add	r3, r1
 8006574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006578:	e00a      	b.n	8006590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4908      	ldr	r1, [pc, #32]	; (80065a0 <__NVIC_SetPriority+0x50>)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	3b04      	subs	r3, #4
 8006588:	0112      	lsls	r2, r2, #4
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	440b      	add	r3, r1
 800658e:	761a      	strb	r2, [r3, #24]
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	e000e100 	.word	0xe000e100
 80065a0:	e000ed00 	.word	0xe000ed00

080065a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f1c3 0307 	rsb	r3, r3, #7
 80065be:	2b04      	cmp	r3, #4
 80065c0:	bf28      	it	cs
 80065c2:	2304      	movcs	r3, #4
 80065c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	3304      	adds	r3, #4
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d902      	bls.n	80065d4 <NVIC_EncodePriority+0x30>
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	3b03      	subs	r3, #3
 80065d2:	e000      	b.n	80065d6 <NVIC_EncodePriority+0x32>
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43da      	mvns	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	401a      	ands	r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	43d9      	mvns	r1, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065fc:	4313      	orrs	r3, r2
         );
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3724      	adds	r7, #36	; 0x24
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3b01      	subs	r3, #1
 8006614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006618:	d301      	bcc.n	800661e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800661a:	2301      	movs	r3, #1
 800661c:	e00f      	b.n	800663e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800661e:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <SysTick_Config+0x40>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006626:	210f      	movs	r1, #15
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	f7ff ff90 	bl	8006550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <SysTick_Config+0x40>)
 8006632:	2200      	movs	r2, #0
 8006634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <SysTick_Config+0x40>)
 8006638:	2207      	movs	r2, #7
 800663a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	e000e010 	.word	0xe000e010

0800664c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff2d 	bl	80064b4 <__NVIC_SetPriorityGrouping>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006674:	f7ff ff42 	bl	80064fc <__NVIC_GetPriorityGrouping>
 8006678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	f7ff ff90 	bl	80065a4 <NVIC_EncodePriority>
 8006684:	4602      	mov	r2, r0
 8006686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668a:	4611      	mov	r1, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff ff5f 	bl	8006550 <__NVIC_SetPriority>
}
 8006692:	bf00      	nop
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4603      	mov	r3, r0
 80066a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ff35 	bl	8006518 <__NVIC_EnableIRQ>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ffa2 	bl	8006608 <SysTick_Config>
 80066c4:	4603      	mov	r3, r0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80066d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80066ea:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <HAL_FLASH_Program+0xd8>)
 80066ec:	7e1b      	ldrb	r3, [r3, #24]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_FLASH_Program+0x26>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e054      	b.n	80067a0 <HAL_FLASH_Program+0xd0>
 80066f6:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <HAL_FLASH_Program+0xd8>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80066fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006700:	f000 f8a8 	bl	8006854 <FLASH_WaitForLastOperation>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d144      	bne.n	8006798 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	757b      	strb	r3, [r7, #21]
 8006718:	e007      	b.n	800672a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d102      	bne.n	8006726 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006720:	2302      	movs	r3, #2
 8006722:	757b      	strb	r3, [r7, #21]
 8006724:	e001      	b.n	800672a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006726:	2304      	movs	r3, #4
 8006728:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800672a:	2300      	movs	r3, #0
 800672c:	75bb      	strb	r3, [r7, #22]
 800672e:	e02d      	b.n	800678c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006730:	7dbb      	ldrb	r3, [r7, #22]
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	eb02 0c03 	add.w	ip, r2, r3
 800673a:	7dbb      	ldrb	r3, [r7, #22]
 800673c:	0119      	lsls	r1, r3, #4
 800673e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006742:	f1c1 0620 	rsb	r6, r1, #32
 8006746:	f1a1 0020 	sub.w	r0, r1, #32
 800674a:	fa22 f401 	lsr.w	r4, r2, r1
 800674e:	fa03 f606 	lsl.w	r6, r3, r6
 8006752:	4334      	orrs	r4, r6
 8006754:	fa23 f000 	lsr.w	r0, r3, r0
 8006758:	4304      	orrs	r4, r0
 800675a:	fa23 f501 	lsr.w	r5, r3, r1
 800675e:	b2a3      	uxth	r3, r4
 8006760:	4619      	mov	r1, r3
 8006762:	4660      	mov	r0, ip
 8006764:	f000 f85a 	bl	800681c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006768:	f24c 3050 	movw	r0, #50000	; 0xc350
 800676c:	f000 f872 	bl	8006854 <FLASH_WaitForLastOperation>
 8006770:	4603      	mov	r3, r0
 8006772:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006774:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <HAL_FLASH_Program+0xdc>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <HAL_FLASH_Program+0xdc>)
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d107      	bne.n	8006796 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006786:	7dbb      	ldrb	r3, [r7, #22]
 8006788:	3301      	adds	r3, #1
 800678a:	75bb      	strb	r3, [r7, #22]
 800678c:	7dba      	ldrb	r2, [r7, #22]
 800678e:	7d7b      	ldrb	r3, [r7, #21]
 8006790:	429a      	cmp	r2, r3
 8006792:	d3cd      	bcc.n	8006730 <HAL_FLASH_Program+0x60>
 8006794:	e000      	b.n	8006798 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006796:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <HAL_FLASH_Program+0xd8>)
 800679a:	2200      	movs	r2, #0
 800679c:	761a      	strb	r2, [r3, #24]

  return status;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	20000980 	.word	0x20000980
 80067ac:	40022000 	.word	0x40022000

080067b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <HAL_FLASH_Unlock+0x40>)
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <HAL_FLASH_Unlock+0x40>)
 80067c8:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <HAL_FLASH_Unlock+0x44>)
 80067ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <HAL_FLASH_Unlock+0x40>)
 80067ce:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <HAL_FLASH_Unlock+0x48>)
 80067d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_FLASH_Unlock+0x40>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80067e2:	79fb      	ldrb	r3, [r7, #7]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40022000 	.word	0x40022000
 80067f4:	45670123 	.word	0x45670123
 80067f8:	cdef89ab 	.word	0xcdef89ab

080067fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40022000 	.word	0x40022000

0800681c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <FLASH_Program_HalfWord+0x30>)
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <FLASH_Program_HalfWord+0x34>)
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <FLASH_Program_HalfWord+0x34>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	801a      	strh	r2, [r3, #0]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000980 	.word	0x20000980
 8006850:	40022000 	.word	0x40022000

08006854 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800685c:	f7ff f952 	bl	8005b04 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006862:	e010      	b.n	8006886 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686a:	d00c      	beq.n	8006886 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <FLASH_WaitForLastOperation+0x2e>
 8006872:	f7ff f947 	bl	8005b04 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d201      	bcs.n	8006886 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e025      	b.n	80068d2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e8      	bne.n	8006864 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 80068a0:	2220      	movs	r2, #32
 80068a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <FLASH_WaitForLastOperation+0x88>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80068c8:	f000 f80a 	bl	80068e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40022000 	.word	0x40022000

080068e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <FLASH_SetErrorCode+0x98>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <FLASH_SetErrorCode+0x9c>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <FLASH_SetErrorCode+0x9c>)
 8006900:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f043 0310 	orr.w	r3, r3, #16
 8006908:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <FLASH_SetErrorCode+0x98>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006916:	4b19      	ldr	r3, [pc, #100]	; (800697c <FLASH_SetErrorCode+0x9c>)
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <FLASH_SetErrorCode+0x9c>)
 8006920:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f043 0304 	orr.w	r3, r3, #4
 8006928:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <FLASH_SetErrorCode+0x98>)
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <FLASH_SetErrorCode+0x9c>)
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f043 0304 	orr.w	r3, r3, #4
 800693e:	4a0f      	ldr	r2, [pc, #60]	; (800697c <FLASH_SetErrorCode+0x9c>)
 8006940:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <FLASH_SetErrorCode+0x98>)
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <FLASH_SetErrorCode+0x98>)
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f240 1201 	movw	r2, #257	; 0x101
 8006954:	4293      	cmp	r3, r2
 8006956:	d106      	bne.n	8006966 <FLASH_SetErrorCode+0x86>
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <FLASH_SetErrorCode+0x98>)
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <FLASH_SetErrorCode+0x98>)
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	61d3      	str	r3, [r2, #28]
}  
 8006964:	e002      	b.n	800696c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006966:	4a04      	ldr	r2, [pc, #16]	; (8006978 <FLASH_SetErrorCode+0x98>)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60d3      	str	r3, [r2, #12]
}  
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40022000 	.word	0x40022000
 800697c:	20000980 	.word	0x20000980

08006980 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006992:	4b2f      	ldr	r3, [pc, #188]	; (8006a50 <HAL_FLASHEx_Erase+0xd0>)
 8006994:	7e1b      	ldrb	r3, [r3, #24]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_FLASHEx_Erase+0x1e>
 800699a:	2302      	movs	r3, #2
 800699c:	e053      	b.n	8006a46 <HAL_FLASHEx_Erase+0xc6>
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <HAL_FLASHEx_Erase+0xd0>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d116      	bne.n	80069da <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80069ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069b0:	f7ff ff50 	bl	8006854 <FLASH_WaitForLastOperation>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d141      	bne.n	8006a3e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80069ba:	2001      	movs	r0, #1
 80069bc:	f000 f84c 	bl	8006a58 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069c4:	f7ff ff46 	bl	8006854 <FLASH_WaitForLastOperation>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <HAL_FLASHEx_Erase+0xd4>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <HAL_FLASHEx_Erase+0xd4>)
 80069d2:	f023 0304 	bic.w	r3, r3, #4
 80069d6:	6113      	str	r3, [r2, #16]
 80069d8:	e031      	b.n	8006a3e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80069da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069de:	f7ff ff39 	bl	8006854 <FLASH_WaitForLastOperation>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d12a      	bne.n	8006a3e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ee:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	e019      	b.n	8006a2c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f000 f849 	bl	8006a90 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a02:	f7ff ff27 	bl	8006854 <FLASH_WaitForLastOperation>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <HAL_FLASHEx_Erase+0xd4>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <HAL_FLASHEx_Erase+0xd4>)
 8006a10:	f023 0302 	bic.w	r3, r3, #2
 8006a14:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	601a      	str	r2, [r3, #0]
            break;
 8006a22:	e00c      	b.n	8006a3e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	029a      	lsls	r2, r3, #10
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d3dc      	bcc.n	80069f8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <HAL_FLASHEx_Erase+0xd0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	761a      	strb	r2, [r3, #24]

  return status;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000980 	.word	0x20000980
 8006a54:	40022000 	.word	0x40022000

08006a58 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a60:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <FLASH_MassErase+0x30>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <FLASH_MassErase+0x34>)
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <FLASH_MassErase+0x34>)
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006a72:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <FLASH_MassErase+0x34>)
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	4a05      	ldr	r2, [pc, #20]	; (8006a8c <FLASH_MassErase+0x34>)
 8006a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	20000980 	.word	0x20000980
 8006a8c:	40022000 	.word	0x40022000

08006a90 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <FLASH_PageErase+0x38>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <FLASH_PageErase+0x3c>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <FLASH_PageErase+0x3c>)
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006aaa:	4a08      	ldr	r2, [pc, #32]	; (8006acc <FLASH_PageErase+0x3c>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <FLASH_PageErase+0x3c>)
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	4a05      	ldr	r2, [pc, #20]	; (8006acc <FLASH_PageErase+0x3c>)
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000980 	.word	0x20000980
 8006acc:	40022000 	.word	0x40022000

08006ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	; 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ae2:	e127      	b.n	8006d34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f040 8116 	bne.w	8006d2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b12      	cmp	r3, #18
 8006b08:	d034      	beq.n	8006b74 <HAL_GPIO_Init+0xa4>
 8006b0a:	2b12      	cmp	r3, #18
 8006b0c:	d80d      	bhi.n	8006b2a <HAL_GPIO_Init+0x5a>
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d02b      	beq.n	8006b6a <HAL_GPIO_Init+0x9a>
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d804      	bhi.n	8006b20 <HAL_GPIO_Init+0x50>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d031      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d01c      	beq.n	8006b58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006b1e:	e048      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d043      	beq.n	8006bac <HAL_GPIO_Init+0xdc>
 8006b24:	2b11      	cmp	r3, #17
 8006b26:	d01b      	beq.n	8006b60 <HAL_GPIO_Init+0x90>
          break;
 8006b28:	e043      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006b2a:	4a89      	ldr	r2, [pc, #548]	; (8006d50 <HAL_GPIO_Init+0x280>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d026      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
 8006b30:	4a87      	ldr	r2, [pc, #540]	; (8006d50 <HAL_GPIO_Init+0x280>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d806      	bhi.n	8006b44 <HAL_GPIO_Init+0x74>
 8006b36:	4a87      	ldr	r2, [pc, #540]	; (8006d54 <HAL_GPIO_Init+0x284>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d020      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
 8006b3c:	4a86      	ldr	r2, [pc, #536]	; (8006d58 <HAL_GPIO_Init+0x288>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01d      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
          break;
 8006b42:	e036      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006b44:	4a85      	ldr	r2, [pc, #532]	; (8006d5c <HAL_GPIO_Init+0x28c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d019      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
 8006b4a:	4a85      	ldr	r2, [pc, #532]	; (8006d60 <HAL_GPIO_Init+0x290>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d016      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
 8006b50:	4a84      	ldr	r2, [pc, #528]	; (8006d64 <HAL_GPIO_Init+0x294>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_GPIO_Init+0xae>
          break;
 8006b56:	e02c      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	623b      	str	r3, [r7, #32]
          break;
 8006b5e:	e028      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	623b      	str	r3, [r7, #32]
          break;
 8006b68:	e023      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	623b      	str	r3, [r7, #32]
          break;
 8006b72:	e01e      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	623b      	str	r3, [r7, #32]
          break;
 8006b7c:	e019      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006b86:	2304      	movs	r3, #4
 8006b88:	623b      	str	r3, [r7, #32]
          break;
 8006b8a:	e012      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006b94:	2308      	movs	r3, #8
 8006b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	611a      	str	r2, [r3, #16]
          break;
 8006b9e:	e008      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	615a      	str	r2, [r3, #20]
          break;
 8006baa:	e002      	b.n	8006bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006bac:	2300      	movs	r3, #0
 8006bae:	623b      	str	r3, [r7, #32]
          break;
 8006bb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2bff      	cmp	r3, #255	; 0xff
 8006bb6:	d801      	bhi.n	8006bbc <HAL_GPIO_Init+0xec>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	e001      	b.n	8006bc0 <HAL_GPIO_Init+0xf0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2bff      	cmp	r3, #255	; 0xff
 8006bc6:	d802      	bhi.n	8006bce <HAL_GPIO_Init+0xfe>
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	e002      	b.n	8006bd4 <HAL_GPIO_Init+0x104>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	3b08      	subs	r3, #8
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	210f      	movs	r1, #15
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	43db      	mvns	r3, r3
 8006be4:	401a      	ands	r2, r3
 8006be6:	6a39      	ldr	r1, [r7, #32]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	fa01 f303 	lsl.w	r3, r1, r3
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8096 	beq.w	8006d2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c02:	4b59      	ldr	r3, [pc, #356]	; (8006d68 <HAL_GPIO_Init+0x298>)
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	4a58      	ldr	r2, [pc, #352]	; (8006d68 <HAL_GPIO_Init+0x298>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6193      	str	r3, [r2, #24]
 8006c0e:	4b56      	ldr	r3, [pc, #344]	; (8006d68 <HAL_GPIO_Init+0x298>)
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006c1a:	4a54      	ldr	r2, [pc, #336]	; (8006d6c <HAL_GPIO_Init+0x29c>)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	089b      	lsrs	r3, r3, #2
 8006c20:	3302      	adds	r3, #2
 8006c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	220f      	movs	r2, #15
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43db      	mvns	r3, r3
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a4b      	ldr	r2, [pc, #300]	; (8006d70 <HAL_GPIO_Init+0x2a0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <HAL_GPIO_Init+0x19e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a4a      	ldr	r2, [pc, #296]	; (8006d74 <HAL_GPIO_Init+0x2a4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00d      	beq.n	8006c6a <HAL_GPIO_Init+0x19a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a49      	ldr	r2, [pc, #292]	; (8006d78 <HAL_GPIO_Init+0x2a8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <HAL_GPIO_Init+0x196>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a48      	ldr	r2, [pc, #288]	; (8006d7c <HAL_GPIO_Init+0x2ac>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d101      	bne.n	8006c62 <HAL_GPIO_Init+0x192>
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e006      	b.n	8006c70 <HAL_GPIO_Init+0x1a0>
 8006c62:	2304      	movs	r3, #4
 8006c64:	e004      	b.n	8006c70 <HAL_GPIO_Init+0x1a0>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e002      	b.n	8006c70 <HAL_GPIO_Init+0x1a0>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <HAL_GPIO_Init+0x1a0>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	f002 0203 	and.w	r2, r2, #3
 8006c76:	0092      	lsls	r2, r2, #2
 8006c78:	4093      	lsls	r3, r2
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006c80:	493a      	ldr	r1, [pc, #232]	; (8006d6c <HAL_GPIO_Init+0x29c>)
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	3302      	adds	r3, #2
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c9a:	4b39      	ldr	r3, [pc, #228]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4938      	ldr	r1, [pc, #224]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	600b      	str	r3, [r1, #0]
 8006ca6:	e006      	b.n	8006cb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ca8:	4b35      	ldr	r3, [pc, #212]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	4933      	ldr	r1, [pc, #204]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	492e      	ldr	r1, [pc, #184]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
 8006cce:	e006      	b.n	8006cde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	4929      	ldr	r1, [pc, #164]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006cea:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	4924      	ldr	r1, [pc, #144]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
 8006cf6:	e006      	b.n	8006d06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	491f      	ldr	r1, [pc, #124]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d006      	beq.n	8006d20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d12:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	491a      	ldr	r1, [pc, #104]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60cb      	str	r3, [r1, #12]
 8006d1e:	e006      	b.n	8006d2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d20:	4b17      	ldr	r3, [pc, #92]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	43db      	mvns	r3, r3
 8006d28:	4915      	ldr	r1, [pc, #84]	; (8006d80 <HAL_GPIO_Init+0x2b0>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	3301      	adds	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f47f aed0 	bne.w	8006ae4 <HAL_GPIO_Init+0x14>
  }
}
 8006d44:	bf00      	nop
 8006d46:	372c      	adds	r7, #44	; 0x2c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	10210000 	.word	0x10210000
 8006d54:	10110000 	.word	0x10110000
 8006d58:	10120000 	.word	0x10120000
 8006d5c:	10310000 	.word	0x10310000
 8006d60:	10320000 	.word	0x10320000
 8006d64:	10220000 	.word	0x10220000
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40010800 	.word	0x40010800
 8006d74:	40010c00 	.word	0x40010c00
 8006d78:	40011000 	.word	0x40011000
 8006d7c:	40011400 	.word	0x40011400
 8006d80:	40010400 	.word	0x40010400

08006d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	807b      	strh	r3, [r7, #2]
 8006d90:	4613      	mov	r3, r2
 8006d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d94:	787b      	ldrb	r3, [r7, #1]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d9a:	887a      	ldrh	r2, [r7, #2]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006da0:	e003      	b.n	8006daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006da2:	887b      	ldrh	r3, [r7, #2]
 8006da4:	041a      	lsls	r2, r3, #16
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	611a      	str	r2, [r3, #16]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	887b      	ldrh	r3, [r7, #2]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dcc:	887a      	ldrh	r2, [r7, #2]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006dd2:	e002      	b.n	8006dda <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dd4:	887a      	ldrh	r2, [r7, #2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e10f      	b.n	8007016 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fd f8d8 	bl	8003fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	; 0x24
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e28:	f001 fb40 	bl	80084ac <HAL_RCC_GetPCLK1Freq>
 8006e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	4a7b      	ldr	r2, [pc, #492]	; (8007020 <HAL_I2C_Init+0x23c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d807      	bhi.n	8006e48 <HAL_I2C_Init+0x64>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <HAL_I2C_Init+0x240>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	bf94      	ite	ls
 8006e40:	2301      	movls	r3, #1
 8006e42:	2300      	movhi	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	e006      	b.n	8006e56 <HAL_I2C_Init+0x72>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a77      	ldr	r2, [pc, #476]	; (8007028 <HAL_I2C_Init+0x244>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	bf94      	ite	ls
 8006e50:	2301      	movls	r3, #1
 8006e52:	2300      	movhi	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0db      	b.n	8007016 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a72      	ldr	r2, [pc, #456]	; (800702c <HAL_I2C_Init+0x248>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	0c9b      	lsrs	r3, r3, #18
 8006e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4a64      	ldr	r2, [pc, #400]	; (8007020 <HAL_I2C_Init+0x23c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d802      	bhi.n	8006e98 <HAL_I2C_Init+0xb4>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3301      	adds	r3, #1
 8006e96:	e009      	b.n	8006eac <HAL_I2C_Init+0xc8>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ea2:	4a63      	ldr	r2, [pc, #396]	; (8007030 <HAL_I2C_Init+0x24c>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	099b      	lsrs	r3, r3, #6
 8006eaa:	3301      	adds	r3, #1
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4956      	ldr	r1, [pc, #344]	; (8007020 <HAL_I2C_Init+0x23c>)
 8006ec8:	428b      	cmp	r3, r1
 8006eca:	d80d      	bhi.n	8006ee8 <HAL_I2C_Init+0x104>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	1e59      	subs	r1, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eda:	3301      	adds	r3, #1
 8006edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	bf38      	it	cc
 8006ee4:	2304      	movcc	r3, #4
 8006ee6:	e04f      	b.n	8006f88 <HAL_I2C_Init+0x1a4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d111      	bne.n	8006f14 <HAL_I2C_Init+0x130>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	1e58      	subs	r0, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6859      	ldr	r1, [r3, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	440b      	add	r3, r1
 8006efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f02:	3301      	adds	r3, #1
 8006f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e012      	b.n	8006f3a <HAL_I2C_Init+0x156>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	1e58      	subs	r0, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	0099      	lsls	r1, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_I2C_Init+0x15e>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e022      	b.n	8006f88 <HAL_I2C_Init+0x1a4>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <HAL_I2C_Init+0x184>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1e58      	subs	r0, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	440b      	add	r3, r1
 8006f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	e00f      	b.n	8006f88 <HAL_I2C_Init+0x1a4>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1e58      	subs	r0, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6859      	ldr	r1, [r3, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	0099      	lsls	r1, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	6809      	ldr	r1, [r1, #0]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6911      	ldr	r1, [r2, #16]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68d2      	ldr	r2, [r2, #12]
 8006fc2:	4311      	orrs	r1, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	000186a0 	.word	0x000186a0
 8007024:	001e847f 	.word	0x001e847f
 8007028:	003d08ff 	.word	0x003d08ff
 800702c:	431bde83 	.word	0x431bde83
 8007030:	10624dd3 	.word	0x10624dd3

08007034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	461a      	mov	r2, r3
 8007042:	4603      	mov	r3, r0
 8007044:	817b      	strh	r3, [r7, #10]
 8007046:	460b      	mov	r3, r1
 8007048:	813b      	strh	r3, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800704e:	f7fe fd59 	bl	8005b04 <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b20      	cmp	r3, #32
 800705e:	f040 80d9 	bne.w	8007214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2319      	movs	r3, #25
 8007068:	2201      	movs	r2, #1
 800706a:	496d      	ldr	r1, [pc, #436]	; (8007220 <HAL_I2C_Mem_Write+0x1ec>)
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fc6b 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
 800707a:	e0cc      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_I2C_Mem_Write+0x56>
 8007086:	2302      	movs	r3, #2
 8007088:	e0c5      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d007      	beq.n	80070b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2221      	movs	r2, #33	; 0x21
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a3a      	ldr	r2, [r7, #32]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a4d      	ldr	r2, [pc, #308]	; (8007224 <HAL_I2C_Mem_Write+0x1f0>)
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070f2:	88f8      	ldrh	r0, [r7, #6]
 80070f4:	893a      	ldrh	r2, [r7, #8]
 80070f6:	8979      	ldrh	r1, [r7, #10]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fac6 	bl	8007694 <I2C_RequestMemoryWrite>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d052      	beq.n	80071b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e081      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fcec 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00d      	beq.n	800713e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b04      	cmp	r3, #4
 8007128:	d107      	bne.n	800713a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e06b      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b04      	cmp	r3, #4
 800717a:	d11b      	bne.n	80071b4 <HAL_I2C_Mem_Write+0x180>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d017      	beq.n	80071b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1aa      	bne.n	8007112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fcd8 	bl	8007b76 <I2C_WaitOnBTFFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00d      	beq.n	80071e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d107      	bne.n	80071e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e016      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	00100002 	.word	0x00100002
 8007224:	ffff0000 	.word	0xffff0000

08007228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08c      	sub	sp, #48	; 0x30
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	817b      	strh	r3, [r7, #10]
 800723a:	460b      	mov	r3, r1
 800723c:	813b      	strh	r3, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007242:	f7fe fc5f 	bl	8005b04 <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b20      	cmp	r3, #32
 8007252:	f040 8218 	bne.w	8007686 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	2319      	movs	r3, #25
 800725c:	2201      	movs	r2, #1
 800725e:	4981      	ldr	r1, [pc, #516]	; (8007464 <HAL_I2C_Mem_Read+0x23c>)
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fb71 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
 800726e:	e20b      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_I2C_Mem_Read+0x56>
 800727a:	2302      	movs	r3, #2
 800727c:	e204      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b01      	cmp	r3, #1
 8007292:	d007      	beq.n	80072a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2222      	movs	r2, #34	; 0x22
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2240      	movs	r2, #64	; 0x40
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a61      	ldr	r2, [pc, #388]	; (8007468 <HAL_I2C_Mem_Read+0x240>)
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e6:	88f8      	ldrh	r0, [r7, #6]
 80072e8:	893a      	ldrh	r2, [r7, #8]
 80072ea:	8979      	ldrh	r1, [r7, #10]
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4603      	mov	r3, r0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fa56 	bl	80077a8 <I2C_RequestMemoryRead>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e1c0      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730a:	2b00      	cmp	r3, #0
 800730c:	d113      	bne.n	8007336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730e:	2300      	movs	r3, #0
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	623b      	str	r3, [r7, #32]
 8007322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e194      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733a:	2b01      	cmp	r3, #1
 800733c:	d11d      	bne.n	800737a <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800734e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007374:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007376:	b662      	cpsie	i
 8007378:	e172      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	2b02      	cmp	r3, #2
 8007380:	d11d      	bne.n	80073be <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007392:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80073ba:	b662      	cpsie	i
 80073bc:	e150      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073e4:	e13c      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f200 80f5 	bhi.w	80075da <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d123      	bne.n	8007440 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fbfb 	bl	8007bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e13d      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800743e:	e10f      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007444:	2b02      	cmp	r3, #2
 8007446:	d150      	bne.n	80074ea <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	2200      	movs	r2, #0
 8007450:	4906      	ldr	r1, [pc, #24]	; (800746c <HAL_I2C_Mem_Read+0x244>)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fa78 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e112      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
 8007462:	bf00      	nop
 8007464:	00100002 	.word	0x00100002
 8007468:	ffff0000 	.word	0xffff0000
 800746c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007470:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007480:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80074b4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e8:	e0ba      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2200      	movs	r2, #0
 80074f2:	4967      	ldr	r1, [pc, #412]	; (8007690 <HAL_I2C_Mem_Read+0x468>)
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fa27 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0c1      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007514:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	2200      	movs	r2, #0
 8007550:	494f      	ldr	r1, [pc, #316]	; (8007690 <HAL_I2C_Mem_Read+0x468>)
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f9f8 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e092      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007570:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80075a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075d8:	e042      	b.n	8007660 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fb0a 	bl	8007bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e04c      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b04      	cmp	r3, #4
 800762c:	d118      	bne.n	8007660 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	f47f aebe 	bne.w	80073e6 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	; 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	00010004 	.word	0x00010004

08007694 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	817b      	strh	r3, [r7, #10]
 80076a6:	460b      	mov	r3, r1
 80076a8:	813b      	strh	r3, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f93c 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e05f      	b.n	800779a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076da:	897b      	ldrh	r3, [r7, #10]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	492d      	ldr	r1, [pc, #180]	; (80077a4 <I2C_RequestMemoryWrite+0x110>)
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f980 	bl	80079f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e04c      	b.n	800779a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007718:	6a39      	ldr	r1, [r7, #32]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f9ea 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b04      	cmp	r3, #4
 800772c:	d107      	bne.n	800773e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e02b      	b.n	800779a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007748:	893b      	ldrh	r3, [r7, #8]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	611a      	str	r2, [r3, #16]
 8007752:	e021      	b.n	8007798 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	b29b      	uxth	r3, r3
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	6a39      	ldr	r1, [r7, #32]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f9c4 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	2b04      	cmp	r3, #4
 8007778:	d107      	bne.n	800778a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e005      	b.n	800779a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800778e:	893b      	ldrh	r3, [r7, #8]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	00010002 	.word	0x00010002

080077a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	4608      	mov	r0, r1
 80077b2:	4611      	mov	r1, r2
 80077b4:	461a      	mov	r2, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	817b      	strh	r3, [r7, #10]
 80077ba:	460b      	mov	r3, r1
 80077bc:	813b      	strh	r3, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 f8aa 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e09e      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800780c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	494c      	ldr	r1, [pc, #304]	; (8007944 <I2C_RequestMemoryRead+0x19c>)
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f8ee 	bl	80079f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e08b      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f958 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b04      	cmp	r3, #4
 8007850:	d107      	bne.n	8007862 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e06a      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d105      	bne.n	8007878 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800786c:	893b      	ldrh	r3, [r7, #8]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	e021      	b.n	80078bc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007878:	893b      	ldrh	r3, [r7, #8]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f932 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b04      	cmp	r3, #4
 800789c:	d107      	bne.n	80078ae <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e044      	b.n	800793c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078be:	6a39      	ldr	r1, [r7, #32]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f917 	bl	8007af4 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d107      	bne.n	80078e4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e029      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2200      	movs	r2, #0
 8007900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f81f 	bl	8007948 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e013      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007914:	897b      	ldrh	r3, [r7, #10]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	4906      	ldr	r1, [pc, #24]	; (8007944 <I2C_RequestMemoryRead+0x19c>)
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 f863 	bl	80079f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	00010002 	.word	0x00010002

08007948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007958:	e025      	b.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007960:	d021      	beq.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007962:	f7fe f8cf 	bl	8005b04 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d116      	bne.n	80079a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e023      	b.n	80079ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10d      	bne.n	80079cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	43da      	mvns	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bf0c      	ite	eq
 80079c2:	2301      	moveq	r3, #1
 80079c4:	2300      	movne	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	e00c      	b.n	80079e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	43da      	mvns	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4013      	ands	r3, r2
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf0c      	ite	eq
 80079de:	2301      	moveq	r3, #1
 80079e0:	2300      	movne	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d0b6      	beq.n	800795a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a04:	e051      	b.n	8007aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a14:	d123      	bne.n	8007a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f043 0204 	orr.w	r2, r3, #4
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e046      	b.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d021      	beq.n	8007aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fe f84d 	bl	8005b04 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d116      	bne.n	8007aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e020      	b.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10c      	bne.n	8007ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	43da      	mvns	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e00b      	b.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	43da      	mvns	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d18d      	bne.n	8007a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b00:	e02d      	b.n	8007b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f8ce 	bl	8007ca4 <I2C_IsAcknowledgeFailed>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e02d      	b.n	8007b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b18:	d021      	beq.n	8007b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1a:	f7fd fff3 	bl	8005b04 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d116      	bne.n	8007b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f043 0220 	orr.w	r2, r3, #32
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e007      	b.n	8007b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b68:	2b80      	cmp	r3, #128	; 0x80
 8007b6a:	d1ca      	bne.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b82:	e02d      	b.n	8007be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f88d 	bl	8007ca4 <I2C_IsAcknowledgeFailed>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e02d      	b.n	8007bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9a:	d021      	beq.n	8007be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9c:	f7fd ffb2 	bl	8005b04 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d302      	bcc.n	8007bb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d116      	bne.n	8007be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e007      	b.n	8007bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d1ca      	bne.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c04:	e042      	b.n	8007c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d119      	bne.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0210 	mvn.w	r2, #16
 8007c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e029      	b.n	8007c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c48:	f7fd ff5c 	bl	8005b04 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d302      	bcc.n	8007c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d116      	bne.n	8007c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	f043 0220 	orr.w	r2, r3, #32
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e007      	b.n	8007c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d1b5      	bne.n	8007c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cba:	d11b      	bne.n	8007cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f043 0204 	orr.w	r2, r3, #4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e26c      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8087 	beq.w	8007e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d20:	4b92      	ldr	r3, [pc, #584]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f003 030c 	and.w	r3, r3, #12
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d00c      	beq.n	8007d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007d2c:	4b8f      	ldr	r3, [pc, #572]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f003 030c 	and.w	r3, r3, #12
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d112      	bne.n	8007d5e <HAL_RCC_OscConfig+0x5e>
 8007d38:	4b8c      	ldr	r3, [pc, #560]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d44:	d10b      	bne.n	8007d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d46:	4b89      	ldr	r3, [pc, #548]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d06c      	beq.n	8007e2c <HAL_RCC_OscConfig+0x12c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d168      	bne.n	8007e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e246      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d66:	d106      	bne.n	8007d76 <HAL_RCC_OscConfig+0x76>
 8007d68:	4b80      	ldr	r3, [pc, #512]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a7f      	ldr	r2, [pc, #508]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e02e      	b.n	8007dd4 <HAL_RCC_OscConfig+0xd4>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x98>
 8007d7e:	4b7b      	ldr	r3, [pc, #492]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a7a      	ldr	r2, [pc, #488]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	4b78      	ldr	r3, [pc, #480]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a77      	ldr	r2, [pc, #476]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e01d      	b.n	8007dd4 <HAL_RCC_OscConfig+0xd4>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da0:	d10c      	bne.n	8007dbc <HAL_RCC_OscConfig+0xbc>
 8007da2:	4b72      	ldr	r3, [pc, #456]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a71      	ldr	r2, [pc, #452]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4b6f      	ldr	r3, [pc, #444]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a6e      	ldr	r2, [pc, #440]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e00b      	b.n	8007dd4 <HAL_RCC_OscConfig+0xd4>
 8007dbc:	4b6b      	ldr	r3, [pc, #428]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a6a      	ldr	r2, [pc, #424]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	4b68      	ldr	r3, [pc, #416]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a67      	ldr	r2, [pc, #412]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d013      	beq.n	8007e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ddc:	f7fd fe92 	bl	8005b04 <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007de4:	f7fd fe8e 	bl	8005b04 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b64      	cmp	r3, #100	; 0x64
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e1fa      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df6:	4b5d      	ldr	r3, [pc, #372]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f0      	beq.n	8007de4 <HAL_RCC_OscConfig+0xe4>
 8007e02:	e014      	b.n	8007e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e04:	f7fd fe7e 	bl	8005b04 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e0c:	f7fd fe7a 	bl	8005b04 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e1e6      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1e:	4b53      	ldr	r3, [pc, #332]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f0      	bne.n	8007e0c <HAL_RCC_OscConfig+0x10c>
 8007e2a:	e000      	b.n	8007e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d063      	beq.n	8007f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e3a:	4b4c      	ldr	r3, [pc, #304]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 030c 	and.w	r3, r3, #12
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007e46:	4b49      	ldr	r3, [pc, #292]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 030c 	and.w	r3, r3, #12
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d11c      	bne.n	8007e8c <HAL_RCC_OscConfig+0x18c>
 8007e52:	4b46      	ldr	r3, [pc, #280]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d116      	bne.n	8007e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e5e:	4b43      	ldr	r3, [pc, #268]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_RCC_OscConfig+0x176>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d001      	beq.n	8007e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e1ba      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e76:	4b3d      	ldr	r3, [pc, #244]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4939      	ldr	r1, [pc, #228]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e8a:	e03a      	b.n	8007f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d020      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e94:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <HAL_RCC_OscConfig+0x270>)
 8007e96:	2201      	movs	r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e9a:	f7fd fe33 	bl	8005b04 <HAL_GetTick>
 8007e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea0:	e008      	b.n	8007eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ea2:	f7fd fe2f 	bl	8005b04 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e19b      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb4:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0f0      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec0:	4b2a      	ldr	r3, [pc, #168]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	4927      	ldr	r1, [pc, #156]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	600b      	str	r3, [r1, #0]
 8007ed4:	e015      	b.n	8007f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ed6:	4b26      	ldr	r3, [pc, #152]	; (8007f70 <HAL_RCC_OscConfig+0x270>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007edc:	f7fd fe12 	bl	8005b04 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee4:	f7fd fe0e 	bl	8005b04 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e17a      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f0      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d03a      	beq.n	8007f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d019      	beq.n	8007f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f16:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f1c:	f7fd fdf2 	bl	8005b04 <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f24:	f7fd fdee 	bl	8005b04 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e15a      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <HAL_RCC_OscConfig+0x26c>)
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007f42:	2001      	movs	r0, #1
 8007f44:	f000 fada 	bl	80084fc <RCC_Delay>
 8007f48:	e01c      	b.n	8007f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f50:	f7fd fdd8 	bl	8005b04 <HAL_GetTick>
 8007f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f56:	e00f      	b.n	8007f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f58:	f7fd fdd4 	bl	8005b04 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d908      	bls.n	8007f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e140      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
 8007f6a:	bf00      	nop
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	42420000 	.word	0x42420000
 8007f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f78:	4b9e      	ldr	r3, [pc, #632]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e9      	bne.n	8007f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80a6 	beq.w	80080de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f96:	4b97      	ldr	r3, [pc, #604]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa2:	4b94      	ldr	r3, [pc, #592]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4a93      	ldr	r2, [pc, #588]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8007fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fac:	61d3      	str	r3, [r2, #28]
 8007fae:	4b91      	ldr	r3, [pc, #580]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fbe:	4b8e      	ldr	r3, [pc, #568]	; (80081f8 <HAL_RCC_OscConfig+0x4f8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d118      	bne.n	8007ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fca:	4b8b      	ldr	r3, [pc, #556]	; (80081f8 <HAL_RCC_OscConfig+0x4f8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a8a      	ldr	r2, [pc, #552]	; (80081f8 <HAL_RCC_OscConfig+0x4f8>)
 8007fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fd6:	f7fd fd95 	bl	8005b04 <HAL_GetTick>
 8007fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fde:	f7fd fd91 	bl	8005b04 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b64      	cmp	r3, #100	; 0x64
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e0fd      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff0:	4b81      	ldr	r3, [pc, #516]	; (80081f8 <HAL_RCC_OscConfig+0x4f8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d106      	bne.n	8008012 <HAL_RCC_OscConfig+0x312>
 8008004:	4b7b      	ldr	r3, [pc, #492]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	4a7a      	ldr	r2, [pc, #488]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6213      	str	r3, [r2, #32]
 8008010:	e02d      	b.n	800806e <HAL_RCC_OscConfig+0x36e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10c      	bne.n	8008034 <HAL_RCC_OscConfig+0x334>
 800801a:	4b76      	ldr	r3, [pc, #472]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	4a75      	ldr	r2, [pc, #468]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	6213      	str	r3, [r2, #32]
 8008026:	4b73      	ldr	r3, [pc, #460]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	4a72      	ldr	r2, [pc, #456]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	6213      	str	r3, [r2, #32]
 8008032:	e01c      	b.n	800806e <HAL_RCC_OscConfig+0x36e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	2b05      	cmp	r3, #5
 800803a:	d10c      	bne.n	8008056 <HAL_RCC_OscConfig+0x356>
 800803c:	4b6d      	ldr	r3, [pc, #436]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	4a6c      	ldr	r2, [pc, #432]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008042:	f043 0304 	orr.w	r3, r3, #4
 8008046:	6213      	str	r3, [r2, #32]
 8008048:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	4a69      	ldr	r2, [pc, #420]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	6213      	str	r3, [r2, #32]
 8008054:	e00b      	b.n	800806e <HAL_RCC_OscConfig+0x36e>
 8008056:	4b67      	ldr	r3, [pc, #412]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	4a66      	ldr	r2, [pc, #408]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	6213      	str	r3, [r2, #32]
 8008062:	4b64      	ldr	r3, [pc, #400]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	4a63      	ldr	r2, [pc, #396]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008068:	f023 0304 	bic.w	r3, r3, #4
 800806c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d015      	beq.n	80080a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008076:	f7fd fd45 	bl	8005b04 <HAL_GetTick>
 800807a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807c:	e00a      	b.n	8008094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800807e:	f7fd fd41 	bl	8005b04 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	f241 3288 	movw	r2, #5000	; 0x1388
 800808c:	4293      	cmp	r3, r2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e0ab      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008094:	4b57      	ldr	r3, [pc, #348]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0ee      	beq.n	800807e <HAL_RCC_OscConfig+0x37e>
 80080a0:	e014      	b.n	80080cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080a2:	f7fd fd2f 	bl	8005b04 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080a8:	e00a      	b.n	80080c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080aa:	f7fd fd2b 	bl	8005b04 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e095      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080c0:	4b4c      	ldr	r3, [pc, #304]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1ee      	bne.n	80080aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d105      	bne.n	80080de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080d2:	4b48      	ldr	r3, [pc, #288]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	4a47      	ldr	r2, [pc, #284]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80080d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8081 	beq.w	80081ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080e8:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 030c 	and.w	r3, r3, #12
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d061      	beq.n	80081b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d146      	bne.n	800818a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080fc:	4b3f      	ldr	r3, [pc, #252]	; (80081fc <HAL_RCC_OscConfig+0x4fc>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008102:	f7fd fcff 	bl	8005b04 <HAL_GetTick>
 8008106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800810a:	f7fd fcfb 	bl	8005b04 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e067      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800811c:	4b35      	ldr	r3, [pc, #212]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f0      	bne.n	800810a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008130:	d108      	bne.n	8008144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008132:	4b30      	ldr	r3, [pc, #192]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	492d      	ldr	r1, [pc, #180]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008140:	4313      	orrs	r3, r2
 8008142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008144:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a19      	ldr	r1, [r3, #32]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	430b      	orrs	r3, r1
 8008156:	4927      	ldr	r1, [pc, #156]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 8008158:	4313      	orrs	r3, r2
 800815a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800815c:	4b27      	ldr	r3, [pc, #156]	; (80081fc <HAL_RCC_OscConfig+0x4fc>)
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008162:	f7fd fccf 	bl	8005b04 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800816a:	f7fd fccb 	bl	8005b04 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e037      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800817c:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <HAL_RCC_OscConfig+0x46a>
 8008188:	e02f      	b.n	80081ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800818a:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <HAL_RCC_OscConfig+0x4fc>)
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008190:	f7fd fcb8 	bl	8005b04 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008198:	f7fd fcb4 	bl	8005b04 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e020      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0x498>
 80081b6:	e018      	b.n	80081ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e013      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCC_OscConfig+0x4f4>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d106      	bne.n	80081e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d001      	beq.n	80081ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40021000 	.word	0x40021000
 80081f8:	40007000 	.word	0x40007000
 80081fc:	42420060 	.word	0x42420060

08008200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e0d0      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008214:	4b6a      	ldr	r3, [pc, #424]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d910      	bls.n	8008244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008222:	4b67      	ldr	r3, [pc, #412]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f023 0207 	bic.w	r2, r3, #7
 800822a:	4965      	ldr	r1, [pc, #404]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008232:	4b63      	ldr	r3, [pc, #396]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d001      	beq.n	8008244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e0b8      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d020      	beq.n	8008292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800825c:	4b59      	ldr	r3, [pc, #356]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a58      	ldr	r2, [pc, #352]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 8008262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008274:	4b53      	ldr	r3, [pc, #332]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a52      	ldr	r2, [pc, #328]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800827a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800827e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008280:	4b50      	ldr	r3, [pc, #320]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	494d      	ldr	r1, [pc, #308]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800828e:	4313      	orrs	r3, r2
 8008290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d040      	beq.n	8008320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d107      	bne.n	80082b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a6:	4b47      	ldr	r3, [pc, #284]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d115      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e07f      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d107      	bne.n	80082ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082be:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e073      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ce:	4b3d      	ldr	r3, [pc, #244]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e06b      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082de:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f023 0203 	bic.w	r2, r3, #3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4936      	ldr	r1, [pc, #216]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082f0:	f7fd fc08 	bl	8005b04 <HAL_GetTick>
 80082f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f6:	e00a      	b.n	800830e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f8:	f7fd fc04 	bl	8005b04 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	f241 3288 	movw	r2, #5000	; 0x1388
 8008306:	4293      	cmp	r3, r2
 8008308:	d901      	bls.n	800830e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e053      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830e:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f003 020c 	and.w	r2, r3, #12
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	429a      	cmp	r2, r3
 800831e:	d1eb      	bne.n	80082f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008320:	4b27      	ldr	r3, [pc, #156]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d210      	bcs.n	8008350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f023 0207 	bic.w	r2, r3, #7
 8008336:	4922      	ldr	r1, [pc, #136]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	4313      	orrs	r3, r2
 800833c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800833e:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d001      	beq.n	8008350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e032      	b.n	80083b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800835c:	4b19      	ldr	r3, [pc, #100]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	4916      	ldr	r1, [pc, #88]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800836a:	4313      	orrs	r3, r2
 800836c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800837a:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	490e      	ldr	r1, [pc, #56]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 800838a:	4313      	orrs	r3, r2
 800838c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800838e:	f000 f821 	bl	80083d4 <HAL_RCC_GetSysClockFreq>
 8008392:	4601      	mov	r1, r0
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <HAL_RCC_ClockConfig+0x1c8>)
 80083a0:	5cd3      	ldrb	r3, [r2, r3]
 80083a2:	fa21 f303 	lsr.w	r3, r1, r3
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <HAL_RCC_ClockConfig+0x1cc>)
 80083a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80083aa:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <HAL_RCC_ClockConfig+0x1d0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fb66 	bl	8005a80 <HAL_InitTick>

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	40022000 	.word	0x40022000
 80083c4:	40021000 	.word	0x40021000
 80083c8:	0800cb48 	.word	0x0800cb48
 80083cc:	20000008 	.word	0x20000008
 80083d0:	2000000c 	.word	0x2000000c

080083d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083d4:	b490      	push	{r4, r7}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80083da:	4b2a      	ldr	r3, [pc, #168]	; (8008484 <HAL_RCC_GetSysClockFreq+0xb0>)
 80083dc:	1d3c      	adds	r4, r7, #4
 80083de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80083e4:	4b28      	ldr	r3, [pc, #160]	; (8008488 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	2300      	movs	r3, #0
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80083fe:	4b23      	ldr	r3, [pc, #140]	; (800848c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f003 030c 	and.w	r3, r3, #12
 800840a:	2b04      	cmp	r3, #4
 800840c:	d002      	beq.n	8008414 <HAL_RCC_GetSysClockFreq+0x40>
 800840e:	2b08      	cmp	r3, #8
 8008410:	d003      	beq.n	800841a <HAL_RCC_GetSysClockFreq+0x46>
 8008412:	e02d      	b.n	8008470 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008414:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008416:	623b      	str	r3, [r7, #32]
      break;
 8008418:	e02d      	b.n	8008476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	0c9b      	lsrs	r3, r3, #18
 800841e:	f003 030f 	and.w	r3, r3, #15
 8008422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008426:	4413      	add	r3, r2
 8008428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800842c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008438:	4b14      	ldr	r3, [pc, #80]	; (800848c <HAL_RCC_GetSysClockFreq+0xb8>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	0c5b      	lsrs	r3, r3, #17
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008446:	4413      	add	r3, r2
 8008448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800844c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	4a0f      	ldr	r2, [pc, #60]	; (8008490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008452:	fb02 f203 	mul.w	r2, r2, r3
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
 800845e:	e004      	b.n	800846a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	4a0c      	ldr	r2, [pc, #48]	; (8008494 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008464:	fb02 f303 	mul.w	r3, r2, r3
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	623b      	str	r3, [r7, #32]
      break;
 800846e:	e002      	b.n	8008476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008472:	623b      	str	r3, [r7, #32]
      break;
 8008474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008476:	6a3b      	ldr	r3, [r7, #32]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	; 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bc90      	pop	{r4, r7}
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	0800c380 	.word	0x0800c380
 8008488:	0800c390 	.word	0x0800c390
 800848c:	40021000 	.word	0x40021000
 8008490:	007a1200 	.word	0x007a1200
 8008494:	003d0900 	.word	0x003d0900

08008498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800849e:	681b      	ldr	r3, [r3, #0]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr
 80084a8:	20000008 	.word	0x20000008

080084ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084b0:	f7ff fff2 	bl	8008498 <HAL_RCC_GetHCLKFreq>
 80084b4:	4601      	mov	r1, r0
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	4a03      	ldr	r2, [pc, #12]	; (80084d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084c2:	5cd3      	ldrb	r3, [r2, r3]
 80084c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40021000 	.word	0x40021000
 80084d0:	0800cb58 	.word	0x0800cb58

080084d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80084d8:	f7ff ffde 	bl	8008498 <HAL_RCC_GetHCLKFreq>
 80084dc:	4601      	mov	r1, r0
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	0adb      	lsrs	r3, r3, #11
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	4a03      	ldr	r2, [pc, #12]	; (80084f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ea:	5cd3      	ldrb	r3, [r2, r3]
 80084ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40021000 	.word	0x40021000
 80084f8:	0800cb58 	.word	0x0800cb58

080084fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <RCC_Delay+0x34>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a0a      	ldr	r2, [pc, #40]	; (8008534 <RCC_Delay+0x38>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	0a5b      	lsrs	r3, r3, #9
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	fb02 f303 	mul.w	r3, r2, r3
 8008516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008518:	bf00      	nop
  }
  while (Delay --);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	1e5a      	subs	r2, r3, #1
 800851e:	60fa      	str	r2, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f9      	bne.n	8008518 <RCC_Delay+0x1c>
}
 8008524:	bf00      	nop
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000008 	.word	0x20000008
 8008534:	10624dd3 	.word	0x10624dd3

08008538 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d07d      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008554:	2300      	movs	r3, #0
 8008556:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008558:	4b4f      	ldr	r3, [pc, #316]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10d      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008564:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4a4b      	ldr	r2, [pc, #300]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800856a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800856e:	61d3      	str	r3, [r2, #28]
 8008570:	4b49      	ldr	r3, [pc, #292]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800857c:	2301      	movs	r3, #1
 800857e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008580:	4b46      	ldr	r3, [pc, #280]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d118      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800858c:	4b43      	ldr	r3, [pc, #268]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a42      	ldr	r2, [pc, #264]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008598:	f7fd fab4 	bl	8005b04 <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800859e:	e008      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a0:	f7fd fab0 	bl	8005b04 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b64      	cmp	r3, #100	; 0x64
 80085ac:	d901      	bls.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e06d      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b2:	4b3a      	ldr	r3, [pc, #232]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0f0      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085be:	4b36      	ldr	r3, [pc, #216]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d02e      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d027      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085dc:	4b2e      	ldr	r3, [pc, #184]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085e6:	4b2e      	ldr	r3, [pc, #184]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085ec:	4b2c      	ldr	r3, [pc, #176]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80085f2:	4a29      	ldr	r2, [pc, #164]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008602:	f7fd fa7f 	bl	8005b04 <HAL_GetTick>
 8008606:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	e00a      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800860a:	f7fd fa7b 	bl	8005b04 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e036      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008620:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0ee      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4917      	ldr	r1, [pc, #92]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800863a:	4313      	orrs	r3, r2
 800863c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d105      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008644:	4b14      	ldr	r3, [pc, #80]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	4a13      	ldr	r2, [pc, #76]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800864a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800864e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	490b      	ldr	r1, [pc, #44]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800866a:	4313      	orrs	r3, r2
 800866c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4904      	ldr	r1, [pc, #16]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008688:	4313      	orrs	r3, r2
 800868a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40021000 	.word	0x40021000
 800869c:	40007000 	.word	0x40007000
 80086a0:	42420440 	.word	0x42420440

080086a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086a4:	b590      	push	{r4, r7, lr}
 80086a6:	b08d      	sub	sp, #52	; 0x34
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80086ac:	4b55      	ldr	r3, [pc, #340]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80086ae:	f107 040c 	add.w	r4, r7, #12
 80086b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80086b8:	4b53      	ldr	r3, [pc, #332]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
 80086c2:	2300      	movs	r3, #0
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c6:	2300      	movs	r3, #0
 80086c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	2300      	movs	r3, #0
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d07f      	beq.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d002      	beq.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d048      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80086e0:	e08b      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80086e2:	4b4a      	ldr	r3, [pc, #296]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80086e8:	4b48      	ldr	r3, [pc, #288]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d07f      	beq.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	0c9b      	lsrs	r3, r3, #18
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008700:	4413      	add	r3, r2
 8008702:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008706:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d018      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008712:	4b3e      	ldr	r3, [pc, #248]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	0c5b      	lsrs	r3, r3, #17
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008720:	4413      	add	r3, r2
 8008722:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008732:	4a37      	ldr	r2, [pc, #220]	; (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	fbb2 f2f3 	udiv	r2, r2, r3
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008742:	e004      	b.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	4a33      	ldr	r2, [pc, #204]	; (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8008748:	fb02 f303 	mul.w	r3, r2, r3
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800874e:	4b2f      	ldr	r3, [pc, #188]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800875a:	d102      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008760:	e048      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008770:	e040      	b.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8008772:	4b26      	ldr	r3, [pc, #152]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008782:	d108      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28
 8008794:	e01f      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800879c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a0:	d109      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80087ae:	f649 4340 	movw	r3, #40000	; 0x9c40
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087b4:	e00f      	b.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c0:	d11a      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d014      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80087ce:	f24f 4324 	movw	r3, #62500	; 0xf424
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80087d4:	e010      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80087d6:	e00f      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80087d8:	f7ff fe7c 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
 80087dc:	4602      	mov	r2, r0
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	0b9b      	lsrs	r3, r3, #14
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	3301      	adds	r3, #1
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80087f2:	e002      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80087f4:	bf00      	nop
 80087f6:	e000      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80087f8:	bf00      	nop
    }
  }
  return (frequency);
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3734      	adds	r7, #52	; 0x34
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}
 8008804:	0800c394 	.word	0x0800c394
 8008808:	0800c3a4 	.word	0x0800c3a4
 800880c:	40021000 	.word	0x40021000
 8008810:	007a1200 	.word	0x007a1200
 8008814:	003d0900 	.word	0x003d0900
 8008818:	aaaaaaab 	.word	0xaaaaaaab

0800881c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e053      	b.n	80088d6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7fb fbf9 	bl	8004040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008864:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	ea42 0103 	orr.w	r1, r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	0c1a      	lsrs	r2, r3, #16
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f002 0204 	and.w	r2, r2, #4
 80088b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e01d      	b.n	800892c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fb fbe7 	bl	80040d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f000 fb45 	bl	8008fac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b06      	cmp	r3, #6
 800895c:	d007      	beq.n	800896e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0201 	orr.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e01d      	b.n	80089c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f815 	bl	80089d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 faf7 	bl	8008fac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
	...

080089e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2201      	movs	r2, #1
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fd58 	bl	80094ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <HAL_TIM_PWM_Start+0x60>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d107      	bne.n	8008a16 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b06      	cmp	r3, #6
 8008a26:	d007      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	40012c00 	.word	0x40012c00

08008a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d122      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d11b      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0202 	mvn.w	r2, #2
 8008a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f003 0303 	and.w	r3, r3, #3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa73 	bl	8008f76 <HAL_TIM_IC_CaptureCallback>
 8008a90:	e005      	b.n	8008a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa66 	bl	8008f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa75 	bl	8008f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d122      	bne.n	8008af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d11b      	bne.n	8008af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f06f 0204 	mvn.w	r2, #4
 8008ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2202      	movs	r2, #2
 8008ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa49 	bl	8008f76 <HAL_TIM_IC_CaptureCallback>
 8008ae4:	e005      	b.n	8008af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa3c 	bl	8008f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa4b 	bl	8008f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b08      	cmp	r3, #8
 8008b04:	d122      	bne.n	8008b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d11b      	bne.n	8008b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f06f 0208 	mvn.w	r2, #8
 8008b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2204      	movs	r2, #4
 8008b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa1f 	bl	8008f76 <HAL_TIM_IC_CaptureCallback>
 8008b38:	e005      	b.n	8008b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa12 	bl	8008f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa21 	bl	8008f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d122      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d11b      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f06f 0210 	mvn.w	r2, #16
 8008b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2208      	movs	r2, #8
 8008b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9f5 	bl	8008f76 <HAL_TIM_IC_CaptureCallback>
 8008b8c:	e005      	b.n	8008b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f9e8 	bl	8008f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9f7 	bl	8008f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d10e      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d107      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f06f 0201 	mvn.w	r2, #1
 8008bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f9c3 	bl	8008f52 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be4:	2b80      	cmp	r3, #128	; 0x80
 8008be6:	d107      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fd1c 	bl	8009630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	d10e      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	d107      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f9bb 	bl	8008f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d10e      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d107      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0220 	mvn.w	r2, #32
 8008c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fce7 	bl	800961e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e0b4      	b.n	8008ddc <HAL_TIM_PWM_ConfigChannel+0x184>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b0c      	cmp	r3, #12
 8008c86:	f200 809f 	bhi.w	8008dc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cc5 	.word	0x08008cc5
 8008c94:	08008dc9 	.word	0x08008dc9
 8008c98:	08008dc9 	.word	0x08008dc9
 8008c9c:	08008dc9 	.word	0x08008dc9
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008dc9 	.word	0x08008dc9
 8008ca8:	08008dc9 	.word	0x08008dc9
 8008cac:	08008dc9 	.word	0x08008dc9
 8008cb0:	08008d47 	.word	0x08008d47
 8008cb4:	08008dc9 	.word	0x08008dc9
 8008cb8:	08008dc9 	.word	0x08008dc9
 8008cbc:	08008dc9 	.word	0x08008dc9
 8008cc0:	08008d87 	.word	0x08008d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f9d0 	bl	8009070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0208 	orr.w	r2, r2, #8
 8008cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0204 	bic.w	r2, r2, #4
 8008cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6999      	ldr	r1, [r3, #24]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	619a      	str	r2, [r3, #24]
      break;
 8008d02:	e062      	b.n	8008dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fa16 	bl	800913c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6999      	ldr	r1, [r3, #24]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	021a      	lsls	r2, r3, #8
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	619a      	str	r2, [r3, #24]
      break;
 8008d44:	e041      	b.n	8008dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fa5f 	bl	8009210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69da      	ldr	r2, [r3, #28]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0208 	orr.w	r2, r2, #8
 8008d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0204 	bic.w	r2, r2, #4
 8008d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69d9      	ldr	r1, [r3, #28]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	61da      	str	r2, [r3, #28]
      break;
 8008d84:	e021      	b.n	8008dca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 faa9 	bl	80092e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69da      	ldr	r2, [r3, #28]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69d9      	ldr	r1, [r3, #28]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	021a      	lsls	r2, r3, #8
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	61da      	str	r2, [r3, #28]
      break;
 8008dc6:	e000      	b.n	8008dca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008dc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_TIM_ConfigClockSource+0x18>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e0a6      	b.n	8008f4a <HAL_TIM_ConfigClockSource+0x166>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b40      	cmp	r3, #64	; 0x40
 8008e32:	d067      	beq.n	8008f04 <HAL_TIM_ConfigClockSource+0x120>
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d80b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x6c>
 8008e38:	2b10      	cmp	r3, #16
 8008e3a:	d073      	beq.n	8008f24 <HAL_TIM_ConfigClockSource+0x140>
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d802      	bhi.n	8008e46 <HAL_TIM_ConfigClockSource+0x62>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d06f      	beq.n	8008f24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008e44:	e078      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d06c      	beq.n	8008f24 <HAL_TIM_ConfigClockSource+0x140>
 8008e4a:	2b30      	cmp	r3, #48	; 0x30
 8008e4c:	d06a      	beq.n	8008f24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008e4e:	e073      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e50:	2b70      	cmp	r3, #112	; 0x70
 8008e52:	d00d      	beq.n	8008e70 <HAL_TIM_ConfigClockSource+0x8c>
 8008e54:	2b70      	cmp	r3, #112	; 0x70
 8008e56:	d804      	bhi.n	8008e62 <HAL_TIM_ConfigClockSource+0x7e>
 8008e58:	2b50      	cmp	r3, #80	; 0x50
 8008e5a:	d033      	beq.n	8008ec4 <HAL_TIM_ConfigClockSource+0xe0>
 8008e5c:	2b60      	cmp	r3, #96	; 0x60
 8008e5e:	d041      	beq.n	8008ee4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e60:	e06a      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e66:	d066      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x152>
 8008e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e6c:	d017      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e6e:	e063      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6899      	ldr	r1, [r3, #8]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f000 faf5 	bl	800946e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	609a      	str	r2, [r3, #8]
      break;
 8008e9c:	e04c      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6899      	ldr	r1, [r3, #8]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f000 fade 	bl	800946e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ec0:	609a      	str	r2, [r3, #8]
      break;
 8008ec2:	e039      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	6859      	ldr	r1, [r3, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f000 fa55 	bl	8009380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2150      	movs	r1, #80	; 0x50
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 faac 	bl	800943a <TIM_ITRx_SetConfig>
      break;
 8008ee2:	e029      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f000 fa73 	bl	80093dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2160      	movs	r1, #96	; 0x60
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fa9c 	bl	800943a <TIM_ITRx_SetConfig>
      break;
 8008f02:	e019      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6859      	ldr	r1, [r3, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	461a      	mov	r2, r3
 8008f12:	f000 fa35 	bl	8009380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2140      	movs	r1, #64	; 0x40
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fa8c 	bl	800943a <TIM_ITRx_SetConfig>
      break;
 8008f22:	e009      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f000 fa83 	bl	800943a <TIM_ITRx_SetConfig>
      break;
 8008f34:	e000      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr

08008f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr

08008f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr

08008f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bc80      	pop	{r7}
 8008faa:	4770      	bx	lr

08008fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a29      	ldr	r2, [pc, #164]	; (8009064 <TIM_Base_SetConfig+0xb8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00b      	beq.n	8008fdc <TIM_Base_SetConfig+0x30>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fca:	d007      	beq.n	8008fdc <TIM_Base_SetConfig+0x30>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a26      	ldr	r2, [pc, #152]	; (8009068 <TIM_Base_SetConfig+0xbc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_Base_SetConfig+0x30>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a25      	ldr	r2, [pc, #148]	; (800906c <TIM_Base_SetConfig+0xc0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d108      	bne.n	8008fee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1c      	ldr	r2, [pc, #112]	; (8009064 <TIM_Base_SetConfig+0xb8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00b      	beq.n	800900e <TIM_Base_SetConfig+0x62>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d007      	beq.n	800900e <TIM_Base_SetConfig+0x62>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <TIM_Base_SetConfig+0xbc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d003      	beq.n	800900e <TIM_Base_SetConfig+0x62>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a18      	ldr	r2, [pc, #96]	; (800906c <TIM_Base_SetConfig+0xc0>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d108      	bne.n	8009020 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a07      	ldr	r2, [pc, #28]	; (8009064 <TIM_Base_SetConfig+0xb8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d103      	bne.n	8009054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	615a      	str	r2, [r3, #20]
}
 800905a:	bf00      	nop
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40000400 	.word	0x40000400
 800906c:	40000800 	.word	0x40000800

08009070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0201 	bic.w	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0303 	bic.w	r3, r3, #3
 80090a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f023 0302 	bic.w	r3, r3, #2
 80090b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <TIM_OC1_SetConfig+0xc8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d10c      	bne.n	80090e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f023 0308 	bic.w	r3, r3, #8
 80090d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f023 0304 	bic.w	r3, r3, #4
 80090e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a13      	ldr	r2, [pc, #76]	; (8009138 <TIM_OC1_SetConfig+0xc8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d111      	bne.n	8009112 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	4313      	orrs	r3, r2
 8009106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	4313      	orrs	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	621a      	str	r2, [r3, #32]
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40012c00 	.word	0x40012c00

0800913c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	f023 0210 	bic.w	r2, r3, #16
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f023 0320 	bic.w	r3, r3, #32
 8009186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a1d      	ldr	r2, [pc, #116]	; (800920c <TIM_OC2_SetConfig+0xd0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d10d      	bne.n	80091b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a14      	ldr	r2, [pc, #80]	; (800920c <TIM_OC2_SetConfig+0xd0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d113      	bne.n	80091e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	621a      	str	r2, [r3, #32]
}
 8009202:	bf00      	nop
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr
 800920c:	40012c00 	.word	0x40012c00

08009210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0303 	bic.w	r3, r3, #3
 8009246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <TIM_OC3_SetConfig+0xd0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d10d      	bne.n	800928a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	021b      	lsls	r3, r3, #8
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <TIM_OC3_SetConfig+0xd0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d113      	bne.n	80092ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	621a      	str	r2, [r3, #32]
}
 80092d4:	bf00      	nop
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	bc80      	pop	{r7}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40012c00 	.word	0x40012c00

080092e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800932e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	031b      	lsls	r3, r3, #12
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a0f      	ldr	r2, [pc, #60]	; (800937c <TIM_OC4_SetConfig+0x98>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d109      	bne.n	8009358 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800934a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr
 800937c:	40012c00 	.word	0x40012c00

08009380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	f023 0201 	bic.w	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f023 030a 	bic.w	r3, r3, #10
 80093bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	621a      	str	r2, [r3, #32]
}
 80093d2:	bf00      	nop
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bc80      	pop	{r7}
 80093da:	4770      	bx	lr

080093dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f023 0210 	bic.w	r2, r3, #16
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009406:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	031b      	lsls	r3, r3, #12
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009418:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	621a      	str	r2, [r3, #32]
}
 8009430:	bf00      	nop
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr

0800943a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	f043 0307 	orr.w	r3, r3, #7
 800945c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	bc80      	pop	{r7}
 800946c:	4770      	bx	lr

0800946e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800946e:	b480      	push	{r7}
 8009470:	b087      	sub	sp, #28
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009488:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	021a      	lsls	r2, r3, #8
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	431a      	orrs	r2, r3
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4313      	orrs	r3, r2
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	609a      	str	r2, [r3, #8]
}
 80094a2:	bf00      	nop
 80094a4:	371c      	adds	r7, #28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f003 031f 	and.w	r3, r3, #31
 80094be:	2201      	movs	r2, #1
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1a      	ldr	r2, [r3, #32]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	43db      	mvns	r3, r3
 80094ce:	401a      	ands	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a1a      	ldr	r2, [r3, #32]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	431a      	orrs	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009508:	2302      	movs	r3, #2
 800950a:	e032      	b.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009544:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	4313      	orrs	r3, r2
 800954e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009594:	2302      	movs	r3, #2
 8009596:	e03d      	b.n	8009614 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	bc80      	pop	{r7}
 800961c:	4770      	bx	lr

0800961e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr

08009642 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e03f      	b.n	80096d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fa fda1 	bl	80041b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2224      	movs	r2, #36	; 0x24
 8009672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009684:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f828 	bl	80096dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800969a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695a      	ldr	r2, [r3, #20]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009716:	f023 030c 	bic.w	r3, r3, #12
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6812      	ldr	r2, [r2, #0]
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	430b      	orrs	r3, r1
 8009722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a52      	ldr	r2, [pc, #328]	; (8009888 <UART_SetConfig+0x1ac>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d14e      	bne.n	80097e2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009744:	f7fe fec6 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
 8009748:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009a      	lsls	r2, r3, #2
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	4a4a      	ldr	r2, [pc, #296]	; (800988c <UART_SetConfig+0x1b0>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	0119      	lsls	r1, r3, #4
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009a      	lsls	r2, r3, #2
 8009774:	441a      	add	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009780:	4b42      	ldr	r3, [pc, #264]	; (800988c <UART_SetConfig+0x1b0>)
 8009782:	fba3 0302 	umull	r0, r3, r3, r2
 8009786:	095b      	lsrs	r3, r3, #5
 8009788:	2064      	movs	r0, #100	; 0x64
 800978a:	fb00 f303 	mul.w	r3, r0, r3
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	3332      	adds	r3, #50	; 0x32
 8009794:	4a3d      	ldr	r2, [pc, #244]	; (800988c <UART_SetConfig+0x1b0>)
 8009796:	fba2 2303 	umull	r2, r3, r2, r3
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097a0:	4419      	add	r1, r3
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009a      	lsls	r2, r3, #2
 80097ac:	441a      	add	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80097b8:	4b34      	ldr	r3, [pc, #208]	; (800988c <UART_SetConfig+0x1b0>)
 80097ba:	fba3 0302 	umull	r0, r3, r3, r2
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	2064      	movs	r0, #100	; 0x64
 80097c2:	fb00 f303 	mul.w	r3, r0, r3
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	3332      	adds	r3, #50	; 0x32
 80097cc:	4a2f      	ldr	r2, [pc, #188]	; (800988c <UART_SetConfig+0x1b0>)
 80097ce:	fba2 2303 	umull	r2, r3, r2, r3
 80097d2:	095b      	lsrs	r3, r3, #5
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	440a      	add	r2, r1
 80097de:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80097e0:	e04d      	b.n	800987e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80097e2:	f7fe fe63 	bl	80084ac <HAL_RCC_GetPCLK1Freq>
 80097e6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009a      	lsls	r2, r3, #2
 80097f2:	441a      	add	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80097fe:	4a23      	ldr	r2, [pc, #140]	; (800988c <UART_SetConfig+0x1b0>)
 8009800:	fba2 2303 	umull	r2, r3, r2, r3
 8009804:	095b      	lsrs	r3, r3, #5
 8009806:	0119      	lsls	r1, r3, #4
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009a      	lsls	r2, r3, #2
 8009812:	441a      	add	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	fbb2 f2f3 	udiv	r2, r2, r3
 800981e:	4b1b      	ldr	r3, [pc, #108]	; (800988c <UART_SetConfig+0x1b0>)
 8009820:	fba3 0302 	umull	r0, r3, r3, r2
 8009824:	095b      	lsrs	r3, r3, #5
 8009826:	2064      	movs	r0, #100	; 0x64
 8009828:	fb00 f303 	mul.w	r3, r0, r3
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	3332      	adds	r3, #50	; 0x32
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <UART_SetConfig+0x1b0>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800983e:	4419      	add	r1, r3
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009a      	lsls	r2, r3, #2
 800984a:	441a      	add	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	fbb2 f2f3 	udiv	r2, r2, r3
 8009856:	4b0d      	ldr	r3, [pc, #52]	; (800988c <UART_SetConfig+0x1b0>)
 8009858:	fba3 0302 	umull	r0, r3, r3, r2
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	2064      	movs	r0, #100	; 0x64
 8009860:	fb00 f303 	mul.w	r3, r0, r3
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	3332      	adds	r3, #50	; 0x32
 800986a:	4a08      	ldr	r2, [pc, #32]	; (800988c <UART_SetConfig+0x1b0>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	095b      	lsrs	r3, r3, #5
 8009872:	f003 020f 	and.w	r2, r3, #15
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	440a      	add	r2, r1
 800987c:	609a      	str	r2, [r3, #8]
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	40013800 	.word	0x40013800
 800988c:	51eb851f 	.word	0x51eb851f

08009890 <__errno>:
 8009890:	4b01      	ldr	r3, [pc, #4]	; (8009898 <__errno+0x8>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	20000014 	.word	0x20000014

0800989c <__libc_init_array>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	2500      	movs	r5, #0
 80098a0:	4e0c      	ldr	r6, [pc, #48]	; (80098d4 <__libc_init_array+0x38>)
 80098a2:	4c0d      	ldr	r4, [pc, #52]	; (80098d8 <__libc_init_array+0x3c>)
 80098a4:	1ba4      	subs	r4, r4, r6
 80098a6:	10a4      	asrs	r4, r4, #2
 80098a8:	42a5      	cmp	r5, r4
 80098aa:	d109      	bne.n	80098c0 <__libc_init_array+0x24>
 80098ac:	f002 fbe8 	bl	800c080 <_init>
 80098b0:	2500      	movs	r5, #0
 80098b2:	4e0a      	ldr	r6, [pc, #40]	; (80098dc <__libc_init_array+0x40>)
 80098b4:	4c0a      	ldr	r4, [pc, #40]	; (80098e0 <__libc_init_array+0x44>)
 80098b6:	1ba4      	subs	r4, r4, r6
 80098b8:	10a4      	asrs	r4, r4, #2
 80098ba:	42a5      	cmp	r5, r4
 80098bc:	d105      	bne.n	80098ca <__libc_init_array+0x2e>
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098c4:	4798      	blx	r3
 80098c6:	3501      	adds	r5, #1
 80098c8:	e7ee      	b.n	80098a8 <__libc_init_array+0xc>
 80098ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098ce:	4798      	blx	r3
 80098d0:	3501      	adds	r5, #1
 80098d2:	e7f2      	b.n	80098ba <__libc_init_array+0x1e>
 80098d4:	0800ce08 	.word	0x0800ce08
 80098d8:	0800ce08 	.word	0x0800ce08
 80098dc:	0800ce08 	.word	0x0800ce08
 80098e0:	0800ce0c 	.word	0x0800ce0c

080098e4 <malloc>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <malloc+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f000 b879 	b.w	80099e0 <_malloc_r>
 80098ee:	bf00      	nop
 80098f0:	20000014 	.word	0x20000014

080098f4 <free>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <free+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b825 	b.w	8009948 <_free_r>
 80098fe:	bf00      	nop
 8009900:	20000014 	.word	0x20000014

08009904 <memcmp>:
 8009904:	b530      	push	{r4, r5, lr}
 8009906:	2400      	movs	r4, #0
 8009908:	42a2      	cmp	r2, r4
 800990a:	d101      	bne.n	8009910 <memcmp+0xc>
 800990c:	2000      	movs	r0, #0
 800990e:	e007      	b.n	8009920 <memcmp+0x1c>
 8009910:	5d03      	ldrb	r3, [r0, r4]
 8009912:	3401      	adds	r4, #1
 8009914:	190d      	adds	r5, r1, r4
 8009916:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800991a:	42ab      	cmp	r3, r5
 800991c:	d0f4      	beq.n	8009908 <memcmp+0x4>
 800991e:	1b58      	subs	r0, r3, r5
 8009920:	bd30      	pop	{r4, r5, pc}

08009922 <memcpy>:
 8009922:	b510      	push	{r4, lr}
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	440a      	add	r2, r1
 8009928:	4291      	cmp	r1, r2
 800992a:	d100      	bne.n	800992e <memcpy+0xc>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009936:	e7f7      	b.n	8009928 <memcpy+0x6>

08009938 <memset>:
 8009938:	4603      	mov	r3, r0
 800993a:	4402      	add	r2, r0
 800993c:	4293      	cmp	r3, r2
 800993e:	d100      	bne.n	8009942 <memset+0xa>
 8009940:	4770      	bx	lr
 8009942:	f803 1b01 	strb.w	r1, [r3], #1
 8009946:	e7f9      	b.n	800993c <memset+0x4>

08009948 <_free_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	2900      	cmp	r1, #0
 800994e:	d043      	beq.n	80099d8 <_free_r+0x90>
 8009950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009954:	1f0c      	subs	r4, r1, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfb8      	it	lt
 800995a:	18e4      	addlt	r4, r4, r3
 800995c:	f001 fb78 	bl	800b050 <__malloc_lock>
 8009960:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <_free_r+0x94>)
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	4610      	mov	r0, r2
 8009966:	b933      	cbnz	r3, 8009976 <_free_r+0x2e>
 8009968:	6063      	str	r3, [r4, #4]
 800996a:	6014      	str	r4, [r2, #0]
 800996c:	4628      	mov	r0, r5
 800996e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009972:	f001 bb6e 	b.w	800b052 <__malloc_unlock>
 8009976:	42a3      	cmp	r3, r4
 8009978:	d90b      	bls.n	8009992 <_free_r+0x4a>
 800997a:	6821      	ldr	r1, [r4, #0]
 800997c:	1862      	adds	r2, r4, r1
 800997e:	4293      	cmp	r3, r2
 8009980:	bf01      	itttt	eq
 8009982:	681a      	ldreq	r2, [r3, #0]
 8009984:	685b      	ldreq	r3, [r3, #4]
 8009986:	1852      	addeq	r2, r2, r1
 8009988:	6022      	streq	r2, [r4, #0]
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	e7ed      	b.n	800996c <_free_r+0x24>
 8009990:	4613      	mov	r3, r2
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	b10a      	cbz	r2, 800999a <_free_r+0x52>
 8009996:	42a2      	cmp	r2, r4
 8009998:	d9fa      	bls.n	8009990 <_free_r+0x48>
 800999a:	6819      	ldr	r1, [r3, #0]
 800999c:	1858      	adds	r0, r3, r1
 800999e:	42a0      	cmp	r0, r4
 80099a0:	d10b      	bne.n	80099ba <_free_r+0x72>
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	4401      	add	r1, r0
 80099a6:	1858      	adds	r0, r3, r1
 80099a8:	4282      	cmp	r2, r0
 80099aa:	6019      	str	r1, [r3, #0]
 80099ac:	d1de      	bne.n	800996c <_free_r+0x24>
 80099ae:	6810      	ldr	r0, [r2, #0]
 80099b0:	6852      	ldr	r2, [r2, #4]
 80099b2:	4401      	add	r1, r0
 80099b4:	6019      	str	r1, [r3, #0]
 80099b6:	605a      	str	r2, [r3, #4]
 80099b8:	e7d8      	b.n	800996c <_free_r+0x24>
 80099ba:	d902      	bls.n	80099c2 <_free_r+0x7a>
 80099bc:	230c      	movs	r3, #12
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	e7d4      	b.n	800996c <_free_r+0x24>
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	1821      	adds	r1, r4, r0
 80099c6:	428a      	cmp	r2, r1
 80099c8:	bf01      	itttt	eq
 80099ca:	6811      	ldreq	r1, [r2, #0]
 80099cc:	6852      	ldreq	r2, [r2, #4]
 80099ce:	1809      	addeq	r1, r1, r0
 80099d0:	6021      	streq	r1, [r4, #0]
 80099d2:	6062      	str	r2, [r4, #4]
 80099d4:	605c      	str	r4, [r3, #4]
 80099d6:	e7c9      	b.n	800996c <_free_r+0x24>
 80099d8:	bd38      	pop	{r3, r4, r5, pc}
 80099da:	bf00      	nop
 80099dc:	20000270 	.word	0x20000270

080099e0 <_malloc_r>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	1ccd      	adds	r5, r1, #3
 80099e4:	f025 0503 	bic.w	r5, r5, #3
 80099e8:	3508      	adds	r5, #8
 80099ea:	2d0c      	cmp	r5, #12
 80099ec:	bf38      	it	cc
 80099ee:	250c      	movcc	r5, #12
 80099f0:	2d00      	cmp	r5, #0
 80099f2:	4606      	mov	r6, r0
 80099f4:	db01      	blt.n	80099fa <_malloc_r+0x1a>
 80099f6:	42a9      	cmp	r1, r5
 80099f8:	d903      	bls.n	8009a02 <_malloc_r+0x22>
 80099fa:	230c      	movs	r3, #12
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	2000      	movs	r0, #0
 8009a00:	bd70      	pop	{r4, r5, r6, pc}
 8009a02:	f001 fb25 	bl	800b050 <__malloc_lock>
 8009a06:	4a21      	ldr	r2, [pc, #132]	; (8009a8c <_malloc_r+0xac>)
 8009a08:	6814      	ldr	r4, [r2, #0]
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	b991      	cbnz	r1, 8009a34 <_malloc_r+0x54>
 8009a0e:	4c20      	ldr	r4, [pc, #128]	; (8009a90 <_malloc_r+0xb0>)
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	b91b      	cbnz	r3, 8009a1c <_malloc_r+0x3c>
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 fc8d 	bl	800a334 <_sbrk_r>
 8009a1a:	6020      	str	r0, [r4, #0]
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f000 fc88 	bl	800a334 <_sbrk_r>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d124      	bne.n	8009a72 <_malloc_r+0x92>
 8009a28:	230c      	movs	r3, #12
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	6033      	str	r3, [r6, #0]
 8009a2e:	f001 fb10 	bl	800b052 <__malloc_unlock>
 8009a32:	e7e4      	b.n	80099fe <_malloc_r+0x1e>
 8009a34:	680b      	ldr	r3, [r1, #0]
 8009a36:	1b5b      	subs	r3, r3, r5
 8009a38:	d418      	bmi.n	8009a6c <_malloc_r+0x8c>
 8009a3a:	2b0b      	cmp	r3, #11
 8009a3c:	d90f      	bls.n	8009a5e <_malloc_r+0x7e>
 8009a3e:	600b      	str	r3, [r1, #0]
 8009a40:	18cc      	adds	r4, r1, r3
 8009a42:	50cd      	str	r5, [r1, r3]
 8009a44:	4630      	mov	r0, r6
 8009a46:	f001 fb04 	bl	800b052 <__malloc_unlock>
 8009a4a:	f104 000b 	add.w	r0, r4, #11
 8009a4e:	1d23      	adds	r3, r4, #4
 8009a50:	f020 0007 	bic.w	r0, r0, #7
 8009a54:	1ac3      	subs	r3, r0, r3
 8009a56:	d0d3      	beq.n	8009a00 <_malloc_r+0x20>
 8009a58:	425a      	negs	r2, r3
 8009a5a:	50e2      	str	r2, [r4, r3]
 8009a5c:	e7d0      	b.n	8009a00 <_malloc_r+0x20>
 8009a5e:	684b      	ldr	r3, [r1, #4]
 8009a60:	428c      	cmp	r4, r1
 8009a62:	bf16      	itet	ne
 8009a64:	6063      	strne	r3, [r4, #4]
 8009a66:	6013      	streq	r3, [r2, #0]
 8009a68:	460c      	movne	r4, r1
 8009a6a:	e7eb      	b.n	8009a44 <_malloc_r+0x64>
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	6849      	ldr	r1, [r1, #4]
 8009a70:	e7cc      	b.n	8009a0c <_malloc_r+0x2c>
 8009a72:	1cc4      	adds	r4, r0, #3
 8009a74:	f024 0403 	bic.w	r4, r4, #3
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d005      	beq.n	8009a88 <_malloc_r+0xa8>
 8009a7c:	1a21      	subs	r1, r4, r0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f000 fc58 	bl	800a334 <_sbrk_r>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d0cf      	beq.n	8009a28 <_malloc_r+0x48>
 8009a88:	6025      	str	r5, [r4, #0]
 8009a8a:	e7db      	b.n	8009a44 <_malloc_r+0x64>
 8009a8c:	20000270 	.word	0x20000270
 8009a90:	20000274 	.word	0x20000274

08009a94 <__cvt>:
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9a:	461e      	mov	r6, r3
 8009a9c:	bfbb      	ittet	lt
 8009a9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009aa2:	461e      	movlt	r6, r3
 8009aa4:	2300      	movge	r3, #0
 8009aa6:	232d      	movlt	r3, #45	; 0x2d
 8009aa8:	b088      	sub	sp, #32
 8009aaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009aac:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009ab0:	f027 0720 	bic.w	r7, r7, #32
 8009ab4:	2f46      	cmp	r7, #70	; 0x46
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009aba:	700b      	strb	r3, [r1, #0]
 8009abc:	d004      	beq.n	8009ac8 <__cvt+0x34>
 8009abe:	2f45      	cmp	r7, #69	; 0x45
 8009ac0:	d100      	bne.n	8009ac4 <__cvt+0x30>
 8009ac2:	3501      	adds	r5, #1
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e000      	b.n	8009aca <__cvt+0x36>
 8009ac8:	2303      	movs	r3, #3
 8009aca:	aa07      	add	r2, sp, #28
 8009acc:	9204      	str	r2, [sp, #16]
 8009ace:	aa06      	add	r2, sp, #24
 8009ad0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ad4:	e9cd 3500 	strd	r3, r5, [sp]
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4633      	mov	r3, r6
 8009adc:	f000 fce8 	bl	800a4b0 <_dtoa_r>
 8009ae0:	2f47      	cmp	r7, #71	; 0x47
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	d102      	bne.n	8009aec <__cvt+0x58>
 8009ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ae8:	07db      	lsls	r3, r3, #31
 8009aea:	d526      	bpl.n	8009b3a <__cvt+0xa6>
 8009aec:	2f46      	cmp	r7, #70	; 0x46
 8009aee:	eb08 0905 	add.w	r9, r8, r5
 8009af2:	d111      	bne.n	8009b18 <__cvt+0x84>
 8009af4:	f898 3000 	ldrb.w	r3, [r8]
 8009af8:	2b30      	cmp	r3, #48	; 0x30
 8009afa:	d10a      	bne.n	8009b12 <__cvt+0x7e>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	4620      	mov	r0, r4
 8009b02:	4631      	mov	r1, r6
 8009b04:	f7f6 ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8009b08:	b918      	cbnz	r0, 8009b12 <__cvt+0x7e>
 8009b0a:	f1c5 0501 	rsb	r5, r5, #1
 8009b0e:	f8ca 5000 	str.w	r5, [sl]
 8009b12:	f8da 3000 	ldr.w	r3, [sl]
 8009b16:	4499      	add	r9, r3
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4631      	mov	r1, r6
 8009b20:	f7f6 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8009b24:	b938      	cbnz	r0, 8009b36 <__cvt+0xa2>
 8009b26:	2230      	movs	r2, #48	; 0x30
 8009b28:	9b07      	ldr	r3, [sp, #28]
 8009b2a:	454b      	cmp	r3, r9
 8009b2c:	d205      	bcs.n	8009b3a <__cvt+0xa6>
 8009b2e:	1c59      	adds	r1, r3, #1
 8009b30:	9107      	str	r1, [sp, #28]
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e7f8      	b.n	8009b28 <__cvt+0x94>
 8009b36:	f8cd 901c 	str.w	r9, [sp, #28]
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b40:	eba3 0308 	sub.w	r3, r3, r8
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	b008      	add	sp, #32
 8009b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b4c <__exponent>:
 8009b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	bfb4      	ite	lt
 8009b52:	232d      	movlt	r3, #45	; 0x2d
 8009b54:	232b      	movge	r3, #43	; 0x2b
 8009b56:	4604      	mov	r4, r0
 8009b58:	bfb8      	it	lt
 8009b5a:	4249      	neglt	r1, r1
 8009b5c:	2909      	cmp	r1, #9
 8009b5e:	f804 2b02 	strb.w	r2, [r4], #2
 8009b62:	7043      	strb	r3, [r0, #1]
 8009b64:	dd21      	ble.n	8009baa <__exponent+0x5e>
 8009b66:	f10d 0307 	add.w	r3, sp, #7
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	260a      	movs	r6, #10
 8009b6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b72:	fb06 1115 	mls	r1, r6, r5, r1
 8009b76:	2d09      	cmp	r5, #9
 8009b78:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b80:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009b84:	4629      	mov	r1, r5
 8009b86:	dc09      	bgt.n	8009b9c <__exponent+0x50>
 8009b88:	3130      	adds	r1, #48	; 0x30
 8009b8a:	3b02      	subs	r3, #2
 8009b8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b90:	42bb      	cmp	r3, r7
 8009b92:	4622      	mov	r2, r4
 8009b94:	d304      	bcc.n	8009ba0 <__exponent+0x54>
 8009b96:	1a10      	subs	r0, r2, r0
 8009b98:	b003      	add	sp, #12
 8009b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	e7e6      	b.n	8009b6e <__exponent+0x22>
 8009ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba4:	f804 2b01 	strb.w	r2, [r4], #1
 8009ba8:	e7f2      	b.n	8009b90 <__exponent+0x44>
 8009baa:	2330      	movs	r3, #48	; 0x30
 8009bac:	4419      	add	r1, r3
 8009bae:	7083      	strb	r3, [r0, #2]
 8009bb0:	1d02      	adds	r2, r0, #4
 8009bb2:	70c1      	strb	r1, [r0, #3]
 8009bb4:	e7ef      	b.n	8009b96 <__exponent+0x4a>
	...

08009bb8 <_printf_float>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b091      	sub	sp, #68	; 0x44
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009bc2:	4693      	mov	fp, r2
 8009bc4:	461e      	mov	r6, r3
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	f001 fa26 	bl	800b018 <_localeconv_r>
 8009bcc:	6803      	ldr	r3, [r0, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	f7f6 fabd 	bl	8000150 <strlen>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	900a      	str	r0, [sp, #40]	; 0x28
 8009bde:	3307      	adds	r3, #7
 8009be0:	f023 0307 	bic.w	r3, r3, #7
 8009be4:	f103 0208 	add.w	r2, r3, #8
 8009be8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009bec:	f8d4 a000 	ldr.w	sl, [r4]
 8009bf0:	603a      	str	r2, [r7, #0]
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bfa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c08:	4ba6      	ldr	r3, [pc, #664]	; (8009ea4 <_printf_float+0x2ec>)
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c0e:	f7f6 fefd 	bl	8000a0c <__aeabi_dcmpun>
 8009c12:	bb68      	cbnz	r0, 8009c70 <_printf_float+0xb8>
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c18:	4ba2      	ldr	r3, [pc, #648]	; (8009ea4 <_printf_float+0x2ec>)
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c1e:	f7f6 fed7 	bl	80009d0 <__aeabi_dcmple>
 8009c22:	bb28      	cbnz	r0, 8009c70 <_printf_float+0xb8>
 8009c24:	2200      	movs	r2, #0
 8009c26:	2300      	movs	r3, #0
 8009c28:	4638      	mov	r0, r7
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 fec6 	bl	80009bc <__aeabi_dcmplt>
 8009c30:	b110      	cbz	r0, 8009c38 <_printf_float+0x80>
 8009c32:	232d      	movs	r3, #45	; 0x2d
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	4f9b      	ldr	r7, [pc, #620]	; (8009ea8 <_printf_float+0x2f0>)
 8009c3a:	4b9c      	ldr	r3, [pc, #624]	; (8009eac <_printf_float+0x2f4>)
 8009c3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c40:	bf98      	it	ls
 8009c42:	461f      	movls	r7, r3
 8009c44:	2303      	movs	r3, #3
 8009c46:	f04f 0900 	mov.w	r9, #0
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	f02a 0304 	bic.w	r3, sl, #4
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	9600      	str	r6, [sp, #0]
 8009c54:	465b      	mov	r3, fp
 8009c56:	aa0f      	add	r2, sp, #60	; 0x3c
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f9e2 	bl	800a024 <_printf_common>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f040 8090 	bne.w	8009d86 <_printf_float+0x1ce>
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c6a:	b011      	add	sp, #68	; 0x44
 8009c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	463a      	mov	r2, r7
 8009c72:	464b      	mov	r3, r9
 8009c74:	4638      	mov	r0, r7
 8009c76:	4649      	mov	r1, r9
 8009c78:	f7f6 fec8 	bl	8000a0c <__aeabi_dcmpun>
 8009c7c:	b110      	cbz	r0, 8009c84 <_printf_float+0xcc>
 8009c7e:	4f8c      	ldr	r7, [pc, #560]	; (8009eb0 <_printf_float+0x2f8>)
 8009c80:	4b8c      	ldr	r3, [pc, #560]	; (8009eb4 <_printf_float+0x2fc>)
 8009c82:	e7db      	b.n	8009c3c <_printf_float+0x84>
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	a80d      	add	r0, sp, #52	; 0x34
 8009c8e:	a90e      	add	r1, sp, #56	; 0x38
 8009c90:	d140      	bne.n	8009d14 <_printf_float+0x15c>
 8009c92:	2306      	movs	r3, #6
 8009c94:	6063      	str	r3, [r4, #4]
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009c9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	463a      	mov	r2, r7
 8009cae:	464b      	mov	r3, r9
 8009cb0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7ff feed 	bl	8009a94 <__cvt>
 8009cba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009cbe:	2b47      	cmp	r3, #71	; 0x47
 8009cc0:	4607      	mov	r7, r0
 8009cc2:	d109      	bne.n	8009cd8 <_printf_float+0x120>
 8009cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cc6:	1cd8      	adds	r0, r3, #3
 8009cc8:	db02      	blt.n	8009cd0 <_printf_float+0x118>
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	dd47      	ble.n	8009d60 <_printf_float+0x1a8>
 8009cd0:	f1a8 0802 	sub.w	r8, r8, #2
 8009cd4:	fa5f f888 	uxtb.w	r8, r8
 8009cd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009cdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cde:	d824      	bhi.n	8009d2a <_printf_float+0x172>
 8009ce0:	3901      	subs	r1, #1
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ce8:	910d      	str	r1, [sp, #52]	; 0x34
 8009cea:	f7ff ff2f 	bl	8009b4c <__exponent>
 8009cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cf0:	4681      	mov	r9, r0
 8009cf2:	1813      	adds	r3, r2, r0
 8009cf4:	2a01      	cmp	r2, #1
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	dc02      	bgt.n	8009d00 <_printf_float+0x148>
 8009cfa:	6822      	ldr	r2, [r4, #0]
 8009cfc:	07d1      	lsls	r1, r2, #31
 8009cfe:	d501      	bpl.n	8009d04 <_printf_float+0x14c>
 8009d00:	3301      	adds	r3, #1
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0a2      	beq.n	8009c52 <_printf_float+0x9a>
 8009d0c:	232d      	movs	r3, #45	; 0x2d
 8009d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d12:	e79e      	b.n	8009c52 <_printf_float+0x9a>
 8009d14:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009d18:	f000 816e 	beq.w	8009ff8 <_printf_float+0x440>
 8009d1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d20:	d1b9      	bne.n	8009c96 <_printf_float+0xde>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1b7      	bne.n	8009c96 <_printf_float+0xde>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e7b4      	b.n	8009c94 <_printf_float+0xdc>
 8009d2a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009d2e:	d119      	bne.n	8009d64 <_printf_float+0x1ac>
 8009d30:	2900      	cmp	r1, #0
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	dd0c      	ble.n	8009d50 <_printf_float+0x198>
 8009d36:	6121      	str	r1, [r4, #16]
 8009d38:	b913      	cbnz	r3, 8009d40 <_printf_float+0x188>
 8009d3a:	6822      	ldr	r2, [r4, #0]
 8009d3c:	07d2      	lsls	r2, r2, #31
 8009d3e:	d502      	bpl.n	8009d46 <_printf_float+0x18e>
 8009d40:	3301      	adds	r3, #1
 8009d42:	440b      	add	r3, r1
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d48:	f04f 0900 	mov.w	r9, #0
 8009d4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d4e:	e7d9      	b.n	8009d04 <_printf_float+0x14c>
 8009d50:	b913      	cbnz	r3, 8009d58 <_printf_float+0x1a0>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	07d0      	lsls	r0, r2, #31
 8009d56:	d501      	bpl.n	8009d5c <_printf_float+0x1a4>
 8009d58:	3302      	adds	r3, #2
 8009d5a:	e7f3      	b.n	8009d44 <_printf_float+0x18c>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e7f1      	b.n	8009d44 <_printf_float+0x18c>
 8009d60:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009d64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	db05      	blt.n	8009d78 <_printf_float+0x1c0>
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	6123      	str	r3, [r4, #16]
 8009d70:	07d1      	lsls	r1, r2, #31
 8009d72:	d5e8      	bpl.n	8009d46 <_printf_float+0x18e>
 8009d74:	3301      	adds	r3, #1
 8009d76:	e7e5      	b.n	8009d44 <_printf_float+0x18c>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfcc      	ite	gt
 8009d7c:	2301      	movgt	r3, #1
 8009d7e:	f1c3 0302 	rsble	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	e7de      	b.n	8009d44 <_printf_float+0x18c>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	055a      	lsls	r2, r3, #21
 8009d8a:	d407      	bmi.n	8009d9c <_printf_float+0x1e4>
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4659      	mov	r1, fp
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b0      	blx	r6
 8009d96:	3001      	adds	r0, #1
 8009d98:	d129      	bne.n	8009dee <_printf_float+0x236>
 8009d9a:	e764      	b.n	8009c66 <_printf_float+0xae>
 8009d9c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009da0:	f240 80d7 	bls.w	8009f52 <_printf_float+0x39a>
 8009da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	f7f6 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8009db0:	b388      	cbz	r0, 8009e16 <_printf_float+0x25e>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4a40      	ldr	r2, [pc, #256]	; (8009eb8 <_printf_float+0x300>)
 8009db6:	4659      	mov	r1, fp
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b0      	blx	r6
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f af52 	beq.w	8009c66 <_printf_float+0xae>
 8009dc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	db02      	blt.n	8009dd0 <_printf_float+0x218>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07d8      	lsls	r0, r3, #31
 8009dce:	d50e      	bpl.n	8009dee <_printf_float+0x236>
 8009dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b0      	blx	r6
 8009dda:	3001      	adds	r0, #1
 8009ddc:	f43f af43 	beq.w	8009c66 <_printf_float+0xae>
 8009de0:	2700      	movs	r7, #0
 8009de2:	f104 081a 	add.w	r8, r4, #26
 8009de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009de8:	3b01      	subs	r3, #1
 8009dea:	42bb      	cmp	r3, r7
 8009dec:	dc09      	bgt.n	8009e02 <_printf_float+0x24a>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	079f      	lsls	r7, r3, #30
 8009df2:	f100 80fd 	bmi.w	8009ff0 <_printf_float+0x438>
 8009df6:	68e0      	ldr	r0, [r4, #12]
 8009df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dfa:	4298      	cmp	r0, r3
 8009dfc:	bfb8      	it	lt
 8009dfe:	4618      	movlt	r0, r3
 8009e00:	e733      	b.n	8009c6a <_printf_float+0xb2>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4642      	mov	r2, r8
 8009e06:	4659      	mov	r1, fp
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b0      	blx	r6
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f af2a 	beq.w	8009c66 <_printf_float+0xae>
 8009e12:	3701      	adds	r7, #1
 8009e14:	e7e7      	b.n	8009de6 <_printf_float+0x22e>
 8009e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dc2b      	bgt.n	8009e74 <_printf_float+0x2bc>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4a26      	ldr	r2, [pc, #152]	; (8009eb8 <_printf_float+0x300>)
 8009e20:	4659      	mov	r1, fp
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b0      	blx	r6
 8009e26:	3001      	adds	r0, #1
 8009e28:	f43f af1d 	beq.w	8009c66 <_printf_float+0xae>
 8009e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e2e:	b923      	cbnz	r3, 8009e3a <_printf_float+0x282>
 8009e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e32:	b913      	cbnz	r3, 8009e3a <_printf_float+0x282>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d5d9      	bpl.n	8009dee <_printf_float+0x236>
 8009e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e3e:	4659      	mov	r1, fp
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	3001      	adds	r0, #1
 8009e46:	f43f af0e 	beq.w	8009c66 <_printf_float+0xae>
 8009e4a:	f04f 0800 	mov.w	r8, #0
 8009e4e:	f104 091a 	add.w	r9, r4, #26
 8009e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e54:	425b      	negs	r3, r3
 8009e56:	4543      	cmp	r3, r8
 8009e58:	dc01      	bgt.n	8009e5e <_printf_float+0x2a6>
 8009e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e5c:	e797      	b.n	8009d8e <_printf_float+0x1d6>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	464a      	mov	r2, r9
 8009e62:	4659      	mov	r1, fp
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f aefc 	beq.w	8009c66 <_printf_float+0xae>
 8009e6e:	f108 0801 	add.w	r8, r8, #1
 8009e72:	e7ee      	b.n	8009e52 <_printf_float+0x29a>
 8009e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	bfa8      	it	ge
 8009e7c:	461a      	movge	r2, r3
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	4690      	mov	r8, r2
 8009e82:	dd07      	ble.n	8009e94 <_printf_float+0x2dc>
 8009e84:	4613      	mov	r3, r2
 8009e86:	4659      	mov	r1, fp
 8009e88:	463a      	mov	r2, r7
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b0      	blx	r6
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f aee9 	beq.w	8009c66 <_printf_float+0xae>
 8009e94:	f104 031a 	add.w	r3, r4, #26
 8009e98:	f04f 0a00 	mov.w	sl, #0
 8009e9c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ea2:	e015      	b.n	8009ed0 <_printf_float+0x318>
 8009ea4:	7fefffff 	.word	0x7fefffff
 8009ea8:	0800cb64 	.word	0x0800cb64
 8009eac:	0800cb60 	.word	0x0800cb60
 8009eb0:	0800cb6c 	.word	0x0800cb6c
 8009eb4:	0800cb68 	.word	0x0800cb68
 8009eb8:	0800cb70 	.word	0x0800cb70
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b0      	blx	r6
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f aecd 	beq.w	8009c66 <_printf_float+0xae>
 8009ecc:	f10a 0a01 	add.w	sl, sl, #1
 8009ed0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009ed4:	eba9 0308 	sub.w	r3, r9, r8
 8009ed8:	4553      	cmp	r3, sl
 8009eda:	dcef      	bgt.n	8009ebc <_printf_float+0x304>
 8009edc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	444f      	add	r7, r9
 8009ee4:	db14      	blt.n	8009f10 <_printf_float+0x358>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	07da      	lsls	r2, r3, #31
 8009eea:	d411      	bmi.n	8009f10 <_printf_float+0x358>
 8009eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ef0:	eba3 0209 	sub.w	r2, r3, r9
 8009ef4:	eba3 0901 	sub.w	r9, r3, r1
 8009ef8:	4591      	cmp	r9, r2
 8009efa:	bfa8      	it	ge
 8009efc:	4691      	movge	r9, r2
 8009efe:	f1b9 0f00 	cmp.w	r9, #0
 8009f02:	dc0d      	bgt.n	8009f20 <_printf_float+0x368>
 8009f04:	2700      	movs	r7, #0
 8009f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f0a:	f104 081a 	add.w	r8, r4, #26
 8009f0e:	e018      	b.n	8009f42 <_printf_float+0x38a>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	4659      	mov	r1, fp
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b0      	blx	r6
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d1e6      	bne.n	8009eec <_printf_float+0x334>
 8009f1e:	e6a2      	b.n	8009c66 <_printf_float+0xae>
 8009f20:	464b      	mov	r3, r9
 8009f22:	463a      	mov	r2, r7
 8009f24:	4659      	mov	r1, fp
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b0      	blx	r6
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d1ea      	bne.n	8009f04 <_printf_float+0x34c>
 8009f2e:	e69a      	b.n	8009c66 <_printf_float+0xae>
 8009f30:	2301      	movs	r3, #1
 8009f32:	4642      	mov	r2, r8
 8009f34:	4659      	mov	r1, fp
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b0      	blx	r6
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f43f ae93 	beq.w	8009c66 <_printf_float+0xae>
 8009f40:	3701      	adds	r7, #1
 8009f42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	eba3 0309 	sub.w	r3, r3, r9
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	dcef      	bgt.n	8009f30 <_printf_float+0x378>
 8009f50:	e74d      	b.n	8009dee <_printf_float+0x236>
 8009f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f54:	2a01      	cmp	r2, #1
 8009f56:	dc01      	bgt.n	8009f5c <_printf_float+0x3a4>
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	d538      	bpl.n	8009fce <_printf_float+0x416>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	463a      	mov	r2, r7
 8009f60:	4659      	mov	r1, fp
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b0      	blx	r6
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f ae7d 	beq.w	8009c66 <_printf_float+0xae>
 8009f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f70:	4659      	mov	r1, fp
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b0      	blx	r6
 8009f76:	3001      	adds	r0, #1
 8009f78:	f107 0701 	add.w	r7, r7, #1
 8009f7c:	f43f ae73 	beq.w	8009c66 <_printf_float+0xae>
 8009f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f86:	2200      	movs	r2, #0
 8009f88:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f7f6 fd0b 	bl	80009a8 <__aeabi_dcmpeq>
 8009f92:	b9c0      	cbnz	r0, 8009fc6 <_printf_float+0x40e>
 8009f94:	4643      	mov	r3, r8
 8009f96:	463a      	mov	r2, r7
 8009f98:	4659      	mov	r1, fp
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b0      	blx	r6
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d10d      	bne.n	8009fbe <_printf_float+0x406>
 8009fa2:	e660      	b.n	8009c66 <_printf_float+0xae>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	4659      	mov	r1, fp
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b0      	blx	r6
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f ae59 	beq.w	8009c66 <_printf_float+0xae>
 8009fb4:	3701      	adds	r7, #1
 8009fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	42bb      	cmp	r3, r7
 8009fbc:	dcf2      	bgt.n	8009fa4 <_printf_float+0x3ec>
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fc4:	e6e4      	b.n	8009d90 <_printf_float+0x1d8>
 8009fc6:	2700      	movs	r7, #0
 8009fc8:	f104 081a 	add.w	r8, r4, #26
 8009fcc:	e7f3      	b.n	8009fb6 <_printf_float+0x3fe>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e7e1      	b.n	8009f96 <_printf_float+0x3de>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f ae42 	beq.w	8009c66 <_printf_float+0xae>
 8009fe2:	3701      	adds	r7, #1
 8009fe4:	68e3      	ldr	r3, [r4, #12]
 8009fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	42bb      	cmp	r3, r7
 8009fec:	dcf1      	bgt.n	8009fd2 <_printf_float+0x41a>
 8009fee:	e702      	b.n	8009df6 <_printf_float+0x23e>
 8009ff0:	2700      	movs	r7, #0
 8009ff2:	f104 0819 	add.w	r8, r4, #25
 8009ff6:	e7f5      	b.n	8009fe4 <_printf_float+0x42c>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f43f ae94 	beq.w	8009d26 <_printf_float+0x16e>
 8009ffe:	f04f 0c00 	mov.w	ip, #0
 800a002:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a006:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a010:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	463a      	mov	r2, r7
 800a018:	464b      	mov	r3, r9
 800a01a:	4628      	mov	r0, r5
 800a01c:	f7ff fd3a 	bl	8009a94 <__cvt>
 800a020:	4607      	mov	r7, r0
 800a022:	e64f      	b.n	8009cc4 <_printf_float+0x10c>

0800a024 <_printf_common>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	4691      	mov	r9, r2
 800a02a:	461f      	mov	r7, r3
 800a02c:	688a      	ldr	r2, [r1, #8]
 800a02e:	690b      	ldr	r3, [r1, #16]
 800a030:	4606      	mov	r6, r0
 800a032:	4293      	cmp	r3, r2
 800a034:	bfb8      	it	lt
 800a036:	4613      	movlt	r3, r2
 800a038:	f8c9 3000 	str.w	r3, [r9]
 800a03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a040:	460c      	mov	r4, r1
 800a042:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a046:	b112      	cbz	r2, 800a04e <_printf_common+0x2a>
 800a048:	3301      	adds	r3, #1
 800a04a:	f8c9 3000 	str.w	r3, [r9]
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	0699      	lsls	r1, r3, #26
 800a052:	bf42      	ittt	mi
 800a054:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a058:	3302      	addmi	r3, #2
 800a05a:	f8c9 3000 	strmi.w	r3, [r9]
 800a05e:	6825      	ldr	r5, [r4, #0]
 800a060:	f015 0506 	ands.w	r5, r5, #6
 800a064:	d107      	bne.n	800a076 <_printf_common+0x52>
 800a066:	f104 0a19 	add.w	sl, r4, #25
 800a06a:	68e3      	ldr	r3, [r4, #12]
 800a06c:	f8d9 2000 	ldr.w	r2, [r9]
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	42ab      	cmp	r3, r5
 800a074:	dc29      	bgt.n	800a0ca <_printf_common+0xa6>
 800a076:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	3300      	adds	r3, #0
 800a07e:	bf18      	it	ne
 800a080:	2301      	movne	r3, #1
 800a082:	0692      	lsls	r2, r2, #26
 800a084:	d42e      	bmi.n	800a0e4 <_printf_common+0xc0>
 800a086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a08a:	4639      	mov	r1, r7
 800a08c:	4630      	mov	r0, r6
 800a08e:	47c0      	blx	r8
 800a090:	3001      	adds	r0, #1
 800a092:	d021      	beq.n	800a0d8 <_printf_common+0xb4>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	68e5      	ldr	r5, [r4, #12]
 800a098:	f003 0306 	and.w	r3, r3, #6
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	bf18      	it	ne
 800a0a0:	2500      	movne	r5, #0
 800a0a2:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	bf08      	it	eq
 800a0ac:	1aad      	subeq	r5, r5, r2
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	bf08      	it	eq
 800a0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	bfc4      	itt	gt
 800a0bc:	1a9b      	subgt	r3, r3, r2
 800a0be:	18ed      	addgt	r5, r5, r3
 800a0c0:	341a      	adds	r4, #26
 800a0c2:	454d      	cmp	r5, r9
 800a0c4:	d11a      	bne.n	800a0fc <_printf_common+0xd8>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e008      	b.n	800a0dc <_printf_common+0xb8>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	47c0      	blx	r8
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d103      	bne.n	800a0e0 <_printf_common+0xbc>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	e7c2      	b.n	800a06a <_printf_common+0x46>
 800a0e4:	2030      	movs	r0, #48	; 0x30
 800a0e6:	18e1      	adds	r1, r4, r3
 800a0e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0f2:	4422      	add	r2, r4
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0fa:	e7c4      	b.n	800a086 <_printf_common+0x62>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4622      	mov	r2, r4
 800a100:	4639      	mov	r1, r7
 800a102:	4630      	mov	r0, r6
 800a104:	47c0      	blx	r8
 800a106:	3001      	adds	r0, #1
 800a108:	d0e6      	beq.n	800a0d8 <_printf_common+0xb4>
 800a10a:	f109 0901 	add.w	r9, r9, #1
 800a10e:	e7d8      	b.n	800a0c2 <_printf_common+0x9e>

0800a110 <_printf_i>:
 800a110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a114:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a118:	460c      	mov	r4, r1
 800a11a:	7e09      	ldrb	r1, [r1, #24]
 800a11c:	b085      	sub	sp, #20
 800a11e:	296e      	cmp	r1, #110	; 0x6e
 800a120:	4617      	mov	r7, r2
 800a122:	4606      	mov	r6, r0
 800a124:	4698      	mov	r8, r3
 800a126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a128:	f000 80b3 	beq.w	800a292 <_printf_i+0x182>
 800a12c:	d822      	bhi.n	800a174 <_printf_i+0x64>
 800a12e:	2963      	cmp	r1, #99	; 0x63
 800a130:	d036      	beq.n	800a1a0 <_printf_i+0x90>
 800a132:	d80a      	bhi.n	800a14a <_printf_i+0x3a>
 800a134:	2900      	cmp	r1, #0
 800a136:	f000 80b9 	beq.w	800a2ac <_printf_i+0x19c>
 800a13a:	2958      	cmp	r1, #88	; 0x58
 800a13c:	f000 8083 	beq.w	800a246 <_printf_i+0x136>
 800a140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a144:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a148:	e032      	b.n	800a1b0 <_printf_i+0xa0>
 800a14a:	2964      	cmp	r1, #100	; 0x64
 800a14c:	d001      	beq.n	800a152 <_printf_i+0x42>
 800a14e:	2969      	cmp	r1, #105	; 0x69
 800a150:	d1f6      	bne.n	800a140 <_printf_i+0x30>
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	6813      	ldr	r3, [r2, #0]
 800a156:	0605      	lsls	r5, r0, #24
 800a158:	f103 0104 	add.w	r1, r3, #4
 800a15c:	d52a      	bpl.n	800a1b4 <_printf_i+0xa4>
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6011      	str	r1, [r2, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	da03      	bge.n	800a16e <_printf_i+0x5e>
 800a166:	222d      	movs	r2, #45	; 0x2d
 800a168:	425b      	negs	r3, r3
 800a16a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a16e:	486f      	ldr	r0, [pc, #444]	; (800a32c <_printf_i+0x21c>)
 800a170:	220a      	movs	r2, #10
 800a172:	e039      	b.n	800a1e8 <_printf_i+0xd8>
 800a174:	2973      	cmp	r1, #115	; 0x73
 800a176:	f000 809d 	beq.w	800a2b4 <_printf_i+0x1a4>
 800a17a:	d808      	bhi.n	800a18e <_printf_i+0x7e>
 800a17c:	296f      	cmp	r1, #111	; 0x6f
 800a17e:	d020      	beq.n	800a1c2 <_printf_i+0xb2>
 800a180:	2970      	cmp	r1, #112	; 0x70
 800a182:	d1dd      	bne.n	800a140 <_printf_i+0x30>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	f043 0320 	orr.w	r3, r3, #32
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	e003      	b.n	800a196 <_printf_i+0x86>
 800a18e:	2975      	cmp	r1, #117	; 0x75
 800a190:	d017      	beq.n	800a1c2 <_printf_i+0xb2>
 800a192:	2978      	cmp	r1, #120	; 0x78
 800a194:	d1d4      	bne.n	800a140 <_printf_i+0x30>
 800a196:	2378      	movs	r3, #120	; 0x78
 800a198:	4865      	ldr	r0, [pc, #404]	; (800a330 <_printf_i+0x220>)
 800a19a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a19e:	e055      	b.n	800a24c <_printf_i+0x13c>
 800a1a0:	6813      	ldr	r3, [r2, #0]
 800a1a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a6:	1d19      	adds	r1, r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6011      	str	r1, [r2, #0]
 800a1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e08c      	b.n	800a2ce <_printf_i+0x1be>
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1ba:	6011      	str	r1, [r2, #0]
 800a1bc:	bf18      	it	ne
 800a1be:	b21b      	sxthne	r3, r3
 800a1c0:	e7cf      	b.n	800a162 <_printf_i+0x52>
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	6825      	ldr	r5, [r4, #0]
 800a1c6:	1d18      	adds	r0, r3, #4
 800a1c8:	6010      	str	r0, [r2, #0]
 800a1ca:	0628      	lsls	r0, r5, #24
 800a1cc:	d501      	bpl.n	800a1d2 <_printf_i+0xc2>
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	e002      	b.n	800a1d8 <_printf_i+0xc8>
 800a1d2:	0668      	lsls	r0, r5, #25
 800a1d4:	d5fb      	bpl.n	800a1ce <_printf_i+0xbe>
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	296f      	cmp	r1, #111	; 0x6f
 800a1da:	bf14      	ite	ne
 800a1dc:	220a      	movne	r2, #10
 800a1de:	2208      	moveq	r2, #8
 800a1e0:	4852      	ldr	r0, [pc, #328]	; (800a32c <_printf_i+0x21c>)
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1e8:	6865      	ldr	r5, [r4, #4]
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	60a5      	str	r5, [r4, #8]
 800a1ee:	f2c0 8095 	blt.w	800a31c <_printf_i+0x20c>
 800a1f2:	6821      	ldr	r1, [r4, #0]
 800a1f4:	f021 0104 	bic.w	r1, r1, #4
 800a1f8:	6021      	str	r1, [r4, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d13d      	bne.n	800a27a <_printf_i+0x16a>
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	f040 808e 	bne.w	800a320 <_printf_i+0x210>
 800a204:	4665      	mov	r5, ip
 800a206:	2a08      	cmp	r2, #8
 800a208:	d10b      	bne.n	800a222 <_printf_i+0x112>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	07db      	lsls	r3, r3, #31
 800a20e:	d508      	bpl.n	800a222 <_printf_i+0x112>
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	6862      	ldr	r2, [r4, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	bfde      	ittt	le
 800a218:	2330      	movle	r3, #48	; 0x30
 800a21a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a21e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a222:	ebac 0305 	sub.w	r3, ip, r5
 800a226:	6123      	str	r3, [r4, #16]
 800a228:	f8cd 8000 	str.w	r8, [sp]
 800a22c:	463b      	mov	r3, r7
 800a22e:	aa03      	add	r2, sp, #12
 800a230:	4621      	mov	r1, r4
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff fef6 	bl	800a024 <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	d14d      	bne.n	800a2d8 <_printf_i+0x1c8>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a240:	b005      	add	sp, #20
 800a242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a246:	4839      	ldr	r0, [pc, #228]	; (800a32c <_printf_i+0x21c>)
 800a248:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a24c:	6813      	ldr	r3, [r2, #0]
 800a24e:	6821      	ldr	r1, [r4, #0]
 800a250:	1d1d      	adds	r5, r3, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6015      	str	r5, [r2, #0]
 800a256:	060a      	lsls	r2, r1, #24
 800a258:	d50b      	bpl.n	800a272 <_printf_i+0x162>
 800a25a:	07ca      	lsls	r2, r1, #31
 800a25c:	bf44      	itt	mi
 800a25e:	f041 0120 	orrmi.w	r1, r1, #32
 800a262:	6021      	strmi	r1, [r4, #0]
 800a264:	b91b      	cbnz	r3, 800a26e <_printf_i+0x15e>
 800a266:	6822      	ldr	r2, [r4, #0]
 800a268:	f022 0220 	bic.w	r2, r2, #32
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	2210      	movs	r2, #16
 800a270:	e7b7      	b.n	800a1e2 <_printf_i+0xd2>
 800a272:	064d      	lsls	r5, r1, #25
 800a274:	bf48      	it	mi
 800a276:	b29b      	uxthmi	r3, r3
 800a278:	e7ef      	b.n	800a25a <_printf_i+0x14a>
 800a27a:	4665      	mov	r5, ip
 800a27c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a280:	fb02 3311 	mls	r3, r2, r1, r3
 800a284:	5cc3      	ldrb	r3, [r0, r3]
 800a286:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a28a:	460b      	mov	r3, r1
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d1f5      	bne.n	800a27c <_printf_i+0x16c>
 800a290:	e7b9      	b.n	800a206 <_printf_i+0xf6>
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	6825      	ldr	r5, [r4, #0]
 800a296:	1d18      	adds	r0, r3, #4
 800a298:	6961      	ldr	r1, [r4, #20]
 800a29a:	6010      	str	r0, [r2, #0]
 800a29c:	0628      	lsls	r0, r5, #24
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	d501      	bpl.n	800a2a6 <_printf_i+0x196>
 800a2a2:	6019      	str	r1, [r3, #0]
 800a2a4:	e002      	b.n	800a2ac <_printf_i+0x19c>
 800a2a6:	066a      	lsls	r2, r5, #25
 800a2a8:	d5fb      	bpl.n	800a2a2 <_printf_i+0x192>
 800a2aa:	8019      	strh	r1, [r3, #0]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4665      	mov	r5, ip
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	e7b9      	b.n	800a228 <_printf_i+0x118>
 800a2b4:	6813      	ldr	r3, [r2, #0]
 800a2b6:	1d19      	adds	r1, r3, #4
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	681d      	ldr	r5, [r3, #0]
 800a2bc:	6862      	ldr	r2, [r4, #4]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 feb7 	bl	800b034 <memchr>
 800a2c6:	b108      	cbz	r0, 800a2cc <_printf_i+0x1bc>
 800a2c8:	1b40      	subs	r0, r0, r5
 800a2ca:	6060      	str	r0, [r4, #4]
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d6:	e7a7      	b.n	800a228 <_printf_i+0x118>
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	462a      	mov	r2, r5
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	47c0      	blx	r8
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d0aa      	beq.n	800a23c <_printf_i+0x12c>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	079b      	lsls	r3, r3, #30
 800a2ea:	d413      	bmi.n	800a314 <_printf_i+0x204>
 800a2ec:	68e0      	ldr	r0, [r4, #12]
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	4298      	cmp	r0, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	4618      	movlt	r0, r3
 800a2f6:	e7a3      	b.n	800a240 <_printf_i+0x130>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	464a      	mov	r2, r9
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4630      	mov	r0, r6
 800a300:	47c0      	blx	r8
 800a302:	3001      	adds	r0, #1
 800a304:	d09a      	beq.n	800a23c <_printf_i+0x12c>
 800a306:	3501      	adds	r5, #1
 800a308:	68e3      	ldr	r3, [r4, #12]
 800a30a:	9a03      	ldr	r2, [sp, #12]
 800a30c:	1a9b      	subs	r3, r3, r2
 800a30e:	42ab      	cmp	r3, r5
 800a310:	dcf2      	bgt.n	800a2f8 <_printf_i+0x1e8>
 800a312:	e7eb      	b.n	800a2ec <_printf_i+0x1dc>
 800a314:	2500      	movs	r5, #0
 800a316:	f104 0919 	add.w	r9, r4, #25
 800a31a:	e7f5      	b.n	800a308 <_printf_i+0x1f8>
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ac      	bne.n	800a27a <_printf_i+0x16a>
 800a320:	7803      	ldrb	r3, [r0, #0]
 800a322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a32a:	e76c      	b.n	800a206 <_printf_i+0xf6>
 800a32c:	0800cb72 	.word	0x0800cb72
 800a330:	0800cb83 	.word	0x0800cb83

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	2300      	movs	r3, #0
 800a338:	4c05      	ldr	r4, [pc, #20]	; (800a350 <_sbrk_r+0x1c>)
 800a33a:	4605      	mov	r5, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	f7fb fb02 	bl	8005948 <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	200009a0 	.word	0x200009a0

0800a354 <siprintf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a35a:	b500      	push	{lr}
 800a35c:	b09c      	sub	sp, #112	; 0x70
 800a35e:	ab1d      	add	r3, sp, #116	; 0x74
 800a360:	9002      	str	r0, [sp, #8]
 800a362:	9006      	str	r0, [sp, #24]
 800a364:	9107      	str	r1, [sp, #28]
 800a366:	9104      	str	r1, [sp, #16]
 800a368:	4808      	ldr	r0, [pc, #32]	; (800a38c <siprintf+0x38>)
 800a36a:	4909      	ldr	r1, [pc, #36]	; (800a390 <siprintf+0x3c>)
 800a36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a370:	9105      	str	r1, [sp, #20]
 800a372:	6800      	ldr	r0, [r0, #0]
 800a374:	a902      	add	r1, sp, #8
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	f001 f9b0 	bl	800b6dc <_svfiprintf_r>
 800a37c:	2200      	movs	r2, #0
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	b01c      	add	sp, #112	; 0x70
 800a384:	f85d eb04 	ldr.w	lr, [sp], #4
 800a388:	b003      	add	sp, #12
 800a38a:	4770      	bx	lr
 800a38c:	20000014 	.word	0x20000014
 800a390:	ffff0208 	.word	0xffff0208

0800a394 <quorem>:
 800a394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	6903      	ldr	r3, [r0, #16]
 800a39a:	690c      	ldr	r4, [r1, #16]
 800a39c:	4680      	mov	r8, r0
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	f2c0 8084 	blt.w	800a4ac <quorem+0x118>
 800a3a4:	3c01      	subs	r4, #1
 800a3a6:	f101 0714 	add.w	r7, r1, #20
 800a3aa:	f100 0614 	add.w	r6, r0, #20
 800a3ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a3b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a3b6:	3501      	adds	r5, #1
 800a3b8:	fbb0 f5f5 	udiv	r5, r0, r5
 800a3bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a3c0:	eb06 030c 	add.w	r3, r6, ip
 800a3c4:	eb07 090c 	add.w	r9, r7, ip
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	b39d      	cbz	r5, 800a434 <quorem+0xa0>
 800a3cc:	f04f 0a00 	mov.w	sl, #0
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	46b6      	mov	lr, r6
 800a3d4:	46d3      	mov	fp, sl
 800a3d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3da:	b293      	uxth	r3, r2
 800a3dc:	fb05 a303 	mla	r3, r5, r3, sl
 800a3e0:	0c12      	lsrs	r2, r2, #16
 800a3e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e6:	fb05 a202 	mla	r2, r5, r2, sl
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	ebab 0303 	sub.w	r3, fp, r3
 800a3f0:	f8de b000 	ldr.w	fp, [lr]
 800a3f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a3f8:	fa1f fb8b 	uxth.w	fp, fp
 800a3fc:	445b      	add	r3, fp
 800a3fe:	fa1f fb82 	uxth.w	fp, r2
 800a402:	f8de 2000 	ldr.w	r2, [lr]
 800a406:	4581      	cmp	r9, r0
 800a408:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a40c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a410:	b29b      	uxth	r3, r3
 800a412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a416:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a41a:	f84e 3b04 	str.w	r3, [lr], #4
 800a41e:	d2da      	bcs.n	800a3d6 <quorem+0x42>
 800a420:	f856 300c 	ldr.w	r3, [r6, ip]
 800a424:	b933      	cbnz	r3, 800a434 <quorem+0xa0>
 800a426:	9b01      	ldr	r3, [sp, #4]
 800a428:	3b04      	subs	r3, #4
 800a42a:	429e      	cmp	r6, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	d331      	bcc.n	800a494 <quorem+0x100>
 800a430:	f8c8 4010 	str.w	r4, [r8, #16]
 800a434:	4640      	mov	r0, r8
 800a436:	f001 f821 	bl	800b47c <__mcmp>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	db26      	blt.n	800a48c <quorem+0xf8>
 800a43e:	4630      	mov	r0, r6
 800a440:	f04f 0c00 	mov.w	ip, #0
 800a444:	3501      	adds	r5, #1
 800a446:	f857 1b04 	ldr.w	r1, [r7], #4
 800a44a:	f8d0 e000 	ldr.w	lr, [r0]
 800a44e:	b28b      	uxth	r3, r1
 800a450:	ebac 0303 	sub.w	r3, ip, r3
 800a454:	fa1f f28e 	uxth.w	r2, lr
 800a458:	4413      	add	r3, r2
 800a45a:	0c0a      	lsrs	r2, r1, #16
 800a45c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a464:	b29b      	uxth	r3, r3
 800a466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a46a:	45b9      	cmp	r9, r7
 800a46c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a470:	f840 3b04 	str.w	r3, [r0], #4
 800a474:	d2e7      	bcs.n	800a446 <quorem+0xb2>
 800a476:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a47a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a47e:	b92a      	cbnz	r2, 800a48c <quorem+0xf8>
 800a480:	3b04      	subs	r3, #4
 800a482:	429e      	cmp	r6, r3
 800a484:	461a      	mov	r2, r3
 800a486:	d30b      	bcc.n	800a4a0 <quorem+0x10c>
 800a488:	f8c8 4010 	str.w	r4, [r8, #16]
 800a48c:	4628      	mov	r0, r5
 800a48e:	b003      	add	sp, #12
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	6812      	ldr	r2, [r2, #0]
 800a496:	3b04      	subs	r3, #4
 800a498:	2a00      	cmp	r2, #0
 800a49a:	d1c9      	bne.n	800a430 <quorem+0x9c>
 800a49c:	3c01      	subs	r4, #1
 800a49e:	e7c4      	b.n	800a42a <quorem+0x96>
 800a4a0:	6812      	ldr	r2, [r2, #0]
 800a4a2:	3b04      	subs	r3, #4
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	d1ef      	bne.n	800a488 <quorem+0xf4>
 800a4a8:	3c01      	subs	r4, #1
 800a4aa:	e7ea      	b.n	800a482 <quorem+0xee>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e7ee      	b.n	800a48e <quorem+0xfa>

0800a4b0 <_dtoa_r>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4ba:	b095      	sub	sp, #84	; 0x54
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a4c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a4c6:	b93d      	cbnz	r5, 800a4d8 <_dtoa_r+0x28>
 800a4c8:	2010      	movs	r0, #16
 800a4ca:	f7ff fa0b 	bl	80098e4 <malloc>
 800a4ce:	6260      	str	r0, [r4, #36]	; 0x24
 800a4d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4d4:	6005      	str	r5, [r0, #0]
 800a4d6:	60c5      	str	r5, [r0, #12]
 800a4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	b151      	cbz	r1, 800a4f4 <_dtoa_r+0x44>
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4093      	lsls	r3, r2
 800a4e4:	604a      	str	r2, [r1, #4]
 800a4e6:	608b      	str	r3, [r1, #8]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 fde7 	bl	800b0bc <_Bfree>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	1e3b      	subs	r3, r7, #0
 800a4f6:	bfaf      	iteee	ge
 800a4f8:	2300      	movge	r3, #0
 800a4fa:	2201      	movlt	r2, #1
 800a4fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a500:	9303      	strlt	r3, [sp, #12]
 800a502:	bfac      	ite	ge
 800a504:	f8c8 3000 	strge.w	r3, [r8]
 800a508:	f8c8 2000 	strlt.w	r2, [r8]
 800a50c:	4bae      	ldr	r3, [pc, #696]	; (800a7c8 <_dtoa_r+0x318>)
 800a50e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a512:	ea33 0308 	bics.w	r3, r3, r8
 800a516:	d11b      	bne.n	800a550 <_dtoa_r+0xa0>
 800a518:	f242 730f 	movw	r3, #9999	; 0x270f
 800a51c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	b923      	cbnz	r3, 800a52e <_dtoa_r+0x7e>
 800a524:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a528:	2800      	cmp	r0, #0
 800a52a:	f000 8545 	beq.w	800afb8 <_dtoa_r+0xb08>
 800a52e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a530:	b953      	cbnz	r3, 800a548 <_dtoa_r+0x98>
 800a532:	4ba6      	ldr	r3, [pc, #664]	; (800a7cc <_dtoa_r+0x31c>)
 800a534:	e021      	b.n	800a57a <_dtoa_r+0xca>
 800a536:	4ba6      	ldr	r3, [pc, #664]	; (800a7d0 <_dtoa_r+0x320>)
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	3308      	adds	r3, #8
 800a53c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	9806      	ldr	r0, [sp, #24]
 800a542:	b015      	add	sp, #84	; 0x54
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	4ba0      	ldr	r3, [pc, #640]	; (800a7cc <_dtoa_r+0x31c>)
 800a54a:	9306      	str	r3, [sp, #24]
 800a54c:	3303      	adds	r3, #3
 800a54e:	e7f5      	b.n	800a53c <_dtoa_r+0x8c>
 800a550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	2300      	movs	r3, #0
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f6 fa24 	bl	80009a8 <__aeabi_dcmpeq>
 800a560:	4682      	mov	sl, r0
 800a562:	b160      	cbz	r0, 800a57e <_dtoa_r+0xce>
 800a564:	2301      	movs	r3, #1
 800a566:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8520 	beq.w	800afb2 <_dtoa_r+0xb02>
 800a572:	4b98      	ldr	r3, [pc, #608]	; (800a7d4 <_dtoa_r+0x324>)
 800a574:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	3b01      	subs	r3, #1
 800a57a:	9306      	str	r3, [sp, #24]
 800a57c:	e7e0      	b.n	800a540 <_dtoa_r+0x90>
 800a57e:	ab12      	add	r3, sp, #72	; 0x48
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	ab13      	add	r3, sp, #76	; 0x4c
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	4632      	mov	r2, r6
 800a588:	463b      	mov	r3, r7
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 ffee 	bl	800b56c <__d2b>
 800a590:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a594:	4683      	mov	fp, r0
 800a596:	2d00      	cmp	r5, #0
 800a598:	d07d      	beq.n	800a696 <_dtoa_r+0x1e6>
 800a59a:	46b0      	mov	r8, r6
 800a59c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a5a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a5a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a5ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4b89      	ldr	r3, [pc, #548]	; (800a7d8 <_dtoa_r+0x328>)
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f5 fdd6 	bl	8000168 <__aeabi_dsub>
 800a5bc:	a37c      	add	r3, pc, #496	; (adr r3, 800a7b0 <_dtoa_r+0x300>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 ff89 	bl	80004d8 <__aeabi_dmul>
 800a5c6:	a37c      	add	r3, pc, #496	; (adr r3, 800a7b8 <_dtoa_r+0x308>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f5 fdce 	bl	800016c <__adddf3>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	f7f5 ff15 	bl	8000404 <__aeabi_i2d>
 800a5da:	a379      	add	r3, pc, #484	; (adr r3, 800a7c0 <_dtoa_r+0x310>)
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	f7f5 ff7a 	bl	80004d8 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fdbe 	bl	800016c <__adddf3>
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	460f      	mov	r7, r1
 800a5f4:	f7f6 fa20 	bl	8000a38 <__aeabi_d2iz>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4682      	mov	sl, r0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f6 f9db 	bl	80009bc <__aeabi_dcmplt>
 800a606:	b148      	cbz	r0, 800a61c <_dtoa_r+0x16c>
 800a608:	4650      	mov	r0, sl
 800a60a:	f7f5 fefb 	bl	8000404 <__aeabi_i2d>
 800a60e:	4632      	mov	r2, r6
 800a610:	463b      	mov	r3, r7
 800a612:	f7f6 f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 800a616:	b908      	cbnz	r0, 800a61c <_dtoa_r+0x16c>
 800a618:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a61c:	f1ba 0f16 	cmp.w	sl, #22
 800a620:	d85a      	bhi.n	800a6d8 <_dtoa_r+0x228>
 800a622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a626:	496d      	ldr	r1, [pc, #436]	; (800a7dc <_dtoa_r+0x32c>)
 800a628:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a630:	f7f6 f9e2 	bl	80009f8 <__aeabi_dcmpgt>
 800a634:	2800      	cmp	r0, #0
 800a636:	d051      	beq.n	800a6dc <_dtoa_r+0x22c>
 800a638:	2300      	movs	r3, #0
 800a63a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a63e:	930d      	str	r3, [sp, #52]	; 0x34
 800a640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a642:	1b5d      	subs	r5, r3, r5
 800a644:	1e6b      	subs	r3, r5, #1
 800a646:	9307      	str	r3, [sp, #28]
 800a648:	bf43      	ittte	mi
 800a64a:	2300      	movmi	r3, #0
 800a64c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a650:	9307      	strmi	r3, [sp, #28]
 800a652:	f04f 0900 	movpl.w	r9, #0
 800a656:	f1ba 0f00 	cmp.w	sl, #0
 800a65a:	db41      	blt.n	800a6e0 <_dtoa_r+0x230>
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a662:	4453      	add	r3, sl
 800a664:	9307      	str	r3, [sp, #28]
 800a666:	2300      	movs	r3, #0
 800a668:	9308      	str	r3, [sp, #32]
 800a66a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	f200 808f 	bhi.w	800a790 <_dtoa_r+0x2e0>
 800a672:	2b05      	cmp	r3, #5
 800a674:	bfc4      	itt	gt
 800a676:	3b04      	subgt	r3, #4
 800a678:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a67a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a67c:	bfc8      	it	gt
 800a67e:	2500      	movgt	r5, #0
 800a680:	f1a3 0302 	sub.w	r3, r3, #2
 800a684:	bfd8      	it	le
 800a686:	2501      	movle	r5, #1
 800a688:	2b03      	cmp	r3, #3
 800a68a:	f200 808d 	bhi.w	800a7a8 <_dtoa_r+0x2f8>
 800a68e:	e8df f003 	tbb	[pc, r3]
 800a692:	7d7b      	.short	0x7d7b
 800a694:	6f2f      	.short	0x6f2f
 800a696:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a69a:	441d      	add	r5, r3
 800a69c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a6a0:	2820      	cmp	r0, #32
 800a6a2:	dd13      	ble.n	800a6cc <_dtoa_r+0x21c>
 800a6a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	fa08 f800 	lsl.w	r8, r8, r0
 800a6ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a6b2:	fa23 f000 	lsr.w	r0, r3, r0
 800a6b6:	ea48 0000 	orr.w	r0, r8, r0
 800a6ba:	f7f5 fe93 	bl	80003e4 <__aeabi_ui2d>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a6c6:	3d01      	subs	r5, #1
 800a6c8:	9310      	str	r3, [sp, #64]	; 0x40
 800a6ca:	e771      	b.n	800a5b0 <_dtoa_r+0x100>
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	f1c0 0020 	rsb	r0, r0, #32
 800a6d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d6:	e7f0      	b.n	800a6ba <_dtoa_r+0x20a>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e7b0      	b.n	800a63e <_dtoa_r+0x18e>
 800a6dc:	900d      	str	r0, [sp, #52]	; 0x34
 800a6de:	e7af      	b.n	800a640 <_dtoa_r+0x190>
 800a6e0:	f1ca 0300 	rsb	r3, sl, #0
 800a6e4:	9308      	str	r3, [sp, #32]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	eba9 090a 	sub.w	r9, r9, sl
 800a6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ee:	e7bc      	b.n	800a66a <_dtoa_r+0x1ba>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	dd74      	ble.n	800a7e4 <_dtoa_r+0x334>
 800a6fa:	4698      	mov	r8, r3
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	2200      	movs	r2, #0
 800a700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a702:	6072      	str	r2, [r6, #4]
 800a704:	2204      	movs	r2, #4
 800a706:	f102 0014 	add.w	r0, r2, #20
 800a70a:	4298      	cmp	r0, r3
 800a70c:	6871      	ldr	r1, [r6, #4]
 800a70e:	d96e      	bls.n	800a7ee <_dtoa_r+0x33e>
 800a710:	4620      	mov	r0, r4
 800a712:	f000 fc9f 	bl	800b054 <_Balloc>
 800a716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a718:	6030      	str	r0, [r6, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f1b8 0f0e 	cmp.w	r8, #14
 800a720:	9306      	str	r3, [sp, #24]
 800a722:	f200 80ed 	bhi.w	800a900 <_dtoa_r+0x450>
 800a726:	2d00      	cmp	r5, #0
 800a728:	f000 80ea 	beq.w	800a900 <_dtoa_r+0x450>
 800a72c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a730:	f1ba 0f00 	cmp.w	sl, #0
 800a734:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a738:	dd77      	ble.n	800a82a <_dtoa_r+0x37a>
 800a73a:	4a28      	ldr	r2, [pc, #160]	; (800a7dc <_dtoa_r+0x32c>)
 800a73c:	f00a 030f 	and.w	r3, sl, #15
 800a740:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a748:	06f0      	lsls	r0, r6, #27
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a752:	d568      	bpl.n	800a826 <_dtoa_r+0x376>
 800a754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a758:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <_dtoa_r+0x330>)
 800a75a:	2503      	movs	r5, #3
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f5 ffe4 	bl	800072c <__aeabi_ddiv>
 800a764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a768:	f006 060f 	and.w	r6, r6, #15
 800a76c:	4f1c      	ldr	r7, [pc, #112]	; (800a7e0 <_dtoa_r+0x330>)
 800a76e:	e04f      	b.n	800a810 <_dtoa_r+0x360>
 800a770:	2301      	movs	r3, #1
 800a772:	9309      	str	r3, [sp, #36]	; 0x24
 800a774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a776:	4453      	add	r3, sl
 800a778:	f103 0801 	add.w	r8, r3, #1
 800a77c:	9304      	str	r3, [sp, #16]
 800a77e:	4643      	mov	r3, r8
 800a780:	2b01      	cmp	r3, #1
 800a782:	bfb8      	it	lt
 800a784:	2301      	movlt	r3, #1
 800a786:	e7ba      	b.n	800a6fe <_dtoa_r+0x24e>
 800a788:	2300      	movs	r3, #0
 800a78a:	e7b2      	b.n	800a6f2 <_dtoa_r+0x242>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e7f0      	b.n	800a772 <_dtoa_r+0x2c2>
 800a790:	2501      	movs	r5, #1
 800a792:	2300      	movs	r3, #0
 800a794:	9509      	str	r5, [sp, #36]	; 0x24
 800a796:	931e      	str	r3, [sp, #120]	; 0x78
 800a798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a79c:	2200      	movs	r2, #0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	4698      	mov	r8, r3
 800a7a2:	2312      	movs	r3, #18
 800a7a4:	921f      	str	r2, [sp, #124]	; 0x7c
 800a7a6:	e7aa      	b.n	800a6fe <_dtoa_r+0x24e>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ac:	e7f4      	b.n	800a798 <_dtoa_r+0x2e8>
 800a7ae:	bf00      	nop
 800a7b0:	636f4361 	.word	0x636f4361
 800a7b4:	3fd287a7 	.word	0x3fd287a7
 800a7b8:	8b60c8b3 	.word	0x8b60c8b3
 800a7bc:	3fc68a28 	.word	0x3fc68a28
 800a7c0:	509f79fb 	.word	0x509f79fb
 800a7c4:	3fd34413 	.word	0x3fd34413
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	0800cb9d 	.word	0x0800cb9d
 800a7d0:	0800cb94 	.word	0x0800cb94
 800a7d4:	0800cb71 	.word	0x0800cb71
 800a7d8:	3ff80000 	.word	0x3ff80000
 800a7dc:	0800cbd0 	.word	0x0800cbd0
 800a7e0:	0800cba8 	.word	0x0800cba8
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	e7da      	b.n	800a7a4 <_dtoa_r+0x2f4>
 800a7ee:	3101      	adds	r1, #1
 800a7f0:	6071      	str	r1, [r6, #4]
 800a7f2:	0052      	lsls	r2, r2, #1
 800a7f4:	e787      	b.n	800a706 <_dtoa_r+0x256>
 800a7f6:	07f1      	lsls	r1, r6, #31
 800a7f8:	d508      	bpl.n	800a80c <_dtoa_r+0x35c>
 800a7fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a802:	f7f5 fe69 	bl	80004d8 <__aeabi_dmul>
 800a806:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a80a:	3501      	adds	r5, #1
 800a80c:	1076      	asrs	r6, r6, #1
 800a80e:	3708      	adds	r7, #8
 800a810:	2e00      	cmp	r6, #0
 800a812:	d1f0      	bne.n	800a7f6 <_dtoa_r+0x346>
 800a814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81c:	f7f5 ff86 	bl	800072c <__aeabi_ddiv>
 800a820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a824:	e01b      	b.n	800a85e <_dtoa_r+0x3ae>
 800a826:	2502      	movs	r5, #2
 800a828:	e7a0      	b.n	800a76c <_dtoa_r+0x2bc>
 800a82a:	f000 80a4 	beq.w	800a976 <_dtoa_r+0x4c6>
 800a82e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a832:	f1ca 0600 	rsb	r6, sl, #0
 800a836:	4ba0      	ldr	r3, [pc, #640]	; (800aab8 <_dtoa_r+0x608>)
 800a838:	f006 020f 	and.w	r2, r6, #15
 800a83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fe48 	bl	80004d8 <__aeabi_dmul>
 800a848:	2502      	movs	r5, #2
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a850:	4f9a      	ldr	r7, [pc, #616]	; (800aabc <_dtoa_r+0x60c>)
 800a852:	1136      	asrs	r6, r6, #4
 800a854:	2e00      	cmp	r6, #0
 800a856:	f040 8083 	bne.w	800a960 <_dtoa_r+0x4b0>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e0      	bne.n	800a820 <_dtoa_r+0x370>
 800a85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 808a 	beq.w	800a97a <_dtoa_r+0x4ca>
 800a866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a86a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a86e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a872:	2200      	movs	r2, #0
 800a874:	4b92      	ldr	r3, [pc, #584]	; (800aac0 <_dtoa_r+0x610>)
 800a876:	f7f6 f8a1 	bl	80009bc <__aeabi_dcmplt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d07d      	beq.n	800a97a <_dtoa_r+0x4ca>
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	d07a      	beq.n	800a97a <_dtoa_r+0x4ca>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd36      	ble.n	800a8f8 <_dtoa_r+0x448>
 800a88a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a88e:	2200      	movs	r2, #0
 800a890:	4b8c      	ldr	r3, [pc, #560]	; (800aac4 <_dtoa_r+0x614>)
 800a892:	f7f5 fe21 	bl	80004d8 <__aeabi_dmul>
 800a896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a89a:	9e04      	ldr	r6, [sp, #16]
 800a89c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7f5 fdae 	bl	8000404 <__aeabi_i2d>
 800a8a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8ac:	f7f5 fe14 	bl	80004d8 <__aeabi_dmul>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b85      	ldr	r3, [pc, #532]	; (800aac8 <_dtoa_r+0x618>)
 800a8b4:	f7f5 fc5a 	bl	800016c <__adddf3>
 800a8b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a8bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8c0:	950b      	str	r5, [sp, #44]	; 0x2c
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d15c      	bne.n	800a980 <_dtoa_r+0x4d0>
 800a8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4b7f      	ldr	r3, [pc, #508]	; (800aacc <_dtoa_r+0x61c>)
 800a8ce:	f7f5 fc4b 	bl	8000168 <__aeabi_dsub>
 800a8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8da:	f7f6 f88d 	bl	80009f8 <__aeabi_dcmpgt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8281 	bne.w	800ade6 <_dtoa_r+0x936>
 800a8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8ee:	f7f6 f865 	bl	80009bc <__aeabi_dcmplt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f040 8275 	bne.w	800ade2 <_dtoa_r+0x932>
 800a8f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a8fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a902:	2b00      	cmp	r3, #0
 800a904:	f2c0 814b 	blt.w	800ab9e <_dtoa_r+0x6ee>
 800a908:	f1ba 0f0e 	cmp.w	sl, #14
 800a90c:	f300 8147 	bgt.w	800ab9e <_dtoa_r+0x6ee>
 800a910:	4b69      	ldr	r3, [pc, #420]	; (800aab8 <_dtoa_r+0x608>)
 800a912:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a91e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a920:	2b00      	cmp	r3, #0
 800a922:	f280 80d7 	bge.w	800aad4 <_dtoa_r+0x624>
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	f300 80d3 	bgt.w	800aad4 <_dtoa_r+0x624>
 800a92e:	f040 8257 	bne.w	800ade0 <_dtoa_r+0x930>
 800a932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a936:	2200      	movs	r2, #0
 800a938:	4b64      	ldr	r3, [pc, #400]	; (800aacc <_dtoa_r+0x61c>)
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a942:	f7f6 f84f 	bl	80009e4 <__aeabi_dcmpge>
 800a946:	4646      	mov	r6, r8
 800a948:	4647      	mov	r7, r8
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f040 822d 	bne.w	800adaa <_dtoa_r+0x8fa>
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	9a06      	ldr	r2, [sp, #24]
 800a954:	1c5d      	adds	r5, r3, #1
 800a956:	2331      	movs	r3, #49	; 0x31
 800a958:	f10a 0a01 	add.w	sl, sl, #1
 800a95c:	7013      	strb	r3, [r2, #0]
 800a95e:	e228      	b.n	800adb2 <_dtoa_r+0x902>
 800a960:	07f2      	lsls	r2, r6, #31
 800a962:	d505      	bpl.n	800a970 <_dtoa_r+0x4c0>
 800a964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a968:	f7f5 fdb6 	bl	80004d8 <__aeabi_dmul>
 800a96c:	2301      	movs	r3, #1
 800a96e:	3501      	adds	r5, #1
 800a970:	1076      	asrs	r6, r6, #1
 800a972:	3708      	adds	r7, #8
 800a974:	e76e      	b.n	800a854 <_dtoa_r+0x3a4>
 800a976:	2502      	movs	r5, #2
 800a978:	e771      	b.n	800a85e <_dtoa_r+0x3ae>
 800a97a:	4657      	mov	r7, sl
 800a97c:	4646      	mov	r6, r8
 800a97e:	e790      	b.n	800a8a2 <_dtoa_r+0x3f2>
 800a980:	4b4d      	ldr	r3, [pc, #308]	; (800aab8 <_dtoa_r+0x608>)
 800a982:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a986:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d048      	beq.n	800aa22 <_dtoa_r+0x572>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	2000      	movs	r0, #0
 800a996:	494e      	ldr	r1, [pc, #312]	; (800aad0 <_dtoa_r+0x620>)
 800a998:	f7f5 fec8 	bl	800072c <__aeabi_ddiv>
 800a99c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9a0:	f7f5 fbe2 	bl	8000168 <__aeabi_dsub>
 800a9a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9a8:	9d06      	ldr	r5, [sp, #24]
 800a9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ae:	f7f6 f843 	bl	8000a38 <__aeabi_d2iz>
 800a9b2:	9011      	str	r0, [sp, #68]	; 0x44
 800a9b4:	f7f5 fd26 	bl	8000404 <__aeabi_i2d>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c0:	f7f5 fbd2 	bl	8000168 <__aeabi_dsub>
 800a9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ca:	3330      	adds	r3, #48	; 0x30
 800a9cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a9d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9d4:	f7f5 fff2 	bl	80009bc <__aeabi_dcmplt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d163      	bne.n	800aaa4 <_dtoa_r+0x5f4>
 800a9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	4937      	ldr	r1, [pc, #220]	; (800aac0 <_dtoa_r+0x610>)
 800a9e4:	f7f5 fbc0 	bl	8000168 <__aeabi_dsub>
 800a9e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9ec:	f7f5 ffe6 	bl	80009bc <__aeabi_dcmplt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f040 80b5 	bne.w	800ab60 <_dtoa_r+0x6b0>
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	1aeb      	subs	r3, r5, r3
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	f77f af7c 	ble.w	800a8f8 <_dtoa_r+0x448>
 800aa00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa04:	2200      	movs	r2, #0
 800aa06:	4b2f      	ldr	r3, [pc, #188]	; (800aac4 <_dtoa_r+0x614>)
 800aa08:	f7f5 fd66 	bl	80004d8 <__aeabi_dmul>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa16:	4b2b      	ldr	r3, [pc, #172]	; (800aac4 <_dtoa_r+0x614>)
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa20:	e7c3      	b.n	800a9aa <_dtoa_r+0x4fa>
 800aa22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa30:	199d      	adds	r5, r3, r6
 800aa32:	461e      	mov	r6, r3
 800aa34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa38:	f7f5 fffe 	bl	8000a38 <__aeabi_d2iz>
 800aa3c:	9011      	str	r0, [sp, #68]	; 0x44
 800aa3e:	f7f5 fce1 	bl	8000404 <__aeabi_i2d>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa4a:	f7f5 fb8d 	bl	8000168 <__aeabi_dsub>
 800aa4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa54:	3330      	adds	r3, #48	; 0x30
 800aa56:	f806 3b01 	strb.w	r3, [r6], #1
 800aa5a:	42ae      	cmp	r6, r5
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	d124      	bne.n	800aaac <_dtoa_r+0x5fc>
 800aa62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <_dtoa_r+0x620>)
 800aa68:	f7f5 fb80 	bl	800016c <__adddf3>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa74:	f7f5 ffc0 	bl	80009f8 <__aeabi_dcmpgt>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d171      	bne.n	800ab60 <_dtoa_r+0x6b0>
 800aa7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa80:	2000      	movs	r0, #0
 800aa82:	4913      	ldr	r1, [pc, #76]	; (800aad0 <_dtoa_r+0x620>)
 800aa84:	f7f5 fb70 	bl	8000168 <__aeabi_dsub>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa90:	f7f5 ff94 	bl	80009bc <__aeabi_dcmplt>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f43f af2f 	beq.w	800a8f8 <_dtoa_r+0x448>
 800aa9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa9e:	1e6a      	subs	r2, r5, #1
 800aaa0:	2b30      	cmp	r3, #48	; 0x30
 800aaa2:	d001      	beq.n	800aaa8 <_dtoa_r+0x5f8>
 800aaa4:	46ba      	mov	sl, r7
 800aaa6:	e04a      	b.n	800ab3e <_dtoa_r+0x68e>
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	e7f6      	b.n	800aa9a <_dtoa_r+0x5ea>
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <_dtoa_r+0x614>)
 800aaae:	f7f5 fd13 	bl	80004d8 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	e7bd      	b.n	800aa34 <_dtoa_r+0x584>
 800aab8:	0800cbd0 	.word	0x0800cbd0
 800aabc:	0800cba8 	.word	0x0800cba8
 800aac0:	3ff00000 	.word	0x3ff00000
 800aac4:	40240000 	.word	0x40240000
 800aac8:	401c0000 	.word	0x401c0000
 800aacc:	40140000 	.word	0x40140000
 800aad0:	3fe00000 	.word	0x3fe00000
 800aad4:	9d06      	ldr	r5, [sp, #24]
 800aad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 fe23 	bl	800072c <__aeabi_ddiv>
 800aae6:	f7f5 ffa7 	bl	8000a38 <__aeabi_d2iz>
 800aaea:	4681      	mov	r9, r0
 800aaec:	f7f5 fc8a 	bl	8000404 <__aeabi_i2d>
 800aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf4:	f7f5 fcf0 	bl	80004d8 <__aeabi_dmul>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fb32 	bl	8000168 <__aeabi_dsub>
 800ab04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ab08:	f805 6b01 	strb.w	r6, [r5], #1
 800ab0c:	9e06      	ldr	r6, [sp, #24]
 800ab0e:	4602      	mov	r2, r0
 800ab10:	1bae      	subs	r6, r5, r6
 800ab12:	45b0      	cmp	r8, r6
 800ab14:	460b      	mov	r3, r1
 800ab16:	d135      	bne.n	800ab84 <_dtoa_r+0x6d4>
 800ab18:	f7f5 fb28 	bl	800016c <__adddf3>
 800ab1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab20:	4606      	mov	r6, r0
 800ab22:	460f      	mov	r7, r1
 800ab24:	f7f5 ff68 	bl	80009f8 <__aeabi_dcmpgt>
 800ab28:	b9c8      	cbnz	r0, 800ab5e <_dtoa_r+0x6ae>
 800ab2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 ff39 	bl	80009a8 <__aeabi_dcmpeq>
 800ab36:	b110      	cbz	r0, 800ab3e <_dtoa_r+0x68e>
 800ab38:	f019 0f01 	tst.w	r9, #1
 800ab3c:	d10f      	bne.n	800ab5e <_dtoa_r+0x6ae>
 800ab3e:	4659      	mov	r1, fp
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fabb 	bl	800b0bc <_Bfree>
 800ab46:	2300      	movs	r3, #0
 800ab48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab4a:	702b      	strb	r3, [r5, #0]
 800ab4c:	f10a 0301 	add.w	r3, sl, #1
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f43f acf3 	beq.w	800a540 <_dtoa_r+0x90>
 800ab5a:	601d      	str	r5, [r3, #0]
 800ab5c:	e4f0      	b.n	800a540 <_dtoa_r+0x90>
 800ab5e:	4657      	mov	r7, sl
 800ab60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab64:	1e6b      	subs	r3, r5, #1
 800ab66:	2a39      	cmp	r2, #57	; 0x39
 800ab68:	d106      	bne.n	800ab78 <_dtoa_r+0x6c8>
 800ab6a:	9a06      	ldr	r2, [sp, #24]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d107      	bne.n	800ab80 <_dtoa_r+0x6d0>
 800ab70:	2330      	movs	r3, #48	; 0x30
 800ab72:	7013      	strb	r3, [r2, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	3701      	adds	r7, #1
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	e791      	b.n	800aaa4 <_dtoa_r+0x5f4>
 800ab80:	461d      	mov	r5, r3
 800ab82:	e7ed      	b.n	800ab60 <_dtoa_r+0x6b0>
 800ab84:	2200      	movs	r2, #0
 800ab86:	4b99      	ldr	r3, [pc, #612]	; (800adec <_dtoa_r+0x93c>)
 800ab88:	f7f5 fca6 	bl	80004d8 <__aeabi_dmul>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	f7f5 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d09e      	beq.n	800aada <_dtoa_r+0x62a>
 800ab9c:	e7cf      	b.n	800ab3e <_dtoa_r+0x68e>
 800ab9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	f000 8088 	beq.w	800acb6 <_dtoa_r+0x806>
 800aba6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aba8:	2a01      	cmp	r2, #1
 800abaa:	dc6d      	bgt.n	800ac88 <_dtoa_r+0x7d8>
 800abac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abae:	2a00      	cmp	r2, #0
 800abb0:	d066      	beq.n	800ac80 <_dtoa_r+0x7d0>
 800abb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abb6:	464d      	mov	r5, r9
 800abb8:	9e08      	ldr	r6, [sp, #32]
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	2101      	movs	r1, #1
 800abbe:	441a      	add	r2, r3
 800abc0:	4620      	mov	r0, r4
 800abc2:	4499      	add	r9, r3
 800abc4:	9207      	str	r2, [sp, #28]
 800abc6:	f000 fb19 	bl	800b1fc <__i2b>
 800abca:	4607      	mov	r7, r0
 800abcc:	2d00      	cmp	r5, #0
 800abce:	dd0b      	ble.n	800abe8 <_dtoa_r+0x738>
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd08      	ble.n	800abe8 <_dtoa_r+0x738>
 800abd6:	42ab      	cmp	r3, r5
 800abd8:	bfa8      	it	ge
 800abda:	462b      	movge	r3, r5
 800abdc:	9a07      	ldr	r2, [sp, #28]
 800abde:	eba9 0903 	sub.w	r9, r9, r3
 800abe2:	1aed      	subs	r5, r5, r3
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	9307      	str	r3, [sp, #28]
 800abe8:	9b08      	ldr	r3, [sp, #32]
 800abea:	b1eb      	cbz	r3, 800ac28 <_dtoa_r+0x778>
 800abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d065      	beq.n	800acbe <_dtoa_r+0x80e>
 800abf2:	b18e      	cbz	r6, 800ac18 <_dtoa_r+0x768>
 800abf4:	4639      	mov	r1, r7
 800abf6:	4632      	mov	r2, r6
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fb9d 	bl	800b338 <__pow5mult>
 800abfe:	465a      	mov	r2, fp
 800ac00:	4601      	mov	r1, r0
 800ac02:	4607      	mov	r7, r0
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fb02 	bl	800b20e <__multiply>
 800ac0a:	4659      	mov	r1, fp
 800ac0c:	900a      	str	r0, [sp, #40]	; 0x28
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fa54 	bl	800b0bc <_Bfree>
 800ac14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac16:	469b      	mov	fp, r3
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	1b9a      	subs	r2, r3, r6
 800ac1c:	d004      	beq.n	800ac28 <_dtoa_r+0x778>
 800ac1e:	4659      	mov	r1, fp
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fb89 	bl	800b338 <__pow5mult>
 800ac26:	4683      	mov	fp, r0
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fae6 	bl	800b1fc <__i2b>
 800ac30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac32:	4606      	mov	r6, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 81c6 	beq.w	800afc6 <_dtoa_r+0xb16>
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 fb7a 	bl	800b338 <__pow5mult>
 800ac44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac46:	4606      	mov	r6, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	dc3e      	bgt.n	800acca <_dtoa_r+0x81a>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d137      	bne.n	800acc2 <_dtoa_r+0x812>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d134      	bne.n	800acc6 <_dtoa_r+0x816>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac62:	0d1b      	lsrs	r3, r3, #20
 800ac64:	051b      	lsls	r3, r3, #20
 800ac66:	b12b      	cbz	r3, 800ac74 <_dtoa_r+0x7c4>
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	f109 0901 	add.w	r9, r9, #1
 800ac6e:	3301      	adds	r3, #1
 800ac70:	9307      	str	r3, [sp, #28]
 800ac72:	2301      	movs	r3, #1
 800ac74:	9308      	str	r3, [sp, #32]
 800ac76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d128      	bne.n	800acce <_dtoa_r+0x81e>
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	e02e      	b.n	800acde <_dtoa_r+0x82e>
 800ac80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac86:	e796      	b.n	800abb6 <_dtoa_r+0x706>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800ac8e:	42b3      	cmp	r3, r6
 800ac90:	bfb7      	itett	lt
 800ac92:	9b08      	ldrlt	r3, [sp, #32]
 800ac94:	1b9e      	subge	r6, r3, r6
 800ac96:	1af2      	sublt	r2, r6, r3
 800ac98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ac9a:	bfbf      	itttt	lt
 800ac9c:	9608      	strlt	r6, [sp, #32]
 800ac9e:	189b      	addlt	r3, r3, r2
 800aca0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800aca2:	2600      	movlt	r6, #0
 800aca4:	f1b8 0f00 	cmp.w	r8, #0
 800aca8:	bfb9      	ittee	lt
 800acaa:	eba9 0508 	sublt.w	r5, r9, r8
 800acae:	2300      	movlt	r3, #0
 800acb0:	464d      	movge	r5, r9
 800acb2:	4643      	movge	r3, r8
 800acb4:	e781      	b.n	800abba <_dtoa_r+0x70a>
 800acb6:	9e08      	ldr	r6, [sp, #32]
 800acb8:	464d      	mov	r5, r9
 800acba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800acbc:	e786      	b.n	800abcc <_dtoa_r+0x71c>
 800acbe:	9a08      	ldr	r2, [sp, #32]
 800acc0:	e7ad      	b.n	800ac1e <_dtoa_r+0x76e>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e7d6      	b.n	800ac74 <_dtoa_r+0x7c4>
 800acc6:	9b02      	ldr	r3, [sp, #8]
 800acc8:	e7d4      	b.n	800ac74 <_dtoa_r+0x7c4>
 800acca:	2300      	movs	r3, #0
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	6933      	ldr	r3, [r6, #16]
 800acd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800acd4:	6918      	ldr	r0, [r3, #16]
 800acd6:	f000 fa43 	bl	800b160 <__hi0bits>
 800acda:	f1c0 0020 	rsb	r0, r0, #32
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	4418      	add	r0, r3
 800ace2:	f010 001f 	ands.w	r0, r0, #31
 800ace6:	d047      	beq.n	800ad78 <_dtoa_r+0x8c8>
 800ace8:	f1c0 0320 	rsb	r3, r0, #32
 800acec:	2b04      	cmp	r3, #4
 800acee:	dd3b      	ble.n	800ad68 <_dtoa_r+0x8b8>
 800acf0:	9b07      	ldr	r3, [sp, #28]
 800acf2:	f1c0 001c 	rsb	r0, r0, #28
 800acf6:	4481      	add	r9, r0
 800acf8:	4405      	add	r5, r0
 800acfa:	4403      	add	r3, r0
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	f1b9 0f00 	cmp.w	r9, #0
 800ad02:	dd05      	ble.n	800ad10 <_dtoa_r+0x860>
 800ad04:	4659      	mov	r1, fp
 800ad06:	464a      	mov	r2, r9
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fb63 	bl	800b3d4 <__lshift>
 800ad0e:	4683      	mov	fp, r0
 800ad10:	9b07      	ldr	r3, [sp, #28]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dd05      	ble.n	800ad22 <_dtoa_r+0x872>
 800ad16:	4631      	mov	r1, r6
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fb5a 	bl	800b3d4 <__lshift>
 800ad20:	4606      	mov	r6, r0
 800ad22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad24:	b353      	cbz	r3, 800ad7c <_dtoa_r+0x8cc>
 800ad26:	4631      	mov	r1, r6
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f000 fba7 	bl	800b47c <__mcmp>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	da24      	bge.n	800ad7c <_dtoa_r+0x8cc>
 800ad32:	2300      	movs	r3, #0
 800ad34:	4659      	mov	r1, fp
 800ad36:	220a      	movs	r2, #10
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 f9d6 	bl	800b0ea <__multadd>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad44:	4683      	mov	fp, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8144 	beq.w	800afd4 <_dtoa_r+0xb24>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4639      	mov	r1, r7
 800ad50:	220a      	movs	r2, #10
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f9c9 	bl	800b0ea <__multadd>
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc4d      	bgt.n	800adfc <_dtoa_r+0x94c>
 800ad60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	dd4a      	ble.n	800adfc <_dtoa_r+0x94c>
 800ad66:	e011      	b.n	800ad8c <_dtoa_r+0x8dc>
 800ad68:	d0c9      	beq.n	800acfe <_dtoa_r+0x84e>
 800ad6a:	9a07      	ldr	r2, [sp, #28]
 800ad6c:	331c      	adds	r3, #28
 800ad6e:	441a      	add	r2, r3
 800ad70:	4499      	add	r9, r3
 800ad72:	441d      	add	r5, r3
 800ad74:	4613      	mov	r3, r2
 800ad76:	e7c1      	b.n	800acfc <_dtoa_r+0x84c>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	e7f6      	b.n	800ad6a <_dtoa_r+0x8ba>
 800ad7c:	f1b8 0f00 	cmp.w	r8, #0
 800ad80:	dc36      	bgt.n	800adf0 <_dtoa_r+0x940>
 800ad82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	dd33      	ble.n	800adf0 <_dtoa_r+0x940>
 800ad88:	f8cd 8010 	str.w	r8, [sp, #16]
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	b963      	cbnz	r3, 800adaa <_dtoa_r+0x8fa>
 800ad90:	4631      	mov	r1, r6
 800ad92:	2205      	movs	r2, #5
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 f9a8 	bl	800b0ea <__multadd>
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	4658      	mov	r0, fp
 800ada0:	f000 fb6c 	bl	800b47c <__mcmp>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f73f add3 	bgt.w	800a950 <_dtoa_r+0x4a0>
 800adaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800adac:	9d06      	ldr	r5, [sp, #24]
 800adae:	ea6f 0a03 	mvn.w	sl, r3
 800adb2:	f04f 0900 	mov.w	r9, #0
 800adb6:	4631      	mov	r1, r6
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f97f 	bl	800b0bc <_Bfree>
 800adbe:	2f00      	cmp	r7, #0
 800adc0:	f43f aebd 	beq.w	800ab3e <_dtoa_r+0x68e>
 800adc4:	f1b9 0f00 	cmp.w	r9, #0
 800adc8:	d005      	beq.n	800add6 <_dtoa_r+0x926>
 800adca:	45b9      	cmp	r9, r7
 800adcc:	d003      	beq.n	800add6 <_dtoa_r+0x926>
 800adce:	4649      	mov	r1, r9
 800add0:	4620      	mov	r0, r4
 800add2:	f000 f973 	bl	800b0bc <_Bfree>
 800add6:	4639      	mov	r1, r7
 800add8:	4620      	mov	r0, r4
 800adda:	f000 f96f 	bl	800b0bc <_Bfree>
 800adde:	e6ae      	b.n	800ab3e <_dtoa_r+0x68e>
 800ade0:	2600      	movs	r6, #0
 800ade2:	4637      	mov	r7, r6
 800ade4:	e7e1      	b.n	800adaa <_dtoa_r+0x8fa>
 800ade6:	46ba      	mov	sl, r7
 800ade8:	4637      	mov	r7, r6
 800adea:	e5b1      	b.n	800a950 <_dtoa_r+0x4a0>
 800adec:	40240000 	.word	0x40240000
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	f8cd 8010 	str.w	r8, [sp, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 80f3 	beq.w	800afe2 <_dtoa_r+0xb32>
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	dd05      	ble.n	800ae0c <_dtoa_r+0x95c>
 800ae00:	4639      	mov	r1, r7
 800ae02:	462a      	mov	r2, r5
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fae5 	bl	800b3d4 <__lshift>
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	9b08      	ldr	r3, [sp, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d04c      	beq.n	800aeac <_dtoa_r+0x9fc>
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 f91d 	bl	800b054 <_Balloc>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	f107 010c 	add.w	r1, r7, #12
 800ae22:	3202      	adds	r2, #2
 800ae24:	0092      	lsls	r2, r2, #2
 800ae26:	300c      	adds	r0, #12
 800ae28:	f7fe fd7b 	bl	8009922 <memcpy>
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 facf 	bl	800b3d4 <__lshift>
 800ae36:	46b9      	mov	r9, r7
 800ae38:	4607      	mov	r7, r0
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	9307      	str	r3, [sp, #28]
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	4631      	mov	r1, r6
 800ae48:	4658      	mov	r0, fp
 800ae4a:	f7ff faa3 	bl	800a394 <quorem>
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4605      	mov	r5, r0
 800ae52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 fb10 	bl	800b47c <__mcmp>
 800ae5c:	463a      	mov	r2, r7
 800ae5e:	9002      	str	r0, [sp, #8]
 800ae60:	4631      	mov	r1, r6
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fb24 	bl	800b4b0 <__mdiff>
 800ae68:	68c3      	ldr	r3, [r0, #12]
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	bb03      	cbnz	r3, 800aeb0 <_dtoa_r+0xa00>
 800ae6e:	4601      	mov	r1, r0
 800ae70:	9009      	str	r0, [sp, #36]	; 0x24
 800ae72:	4658      	mov	r0, fp
 800ae74:	f000 fb02 	bl	800b47c <__mcmp>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4620      	mov	r0, r4
 800ae80:	9309      	str	r3, [sp, #36]	; 0x24
 800ae82:	f000 f91b 	bl	800b0bc <_Bfree>
 800ae86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae88:	b9a3      	cbnz	r3, 800aeb4 <_dtoa_r+0xa04>
 800ae8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae8c:	b992      	cbnz	r2, 800aeb4 <_dtoa_r+0xa04>
 800ae8e:	9a08      	ldr	r2, [sp, #32]
 800ae90:	b982      	cbnz	r2, 800aeb4 <_dtoa_r+0xa04>
 800ae92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae96:	d029      	beq.n	800aeec <_dtoa_r+0xa3c>
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd01      	ble.n	800aea2 <_dtoa_r+0x9f2>
 800ae9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	1c5d      	adds	r5, r3, #1
 800aea6:	f883 8000 	strb.w	r8, [r3]
 800aeaa:	e784      	b.n	800adb6 <_dtoa_r+0x906>
 800aeac:	4638      	mov	r0, r7
 800aeae:	e7c2      	b.n	800ae36 <_dtoa_r+0x986>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e7e3      	b.n	800ae7c <_dtoa_r+0x9cc>
 800aeb4:	9a02      	ldr	r2, [sp, #8]
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	db04      	blt.n	800aec4 <_dtoa_r+0xa14>
 800aeba:	d123      	bne.n	800af04 <_dtoa_r+0xa54>
 800aebc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aebe:	bb0a      	cbnz	r2, 800af04 <_dtoa_r+0xa54>
 800aec0:	9a08      	ldr	r2, [sp, #32]
 800aec2:	b9fa      	cbnz	r2, 800af04 <_dtoa_r+0xa54>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	ddec      	ble.n	800aea2 <_dtoa_r+0x9f2>
 800aec8:	4659      	mov	r1, fp
 800aeca:	2201      	movs	r2, #1
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fa81 	bl	800b3d4 <__lshift>
 800aed2:	4631      	mov	r1, r6
 800aed4:	4683      	mov	fp, r0
 800aed6:	f000 fad1 	bl	800b47c <__mcmp>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	dc03      	bgt.n	800aee6 <_dtoa_r+0xa36>
 800aede:	d1e0      	bne.n	800aea2 <_dtoa_r+0x9f2>
 800aee0:	f018 0f01 	tst.w	r8, #1
 800aee4:	d0dd      	beq.n	800aea2 <_dtoa_r+0x9f2>
 800aee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeea:	d1d8      	bne.n	800ae9e <_dtoa_r+0x9ee>
 800aeec:	9b07      	ldr	r3, [sp, #28]
 800aeee:	9a07      	ldr	r2, [sp, #28]
 800aef0:	1c5d      	adds	r5, r3, #1
 800aef2:	2339      	movs	r3, #57	; 0x39
 800aef4:	7013      	strb	r3, [r2, #0]
 800aef6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aefa:	1e6a      	subs	r2, r5, #1
 800aefc:	2b39      	cmp	r3, #57	; 0x39
 800aefe:	d04d      	beq.n	800af9c <_dtoa_r+0xaec>
 800af00:	3301      	adds	r3, #1
 800af02:	e052      	b.n	800afaa <_dtoa_r+0xafa>
 800af04:	9a07      	ldr	r2, [sp, #28]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f102 0501 	add.w	r5, r2, #1
 800af0c:	dd06      	ble.n	800af1c <_dtoa_r+0xa6c>
 800af0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af12:	d0eb      	beq.n	800aeec <_dtoa_r+0xa3c>
 800af14:	f108 0801 	add.w	r8, r8, #1
 800af18:	9b07      	ldr	r3, [sp, #28]
 800af1a:	e7c4      	b.n	800aea6 <_dtoa_r+0x9f6>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	9a04      	ldr	r2, [sp, #16]
 800af20:	1aeb      	subs	r3, r5, r3
 800af22:	4293      	cmp	r3, r2
 800af24:	f805 8c01 	strb.w	r8, [r5, #-1]
 800af28:	d021      	beq.n	800af6e <_dtoa_r+0xabe>
 800af2a:	4659      	mov	r1, fp
 800af2c:	2300      	movs	r3, #0
 800af2e:	220a      	movs	r2, #10
 800af30:	4620      	mov	r0, r4
 800af32:	f000 f8da 	bl	800b0ea <__multadd>
 800af36:	45b9      	cmp	r9, r7
 800af38:	4683      	mov	fp, r0
 800af3a:	f04f 0300 	mov.w	r3, #0
 800af3e:	f04f 020a 	mov.w	r2, #10
 800af42:	4649      	mov	r1, r9
 800af44:	4620      	mov	r0, r4
 800af46:	d105      	bne.n	800af54 <_dtoa_r+0xaa4>
 800af48:	f000 f8cf 	bl	800b0ea <__multadd>
 800af4c:	4681      	mov	r9, r0
 800af4e:	4607      	mov	r7, r0
 800af50:	9507      	str	r5, [sp, #28]
 800af52:	e778      	b.n	800ae46 <_dtoa_r+0x996>
 800af54:	f000 f8c9 	bl	800b0ea <__multadd>
 800af58:	4639      	mov	r1, r7
 800af5a:	4681      	mov	r9, r0
 800af5c:	2300      	movs	r3, #0
 800af5e:	220a      	movs	r2, #10
 800af60:	4620      	mov	r0, r4
 800af62:	f000 f8c2 	bl	800b0ea <__multadd>
 800af66:	4607      	mov	r7, r0
 800af68:	e7f2      	b.n	800af50 <_dtoa_r+0xaa0>
 800af6a:	f04f 0900 	mov.w	r9, #0
 800af6e:	4659      	mov	r1, fp
 800af70:	2201      	movs	r2, #1
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fa2e 	bl	800b3d4 <__lshift>
 800af78:	4631      	mov	r1, r6
 800af7a:	4683      	mov	fp, r0
 800af7c:	f000 fa7e 	bl	800b47c <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	dcb8      	bgt.n	800aef6 <_dtoa_r+0xa46>
 800af84:	d102      	bne.n	800af8c <_dtoa_r+0xadc>
 800af86:	f018 0f01 	tst.w	r8, #1
 800af8a:	d1b4      	bne.n	800aef6 <_dtoa_r+0xa46>
 800af8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af90:	1e6a      	subs	r2, r5, #1
 800af92:	2b30      	cmp	r3, #48	; 0x30
 800af94:	f47f af0f 	bne.w	800adb6 <_dtoa_r+0x906>
 800af98:	4615      	mov	r5, r2
 800af9a:	e7f7      	b.n	800af8c <_dtoa_r+0xadc>
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d105      	bne.n	800afae <_dtoa_r+0xafe>
 800afa2:	2331      	movs	r3, #49	; 0x31
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	f10a 0a01 	add.w	sl, sl, #1
 800afaa:	7013      	strb	r3, [r2, #0]
 800afac:	e703      	b.n	800adb6 <_dtoa_r+0x906>
 800afae:	4615      	mov	r5, r2
 800afb0:	e7a1      	b.n	800aef6 <_dtoa_r+0xa46>
 800afb2:	4b17      	ldr	r3, [pc, #92]	; (800b010 <_dtoa_r+0xb60>)
 800afb4:	f7ff bae1 	b.w	800a57a <_dtoa_r+0xca>
 800afb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f47f aabb 	bne.w	800a536 <_dtoa_r+0x86>
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <_dtoa_r+0xb64>)
 800afc2:	f7ff bada 	b.w	800a57a <_dtoa_r+0xca>
 800afc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afc8:	2b01      	cmp	r3, #1
 800afca:	f77f ae3f 	ble.w	800ac4c <_dtoa_r+0x79c>
 800afce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	e653      	b.n	800ac7c <_dtoa_r+0x7cc>
 800afd4:	9b04      	ldr	r3, [sp, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dc03      	bgt.n	800afe2 <_dtoa_r+0xb32>
 800afda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afdc:	2b02      	cmp	r3, #2
 800afde:	f73f aed5 	bgt.w	800ad8c <_dtoa_r+0x8dc>
 800afe2:	9d06      	ldr	r5, [sp, #24]
 800afe4:	4631      	mov	r1, r6
 800afe6:	4658      	mov	r0, fp
 800afe8:	f7ff f9d4 	bl	800a394 <quorem>
 800afec:	9b06      	ldr	r3, [sp, #24]
 800afee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aff2:	f805 8b01 	strb.w	r8, [r5], #1
 800aff6:	9a04      	ldr	r2, [sp, #16]
 800aff8:	1aeb      	subs	r3, r5, r3
 800affa:	429a      	cmp	r2, r3
 800affc:	ddb5      	ble.n	800af6a <_dtoa_r+0xaba>
 800affe:	4659      	mov	r1, fp
 800b000:	2300      	movs	r3, #0
 800b002:	220a      	movs	r2, #10
 800b004:	4620      	mov	r0, r4
 800b006:	f000 f870 	bl	800b0ea <__multadd>
 800b00a:	4683      	mov	fp, r0
 800b00c:	e7ea      	b.n	800afe4 <_dtoa_r+0xb34>
 800b00e:	bf00      	nop
 800b010:	0800cb70 	.word	0x0800cb70
 800b014:	0800cb94 	.word	0x0800cb94

0800b018 <_localeconv_r>:
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <_localeconv_r+0x14>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6a18      	ldr	r0, [r3, #32]
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <_localeconv_r+0x18>)
 800b020:	2800      	cmp	r0, #0
 800b022:	bf08      	it	eq
 800b024:	4618      	moveq	r0, r3
 800b026:	30f0      	adds	r0, #240	; 0xf0
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	20000014 	.word	0x20000014
 800b030:	20000078 	.word	0x20000078

0800b034 <memchr>:
 800b034:	b510      	push	{r4, lr}
 800b036:	b2c9      	uxtb	r1, r1
 800b038:	4402      	add	r2, r0
 800b03a:	4290      	cmp	r0, r2
 800b03c:	4603      	mov	r3, r0
 800b03e:	d101      	bne.n	800b044 <memchr+0x10>
 800b040:	2300      	movs	r3, #0
 800b042:	e003      	b.n	800b04c <memchr+0x18>
 800b044:	781c      	ldrb	r4, [r3, #0]
 800b046:	3001      	adds	r0, #1
 800b048:	428c      	cmp	r4, r1
 800b04a:	d1f6      	bne.n	800b03a <memchr+0x6>
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd10      	pop	{r4, pc}

0800b050 <__malloc_lock>:
 800b050:	4770      	bx	lr

0800b052 <__malloc_unlock>:
 800b052:	4770      	bx	lr

0800b054 <_Balloc>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b058:	4604      	mov	r4, r0
 800b05a:	460e      	mov	r6, r1
 800b05c:	b93d      	cbnz	r5, 800b06e <_Balloc+0x1a>
 800b05e:	2010      	movs	r0, #16
 800b060:	f7fe fc40 	bl	80098e4 <malloc>
 800b064:	6260      	str	r0, [r4, #36]	; 0x24
 800b066:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b06a:	6005      	str	r5, [r0, #0]
 800b06c:	60c5      	str	r5, [r0, #12]
 800b06e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b070:	68eb      	ldr	r3, [r5, #12]
 800b072:	b183      	cbz	r3, 800b096 <_Balloc+0x42>
 800b074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b07c:	b9b8      	cbnz	r0, 800b0ae <_Balloc+0x5a>
 800b07e:	2101      	movs	r1, #1
 800b080:	fa01 f506 	lsl.w	r5, r1, r6
 800b084:	1d6a      	adds	r2, r5, #5
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 fabe 	bl	800b60a <_calloc_r>
 800b08e:	b160      	cbz	r0, 800b0aa <_Balloc+0x56>
 800b090:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b094:	e00e      	b.n	800b0b4 <_Balloc+0x60>
 800b096:	2221      	movs	r2, #33	; 0x21
 800b098:	2104      	movs	r1, #4
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fab5 	bl	800b60a <_calloc_r>
 800b0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a2:	60e8      	str	r0, [r5, #12]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e4      	bne.n	800b074 <_Balloc+0x20>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
 800b0ae:	6802      	ldr	r2, [r0, #0]
 800b0b0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0ba:	e7f7      	b.n	800b0ac <_Balloc+0x58>

0800b0bc <_Bfree>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	b93c      	cbnz	r4, 800b0d6 <_Bfree+0x1a>
 800b0c6:	2010      	movs	r0, #16
 800b0c8:	f7fe fc0c 	bl	80098e4 <malloc>
 800b0cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d2:	6004      	str	r4, [r0, #0]
 800b0d4:	60c4      	str	r4, [r0, #12]
 800b0d6:	b13d      	cbz	r5, 800b0e8 <_Bfree+0x2c>
 800b0d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0da:	686a      	ldr	r2, [r5, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e2:	6029      	str	r1, [r5, #0]
 800b0e4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}

0800b0ea <__multadd>:
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	690d      	ldr	r5, [r1, #16]
 800b0f8:	f101 0c14 	add.w	ip, r1, #20
 800b0fc:	f8dc 0000 	ldr.w	r0, [ip]
 800b100:	3301      	adds	r3, #1
 800b102:	b281      	uxth	r1, r0
 800b104:	fb02 7101 	mla	r1, r2, r1, r7
 800b108:	0c00      	lsrs	r0, r0, #16
 800b10a:	0c0f      	lsrs	r7, r1, #16
 800b10c:	fb02 7000 	mla	r0, r2, r0, r7
 800b110:	b289      	uxth	r1, r1
 800b112:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b116:	429d      	cmp	r5, r3
 800b118:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b11c:	f84c 1b04 	str.w	r1, [ip], #4
 800b120:	dcec      	bgt.n	800b0fc <__multadd+0x12>
 800b122:	b1d7      	cbz	r7, 800b15a <__multadd+0x70>
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	42ab      	cmp	r3, r5
 800b128:	dc12      	bgt.n	800b150 <__multadd+0x66>
 800b12a:	6861      	ldr	r1, [r4, #4]
 800b12c:	4630      	mov	r0, r6
 800b12e:	3101      	adds	r1, #1
 800b130:	f7ff ff90 	bl	800b054 <_Balloc>
 800b134:	4680      	mov	r8, r0
 800b136:	6922      	ldr	r2, [r4, #16]
 800b138:	f104 010c 	add.w	r1, r4, #12
 800b13c:	3202      	adds	r2, #2
 800b13e:	0092      	lsls	r2, r2, #2
 800b140:	300c      	adds	r0, #12
 800b142:	f7fe fbee 	bl	8009922 <memcpy>
 800b146:	4621      	mov	r1, r4
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ffb7 	bl	800b0bc <_Bfree>
 800b14e:	4644      	mov	r4, r8
 800b150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b154:	3501      	adds	r5, #1
 800b156:	615f      	str	r7, [r3, #20]
 800b158:	6125      	str	r5, [r4, #16]
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b160 <__hi0bits>:
 800b160:	0c02      	lsrs	r2, r0, #16
 800b162:	0412      	lsls	r2, r2, #16
 800b164:	4603      	mov	r3, r0
 800b166:	b9b2      	cbnz	r2, 800b196 <__hi0bits+0x36>
 800b168:	0403      	lsls	r3, r0, #16
 800b16a:	2010      	movs	r0, #16
 800b16c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b170:	bf04      	itt	eq
 800b172:	021b      	lsleq	r3, r3, #8
 800b174:	3008      	addeq	r0, #8
 800b176:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b17a:	bf04      	itt	eq
 800b17c:	011b      	lsleq	r3, r3, #4
 800b17e:	3004      	addeq	r0, #4
 800b180:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b184:	bf04      	itt	eq
 800b186:	009b      	lsleq	r3, r3, #2
 800b188:	3002      	addeq	r0, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	db06      	blt.n	800b19c <__hi0bits+0x3c>
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	d503      	bpl.n	800b19a <__hi0bits+0x3a>
 800b192:	3001      	adds	r0, #1
 800b194:	4770      	bx	lr
 800b196:	2000      	movs	r0, #0
 800b198:	e7e8      	b.n	800b16c <__hi0bits+0xc>
 800b19a:	2020      	movs	r0, #32
 800b19c:	4770      	bx	lr

0800b19e <__lo0bits>:
 800b19e:	6803      	ldr	r3, [r0, #0]
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	f013 0207 	ands.w	r2, r3, #7
 800b1a6:	d00b      	beq.n	800b1c0 <__lo0bits+0x22>
 800b1a8:	07da      	lsls	r2, r3, #31
 800b1aa:	d423      	bmi.n	800b1f4 <__lo0bits+0x56>
 800b1ac:	0798      	lsls	r0, r3, #30
 800b1ae:	bf49      	itett	mi
 800b1b0:	085b      	lsrmi	r3, r3, #1
 800b1b2:	089b      	lsrpl	r3, r3, #2
 800b1b4:	2001      	movmi	r0, #1
 800b1b6:	600b      	strmi	r3, [r1, #0]
 800b1b8:	bf5c      	itt	pl
 800b1ba:	600b      	strpl	r3, [r1, #0]
 800b1bc:	2002      	movpl	r0, #2
 800b1be:	4770      	bx	lr
 800b1c0:	b298      	uxth	r0, r3
 800b1c2:	b9a8      	cbnz	r0, 800b1f0 <__lo0bits+0x52>
 800b1c4:	2010      	movs	r0, #16
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1cc:	bf04      	itt	eq
 800b1ce:	0a1b      	lsreq	r3, r3, #8
 800b1d0:	3008      	addeq	r0, #8
 800b1d2:	071a      	lsls	r2, r3, #28
 800b1d4:	bf04      	itt	eq
 800b1d6:	091b      	lsreq	r3, r3, #4
 800b1d8:	3004      	addeq	r0, #4
 800b1da:	079a      	lsls	r2, r3, #30
 800b1dc:	bf04      	itt	eq
 800b1de:	089b      	lsreq	r3, r3, #2
 800b1e0:	3002      	addeq	r0, #2
 800b1e2:	07da      	lsls	r2, r3, #31
 800b1e4:	d402      	bmi.n	800b1ec <__lo0bits+0x4e>
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	d006      	beq.n	800b1f8 <__lo0bits+0x5a>
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	600b      	str	r3, [r1, #0]
 800b1ee:	4770      	bx	lr
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	e7e9      	b.n	800b1c8 <__lo0bits+0x2a>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	4770      	bx	lr
 800b1f8:	2020      	movs	r0, #32
 800b1fa:	4770      	bx	lr

0800b1fc <__i2b>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	2101      	movs	r1, #1
 800b202:	f7ff ff27 	bl	800b054 <_Balloc>
 800b206:	2201      	movs	r2, #1
 800b208:	6144      	str	r4, [r0, #20]
 800b20a:	6102      	str	r2, [r0, #16]
 800b20c:	bd10      	pop	{r4, pc}

0800b20e <__multiply>:
 800b20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b212:	4614      	mov	r4, r2
 800b214:	690a      	ldr	r2, [r1, #16]
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	4688      	mov	r8, r1
 800b21a:	429a      	cmp	r2, r3
 800b21c:	bfbe      	ittt	lt
 800b21e:	460b      	movlt	r3, r1
 800b220:	46a0      	movlt	r8, r4
 800b222:	461c      	movlt	r4, r3
 800b224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b228:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b22c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b234:	eb07 0609 	add.w	r6, r7, r9
 800b238:	42b3      	cmp	r3, r6
 800b23a:	bfb8      	it	lt
 800b23c:	3101      	addlt	r1, #1
 800b23e:	f7ff ff09 	bl	800b054 <_Balloc>
 800b242:	f100 0514 	add.w	r5, r0, #20
 800b246:	462b      	mov	r3, r5
 800b248:	2200      	movs	r2, #0
 800b24a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b24e:	4573      	cmp	r3, lr
 800b250:	d316      	bcc.n	800b280 <__multiply+0x72>
 800b252:	f104 0214 	add.w	r2, r4, #20
 800b256:	f108 0114 	add.w	r1, r8, #20
 800b25a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b25e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	9201      	str	r2, [sp, #4]
 800b268:	4293      	cmp	r3, r2
 800b26a:	d80c      	bhi.n	800b286 <__multiply+0x78>
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	dd03      	ble.n	800b278 <__multiply+0x6a>
 800b270:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05d      	beq.n	800b334 <__multiply+0x126>
 800b278:	6106      	str	r6, [r0, #16]
 800b27a:	b003      	add	sp, #12
 800b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	f843 2b04 	str.w	r2, [r3], #4
 800b284:	e7e3      	b.n	800b24e <__multiply+0x40>
 800b286:	f8b2 b000 	ldrh.w	fp, [r2]
 800b28a:	f1bb 0f00 	cmp.w	fp, #0
 800b28e:	d023      	beq.n	800b2d8 <__multiply+0xca>
 800b290:	4689      	mov	r9, r1
 800b292:	46ac      	mov	ip, r5
 800b294:	f04f 0800 	mov.w	r8, #0
 800b298:	f859 4b04 	ldr.w	r4, [r9], #4
 800b29c:	f8dc a000 	ldr.w	sl, [ip]
 800b2a0:	b2a3      	uxth	r3, r4
 800b2a2:	fa1f fa8a 	uxth.w	sl, sl
 800b2a6:	fb0b a303 	mla	r3, fp, r3, sl
 800b2aa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2ae:	f8dc 4000 	ldr.w	r4, [ip]
 800b2b2:	4443      	add	r3, r8
 800b2b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2b8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b2bc:	46e2      	mov	sl, ip
 800b2be:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2c8:	454f      	cmp	r7, r9
 800b2ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b2d2:	d82b      	bhi.n	800b32c <__multiply+0x11e>
 800b2d4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	3204      	adds	r2, #4
 800b2dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2e0:	f1ba 0f00 	cmp.w	sl, #0
 800b2e4:	d020      	beq.n	800b328 <__multiply+0x11a>
 800b2e6:	4689      	mov	r9, r1
 800b2e8:	46a8      	mov	r8, r5
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2fe:	46c4      	mov	ip, r8
 800b300:	445c      	add	r4, fp
 800b302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b306:	f84c 3b04 	str.w	r3, [ip], #4
 800b30a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b30e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b312:	0c1b      	lsrs	r3, r3, #16
 800b314:	fb0a b303 	mla	r3, sl, r3, fp
 800b318:	454f      	cmp	r7, r9
 800b31a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b31e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b322:	d805      	bhi.n	800b330 <__multiply+0x122>
 800b324:	f8c8 3004 	str.w	r3, [r8, #4]
 800b328:	3504      	adds	r5, #4
 800b32a:	e79b      	b.n	800b264 <__multiply+0x56>
 800b32c:	46d4      	mov	ip, sl
 800b32e:	e7b3      	b.n	800b298 <__multiply+0x8a>
 800b330:	46e0      	mov	r8, ip
 800b332:	e7dd      	b.n	800b2f0 <__multiply+0xe2>
 800b334:	3e01      	subs	r6, #1
 800b336:	e799      	b.n	800b26c <__multiply+0x5e>

0800b338 <__pow5mult>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4615      	mov	r5, r2
 800b33e:	f012 0203 	ands.w	r2, r2, #3
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	d007      	beq.n	800b358 <__pow5mult+0x20>
 800b348:	4c21      	ldr	r4, [pc, #132]	; (800b3d0 <__pow5mult+0x98>)
 800b34a:	3a01      	subs	r2, #1
 800b34c:	2300      	movs	r3, #0
 800b34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b352:	f7ff feca 	bl	800b0ea <__multadd>
 800b356:	4607      	mov	r7, r0
 800b358:	10ad      	asrs	r5, r5, #2
 800b35a:	d035      	beq.n	800b3c8 <__pow5mult+0x90>
 800b35c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b35e:	b93c      	cbnz	r4, 800b370 <__pow5mult+0x38>
 800b360:	2010      	movs	r0, #16
 800b362:	f7fe fabf 	bl	80098e4 <malloc>
 800b366:	6270      	str	r0, [r6, #36]	; 0x24
 800b368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b36c:	6004      	str	r4, [r0, #0]
 800b36e:	60c4      	str	r4, [r0, #12]
 800b370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b378:	b94c      	cbnz	r4, 800b38e <__pow5mult+0x56>
 800b37a:	f240 2171 	movw	r1, #625	; 0x271
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff ff3c 	bl	800b1fc <__i2b>
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	f8c8 0008 	str.w	r0, [r8, #8]
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	07eb      	lsls	r3, r5, #31
 800b394:	d50a      	bpl.n	800b3ac <__pow5mult+0x74>
 800b396:	4639      	mov	r1, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ff37 	bl	800b20e <__multiply>
 800b3a0:	4681      	mov	r9, r0
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff fe89 	bl	800b0bc <_Bfree>
 800b3aa:	464f      	mov	r7, r9
 800b3ac:	106d      	asrs	r5, r5, #1
 800b3ae:	d00b      	beq.n	800b3c8 <__pow5mult+0x90>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	b938      	cbnz	r0, 800b3c4 <__pow5mult+0x8c>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ff28 	bl	800b20e <__multiply>
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	f8c0 8000 	str.w	r8, [r0]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	e7e4      	b.n	800b392 <__pow5mult+0x5a>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0800cc98 	.word	0x0800cc98

0800b3d4 <__lshift>:
 800b3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d8:	460c      	mov	r4, r1
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4616      	mov	r6, r2
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e4:	eb0a 0903 	add.w	r9, sl, r3
 800b3e8:	6849      	ldr	r1, [r1, #4]
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	f109 0501 	add.w	r5, r9, #1
 800b3f0:	42ab      	cmp	r3, r5
 800b3f2:	db32      	blt.n	800b45a <__lshift+0x86>
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff fe2d 	bl	800b054 <_Balloc>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	f100 0114 	add.w	r1, r0, #20
 800b404:	4553      	cmp	r3, sl
 800b406:	db2b      	blt.n	800b460 <__lshift+0x8c>
 800b408:	6920      	ldr	r0, [r4, #16]
 800b40a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b40e:	f104 0314 	add.w	r3, r4, #20
 800b412:	f016 021f 	ands.w	r2, r6, #31
 800b416:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b41a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b41e:	d025      	beq.n	800b46c <__lshift+0x98>
 800b420:	2000      	movs	r0, #0
 800b422:	f1c2 0e20 	rsb	lr, r2, #32
 800b426:	468a      	mov	sl, r1
 800b428:	681e      	ldr	r6, [r3, #0]
 800b42a:	4096      	lsls	r6, r2
 800b42c:	4330      	orrs	r0, r6
 800b42e:	f84a 0b04 	str.w	r0, [sl], #4
 800b432:	f853 0b04 	ldr.w	r0, [r3], #4
 800b436:	459c      	cmp	ip, r3
 800b438:	fa20 f00e 	lsr.w	r0, r0, lr
 800b43c:	d814      	bhi.n	800b468 <__lshift+0x94>
 800b43e:	6048      	str	r0, [r1, #4]
 800b440:	b108      	cbz	r0, 800b446 <__lshift+0x72>
 800b442:	f109 0502 	add.w	r5, r9, #2
 800b446:	3d01      	subs	r5, #1
 800b448:	4638      	mov	r0, r7
 800b44a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b44e:	4621      	mov	r1, r4
 800b450:	f7ff fe34 	bl	800b0bc <_Bfree>
 800b454:	4640      	mov	r0, r8
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	3101      	adds	r1, #1
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	e7c7      	b.n	800b3f0 <__lshift+0x1c>
 800b460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b464:	3301      	adds	r3, #1
 800b466:	e7cd      	b.n	800b404 <__lshift+0x30>
 800b468:	4651      	mov	r1, sl
 800b46a:	e7dc      	b.n	800b426 <__lshift+0x52>
 800b46c:	3904      	subs	r1, #4
 800b46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b472:	459c      	cmp	ip, r3
 800b474:	f841 2f04 	str.w	r2, [r1, #4]!
 800b478:	d8f9      	bhi.n	800b46e <__lshift+0x9a>
 800b47a:	e7e4      	b.n	800b446 <__lshift+0x72>

0800b47c <__mcmp>:
 800b47c:	6903      	ldr	r3, [r0, #16]
 800b47e:	690a      	ldr	r2, [r1, #16]
 800b480:	b530      	push	{r4, r5, lr}
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	d10c      	bne.n	800b4a0 <__mcmp+0x24>
 800b486:	0092      	lsls	r2, r2, #2
 800b488:	3014      	adds	r0, #20
 800b48a:	3114      	adds	r1, #20
 800b48c:	1884      	adds	r4, r0, r2
 800b48e:	4411      	add	r1, r2
 800b490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b498:	4295      	cmp	r5, r2
 800b49a:	d003      	beq.n	800b4a4 <__mcmp+0x28>
 800b49c:	d305      	bcc.n	800b4aa <__mcmp+0x2e>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	42a0      	cmp	r0, r4
 800b4a6:	d3f3      	bcc.n	800b490 <__mcmp+0x14>
 800b4a8:	e7fa      	b.n	800b4a0 <__mcmp+0x24>
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ae:	e7f7      	b.n	800b4a0 <__mcmp+0x24>

0800b4b0 <__mdiff>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	460d      	mov	r5, r1
 800b4b6:	4607      	mov	r7, r0
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	4614      	mov	r4, r2
 800b4be:	f7ff ffdd 	bl	800b47c <__mcmp>
 800b4c2:	1e06      	subs	r6, r0, #0
 800b4c4:	d108      	bne.n	800b4d8 <__mdiff+0x28>
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f7ff fdc3 	bl	800b054 <_Balloc>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d8:	bfa4      	itt	ge
 800b4da:	4623      	movge	r3, r4
 800b4dc:	462c      	movge	r4, r5
 800b4de:	4638      	mov	r0, r7
 800b4e0:	6861      	ldr	r1, [r4, #4]
 800b4e2:	bfa6      	itte	ge
 800b4e4:	461d      	movge	r5, r3
 800b4e6:	2600      	movge	r6, #0
 800b4e8:	2601      	movlt	r6, #1
 800b4ea:	f7ff fdb3 	bl	800b054 <_Balloc>
 800b4ee:	f04f 0e00 	mov.w	lr, #0
 800b4f2:	60c6      	str	r6, [r0, #12]
 800b4f4:	692b      	ldr	r3, [r5, #16]
 800b4f6:	6926      	ldr	r6, [r4, #16]
 800b4f8:	f104 0214 	add.w	r2, r4, #20
 800b4fc:	f105 0914 	add.w	r9, r5, #20
 800b500:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b504:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b508:	f100 0114 	add.w	r1, r0, #20
 800b50c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b510:	f859 5b04 	ldr.w	r5, [r9], #4
 800b514:	fa1f f38a 	uxth.w	r3, sl
 800b518:	4473      	add	r3, lr
 800b51a:	b2ac      	uxth	r4, r5
 800b51c:	1b1b      	subs	r3, r3, r4
 800b51e:	0c2c      	lsrs	r4, r5, #16
 800b520:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b524:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b52e:	45c8      	cmp	r8, r9
 800b530:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b534:	4694      	mov	ip, r2
 800b536:	f841 4b04 	str.w	r4, [r1], #4
 800b53a:	d8e7      	bhi.n	800b50c <__mdiff+0x5c>
 800b53c:	45bc      	cmp	ip, r7
 800b53e:	d304      	bcc.n	800b54a <__mdiff+0x9a>
 800b540:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b544:	b183      	cbz	r3, 800b568 <__mdiff+0xb8>
 800b546:	6106      	str	r6, [r0, #16]
 800b548:	e7c4      	b.n	800b4d4 <__mdiff+0x24>
 800b54a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b54e:	b2a2      	uxth	r2, r4
 800b550:	4472      	add	r2, lr
 800b552:	1413      	asrs	r3, r2, #16
 800b554:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b558:	b292      	uxth	r2, r2
 800b55a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b55e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b562:	f841 2b04 	str.w	r2, [r1], #4
 800b566:	e7e9      	b.n	800b53c <__mdiff+0x8c>
 800b568:	3e01      	subs	r6, #1
 800b56a:	e7e9      	b.n	800b540 <__mdiff+0x90>

0800b56c <__d2b>:
 800b56c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b570:	461c      	mov	r4, r3
 800b572:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b576:	2101      	movs	r1, #1
 800b578:	4690      	mov	r8, r2
 800b57a:	f7ff fd6b 	bl	800b054 <_Balloc>
 800b57e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b582:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b586:	4607      	mov	r7, r0
 800b588:	bb34      	cbnz	r4, 800b5d8 <__d2b+0x6c>
 800b58a:	9201      	str	r2, [sp, #4]
 800b58c:	f1b8 0200 	subs.w	r2, r8, #0
 800b590:	d027      	beq.n	800b5e2 <__d2b+0x76>
 800b592:	a802      	add	r0, sp, #8
 800b594:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b598:	f7ff fe01 	bl	800b19e <__lo0bits>
 800b59c:	9900      	ldr	r1, [sp, #0]
 800b59e:	b1f0      	cbz	r0, 800b5de <__d2b+0x72>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	f1c0 0320 	rsb	r3, r0, #32
 800b5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5aa:	430b      	orrs	r3, r1
 800b5ac:	40c2      	lsrs	r2, r0
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	9201      	str	r2, [sp, #4]
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	bf14      	ite	ne
 800b5b8:	2102      	movne	r1, #2
 800b5ba:	2101      	moveq	r1, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	6139      	str	r1, [r7, #16]
 800b5c0:	b1c4      	cbz	r4, 800b5f4 <__d2b+0x88>
 800b5c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b5c6:	4404      	add	r4, r0
 800b5c8:	6034      	str	r4, [r6, #0]
 800b5ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ce:	6028      	str	r0, [r5, #0]
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	b002      	add	sp, #8
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b5dc:	e7d5      	b.n	800b58a <__d2b+0x1e>
 800b5de:	6179      	str	r1, [r7, #20]
 800b5e0:	e7e7      	b.n	800b5b2 <__d2b+0x46>
 800b5e2:	a801      	add	r0, sp, #4
 800b5e4:	f7ff fddb 	bl	800b19e <__lo0bits>
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	6139      	str	r1, [r7, #16]
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	3020      	adds	r0, #32
 800b5f2:	e7e5      	b.n	800b5c0 <__d2b+0x54>
 800b5f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5fc:	6030      	str	r0, [r6, #0]
 800b5fe:	6918      	ldr	r0, [r3, #16]
 800b600:	f7ff fdae 	bl	800b160 <__hi0bits>
 800b604:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b608:	e7e1      	b.n	800b5ce <__d2b+0x62>

0800b60a <_calloc_r>:
 800b60a:	b538      	push	{r3, r4, r5, lr}
 800b60c:	fb02 f401 	mul.w	r4, r2, r1
 800b610:	4621      	mov	r1, r4
 800b612:	f7fe f9e5 	bl	80099e0 <_malloc_r>
 800b616:	4605      	mov	r5, r0
 800b618:	b118      	cbz	r0, 800b622 <_calloc_r+0x18>
 800b61a:	4622      	mov	r2, r4
 800b61c:	2100      	movs	r1, #0
 800b61e:	f7fe f98b 	bl	8009938 <memset>
 800b622:	4628      	mov	r0, r5
 800b624:	bd38      	pop	{r3, r4, r5, pc}

0800b626 <__ssputs_r>:
 800b626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62a:	688e      	ldr	r6, [r1, #8]
 800b62c:	4682      	mov	sl, r0
 800b62e:	429e      	cmp	r6, r3
 800b630:	460c      	mov	r4, r1
 800b632:	4690      	mov	r8, r2
 800b634:	4699      	mov	r9, r3
 800b636:	d837      	bhi.n	800b6a8 <__ssputs_r+0x82>
 800b638:	898a      	ldrh	r2, [r1, #12]
 800b63a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b63e:	d031      	beq.n	800b6a4 <__ssputs_r+0x7e>
 800b640:	2302      	movs	r3, #2
 800b642:	6825      	ldr	r5, [r4, #0]
 800b644:	6909      	ldr	r1, [r1, #16]
 800b646:	1a6f      	subs	r7, r5, r1
 800b648:	6965      	ldr	r5, [r4, #20]
 800b64a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b64e:	fb95 f5f3 	sdiv	r5, r5, r3
 800b652:	f109 0301 	add.w	r3, r9, #1
 800b656:	443b      	add	r3, r7
 800b658:	429d      	cmp	r5, r3
 800b65a:	bf38      	it	cc
 800b65c:	461d      	movcc	r5, r3
 800b65e:	0553      	lsls	r3, r2, #21
 800b660:	d530      	bpl.n	800b6c4 <__ssputs_r+0x9e>
 800b662:	4629      	mov	r1, r5
 800b664:	f7fe f9bc 	bl	80099e0 <_malloc_r>
 800b668:	4606      	mov	r6, r0
 800b66a:	b950      	cbnz	r0, 800b682 <__ssputs_r+0x5c>
 800b66c:	230c      	movs	r3, #12
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b672:	f8ca 3000 	str.w	r3, [sl]
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b682:	463a      	mov	r2, r7
 800b684:	6921      	ldr	r1, [r4, #16]
 800b686:	f7fe f94c 	bl	8009922 <memcpy>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	6126      	str	r6, [r4, #16]
 800b698:	443e      	add	r6, r7
 800b69a:	6026      	str	r6, [r4, #0]
 800b69c:	464e      	mov	r6, r9
 800b69e:	6165      	str	r5, [r4, #20]
 800b6a0:	1bed      	subs	r5, r5, r7
 800b6a2:	60a5      	str	r5, [r4, #8]
 800b6a4:	454e      	cmp	r6, r9
 800b6a6:	d900      	bls.n	800b6aa <__ssputs_r+0x84>
 800b6a8:	464e      	mov	r6, r9
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	4641      	mov	r1, r8
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	f000 f91e 	bl	800b8f0 <memmove>
 800b6b4:	68a3      	ldr	r3, [r4, #8]
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	1b9b      	subs	r3, r3, r6
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	441e      	add	r6, r3
 800b6c0:	6026      	str	r6, [r4, #0]
 800b6c2:	e7dc      	b.n	800b67e <__ssputs_r+0x58>
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	f000 f92c 	bl	800b922 <_realloc_r>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d1e2      	bne.n	800b696 <__ssputs_r+0x70>
 800b6d0:	6921      	ldr	r1, [r4, #16]
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	f7fe f938 	bl	8009948 <_free_r>
 800b6d8:	e7c8      	b.n	800b66c <__ssputs_r+0x46>
	...

0800b6dc <_svfiprintf_r>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	461d      	mov	r5, r3
 800b6e2:	898b      	ldrh	r3, [r1, #12]
 800b6e4:	b09d      	sub	sp, #116	; 0x74
 800b6e6:	061f      	lsls	r7, r3, #24
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	d50f      	bpl.n	800b710 <_svfiprintf_r+0x34>
 800b6f0:	690b      	ldr	r3, [r1, #16]
 800b6f2:	b96b      	cbnz	r3, 800b710 <_svfiprintf_r+0x34>
 800b6f4:	2140      	movs	r1, #64	; 0x40
 800b6f6:	f7fe f973 	bl	80099e0 <_malloc_r>
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	6120      	str	r0, [r4, #16]
 800b6fe:	b928      	cbnz	r0, 800b70c <_svfiprintf_r+0x30>
 800b700:	230c      	movs	r3, #12
 800b702:	f8c8 3000 	str.w	r3, [r8]
 800b706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b70a:	e0c8      	b.n	800b89e <_svfiprintf_r+0x1c2>
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	2300      	movs	r3, #0
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
 800b714:	2320      	movs	r3, #32
 800b716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b71a:	2330      	movs	r3, #48	; 0x30
 800b71c:	f04f 0b01 	mov.w	fp, #1
 800b720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b724:	9503      	str	r5, [sp, #12]
 800b726:	4637      	mov	r7, r6
 800b728:	463d      	mov	r5, r7
 800b72a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b72e:	b10b      	cbz	r3, 800b734 <_svfiprintf_r+0x58>
 800b730:	2b25      	cmp	r3, #37	; 0x25
 800b732:	d13e      	bne.n	800b7b2 <_svfiprintf_r+0xd6>
 800b734:	ebb7 0a06 	subs.w	sl, r7, r6
 800b738:	d00b      	beq.n	800b752 <_svfiprintf_r+0x76>
 800b73a:	4653      	mov	r3, sl
 800b73c:	4632      	mov	r2, r6
 800b73e:	4621      	mov	r1, r4
 800b740:	4640      	mov	r0, r8
 800b742:	f7ff ff70 	bl	800b626 <__ssputs_r>
 800b746:	3001      	adds	r0, #1
 800b748:	f000 80a4 	beq.w	800b894 <_svfiprintf_r+0x1b8>
 800b74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74e:	4453      	add	r3, sl
 800b750:	9309      	str	r3, [sp, #36]	; 0x24
 800b752:	783b      	ldrb	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 809d 	beq.w	800b894 <_svfiprintf_r+0x1b8>
 800b75a:	2300      	movs	r3, #0
 800b75c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	9307      	str	r3, [sp, #28]
 800b768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b76c:	931a      	str	r3, [sp, #104]	; 0x68
 800b76e:	462f      	mov	r7, r5
 800b770:	2205      	movs	r2, #5
 800b772:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b776:	4850      	ldr	r0, [pc, #320]	; (800b8b8 <_svfiprintf_r+0x1dc>)
 800b778:	f7ff fc5c 	bl	800b034 <memchr>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	b9d0      	cbnz	r0, 800b7b6 <_svfiprintf_r+0xda>
 800b780:	06d9      	lsls	r1, r3, #27
 800b782:	bf44      	itt	mi
 800b784:	2220      	movmi	r2, #32
 800b786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b78a:	071a      	lsls	r2, r3, #28
 800b78c:	bf44      	itt	mi
 800b78e:	222b      	movmi	r2, #43	; 0x2b
 800b790:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b794:	782a      	ldrb	r2, [r5, #0]
 800b796:	2a2a      	cmp	r2, #42	; 0x2a
 800b798:	d015      	beq.n	800b7c6 <_svfiprintf_r+0xea>
 800b79a:	462f      	mov	r7, r5
 800b79c:	2000      	movs	r0, #0
 800b79e:	250a      	movs	r5, #10
 800b7a0:	9a07      	ldr	r2, [sp, #28]
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a8:	3b30      	subs	r3, #48	; 0x30
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	d94d      	bls.n	800b84a <_svfiprintf_r+0x16e>
 800b7ae:	b1b8      	cbz	r0, 800b7e0 <_svfiprintf_r+0x104>
 800b7b0:	e00f      	b.n	800b7d2 <_svfiprintf_r+0xf6>
 800b7b2:	462f      	mov	r7, r5
 800b7b4:	e7b8      	b.n	800b728 <_svfiprintf_r+0x4c>
 800b7b6:	4a40      	ldr	r2, [pc, #256]	; (800b8b8 <_svfiprintf_r+0x1dc>)
 800b7b8:	463d      	mov	r5, r7
 800b7ba:	1a80      	subs	r0, r0, r2
 800b7bc:	fa0b f000 	lsl.w	r0, fp, r0
 800b7c0:	4318      	orrs	r0, r3
 800b7c2:	9004      	str	r0, [sp, #16]
 800b7c4:	e7d3      	b.n	800b76e <_svfiprintf_r+0x92>
 800b7c6:	9a03      	ldr	r2, [sp, #12]
 800b7c8:	1d11      	adds	r1, r2, #4
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	9103      	str	r1, [sp, #12]
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	db01      	blt.n	800b7d6 <_svfiprintf_r+0xfa>
 800b7d2:	9207      	str	r2, [sp, #28]
 800b7d4:	e004      	b.n	800b7e0 <_svfiprintf_r+0x104>
 800b7d6:	4252      	negs	r2, r2
 800b7d8:	f043 0302 	orr.w	r3, r3, #2
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	783b      	ldrb	r3, [r7, #0]
 800b7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e4:	d10c      	bne.n	800b800 <_svfiprintf_r+0x124>
 800b7e6:	787b      	ldrb	r3, [r7, #1]
 800b7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ea:	d133      	bne.n	800b854 <_svfiprintf_r+0x178>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	3702      	adds	r7, #2
 800b7f0:	1d1a      	adds	r2, r3, #4
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	9203      	str	r2, [sp, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	bfb8      	it	lt
 800b7fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	4d2e      	ldr	r5, [pc, #184]	; (800b8bc <_svfiprintf_r+0x1e0>)
 800b802:	2203      	movs	r2, #3
 800b804:	7839      	ldrb	r1, [r7, #0]
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff fc14 	bl	800b034 <memchr>
 800b80c:	b138      	cbz	r0, 800b81e <_svfiprintf_r+0x142>
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	1b40      	subs	r0, r0, r5
 800b812:	fa03 f000 	lsl.w	r0, r3, r0
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	3701      	adds	r7, #1
 800b81a:	4303      	orrs	r3, r0
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	7839      	ldrb	r1, [r7, #0]
 800b820:	2206      	movs	r2, #6
 800b822:	4827      	ldr	r0, [pc, #156]	; (800b8c0 <_svfiprintf_r+0x1e4>)
 800b824:	1c7e      	adds	r6, r7, #1
 800b826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b82a:	f7ff fc03 	bl	800b034 <memchr>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d038      	beq.n	800b8a4 <_svfiprintf_r+0x1c8>
 800b832:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <_svfiprintf_r+0x1e8>)
 800b834:	bb13      	cbnz	r3, 800b87c <_svfiprintf_r+0x1a0>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	3307      	adds	r3, #7
 800b83a:	f023 0307 	bic.w	r3, r3, #7
 800b83e:	3308      	adds	r3, #8
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b844:	444b      	add	r3, r9
 800b846:	9309      	str	r3, [sp, #36]	; 0x24
 800b848:	e76d      	b.n	800b726 <_svfiprintf_r+0x4a>
 800b84a:	fb05 3202 	mla	r2, r5, r2, r3
 800b84e:	2001      	movs	r0, #1
 800b850:	460f      	mov	r7, r1
 800b852:	e7a6      	b.n	800b7a2 <_svfiprintf_r+0xc6>
 800b854:	2300      	movs	r3, #0
 800b856:	250a      	movs	r5, #10
 800b858:	4619      	mov	r1, r3
 800b85a:	3701      	adds	r7, #1
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	4638      	mov	r0, r7
 800b860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b864:	3a30      	subs	r2, #48	; 0x30
 800b866:	2a09      	cmp	r2, #9
 800b868:	d903      	bls.n	800b872 <_svfiprintf_r+0x196>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0c8      	beq.n	800b800 <_svfiprintf_r+0x124>
 800b86e:	9105      	str	r1, [sp, #20]
 800b870:	e7c6      	b.n	800b800 <_svfiprintf_r+0x124>
 800b872:	fb05 2101 	mla	r1, r5, r1, r2
 800b876:	2301      	movs	r3, #1
 800b878:	4607      	mov	r7, r0
 800b87a:	e7f0      	b.n	800b85e <_svfiprintf_r+0x182>
 800b87c:	ab03      	add	r3, sp, #12
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4622      	mov	r2, r4
 800b882:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <_svfiprintf_r+0x1ec>)
 800b884:	a904      	add	r1, sp, #16
 800b886:	4640      	mov	r0, r8
 800b888:	f7fe f996 	bl	8009bb8 <_printf_float>
 800b88c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b890:	4681      	mov	r9, r0
 800b892:	d1d6      	bne.n	800b842 <_svfiprintf_r+0x166>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	065b      	lsls	r3, r3, #25
 800b898:	f53f af35 	bmi.w	800b706 <_svfiprintf_r+0x2a>
 800b89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b89e:	b01d      	add	sp, #116	; 0x74
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	ab03      	add	r3, sp, #12
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <_svfiprintf_r+0x1ec>)
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7fe fc2e 	bl	800a110 <_printf_i>
 800b8b4:	e7ea      	b.n	800b88c <_svfiprintf_r+0x1b0>
 800b8b6:	bf00      	nop
 800b8b8:	0800cca4 	.word	0x0800cca4
 800b8bc:	0800ccaa 	.word	0x0800ccaa
 800b8c0:	0800ccae 	.word	0x0800ccae
 800b8c4:	08009bb9 	.word	0x08009bb9
 800b8c8:	0800b627 	.word	0x0800b627

0800b8cc <__ascii_mbtowc>:
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	b901      	cbnz	r1, 800b8d2 <__ascii_mbtowc+0x6>
 800b8d0:	a901      	add	r1, sp, #4
 800b8d2:	b142      	cbz	r2, 800b8e6 <__ascii_mbtowc+0x1a>
 800b8d4:	b14b      	cbz	r3, 800b8ea <__ascii_mbtowc+0x1e>
 800b8d6:	7813      	ldrb	r3, [r2, #0]
 800b8d8:	600b      	str	r3, [r1, #0]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	1c10      	adds	r0, r2, #0
 800b8de:	bf18      	it	ne
 800b8e0:	2001      	movne	r0, #1
 800b8e2:	b002      	add	sp, #8
 800b8e4:	4770      	bx	lr
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	e7fb      	b.n	800b8e2 <__ascii_mbtowc+0x16>
 800b8ea:	f06f 0001 	mvn.w	r0, #1
 800b8ee:	e7f8      	b.n	800b8e2 <__ascii_mbtowc+0x16>

0800b8f0 <memmove>:
 800b8f0:	4288      	cmp	r0, r1
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	eb01 0302 	add.w	r3, r1, r2
 800b8f8:	d807      	bhi.n	800b90a <memmove+0x1a>
 800b8fa:	1e42      	subs	r2, r0, #1
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d00a      	beq.n	800b916 <memmove+0x26>
 800b900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b904:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b908:	e7f8      	b.n	800b8fc <memmove+0xc>
 800b90a:	4283      	cmp	r3, r0
 800b90c:	d9f5      	bls.n	800b8fa <memmove+0xa>
 800b90e:	1881      	adds	r1, r0, r2
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	42d3      	cmn	r3, r2
 800b914:	d100      	bne.n	800b918 <memmove+0x28>
 800b916:	bd10      	pop	{r4, pc}
 800b918:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b91c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b920:	e7f7      	b.n	800b912 <memmove+0x22>

0800b922 <_realloc_r>:
 800b922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b924:	4607      	mov	r7, r0
 800b926:	4614      	mov	r4, r2
 800b928:	460e      	mov	r6, r1
 800b92a:	b921      	cbnz	r1, 800b936 <_realloc_r+0x14>
 800b92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b930:	4611      	mov	r1, r2
 800b932:	f7fe b855 	b.w	80099e0 <_malloc_r>
 800b936:	b922      	cbnz	r2, 800b942 <_realloc_r+0x20>
 800b938:	f7fe f806 	bl	8009948 <_free_r>
 800b93c:	4625      	mov	r5, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b942:	f000 f821 	bl	800b988 <_malloc_usable_size_r>
 800b946:	42a0      	cmp	r0, r4
 800b948:	d20f      	bcs.n	800b96a <_realloc_r+0x48>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7fe f847 	bl	80099e0 <_malloc_r>
 800b952:	4605      	mov	r5, r0
 800b954:	2800      	cmp	r0, #0
 800b956:	d0f2      	beq.n	800b93e <_realloc_r+0x1c>
 800b958:	4631      	mov	r1, r6
 800b95a:	4622      	mov	r2, r4
 800b95c:	f7fd ffe1 	bl	8009922 <memcpy>
 800b960:	4631      	mov	r1, r6
 800b962:	4638      	mov	r0, r7
 800b964:	f7fd fff0 	bl	8009948 <_free_r>
 800b968:	e7e9      	b.n	800b93e <_realloc_r+0x1c>
 800b96a:	4635      	mov	r5, r6
 800b96c:	e7e7      	b.n	800b93e <_realloc_r+0x1c>

0800b96e <__ascii_wctomb>:
 800b96e:	b149      	cbz	r1, 800b984 <__ascii_wctomb+0x16>
 800b970:	2aff      	cmp	r2, #255	; 0xff
 800b972:	bf8b      	itete	hi
 800b974:	238a      	movhi	r3, #138	; 0x8a
 800b976:	700a      	strbls	r2, [r1, #0]
 800b978:	6003      	strhi	r3, [r0, #0]
 800b97a:	2001      	movls	r0, #1
 800b97c:	bf88      	it	hi
 800b97e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b982:	4770      	bx	lr
 800b984:	4608      	mov	r0, r1
 800b986:	4770      	bx	lr

0800b988 <_malloc_usable_size_r>:
 800b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98c:	1f18      	subs	r0, r3, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfbc      	itt	lt
 800b992:	580b      	ldrlt	r3, [r1, r0]
 800b994:	18c0      	addlt	r0, r0, r3
 800b996:	4770      	bx	lr

0800b998 <atan2>:
 800b998:	f000 b856 	b.w	800ba48 <__ieee754_atan2>

0800b99c <sqrt>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	b08b      	sub	sp, #44	; 0x2c
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	f000 f92d 	bl	800bc04 <__ieee754_sqrt>
 800b9aa:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <sqrt+0xa0>)
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	f993 a000 	ldrsb.w	sl, [r3]
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b9b8:	d02b      	beq.n	800ba12 <sqrt+0x76>
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	462b      	mov	r3, r5
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7f5 f823 	bl	8000a0c <__aeabi_dcmpun>
 800b9c6:	4683      	mov	fp, r0
 800b9c8:	bb18      	cbnz	r0, 800ba12 <sqrt+0x76>
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	2700      	movs	r7, #0
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	463b      	mov	r3, r7
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7f4 fff1 	bl	80009bc <__aeabi_dcmplt>
 800b9da:	b1d0      	cbz	r0, 800ba12 <sqrt+0x76>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <sqrt+0xa4>)
 800b9e2:	f8cd b020 	str.w	fp, [sp, #32]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b9ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b9f0:	f1ba 0f00 	cmp.w	sl, #0
 800b9f4:	d112      	bne.n	800ba1c <sqrt+0x80>
 800b9f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b9fa:	4668      	mov	r0, sp
 800b9fc:	f000 fb3e 	bl	800c07c <matherr>
 800ba00:	b1b8      	cbz	r0, 800ba32 <sqrt+0x96>
 800ba02:	9b08      	ldr	r3, [sp, #32]
 800ba04:	b11b      	cbz	r3, 800ba0e <sqrt+0x72>
 800ba06:	f7fd ff43 	bl	8009890 <__errno>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	6003      	str	r3, [r0, #0]
 800ba0e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800ba12:	4640      	mov	r0, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	b00b      	add	sp, #44	; 0x2c
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4630      	mov	r0, r6
 800ba22:	4639      	mov	r1, r7
 800ba24:	f7f4 fe82 	bl	800072c <__aeabi_ddiv>
 800ba28:	f1ba 0f02 	cmp.w	sl, #2
 800ba2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba30:	d1e3      	bne.n	800b9fa <sqrt+0x5e>
 800ba32:	f7fd ff2d 	bl	8009890 <__errno>
 800ba36:	2321      	movs	r3, #33	; 0x21
 800ba38:	6003      	str	r3, [r0, #0]
 800ba3a:	e7e2      	b.n	800ba02 <sqrt+0x66>
 800ba3c:	200001e4 	.word	0x200001e4
 800ba40:	0800cdc0 	.word	0x0800cdc0
 800ba44:	00000000 	.word	0x00000000

0800ba48 <__ieee754_atan2>:
 800ba48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	4256      	negs	r6, r2
 800ba4e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800ba52:	4316      	orrs	r6, r2
 800ba54:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800bc00 <__ieee754_atan2+0x1b8>
 800ba58:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800ba5c:	454e      	cmp	r6, r9
 800ba5e:	4604      	mov	r4, r0
 800ba60:	460d      	mov	r5, r1
 800ba62:	469e      	mov	lr, r3
 800ba64:	d808      	bhi.n	800ba78 <__ieee754_atan2+0x30>
 800ba66:	4246      	negs	r6, r0
 800ba68:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ba6c:	4306      	orrs	r6, r0
 800ba6e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800ba72:	454e      	cmp	r6, r9
 800ba74:	4688      	mov	r8, r1
 800ba76:	d906      	bls.n	800ba86 <__ieee754_atan2+0x3e>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f7f4 fb76 	bl	800016c <__adddf3>
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	e030      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800ba86:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800ba8a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ba8e:	4316      	orrs	r6, r2
 800ba90:	d103      	bne.n	800ba9a <__ieee754_atan2+0x52>
 800ba92:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba96:	f000 b963 	b.w	800bd60 <atan>
 800ba9a:	179e      	asrs	r6, r3, #30
 800ba9c:	f006 0602 	and.w	r6, r6, #2
 800baa0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800baa4:	ea57 0100 	orrs.w	r1, r7, r0
 800baa8:	d107      	bne.n	800baba <__ieee754_atan2+0x72>
 800baaa:	2e02      	cmp	r6, #2
 800baac:	d079      	beq.n	800bba2 <__ieee754_atan2+0x15a>
 800baae:	2e03      	cmp	r6, #3
 800bab0:	d11a      	bne.n	800bae8 <__ieee754_atan2+0xa0>
 800bab2:	a541      	add	r5, pc, #260	; (adr r5, 800bbb8 <__ieee754_atan2+0x170>)
 800bab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bab8:	e016      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800baba:	ea5c 0102 	orrs.w	r1, ip, r2
 800babe:	d106      	bne.n	800bace <__ieee754_atan2+0x86>
 800bac0:	f1b8 0f00 	cmp.w	r8, #0
 800bac4:	da71      	bge.n	800bbaa <__ieee754_atan2+0x162>
 800bac6:	a53e      	add	r5, pc, #248	; (adr r5, 800bbc0 <__ieee754_atan2+0x178>)
 800bac8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bacc:	e00c      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bace:	45cc      	cmp	ip, r9
 800bad0:	d123      	bne.n	800bb1a <__ieee754_atan2+0xd2>
 800bad2:	4567      	cmp	r7, ip
 800bad4:	d114      	bne.n	800bb00 <__ieee754_atan2+0xb8>
 800bad6:	2e02      	cmp	r6, #2
 800bad8:	d00a      	beq.n	800baf0 <__ieee754_atan2+0xa8>
 800bada:	2e03      	cmp	r6, #3
 800badc:	d00c      	beq.n	800baf8 <__ieee754_atan2+0xb0>
 800bade:	2e01      	cmp	r6, #1
 800bae0:	d15b      	bne.n	800bb9a <__ieee754_atan2+0x152>
 800bae2:	a539      	add	r5, pc, #228	; (adr r5, 800bbc8 <__ieee754_atan2+0x180>)
 800bae4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bae8:	4620      	mov	r0, r4
 800baea:	4629      	mov	r1, r5
 800baec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	a537      	add	r5, pc, #220	; (adr r5, 800bbd0 <__ieee754_atan2+0x188>)
 800baf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800baf6:	e7f7      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800baf8:	a537      	add	r5, pc, #220	; (adr r5, 800bbd8 <__ieee754_atan2+0x190>)
 800bafa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bafe:	e7f3      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bb00:	2e02      	cmp	r6, #2
 800bb02:	d04e      	beq.n	800bba2 <__ieee754_atan2+0x15a>
 800bb04:	2e03      	cmp	r6, #3
 800bb06:	d0d4      	beq.n	800bab2 <__ieee754_atan2+0x6a>
 800bb08:	2e01      	cmp	r6, #1
 800bb0a:	f04f 0400 	mov.w	r4, #0
 800bb0e:	d102      	bne.n	800bb16 <__ieee754_atan2+0xce>
 800bb10:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bb14:	e7e8      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bb16:	2500      	movs	r5, #0
 800bb18:	e7e6      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bb1a:	454f      	cmp	r7, r9
 800bb1c:	d0d0      	beq.n	800bac0 <__ieee754_atan2+0x78>
 800bb1e:	eba7 070c 	sub.w	r7, r7, ip
 800bb22:	153f      	asrs	r7, r7, #20
 800bb24:	2f3c      	cmp	r7, #60	; 0x3c
 800bb26:	dc1e      	bgt.n	800bb66 <__ieee754_atan2+0x11e>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da01      	bge.n	800bb30 <__ieee754_atan2+0xe8>
 800bb2c:	373c      	adds	r7, #60	; 0x3c
 800bb2e:	db1e      	blt.n	800bb6e <__ieee754_atan2+0x126>
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fdfa 	bl	800072c <__aeabi_ddiv>
 800bb38:	f000 fa9c 	bl	800c074 <fabs>
 800bb3c:	f000 f910 	bl	800bd60 <atan>
 800bb40:	4604      	mov	r4, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	2e01      	cmp	r6, #1
 800bb46:	d015      	beq.n	800bb74 <__ieee754_atan2+0x12c>
 800bb48:	2e02      	cmp	r6, #2
 800bb4a:	d017      	beq.n	800bb7c <__ieee754_atan2+0x134>
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	d0cb      	beq.n	800bae8 <__ieee754_atan2+0xa0>
 800bb50:	a323      	add	r3, pc, #140	; (adr r3, 800bbe0 <__ieee754_atan2+0x198>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fb05 	bl	8000168 <__aeabi_dsub>
 800bb5e:	a322      	add	r3, pc, #136	; (adr r3, 800bbe8 <__ieee754_atan2+0x1a0>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	e016      	b.n	800bb94 <__ieee754_atan2+0x14c>
 800bb66:	a522      	add	r5, pc, #136	; (adr r5, 800bbf0 <__ieee754_atan2+0x1a8>)
 800bb68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb6c:	e7ea      	b.n	800bb44 <__ieee754_atan2+0xfc>
 800bb6e:	2400      	movs	r4, #0
 800bb70:	2500      	movs	r5, #0
 800bb72:	e7e7      	b.n	800bb44 <__ieee754_atan2+0xfc>
 800bb74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bb78:	461d      	mov	r5, r3
 800bb7a:	e7b5      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bb7c:	a318      	add	r3, pc, #96	; (adr r3, 800bbe0 <__ieee754_atan2+0x198>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	4620      	mov	r0, r4
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7f4 faef 	bl	8000168 <__aeabi_dsub>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	a116      	add	r1, pc, #88	; (adr r1, 800bbe8 <__ieee754_atan2+0x1a0>)
 800bb90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb94:	f7f4 fae8 	bl	8000168 <__aeabi_dsub>
 800bb98:	e772      	b.n	800ba80 <__ieee754_atan2+0x38>
 800bb9a:	a517      	add	r5, pc, #92	; (adr r5, 800bbf8 <__ieee754_atan2+0x1b0>)
 800bb9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bba0:	e7a2      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bba2:	a511      	add	r5, pc, #68	; (adr r5, 800bbe8 <__ieee754_atan2+0x1a0>)
 800bba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bba8:	e79e      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bbaa:	a511      	add	r5, pc, #68	; (adr r5, 800bbf0 <__ieee754_atan2+0x1a8>)
 800bbac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bbb0:	e79a      	b.n	800bae8 <__ieee754_atan2+0xa0>
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	54442d18 	.word	0x54442d18
 800bbbc:	c00921fb 	.word	0xc00921fb
 800bbc0:	54442d18 	.word	0x54442d18
 800bbc4:	bff921fb 	.word	0xbff921fb
 800bbc8:	54442d18 	.word	0x54442d18
 800bbcc:	bfe921fb 	.word	0xbfe921fb
 800bbd0:	7f3321d2 	.word	0x7f3321d2
 800bbd4:	4002d97c 	.word	0x4002d97c
 800bbd8:	7f3321d2 	.word	0x7f3321d2
 800bbdc:	c002d97c 	.word	0xc002d97c
 800bbe0:	33145c07 	.word	0x33145c07
 800bbe4:	3ca1a626 	.word	0x3ca1a626
 800bbe8:	54442d18 	.word	0x54442d18
 800bbec:	400921fb 	.word	0x400921fb
 800bbf0:	54442d18 	.word	0x54442d18
 800bbf4:	3ff921fb 	.word	0x3ff921fb
 800bbf8:	54442d18 	.word	0x54442d18
 800bbfc:	3fe921fb 	.word	0x3fe921fb
 800bc00:	7ff00000 	.word	0x7ff00000

0800bc04 <__ieee754_sqrt>:
 800bc04:	4b54      	ldr	r3, [pc, #336]	; (800bd58 <__ieee754_sqrt+0x154>)
 800bc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0a:	438b      	bics	r3, r1
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460d      	mov	r5, r1
 800bc10:	460a      	mov	r2, r1
 800bc12:	460c      	mov	r4, r1
 800bc14:	d10f      	bne.n	800bc36 <__ieee754_sqrt+0x32>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f7f4 fc5d 	bl	80004d8 <__aeabi_dmul>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4630      	mov	r0, r6
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7f4 faa1 	bl	800016c <__adddf3>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	4630      	mov	r0, r6
 800bc30:	4629      	mov	r1, r5
 800bc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc36:	2900      	cmp	r1, #0
 800bc38:	4607      	mov	r7, r0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	dc0e      	bgt.n	800bc5c <__ieee754_sqrt+0x58>
 800bc3e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bc42:	ea5c 0707 	orrs.w	r7, ip, r7
 800bc46:	d0f2      	beq.n	800bc2e <__ieee754_sqrt+0x2a>
 800bc48:	b141      	cbz	r1, 800bc5c <__ieee754_sqrt+0x58>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	f7f4 fa8b 	bl	8000168 <__aeabi_dsub>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	f7f4 fd69 	bl	800072c <__aeabi_ddiv>
 800bc5a:	e7e6      	b.n	800bc2a <__ieee754_sqrt+0x26>
 800bc5c:	1512      	asrs	r2, r2, #20
 800bc5e:	d074      	beq.n	800bd4a <__ieee754_sqrt+0x146>
 800bc60:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bc64:	07d5      	lsls	r5, r2, #31
 800bc66:	f04f 0500 	mov.w	r5, #0
 800bc6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc6e:	bf48      	it	mi
 800bc70:	0fd9      	lsrmi	r1, r3, #31
 800bc72:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bc76:	bf44      	itt	mi
 800bc78:	005b      	lslmi	r3, r3, #1
 800bc7a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800bc7e:	1051      	asrs	r1, r2, #1
 800bc80:	0fda      	lsrs	r2, r3, #31
 800bc82:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800bc86:	4628      	mov	r0, r5
 800bc88:	2216      	movs	r2, #22
 800bc8a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	1987      	adds	r7, r0, r6
 800bc92:	42a7      	cmp	r7, r4
 800bc94:	bfde      	ittt	le
 800bc96:	19b8      	addle	r0, r7, r6
 800bc98:	1be4      	suble	r4, r4, r7
 800bc9a:	19ad      	addle	r5, r5, r6
 800bc9c:	0fdf      	lsrs	r7, r3, #31
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800bca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bca8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bcac:	d1f0      	bne.n	800bc90 <__ieee754_sqrt+0x8c>
 800bcae:	f04f 0c20 	mov.w	ip, #32
 800bcb2:	4696      	mov	lr, r2
 800bcb4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bcb8:	4284      	cmp	r4, r0
 800bcba:	eb06 070e 	add.w	r7, r6, lr
 800bcbe:	dc02      	bgt.n	800bcc6 <__ieee754_sqrt+0xc2>
 800bcc0:	d112      	bne.n	800bce8 <__ieee754_sqrt+0xe4>
 800bcc2:	429f      	cmp	r7, r3
 800bcc4:	d810      	bhi.n	800bce8 <__ieee754_sqrt+0xe4>
 800bcc6:	2f00      	cmp	r7, #0
 800bcc8:	eb07 0e06 	add.w	lr, r7, r6
 800bccc:	da42      	bge.n	800bd54 <__ieee754_sqrt+0x150>
 800bcce:	f1be 0f00 	cmp.w	lr, #0
 800bcd2:	db3f      	blt.n	800bd54 <__ieee754_sqrt+0x150>
 800bcd4:	f100 0801 	add.w	r8, r0, #1
 800bcd8:	1a24      	subs	r4, r4, r0
 800bcda:	4640      	mov	r0, r8
 800bcdc:	429f      	cmp	r7, r3
 800bcde:	bf88      	it	hi
 800bce0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800bce4:	1bdb      	subs	r3, r3, r7
 800bce6:	4432      	add	r2, r6
 800bce8:	0064      	lsls	r4, r4, #1
 800bcea:	f1bc 0c01 	subs.w	ip, ip, #1
 800bcee:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800bcf2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bcf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcfa:	d1dd      	bne.n	800bcb8 <__ieee754_sqrt+0xb4>
 800bcfc:	4323      	orrs	r3, r4
 800bcfe:	d006      	beq.n	800bd0e <__ieee754_sqrt+0x10a>
 800bd00:	1c54      	adds	r4, r2, #1
 800bd02:	bf0b      	itete	eq
 800bd04:	4662      	moveq	r2, ip
 800bd06:	3201      	addne	r2, #1
 800bd08:	3501      	addeq	r5, #1
 800bd0a:	f022 0201 	bicne.w	r2, r2, #1
 800bd0e:	106b      	asrs	r3, r5, #1
 800bd10:	0852      	lsrs	r2, r2, #1
 800bd12:	07e8      	lsls	r0, r5, #31
 800bd14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd1c:	bf48      	it	mi
 800bd1e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bd22:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bd26:	4616      	mov	r6, r2
 800bd28:	e781      	b.n	800bc2e <__ieee754_sqrt+0x2a>
 800bd2a:	0adc      	lsrs	r4, r3, #11
 800bd2c:	3915      	subs	r1, #21
 800bd2e:	055b      	lsls	r3, r3, #21
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	d0fa      	beq.n	800bd2a <__ieee754_sqrt+0x126>
 800bd34:	02e6      	lsls	r6, r4, #11
 800bd36:	d50a      	bpl.n	800bd4e <__ieee754_sqrt+0x14a>
 800bd38:	f1c2 0020 	rsb	r0, r2, #32
 800bd3c:	fa23 f000 	lsr.w	r0, r3, r0
 800bd40:	1e55      	subs	r5, r2, #1
 800bd42:	4093      	lsls	r3, r2
 800bd44:	4304      	orrs	r4, r0
 800bd46:	1b4a      	subs	r2, r1, r5
 800bd48:	e78a      	b.n	800bc60 <__ieee754_sqrt+0x5c>
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	e7f0      	b.n	800bd30 <__ieee754_sqrt+0x12c>
 800bd4e:	0064      	lsls	r4, r4, #1
 800bd50:	3201      	adds	r2, #1
 800bd52:	e7ef      	b.n	800bd34 <__ieee754_sqrt+0x130>
 800bd54:	4680      	mov	r8, r0
 800bd56:	e7bf      	b.n	800bcd8 <__ieee754_sqrt+0xd4>
 800bd58:	7ff00000 	.word	0x7ff00000
 800bd5c:	00000000 	.word	0x00000000

0800bd60 <atan>:
 800bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	4bb6      	ldr	r3, [pc, #728]	; (800c040 <atan+0x2e0>)
 800bd66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd6a:	429e      	cmp	r6, r3
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	468b      	mov	fp, r1
 800bd72:	dd17      	ble.n	800bda4 <atan+0x44>
 800bd74:	4bb3      	ldr	r3, [pc, #716]	; (800c044 <atan+0x2e4>)
 800bd76:	429e      	cmp	r6, r3
 800bd78:	dc01      	bgt.n	800bd7e <atan+0x1e>
 800bd7a:	d109      	bne.n	800bd90 <atan+0x30>
 800bd7c:	b140      	cbz	r0, 800bd90 <atan+0x30>
 800bd7e:	4622      	mov	r2, r4
 800bd80:	462b      	mov	r3, r5
 800bd82:	4620      	mov	r0, r4
 800bd84:	4629      	mov	r1, r5
 800bd86:	f7f4 f9f1 	bl	800016c <__adddf3>
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	460d      	mov	r5, r1
 800bd8e:	e005      	b.n	800bd9c <atan+0x3c>
 800bd90:	f1bb 0f00 	cmp.w	fp, #0
 800bd94:	4cac      	ldr	r4, [pc, #688]	; (800c048 <atan+0x2e8>)
 800bd96:	f340 8121 	ble.w	800bfdc <atan+0x27c>
 800bd9a:	4dac      	ldr	r5, [pc, #688]	; (800c04c <atan+0x2ec>)
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda4:	4baa      	ldr	r3, [pc, #680]	; (800c050 <atan+0x2f0>)
 800bda6:	429e      	cmp	r6, r3
 800bda8:	dc11      	bgt.n	800bdce <atan+0x6e>
 800bdaa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bdae:	429e      	cmp	r6, r3
 800bdb0:	dc0a      	bgt.n	800bdc8 <atan+0x68>
 800bdb2:	a38b      	add	r3, pc, #556	; (adr r3, 800bfe0 <atan+0x280>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 f9d8 	bl	800016c <__adddf3>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4ba5      	ldr	r3, [pc, #660]	; (800c054 <atan+0x2f4>)
 800bdc0:	f7f4 fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1e9      	bne.n	800bd9c <atan+0x3c>
 800bdc8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bdcc:	e027      	b.n	800be1e <atan+0xbe>
 800bdce:	f000 f951 	bl	800c074 <fabs>
 800bdd2:	4ba1      	ldr	r3, [pc, #644]	; (800c058 <atan+0x2f8>)
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	429e      	cmp	r6, r3
 800bdd8:	460d      	mov	r5, r1
 800bdda:	f300 80b8 	bgt.w	800bf4e <atan+0x1ee>
 800bdde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bde2:	429e      	cmp	r6, r3
 800bde4:	f300 809c 	bgt.w	800bf20 <atan+0x1c0>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	f7f4 f9be 	bl	800016c <__adddf3>
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4b98      	ldr	r3, [pc, #608]	; (800c054 <atan+0x2f4>)
 800bdf4:	f7f4 f9b8 	bl	8000168 <__aeabi_dsub>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 f9b1 	bl	800016c <__adddf3>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4630      	mov	r0, r6
 800be10:	4639      	mov	r1, r7
 800be12:	f7f4 fc8b 	bl	800072c <__aeabi_ddiv>
 800be16:	f04f 0a00 	mov.w	sl, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	460d      	mov	r5, r1
 800be1e:	4622      	mov	r2, r4
 800be20:	462b      	mov	r3, r5
 800be22:	4620      	mov	r0, r4
 800be24:	4629      	mov	r1, r5
 800be26:	f7f4 fb57 	bl	80004d8 <__aeabi_dmul>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4680      	mov	r8, r0
 800be30:	4689      	mov	r9, r1
 800be32:	f7f4 fb51 	bl	80004d8 <__aeabi_dmul>
 800be36:	a36c      	add	r3, pc, #432	; (adr r3, 800bfe8 <atan+0x288>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	4606      	mov	r6, r0
 800be3e:	460f      	mov	r7, r1
 800be40:	f7f4 fb4a 	bl	80004d8 <__aeabi_dmul>
 800be44:	a36a      	add	r3, pc, #424	; (adr r3, 800bff0 <atan+0x290>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 f98f 	bl	800016c <__adddf3>
 800be4e:	4632      	mov	r2, r6
 800be50:	463b      	mov	r3, r7
 800be52:	f7f4 fb41 	bl	80004d8 <__aeabi_dmul>
 800be56:	a368      	add	r3, pc, #416	; (adr r3, 800bff8 <atan+0x298>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 f986 	bl	800016c <__adddf3>
 800be60:	4632      	mov	r2, r6
 800be62:	463b      	mov	r3, r7
 800be64:	f7f4 fb38 	bl	80004d8 <__aeabi_dmul>
 800be68:	a365      	add	r3, pc, #404	; (adr r3, 800c000 <atan+0x2a0>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 f97d 	bl	800016c <__adddf3>
 800be72:	4632      	mov	r2, r6
 800be74:	463b      	mov	r3, r7
 800be76:	f7f4 fb2f 	bl	80004d8 <__aeabi_dmul>
 800be7a:	a363      	add	r3, pc, #396	; (adr r3, 800c008 <atan+0x2a8>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 f974 	bl	800016c <__adddf3>
 800be84:	4632      	mov	r2, r6
 800be86:	463b      	mov	r3, r7
 800be88:	f7f4 fb26 	bl	80004d8 <__aeabi_dmul>
 800be8c:	a360      	add	r3, pc, #384	; (adr r3, 800c010 <atan+0x2b0>)
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f7f4 f96b 	bl	800016c <__adddf3>
 800be96:	4642      	mov	r2, r8
 800be98:	464b      	mov	r3, r9
 800be9a:	f7f4 fb1d 	bl	80004d8 <__aeabi_dmul>
 800be9e:	a35e      	add	r3, pc, #376	; (adr r3, 800c018 <atan+0x2b8>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	4630      	mov	r0, r6
 800beaa:	4639      	mov	r1, r7
 800beac:	f7f4 fb14 	bl	80004d8 <__aeabi_dmul>
 800beb0:	a35b      	add	r3, pc, #364	; (adr r3, 800c020 <atan+0x2c0>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 f957 	bl	8000168 <__aeabi_dsub>
 800beba:	4632      	mov	r2, r6
 800bebc:	463b      	mov	r3, r7
 800bebe:	f7f4 fb0b 	bl	80004d8 <__aeabi_dmul>
 800bec2:	a359      	add	r3, pc, #356	; (adr r3, 800c028 <atan+0x2c8>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	f7f4 f94e 	bl	8000168 <__aeabi_dsub>
 800becc:	4632      	mov	r2, r6
 800bece:	463b      	mov	r3, r7
 800bed0:	f7f4 fb02 	bl	80004d8 <__aeabi_dmul>
 800bed4:	a356      	add	r3, pc, #344	; (adr r3, 800c030 <atan+0x2d0>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 f945 	bl	8000168 <__aeabi_dsub>
 800bede:	4632      	mov	r2, r6
 800bee0:	463b      	mov	r3, r7
 800bee2:	f7f4 faf9 	bl	80004d8 <__aeabi_dmul>
 800bee6:	a354      	add	r3, pc, #336	; (adr r3, 800c038 <atan+0x2d8>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 f93c 	bl	8000168 <__aeabi_dsub>
 800bef0:	4632      	mov	r2, r6
 800bef2:	463b      	mov	r3, r7
 800bef4:	f7f4 faf0 	bl	80004d8 <__aeabi_dmul>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	f7f4 f934 	bl	800016c <__adddf3>
 800bf04:	4622      	mov	r2, r4
 800bf06:	462b      	mov	r3, r5
 800bf08:	f7f4 fae6 	bl	80004d8 <__aeabi_dmul>
 800bf0c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	d144      	bne.n	800bfa0 <atan+0x240>
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 f925 	bl	8000168 <__aeabi_dsub>
 800bf1e:	e734      	b.n	800bd8a <atan+0x2a>
 800bf20:	2200      	movs	r2, #0
 800bf22:	4b4c      	ldr	r3, [pc, #304]	; (800c054 <atan+0x2f4>)
 800bf24:	f7f4 f920 	bl	8000168 <__aeabi_dsub>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	4b49      	ldr	r3, [pc, #292]	; (800c054 <atan+0x2f4>)
 800bf30:	4620      	mov	r0, r4
 800bf32:	4629      	mov	r1, r5
 800bf34:	f7f4 f91a 	bl	800016c <__adddf3>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	4639      	mov	r1, r7
 800bf40:	f7f4 fbf4 	bl	800072c <__aeabi_ddiv>
 800bf44:	f04f 0a01 	mov.w	sl, #1
 800bf48:	4604      	mov	r4, r0
 800bf4a:	460d      	mov	r5, r1
 800bf4c:	e767      	b.n	800be1e <atan+0xbe>
 800bf4e:	4b43      	ldr	r3, [pc, #268]	; (800c05c <atan+0x2fc>)
 800bf50:	429e      	cmp	r6, r3
 800bf52:	dc1a      	bgt.n	800bf8a <atan+0x22a>
 800bf54:	2200      	movs	r2, #0
 800bf56:	4b42      	ldr	r3, [pc, #264]	; (800c060 <atan+0x300>)
 800bf58:	f7f4 f906 	bl	8000168 <__aeabi_dsub>
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460f      	mov	r7, r1
 800bf62:	4b3f      	ldr	r3, [pc, #252]	; (800c060 <atan+0x300>)
 800bf64:	4620      	mov	r0, r4
 800bf66:	4629      	mov	r1, r5
 800bf68:	f7f4 fab6 	bl	80004d8 <__aeabi_dmul>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	4b39      	ldr	r3, [pc, #228]	; (800c054 <atan+0x2f4>)
 800bf70:	f7f4 f8fc 	bl	800016c <__adddf3>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4630      	mov	r0, r6
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 fbd6 	bl	800072c <__aeabi_ddiv>
 800bf80:	f04f 0a02 	mov.w	sl, #2
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	e749      	b.n	800be1e <atan+0xbe>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	2000      	movs	r0, #0
 800bf90:	4934      	ldr	r1, [pc, #208]	; (800c064 <atan+0x304>)
 800bf92:	f7f4 fbcb 	bl	800072c <__aeabi_ddiv>
 800bf96:	f04f 0a03 	mov.w	sl, #3
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	e73e      	b.n	800be1e <atan+0xbe>
 800bfa0:	4b31      	ldr	r3, [pc, #196]	; (800c068 <atan+0x308>)
 800bfa2:	4e32      	ldr	r6, [pc, #200]	; (800c06c <atan+0x30c>)
 800bfa4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bfa8:	4456      	add	r6, sl
 800bfaa:	449a      	add	sl, r3
 800bfac:	e9da 2300 	ldrd	r2, r3, [sl]
 800bfb0:	f7f4 f8da 	bl	8000168 <__aeabi_dsub>
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	f7f4 f8d6 	bl	8000168 <__aeabi_dsub>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bfc4:	f7f4 f8d0 	bl	8000168 <__aeabi_dsub>
 800bfc8:	f1bb 0f00 	cmp.w	fp, #0
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	f6bf aee4 	bge.w	800bd9c <atan+0x3c>
 800bfd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd8:	461d      	mov	r5, r3
 800bfda:	e6df      	b.n	800bd9c <atan+0x3c>
 800bfdc:	4d24      	ldr	r5, [pc, #144]	; (800c070 <atan+0x310>)
 800bfde:	e6dd      	b.n	800bd9c <atan+0x3c>
 800bfe0:	8800759c 	.word	0x8800759c
 800bfe4:	7e37e43c 	.word	0x7e37e43c
 800bfe8:	e322da11 	.word	0xe322da11
 800bfec:	3f90ad3a 	.word	0x3f90ad3a
 800bff0:	24760deb 	.word	0x24760deb
 800bff4:	3fa97b4b 	.word	0x3fa97b4b
 800bff8:	a0d03d51 	.word	0xa0d03d51
 800bffc:	3fb10d66 	.word	0x3fb10d66
 800c000:	c54c206e 	.word	0xc54c206e
 800c004:	3fb745cd 	.word	0x3fb745cd
 800c008:	920083ff 	.word	0x920083ff
 800c00c:	3fc24924 	.word	0x3fc24924
 800c010:	5555550d 	.word	0x5555550d
 800c014:	3fd55555 	.word	0x3fd55555
 800c018:	2c6a6c2f 	.word	0x2c6a6c2f
 800c01c:	bfa2b444 	.word	0xbfa2b444
 800c020:	52defd9a 	.word	0x52defd9a
 800c024:	3fadde2d 	.word	0x3fadde2d
 800c028:	af749a6d 	.word	0xaf749a6d
 800c02c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c030:	fe231671 	.word	0xfe231671
 800c034:	3fbc71c6 	.word	0x3fbc71c6
 800c038:	9998ebc4 	.word	0x9998ebc4
 800c03c:	3fc99999 	.word	0x3fc99999
 800c040:	440fffff 	.word	0x440fffff
 800c044:	7ff00000 	.word	0x7ff00000
 800c048:	54442d18 	.word	0x54442d18
 800c04c:	3ff921fb 	.word	0x3ff921fb
 800c050:	3fdbffff 	.word	0x3fdbffff
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	3ff2ffff 	.word	0x3ff2ffff
 800c05c:	40037fff 	.word	0x40037fff
 800c060:	3ff80000 	.word	0x3ff80000
 800c064:	bff00000 	.word	0xbff00000
 800c068:	0800cde8 	.word	0x0800cde8
 800c06c:	0800cdc8 	.word	0x0800cdc8
 800c070:	bff921fb 	.word	0xbff921fb

0800c074 <fabs>:
 800c074:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c078:	4619      	mov	r1, r3
 800c07a:	4770      	bx	lr

0800c07c <matherr>:
 800c07c:	2000      	movs	r0, #0
 800c07e:	4770      	bx	lr

0800c080 <_init>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

0800c08c <_fini>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	bf00      	nop
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr
