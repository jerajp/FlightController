
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b998  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800baa8  0800baa8  0001baa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c138  0800c138  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c138  0800c138  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c138  0800c138  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c138  0800c138  0001c138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200001e8  0800c324  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800c324  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dca  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cbb  00000000  00000000  00034fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  00037c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  000390b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016997  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ebd8  00000000  00000000  00050d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dfdb  00000000  00000000  0005f8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd8da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b8  00000000  00000000  000dd958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba90 	.word	0x0800ba90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ba90 	.word	0x0800ba90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <__aeabi_f2ulz>:
 8001110:	b5d0      	push	{r4, r6, r7, lr}
 8001112:	f7ff f989 	bl	8000428 <__aeabi_f2d>
 8001116:	2200      	movs	r2, #0
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <__aeabi_f2ulz+0x40>)
 800111a:	4606      	mov	r6, r0
 800111c:	460f      	mov	r7, r1
 800111e:	f7ff f9db 	bl	80004d8 <__aeabi_dmul>
 8001122:	f000 f819 	bl	8001158 <__aeabi_d2uiz>
 8001126:	4604      	mov	r4, r0
 8001128:	f7ff f95c 	bl	80003e4 <__aeabi_ui2d>
 800112c:	2200      	movs	r2, #0
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <__aeabi_f2ulz+0x44>)
 8001130:	f7ff f9d2 	bl	80004d8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4630      	mov	r0, r6
 800113a:	4639      	mov	r1, r7
 800113c:	f7ff f814 	bl	8000168 <__aeabi_dsub>
 8001140:	f000 f80a 	bl	8001158 <__aeabi_d2uiz>
 8001144:	2200      	movs	r2, #0
 8001146:	4623      	mov	r3, r4
 8001148:	4310      	orrs	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	bdd0      	pop	{r4, r6, r7, pc}
 800114e:	bf00      	nop
 8001150:	3df00000 	.word	0x3df00000
 8001154:	41f00000 	.word	0x41f00000

08001158 <__aeabi_d2uiz>:
 8001158:	004a      	lsls	r2, r1, #1
 800115a:	d211      	bcs.n	8001180 <__aeabi_d2uiz+0x28>
 800115c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001160:	d211      	bcs.n	8001186 <__aeabi_d2uiz+0x2e>
 8001162:	d50d      	bpl.n	8001180 <__aeabi_d2uiz+0x28>
 8001164:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800116c:	d40e      	bmi.n	800118c <__aeabi_d2uiz+0x34>
 800116e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800117a:	fa23 f002 	lsr.w	r0, r3, r2
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800118a:	d102      	bne.n	8001192 <__aeabi_d2uiz+0x3a>
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001190:	4770      	bx	lr
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	4770      	bx	lr

08001198 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f107 030f 	add.w	r3, r7, #15
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2275      	movs	r2, #117	; 0x75
 80011b4:	21d0      	movs	r1, #208	; 0xd0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f004 fca2 	bl	8005b00 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b68      	cmp	r3, #104	; 0x68
 80011c0:	d101      	bne.n	80011c6 <MPU6050_check+0x2e>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 80011c6:	2300      	movs	r3, #0

}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	f107 030f 	add.w	r3, r7, #15
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	226b      	movs	r2, #107	; 0x6b
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f004 fb8a 	bl	800590c <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 80011f8:	2307      	movs	r3, #7
 80011fa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	2219      	movs	r2, #25
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f004 fb7a 	bl	800590c <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001218:	2308      	movs	r3, #8
 800121a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 030f 	add.w	r3, r7, #15
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	221b      	movs	r2, #27
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f004 fb6a 	bl	800590c <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 8001238:	2310      	movs	r3, #16
 800123a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 800123c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	221c      	movs	r2, #28
 8001250:	21d0      	movs	r1, #208	; 0xd0
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f004 fb5a 	bl	800590c <HAL_I2C_Mem_Write>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2306      	movs	r3, #6
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	223b      	movs	r2, #59	; 0x3b
 800127e:	21d0      	movs	r1, #208	; 0xd0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f004 fc3d 	bl	8005b00 <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 8001286:	7a3b      	ldrb	r3, [r7, #8]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7a7b      	ldrb	r3, [r7, #9]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 80012aa:	7b3b      	ldrb	r3, [r7, #12]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7b7b      	ldrb	r3, [r7, #13]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	809a      	strh	r2, [r3, #4]

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af04      	add	r7, sp, #16
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2306      	movs	r3, #6
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	2243      	movs	r2, #67	; 0x43
 80012e2:	21d0      	movs	r1, #208	; 0xd0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f004 fc0b 	bl	8005b00 <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 80012ea:	7a3b      	ldrb	r3, [r7, #8]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21a      	sxth	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 800130e:	7b3b      	ldrb	r3, [r7, #12]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	815a      	strh	r2, [r3, #10]
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001334:	887a      	ldrh	r2, [r7, #2]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60da      	str	r2, [r3, #12]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	b29b      	uxth	r3, r3
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001398:	4b6b      	ldr	r3, [pc, #428]	; (8001548 <main+0x1b8>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <main+0x1b8>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80013a4:	4b69      	ldr	r3, [pc, #420]	; (800154c <main+0x1bc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <main+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <main+0x1bc>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f002 ffb9 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 fce1 	bl	8001d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 ff19 	bl	80021f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013c2:	f000 fd39 	bl	8001e38 <MX_ADC1_Init>
  MX_I2C2_Init();
 80013c6:	f000 fd75 	bl	8001eb4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80013ca:	f000 fda1 	bl	8001f10 <MX_SPI2_Init>
  MX_TIM1_Init();
 80013ce:	f000 fdd5 	bl	8001f7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013d2:	f000 fee5 	bl	80021a0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013d6:	f000 fe97 	bl	8002108 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80013da:	485d      	ldr	r0, [pc, #372]	; (8001550 <main+0x1c0>)
 80013dc:	f003 fc3a 	bl	8004c54 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80013e0:	485b      	ldr	r0, [pc, #364]	; (8001550 <main+0x1c0>)
 80013e2:	f003 f8ff 	bl	80045e4 <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <main+0x1c4>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=5.0;
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <main+0x1c4>)
 80013ee:	4a5a      	ldr	r2, [pc, #360]	; (8001558 <main+0x1c8>)
 80013f0:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.001;
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <main+0x1c4>)
 80013f4:	4a59      	ldr	r2, [pc, #356]	; (800155c <main+0x1cc>)
 80013f6:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=500.0;
 80013f8:	4b56      	ldr	r3, [pc, #344]	; (8001554 <main+0x1c4>)
 80013fa:	4a59      	ldr	r2, [pc, #356]	; (8001560 <main+0x1d0>)
 80013fc:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=5.0;
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <main+0x1c4>)
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <main+0x1c8>)
 8001402:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.001;
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <main+0x1c4>)
 8001406:	4a55      	ldr	r2, [pc, #340]	; (800155c <main+0x1cc>)
 8001408:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=500.0;
 800140a:	4b52      	ldr	r3, [pc, #328]	; (8001554 <main+0x1c4>)
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <main+0x1d0>)
 800140e:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=4;
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <main+0x1c4>)
 8001412:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001416:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0;
 8001418:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <main+0x1c4>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=0;
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <main+0x1c4>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <main+0x1c4>)
 800142a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <main+0x1c4>)
 8001432:	2264      	movs	r2, #100	; 0x64
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <main+0x1c4>)
 8001438:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 800143e:	4b45      	ldr	r3, [pc, #276]	; (8001554 <main+0x1c4>)
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 400;
 8001444:	4b43      	ldr	r3, [pc, #268]	; (8001554 <main+0x1c4>)
 8001446:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 100;
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <main+0x1c4>)
 800144e:	2264      	movs	r2, #100	; 0x64
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 8001452:	4844      	ldr	r0, [pc, #272]	; (8001564 <main+0x1d4>)
 8001454:	f001 f85a 	bl	800250c <CheckFlashData>
 8001458:	4603      	mov	r3, r0
 800145a:	2b07      	cmp	r3, #7
 800145c:	d104      	bne.n	8001468 <main+0xd8>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 800145e:	4942      	ldr	r1, [pc, #264]	; (8001568 <main+0x1d8>)
 8001460:	4840      	ldr	r0, [pc, #256]	; (8001564 <main+0x1d4>)
 8001462:	f001 f85e 	bl	8002522 <ReadFlashData>
 8001466:	e007      	b.n	8001478 <main+0xe8>

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR, &FlashDataDefault);
 8001468:	493a      	ldr	r1, [pc, #232]	; (8001554 <main+0x1c4>)
 800146a:	483e      	ldr	r0, [pc, #248]	; (8001564 <main+0x1d4>)
 800146c:	f000 ff64 	bl	8002338 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8001470:	493d      	ldr	r1, [pc, #244]	; (8001568 <main+0x1d8>)
 8001472:	483c      	ldr	r0, [pc, #240]	; (8001564 <main+0x1d4>)
 8001474:	f001 f855 	bl	8002522 <ReadFlashData>
  }//------------------------------------------------------------------------------------------------------


  HAL_Delay(400);//wait for stable power
 8001478:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800147c:	f002 ffb8 	bl	80043f0 <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001480:	483a      	ldr	r0, [pc, #232]	; (800156c <main+0x1dc>)
 8001482:	f7ff fe89 	bl	8001198 <MPU6050_check>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <main+0x1e0>)
 800148c:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 800148e:	4837      	ldr	r0, [pc, #220]	; (800156c <main+0x1dc>)
 8001490:	f7ff fe9e 	bl	80011d0 <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 8001494:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001498:	f002 ffaa 	bl	80043f0 <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <main+0x1e4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <main+0x1e4>)
 80014a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a6:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4832      	ldr	r0, [pc, #200]	; (8001578 <main+0x1e8>)
 80014b0:	f004 f8d4 	bl	800565c <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 80014b4:	f001 fa44 	bl	8002940 <nRF24_Check>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <main+0x1ec>)
 80014be:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80014c0:	f001 f9ec 	bl	800289c <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80014c4:	20ff      	movs	r0, #255	; 0xff
 80014c6:	f001 fbcd 	bl	8002c64 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80014ca:	200f      	movs	r0, #15
 80014cc:	f001 fac7 	bl	8002a5e <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80014d0:	2020      	movs	r0, #32
 80014d2:	f001 fb58 	bl	8002b86 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80014d6:	2008      	movs	r0, #8
 80014d8:	f001 faa0 	bl	8002a1c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80014dc:	2003      	movs	r0, #3
 80014de:	f001 facc 	bl	8002a7a <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80014e2:	4927      	ldr	r1, [pc, #156]	; (8001580 <main+0x1f0>)
 80014e4:	2001      	movs	r0, #1
 80014e6:	f001 fad9 	bl	8002a9c <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 80014ea:	2207      	movs	r2, #7
 80014ec:	2100      	movs	r1, #0
 80014ee:	2001      	movs	r0, #1
 80014f0:	f001 fb64 	bl	8002bbc <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80014f4:	4922      	ldr	r1, [pc, #136]	; (8001580 <main+0x1f0>)
 80014f6:	2006      	movs	r0, #6
 80014f8:	f001 fad0 	bl	8002a9c <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80014fc:	2004      	movs	r0, #4
 80014fe:	f001 fb27 	bl	8002b50 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001502:	2001      	movs	r0, #1
 8001504:	f001 fa69 	bl	80029da <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 8001508:	f001 fbf6 	bl	8002cf8 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 800150c:	2002      	movs	r0, #2
 800150e:	f001 fa45 	bl	800299c <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <main+0x1e8>)
 800151a:	f004 f89f 	bl	800565c <HAL_GPIO_WritePin>

  //get GYRO offset
  HAL_Delay(2000);//wait to connect battery
 800151e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001522:	f002 ff65 	bl	80043f0 <HAL_Delay>
  GyroCalibStatus=1;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0x1f4>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  SUMGyroX=0;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <main+0x1f8>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <main+0x1fc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <main+0x200>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

  for(i=0;i<1000;i++)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <main+0x204>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e04f      	b.n	80015e6 <main+0x256>
 8001546:	bf00      	nop
 8001548:	e000edf0 	.word	0xe000edf0
 800154c:	e0001000 	.word	0xe0001000
 8001550:	20000440 	.word	0x20000440
 8001554:	20000358 	.word	0x20000358
 8001558:	40a00000 	.word	0x40a00000
 800155c:	3a83126f 	.word	0x3a83126f
 8001560:	43fa0000 	.word	0x43fa0000
 8001564:	0800fc00 	.word	0x0800fc00
 8001568:	20000510 	.word	0x20000510
 800156c:	200002e0 	.word	0x200002e0
 8001570:	200004b6 	.word	0x200004b6
 8001574:	40003800 	.word	0x40003800
 8001578:	40010c00 	.word	0x40010c00
 800157c:	200003a4 	.word	0x200003a4
 8001580:	0800bcc8 	.word	0x0800bcc8
 8001584:	20000210 	.word	0x20000210
 8001588:	200005f4 	.word	0x200005f4
 800158c:	200004bc 	.word	0x200004bc
 8001590:	2000041c 	.word	0x2000041c
 8001594:	20000208 	.word	0x20000208
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8001598:	49ae      	ldr	r1, [pc, #696]	; (8001854 <main+0x4c4>)
 800159a:	48af      	ldr	r0, [pc, #700]	; (8001858 <main+0x4c8>)
 800159c:	f7ff fe92 	bl	80012c4 <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 80015a0:	4bac      	ldr	r3, [pc, #688]	; (8001854 <main+0x4c4>)
 80015a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4bac      	ldr	r3, [pc, #688]	; (800185c <main+0x4cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	4aab      	ldr	r2, [pc, #684]	; (800185c <main+0x4cc>)
 80015b0:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 80015b2:	4ba8      	ldr	r3, [pc, #672]	; (8001854 <main+0x4c4>)
 80015b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4ba9      	ldr	r3, [pc, #676]	; (8001860 <main+0x4d0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4aa7      	ldr	r2, [pc, #668]	; (8001860 <main+0x4d0>)
 80015c2:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 80015c4:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <main+0x4c4>)
 80015c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <main+0x4d4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	4aa4      	ldr	r2, [pc, #656]	; (8001864 <main+0x4d4>)
 80015d4:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f002 ff0a 	bl	80043f0 <HAL_Delay>
  for(i=0;i<1000;i++)
 80015dc:	4ba2      	ldr	r3, [pc, #648]	; (8001868 <main+0x4d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4aa1      	ldr	r2, [pc, #644]	; (8001868 <main+0x4d8>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4ba0      	ldr	r3, [pc, #640]	; (8001868 <main+0x4d8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ee:	d3d3      	bcc.n	8001598 <main+0x208>
  }

  GyroXOff=SUMGyroX/1000;
 80015f0:	4b9a      	ldr	r3, [pc, #616]	; (800185c <main+0x4cc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a9d      	ldr	r2, [pc, #628]	; (800186c <main+0x4dc>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	1192      	asrs	r2, r2, #6
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b9b      	ldr	r3, [pc, #620]	; (8001870 <main+0x4e0>)
 8001604:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 8001606:	4b96      	ldr	r3, [pc, #600]	; (8001860 <main+0x4d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a98      	ldr	r2, [pc, #608]	; (800186c <main+0x4dc>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	1192      	asrs	r2, r2, #6
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b21a      	sxth	r2, r3
 8001618:	4b96      	ldr	r3, [pc, #600]	; (8001874 <main+0x4e4>)
 800161a:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 800161c:	4b91      	ldr	r3, [pc, #580]	; (8001864 <main+0x4d4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a92      	ldr	r2, [pc, #584]	; (800186c <main+0x4dc>)
 8001622:	fb82 1203 	smull	r1, r2, r2, r3
 8001626:	1192      	asrs	r2, r2, #6
 8001628:	17db      	asrs	r3, r3, #31
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b92      	ldr	r3, [pc, #584]	; (8001878 <main+0x4e8>)
 8001630:	801a      	strh	r2, [r3, #0]

  GyroCalibStatus=0;
 8001632:	4b92      	ldr	r3, [pc, #584]	; (800187c <main+0x4ec>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

  //startup angles Accel to Gyro transfer
  AnglePitchGyro=AnglePitchAccel;
 8001638:	4b91      	ldr	r3, [pc, #580]	; (8001880 <main+0x4f0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a91      	ldr	r2, [pc, #580]	; (8001884 <main+0x4f4>)
 800163e:	6013      	str	r3, [r2, #0]
  AngleRollGyro=AngleRollAccel;
 8001640:	4b91      	ldr	r3, [pc, #580]	; (8001888 <main+0x4f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a91      	ldr	r2, [pc, #580]	; (800188c <main+0x4fc>)
 8001646:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	4891      	ldr	r0, [pc, #580]	; (8001890 <main+0x500>)
 800164c:	f005 fe36 	bl	80072bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001650:	2104      	movs	r1, #4
 8001652:	488f      	ldr	r0, [pc, #572]	; (8001890 <main+0x500>)
 8001654:	f005 fe32 	bl	80072bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001658:	2108      	movs	r1, #8
 800165a:	488d      	ldr	r0, [pc, #564]	; (8001890 <main+0x500>)
 800165c:	f005 fe2e 	bl	80072bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001660:	210c      	movs	r1, #12
 8001662:	488b      	ldr	r0, [pc, #556]	; (8001890 <main+0x500>)
 8001664:	f005 fe2a 	bl	80072bc <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8001668:	4b8a      	ldr	r3, [pc, #552]	; (8001894 <main+0x504>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 800166e:	488a      	ldr	r0, [pc, #552]	; (8001898 <main+0x508>)
 8001670:	f005 fdcc 	bl	800720c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f002 febb 	bl	80043f0 <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 800167a:	4b88      	ldr	r3, [pc, #544]	; (800189c <main+0x50c>)
 800167c:	4a88      	ldr	r2, [pc, #544]	; (80018a0 <main+0x510>)
 800167e:	6810      	ldr	r0, [r2, #0]
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	7912      	ldrb	r2, [r2, #4]
 8001684:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001686:	4885      	ldr	r0, [pc, #532]	; (800189c <main+0x50c>)
 8001688:	f7fe fd62 	bl	8000150 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	4982      	ldr	r1, [pc, #520]	; (800189c <main+0x50c>)
 8001694:	4883      	ldr	r0, [pc, #524]	; (80018a4 <main+0x514>)
 8001696:	f006 fc8d 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 800169a:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <main+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4981      	ldr	r1, [pc, #516]	; (80018a8 <main+0x518>)
 80016a2:	487e      	ldr	r0, [pc, #504]	; (800189c <main+0x50c>)
 80016a4:	f007 fac6 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016a8:	487c      	ldr	r0, [pc, #496]	; (800189c <main+0x50c>)
 80016aa:	f7fe fd51 	bl	8000150 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	2301      	movs	r3, #1
 80016b4:	4979      	ldr	r1, [pc, #484]	; (800189c <main+0x50c>)
 80016b6:	487b      	ldr	r0, [pc, #492]	; (80018a4 <main+0x514>)
 80016b8:	f006 fc7c 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 80016bc:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <main+0x51c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe feb1 	bl	8000428 <__aeabi_f2d>
 80016c6:	4603      	mov	r3, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	461a      	mov	r2, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	4978      	ldr	r1, [pc, #480]	; (80018b0 <main+0x520>)
 80016d0:	4872      	ldr	r0, [pc, #456]	; (800189c <main+0x50c>)
 80016d2:	f007 faaf 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016d6:	4871      	ldr	r0, [pc, #452]	; (800189c <main+0x50c>)
 80016d8:	f7fe fd3a 	bl	8000150 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	496e      	ldr	r1, [pc, #440]	; (800189c <main+0x50c>)
 80016e4:	486f      	ldr	r0, [pc, #444]	; (80018a4 <main+0x514>)
 80016e6:	f006 fc65 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <main+0x524>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe9a 	bl	8000428 <__aeabi_f2d>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	496e      	ldr	r1, [pc, #440]	; (80018b8 <main+0x528>)
 80016fe:	4867      	ldr	r0, [pc, #412]	; (800189c <main+0x50c>)
 8001700:	f007 fa98 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001704:	4865      	ldr	r0, [pc, #404]	; (800189c <main+0x50c>)
 8001706:	f7fe fd23 	bl	8000150 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b29a      	uxth	r2, r3
 800170e:	2301      	movs	r3, #1
 8001710:	4962      	ldr	r1, [pc, #392]	; (800189c <main+0x50c>)
 8001712:	4864      	ldr	r0, [pc, #400]	; (80018a4 <main+0x514>)
 8001714:	f006 fc4e 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <main+0x52c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fe83 	bl	8000428 <__aeabi_f2d>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	461a      	mov	r2, r3
 8001728:	4623      	mov	r3, r4
 800172a:	4965      	ldr	r1, [pc, #404]	; (80018c0 <main+0x530>)
 800172c:	485b      	ldr	r0, [pc, #364]	; (800189c <main+0x50c>)
 800172e:	f007 fa81 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001732:	485a      	ldr	r0, [pc, #360]	; (800189c <main+0x50c>)
 8001734:	f7fe fd0c 	bl	8000150 <strlen>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	2301      	movs	r3, #1
 800173e:	4957      	ldr	r1, [pc, #348]	; (800189c <main+0x50c>)
 8001740:	4858      	ldr	r0, [pc, #352]	; (80018a4 <main+0x514>)
 8001742:	f006 fc37 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <main+0x534>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	495b      	ldr	r1, [pc, #364]	; (80018c8 <main+0x538>)
 800175a:	4850      	ldr	r0, [pc, #320]	; (800189c <main+0x50c>)
 800175c:	f007 fa6a 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001760:	484e      	ldr	r0, [pc, #312]	; (800189c <main+0x50c>)
 8001762:	f7fe fcf5 	bl	8000150 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	2301      	movs	r3, #1
 800176c:	494b      	ldr	r1, [pc, #300]	; (800189c <main+0x50c>)
 800176e:	484d      	ldr	r0, [pc, #308]	; (80018a4 <main+0x514>)
 8001770:	f006 fc20 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <main+0x53c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe55 	bl	8000428 <__aeabi_f2d>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	4952      	ldr	r1, [pc, #328]	; (80018d0 <main+0x540>)
 8001788:	4844      	ldr	r0, [pc, #272]	; (800189c <main+0x50c>)
 800178a:	f007 fa53 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800178e:	4843      	ldr	r0, [pc, #268]	; (800189c <main+0x50c>)
 8001790:	f7fe fcde 	bl	8000150 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	2301      	movs	r3, #1
 800179a:	4940      	ldr	r1, [pc, #256]	; (800189c <main+0x50c>)
 800179c:	4841      	ldr	r0, [pc, #260]	; (80018a4 <main+0x514>)
 800179e:	f006 fc09 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 80017a2:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <main+0x544>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe3e 	bl	8000428 <__aeabi_f2d>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	4948      	ldr	r1, [pc, #288]	; (80018d8 <main+0x548>)
 80017b6:	4839      	ldr	r0, [pc, #228]	; (800189c <main+0x50c>)
 80017b8:	f007 fa3c 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017bc:	4837      	ldr	r0, [pc, #220]	; (800189c <main+0x50c>)
 80017be:	f7fe fcc7 	bl	8000150 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	2301      	movs	r3, #1
 80017c8:	4934      	ldr	r1, [pc, #208]	; (800189c <main+0x50c>)
 80017ca:	4836      	ldr	r0, [pc, #216]	; (80018a4 <main+0x514>)
 80017cc:	f006 fbf2 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "PWM Mot1=%u \n\r",PWM_Mot1);
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <main+0x54c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4942      	ldr	r1, [pc, #264]	; (80018e0 <main+0x550>)
 80017d8:	4830      	ldr	r0, [pc, #192]	; (800189c <main+0x50c>)
 80017da:	f007 fa2b 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017de:	482f      	ldr	r0, [pc, #188]	; (800189c <main+0x50c>)
 80017e0:	f7fe fcb6 	bl	8000150 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	492c      	ldr	r1, [pc, #176]	; (800189c <main+0x50c>)
 80017ec:	482d      	ldr	r0, [pc, #180]	; (80018a4 <main+0x514>)
 80017ee:	f006 fbe1 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "PWM Mot2=%u \n\r",PWM_Mot2);
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <main+0x554>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	493b      	ldr	r1, [pc, #236]	; (80018e8 <main+0x558>)
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <main+0x50c>)
 80017fc:	f007 fa1a 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001800:	4826      	ldr	r0, [pc, #152]	; (800189c <main+0x50c>)
 8001802:	f7fe fca5 	bl	8000150 <strlen>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	2301      	movs	r3, #1
 800180c:	4923      	ldr	r1, [pc, #140]	; (800189c <main+0x50c>)
 800180e:	4825      	ldr	r0, [pc, #148]	; (80018a4 <main+0x514>)
 8001810:	f006 fbd0 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "PWM Mot3=%u \n\r",PWM_Mot3);
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <main+0x55c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4935      	ldr	r1, [pc, #212]	; (80018f0 <main+0x560>)
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <main+0x50c>)
 800181e:	f007 fa09 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001822:	481e      	ldr	r0, [pc, #120]	; (800189c <main+0x50c>)
 8001824:	f7fe fc94 	bl	8000150 <strlen>
 8001828:	4603      	mov	r3, r0
 800182a:	b29a      	uxth	r2, r3
 800182c:	2301      	movs	r3, #1
 800182e:	491b      	ldr	r1, [pc, #108]	; (800189c <main+0x50c>)
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <main+0x514>)
 8001832:	f006 fbbf 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "PWM Mot4=%u \n\r",PWM_Mot4);
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <main+0x564>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	492e      	ldr	r1, [pc, #184]	; (80018f8 <main+0x568>)
 800183e:	4817      	ldr	r0, [pc, #92]	; (800189c <main+0x50c>)
 8001840:	f007 f9f8 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001844:	4815      	ldr	r0, [pc, #84]	; (800189c <main+0x50c>)
 8001846:	f7fe fc83 	bl	8000150 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	e054      	b.n	80018fc <main+0x56c>
 8001852:	bf00      	nop
 8001854:	20000594 	.word	0x20000594
 8001858:	200002e0 	.word	0x200002e0
 800185c:	200005f4 	.word	0x200005f4
 8001860:	200004bc 	.word	0x200004bc
 8001864:	2000041c 	.word	0x2000041c
 8001868:	20000208 	.word	0x20000208
 800186c:	10624dd3 	.word	0x10624dd3
 8001870:	20000354 	.word	0x20000354
 8001874:	20000418 	.word	0x20000418
 8001878:	2000027e 	.word	0x2000027e
 800187c:	20000210 	.word	0x20000210
 8001880:	20000700 	.word	0x20000700
 8001884:	200006fc 	.word	0x200006fc
 8001888:	200006ec 	.word	0x200006ec
 800188c:	20000604 	.word	0x20000604
 8001890:	200004c0 	.word	0x200004c0
 8001894:	2000020c 	.word	0x2000020c
 8001898:	20000554 	.word	0x20000554
 800189c:	200003b0 	.word	0x200003b0
 80018a0:	0800baa8 	.word	0x0800baa8
 80018a4:	20000474 	.word	0x20000474
 80018a8:	0800bab0 	.word	0x0800bab0
 80018ac:	2000022c 	.word	0x2000022c
 80018b0:	0800bac4 	.word	0x0800bac4
 80018b4:	20000230 	.word	0x20000230
 80018b8:	0800bad8 	.word	0x0800bad8
 80018bc:	20000234 	.word	0x20000234
 80018c0:	0800bae8 	.word	0x0800bae8
 80018c4:	20000238 	.word	0x20000238
 80018c8:	0800baf8 	.word	0x0800baf8
 80018cc:	200006f0 	.word	0x200006f0
 80018d0:	0800bb08 	.word	0x0800bb08
 80018d4:	20000728 	.word	0x20000728
 80018d8:	0800bb18 	.word	0x0800bb18
 80018dc:	2000070c 	.word	0x2000070c
 80018e0:	0800bb28 	.word	0x0800bb28
 80018e4:	2000060c 	.word	0x2000060c
 80018e8:	0800bb38 	.word	0x0800bb38
 80018ec:	20000608 	.word	0x20000608
 80018f0:	0800bb48 	.word	0x0800bb48
 80018f4:	200006f4 	.word	0x200006f4
 80018f8:	0800bb58 	.word	0x0800bb58
 80018fc:	49aa      	ldr	r1, [pc, #680]	; (8001ba8 <main+0x818>)
 80018fe:	48ab      	ldr	r0, [pc, #684]	; (8001bac <main+0x81c>)
 8001900:	f006 fb58 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "\n\rINPUTS \n\r" );
 8001904:	4aa8      	ldr	r2, [pc, #672]	; (8001ba8 <main+0x818>)
 8001906:	4baa      	ldr	r3, [pc, #680]	; (8001bb0 <main+0x820>)
 8001908:	4614      	mov	r4, r2
 800190a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800190c:	6020      	str	r0, [r4, #0]
 800190e:	6061      	str	r1, [r4, #4]
 8001910:	60a2      	str	r2, [r4, #8]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001912:	48a5      	ldr	r0, [pc, #660]	; (8001ba8 <main+0x818>)
 8001914:	f7fe fc1c 	bl	8000150 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	2301      	movs	r3, #1
 800191e:	49a2      	ldr	r1, [pc, #648]	; (8001ba8 <main+0x818>)
 8001920:	48a2      	ldr	r0, [pc, #648]	; (8001bac <main+0x81c>)
 8001922:	f006 fb47 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d \n\r",togg1,togg2,togg3,togg4,togg5,togg6);
 8001926:	4ba3      	ldr	r3, [pc, #652]	; (8001bb4 <main+0x824>)
 8001928:	681c      	ldr	r4, [r3, #0]
 800192a:	4ba3      	ldr	r3, [pc, #652]	; (8001bb8 <main+0x828>)
 800192c:	681d      	ldr	r5, [r3, #0]
 800192e:	4ba3      	ldr	r3, [pc, #652]	; (8001bbc <main+0x82c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4aa3      	ldr	r2, [pc, #652]	; (8001bc0 <main+0x830>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	49a3      	ldr	r1, [pc, #652]	; (8001bc4 <main+0x834>)
 8001938:	6809      	ldr	r1, [r1, #0]
 800193a:	48a3      	ldr	r0, [pc, #652]	; (8001bc8 <main+0x838>)
 800193c:	6800      	ldr	r0, [r0, #0]
 800193e:	9003      	str	r0, [sp, #12]
 8001940:	9102      	str	r1, [sp, #8]
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	462b      	mov	r3, r5
 8001948:	4622      	mov	r2, r4
 800194a:	49a0      	ldr	r1, [pc, #640]	; (8001bcc <main+0x83c>)
 800194c:	4896      	ldr	r0, [pc, #600]	; (8001ba8 <main+0x818>)
 800194e:	f007 f971 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001952:	4895      	ldr	r0, [pc, #596]	; (8001ba8 <main+0x818>)
 8001954:	f7fe fbfc 	bl	8000150 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	b29a      	uxth	r2, r3
 800195c:	2301      	movs	r3, #1
 800195e:	4992      	ldr	r1, [pc, #584]	; (8001ba8 <main+0x818>)
 8001960:	4892      	ldr	r0, [pc, #584]	; (8001bac <main+0x81c>)
 8001962:	f006 fb27 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Potenc %d %d \n\r",potenc1,potenc2);
 8001966:	4b9a      	ldr	r3, [pc, #616]	; (8001bd0 <main+0x840>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b9a      	ldr	r3, [pc, #616]	; (8001bd4 <main+0x844>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	499a      	ldr	r1, [pc, #616]	; (8001bd8 <main+0x848>)
 8001970:	488d      	ldr	r0, [pc, #564]	; (8001ba8 <main+0x818>)
 8001972:	f007 f95f 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001976:	488c      	ldr	r0, [pc, #560]	; (8001ba8 <main+0x818>)
 8001978:	f7fe fbea 	bl	8000150 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	2301      	movs	r3, #1
 8001982:	4989      	ldr	r1, [pc, #548]	; (8001ba8 <main+0x818>)
 8001984:	4889      	ldr	r0, [pc, #548]	; (8001bac <main+0x81c>)
 8001986:	f006 fb15 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 800198a:	4b94      	ldr	r3, [pc, #592]	; (8001bdc <main+0x84c>)
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <main+0x850>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	4b94      	ldr	r3, [pc, #592]	; (8001be4 <main+0x854>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a94      	ldr	r2, [pc, #592]	; (8001be8 <main+0x858>)
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	4992      	ldr	r1, [pc, #584]	; (8001bec <main+0x85c>)
 80019a4:	4880      	ldr	r0, [pc, #512]	; (8001ba8 <main+0x818>)
 80019a6:	f007 f945 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80019aa:	487f      	ldr	r0, [pc, #508]	; (8001ba8 <main+0x818>)
 80019ac:	f7fe fbd0 	bl	8000150 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	2301      	movs	r3, #1
 80019b6:	497c      	ldr	r1, [pc, #496]	; (8001ba8 <main+0x818>)
 80019b8:	487c      	ldr	r0, [pc, #496]	; (8001bac <main+0x81c>)
 80019ba:	f006 fafb 	bl	8007fb4 <HAL_UART_Transmit>



	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 80019be:	4a7a      	ldr	r2, [pc, #488]	; (8001ba8 <main+0x818>)
 80019c0:	4b8b      	ldr	r3, [pc, #556]	; (8001bf0 <main+0x860>)
 80019c2:	4615      	mov	r5, r2
 80019c4:	461c      	mov	r4, r3
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	6028      	str	r0, [r5, #0]
 80019ca:	6069      	str	r1, [r5, #4]
 80019cc:	60aa      	str	r2, [r5, #8]
 80019ce:	60eb      	str	r3, [r5, #12]
 80019d0:	cc03      	ldmia	r4!, {r0, r1}
 80019d2:	6128      	str	r0, [r5, #16]
 80019d4:	6169      	str	r1, [r5, #20]
 80019d6:	8823      	ldrh	r3, [r4, #0]
 80019d8:	78a2      	ldrb	r2, [r4, #2]
 80019da:	832b      	strh	r3, [r5, #24]
 80019dc:	4613      	mov	r3, r2
 80019de:	76ab      	strb	r3, [r5, #26]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80019e0:	4871      	ldr	r0, [pc, #452]	; (8001ba8 <main+0x818>)
 80019e2:	f7fe fbb5 	bl	8000150 <strlen>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	2301      	movs	r3, #1
 80019ec:	496e      	ldr	r1, [pc, #440]	; (8001ba8 <main+0x818>)
 80019ee:	486f      	ldr	r0, [pc, #444]	; (8001bac <main+0x81c>)
 80019f0:	f006 fae0 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 80019f4:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <main+0x864>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd15 	bl	8000428 <__aeabi_f2d>
 80019fe:	4680      	mov	r8, r0
 8001a00:	4689      	mov	r9, r1
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <main+0x864>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd0e 	bl	8000428 <__aeabi_f2d>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <main+0x864>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd07 	bl	8000428 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a22:	e9cd 4500 	strd	r4, r5, [sp]
 8001a26:	4642      	mov	r2, r8
 8001a28:	464b      	mov	r3, r9
 8001a2a:	4973      	ldr	r1, [pc, #460]	; (8001bf8 <main+0x868>)
 8001a2c:	485e      	ldr	r0, [pc, #376]	; (8001ba8 <main+0x818>)
 8001a2e:	f007 f901 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001a32:	485d      	ldr	r0, [pc, #372]	; (8001ba8 <main+0x818>)
 8001a34:	f7fe fb8c 	bl	8000150 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	495a      	ldr	r1, [pc, #360]	; (8001ba8 <main+0x818>)
 8001a40:	485a      	ldr	r0, [pc, #360]	; (8001bac <main+0x81c>)
 8001a42:	f006 fab7 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <main+0x864>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fcec 	bl	8000428 <__aeabi_f2d>
 8001a50:	4680      	mov	r8, r0
 8001a52:	4689      	mov	r9, r1
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <main+0x864>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fce5 	bl	8000428 <__aeabi_f2d>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <main+0x864>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcde 	bl	8000428 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a74:	e9cd 4500 	strd	r4, r5, [sp]
 8001a78:	4642      	mov	r2, r8
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	495f      	ldr	r1, [pc, #380]	; (8001bfc <main+0x86c>)
 8001a7e:	484a      	ldr	r0, [pc, #296]	; (8001ba8 <main+0x818>)
 8001a80:	f007 f8d8 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001a84:	4848      	ldr	r0, [pc, #288]	; (8001ba8 <main+0x818>)
 8001a86:	f7fe fb63 	bl	8000150 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4945      	ldr	r1, [pc, #276]	; (8001ba8 <main+0x818>)
 8001a92:	4846      	ldr	r0, [pc, #280]	; (8001bac <main+0x81c>)
 8001a94:	f006 fa8e 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 8001a98:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <main+0x864>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcc3 	bl	8000428 <__aeabi_f2d>
 8001aa2:	4680      	mov	r8, r0
 8001aa4:	4689      	mov	r9, r1
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <main+0x864>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcbc 	bl	8000428 <__aeabi_f2d>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <main+0x864>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fcb5 	bl	8000428 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ac6:	e9cd 4500 	strd	r4, r5, [sp]
 8001aca:	4642      	mov	r2, r8
 8001acc:	464b      	mov	r3, r9
 8001ace:	494c      	ldr	r1, [pc, #304]	; (8001c00 <main+0x870>)
 8001ad0:	4835      	ldr	r0, [pc, #212]	; (8001ba8 <main+0x818>)
 8001ad2:	f007 f8af 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001ad6:	4834      	ldr	r0, [pc, #208]	; (8001ba8 <main+0x818>)
 8001ad8:	f7fe fb3a 	bl	8000150 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4931      	ldr	r1, [pc, #196]	; (8001ba8 <main+0x818>)
 8001ae4:	4831      	ldr	r0, [pc, #196]	; (8001bac <main+0x81c>)
 8001ae6:	f006 fa65 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <main+0x864>)
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <main+0x864>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4944      	ldr	r1, [pc, #272]	; (8001c04 <main+0x874>)
 8001af4:	482c      	ldr	r0, [pc, #176]	; (8001ba8 <main+0x818>)
 8001af6:	f007 f89d 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001afa:	482b      	ldr	r0, [pc, #172]	; (8001ba8 <main+0x818>)
 8001afc:	f7fe fb28 	bl	8000150 <strlen>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2301      	movs	r3, #1
 8001b06:	4928      	ldr	r1, [pc, #160]	; (8001ba8 <main+0x818>)
 8001b08:	4828      	ldr	r0, [pc, #160]	; (8001bac <main+0x81c>)
 8001b0a:	f006 fa53 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <main+0x864>)
 8001b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <main+0x864>)
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	493c      	ldr	r1, [pc, #240]	; (8001c08 <main+0x878>)
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <main+0x818>)
 8001b1a:	f007 f88b 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <main+0x818>)
 8001b20:	f7fe fb16 	bl	8000150 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	491f      	ldr	r1, [pc, #124]	; (8001ba8 <main+0x818>)
 8001b2c:	481f      	ldr	r0, [pc, #124]	; (8001bac <main+0x81c>)
 8001b2e:	f006 fa41 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <main+0x864>)
 8001b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <main+0x864>)
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	4934      	ldr	r1, [pc, #208]	; (8001c0c <main+0x87c>)
 8001b3c:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <main+0x818>)
 8001b3e:	f007 f879 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001b42:	4819      	ldr	r0, [pc, #100]	; (8001ba8 <main+0x818>)
 8001b44:	f7fe fb04 	bl	8000150 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <main+0x818>)
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <main+0x81c>)
 8001b52:	f006 fa2f 	bl	8007fb4 <HAL_UART_Transmit>



	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r\n\r" );
 8001b56:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <main+0x818>)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <main+0x880>)
 8001b5a:	4615      	mov	r5, r2
 8001b5c:	461c      	mov	r4, r3
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	6028      	str	r0, [r5, #0]
 8001b62:	6069      	str	r1, [r5, #4]
 8001b64:	60aa      	str	r2, [r5, #8]
 8001b66:	60eb      	str	r3, [r5, #12]
 8001b68:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b6a:	6128      	str	r0, [r5, #16]
 8001b6c:	6169      	str	r1, [r5, #20]
 8001b6e:	61aa      	str	r2, [r5, #24]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <main+0x818>)
 8001b72:	f7fe faed 	bl	8000150 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <main+0x818>)
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <main+0x81c>)
 8001b80:	f006 fa18 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <main+0x884>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fc4d 	bl	8000428 <__aeabi_f2d>
 8001b8e:	4680      	mov	r8, r0
 8001b90:	4689      	mov	r9, r1
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <main+0x884>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc46 	bl	8000428 <__aeabi_f2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <main+0x884>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	e038      	b.n	8001c18 <main+0x888>
 8001ba6:	bf00      	nop
 8001ba8:	200003b0 	.word	0x200003b0
 8001bac:	20000474 	.word	0x20000474
 8001bb0:	0800bb68 	.word	0x0800bb68
 8001bb4:	200004b8 	.word	0x200004b8
 8001bb8:	200005f0 	.word	0x200005f0
 8001bbc:	200002d8 	.word	0x200002d8
 8001bc0:	20000508 	.word	0x20000508
 8001bc4:	20000414 	.word	0x20000414
 8001bc8:	200002dc 	.word	0x200002dc
 8001bcc:	0800bb74 	.word	0x0800bb74
 8001bd0:	20000550 	.word	0x20000550
 8001bd4:	200005ec 	.word	0x200005ec
 8001bd8:	0800bb90 	.word	0x0800bb90
 8001bdc:	20000500 	.word	0x20000500
 8001be0:	20000470 	.word	0x20000470
 8001be4:	200005e8 	.word	0x200005e8
 8001be8:	20000278 	.word	0x20000278
 8001bec:	0800bba0 	.word	0x0800bba0
 8001bf0:	0800bbb8 	.word	0x0800bbb8
 8001bf4:	20000510 	.word	0x20000510
 8001bf8:	0800bbd4 	.word	0x0800bbd4
 8001bfc:	0800bbf4 	.word	0x0800bbf4
 8001c00:	0800bc14 	.word	0x0800bc14
 8001c04:	0800bc30 	.word	0x0800bc30
 8001c08:	0800bc4c 	.word	0x0800bc4c
 8001c0c:	0800bc64 	.word	0x0800bc64
 8001c10:	0800bc7c 	.word	0x0800bc7c
 8001c14:	200005a4 	.word	0x200005a4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc05 	bl	8000428 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c26:	e9cd 4500 	strd	r4, r5, [sp]
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	494b      	ldr	r1, [pc, #300]	; (8001d5c <main+0x9cc>)
 8001c30:	484b      	ldr	r0, [pc, #300]	; (8001d60 <main+0x9d0>)
 8001c32:	f006 ffff 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001c36:	484a      	ldr	r0, [pc, #296]	; (8001d60 <main+0x9d0>)
 8001c38:	f7fe fa8a 	bl	8000150 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2301      	movs	r3, #1
 8001c42:	4947      	ldr	r1, [pc, #284]	; (8001d60 <main+0x9d0>)
 8001c44:	4847      	ldr	r0, [pc, #284]	; (8001d64 <main+0x9d4>)
 8001c46:	f006 f9b5 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <main+0x9d8>)
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fbea 	bl	8000428 <__aeabi_f2d>
 8001c54:	4680      	mov	r8, r0
 8001c56:	4689      	mov	r9, r1
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <main+0x9d8>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fbe3 	bl	8000428 <__aeabi_f2d>
 8001c62:	4604      	mov	r4, r0
 8001c64:	460d      	mov	r5, r1
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <main+0x9d8>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fbdc 	bl	8000428 <__aeabi_f2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c78:	e9cd 4500 	strd	r4, r5, [sp]
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	464b      	mov	r3, r9
 8001c80:	493a      	ldr	r1, [pc, #232]	; (8001d6c <main+0x9dc>)
 8001c82:	4837      	ldr	r0, [pc, #220]	; (8001d60 <main+0x9d0>)
 8001c84:	f006 ffd6 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001c88:	4835      	ldr	r0, [pc, #212]	; (8001d60 <main+0x9d0>)
 8001c8a:	f7fe fa61 	bl	8000150 <strlen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	2301      	movs	r3, #1
 8001c94:	4932      	ldr	r1, [pc, #200]	; (8001d60 <main+0x9d0>)
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <main+0x9d4>)
 8001c98:	f006 f98c 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <main+0x9d8>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fbc1 	bl	8000428 <__aeabi_f2d>
 8001ca6:	4680      	mov	r8, r0
 8001ca8:	4689      	mov	r9, r1
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <main+0x9d8>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbba 	bl	8000428 <__aeabi_f2d>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <main+0x9d8>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fbb3 	bl	8000428 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cca:	e9cd 4500 	strd	r4, r5, [sp]
 8001cce:	4642      	mov	r2, r8
 8001cd0:	464b      	mov	r3, r9
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <main+0x9e0>)
 8001cd4:	4822      	ldr	r0, [pc, #136]	; (8001d60 <main+0x9d0>)
 8001cd6:	f006 ffad 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001cda:	4821      	ldr	r0, [pc, #132]	; (8001d60 <main+0x9d0>)
 8001cdc:	f7fe fa38 	bl	8000150 <strlen>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	491e      	ldr	r1, [pc, #120]	; (8001d60 <main+0x9d0>)
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <main+0x9d4>)
 8001cea:	f006 f963 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <main+0x9d8>)
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <main+0x9d8>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	491f      	ldr	r1, [pc, #124]	; (8001d74 <main+0x9e4>)
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <main+0x9d0>)
 8001cfa:	f006 ff9b 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001cfe:	4818      	ldr	r0, [pc, #96]	; (8001d60 <main+0x9d0>)
 8001d00:	f7fe fa26 	bl	8000150 <strlen>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4915      	ldr	r1, [pc, #84]	; (8001d60 <main+0x9d0>)
 8001d0c:	4815      	ldr	r0, [pc, #84]	; (8001d64 <main+0x9d4>)
 8001d0e:	f006 f951 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <main+0x9d8>)
 8001d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <main+0x9d8>)
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	4917      	ldr	r1, [pc, #92]	; (8001d78 <main+0x9e8>)
 8001d1c:	4810      	ldr	r0, [pc, #64]	; (8001d60 <main+0x9d0>)
 8001d1e:	f006 ff89 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001d22:	480f      	ldr	r0, [pc, #60]	; (8001d60 <main+0x9d0>)
 8001d24:	f7fe fa14 	bl	8000150 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	490c      	ldr	r1, [pc, #48]	; (8001d60 <main+0x9d0>)
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <main+0x9d4>)
 8001d32:	f006 f93f 	bl	8007fb4 <HAL_UART_Transmit>



	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <main+0x9d8>)
 8001d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <main+0x9d8>)
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	490f      	ldr	r1, [pc, #60]	; (8001d7c <main+0x9ec>)
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <main+0x9d0>)
 8001d42:	f006 ff77 	bl	8008c34 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <main+0x9d0>)
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2301      	movs	r3, #1
 8001d52:	4903      	ldr	r1, [pc, #12]	; (8001d60 <main+0x9d0>)
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <main+0x9d4>)
 8001d56:	f006 f92d 	bl	8007fb4 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8001d5a:	e48b      	b.n	8001674 <main+0x2e4>
 8001d5c:	0800bbd4 	.word	0x0800bbd4
 8001d60:	200003b0 	.word	0x200003b0
 8001d64:	20000474 	.word	0x20000474
 8001d68:	200005a4 	.word	0x200005a4
 8001d6c:	0800bbf4 	.word	0x0800bbf4
 8001d70:	0800bc14 	.word	0x0800bc14
 8001d74:	0800bc30 	.word	0x0800bc30
 8001d78:	0800bc4c 	.word	0x0800bc4c
 8001d7c:	0800bc64 	.word	0x0800bc64

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b094      	sub	sp, #80	; 0x50
 8001d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2228      	movs	r2, #40	; 0x28
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f006 faf8 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001dcc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fbfe 	bl	80065d8 <HAL_RCC_OscConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001de2:	f000 fc20 	bl	8002626 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de6:	230f      	movs	r3, #15
 8001de8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fe68 	bl	8006ad8 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e0e:	f000 fc0a 	bl	8002626 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e12:	2302      	movs	r3, #2
 8001e14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fff6 	bl	8006e10 <HAL_RCCEx_PeriphCLKConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001e2a:	f000 fbfc 	bl	8002626 <Error_Handler>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3750      	adds	r7, #80	; 0x50
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <MX_ADC1_Init+0x78>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e76:	f002 fadd 	bl	8004434 <HAL_ADC_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e80:	f000 fbd1 	bl	8002626 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_ADC1_Init+0x74>)
 8001e96:	f002 fd59 	bl	800494c <HAL_ADC_ConfigChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ea0:	f000 fbc1 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000440 	.word	0x20000440
 8001eb0:	40012400 	.word	0x40012400

08001eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <MX_I2C2_Init+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ec0:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_I2C2_Init+0x58>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_I2C2_Init+0x50>)
 8001ef2:	f003 fbe3 	bl	80056bc <HAL_I2C_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001efc:	f000 fb93 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200002e0 	.word	0x200002e0
 8001f08:	40005800 	.word	0x40005800
 8001f0c:	00061a80 	.word	0x00061a80

08001f10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <MX_SPI2_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f44:	2208      	movs	r2, #8
 8001f46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_SPI2_Init+0x64>)
 8001f62:	f005 f8c7 	bl	80070f4 <HAL_SPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f6c:	f000 fb5b 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000280 	.word	0x20000280
 8001f78:	40003800 	.word	0x40003800

08001f7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b096      	sub	sp, #88	; 0x58
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f006 f9e5 	bl	8008384 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fbc:	4a51      	ldr	r2, [pc, #324]	; (8002104 <MX_TIM1_Init+0x188>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fc2:	2247      	movs	r2, #71	; 0x47
 8001fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fce:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe6:	4846      	ldr	r0, [pc, #280]	; (8002100 <MX_TIM1_Init+0x184>)
 8001fe8:	f005 f8e5 	bl	80071b6 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ff2:	f000 fb18 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002000:	4619      	mov	r1, r3
 8002002:	483f      	ldr	r0, [pc, #252]	; (8002100 <MX_TIM1_Init+0x184>)
 8002004:	f005 fb5a 	bl	80076bc <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800200e:	f000 fb0a 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002012:	483b      	ldr	r0, [pc, #236]	; (8002100 <MX_TIM1_Init+0x184>)
 8002014:	f005 f91d 	bl	8007252 <HAL_TIM_PWM_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800201e:	f000 fb02 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800202e:	4619      	mov	r1, r3
 8002030:	4833      	ldr	r0, [pc, #204]	; (8002100 <MX_TIM1_Init+0x184>)
 8002032:	f005 fecb 	bl	8007dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800203c:	f000 faf3 	bl	8002626 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002040:	2360      	movs	r3, #96	; 0x60
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8002044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002052:	2304      	movs	r3, #4
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	2200      	movs	r2, #0
 8002064:	4619      	mov	r1, r3
 8002066:	4826      	ldr	r0, [pc, #152]	; (8002100 <MX_TIM1_Init+0x184>)
 8002068:	f005 fa62 	bl	8007530 <HAL_TIM_PWM_ConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002072:	f000 fad8 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	2204      	movs	r2, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4820      	ldr	r0, [pc, #128]	; (8002100 <MX_TIM1_Init+0x184>)
 8002080:	f005 fa56 	bl	8007530 <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800208a:	f000 facc 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002092:	2208      	movs	r2, #8
 8002094:	4619      	mov	r1, r3
 8002096:	481a      	ldr	r0, [pc, #104]	; (8002100 <MX_TIM1_Init+0x184>)
 8002098:	f005 fa4a 	bl	8007530 <HAL_TIM_PWM_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020a2:	f000 fac0 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	220c      	movs	r2, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	4814      	ldr	r0, [pc, #80]	; (8002100 <MX_TIM1_Init+0x184>)
 80020b0:	f005 fa3e 	bl	8007530 <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80020ba:	f000 fab4 	bl	8002626 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM1_Init+0x184>)
 80020e2:	f005 feb7 	bl	8007e54 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80020ec:	f000 fa9b 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM1_Init+0x184>)
 80020f2:	f000 ff8b 	bl	800300c <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3758      	adds	r7, #88	; 0x58
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200004c0 	.word	0x200004c0
 8002104:	40012c00 	.word	0x40012c00

08002108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <MX_TIM2_Init+0x94>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <MX_TIM2_Init+0x94>)
 800212e:	2247      	movs	r2, #71	; 0x47
 8002130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_TIM2_Init+0x94>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <MX_TIM2_Init+0x94>)
 800213a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800213e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <MX_TIM2_Init+0x94>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_TIM2_Init+0x94>)
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <MX_TIM2_Init+0x94>)
 800214e:	f005 f832 	bl	80071b6 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002158:	f000 fa65 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4619      	mov	r1, r3
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <MX_TIM2_Init+0x94>)
 800216a:	f005 faa7 	bl	80076bc <HAL_TIM_ConfigClockSource>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002174:	f000 fa57 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_TIM2_Init+0x94>)
 8002186:	f005 fe21 	bl	8007dcc <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002190:	f000 fa49 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000554 	.word	0x20000554

080021a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_USART1_UART_Init+0x50>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ac:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80021b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d8:	f005 fe9f 	bl	8007f1a <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021e2:	f000 fa20 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000474 	.word	0x20000474
 80021f0:	40013800 	.word	0x40013800

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002208:	4b47      	ldr	r3, [pc, #284]	; (8002328 <MX_GPIO_Init+0x134>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a46      	ldr	r2, [pc, #280]	; (8002328 <MX_GPIO_Init+0x134>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b44      	ldr	r3, [pc, #272]	; (8002328 <MX_GPIO_Init+0x134>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002220:	4b41      	ldr	r3, [pc, #260]	; (8002328 <MX_GPIO_Init+0x134>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a40      	ldr	r2, [pc, #256]	; (8002328 <MX_GPIO_Init+0x134>)
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <MX_GPIO_Init+0x134>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <MX_GPIO_Init+0x134>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <MX_GPIO_Init+0x134>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <MX_GPIO_Init+0x134>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <MX_GPIO_Init+0x134>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a34      	ldr	r2, [pc, #208]	; (8002328 <MX_GPIO_Init+0x134>)
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <MX_GPIO_Init+0x134>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226e:	482f      	ldr	r0, [pc, #188]	; (800232c <MX_GPIO_Init+0x138>)
 8002270:	f003 f9f4 	bl	800565c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800227a:	482d      	ldr	r0, [pc, #180]	; (8002330 <MX_GPIO_Init+0x13c>)
 800227c:	f003 f9ee 	bl	800565c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002286:	482b      	ldr	r0, [pc, #172]	; (8002334 <MX_GPIO_Init+0x140>)
 8002288:	f003 f9e8 	bl	800565c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2302      	movs	r3, #2
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	4821      	ldr	r0, [pc, #132]	; (800232c <MX_GPIO_Init+0x138>)
 80022a6:	f003 f87f 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	481b      	ldr	r0, [pc, #108]	; (8002330 <MX_GPIO_Init+0x13c>)
 80022c4:	f003 f870 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	4815      	ldr	r0, [pc, #84]	; (8002334 <MX_GPIO_Init+0x140>)
 80022de:	f003 f863 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4619      	mov	r1, r3
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <MX_GPIO_Init+0x140>)
 80022fc:	f003 f854 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_GPIO_Init+0x13c>)
 800231a:	f003 f845 	bl	80053a8 <HAL_GPIO_Init>

}
 800231e:	bf00      	nop
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40011000 	.word	0x40011000
 8002330:	40010c00 	.word	0x40010c00
 8002334:	40010800 	.word	0x40010800

08002338 <WriteFlashData>:

/* USER CODE BEGIN 4 */
//Write Data into Flash starting from given address
void WriteFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 800234e:	f002 fe9b 	bl	8005088 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8002352:	f107 020c 	add.w	r2, r7, #12
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f002 ff7b 	bl	8005258 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	461a      	mov	r2, r3
 800236c:	4623      	mov	r3, r4
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	2002      	movs	r0, #2
 8002372:	f002 fe19 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, p->pid_p_gain_pitch);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1d1c      	adds	r4, r3, #4
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fec6 	bl	8001110 <__aeabi_f2ulz>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4621      	mov	r1, r4
 800238a:	2002      	movs	r0, #2
 800238c:	f002 fe0c 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, p->pid_i_gain_pitch);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0408 	add.w	r4, r3, #8
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe feb8 	bl	8001110 <__aeabi_f2ulz>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4621      	mov	r1, r4
 80023a6:	2002      	movs	r0, #2
 80023a8:	f002 fdfe 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12, p->pid_d_gain_pitch);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 040c 	add.w	r4, r3, #12
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe feaa 	bl	8001110 <__aeabi_f2ulz>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4621      	mov	r1, r4
 80023c2:	2002      	movs	r0, #2
 80023c4:	f002 fdf0 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16, p->pid_p_gain_roll);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0410 	add.w	r4, r3, #16
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fe9c 	bl	8001110 <__aeabi_f2ulz>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4621      	mov	r1, r4
 80023de:	2002      	movs	r0, #2
 80023e0:	f002 fde2 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20, p->pid_i_gain_roll);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0414 	add.w	r4, r3, #20
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe8e 	bl	8001110 <__aeabi_f2ulz>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4621      	mov	r1, r4
 80023fa:	2002      	movs	r0, #2
 80023fc:	f002 fdd4 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24, p->pid_d_gain_roll);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0418 	add.w	r4, r3, #24
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe80 	bl	8001110 <__aeabi_f2ulz>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4621      	mov	r1, r4
 8002416:	2002      	movs	r0, #2
 8002418:	f002 fdc6 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28, p->pid_p_gain_yaw);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 041c 	add.w	r4, r3, #28
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fe72 	bl	8001110 <__aeabi_f2ulz>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4621      	mov	r1, r4
 8002432:	2002      	movs	r0, #2
 8002434:	f002 fdb8 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32, p->pid_i_gain_yaw);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f103 0420 	add.w	r4, r3, #32
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fe64 	bl	8001110 <__aeabi_f2ulz>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4621      	mov	r1, r4
 800244e:	2002      	movs	r0, #2
 8002450:	f002 fdaa 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36, p->pid_d_gain_yaw);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fe56 	bl	8001110 <__aeabi_f2ulz>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4621      	mov	r1, r4
 800246a:	2002      	movs	r0, #2
 800246c:	f002 fd9c 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800247e:	461a      	mov	r2, r3
 8002480:	4623      	mov	r3, r4
 8002482:	2002      	movs	r0, #2
 8002484:	f002 fd90 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002496:	461a      	mov	r2, r3
 8002498:	4623      	mov	r3, r4
 800249a:	2002      	movs	r0, #2
 800249c:	f002 fd84 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80024ae:	461a      	mov	r2, r3
 80024b0:	4623      	mov	r3, r4
 80024b2:	2002      	movs	r0, #2
 80024b4:	f002 fd78 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80024c6:	461a      	mov	r2, r3
 80024c8:	4623      	mov	r3, r4
 80024ca:	2002      	movs	r0, #2
 80024cc:	f002 fd6c 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	2002      	movs	r0, #2
 80024e4:	f002 fd60 	bl	8004fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	2002      	movs	r0, #2
 80024fc:	f002 fd54 	bl	8004fa8 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8002500:	f002 fde8 	bl	80050d4 <HAL_FLASH_Lock>
}
 8002504:	bf00      	nop
 8002506:	3724      	adds	r7, #36	; 0x24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <CheckFlashData>:
}


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=*(( uint32_t *) (StartAddr+4) );
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fbaa 	bl	8000c94 <__aeabi_ui2f>
 8002540:	4602      	mov	r2, r0
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	605a      	str	r2, [r3, #4]
	p->pid_i_gain_pitch=*(( uint32_t *) (StartAddr+8) );
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3308      	adds	r3, #8
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fba1 	bl	8000c94 <__aeabi_ui2f>
 8002552:	4602      	mov	r2, r0
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	609a      	str	r2, [r3, #8]
	p->pid_d_gain_pitch=*(( uint32_t *) (StartAddr+12) );
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	330c      	adds	r3, #12
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb98 	bl	8000c94 <__aeabi_ui2f>
 8002564:	4602      	mov	r2, r0
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	60da      	str	r2, [r3, #12]
	p->pid_p_gain_roll=*(( uint32_t *) (StartAddr+16) );
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3310      	adds	r3, #16
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fb8f 	bl	8000c94 <__aeabi_ui2f>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	611a      	str	r2, [r3, #16]
	p->pid_i_gain_roll=*(( uint32_t *) (StartAddr+20) );
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3314      	adds	r3, #20
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fb86 	bl	8000c94 <__aeabi_ui2f>
 8002588:	4602      	mov	r2, r0
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	615a      	str	r2, [r3, #20]
	p->pid_d_gain_roll=*(( uint32_t *) (StartAddr+24) );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3318      	adds	r3, #24
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fb7d 	bl	8000c94 <__aeabi_ui2f>
 800259a:	4602      	mov	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	619a      	str	r2, [r3, #24]
	p->pid_p_gain_yaw=*(( uint32_t *) (StartAddr+28) );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	331c      	adds	r3, #28
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fb74 	bl	8000c94 <__aeabi_ui2f>
 80025ac:	4602      	mov	r2, r0
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	61da      	str	r2, [r3, #28]
	p->pid_i_gain_yaw=*(( uint32_t *) (StartAddr+32) );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3320      	adds	r3, #32
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb6b 	bl	8000c94 <__aeabi_ui2f>
 80025be:	4602      	mov	r2, r0
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	621a      	str	r2, [r3, #32]
	p->pid_d_gain_yaw=*(( uint32_t *) (StartAddr+36) );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fb62 	bl	8000c94 <__aeabi_ui2f>
 80025d0:	4602      	mov	r2, r0
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3328      	adds	r3, #40	; 0x28
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	332c      	adds	r3, #44	; 0x2c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3330      	adds	r3, #48	; 0x30
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3334      	adds	r3, #52	; 0x34
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3338      	adds	r3, #56	; 0x38
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	333c      	adds	r3, #60	; 0x3c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <nRF24_TransmitPacket+0x98>)
 8002642:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264a:	4821      	ldr	r0, [pc, #132]	; (80026d0 <nRF24_TransmitPacket+0x9c>)
 800264c:	f003 f806 	bl	800565c <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	4619      	mov	r1, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fb64 	bl	8002d22 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800265a:	2201      	movs	r2, #1
 800265c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002660:	481b      	ldr	r0, [pc, #108]	; (80026d0 <nRF24_TransmitPacket+0x9c>)
 8002662:	f002 fffb 	bl	800565c <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8002666:	f000 fb24 	bl	8002cb2 <nRF24_GetStatus>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f1      	bne.n	8002666 <nRF24_TransmitPacket+0x32>
 8002682:	e000      	b.n	8002686 <nRF24_TransmitPacket+0x52>
			break;
 8002684:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800268c:	4810      	ldr	r0, [pc, #64]	; (80026d0 <nRF24_TransmitPacket+0x9c>)
 800268e:	f002 ffe5 	bl	800565c <HAL_GPIO_WritePin>

	if (!wait) {
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8002698:	2302      	movs	r3, #2
 800269a:	e012      	b.n	80026c2 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800269c:	f000 fb2c 	bl	8002cf8 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e009      	b.n	80026c2 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e002      	b.n	80026c2 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80026bc:	f000 fb0c 	bl	8002cd8 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	000fffff 	.word	0x000fffff
 80026d0:	40010c00 	.word	0x40010c00

080026d4 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 80026de:	bf00      	nop
 80026e0:	2102      	movs	r1, #2
 80026e2:	480e      	ldr	r0, [pc, #56]	; (800271c <nRF24_LL_RW+0x48>)
 80026e4:	f7fe fe3a 	bl	800135c <SPI_I2S_GetFlagStatus>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f8      	beq.n	80026e0 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <nRF24_LL_RW+0x48>)
 80026f6:	f7fe fe17 	bl	8001328 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 80026fa:	bf00      	nop
 80026fc:	2101      	movs	r1, #1
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <nRF24_LL_RW+0x48>)
 8002700:	f7fe fe2c 	bl	800135c <SPI_I2S_GetFlagStatus>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f8      	beq.n	80026fc <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800270a:	4804      	ldr	r0, [pc, #16]	; (800271c <nRF24_LL_RW+0x48>)
 800270c:	f7fe fe1a 	bl	8001344 <SPI_I2S_ReceiveData>
 8002710:	4603      	mov	r3, r0
 8002712:	b2db      	uxtb	r3, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40003800 	.word	0x40003800

08002720 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <nRF24_ReadReg+0x44>)
 8002732:	f002 ff93 	bl	800565c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffc8 	bl	80026d4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002744:	20ff      	movs	r0, #255	; 0xff
 8002746:	f7ff ffc5 	bl	80026d4 <nRF24_LL_RW>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800274e:	2201      	movs	r2, #1
 8002750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <nRF24_ReadReg+0x44>)
 8002756:	f002 ff81 	bl	800565c <HAL_GPIO_WritePin>

	return value;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40010800 	.word	0x40010800

08002768 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	460a      	mov	r2, r1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	4613      	mov	r3, r2
 8002776:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277e:	481a      	ldr	r0, [pc, #104]	; (80027e8 <nRF24_WriteReg+0x80>)
 8002780:	f002 ff6c 	bl	800565c <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b1f      	cmp	r3, #31
 8002788:	d810      	bhi.n	80027ac <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	b25b      	sxtb	r3, r3
 8002794:	f043 0320 	orr.w	r3, r3, #32
 8002798:	b25b      	sxtb	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff99 	bl	80026d4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff95 	bl	80026d4 <nRF24_LL_RW>
 80027aa:	e013      	b.n	80027d4 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff90 	bl	80026d4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2be1      	cmp	r3, #225	; 0xe1
 80027b8:	d00c      	beq.n	80027d4 <nRF24_WriteReg+0x6c>
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2be2      	cmp	r3, #226	; 0xe2
 80027be:	d009      	beq.n	80027d4 <nRF24_WriteReg+0x6c>
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2be3      	cmp	r3, #227	; 0xe3
 80027c4:	d006      	beq.n	80027d4 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2bff      	cmp	r3, #255	; 0xff
 80027ca:	d003      	beq.n	80027d4 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff80 	bl	80026d4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027da:	4803      	ldr	r0, [pc, #12]	; (80027e8 <nRF24_WriteReg+0x80>)
 80027dc:	f002 ff3e 	bl	800565c <HAL_GPIO_WritePin>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40010800 	.word	0x40010800

080027ec <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80027fc:	2200      	movs	r2, #0
 80027fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002802:	480f      	ldr	r0, [pc, #60]	; (8002840 <nRF24_ReadMBReg+0x54>)
 8002804:	f002 ff2a 	bl	800565c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff62 	bl	80026d4 <nRF24_LL_RW>
	while (count--) {
 8002810:	e007      	b.n	8002822 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002812:	683c      	ldr	r4, [r7, #0]
 8002814:	1c63      	adds	r3, r4, #1
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	20ff      	movs	r0, #255	; 0xff
 800281a:	f7ff ff5b 	bl	80026d4 <nRF24_LL_RW>
 800281e:	4603      	mov	r3, r0
 8002820:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	71ba      	strb	r2, [r7, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f2      	bne.n	8002812 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002832:	4803      	ldr	r0, [pc, #12]	; (8002840 <nRF24_ReadMBReg+0x54>)
 8002834:	f002 ff12 	bl	800565c <HAL_GPIO_WritePin>
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	40010800 	.word	0x40010800

08002844 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	4613      	mov	r3, r2
 8002852:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285a:	480f      	ldr	r0, [pc, #60]	; (8002898 <nRF24_WriteMBReg+0x54>)
 800285c:	f002 fefe 	bl	800565c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff36 	bl	80026d4 <nRF24_LL_RW>
	while (count--) {
 8002868:	e006      	b.n	8002878 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	603a      	str	r2, [r7, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff2e 	bl	80026d4 <nRF24_LL_RW>
	while (count--) {
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	71ba      	strb	r2, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f3      	bne.n	800286a <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <nRF24_WriteMBReg+0x54>)
 800288a:	f002 fee7 	bl	800565c <HAL_GPIO_WritePin>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40010800 	.word	0x40010800

0800289c <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80028a0:	2108      	movs	r1, #8
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff ff60 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80028a8:	213f      	movs	r1, #63	; 0x3f
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff ff5c 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80028b0:	2103      	movs	r1, #3
 80028b2:	2002      	movs	r0, #2
 80028b4:	f7ff ff58 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80028b8:	2103      	movs	r1, #3
 80028ba:	2003      	movs	r0, #3
 80028bc:	f7ff ff54 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80028c0:	2103      	movs	r1, #3
 80028c2:	2004      	movs	r0, #4
 80028c4:	f7ff ff50 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80028c8:	2102      	movs	r1, #2
 80028ca:	2005      	movs	r0, #5
 80028cc:	f7ff ff4c 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80028d0:	210e      	movs	r1, #14
 80028d2:	2006      	movs	r0, #6
 80028d4:	f7ff ff48 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80028d8:	2100      	movs	r1, #0
 80028da:	2007      	movs	r0, #7
 80028dc:	f7ff ff44 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80028e0:	2100      	movs	r1, #0
 80028e2:	2011      	movs	r0, #17
 80028e4:	f7ff ff40 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80028e8:	2100      	movs	r1, #0
 80028ea:	2012      	movs	r0, #18
 80028ec:	f7ff ff3c 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80028f0:	2100      	movs	r1, #0
 80028f2:	2013      	movs	r0, #19
 80028f4:	f7ff ff38 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80028f8:	2100      	movs	r1, #0
 80028fa:	2014      	movs	r0, #20
 80028fc:	f7ff ff34 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002900:	2100      	movs	r1, #0
 8002902:	2015      	movs	r0, #21
 8002904:	f7ff ff30 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002908:	2100      	movs	r1, #0
 800290a:	2016      	movs	r0, #22
 800290c:	f7ff ff2c 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002910:	2100      	movs	r1, #0
 8002912:	201c      	movs	r0, #28
 8002914:	f7ff ff28 	bl	8002768 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002918:	2100      	movs	r1, #0
 800291a:	201d      	movs	r0, #29
 800291c:	f7ff ff24 	bl	8002768 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8002920:	f000 f9e2 	bl	8002ce8 <nRF24_FlushRX>
	nRF24_FlushTX();
 8002924:	f000 f9d8 	bl	8002cd8 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8002928:	f000 f9e6 	bl	8002cf8 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002932:	4802      	ldr	r0, [pc, #8]	; (800293c <nRF24_Init+0xa0>)
 8002934:	f002 fe92 	bl	800565c <HAL_GPIO_WritePin>
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40010800 	.word	0x40010800

08002940 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <nRF24_Check+0x58>)
 8002948:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800294a:	2205      	movs	r2, #5
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	2030      	movs	r0, #48	; 0x30
 8002950:	f7ff ff78 	bl	8002844 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002954:	463b      	mov	r3, r7
 8002956:	2205      	movs	r2, #5
 8002958:	4619      	mov	r1, r3
 800295a:	2010      	movs	r0, #16
 800295c:	f7ff ff46 	bl	80027ec <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e010      	b.n	8002988 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	f107 0210 	add.w	r2, r7, #16
 800296c:	4413      	add	r3, r2
 800296e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1c59      	adds	r1, r3, #1
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <nRF24_Check+0x42>
 800297e:	2300      	movs	r3, #0
 8002980:	e006      	b.n	8002990 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3301      	adds	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d9eb      	bls.n	8002966 <nRF24_Check+0x26>
	}

	return 1;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0800bc98 	.word	0x0800bc98

0800299c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7ff feba 	bl	8002720 <nRF24_ReadReg>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d104      	bne.n	80029c0 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e003      	b.n	80029c8 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	f023 0302 	bic.w	r3, r3, #2
 80029c6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	4619      	mov	r1, r3
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fecb 	bl	8002768 <nRF24_WriteReg>
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff fe9b 	bl	8002720 <nRF24_ReadReg>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	b25a      	sxtb	r2, r3
 8002a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7ff feaa 	bl	8002768 <nRF24_WriteReg>
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7ff fe7a 	bl	8002720 <nRF24_ReadReg>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	b25a      	sxtb	r2, r3
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fe89 	bl	8002768 <nRF24_WriteReg>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	2005      	movs	r0, #5
 8002a6e:	f7ff fe7b 	bl	8002768 <nRF24_WriteReg>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	3b02      	subs	r3, #2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f7ff fe6b 	bl	8002768 <nRF24_WriteReg>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d846      	bhi.n	8002b3c <nRF24_SetAddr+0xa0>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <nRF24_SetAddr+0x18>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ad1 	.word	0x08002ad1
 8002ab8:	08002ad1 	.word	0x08002ad1
 8002abc:	08002b29 	.word	0x08002b29
 8002ac0:	08002b29 	.word	0x08002b29
 8002ac4:	08002b29 	.word	0x08002b29
 8002ac8:	08002b29 	.word	0x08002b29
 8002acc:	08002ad1 	.word	0x08002ad1
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f7ff fe25 	bl	8002720 <nRF24_ReadReg>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	3301      	adds	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aea:	4817      	ldr	r0, [pc, #92]	; (8002b48 <nRF24_SetAddr+0xac>)
 8002aec:	f002 fdb6 	bl	800565c <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <nRF24_SetAddr+0xb0>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fde9 	bl	80026d4 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	1e5a      	subs	r2, r3, #1
 8002b06:	603a      	str	r2, [r7, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fde2 	bl	80026d4 <nRF24_LL_RW>
			} while (addr_width--);
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	1e5a      	subs	r2, r3, #1
 8002b14:	73fa      	strb	r2, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f3      	bne.n	8002b02 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b20:	4809      	ldr	r0, [pc, #36]	; (8002b48 <nRF24_SetAddr+0xac>)
 8002b22:	f002 fd9b 	bl	800565c <HAL_GPIO_WritePin>
			break;
 8002b26:	e00a      	b.n	8002b3e <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <nRF24_SetAddr+0xb0>)
 8002b2c:	5cd2      	ldrb	r2, [r2, r3]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7ff fe17 	bl	8002768 <nRF24_WriteReg>
			break;
 8002b3a:	e000      	b.n	8002b3e <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002b3c:	bf00      	nop
	}
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40010800 	.word	0x40010800
 8002b4c:	0800bcd4 	.word	0x0800bcd4

08002b50 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002b5a:	2006      	movs	r0, #6
 8002b5c:	f7ff fde0 	bl	8002720 <nRF24_ReadReg>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	f023 0306 	bic.w	r3, r3, #6
 8002b6a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4619      	mov	r1, r3
 8002b78:	2006      	movs	r0, #6
 8002b7a:	f7ff fdf5 	bl	8002768 <nRF24_WriteReg>
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002b90:	2006      	movs	r0, #6
 8002b92:	f7ff fdc5 	bl	8002720 <nRF24_ReadReg>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002ba0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	4619      	mov	r1, r3
 8002bae:	2006      	movs	r0, #6
 8002bb0:	f7ff fdda 	bl	8002768 <nRF24_WriteReg>
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	71bb      	strb	r3, [r7, #6]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f7ff fda6 	bl	8002720 <nRF24_ReadReg>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b25a      	sxtb	r2, r3
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bec:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f7ff fdb8 	bl	8002768 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <nRF24_SetRXPipe+0xa4>)
 8002bfc:	5cd2      	ldrb	r2, [r2, r3]
 8002bfe:	797b      	ldrb	r3, [r7, #5]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff fdad 	bl	8002768 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7ff fd86 	bl	8002720 <nRF24_ReadReg>
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002c18:	79bb      	ldrb	r3, [r7, #6]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10a      	bne.n	8002c34 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	2201      	movs	r2, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	b25a      	sxtb	r2, r3
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e00b      	b.n	8002c4c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	2201      	movs	r2, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	b25a      	sxtb	r2, r3
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4013      	ands	r3, r2
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7ff fd89 	bl	8002768 <nRF24_WriteReg>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800bccc 	.word	0x0800bccc

08002c64 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d904      	bls.n	8002c7e <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7ff fd76 	bl	8002768 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8002c7c:	e015      	b.n	8002caa <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff fd4e 	bl	8002720 <nRF24_ReadReg>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	b25a      	sxtb	r2, r3
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7ff fd5f 	bl	8002768 <nRF24_WriteReg>
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002cb6:	2007      	movs	r0, #7
 8002cb8:	f7ff fd32 	bl	8002720 <nRF24_ReadReg>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002cc6:	2017      	movs	r0, #23
 8002cc8:	f7ff fd2a 	bl	8002720 <nRF24_ReadReg>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	b2db      	uxtb	r3, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002cdc:	21ff      	movs	r1, #255	; 0xff
 8002cde:	20e1      	movs	r0, #225	; 0xe1
 8002ce0:	f7ff fd42 	bl	8002768 <nRF24_WriteReg>
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002cec:	21ff      	movs	r1, #255	; 0xff
 8002cee:	20e2      	movs	r0, #226	; 0xe2
 8002cf0:	f7ff fd3a 	bl	8002768 <nRF24_WriteReg>
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002cfe:	2007      	movs	r0, #7
 8002d00:	f7ff fd0e 	bl	8002720 <nRF24_ReadReg>
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d0e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4619      	mov	r1, r3
 8002d14:	2007      	movs	r0, #7
 8002d16:	f7ff fd27 	bl	8002768 <nRF24_WriteReg>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	461a      	mov	r2, r3
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	20a0      	movs	r0, #160	; 0xa0
 8002d36:	f7ff fd85 	bl	8002844 <nRF24_WriteMBReg>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8002d4e:	2007      	movs	r0, #7
 8002d50:	f7ff fce6 	bl	8002720 <nRF24_ReadReg>
 8002d54:	4603      	mov	r3, r0
 8002d56:	105b      	asrs	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d816      	bhi.n	8002d94 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <nRF24_ReadPayload+0x60>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fcd7 	bl	8002720 <nRF24_ReadReg>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	2061      	movs	r0, #97	; 0x61
 8002d8c:	f7ff fd2e 	bl	80027ec <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	e003      	b.n	8002d9c <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8002d9a:	23ff      	movs	r3, #255	; 0xff
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0800bccc 	.word	0x0800bccc

08002da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_MspInit+0x5c>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_MspInit+0x5c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6193      	str	r3, [r2, #24]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x5c>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_MspInit+0x60>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_MspInit+0x60>)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000

08002e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <HAL_ADC_MspInit+0x6c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d121      	bne.n	8002e70 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e36:	6193      	str	r3, [r2, #24]
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_ADC_MspInit+0x70>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e60:	2303      	movs	r3, #3
 8002e62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <HAL_ADC_MspInit+0x74>)
 8002e6c:	f002 fa9c 	bl	80053a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40012400 	.word	0x40012400
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010800 	.word	0x40010800

08002e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <HAL_I2C_MspInit+0x74>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d124      	bne.n	8002eee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ebc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec2:	2312      	movs	r3, #18
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_I2C_MspInit+0x7c>)
 8002ed2:	f002 fa69 	bl	80053a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_I2C_MspInit+0x78>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002eee:	bf00      	nop
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40005800 	.word	0x40005800
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010c00 	.word	0x40010c00

08002f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d131      	bne.n	8002f88 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2e:	61d3      	str	r3, [r2, #28]
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f42:	f043 0308 	orr.w	r3, r3, #8
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f54:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f107 0310 	add.w	r3, r7, #16
 8002f66:	4619      	mov	r1, r3
 8002f68:	480b      	ldr	r0, [pc, #44]	; (8002f98 <HAL_SPI_MspInit+0x94>)
 8002f6a:	f002 fa1d 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	4619      	mov	r1, r3
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <HAL_SPI_MspInit+0x94>)
 8002f84:	f002 fa10 	bl	80053a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f88:	bf00      	nop
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40003800 	.word	0x40003800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010c00 	.word	0x40010c00

08002f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_TIM_Base_MspInit+0x68>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10c      	bne.n	8002fc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb8:	6193      	str	r3, [r2, #24]
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fc6:	e018      	b.n	8002ffa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d113      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	61d3      	str	r3, [r2, #28]
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_TIM_Base_MspInit+0x6c>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2101      	movs	r1, #1
 8002fee:	201c      	movs	r0, #28
 8002ff0:	f001 ffa3 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff4:	201c      	movs	r0, #28
 8002ff6:	f001 ffbc 	bl	8004f72 <HAL_NVIC_EnableIRQ>
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_TIM_MspPostInit+0x5c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d118      	bne.n	800305e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_TIM_MspPostInit+0x60>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4a0e      	ldr	r2, [pc, #56]	; (800306c <HAL_TIM_MspPostInit+0x60>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6193      	str	r3, [r2, #24]
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_TIM_MspPostInit+0x60>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003044:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003048:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2302      	movs	r3, #2
 8003050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	4619      	mov	r1, r3
 8003058:	4805      	ldr	r0, [pc, #20]	; (8003070 <HAL_TIM_MspPostInit+0x64>)
 800305a:	f002 f9a5 	bl	80053a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40021000 	.word	0x40021000
 8003070:	40010800 	.word	0x40010800

08003074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <HAL_UART_MspInit+0xa4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d13d      	bne.n	8003110 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_UART_MspInit+0xa8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_UART_MspInit+0xa8>)
 800309a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_UART_MspInit+0xa8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_UART_MspInit+0xa8>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a1a      	ldr	r2, [pc, #104]	; (800311c <HAL_UART_MspInit+0xa8>)
 80030b2:	f043 0308 	orr.w	r3, r3, #8
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_UART_MspInit+0xa8>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	4812      	ldr	r0, [pc, #72]	; (8003120 <HAL_UART_MspInit+0xac>)
 80030d8:	f002 f966 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	480c      	ldr	r0, [pc, #48]	; (8003120 <HAL_UART_MspInit+0xac>)
 80030f0:	f002 f95a 	bl	80053a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_UART_MspInit+0xb0>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_UART_MspInit+0xb0>)
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003110:	bf00      	nop
 8003112:	3728      	adds	r7, #40	; 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40013800 	.word	0x40013800
 800311c:	40021000 	.word	0x40021000
 8003120:	40010c00 	.word	0x40010c00
 8003124:	40010000 	.word	0x40010000

08003128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <HardFault_Handler+0x4>

0800313a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313e:	e7fe      	b.n	800313e <MemManage_Handler+0x4>

08003140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <BusFault_Handler+0x4>

08003146 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800314a:	e7fe      	b.n	800314a <UsageFault_Handler+0x4>

0800314c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003174:	f001 f920 	bl	80043b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	0000      	movs	r0, r0
	...

08003180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	b087      	sub	sp, #28
 8003186:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003188:	488c      	ldr	r0, [pc, #560]	; (80033bc <TIM2_IRQHandler+0x23c>)
 800318a:	f004 f8c9 	bl	8007320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 800318e:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <TIM2_IRQHandler+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a8a      	ldr	r2, [pc, #552]	; (80033c0 <TIM2_IRQHandler+0x240>)
 8003196:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 8003198:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <TIM2_IRQHandler+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2bf9      	cmp	r3, #249	; 0xf9
 800319e:	d907      	bls.n	80031b0 <TIM2_IRQHandler+0x30>
  {
	  LEDcount=0;
 80031a0:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <TIM2_IRQHandler+0x240>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80031a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031aa:	4886      	ldr	r0, [pc, #536]	; (80033c4 <TIM2_IRQHandler+0x244>)
 80031ac:	f002 fa6e 	bl	800568c <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80031b0:	2201      	movs	r2, #1
 80031b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b6:	4884      	ldr	r0, [pc, #528]	; (80033c8 <TIM2_IRQHandler+0x248>)
 80031b8:	f002 fa50 	bl	800565c <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 80031bc:	210a      	movs	r1, #10
 80031be:	4883      	ldr	r0, [pc, #524]	; (80033cc <TIM2_IRQHandler+0x24c>)
 80031c0:	f001 fabe 	bl	8004740 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 80031c4:	4881      	ldr	r0, [pc, #516]	; (80033cc <TIM2_IRQHandler+0x24c>)
 80031c6:	f001 fbb5 	bl	8004934 <HAL_ADC_GetValue>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd61 	bl	8000c94 <__aeabi_ui2f>
 80031d2:	4603      	mov	r3, r0
 80031d4:	497e      	ldr	r1, [pc, #504]	; (80033d0 <TIM2_IRQHandler+0x250>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fdb4 	bl	8000d44 <__aeabi_fmul>
 80031dc:	4603      	mov	r3, r0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd ff76 	bl	80010d0 <__aeabi_f2uiz>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <TIM2_IRQHandler+0x254>)
 80031e8:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 80031ea:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <TIM2_IRQHandler+0x258>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <TIM2_IRQHandler+0x254>)
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	497a      	ldr	r1, [pc, #488]	; (80033dc <TIM2_IRQHandler+0x25c>)
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 80031f8:	4b77      	ldr	r3, [pc, #476]	; (80033d8 <TIM2_IRQHandler+0x258>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a76      	ldr	r2, [pc, #472]	; (80033d8 <TIM2_IRQHandler+0x258>)
 8003200:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <TIM2_IRQHandler+0x258>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b31      	cmp	r3, #49	; 0x31
 8003208:	d902      	bls.n	8003210 <TIM2_IRQHandler+0x90>
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <TIM2_IRQHandler+0x258>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8003210:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <TIM2_IRQHandler+0x260>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <TIM2_IRQHandler+0x264>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e00e      	b.n	800323c <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 800321e:	4b71      	ldr	r3, [pc, #452]	; (80033e4 <TIM2_IRQHandler+0x264>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6e      	ldr	r2, [pc, #440]	; (80033dc <TIM2_IRQHandler+0x25c>)
 8003224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003228:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <TIM2_IRQHandler+0x260>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4413      	add	r3, r2
 800322e:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <TIM2_IRQHandler+0x260>)
 8003230:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8003232:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <TIM2_IRQHandler+0x264>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <TIM2_IRQHandler+0x264>)
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <TIM2_IRQHandler+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b31      	cmp	r3, #49	; 0x31
 8003242:	d9ec      	bls.n	800321e <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <TIM2_IRQHandler+0x260>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <TIM2_IRQHandler+0x268>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	4a66      	ldr	r2, [pc, #408]	; (80033ec <TIM2_IRQHandler+0x26c>)
 8003252:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <TIM2_IRQHandler+0x270>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <TIM2_IRQHandler+0x274>)
 800325a:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <TIM2_IRQHandler+0x278>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a66      	ldr	r2, [pc, #408]	; (80033fc <TIM2_IRQHandler+0x27c>)
 8003262:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <TIM2_IRQHandler+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a66      	ldr	r2, [pc, #408]	; (8003404 <TIM2_IRQHandler+0x284>)
 800326a:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <TIM2_IRQHandler+0x288>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a66      	ldr	r2, [pc, #408]	; (800340c <TIM2_IRQHandler+0x28c>)
 8003272:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <TIM2_IRQHandler+0x290>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a66      	ldr	r2, [pc, #408]	; (8003414 <TIM2_IRQHandler+0x294>)
 800327a:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <TIM2_IRQHandler+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a66      	ldr	r2, [pc, #408]	; (800341c <TIM2_IRQHandler+0x29c>)
 8003282:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8003284:	4b66      	ldr	r3, [pc, #408]	; (8003420 <TIM2_IRQHandler+0x2a0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d06d      	beq.n	8003368 <TIM2_IRQHandler+0x1e8>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 800328c:	f7ff fd19 	bl	8002cc2 <nRF24_GetStatus_RXFIFO>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d068      	beq.n	8003368 <TIM2_IRQHandler+0x1e8>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8003296:	4963      	ldr	r1, [pc, #396]	; (8003424 <TIM2_IRQHandler+0x2a4>)
 8003298:	4863      	ldr	r0, [pc, #396]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 800329a:	f7ff fd53 	bl	8002d44 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 800329e:	f7ff fd2b 	bl	8002cf8 <nRF24_ClearIRQFlags>

  			//Check if Data is in correct ranges
  			if(nRF24_payloadRX[0]<=100 && nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100)
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d853      	bhi.n	8003352 <TIM2_IRQHandler+0x1d2>
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d84f      	bhi.n	8003352 <TIM2_IRQHandler+0x1d2>
 80032b2:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032b4:	789b      	ldrb	r3, [r3, #2]
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d84b      	bhi.n	8003352 <TIM2_IRQHandler+0x1d2>
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032bc:	78db      	ldrb	r3, [r3, #3]
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d847      	bhi.n	8003352 <TIM2_IRQHandler+0x1d2>
  			{
  				Ljoyupdown=nRF24_payloadRX[0];
 80032c2:	4b59      	ldr	r3, [pc, #356]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <TIM2_IRQHandler+0x2ac>)
 80032ca:	601a      	str	r2, [r3, #0]
  				Ljoyleftright=nRF24_payloadRX[1];
 80032cc:	4b56      	ldr	r3, [pc, #344]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <TIM2_IRQHandler+0x2b0>)
 80032d4:	601a      	str	r2, [r3, #0]
  				Djoyupdown=nRF24_payloadRX[2];
 80032d6:	4b54      	ldr	r3, [pc, #336]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032d8:	789b      	ldrb	r3, [r3, #2]
 80032da:	461a      	mov	r2, r3
 80032dc:	4b55      	ldr	r3, [pc, #340]	; (8003434 <TIM2_IRQHandler+0x2b4>)
 80032de:	601a      	str	r2, [r3, #0]
  				Djoyleftright=nRF24_payloadRX[3];
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <TIM2_IRQHandler+0x2b8>)
 80032e8:	601a      	str	r2, [r3, #0]
  				potenc1=nRF24_payloadRX[4];
 80032ea:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <TIM2_IRQHandler+0x2bc>)
 80032f2:	601a      	str	r2, [r3, #0]
  				potenc2=nRF24_payloadRX[5];
 80032f4:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 80032f6:	795b      	ldrb	r3, [r3, #5]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <TIM2_IRQHandler+0x2c0>)
 80032fc:	601a      	str	r2, [r3, #0]

  				togg1=nRF24_payloadRX[6]>>7;
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 8003300:	799b      	ldrb	r3, [r3, #6]
 8003302:	09db      	lsrs	r3, r3, #7
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <TIM2_IRQHandler+0x270>)
 800330a:	601a      	str	r2, [r3, #0]
  				togg2=(nRF24_payloadRX[6] & 64 )>>6;
 800330c:	4b46      	ldr	r3, [pc, #280]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 800330e:	799b      	ldrb	r3, [r3, #6]
 8003310:	119b      	asrs	r3, r3, #6
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <TIM2_IRQHandler+0x278>)
 8003318:	6013      	str	r3, [r2, #0]
  				togg3=(nRF24_payloadRX[6] & 32 )>>5;
 800331a:	4b43      	ldr	r3, [pc, #268]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 800331c:	799b      	ldrb	r3, [r3, #6]
 800331e:	115b      	asrs	r3, r3, #5
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	4a36      	ldr	r2, [pc, #216]	; (8003400 <TIM2_IRQHandler+0x280>)
 8003326:	6013      	str	r3, [r2, #0]
  				togg4=(nRF24_payloadRX[6] & 16 )>>4;
 8003328:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 800332a:	799b      	ldrb	r3, [r3, #6]
 800332c:	111b      	asrs	r3, r3, #4
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	4a35      	ldr	r2, [pc, #212]	; (8003408 <TIM2_IRQHandler+0x288>)
 8003334:	6013      	str	r3, [r2, #0]
  				togg5=(nRF24_payloadRX[6] & 8 )>>3;
 8003336:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 8003338:	799b      	ldrb	r3, [r3, #6]
 800333a:	10db      	asrs	r3, r3, #3
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	4a33      	ldr	r2, [pc, #204]	; (8003410 <TIM2_IRQHandler+0x290>)
 8003342:	6013      	str	r3, [r2, #0]
  				togg6=(nRF24_payloadRX[6] & 4 )>>2;
 8003344:	4b38      	ldr	r3, [pc, #224]	; (8003428 <TIM2_IRQHandler+0x2a8>)
 8003346:	799b      	ldrb	r3, [r3, #6]
 8003348:	109b      	asrs	r3, r3, #2
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	4a32      	ldr	r2, [pc, #200]	; (8003418 <TIM2_IRQHandler+0x298>)
 8003350:	6013      	str	r3, [r2, #0]

  			}
  			SendBackFlag=1;
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <TIM2_IRQHandler+0x2c4>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <TIM2_IRQHandler+0x2a0>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <TIM2_IRQHandler+0x2c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a38      	ldr	r2, [pc, #224]	; (8003448 <TIM2_IRQHandler+0x2c8>)
 8003366:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <TIM2_IRQHandler+0x2c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8100 	beq.w	8003572 <TIM2_IRQHandler+0x3f2>
  {
    	BackTimer++;
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <TIM2_IRQHandler+0x2cc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a34      	ldr	r2, [pc, #208]	; (800344c <TIM2_IRQHandler+0x2cc>)
 800337a:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 800337c:	4b33      	ldr	r3, [pc, #204]	; (800344c <TIM2_IRQHandler+0x2cc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3b01      	subs	r3, #1
 8003382:	2b05      	cmp	r3, #5
 8003384:	f200 80f5 	bhi.w	8003572 <TIM2_IRQHandler+0x3f2>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <TIM2_IRQHandler+0x210>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a9 	.word	0x080033a9
 8003394:	08003573 	.word	0x08003573
 8003398:	08003573 	.word	0x08003573
 800339c:	08003451 	.word	0x08003451
 80033a0:	0800354b 	.word	0x0800354b
 80033a4:	0800355f 	.word	0x0800355f
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033ae:	4806      	ldr	r0, [pc, #24]	; (80033c8 <TIM2_IRQHandler+0x248>)
 80033b0:	f002 f954 	bl	800565c <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff fb10 	bl	80029da <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 80033ba:	e0da      	b.n	8003572 <TIM2_IRQHandler+0x3f2>
 80033bc:	20000554 	.word	0x20000554
 80033c0:	20000718 	.word	0x20000718
 80033c4:	40011000 	.word	0x40011000
 80033c8:	40010c00 	.word	0x40010c00
 80033cc:	20000440 	.word	0x20000440
 80033d0:	4090ac29 	.word	0x4090ac29
 80033d4:	20000724 	.word	0x20000724
 80033d8:	2000021c 	.word	0x2000021c
 80033dc:	20000618 	.word	0x20000618
 80033e0:	20000214 	.word	0x20000214
 80033e4:	20000208 	.word	0x20000208
 80033e8:	51eb851f 	.word	0x51eb851f
 80033ec:	20000218 	.word	0x20000218
 80033f0:	200004b8 	.word	0x200004b8
 80033f4:	20000730 	.word	0x20000730
 80033f8:	200005f0 	.word	0x200005f0
 80033fc:	20000704 	.word	0x20000704
 8003400:	200002d8 	.word	0x200002d8
 8003404:	2000072c 	.word	0x2000072c
 8003408:	20000508 	.word	0x20000508
 800340c:	200006e0 	.word	0x200006e0
 8003410:	20000414 	.word	0x20000414
 8003414:	20000614 	.word	0x20000614
 8003418:	200002dc 	.word	0x200002dc
 800341c:	20000720 	.word	0x20000720
 8003420:	20000000 	.word	0x20000000
 8003424:	20000204 	.word	0x20000204
 8003428:	20000334 	.word	0x20000334
 800342c:	20000500 	.word	0x20000500
 8003430:	20000470 	.word	0x20000470
 8003434:	200005e8 	.word	0x200005e8
 8003438:	20000278 	.word	0x20000278
 800343c:	20000550 	.word	0x20000550
 8003440:	200005ec 	.word	0x200005ec
 8003444:	20000220 	.word	0x20000220
 8003448:	20000610 	.word	0x20000610
 800344c:	20000224 	.word	0x20000224

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <TIM2_IRQHandler+0x428>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b55      	ldr	r3, [pc, #340]	; (80035ac <TIM2_IRQHandler+0x42c>)
 8003458:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 800345a:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <TIM2_IRQHandler+0x428>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <TIM2_IRQHandler+0x42c>)
 8003464:	705a      	strb	r2, [r3, #1]


  	 	 			//save Angle for NRF24 transfer
  	 	 			if(AnglePitch<0)
 8003466:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <TIM2_IRQHandler+0x430>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fe06 	bl	8001080 <__aeabi_fcmplt>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <TIM2_IRQHandler+0x318>
  	 	 			{
  	 	 				AnglePitchDIR=1;
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <TIM2_IRQHandler+0x434>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
  	 	 				AnglePitchNRF24=AnglePitch*(-1);
 8003480:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <TIM2_IRQHandler+0x430>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd fe21 	bl	80010d0 <__aeabi_f2uiz>
 800348e:	4603      	mov	r3, r0
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <TIM2_IRQHandler+0x438>)
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e00b      	b.n	80034b0 <TIM2_IRQHandler+0x330>
  	 	 			}
  	 	 			else
  	 	 			{
  	 	 				AnglePitchDIR=0;
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <TIM2_IRQHandler+0x434>)
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
  	 	 				AnglePitchNRF24=AnglePitch;
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <TIM2_IRQHandler+0x430>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fe14 	bl	80010d0 <__aeabi_f2uiz>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <TIM2_IRQHandler+0x438>)
 80034ae:	701a      	strb	r2, [r3, #0]
  	 	 			}


  	 	 			if(AngleRoll<0)
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <TIM2_IRQHandler+0x43c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fde1 	bl	8001080 <__aeabi_fcmplt>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <TIM2_IRQHandler+0x362>
  	 	 			{
  	 	 				AngleRollDIR=1;
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <TIM2_IRQHandler+0x440>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
  	 	 				AngleRollNRF24=AngleRoll*(-1);
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <TIM2_IRQHandler+0x43c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fdfc 	bl	80010d0 <__aeabi_f2uiz>
 80034d8:	4603      	mov	r3, r0
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <TIM2_IRQHandler+0x444>)
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e00b      	b.n	80034fa <TIM2_IRQHandler+0x37a>
  	 	 			}
  	 	 			else
  	 	 			{
  	 	 				AngleRollDIR=0;
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <TIM2_IRQHandler+0x440>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
  	 	 				AngleRollNRF24=AngleRoll;
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <TIM2_IRQHandler+0x43c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fdef 	bl	80010d0 <__aeabi_f2uiz>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <TIM2_IRQHandler+0x444>)
 80034f8:	701a      	strb	r2, [r3, #0]
  	 	 			}

  	 	 			nRF24_payloadTX[2] = (uint8_t)(AnglePitchNRF24);
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <TIM2_IRQHandler+0x438>)
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <TIM2_IRQHandler+0x42c>)
 8003500:	709a      	strb	r2, [r3, #2]
  	 	 			nRF24_payloadTX[3] = (uint8_t)(AngleRollNRF24);
 8003502:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <TIM2_IRQHandler+0x444>)
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <TIM2_IRQHandler+0x42c>)
 8003508:	70da      	strb	r2, [r3, #3]
  	 	 			nRF24_payloadTX[4] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <TIM2_IRQHandler+0x440>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <TIM2_IRQHandler+0x434>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4413      	add	r3, r2
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <TIM2_IRQHandler+0x448>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	b2db      	uxtb	r3, r3
 8003524:	4413      	add	r3, r2
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <TIM2_IRQHandler+0x44c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4413      	add	r3, r2
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <TIM2_IRQHandler+0x42c>)
 800353e:	711a      	strb	r2, [r3, #4]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 5);
 8003540:	2105      	movs	r1, #5
 8003542:	481a      	ldr	r0, [pc, #104]	; (80035ac <TIM2_IRQHandler+0x42c>)
 8003544:	f7ff f876 	bl	8002634 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8003548:	e013      	b.n	8003572 <TIM2_IRQHandler+0x3f2>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff fa45 	bl	80029da <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8003550:	2201      	movs	r2, #1
 8003552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003556:	481e      	ldr	r0, [pc, #120]	; (80035d0 <TIM2_IRQHandler+0x450>)
 8003558:	f002 f880 	bl	800565c <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 800355c:	e009      	b.n	8003572 <TIM2_IRQHandler+0x3f2>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <TIM2_IRQHandler+0x454>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <TIM2_IRQHandler+0x458>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <TIM2_IRQHandler+0x45c>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

  				}break;
 8003570:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <TIM2_IRQHandler+0x460>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <TIM2_IRQHandler+0x460>)
 800357a:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <TIM2_IRQHandler+0x460>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003584:	d13f      	bne.n	8003606 <TIM2_IRQHandler+0x486>
  {
    		MSGprerSecond=MSGcount;
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <TIM2_IRQHandler+0x464>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <TIM2_IRQHandler+0x468>)
 800358c:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <TIM2_IRQHandler+0x464>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b09      	cmp	r3, #9
 8003594:	d82e      	bhi.n	80035f4 <TIM2_IRQHandler+0x474>
    		{
    			MSGLowCount++;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <TIM2_IRQHandler+0x46c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <TIM2_IRQHandler+0x46c>)
 800359e:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <TIM2_IRQHandler+0x470>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e028      	b.n	80035fa <TIM2_IRQHandler+0x47a>
 80035a8:	20000218 	.word	0x20000218
 80035ac:	20000420 	.word	0x20000420
 80035b0:	200006f0 	.word	0x200006f0
 80035b4:	200006f8 	.word	0x200006f8
 80035b8:	20000714 	.word	0x20000714
 80035bc:	20000728 	.word	0x20000728
 80035c0:	20000708 	.word	0x20000708
 80035c4:	2000071c 	.word	0x2000071c
 80035c8:	20000210 	.word	0x20000210
 80035cc:	2000020c 	.word	0x2000020c
 80035d0:	40010c00 	.word	0x40010c00
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000220 	.word	0x20000220
 80035dc:	20000224 	.word	0x20000224
 80035e0:	200005fc 	.word	0x200005fc
 80035e4:	20000610 	.word	0x20000610
 80035e8:	200006e8 	.word	0x200006e8
 80035ec:	200006e4 	.word	0x200006e4
 80035f0:	20000710 	.word	0x20000710
    		}
    		 else  ConnectWeakFlag=0;
 80035f4:	4bb8      	ldr	r3, [pc, #736]	; (80038d8 <TIM2_IRQHandler+0x758>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 80035fa:	4bb8      	ldr	r3, [pc, #736]	; (80038dc <TIM2_IRQHandler+0x75c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8003600:	4bb7      	ldr	r3, [pc, #732]	; (80038e0 <TIM2_IRQHandler+0x760>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------
  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8003606:	49b7      	ldr	r1, [pc, #732]	; (80038e4 <TIM2_IRQHandler+0x764>)
 8003608:	48b7      	ldr	r0, [pc, #732]	; (80038e8 <TIM2_IRQHandler+0x768>)
 800360a:	f7fd fe29 	bl	8001260 <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 800360e:	49b5      	ldr	r1, [pc, #724]	; (80038e4 <TIM2_IRQHandler+0x764>)
 8003610:	48b5      	ldr	r0, [pc, #724]	; (80038e8 <TIM2_IRQHandler+0x768>)
 8003612:	f7fd fe57 	bl	80012c4 <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8003616:	4bb3      	ldr	r3, [pc, #716]	; (80038e4 <TIM2_IRQHandler+0x764>)
 8003618:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800361c:	b29a      	uxth	r2, r3
 800361e:	4bb3      	ldr	r3, [pc, #716]	; (80038ec <TIM2_IRQHandler+0x76c>)
 8003620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003624:	b29b      	uxth	r3, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b29b      	uxth	r3, r3
 800362a:	b21a      	sxth	r2, r3
 800362c:	4bb0      	ldr	r3, [pc, #704]	; (80038f0 <TIM2_IRQHandler+0x770>)
 800362e:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8003630:	4bac      	ldr	r3, [pc, #688]	; (80038e4 <TIM2_IRQHandler+0x764>)
 8003632:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003636:	b29a      	uxth	r2, r3
 8003638:	4bae      	ldr	r3, [pc, #696]	; (80038f4 <TIM2_IRQHandler+0x774>)
 800363a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363e:	b29b      	uxth	r3, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	b29b      	uxth	r3, r3
 8003644:	b21a      	sxth	r2, r3
 8003646:	4bac      	ldr	r3, [pc, #688]	; (80038f8 <TIM2_IRQHandler+0x778>)
 8003648:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 800364a:	4ba6      	ldr	r3, [pc, #664]	; (80038e4 <TIM2_IRQHandler+0x764>)
 800364c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003650:	b29a      	uxth	r2, r3
 8003652:	4baa      	ldr	r3, [pc, #680]	; (80038fc <TIM2_IRQHandler+0x77c>)
 8003654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003658:	b29b      	uxth	r3, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	b29b      	uxth	r3, r3
 800365e:	b21a      	sxth	r2, r3
 8003660:	4ba7      	ldr	r3, [pc, #668]	; (8003900 <TIM2_IRQHandler+0x780>)
 8003662:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTORANGLE;
 8003664:	4ba2      	ldr	r3, [pc, #648]	; (80038f0 <TIM2_IRQHandler+0x770>)
 8003666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fb16 	bl	8000c9c <__aeabi_i2f>
 8003670:	4603      	mov	r3, r0
 8003672:	49a4      	ldr	r1, [pc, #656]	; (8003904 <TIM2_IRQHandler+0x784>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fb65 	bl	8000d44 <__aeabi_fmul>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	4ba2      	ldr	r3, [pc, #648]	; (8003908 <TIM2_IRQHandler+0x788>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fd fa55 	bl	8000b34 <__addsf3>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	4b9e      	ldr	r3, [pc, #632]	; (8003908 <TIM2_IRQHandler+0x788>)
 8003690:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTORANGLE;
 8003692:	4b99      	ldr	r3, [pc, #612]	; (80038f8 <TIM2_IRQHandler+0x778>)
 8003694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd faff 	bl	8000c9c <__aeabi_i2f>
 800369e:	4603      	mov	r3, r0
 80036a0:	4998      	ldr	r1, [pc, #608]	; (8003904 <TIM2_IRQHandler+0x784>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fb4e 	bl	8000d44 <__aeabi_fmul>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b97      	ldr	r3, [pc, #604]	; (800390c <TIM2_IRQHandler+0x78c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7fd fa3e 	bl	8000b34 <__addsf3>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b93      	ldr	r3, [pc, #588]	; (800390c <TIM2_IRQHandler+0x78c>)
 80036be:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 80036c0:	4b91      	ldr	r3, [pc, #580]	; (8003908 <TIM2_IRQHandler+0x788>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc feaf 	bl	8000428 <__aeabi_f2d>
 80036ca:	4680      	mov	r8, r0
 80036cc:	4689      	mov	r9, r1
 80036ce:	4b8f      	ldr	r3, [pc, #572]	; (800390c <TIM2_IRQHandler+0x78c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fea8 	bl	8000428 <__aeabi_f2d>
 80036d8:	4682      	mov	sl, r0
 80036da:	468b      	mov	fp, r1
 80036dc:	4b88      	ldr	r3, [pc, #544]	; (8003900 <TIM2_IRQHandler+0x780>)
 80036de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fada 	bl	8000c9c <__aeabi_i2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4989      	ldr	r1, [pc, #548]	; (8003910 <TIM2_IRQHandler+0x790>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fb29 	bl	8000d44 <__aeabi_fmul>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4983      	ldr	r1, [pc, #524]	; (8003904 <TIM2_IRQHandler+0x784>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fb24 	bl	8000d44 <__aeabi_fmul>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc fe92 	bl	8000428 <__aeabi_f2d>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f006 fe7e 	bl	800a40c <sin>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4650      	mov	r0, sl
 8003716:	4659      	mov	r1, fp
 8003718:	f7fc fede 	bl	80004d8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4640      	mov	r0, r8
 8003722:	4649      	mov	r1, r9
 8003724:	f7fc fd22 	bl	800016c <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd f9aa 	bl	8000a88 <__aeabi_d2f>
 8003734:	4602      	mov	r2, r0
 8003736:	4b74      	ldr	r3, [pc, #464]	; (8003908 <TIM2_IRQHandler+0x788>)
 8003738:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <TIM2_IRQHandler+0x78c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fe72 	bl	8000428 <__aeabi_f2d>
 8003744:	4680      	mov	r8, r0
 8003746:	4689      	mov	r9, r1
 8003748:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <TIM2_IRQHandler+0x788>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc fe6b 	bl	8000428 <__aeabi_f2d>
 8003752:	4682      	mov	sl, r0
 8003754:	468b      	mov	fp, r1
 8003756:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <TIM2_IRQHandler+0x780>)
 8003758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fa9d 	bl	8000c9c <__aeabi_i2f>
 8003762:	4603      	mov	r3, r0
 8003764:	496a      	ldr	r1, [pc, #424]	; (8003910 <TIM2_IRQHandler+0x790>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd faec 	bl	8000d44 <__aeabi_fmul>
 800376c:	4603      	mov	r3, r0
 800376e:	4965      	ldr	r1, [pc, #404]	; (8003904 <TIM2_IRQHandler+0x784>)
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fae7 	bl	8000d44 <__aeabi_fmul>
 8003776:	4603      	mov	r3, r0
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fe55 	bl	8000428 <__aeabi_f2d>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f006 fe41 	bl	800a40c <sin>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4650      	mov	r0, sl
 8003790:	4659      	mov	r1, fp
 8003792:	f7fc fea1 	bl	80004d8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f7fc fce3 	bl	8000168 <__aeabi_dsub>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fd f96d 	bl	8000a88 <__aeabi_d2f>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <TIM2_IRQHandler+0x78c>)
 80037b2:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c2:	fb03 f202 	mul.w	r2, r3, r2
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037d4:	fb03 f301 	mul.w	r3, r3, r1
 80037d8:	441a      	add	r2, r3
 80037da:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e0:	4619      	mov	r1, r3
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <TIM2_IRQHandler+0x764>)
 80037e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e8:	fb03 f301 	mul.w	r3, r3, r1
 80037ec:	4413      	add	r3, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe08 	bl	8000404 <__aeabi_i2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	f006 fe94 	bl	800a528 <sqrt>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	f7fd f93e 	bl	8000a88 <__aeabi_d2f>
 800380c:	4602      	mov	r2, r0
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <TIM2_IRQHandler+0x794>)
 8003810:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <TIM2_IRQHandler+0x764>)
 8003814:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fa3f 	bl	8000c9c <__aeabi_i2f>
 800381e:	4602      	mov	r2, r0
 8003820:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <TIM2_IRQHandler+0x794>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f7fd fb40 	bl	8000eac <__aeabi_fdiv>
 800382c:	4603      	mov	r3, r0
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fdfa 	bl	8000428 <__aeabi_f2d>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f006 fe20 	bl	800a480 <asin>
 8003840:	a323      	add	r3, pc, #140	; (adr r3, 80038d0 <TIM2_IRQHandler+0x750>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fe47 	bl	80004d8 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f919 	bl	8000a88 <__aeabi_d2f>
 8003856:	4602      	mov	r2, r0
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <TIM2_IRQHandler+0x798>)
 800385a:	601a      	str	r2, [r3, #0]
  AngleRollAccel=-asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <TIM2_IRQHandler+0x764>)
 800385e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fa1a 	bl	8000c9c <__aeabi_i2f>
 8003868:	4602      	mov	r2, r0
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <TIM2_IRQHandler+0x794>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f7fd fb1b 	bl	8000eac <__aeabi_fdiv>
 8003876:	4603      	mov	r3, r0
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fdd5 	bl	8000428 <__aeabi_f2d>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f006 fdfb 	bl	800a480 <asin>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4614      	mov	r4, r2
 8003890:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003894:	a30e      	add	r3, pc, #56	; (adr r3, 80038d0 <TIM2_IRQHandler+0x750>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fc fe1b 	bl	80004d8 <__aeabi_dmul>
 80038a2:	4603      	mov	r3, r0
 80038a4:	460c      	mov	r4, r1
 80038a6:	4618      	mov	r0, r3
 80038a8:	4621      	mov	r1, r4
 80038aa:	f7fd f8ed 	bl	8000a88 <__aeabi_d2f>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <TIM2_IRQHandler+0x79c>)
 80038b2:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <TIM2_IRQHandler+0x798>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4919      	ldr	r1, [pc, #100]	; (8003920 <TIM2_IRQHandler+0x7a0>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd f938 	bl	8000b30 <__aeabi_fsub>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <TIM2_IRQHandler+0x798>)
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e02c      	b.n	8003924 <TIM2_IRQHandler+0x7a4>
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	20000000 	.word	0x20000000
 80038d4:	404ca5dc 	.word	0x404ca5dc
 80038d8:	20000710 	.word	0x20000710
 80038dc:	20000610 	.word	0x20000610
 80038e0:	200005fc 	.word	0x200005fc
 80038e4:	20000594 	.word	0x20000594
 80038e8:	200002e0 	.word	0x200002e0
 80038ec:	20000354 	.word	0x20000354
 80038f0:	2000027c 	.word	0x2000027c
 80038f4:	20000418 	.word	0x20000418
 80038f8:	200003a8 	.word	0x200003a8
 80038fc:	2000027e 	.word	0x2000027e
 8003900:	200004b4 	.word	0x200004b4
 8003904:	38001203 	.word	0x38001203
 8003908:	200006fc 	.word	0x200006fc
 800390c:	20000604 	.word	0x20000604
 8003910:	3c8efa35 	.word	0x3c8efa35
 8003914:	20000600 	.word	0x20000600
 8003918:	20000700 	.word	0x20000700
 800391c:	200006ec 	.word	0x200006ec
 8003920:	3e4ccccd 	.word	0x3e4ccccd
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 8003924:	4bae      	ldr	r3, [pc, #696]	; (8003be0 <TIM2_IRQHandler+0xa60>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	49ae      	ldr	r1, [pc, #696]	; (8003be4 <TIM2_IRQHandler+0xa64>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd f900 	bl	8000b30 <__aeabi_fsub>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	4baa      	ldr	r3, [pc, #680]	; (8003be0 <TIM2_IRQHandler+0xa60>)
 8003936:	601a      	str	r2, [r3, #0]

  AnglePitch=0.998*AnglePitchGyro + 0.002*AnglePitchAccel;
 8003938:	4bab      	ldr	r3, [pc, #684]	; (8003be8 <TIM2_IRQHandler+0xa68>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fd73 	bl	8000428 <__aeabi_f2d>
 8003942:	a39f      	add	r3, pc, #636	; (adr r3, 8003bc0 <TIM2_IRQHandler+0xa40>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fdc6 	bl	80004d8 <__aeabi_dmul>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	4625      	mov	r5, r4
 8003952:	461c      	mov	r4, r3
 8003954:	4ba5      	ldr	r3, [pc, #660]	; (8003bec <TIM2_IRQHandler+0xa6c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fd65 	bl	8000428 <__aeabi_f2d>
 800395e:	a39a      	add	r3, pc, #616	; (adr r3, 8003bc8 <TIM2_IRQHandler+0xa48>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fc fdb8 	bl	80004d8 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fbfc 	bl	800016c <__adddf3>
 8003974:	4603      	mov	r3, r0
 8003976:	460c      	mov	r4, r1
 8003978:	4618      	mov	r0, r3
 800397a:	4621      	mov	r1, r4
 800397c:	f7fd f884 	bl	8000a88 <__aeabi_d2f>
 8003980:	4602      	mov	r2, r0
 8003982:	4b9b      	ldr	r3, [pc, #620]	; (8003bf0 <TIM2_IRQHandler+0xa70>)
 8003984:	601a      	str	r2, [r3, #0]
  AngleRoll=0.998*AngleRollGyro + 0.002*AngleRollAccel;
 8003986:	4b9b      	ldr	r3, [pc, #620]	; (8003bf4 <TIM2_IRQHandler+0xa74>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fd4c 	bl	8000428 <__aeabi_f2d>
 8003990:	a38b      	add	r3, pc, #556	; (adr r3, 8003bc0 <TIM2_IRQHandler+0xa40>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fc fd9f 	bl	80004d8 <__aeabi_dmul>
 800399a:	4603      	mov	r3, r0
 800399c:	460c      	mov	r4, r1
 800399e:	4625      	mov	r5, r4
 80039a0:	461c      	mov	r4, r3
 80039a2:	4b8f      	ldr	r3, [pc, #572]	; (8003be0 <TIM2_IRQHandler+0xa60>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fd3e 	bl	8000428 <__aeabi_f2d>
 80039ac:	a386      	add	r3, pc, #536	; (adr r3, 8003bc8 <TIM2_IRQHandler+0xa48>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fc fd91 	bl	80004d8 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f7fc fbd5 	bl	800016c <__adddf3>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	4618      	mov	r0, r3
 80039c8:	4621      	mov	r1, r4
 80039ca:	f7fd f85d 	bl	8000a88 <__aeabi_d2f>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <TIM2_IRQHandler+0xa78>)
 80039d2:	601a      	str	r2, [r3, #0]


  //PID input Filtered
  PitchGyroPIDin =  (PitchGyroPIDin * 0.7) + (AnglePitch * 0.3);
 80039d4:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <TIM2_IRQHandler+0xa7c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fd25 	bl	8000428 <__aeabi_f2d>
 80039de:	a37c      	add	r3, pc, #496	; (adr r3, 8003bd0 <TIM2_IRQHandler+0xa50>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fd78 	bl	80004d8 <__aeabi_dmul>
 80039e8:	4603      	mov	r3, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4625      	mov	r5, r4
 80039ee:	461c      	mov	r4, r3
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <TIM2_IRQHandler+0xa70>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fd17 	bl	8000428 <__aeabi_f2d>
 80039fa:	a377      	add	r3, pc, #476	; (adr r3, 8003bd8 <TIM2_IRQHandler+0xa58>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fbae 	bl	800016c <__adddf3>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	4618      	mov	r0, r3
 8003a16:	4621      	mov	r1, r4
 8003a18:	f7fd f836 	bl	8000a88 <__aeabi_d2f>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <TIM2_IRQHandler+0xa7c>)
 8003a20:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (AngleRoll * 0.3);
 8003a22:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <TIM2_IRQHandler+0xa80>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fcfe 	bl	8000428 <__aeabi_f2d>
 8003a2c:	a368      	add	r3, pc, #416	; (adr r3, 8003bd0 <TIM2_IRQHandler+0xa50>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f7fc fd51 	bl	80004d8 <__aeabi_dmul>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	4625      	mov	r5, r4
 8003a3c:	461c      	mov	r4, r3
 8003a3e:	4b6e      	ldr	r3, [pc, #440]	; (8003bf8 <TIM2_IRQHandler+0xa78>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fcf0 	bl	8000428 <__aeabi_f2d>
 8003a48:	a363      	add	r3, pc, #396	; (adr r3, 8003bd8 <TIM2_IRQHandler+0xa58>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fc fd43 	bl	80004d8 <__aeabi_dmul>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7fc fb87 	bl	800016c <__adddf3>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	4618      	mov	r0, r3
 8003a64:	4621      	mov	r1, r4
 8003a66:	f7fd f80f 	bl	8000a88 <__aeabi_d2f>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <TIM2_IRQHandler+0xa80>)
 8003a6e:	601a      	str	r2, [r3, #0]
  //YawGyroPIDin = (YawGyroPIDin * 0.7) + (GyroZcal * GYROFACTORANGLEDEG * 0.3);
  //-------------------------------------------------------------------

  //SCALE DATA
  //Input Controller Center to MAX 50 - >100  --->0-800 us
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,MINTRHOTTLE,THROTTLESCALE);//throttle limit to 80%
 8003a70:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <TIM2_IRQHandler+0xa84>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd f90d 	bl	8000c94 <__aeabi_ui2f>
 8003a7a:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <TIM2_IRQHandler+0xa88>)
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <TIM2_IRQHandler+0xa8c>)
 8003a80:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <TIM2_IRQHandler+0xa90>)
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	f000 fb1b 	bl	80040c0 <ScaleDataFl>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <TIM2_IRQHandler+0xa94>)
 8003a8e:	601a      	str	r2, [r3, #0]

  //TESTING potenciometer=throttle
  //ThrottleINscaled=ScaleDataFl(potenc1,0,100,0,1000);//direct 10-100 -->0-1000 testing

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-MAXPITCHSCALE,+MAXPITCHSCALE);
 8003a90:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <TIM2_IRQHandler+0xa98>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd f8fd 	bl	8000c94 <__aeabi_ui2f>
 8003a9a:	4b60      	ldr	r3, [pc, #384]	; (8003c1c <TIM2_IRQHandler+0xa9c>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4b60      	ldr	r3, [pc, #384]	; (8003c20 <TIM2_IRQHandler+0xaa0>)
 8003aa0:	4a5b      	ldr	r2, [pc, #364]	; (8003c10 <TIM2_IRQHandler+0xa90>)
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	f000 fb0b 	bl	80040c0 <ScaleDataFl>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b5d      	ldr	r3, [pc, #372]	; (8003c24 <TIM2_IRQHandler+0xaa4>)
 8003aae:	601a      	str	r2, [r3, #0]
  //Invert
  PitchINscaled*=(-1);
 8003ab0:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <TIM2_IRQHandler+0xaa4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ab8:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <TIM2_IRQHandler+0xaa4>)
 8003aba:	6013      	str	r3, [r2, #0]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-MAXROLLSCALE,MAXROLLSCALE);
 8003abc:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <TIM2_IRQHandler+0xaa8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f8e7 	bl	8000c94 <__aeabi_ui2f>
 8003ac6:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <TIM2_IRQHandler+0xa9c>)
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <TIM2_IRQHandler+0xaa0>)
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <TIM2_IRQHandler+0xa90>)
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	f000 faf5 	bl	80040c0 <ScaleDataFl>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <TIM2_IRQHandler+0xaac>)
 8003ada:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 ->scaling
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-MAXYAWSCALE,MAXYAWSCALE);
 8003adc:	4b54      	ldr	r3, [pc, #336]	; (8003c30 <TIM2_IRQHandler+0xab0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f8d7 	bl	8000c94 <__aeabi_ui2f>
 8003ae6:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <TIM2_IRQHandler+0xab4>)
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <TIM2_IRQHandler+0xab8>)
 8003aec:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <TIM2_IRQHandler+0xa90>)
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f000 fae5 	bl	80040c0 <ScaleDataFl>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b50      	ldr	r3, [pc, #320]	; (8003c3c <TIM2_IRQHandler+0xabc>)
 8003afa:	601a      	str	r2, [r3, #0]

  //MOTOR CONTROL

  //PID
  pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 8003afc:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <TIM2_IRQHandler+0xaa4>)
 8003afe:	681d      	ldr	r5, [r3, #0]
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <TIM2_IRQHandler+0xa7c>)
 8003b02:	681e      	ldr	r6, [r3, #0]
 8003b04:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b06:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b0c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b12:	68dc      	ldr	r4, [r3, #12]
 8003b14:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd f8bf 	bl	8000c9c <__aeabi_i2f>
 8003b1e:	4682      	mov	sl, r0
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f8b9 	bl	8000c9c <__aeabi_i2f>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	9304      	str	r3, [sp, #16]
 8003b2e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b32:	4b44      	ldr	r3, [pc, #272]	; (8003c44 <TIM2_IRQHandler+0xac4>)
 8003b34:	9302      	str	r3, [sp, #8]
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <TIM2_IRQHandler+0xac8>)
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	9400      	str	r4, [sp, #0]
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	4642      	mov	r2, r8
 8003b40:	4631      	mov	r1, r6
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 faf2 	bl	800412c <pid>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <TIM2_IRQHandler+0xacc>)
 8003b4c:	601a      	str	r2, [r3, #0]
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <TIM2_IRQHandler+0xaac>)
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <TIM2_IRQHandler+0xa80>)
 8003b54:	681e      	ldr	r6, [r3, #0]
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b58:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003b5c:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b5e:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8003b62:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b64:	699c      	ldr	r4, [r3, #24]
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd f896 	bl	8000c9c <__aeabi_i2f>
 8003b70:	4682      	mov	sl, r0
 8003b72:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd f890 	bl	8000c9c <__aeabi_i2f>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <TIM2_IRQHandler+0xad0>)
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <TIM2_IRQHandler+0xad4>)
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	9400      	str	r4, [sp, #0]
 8003b8e:	464b      	mov	r3, r9
 8003b90:	4642      	mov	r2, r8
 8003b92:	4631      	mov	r1, r6
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 fac9 	bl	800412c <pid>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <TIM2_IRQHandler+0xad8>)
 8003b9e:	601a      	str	r2, [r3, #0]
  pid_output_yaw = pid(YawINscaled, YawGyroPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <TIM2_IRQHandler+0xabc>)
 8003ba2:	681d      	ldr	r5, [r3, #0]
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <TIM2_IRQHandler+0xadc>)
 8003ba6:	681e      	ldr	r6, [r3, #0]
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003baa:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003bb0:	f8d3 9020 	ldr.w	r9, [r3, #32]
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003bb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <TIM2_IRQHandler+0xac0>)
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	e04f      	b.n	8003c60 <TIM2_IRQHandler+0xae0>
 8003bc0:	b22d0e56 	.word	0xb22d0e56
 8003bc4:	3fefef9d 	.word	0x3fefef9d
 8003bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bcc:	3f60624d 	.word	0x3f60624d
 8003bd0:	66666666 	.word	0x66666666
 8003bd4:	3fe66666 	.word	0x3fe66666
 8003bd8:	33333333 	.word	0x33333333
 8003bdc:	3fd33333 	.word	0x3fd33333
 8003be0:	200006ec 	.word	0x200006ec
 8003be4:	400ccccd 	.word	0x400ccccd
 8003be8:	200006fc 	.word	0x200006fc
 8003bec:	20000700 	.word	0x20000700
 8003bf0:	200006f0 	.word	0x200006f0
 8003bf4:	20000604 	.word	0x20000604
 8003bf8:	20000728 	.word	0x20000728
 8003bfc:	2000023c 	.word	0x2000023c
 8003c00:	20000240 	.word	0x20000240
 8003c04:	20000500 	.word	0x20000500
 8003c08:	44480000 	.word	0x44480000
 8003c0c:	42a00000 	.word	0x42a00000
 8003c10:	42c80000 	.word	0x42c80000
 8003c14:	2000022c 	.word	0x2000022c
 8003c18:	200005e8 	.word	0x200005e8
 8003c1c:	41a00000 	.word	0x41a00000
 8003c20:	c1a00000 	.word	0xc1a00000
 8003c24:	20000230 	.word	0x20000230
 8003c28:	20000278 	.word	0x20000278
 8003c2c:	20000234 	.word	0x20000234
 8003c30:	20000470 	.word	0x20000470
 8003c34:	43340000 	.word	0x43340000
 8003c38:	c3340000 	.word	0xc3340000
 8003c3c:	20000238 	.word	0x20000238
 8003c40:	20000510 	.word	0x20000510
 8003c44:	20000258 	.word	0x20000258
 8003c48:	20000254 	.word	0x20000254
 8003c4c:	20000248 	.word	0x20000248
 8003c50:	20000260 	.word	0x20000260
 8003c54:	2000025c 	.word	0x2000025c
 8003c58:	2000024c 	.word	0x2000024c
 8003c5c:	20000244 	.word	0x20000244
 8003c60:	f7fd f81c 	bl	8000c9c <__aeabi_i2f>
 8003c64:	4682      	mov	sl, r0
 8003c66:	4b97      	ldr	r3, [pc, #604]	; (8003ec4 <TIM2_IRQHandler+0xd44>)
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd f816 	bl	8000c9c <__aeabi_i2f>
 8003c70:	4603      	mov	r3, r0
 8003c72:	9304      	str	r3, [sp, #16]
 8003c74:	f8cd a00c 	str.w	sl, [sp, #12]
 8003c78:	4b93      	ldr	r3, [pc, #588]	; (8003ec8 <TIM2_IRQHandler+0xd48>)
 8003c7a:	9302      	str	r3, [sp, #8]
 8003c7c:	4b93      	ldr	r3, [pc, #588]	; (8003ecc <TIM2_IRQHandler+0xd4c>)
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	9400      	str	r4, [sp, #0]
 8003c82:	464b      	mov	r3, r9
 8003c84:	4642      	mov	r2, r8
 8003c86:	4631      	mov	r1, r6
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f000 fa4f 	bl	800412c <pid>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <TIM2_IRQHandler+0xd50>)
 8003c92:	601a      	str	r2, [r3, #0]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 8003c94:	4b8f      	ldr	r3, [pc, #572]	; (8003ed4 <TIM2_IRQHandler+0xd54>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <TIM2_IRQHandler+0xb22>
 8003c9c:	4b8e      	ldr	r3, [pc, #568]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 8003ca2:	4b8e      	ldr	r3, [pc, #568]	; (8003edc <TIM2_IRQHandler+0xd5c>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8e      	ldr	r3, [pc, #568]	; (8003ee0 <TIM2_IRQHandler+0xd60>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d00f      	beq.n	8003cce <TIM2_IRQHandler+0xb4e>
 8003cae:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <TIM2_IRQHandler+0xd60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10b      	bne.n	8003cce <TIM2_IRQHandler+0xb4e>
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <TIM2_IRQHandler+0xd64>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	498b      	ldr	r1, [pc, #556]	; (8003ee8 <TIM2_IRQHandler+0xd68>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd f9df 	bl	8001080 <__aeabi_fcmplt>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <TIM2_IRQHandler+0xb4e>
 8003cc8:	4b83      	ldr	r3, [pc, #524]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003cca:	2202      	movs	r2, #2
 8003ccc:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 8003cce:	4b84      	ldr	r3, [pc, #528]	; (8003ee0 <TIM2_IRQHandler+0xd60>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <TIM2_IRQHandler+0xb5c>
 8003cd6:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8003cdc:	4b83      	ldr	r3, [pc, #524]	; (8003eec <TIM2_IRQHandler+0xd6c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11a      	bne.n	8003d1a <TIM2_IRQHandler+0xb9a>
 8003ce4:	4b82      	ldr	r3, [pc, #520]	; (8003ef0 <TIM2_IRQHandler+0xd70>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d116      	bne.n	8003d1a <TIM2_IRQHandler+0xb9a>
 8003cec:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <TIM2_IRQHandler+0xd74>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d112      	bne.n	8003d1a <TIM2_IRQHandler+0xb9a>
 8003cf4:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d10e      	bne.n	8003d1a <TIM2_IRQHandler+0xb9a>
  {
	  GyroCalibStatus=1;
 8003cfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ef4 <TIM2_IRQHandler+0xd74>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
	  SUMGyroX=0;
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <TIM2_IRQHandler+0xd78>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
	  SUMGyroY=0;
 8003d08:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <TIM2_IRQHandler+0xd7c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
	  SUMGyroZ=0;
 8003d0e:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <TIM2_IRQHandler+0xd80>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
	  Gyrocalibcount=0;
 8003d14:	4b7b      	ldr	r3, [pc, #492]	; (8003f04 <TIM2_IRQHandler+0xd84>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
  }
  if(GyroCalibStatus==1)
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <TIM2_IRQHandler+0xd74>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d150      	bne.n	8003dc4 <TIM2_IRQHandler+0xc44>
  {
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8003d22:	4b79      	ldr	r3, [pc, #484]	; (8003f08 <TIM2_IRQHandler+0xd88>)
 8003d24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b73      	ldr	r3, [pc, #460]	; (8003ef8 <TIM2_IRQHandler+0xd78>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	4a71      	ldr	r2, [pc, #452]	; (8003ef8 <TIM2_IRQHandler+0xd78>)
 8003d32:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 8003d34:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <TIM2_IRQHandler+0xd88>)
 8003d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <TIM2_IRQHandler+0xd7c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <TIM2_IRQHandler+0xd7c>)
 8003d44:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <TIM2_IRQHandler+0xd88>)
 8003d48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <TIM2_IRQHandler+0xd80>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	4a6a      	ldr	r2, [pc, #424]	; (8003f00 <TIM2_IRQHandler+0xd80>)
 8003d56:	6013      	str	r3, [r2, #0]
	  Gyrocalibcount++;
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <TIM2_IRQHandler+0xd84>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a69      	ldr	r2, [pc, #420]	; (8003f04 <TIM2_IRQHandler+0xd84>)
 8003d60:	6013      	str	r3, [r2, #0]

	  if(Gyrocalibcount==GYROCALIBVALUES)
 8003d62:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <TIM2_IRQHandler+0xd84>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d12b      	bne.n	8003dc4 <TIM2_IRQHandler+0xc44>
	  {

		  GyroXOff=SUMGyroX/GYROCALIBVALUES;
 8003d6c:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <TIM2_IRQHandler+0xd78>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a66      	ldr	r2, [pc, #408]	; (8003f0c <TIM2_IRQHandler+0xd8c>)
 8003d72:	fb82 1203 	smull	r1, r2, r2, r3
 8003d76:	1192      	asrs	r2, r2, #6
 8003d78:	17db      	asrs	r3, r3, #31
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <TIM2_IRQHandler+0xd90>)
 8003d80:	801a      	strh	r2, [r3, #0]
		  GyroYOff=SUMGyroY/GYROCALIBVALUES;
 8003d82:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <TIM2_IRQHandler+0xd7c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a61      	ldr	r2, [pc, #388]	; (8003f0c <TIM2_IRQHandler+0xd8c>)
 8003d88:	fb82 1203 	smull	r1, r2, r2, r3
 8003d8c:	1192      	asrs	r2, r2, #6
 8003d8e:	17db      	asrs	r3, r3, #31
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <TIM2_IRQHandler+0xd94>)
 8003d96:	801a      	strh	r2, [r3, #0]
		  GyroZOff=SUMGyroZ/GYROCALIBVALUES;
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <TIM2_IRQHandler+0xd80>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5b      	ldr	r2, [pc, #364]	; (8003f0c <TIM2_IRQHandler+0xd8c>)
 8003d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8003da2:	1192      	asrs	r2, r2, #6
 8003da4:	17db      	asrs	r3, r3, #31
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <TIM2_IRQHandler+0xd98>)
 8003dac:	801a      	strh	r2, [r3, #0]

		  //startup angles Accel to Gyro transfer
		  AnglePitchGyro=AnglePitchAccel;
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <TIM2_IRQHandler+0xd9c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a5b      	ldr	r2, [pc, #364]	; (8003f20 <TIM2_IRQHandler+0xda0>)
 8003db4:	6013      	str	r3, [r2, #0]
		  AngleRollGyro=AngleRollAccel;
 8003db6:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <TIM2_IRQHandler+0xda4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5b      	ldr	r2, [pc, #364]	; (8003f28 <TIM2_IRQHandler+0xda8>)
 8003dbc:	6013      	str	r3, [r2, #0]

		  GyroCalibStatus=0;
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <TIM2_IRQHandler+0xd74>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
	  }
  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 8003dc4:	4b44      	ldr	r3, [pc, #272]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d10e      	bne.n	8003dea <TIM2_IRQHandler+0xc6a>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <TIM2_IRQHandler+0xd9c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a53      	ldr	r2, [pc, #332]	; (8003f20 <TIM2_IRQHandler+0xda0>)
 8003dd2:	6013      	str	r3, [r2, #0]
	  AngleRollGyro=AngleRollAccel;
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <TIM2_IRQHandler+0xda4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a53      	ldr	r2, [pc, #332]	; (8003f28 <TIM2_IRQHandler+0xda8>)
 8003dda:	6013      	str	r3, [r2, #0]

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 8003ddc:	4b45      	ldr	r3, [pc, #276]	; (8003ef4 <TIM2_IRQHandler+0xd74>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <TIM2_IRQHandler+0xc6a>
	  MotorStatus=MOTORRUNNING;
 8003de4:	4b3c      	ldr	r3, [pc, #240]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003de6:	2203      	movs	r2, #3
 8003de8:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <TIM2_IRQHandler+0xd58>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	f040 8103 	bne.w	8003ffa <TIM2_IRQHandler+0xe7a>
  {
  	  case MOTORRUNNING:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - pid_output_pitch - pid_output_roll /*+ pid_output_yaw*/;
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <TIM2_IRQHandler+0xd64>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	494c      	ldr	r1, [pc, #304]	; (8003f2c <TIM2_IRQHandler+0xdac>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fe9a 	bl	8000b34 <__addsf3>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <TIM2_IRQHandler+0xdb0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fc fe90 	bl	8000b30 <__aeabi_fsub>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <TIM2_IRQHandler+0xdb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fc fe88 	bl	8000b30 <__aeabi_fsub>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd f954 	bl	80010d0 <__aeabi_f2uiz>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <TIM2_IRQHandler+0xdb8>)
 8003e2c:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - pid_output_pitch + pid_output_roll /*- pid_output_yaw*/;
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <TIM2_IRQHandler+0xd64>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	493e      	ldr	r1, [pc, #248]	; (8003f2c <TIM2_IRQHandler+0xdac>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fc fe7d 	bl	8000b34 <__addsf3>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <TIM2_IRQHandler+0xdb0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fc fe73 	bl	8000b30 <__aeabi_fsub>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <TIM2_IRQHandler+0xdb4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fc fe6d 	bl	8000b34 <__addsf3>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd f937 	bl	80010d0 <__aeabi_f2uiz>
 8003e62:	4602      	mov	r2, r0
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <TIM2_IRQHandler+0xdbc>)
 8003e66:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + pid_output_pitch + pid_output_roll /*+ pid_output_yaw*/;
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <TIM2_IRQHandler+0xd64>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	492f      	ldr	r1, [pc, #188]	; (8003f2c <TIM2_IRQHandler+0xdac>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fe60 	bl	8000b34 <__addsf3>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <TIM2_IRQHandler+0xdb0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f7fc fe58 	bl	8000b34 <__addsf3>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <TIM2_IRQHandler+0xdb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fc fe50 	bl	8000b34 <__addsf3>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f91a 	bl	80010d0 <__aeabi_f2uiz>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <TIM2_IRQHandler+0xdc0>)
 8003ea0:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + pid_output_pitch - pid_output_roll /*- pid_output_yaw*/;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <TIM2_IRQHandler+0xd64>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4921      	ldr	r1, [pc, #132]	; (8003f2c <TIM2_IRQHandler+0xdac>)
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fe43 	bl	8000b34 <__addsf3>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <TIM2_IRQHandler+0xdb0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fc fe3b 	bl	8000b34 <__addsf3>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	e040      	b.n	8003f44 <TIM2_IRQHandler+0xdc4>
 8003ec2:	bf00      	nop
 8003ec4:	20000510 	.word	0x20000510
 8003ec8:	20000268 	.word	0x20000268
 8003ecc:	20000264 	.word	0x20000264
 8003ed0:	20000250 	.word	0x20000250
 8003ed4:	20000710 	.word	0x20000710
 8003ed8:	2000020c 	.word	0x2000020c
 8003edc:	20000730 	.word	0x20000730
 8003ee0:	200004b8 	.word	0x200004b8
 8003ee4:	2000022c 	.word	0x2000022c
 8003ee8:	43480000 	.word	0x43480000
 8003eec:	20000704 	.word	0x20000704
 8003ef0:	200005f0 	.word	0x200005f0
 8003ef4:	20000210 	.word	0x20000210
 8003ef8:	200005f4 	.word	0x200005f4
 8003efc:	200004bc 	.word	0x200004bc
 8003f00:	2000041c 	.word	0x2000041c
 8003f04:	20000228 	.word	0x20000228
 8003f08:	20000594 	.word	0x20000594
 8003f0c:	10624dd3 	.word	0x10624dd3
 8003f10:	20000354 	.word	0x20000354
 8003f14:	20000418 	.word	0x20000418
 8003f18:	2000027e 	.word	0x2000027e
 8003f1c:	20000700 	.word	0x20000700
 8003f20:	200006fc 	.word	0x200006fc
 8003f24:	200006ec 	.word	0x200006ec
 8003f28:	20000604 	.word	0x20000604
 8003f2c:	447a0000 	.word	0x447a0000
 8003f30:	20000248 	.word	0x20000248
 8003f34:	2000024c 	.word	0x2000024c
 8003f38:	2000070c 	.word	0x2000070c
 8003f3c:	2000060c 	.word	0x2000060c
 8003f40:	20000608 	.word	0x20000608
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <TIM2_IRQHandler+0xf0c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7fc fdef 	bl	8000b30 <__aeabi_fsub>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd f8bb 	bl	80010d0 <__aeabi_f2uiz>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8003f5e:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ MINTRHOTTLE))PWM_Mot1=(1000+ MINTRHOTTLE);
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003f68:	d203      	bcs.n	8003f72 <TIM2_IRQHandler+0xdf2>
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8003f6c:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003f70:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ MINTRHOTTLE))PWM_Mot2=(1000+ MINTRHOTTLE);
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <TIM2_IRQHandler+0xf18>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003f7a:	d203      	bcs.n	8003f84 <TIM2_IRQHandler+0xe04>
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <TIM2_IRQHandler+0xf18>)
 8003f7e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003f82:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ MINTRHOTTLE))PWM_Mot3=(1000+ MINTRHOTTLE);
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <TIM2_IRQHandler+0xf1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003f8c:	d203      	bcs.n	8003f96 <TIM2_IRQHandler+0xe16>
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <TIM2_IRQHandler+0xf1c>)
 8003f90:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003f94:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ MINTRHOTTLE))PWM_Mot4=(1000+ MINTRHOTTLE);
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003f9e:	d203      	bcs.n	8003fa8 <TIM2_IRQHandler+0xe28>
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8003fa2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003fa6:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d903      	bls.n	8003fbc <TIM2_IRQHandler+0xe3c>
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8003fb6:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fba:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8003fbc:	4b36      	ldr	r3, [pc, #216]	; (8004098 <TIM2_IRQHandler+0xf18>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d903      	bls.n	8003fd0 <TIM2_IRQHandler+0xe50>
 8003fc8:	4b33      	ldr	r3, [pc, #204]	; (8004098 <TIM2_IRQHandler+0xf18>)
 8003fca:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fce:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <TIM2_IRQHandler+0xf1c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d903      	bls.n	8003fe4 <TIM2_IRQHandler+0xe64>
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	; (800409c <TIM2_IRQHandler+0xf1c>)
 8003fde:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fe2:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f240 729e 	movw	r2, #1950	; 0x79e
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d92d      	bls.n	800404c <TIM2_IRQHandler+0xecc>
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8003ff2:	f240 729e 	movw	r2, #1950	; 0x79e
 8003ff6:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 8003ff8:	e028      	b.n	800404c <TIM2_IRQHandler+0xecc>

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8003ffc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004000:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 8004002:	4b25      	ldr	r3, [pc, #148]	; (8004098 <TIM2_IRQHandler+0xf18>)
 8004004:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004008:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <TIM2_IRQHandler+0xf1c>)
 800400c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004010:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8004014:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004018:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <TIM2_IRQHandler+0xf20>)
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <TIM2_IRQHandler+0xf24>)
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <TIM2_IRQHandler+0xf28>)
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <TIM2_IRQHandler+0xf2c>)
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <TIM2_IRQHandler+0xf30>)
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <TIM2_IRQHandler+0xf34>)
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 800404a:	e000      	b.n	800404e <TIM2_IRQHandler+0xece>
  	  	  	  }break;
 800404c:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <TIM2_IRQHandler+0xf38>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <TIM2_IRQHandler+0xf14>)
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <TIM2_IRQHandler+0xf38>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <TIM2_IRQHandler+0xf18>)
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <TIM2_IRQHandler+0xf38>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0d      	ldr	r2, [pc, #52]	; (800409c <TIM2_IRQHandler+0xf1c>)
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <TIM2_IRQHandler+0xf38>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <TIM2_IRQHandler+0xf10>)
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800407c:	480f      	ldr	r0, [pc, #60]	; (80040bc <TIM2_IRQHandler+0xf3c>)
 800407e:	f001 faed 	bl	800565c <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	3704      	adds	r7, #4
 8004086:	46bd      	mov	sp, r7
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	2000024c 	.word	0x2000024c
 8004090:	200006f4 	.word	0x200006f4
 8004094:	2000070c 	.word	0x2000070c
 8004098:	2000060c 	.word	0x2000060c
 800409c:	20000608 	.word	0x20000608
 80040a0:	20000254 	.word	0x20000254
 80040a4:	20000258 	.word	0x20000258
 80040a8:	2000025c 	.word	0x2000025c
 80040ac:	20000260 	.word	0x20000260
 80040b0:	20000264 	.word	0x20000264
 80040b4:	20000268 	.word	0x20000268
 80040b8:	200004c0 	.word	0x200004c0
 80040bc:	40010c00 	.word	0x40010c00

080040c0 <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d2:	f7fc fd2d 	bl	8000b30 <__aeabi_fsub>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461c      	mov	r4, r3
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc fd27 	bl	8000b30 <__aeabi_fsub>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4619      	mov	r1, r3
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7fc fee0 	bl	8000eac <__aeabi_fdiv>
 80040ec:	4603      	mov	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7fc fd1c 	bl	8000b30 <__aeabi_fsub>
 80040f8:	4603      	mov	r3, r0
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fe21 	bl	8000d44 <__aeabi_fmul>
 8004102:	4603      	mov	r3, r0
 8004104:	4619      	mov	r1, r3
 8004106:	6838      	ldr	r0, [r7, #0]
 8004108:	f7fc fd14 	bl	8000b34 <__addsf3>
 800410c:	4603      	mov	r3, r0
 800410e:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7fc ffb4 	bl	8001080 <__aeabi_fcmplt>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <ScaleDataFl+0x62>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	617b      	str	r3, [r7, #20]

	return out;
 8004122:	697b      	ldr	r3, [r7, #20]

}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd90      	pop	{r4, r7, pc}

0800412c <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	68b8      	ldr	r0, [r7, #8]
 800413e:	f7fc fcf7 	bl	8000b30 <__aeabi_fsub>
 8004142:	4603      	mov	r3, r0
 8004144:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	681c      	ldr	r4, [r3, #0]
 800414a:	6939      	ldr	r1, [r7, #16]
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f7fc fdf9 	bl	8000d44 <__aeabi_fmul>
 8004152:	4603      	mov	r3, r0
 8004154:	4619      	mov	r1, r3
 8004156:	4620      	mov	r0, r4
 8004158:	f7fc fcec 	bl	8000b34 <__addsf3>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4619      	mov	r1, r3
 800416a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800416c:	f7fc ff88 	bl	8001080 <__aeabi_fcmplt>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <pid+0x52>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e010      	b.n	80041a0 <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7fc ff78 	bl	8001080 <__aeabi_fcmplt>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <pid+0x74>
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 80041a0:	6939      	ldr	r1, [r7, #16]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fdce 	bl	8000d44 <__aeabi_fmul>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7fc fcbe 	bl	8000b34 <__addsf3>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461c      	mov	r4, r3
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	6938      	ldr	r0, [r7, #16]
 80041c4:	f7fc fcb4 	bl	8000b30 <__aeabi_fsub>
 80041c8:	4603      	mov	r3, r0
 80041ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fdb9 	bl	8000d44 <__aeabi_fmul>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fc fcac 	bl	8000b34 <__addsf3>
 80041dc:	4603      	mov	r3, r0
 80041de:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 80041e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f7fc ff6a 	bl	80010bc <__aeabi_fcmpgt>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <pid+0xc8>
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e00d      	b.n	8004210 <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	4619      	mov	r1, r3
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7fc ff3f 	bl	8001080 <__aeabi_fcmplt>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <pid+0xe4>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800420e:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	601a      	str	r2, [r3, #0]


	return out;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <_sbrk+0x50>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <_sbrk+0x16>
		heap_end = &end;
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <_sbrk+0x50>)
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <_sbrk+0x54>)
 8004234:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <_sbrk+0x50>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <_sbrk+0x50>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	466a      	mov	r2, sp
 8004246:	4293      	cmp	r3, r2
 8004248:	d907      	bls.n	800425a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800424a:	f004 f871 	bl	8008330 <__errno>
 800424e:	4602      	mov	r2, r0
 8004250:	230c      	movs	r3, #12
 8004252:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004258:	e006      	b.n	8004268 <_sbrk+0x48>
	}

	heap_end += incr;
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <_sbrk+0x50>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	4a03      	ldr	r2, [pc, #12]	; (8004270 <_sbrk+0x50>)
 8004264:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	2000026c 	.word	0x2000026c
 8004274:	20000760 	.word	0x20000760

08004278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <SystemInit+0x5c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <SystemInit+0x5c>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <SystemInit+0x5c>)
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4911      	ldr	r1, [pc, #68]	; (80042d4 <SystemInit+0x5c>)
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <SystemInit+0x60>)
 8004290:	4013      	ands	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <SystemInit+0x5c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <SystemInit+0x5c>)
 800429a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <SystemInit+0x5c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <SystemInit+0x5c>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <SystemInit+0x5c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <SystemInit+0x5c>)
 80042b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80042ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <SystemInit+0x5c>)
 80042be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80042c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <SystemInit+0x64>)
 80042c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	40021000 	.word	0x40021000
 80042d8:	f8ff0000 	.word	0xf8ff0000
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80042e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80042e2:	e003      	b.n	80042ec <LoopCopyDataInit>

080042e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80042e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042ea:	3104      	adds	r1, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80042ec:	480a      	ldr	r0, [pc, #40]	; (8004318 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80042f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80042f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80042f4:	d3f6      	bcc.n	80042e4 <CopyDataInit>
  ldr r2, =_sbss
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80042f8:	e002      	b.n	8004300 <LoopFillZerobss>

080042fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80042fc:	f842 3b04 	str.w	r3, [r2], #4

08004300 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004302:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004304:	d3f9      	bcc.n	80042fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004306:	f7ff ffb7 	bl	8004278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800430a:	f004 f817 	bl	800833c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800430e:	f7fd f83f 	bl	8001390 <main>
  bx lr
 8004312:	4770      	bx	lr
  ldr r3, =_sidata
 8004314:	0800c140 	.word	0x0800c140
  ldr r0, =_sdata
 8004318:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800431c:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8004320:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8004324:	2000075c 	.word	0x2000075c

08004328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC1_2_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_Init+0x28>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_Init+0x28>)
 8004336:	f043 0310 	orr.w	r3, r3, #16
 800433a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433c:	2003      	movs	r0, #3
 800433e:	f000 fdf1 	bl	8004f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004342:	2002      	movs	r0, #2
 8004344:	f000 f808 	bl	8004358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004348:	f7fe fd2e 	bl	8002da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_InitTick+0x54>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_InitTick+0x58>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fe09 	bl	8004f8e <HAL_SYSTICK_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00e      	b.n	80043a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d80a      	bhi.n	80043a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004394:	f000 fdd1 	bl	8004f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004398:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <HAL_InitTick+0x5c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000004 	.word	0x20000004
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	20000008 	.word	0x20000008

080043b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_IncTick+0x1c>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_IncTick+0x20>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <HAL_IncTick+0x20>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	2000000c 	.word	0x2000000c
 80043d8:	20000734 	.word	0x20000734

080043dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return uwTick;
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <HAL_GetTick+0x10>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	20000734 	.word	0x20000734

080043f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff fff0 	bl	80043dc <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004408:	d005      	beq.n	8004416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_Delay+0x40>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004416:	bf00      	nop
 8004418:	f7ff ffe0 	bl	80043dc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d8f7      	bhi.n	8004418 <HAL_Delay+0x28>
  {
  }
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000000c 	.word	0x2000000c

08004434 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0be      	b.n	80045d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe fcca 	bl	8002e0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fbb1 	bl	8004be0 <ADC_ConversionStop_Disable>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 8099 	bne.w	80045c2 <HAL_ADC_Init+0x18e>
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8095 	bne.w	80045c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	f043 0202 	orr.w	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7b1b      	ldrb	r3, [r3, #12]
 80044ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80044bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d003      	beq.n	80044d6 <HAL_ADC_Init+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d102      	bne.n	80044dc <HAL_ADC_Init+0xa8>
 80044d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044da:	e000      	b.n	80044de <HAL_ADC_Init+0xaa>
 80044dc:	2300      	movs	r3, #0
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7d1b      	ldrb	r3, [r3, #20]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d119      	bne.n	8004520 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7b1b      	ldrb	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	035a      	lsls	r2, r3, #13
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e00b      	b.n	8004520 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_ADC_Init+0x1a8>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d003      	beq.n	800455a <HAL_ADC_Init+0x126>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d104      	bne.n	8004564 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	3b01      	subs	r3, #1
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	430a      	orrs	r2, r1
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_ADC_Init+0x1ac>)
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d10b      	bne.n	80045a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800459e:	e018      	b.n	80045d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f023 0312 	bic.w	r3, r3, #18
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80045c0:	e007      	b.n	80045d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffe1f7fd 	.word	0xffe1f7fd
 80045e0:	ff1f0efe 	.word	0xff1f0efe

080045e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_Start+0x1a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e098      	b.n	8004730 <HAL_ADC_Start+0x14c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa98 	bl	8004b3c <ADC_Enable>
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8087 	bne.w	8004726 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a41      	ldr	r2, [pc, #260]	; (8004738 <HAL_ADC_Start+0x154>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d105      	bne.n	8004642 <HAL_ADC_Start+0x5e>
 8004636:	4b41      	ldr	r3, [pc, #260]	; (800473c <HAL_ADC_Start+0x158>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d115      	bne.n	800466e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d026      	beq.n	80046aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004664:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800466c:	e01d      	b.n	80046aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2f      	ldr	r2, [pc, #188]	; (800473c <HAL_ADC_Start+0x158>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_ADC_Start+0xaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <HAL_ADC_Start+0x154>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <HAL_ADC_Start+0xc6>
 800468e:	4b2b      	ldr	r3, [pc, #172]	; (800473c <HAL_ADC_Start+0x158>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	f023 0206 	bic.w	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046c2:	e002      	b.n	80046ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0202 	mvn.w	r2, #2
 80046da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80046e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80046ea:	d113      	bne.n	8004714 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80046f0:	4a11      	ldr	r2, [pc, #68]	; (8004738 <HAL_ADC_Start+0x154>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d105      	bne.n	8004702 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_ADC_Start+0x158>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	e00c      	b.n	800472e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	e003      	b.n	800472e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40012800 	.word	0x40012800
 800473c:	40012400 	.word	0x40012400

08004740 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004756:	f7ff fe41 	bl	80043dc <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0c8      	b.n	8004914 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d12a      	bne.n	80047e6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800479a:	2b00      	cmp	r3, #0
 800479c:	d123      	bne.n	80047e6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800479e:	e01a      	b.n	80047d6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d016      	beq.n	80047d6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_ADC_PollForConversion+0x7e>
 80047ae:	f7ff fe15 	bl	80043dc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20b      	bcs.n	80047d6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f043 0204 	orr.w	r2, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e09e      	b.n	8004914 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0dd      	beq.n	80047a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80047e4:	e06c      	b.n	80048c0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <HAL_ADC_PollForConversion+0x1dc>)
 80047e8:	681c      	ldr	r4, [r3, #0]
 80047ea:	2002      	movs	r0, #2
 80047ec:	f002 fbc6 	bl	8006f7c <HAL_RCCEx_GetPeriphCLKFreq>
 80047f0:	4603      	mov	r3, r0
 80047f2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6919      	ldr	r1, [r3, #16]
 80047fc:	4b48      	ldr	r3, [pc, #288]	; (8004920 <HAL_ADC_PollForConversion+0x1e0>)
 80047fe:	400b      	ands	r3, r1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d118      	bne.n	8004836 <HAL_ADC_PollForConversion+0xf6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68d9      	ldr	r1, [r3, #12]
 800480a:	4b46      	ldr	r3, [pc, #280]	; (8004924 <HAL_ADC_PollForConversion+0x1e4>)
 800480c:	400b      	ands	r3, r1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d111      	bne.n	8004836 <HAL_ADC_PollForConversion+0xf6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6919      	ldr	r1, [r3, #16]
 8004818:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_ADC_PollForConversion+0x1e8>)
 800481a:	400b      	ands	r3, r1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d108      	bne.n	8004832 <HAL_ADC_PollForConversion+0xf2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68d9      	ldr	r1, [r3, #12]
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_ADC_PollForConversion+0x1ec>)
 8004828:	400b      	ands	r3, r1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_PollForConversion+0xf2>
 800482e:	2314      	movs	r3, #20
 8004830:	e020      	b.n	8004874 <HAL_ADC_PollForConversion+0x134>
 8004832:	2329      	movs	r3, #41	; 0x29
 8004834:	e01e      	b.n	8004874 <HAL_ADC_PollForConversion+0x134>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6919      	ldr	r1, [r3, #16]
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_ADC_PollForConversion+0x1e8>)
 800483e:	400b      	ands	r3, r1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_ADC_PollForConversion+0x112>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	4b38      	ldr	r3, [pc, #224]	; (800492c <HAL_ADC_PollForConversion+0x1ec>)
 800484c:	400b      	ands	r3, r1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <HAL_ADC_PollForConversion+0x12e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6919      	ldr	r1, [r3, #16]
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <HAL_ADC_PollForConversion+0x1f0>)
 800485a:	400b      	ands	r3, r1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d108      	bne.n	8004872 <HAL_ADC_PollForConversion+0x132>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	4b32      	ldr	r3, [pc, #200]	; (8004930 <HAL_ADC_PollForConversion+0x1f0>)
 8004868:	400b      	ands	r3, r1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_PollForConversion+0x132>
 800486e:	2354      	movs	r3, #84	; 0x54
 8004870:	e000      	b.n	8004874 <HAL_ADC_PollForConversion+0x134>
 8004872:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800487a:	e01d      	b.n	80048b8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d016      	beq.n	80048b2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_ADC_PollForConversion+0x15a>
 800488a:	f7ff fda7 	bl	80043dc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20b      	bcs.n	80048b2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e030      	b.n	8004914 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d8dd      	bhi.n	800487c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0212 	mvn.w	r2, #18
 80048c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80048e4:	d115      	bne.n	8004912 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d111      	bne.n	8004912 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	20000004 	.word	0x20000004
 8004920:	24924924 	.word	0x24924924
 8004924:	00924924 	.word	0x00924924
 8004928:	12492492 	.word	0x12492492
 800492c:	00492492 	.word	0x00492492
 8004930:	00249249 	.word	0x00249249

08004934 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x20>
 8004968:	2302      	movs	r3, #2
 800496a:	e0dc      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x1da>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d81c      	bhi.n	80049b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	3b05      	subs	r3, #5
 800498e:	221f      	movs	r2, #31
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	4019      	ands	r1, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	3b05      	subs	r3, #5
 80049a8:	fa00 f203 	lsl.w	r2, r0, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	635a      	str	r2, [r3, #52]	; 0x34
 80049b4:	e03c      	b.n	8004a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d81c      	bhi.n	80049f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	3b23      	subs	r3, #35	; 0x23
 80049d0:	221f      	movs	r2, #31
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	4019      	ands	r1, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	3b23      	subs	r3, #35	; 0x23
 80049ea:	fa00 f203 	lsl.w	r2, r0, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
 80049f6:	e01b      	b.n	8004a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	3b41      	subs	r3, #65	; 0x41
 8004a0a:	221f      	movs	r2, #31
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	4019      	ands	r1, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	3b41      	subs	r3, #65	; 0x41
 8004a24:	fa00 f203 	lsl.w	r2, r0, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b09      	cmp	r3, #9
 8004a36:	d91c      	bls.n	8004a72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68d9      	ldr	r1, [r3, #12]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4413      	add	r3, r2
 8004a48:	3b1e      	subs	r3, #30
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	4019      	ands	r1, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6898      	ldr	r0, [r3, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	3b1e      	subs	r3, #30
 8004a64:	fa00 f203 	lsl.w	r2, r0, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e019      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6919      	ldr	r1, [r3, #16]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	2207      	movs	r2, #7
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	4019      	ands	r1, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6898      	ldr	r0, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d003      	beq.n	8004ab6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ab2:	2b11      	cmp	r3, #17
 8004ab4:	d132      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_ADC_ConfigChannel+0x1e4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d125      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d126      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004adc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d11a      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_ADC_ConfigChannel+0x1e8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <HAL_ADC_ConfigChannel+0x1ec>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9a      	lsrs	r2, r3, #18
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004afc:	e002      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f9      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x1b2>
 8004b0a:	e007      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	40012400 	.word	0x40012400
 8004b34:	20000004 	.word	0x20000004
 8004b38:	431bde83 	.word	0x431bde83

08004b3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d039      	beq.n	8004bce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <ADC_Enable+0x9c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <ADC_Enable+0xa0>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	0c9b      	lsrs	r3, r3, #18
 8004b76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b78:	e002      	b.n	8004b80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f9      	bne.n	8004b7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b86:	f7ff fc29 	bl	80043dc <HAL_GetTick>
 8004b8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004b8c:	e018      	b.n	8004bc0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b8e:	f7ff fc25 	bl	80043dc <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d911      	bls.n	8004bc0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f043 0210 	orr.w	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d1df      	bne.n	8004b8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000004 	.word	0x20000004
 8004bdc:	431bde83 	.word	0x431bde83

08004be0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d127      	bne.n	8004c4a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c0a:	f7ff fbe7 	bl	80043dc <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c10:	e014      	b.n	8004c3c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c12:	f7ff fbe3 	bl	80043dc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d90d      	bls.n	8004c3c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	f043 0210 	orr.w	r2, r3, #16
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d0e3      	beq.n	8004c12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADCEx_Calibration_Start+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e086      	b.n	8004d80 <HAL_ADCEx_Calibration_Start+0x12c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ffb0 	bl	8004be0 <ADC_ConversionStop_Disable>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d175      	bne.n	8004d76 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c92:	f023 0302 	bic.w	r3, r3, #2
 8004c96:	f043 0202 	orr.w	r2, r3, #2
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	; (8004d88 <HAL_ADCEx_Calibration_Start+0x134>)
 8004ca0:	681c      	ldr	r4, [r3, #0]
 8004ca2:	2002      	movs	r0, #2
 8004ca4:	f002 f96a 	bl	8006f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004cae:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004cb0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004cb2:	e002      	b.n	8004cba <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff3b 	bl	8004b3c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004cd6:	f7ff fb81 	bl	80043dc <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004cdc:	e014      	b.n	8004d08 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004cde:	f7ff fb7d 	bl	80043dc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b0a      	cmp	r3, #10
 8004cea:	d90d      	bls.n	8004d08 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f023 0312 	bic.w	r3, r3, #18
 8004cf4:	f043 0210 	orr.w	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e03b      	b.n	8004d80 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0204 	orr.w	r2, r2, #4
 8004d24:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004d26:	f7ff fb59 	bl	80043dc <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004d2c:	e014      	b.n	8004d58 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004d2e:	f7ff fb55 	bl	80043dc <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b0a      	cmp	r3, #10
 8004d3a:	d90d      	bls.n	8004d58 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f023 0312 	bic.w	r3, r3, #18
 8004d44:	f043 0210 	orr.w	r2, r3, #16
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e013      	b.n	8004d80 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	20000004 	.word	0x20000004

08004d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004da8:	4013      	ands	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	60d3      	str	r3, [r2, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <__NVIC_GetPriorityGrouping+0x18>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 0307 	and.w	r3, r3, #7
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db0b      	blt.n	8004e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4906      	ldr	r1, [pc, #24]	; (8004e24 <__NVIC_EnableIRQ+0x34>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2001      	movs	r0, #1
 8004e12:	fa00 f202 	lsl.w	r2, r0, r2
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db0a      	blt.n	8004e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <__NVIC_SetPriority+0x4c>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e50:	e00a      	b.n	8004e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <__NVIC_SetPriority+0x50>)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	761a      	strb	r2, [r3, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	e000e100 	.word	0xe000e100
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f1c3 0307 	rsb	r3, r3, #7
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	bf28      	it	cs
 8004e9a:	2304      	movcs	r3, #4
 8004e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d902      	bls.n	8004eac <NVIC_EncodePriority+0x30>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3b03      	subs	r3, #3
 8004eaa:	e000      	b.n	8004eae <NVIC_EncodePriority+0x32>
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	4313      	orrs	r3, r2
         );
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef0:	d301      	bcc.n	8004ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00f      	b.n	8004f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <SysTick_Config+0x40>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004efe:	210f      	movs	r1, #15
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f04:	f7ff ff90 	bl	8004e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <SysTick_Config+0x40>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <SysTick_Config+0x40>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010

08004f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff2d 	bl	8004d8c <__NVIC_SetPriorityGrouping>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f4c:	f7ff ff42 	bl	8004dd4 <__NVIC_GetPriorityGrouping>
 8004f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f7ff ff90 	bl	8004e7c <NVIC_EncodePriority>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff5f 	bl	8004e28 <__NVIC_SetPriority>
}
 8004f6a:	bf00      	nop
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff35 	bl	8004df0 <__NVIC_EnableIRQ>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ffa2 	bl	8004ee0 <SysTick_Config>
 8004f9c:	4603      	mov	r3, r0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_FLASH_Program+0xd8>)
 8004fc4:	7e1b      	ldrb	r3, [r3, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_FLASH_Program+0x26>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e054      	b.n	8005078 <HAL_FLASH_Program+0xd0>
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_FLASH_Program+0xd8>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fd8:	f000 f8a8 	bl	800512c <FLASH_WaitForLastOperation>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d144      	bne.n	8005070 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d102      	bne.n	8004ff2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	757b      	strb	r3, [r7, #21]
 8004ff0:	e007      	b.n	8005002 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d102      	bne.n	8004ffe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	757b      	strb	r3, [r7, #21]
 8004ffc:	e001      	b.n	8005002 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004ffe:	2304      	movs	r3, #4
 8005000:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005002:	2300      	movs	r3, #0
 8005004:	75bb      	strb	r3, [r7, #22]
 8005006:	e02d      	b.n	8005064 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005008:	7dbb      	ldrb	r3, [r7, #22]
 800500a:	005a      	lsls	r2, r3, #1
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	eb02 0c03 	add.w	ip, r2, r3
 8005012:	7dbb      	ldrb	r3, [r7, #22]
 8005014:	0119      	lsls	r1, r3, #4
 8005016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800501a:	f1c1 0620 	rsb	r6, r1, #32
 800501e:	f1a1 0020 	sub.w	r0, r1, #32
 8005022:	fa22 f401 	lsr.w	r4, r2, r1
 8005026:	fa03 f606 	lsl.w	r6, r3, r6
 800502a:	4334      	orrs	r4, r6
 800502c:	fa23 f000 	lsr.w	r0, r3, r0
 8005030:	4304      	orrs	r4, r0
 8005032:	fa23 f501 	lsr.w	r5, r3, r1
 8005036:	b2a3      	uxth	r3, r4
 8005038:	4619      	mov	r1, r3
 800503a:	4660      	mov	r0, ip
 800503c:	f000 f85a 	bl	80050f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005040:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005044:	f000 f872 	bl	800512c <FLASH_WaitForLastOperation>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_FLASH_Program+0xdc>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <HAL_FLASH_Program+0xdc>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800505e:	7dbb      	ldrb	r3, [r7, #22]
 8005060:	3301      	adds	r3, #1
 8005062:	75bb      	strb	r3, [r7, #22]
 8005064:	7dba      	ldrb	r2, [r7, #22]
 8005066:	7d7b      	ldrb	r3, [r7, #21]
 8005068:	429a      	cmp	r2, r3
 800506a:	d3cd      	bcc.n	8005008 <HAL_FLASH_Program+0x60>
 800506c:	e000      	b.n	8005070 <HAL_FLASH_Program+0xc8>
      {
        break;
 800506e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_FLASH_Program+0xd8>)
 8005072:	2200      	movs	r2, #0
 8005074:	761a      	strb	r2, [r3, #24]

  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005080:	20000738 	.word	0x20000738
 8005084:	40022000 	.word	0x40022000

08005088 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_FLASH_Unlock+0x40>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_FLASH_Unlock+0x40>)
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <HAL_FLASH_Unlock+0x44>)
 80050a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_FLASH_Unlock+0x40>)
 80050a6:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <HAL_FLASH_Unlock+0x48>)
 80050a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_FLASH_Unlock+0x40>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80050ba:	79fb      	ldrb	r3, [r7, #7]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40022000 	.word	0x40022000
 80050cc:	45670123 	.word	0x45670123
 80050d0:	cdef89ab 	.word	0xcdef89ab

080050d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_FLASH_Lock+0x1c>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <HAL_FLASH_Lock+0x1c>)
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40022000 	.word	0x40022000

080050f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <FLASH_Program_HalfWord+0x30>)
 8005102:	2200      	movs	r2, #0
 8005104:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <FLASH_Program_HalfWord+0x34>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <FLASH_Program_HalfWord+0x34>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	801a      	strh	r2, [r3, #0]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000738 	.word	0x20000738
 8005128:	40022000 	.word	0x40022000

0800512c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7ff f952 	bl	80043dc <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800513a:	e010      	b.n	800515e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005142:	d00c      	beq.n	800515e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <FLASH_WaitForLastOperation+0x2e>
 800514a:	f7ff f947 	bl	80043dc <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d201      	bcs.n	800515e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e025      	b.n	80051aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e8      	bne.n	800513c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 8005178:	2220      	movs	r2, #32
 800517a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <FLASH_WaitForLastOperation+0x88>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80051a0:	f000 f80a 	bl	80051b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40022000 	.word	0x40022000

080051b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <FLASH_SetErrorCode+0x98>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f043 0302 	orr.w	r3, r3, #2
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 80051d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f043 0310 	orr.w	r3, r3, #16
 80051e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <FLASH_SetErrorCode+0x98>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 80051f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <FLASH_SetErrorCode+0x98>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f043 0304 	orr.w	r3, r3, #4
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <FLASH_SetErrorCode+0x9c>)
 8005218:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <FLASH_SetErrorCode+0x98>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <FLASH_SetErrorCode+0x98>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f240 1201 	movw	r2, #257	; 0x101
 800522c:	4293      	cmp	r3, r2
 800522e:	d106      	bne.n	800523e <FLASH_SetErrorCode+0x86>
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <FLASH_SetErrorCode+0x98>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	4a06      	ldr	r2, [pc, #24]	; (8005250 <FLASH_SetErrorCode+0x98>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	61d3      	str	r3, [r2, #28]
}  
 800523c:	e002      	b.n	8005244 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <FLASH_SetErrorCode+0x98>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60d3      	str	r3, [r2, #12]
}  
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40022000 	.word	0x40022000
 8005254:	20000738 	.word	0x20000738

08005258 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800526a:	4b2f      	ldr	r3, [pc, #188]	; (8005328 <HAL_FLASHEx_Erase+0xd0>)
 800526c:	7e1b      	ldrb	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_FLASHEx_Erase+0x1e>
 8005272:	2302      	movs	r3, #2
 8005274:	e053      	b.n	800531e <HAL_FLASHEx_Erase+0xc6>
 8005276:	4b2c      	ldr	r3, [pc, #176]	; (8005328 <HAL_FLASHEx_Erase+0xd0>)
 8005278:	2201      	movs	r2, #1
 800527a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d116      	bne.n	80052b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005288:	f7ff ff50 	bl	800512c <FLASH_WaitForLastOperation>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d141      	bne.n	8005316 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005292:	2001      	movs	r0, #1
 8005294:	f000 f84c 	bl	8005330 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800529c:	f7ff ff46 	bl	800512c <FLASH_WaitForLastOperation>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80052a4:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_FLASHEx_Erase+0xd4>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	4a20      	ldr	r2, [pc, #128]	; (800532c <HAL_FLASHEx_Erase+0xd4>)
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	6113      	str	r3, [r2, #16]
 80052b0:	e031      	b.n	8005316 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80052b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052b6:	f7ff ff39 	bl	800512c <FLASH_WaitForLastOperation>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d12a      	bne.n	8005316 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	e019      	b.n	8005304 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f000 f849 	bl	8005368 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052da:	f7ff ff27 	bl	800512c <FLASH_WaitForLastOperation>
 80052de:	4603      	mov	r3, r0
 80052e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_FLASHEx_Erase+0xd4>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4a11      	ldr	r2, [pc, #68]	; (800532c <HAL_FLASHEx_Erase+0xd4>)
 80052e8:	f023 0302 	bic.w	r3, r3, #2
 80052ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	601a      	str	r2, [r3, #0]
            break;
 80052fa:	e00c      	b.n	8005316 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	029a      	lsls	r2, r3, #10
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3dc      	bcc.n	80052d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005316:	4b04      	ldr	r3, [pc, #16]	; (8005328 <HAL_FLASHEx_Erase+0xd0>)
 8005318:	2200      	movs	r2, #0
 800531a:	761a      	strb	r2, [r3, #24]

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000738 	.word	0x20000738
 800532c:	40022000 	.word	0x40022000

08005330 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <FLASH_MassErase+0x30>)
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <FLASH_MassErase+0x34>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	4a08      	ldr	r2, [pc, #32]	; (8005364 <FLASH_MassErase+0x34>)
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <FLASH_MassErase+0x34>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	4a05      	ldr	r2, [pc, #20]	; (8005364 <FLASH_MassErase+0x34>)
 8005350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005354:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	20000738 	.word	0x20000738
 8005364:	40022000 	.word	0x40022000

08005368 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <FLASH_PageErase+0x38>)
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <FLASH_PageErase+0x3c>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <FLASH_PageErase+0x3c>)
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <FLASH_PageErase+0x3c>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <FLASH_PageErase+0x3c>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <FLASH_PageErase+0x3c>)
 800538e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005392:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000738 	.word	0x20000738
 80053a4:	40022000 	.word	0x40022000

080053a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b08b      	sub	sp, #44	; 0x2c
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ba:	e127      	b.n	800560c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80053bc:	2201      	movs	r2, #1
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	f040 8116 	bne.w	8005606 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b12      	cmp	r3, #18
 80053e0:	d034      	beq.n	800544c <HAL_GPIO_Init+0xa4>
 80053e2:	2b12      	cmp	r3, #18
 80053e4:	d80d      	bhi.n	8005402 <HAL_GPIO_Init+0x5a>
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d02b      	beq.n	8005442 <HAL_GPIO_Init+0x9a>
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d804      	bhi.n	80053f8 <HAL_GPIO_Init+0x50>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d031      	beq.n	8005456 <HAL_GPIO_Init+0xae>
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d01c      	beq.n	8005430 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053f6:	e048      	b.n	800548a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d043      	beq.n	8005484 <HAL_GPIO_Init+0xdc>
 80053fc:	2b11      	cmp	r3, #17
 80053fe:	d01b      	beq.n	8005438 <HAL_GPIO_Init+0x90>
          break;
 8005400:	e043      	b.n	800548a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005402:	4a89      	ldr	r2, [pc, #548]	; (8005628 <HAL_GPIO_Init+0x280>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d026      	beq.n	8005456 <HAL_GPIO_Init+0xae>
 8005408:	4a87      	ldr	r2, [pc, #540]	; (8005628 <HAL_GPIO_Init+0x280>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d806      	bhi.n	800541c <HAL_GPIO_Init+0x74>
 800540e:	4a87      	ldr	r2, [pc, #540]	; (800562c <HAL_GPIO_Init+0x284>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d020      	beq.n	8005456 <HAL_GPIO_Init+0xae>
 8005414:	4a86      	ldr	r2, [pc, #536]	; (8005630 <HAL_GPIO_Init+0x288>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_GPIO_Init+0xae>
          break;
 800541a:	e036      	b.n	800548a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800541c:	4a85      	ldr	r2, [pc, #532]	; (8005634 <HAL_GPIO_Init+0x28c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d019      	beq.n	8005456 <HAL_GPIO_Init+0xae>
 8005422:	4a85      	ldr	r2, [pc, #532]	; (8005638 <HAL_GPIO_Init+0x290>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d016      	beq.n	8005456 <HAL_GPIO_Init+0xae>
 8005428:	4a84      	ldr	r2, [pc, #528]	; (800563c <HAL_GPIO_Init+0x294>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_GPIO_Init+0xae>
          break;
 800542e:	e02c      	b.n	800548a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	623b      	str	r3, [r7, #32]
          break;
 8005436:	e028      	b.n	800548a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	3304      	adds	r3, #4
 800543e:	623b      	str	r3, [r7, #32]
          break;
 8005440:	e023      	b.n	800548a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	3308      	adds	r3, #8
 8005448:	623b      	str	r3, [r7, #32]
          break;
 800544a:	e01e      	b.n	800548a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	330c      	adds	r3, #12
 8005452:	623b      	str	r3, [r7, #32]
          break;
 8005454:	e019      	b.n	800548a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800545e:	2304      	movs	r3, #4
 8005460:	623b      	str	r3, [r7, #32]
          break;
 8005462:	e012      	b.n	800548a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d105      	bne.n	8005478 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800546c:	2308      	movs	r3, #8
 800546e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	611a      	str	r2, [r3, #16]
          break;
 8005476:	e008      	b.n	800548a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005478:	2308      	movs	r3, #8
 800547a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	615a      	str	r2, [r3, #20]
          break;
 8005482:	e002      	b.n	800548a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
          break;
 8005488:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2bff      	cmp	r3, #255	; 0xff
 800548e:	d801      	bhi.n	8005494 <HAL_GPIO_Init+0xec>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	e001      	b.n	8005498 <HAL_GPIO_Init+0xf0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2bff      	cmp	r3, #255	; 0xff
 800549e:	d802      	bhi.n	80054a6 <HAL_GPIO_Init+0xfe>
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	e002      	b.n	80054ac <HAL_GPIO_Init+0x104>
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	3b08      	subs	r3, #8
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	210f      	movs	r1, #15
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	401a      	ands	r2, r3
 80054be:	6a39      	ldr	r1, [r7, #32]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
 80054c6:	431a      	orrs	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8096 	beq.w	8005606 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054da:	4b59      	ldr	r3, [pc, #356]	; (8005640 <HAL_GPIO_Init+0x298>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	4a58      	ldr	r2, [pc, #352]	; (8005640 <HAL_GPIO_Init+0x298>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	6193      	str	r3, [r2, #24]
 80054e6:	4b56      	ldr	r3, [pc, #344]	; (8005640 <HAL_GPIO_Init+0x298>)
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054f2:	4a54      	ldr	r2, [pc, #336]	; (8005644 <HAL_GPIO_Init+0x29c>)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	3302      	adds	r3, #2
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	220f      	movs	r2, #15
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a4b      	ldr	r2, [pc, #300]	; (8005648 <HAL_GPIO_Init+0x2a0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_GPIO_Init+0x19e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a4a      	ldr	r2, [pc, #296]	; (800564c <HAL_GPIO_Init+0x2a4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00d      	beq.n	8005542 <HAL_GPIO_Init+0x19a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a49      	ldr	r2, [pc, #292]	; (8005650 <HAL_GPIO_Init+0x2a8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <HAL_GPIO_Init+0x196>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a48      	ldr	r2, [pc, #288]	; (8005654 <HAL_GPIO_Init+0x2ac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <HAL_GPIO_Init+0x192>
 8005536:	2303      	movs	r3, #3
 8005538:	e006      	b.n	8005548 <HAL_GPIO_Init+0x1a0>
 800553a:	2304      	movs	r3, #4
 800553c:	e004      	b.n	8005548 <HAL_GPIO_Init+0x1a0>
 800553e:	2302      	movs	r3, #2
 8005540:	e002      	b.n	8005548 <HAL_GPIO_Init+0x1a0>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_GPIO_Init+0x1a0>
 8005546:	2300      	movs	r3, #0
 8005548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554a:	f002 0203 	and.w	r2, r2, #3
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	4093      	lsls	r3, r2
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005558:	493a      	ldr	r1, [pc, #232]	; (8005644 <HAL_GPIO_Init+0x29c>)
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005572:	4b39      	ldr	r3, [pc, #228]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4938      	ldr	r1, [pc, #224]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]
 800557e:	e006      	b.n	800558e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	43db      	mvns	r3, r3
 8005588:	4933      	ldr	r1, [pc, #204]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 800558a:	4013      	ands	r3, r2
 800558c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	492e      	ldr	r1, [pc, #184]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	604b      	str	r3, [r1, #4]
 80055a6:	e006      	b.n	80055b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	4929      	ldr	r1, [pc, #164]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4924      	ldr	r1, [pc, #144]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
 80055ce:	e006      	b.n	80055de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	491f      	ldr	r1, [pc, #124]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055da:	4013      	ands	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	491a      	ldr	r1, [pc, #104]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60cb      	str	r3, [r1, #12]
 80055f6:	e006      	b.n	8005606 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055f8:	4b17      	ldr	r3, [pc, #92]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	43db      	mvns	r3, r3
 8005600:	4915      	ldr	r1, [pc, #84]	; (8005658 <HAL_GPIO_Init+0x2b0>)
 8005602:	4013      	ands	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	3301      	adds	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f aed0 	bne.w	80053bc <HAL_GPIO_Init+0x14>
  }
}
 800561c:	bf00      	nop
 800561e:	372c      	adds	r7, #44	; 0x2c
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	10210000 	.word	0x10210000
 800562c:	10110000 	.word	0x10110000
 8005630:	10120000 	.word	0x10120000
 8005634:	10310000 	.word	0x10310000
 8005638:	10320000 	.word	0x10320000
 800563c:	10220000 	.word	0x10220000
 8005640:	40021000 	.word	0x40021000
 8005644:	40010000 	.word	0x40010000
 8005648:	40010800 	.word	0x40010800
 800564c:	40010c00 	.word	0x40010c00
 8005650:	40011000 	.word	0x40011000
 8005654:	40011400 	.word	0x40011400
 8005658:	40010400 	.word	0x40010400

0800565c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	807b      	strh	r3, [r7, #2]
 8005668:	4613      	mov	r3, r2
 800566a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800566c:	787b      	ldrb	r3, [r7, #1]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005678:	e003      	b.n	8005682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	041a      	lsls	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056a4:	887a      	ldrh	r2, [r7, #2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80056aa:	e002      	b.n	80056b2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	611a      	str	r2, [r3, #16]
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e10f      	b.n	80058ee <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fd fbce 	bl	8002e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005700:	f001 fb40 	bl	8006d84 <HAL_RCC_GetPCLK1Freq>
 8005704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4a7b      	ldr	r2, [pc, #492]	; (80058f8 <HAL_I2C_Init+0x23c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d807      	bhi.n	8005720 <HAL_I2C_Init+0x64>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a7a      	ldr	r2, [pc, #488]	; (80058fc <HAL_I2C_Init+0x240>)
 8005714:	4293      	cmp	r3, r2
 8005716:	bf94      	ite	ls
 8005718:	2301      	movls	r3, #1
 800571a:	2300      	movhi	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e006      	b.n	800572e <HAL_I2C_Init+0x72>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a77      	ldr	r2, [pc, #476]	; (8005900 <HAL_I2C_Init+0x244>)
 8005724:	4293      	cmp	r3, r2
 8005726:	bf94      	ite	ls
 8005728:	2301      	movls	r3, #1
 800572a:	2300      	movhi	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0db      	b.n	80058ee <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a72      	ldr	r2, [pc, #456]	; (8005904 <HAL_I2C_Init+0x248>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0c9b      	lsrs	r3, r3, #18
 8005740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a64      	ldr	r2, [pc, #400]	; (80058f8 <HAL_I2C_Init+0x23c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d802      	bhi.n	8005770 <HAL_I2C_Init+0xb4>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3301      	adds	r3, #1
 800576e:	e009      	b.n	8005784 <HAL_I2C_Init+0xc8>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	4a63      	ldr	r2, [pc, #396]	; (8005908 <HAL_I2C_Init+0x24c>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	3301      	adds	r3, #1
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	430b      	orrs	r3, r1
 800578a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4956      	ldr	r1, [pc, #344]	; (80058f8 <HAL_I2C_Init+0x23c>)
 80057a0:	428b      	cmp	r3, r1
 80057a2:	d80d      	bhi.n	80057c0 <HAL_I2C_Init+0x104>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1e59      	subs	r1, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b2:	3301      	adds	r3, #1
 80057b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	bf38      	it	cc
 80057bc:	2304      	movcc	r3, #4
 80057be:	e04f      	b.n	8005860 <HAL_I2C_Init+0x1a4>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_I2C_Init+0x130>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1e58      	subs	r0, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e012      	b.n	8005812 <HAL_I2C_Init+0x156>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1e58      	subs	r0, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	0099      	lsls	r1, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005802:	3301      	adds	r3, #1
 8005804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_Init+0x15e>
 8005816:	2301      	movs	r3, #1
 8005818:	e022      	b.n	8005860 <HAL_I2C_Init+0x1a4>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10e      	bne.n	8005840 <HAL_I2C_Init+0x184>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1e58      	subs	r0, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	440b      	add	r3, r1
 8005830:	fbb0 f3f3 	udiv	r3, r0, r3
 8005834:	3301      	adds	r3, #1
 8005836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583e:	e00f      	b.n	8005860 <HAL_I2C_Init+0x1a4>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1e58      	subs	r0, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	0099      	lsls	r1, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	fbb0 f3f3 	udiv	r3, r0, r3
 8005856:	3301      	adds	r3, #1
 8005858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	6809      	ldr	r1, [r1, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800588e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6911      	ldr	r1, [r2, #16]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	4311      	orrs	r1, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	000186a0 	.word	0x000186a0
 80058fc:	001e847f 	.word	0x001e847f
 8005900:	003d08ff 	.word	0x003d08ff
 8005904:	431bde83 	.word	0x431bde83
 8005908:	10624dd3 	.word	0x10624dd3

0800590c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	460b      	mov	r3, r1
 8005920:	813b      	strh	r3, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005926:	f7fe fd59 	bl	80043dc <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b20      	cmp	r3, #32
 8005936:	f040 80d9 	bne.w	8005aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2319      	movs	r3, #25
 8005940:	2201      	movs	r2, #1
 8005942:	496d      	ldr	r1, [pc, #436]	; (8005af8 <HAL_I2C_Mem_Write+0x1ec>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fc6b 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
 8005952:	e0cc      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_I2C_Mem_Write+0x56>
 800595e:	2302      	movs	r3, #2
 8005960:	e0c5      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d007      	beq.n	8005988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2221      	movs	r2, #33	; 0x21
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2240      	movs	r2, #64	; 0x40
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a4d      	ldr	r2, [pc, #308]	; (8005afc <HAL_I2C_Mem_Write+0x1f0>)
 80059c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ca:	88f8      	ldrh	r0, [r7, #6]
 80059cc:	893a      	ldrh	r2, [r7, #8]
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	4603      	mov	r3, r0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fac6 	bl	8005f6c <I2C_RequestMemoryWrite>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d052      	beq.n	8005a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e081      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fcec 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d107      	bne.n	8005a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e06b      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	781a      	ldrb	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d11b      	bne.n	8005a8c <HAL_I2C_Mem_Write+0x180>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1aa      	bne.n	80059ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fcd8 	bl	800644e <I2C_WaitOnBTFFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d107      	bne.n	8005abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e016      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	00100002 	.word	0x00100002
 8005afc:	ffff0000 	.word	0xffff0000

08005b00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	817b      	strh	r3, [r7, #10]
 8005b12:	460b      	mov	r3, r1
 8005b14:	813b      	strh	r3, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7fe fc5f 	bl	80043dc <HAL_GetTick>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f040 8218 	bne.w	8005f5e <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	2319      	movs	r3, #25
 8005b34:	2201      	movs	r2, #1
 8005b36:	4981      	ldr	r1, [pc, #516]	; (8005d3c <HAL_I2C_Mem_Read+0x23c>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fb71 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e20b      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_I2C_Mem_Read+0x56>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e204      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d007      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2222      	movs	r2, #34	; 0x22
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a61      	ldr	r2, [pc, #388]	; (8005d40 <HAL_I2C_Mem_Read+0x240>)
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bbe:	88f8      	ldrh	r0, [r7, #6]
 8005bc0:	893a      	ldrh	r2, [r7, #8]
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fa56 	bl	8006080 <I2C_RequestMemoryRead>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e1c0      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e194      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d11d      	bne.n	8005c52 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c26:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c4e:	b662      	cpsie	i
 8005c50:	e172      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d11d      	bne.n	8005c96 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c6a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c92:	b662      	cpsie	i
 8005c94:	e150      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ca4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cbc:	e13c      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	f200 80f5 	bhi.w	8005eb2 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d123      	bne.n	8005d18 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fbfb 	bl	80064d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e13d      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d16:	e10f      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d150      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2200      	movs	r2, #0
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <HAL_I2C_Mem_Read+0x244>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa78 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e112      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
 8005d3a:	bf00      	nop
 8005d3c:	00100002 	.word	0x00100002
 8005d40:	ffff0000 	.word	0xffff0000
 8005d44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005d48:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d58:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d8c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc0:	e0ba      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4967      	ldr	r1, [pc, #412]	; (8005f68 <HAL_I2C_Mem_Read+0x468>)
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fa27 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0c1      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dec:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2200      	movs	r2, #0
 8005e28:	494f      	ldr	r1, [pc, #316]	; (8005f68 <HAL_I2C_Mem_Read+0x468>)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9f8 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e092      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e48:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e7c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eb0:	e042      	b.n	8005f38 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fb0a 	bl	80064d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04c      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d118      	bne.n	8005f38 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f aebe 	bne.w	8005cbe <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	00010004 	.word	0x00010004

08005f6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	817b      	strh	r3, [r7, #10]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	813b      	strh	r3, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f93c 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e05f      	b.n	8006072 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fb2:	897b      	ldrh	r3, [r7, #10]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	492d      	ldr	r1, [pc, #180]	; (800607c <I2C_RequestMemoryWrite+0x110>)
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f980 	bl	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e04c      	b.n	8006072 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	6a39      	ldr	r1, [r7, #32]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f9ea 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b04      	cmp	r3, #4
 8006004:	d107      	bne.n	8006016 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e02b      	b.n	8006072 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	611a      	str	r2, [r3, #16]
 800602a:	e021      	b.n	8006070 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800602c:	893b      	ldrh	r3, [r7, #8]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	b29b      	uxth	r3, r3
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	6a39      	ldr	r1, [r7, #32]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f9c4 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b04      	cmp	r3, #4
 8006050:	d107      	bne.n	8006062 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e005      	b.n	8006072 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006066:	893b      	ldrh	r3, [r7, #8]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	00010002 	.word	0x00010002

08006080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f8aa 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e09e      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060d6:	897b      	ldrh	r3, [r7, #10]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	494c      	ldr	r1, [pc, #304]	; (800621c <I2C_RequestMemoryRead+0x19c>)
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f8ee 	bl	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e08b      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	6a39      	ldr	r1, [r7, #32]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f958 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00d      	beq.n	800613e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	2b04      	cmp	r3, #4
 8006128:	d107      	bne.n	800613a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e06a      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d105      	bne.n	8006150 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]
 800614e:	e021      	b.n	8006194 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006150:	893b      	ldrh	r3, [r7, #8]
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	b29b      	uxth	r3, r3
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006160:	6a39      	ldr	r1, [r7, #32]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f932 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b04      	cmp	r3, #4
 8006174:	d107      	bne.n	8006186 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e044      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800618a:	893b      	ldrh	r3, [r7, #8]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006196:	6a39      	ldr	r1, [r7, #32]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f917 	bl	80063cc <I2C_WaitOnTXEFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d107      	bne.n	80061bc <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e029      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f81f 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e013      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061ec:	897b      	ldrh	r3, [r7, #10]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	4906      	ldr	r1, [pc, #24]	; (800621c <I2C_RequestMemoryRead+0x19c>)
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f863 	bl	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	00010002 	.word	0x00010002

08006220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006230:	e025      	b.n	800627e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006238:	d021      	beq.n	800627e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fe f8cf 	bl	80043dc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d116      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e023      	b.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10d      	bne.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	43da      	mvns	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4013      	ands	r3, r2
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	e00c      	b.n	80062be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d0b6      	beq.n	8006232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062dc:	e051      	b.n	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ec:	d123      	bne.n	8006336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006306:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f043 0204 	orr.w	r2, r3, #4
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e046      	b.n	80063c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633c:	d021      	beq.n	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fe f84d 	bl	80043dc <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d116      	bne.n	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e020      	b.n	80063c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d10c      	bne.n	80063a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e00b      	b.n	80063be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	43da      	mvns	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d18d      	bne.n	80062de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063d8:	e02d      	b.n	8006436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f8ce 	bl	800657c <I2C_IsAcknowledgeFailed>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e02d      	b.n	8006446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f0:	d021      	beq.n	8006436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fd fff3 	bl	80043dc <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e007      	b.n	8006446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d1ca      	bne.n	80063da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800645a:	e02d      	b.n	80064b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f88d 	bl	800657c <I2C_IsAcknowledgeFailed>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e02d      	b.n	80064c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006472:	d021      	beq.n	80064b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006474:	f7fd ffb2 	bl	80043dc <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d116      	bne.n	80064b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e007      	b.n	80064c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d1ca      	bne.n	800645c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064dc:	e042      	b.n	8006564 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d119      	bne.n	8006520 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0210 	mvn.w	r2, #16
 80064f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e029      	b.n	8006574 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006520:	f7fd ff5c 	bl	80043dc <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d116      	bne.n	8006564 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d1b5      	bne.n	80064de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006592:	d11b      	bne.n	80065cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	f043 0204 	orr.w	r2, r3, #4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e26c      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8087 	beq.w	8006706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065f8:	4b92      	ldr	r3, [pc, #584]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 030c 	and.w	r3, r3, #12
 8006600:	2b04      	cmp	r3, #4
 8006602:	d00c      	beq.n	800661e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006604:	4b8f      	ldr	r3, [pc, #572]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 030c 	and.w	r3, r3, #12
 800660c:	2b08      	cmp	r3, #8
 800660e:	d112      	bne.n	8006636 <HAL_RCC_OscConfig+0x5e>
 8006610:	4b8c      	ldr	r3, [pc, #560]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661c:	d10b      	bne.n	8006636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661e:	4b89      	ldr	r3, [pc, #548]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06c      	beq.n	8006704 <HAL_RCC_OscConfig+0x12c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d168      	bne.n	8006704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e246      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663e:	d106      	bne.n	800664e <HAL_RCC_OscConfig+0x76>
 8006640:	4b80      	ldr	r3, [pc, #512]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7f      	ldr	r2, [pc, #508]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e02e      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0x98>
 8006656:	4b7b      	ldr	r3, [pc, #492]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a7a      	ldr	r2, [pc, #488]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800665c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b78      	ldr	r3, [pc, #480]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a77      	ldr	r2, [pc, #476]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e01d      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0xbc>
 800667a:	4b72      	ldr	r3, [pc, #456]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a71      	ldr	r2, [pc, #452]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b6f      	ldr	r3, [pc, #444]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6e      	ldr	r2, [pc, #440]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0xd4>
 8006694:	4b6b      	ldr	r3, [pc, #428]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a6a      	ldr	r2, [pc, #424]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b68      	ldr	r3, [pc, #416]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a67      	ldr	r2, [pc, #412]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d013      	beq.n	80066dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fd fe92 	bl	80043dc <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fd fe8e 	bl	80043dc <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	; 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e1fa      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	4b5d      	ldr	r3, [pc, #372]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0xe4>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fd fe7e 	bl	80043dc <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fd fe7a 	bl	80043dc <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	; 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e1e6      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066f6:	4b53      	ldr	r3, [pc, #332]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0x10c>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d063      	beq.n	80067da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006712:	4b4c      	ldr	r3, [pc, #304]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800671e:	4b49      	ldr	r3, [pc, #292]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f003 030c 	and.w	r3, r3, #12
 8006726:	2b08      	cmp	r3, #8
 8006728:	d11c      	bne.n	8006764 <HAL_RCC_OscConfig+0x18c>
 800672a:	4b46      	ldr	r3, [pc, #280]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d116      	bne.n	8006764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006736:	4b43      	ldr	r3, [pc, #268]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_RCC_OscConfig+0x176>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d001      	beq.n	800674e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e1ba      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674e:	4b3d      	ldr	r3, [pc, #244]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4939      	ldr	r1, [pc, #228]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006762:	e03a      	b.n	80067da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800676c:	4b36      	ldr	r3, [pc, #216]	; (8006848 <HAL_RCC_OscConfig+0x270>)
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006772:	f7fd fe33 	bl	80043dc <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677a:	f7fd fe2f 	bl	80043dc <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e19b      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678c:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006798:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4927      	ldr	r1, [pc, #156]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	e015      	b.n	80067da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ae:	4b26      	ldr	r3, [pc, #152]	; (8006848 <HAL_RCC_OscConfig+0x270>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b4:	f7fd fe12 	bl	80043dc <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067bc:	f7fd fe0e 	bl	80043dc <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e17a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ce:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03a      	beq.n	800685c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d019      	beq.n	8006822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ee:	4b17      	ldr	r3, [pc, #92]	; (800684c <HAL_RCC_OscConfig+0x274>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f4:	f7fd fdf2 	bl	80043dc <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067fc:	f7fd fdee 	bl	80043dc <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e15a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <HAL_RCC_OscConfig+0x26c>)
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800681a:	2001      	movs	r0, #1
 800681c:	f000 fada 	bl	8006dd4 <RCC_Delay>
 8006820:	e01c      	b.n	800685c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCC_OscConfig+0x274>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006828:	f7fd fdd8 	bl	80043dc <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800682e:	e00f      	b.n	8006850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006830:	f7fd fdd4 	bl	80043dc <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d908      	bls.n	8006850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e140      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
 8006842:	bf00      	nop
 8006844:	40021000 	.word	0x40021000
 8006848:	42420000 	.word	0x42420000
 800684c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006850:	4b9e      	ldr	r3, [pc, #632]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e9      	bne.n	8006830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a6 	beq.w	80069b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800686e:	4b97      	ldr	r3, [pc, #604]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	4b94      	ldr	r3, [pc, #592]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	4a93      	ldr	r2, [pc, #588]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	61d3      	str	r3, [r2, #28]
 8006886:	4b91      	ldr	r3, [pc, #580]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	60bb      	str	r3, [r7, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006896:	4b8e      	ldr	r3, [pc, #568]	; (8006ad0 <HAL_RCC_OscConfig+0x4f8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d118      	bne.n	80068d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068a2:	4b8b      	ldr	r3, [pc, #556]	; (8006ad0 <HAL_RCC_OscConfig+0x4f8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a8a      	ldr	r2, [pc, #552]	; (8006ad0 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ae:	f7fd fd95 	bl	80043dc <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b6:	f7fd fd91 	bl	80043dc <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b64      	cmp	r3, #100	; 0x64
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e0fd      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c8:	4b81      	ldr	r3, [pc, #516]	; (8006ad0 <HAL_RCC_OscConfig+0x4f8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0f0      	beq.n	80068b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d106      	bne.n	80068ea <HAL_RCC_OscConfig+0x312>
 80068dc:	4b7b      	ldr	r3, [pc, #492]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	4a7a      	ldr	r2, [pc, #488]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	6213      	str	r3, [r2, #32]
 80068e8:	e02d      	b.n	8006946 <HAL_RCC_OscConfig+0x36e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10c      	bne.n	800690c <HAL_RCC_OscConfig+0x334>
 80068f2:	4b76      	ldr	r3, [pc, #472]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	4a75      	ldr	r2, [pc, #468]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	6213      	str	r3, [r2, #32]
 80068fe:	4b73      	ldr	r3, [pc, #460]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4a72      	ldr	r2, [pc, #456]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	6213      	str	r3, [r2, #32]
 800690a:	e01c      	b.n	8006946 <HAL_RCC_OscConfig+0x36e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b05      	cmp	r3, #5
 8006912:	d10c      	bne.n	800692e <HAL_RCC_OscConfig+0x356>
 8006914:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	4a6c      	ldr	r2, [pc, #432]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	6213      	str	r3, [r2, #32]
 8006920:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	4a69      	ldr	r2, [pc, #420]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6213      	str	r3, [r2, #32]
 800692c:	e00b      	b.n	8006946 <HAL_RCC_OscConfig+0x36e>
 800692e:	4b67      	ldr	r3, [pc, #412]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	4a66      	ldr	r2, [pc, #408]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	6213      	str	r3, [r2, #32]
 800693a:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	4a63      	ldr	r2, [pc, #396]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d015      	beq.n	800697a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694e:	f7fd fd45 	bl	80043dc <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006954:	e00a      	b.n	800696c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006956:	f7fd fd41 	bl	80043dc <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e0ab      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696c:	4b57      	ldr	r3, [pc, #348]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ee      	beq.n	8006956 <HAL_RCC_OscConfig+0x37e>
 8006978:	e014      	b.n	80069a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697a:	f7fd fd2f 	bl	80043dc <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006980:	e00a      	b.n	8006998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006982:	f7fd fd2b 	bl	80043dc <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e095      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006998:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1ee      	bne.n	8006982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d105      	bne.n	80069b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069aa:	4b48      	ldr	r3, [pc, #288]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4a47      	ldr	r2, [pc, #284]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80069b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8081 	beq.w	8006ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c0:	4b42      	ldr	r3, [pc, #264]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d061      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d146      	bne.n	8006a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d4:	4b3f      	ldr	r3, [pc, #252]	; (8006ad4 <HAL_RCC_OscConfig+0x4fc>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069da:	f7fd fcff 	bl	80043dc <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e2:	f7fd fcfb 	bl	80043dc <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e067      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f4:	4b35      	ldr	r3, [pc, #212]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1f0      	bne.n	80069e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a08:	d108      	bne.n	8006a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a0a:	4b30      	ldr	r3, [pc, #192]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	492d      	ldr	r1, [pc, #180]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a1c:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a19      	ldr	r1, [r3, #32]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	4927      	ldr	r1, [pc, #156]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a34:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <HAL_RCC_OscConfig+0x4fc>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3a:	f7fd fccf 	bl	80043dc <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a42:	f7fd fccb 	bl	80043dc <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e037      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a54:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0f0      	beq.n	8006a42 <HAL_RCC_OscConfig+0x46a>
 8006a60:	e02f      	b.n	8006ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <HAL_RCC_OscConfig+0x4fc>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a68:	f7fd fcb8 	bl	80043dc <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a70:	f7fd fcb4 	bl	80043dc <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e020      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f0      	bne.n	8006a70 <HAL_RCC_OscConfig+0x498>
 8006a8e:	e018      	b.n	8006ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e013      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_OscConfig+0x4f4>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d106      	bne.n	8006abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42420060 	.word	0x42420060

08006ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d0      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aec:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d910      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 0207 	bic.w	r2, r3, #7
 8006b02:	4965      	ldr	r1, [pc, #404]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0b8      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d020      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4a52      	ldr	r2, [pc, #328]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b58:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	494d      	ldr	r1, [pc, #308]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e07f      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e073      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e06b      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4936      	ldr	r1, [pc, #216]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bc8:	f7fd fc08 	bl	80043dc <HAL_GetTick>
 8006bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd0:	f7fd fc04 	bl	80043dc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e053      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f003 020c 	and.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1eb      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d210      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 0207 	bic.w	r2, r3, #7
 8006c0e:	4922      	ldr	r1, [pc, #136]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_RCC_ClockConfig+0x1c0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e032      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4916      	ldr	r1, [pc, #88]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c66:	f000 f821 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_ClockConfig+0x1c4>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c78:	5cd3      	ldrb	r3, [r2, r3]
 8006c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fd fb66 	bl	8004358 <HAL_InitTick>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40022000 	.word	0x40022000
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	0800bcdc 	.word	0x0800bcdc
 8006ca4:	20000004 	.word	0x20000004
 8006ca8:	20000008 	.word	0x20000008

08006cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cac:	b490      	push	{r4, r7}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cb4:	1d3c      	adds	r4, r7, #4
 8006cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006cbc:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cd6:	4b23      	ldr	r3, [pc, #140]	; (8006d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d002      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0x40>
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x46>
 8006cea:	e02d      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cee:	623b      	str	r3, [r7, #32]
      break;
 8006cf0:	e02d      	b.n	8006d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	0c9b      	lsrs	r3, r3, #18
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006cfe:	4413      	add	r3, r2
 8006d00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d013      	beq.n	8006d38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d10:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	0c5b      	lsrs	r3, r3, #17
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d1e:	4413      	add	r3, r2
 8006d20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4a0f      	ldr	r2, [pc, #60]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d2a:	fb02 f203 	mul.w	r2, r2, r3
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
 8006d36:	e004      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	623b      	str	r3, [r7, #32]
      break;
 8006d46:	e002      	b.n	8006d4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d4a:	623b      	str	r3, [r7, #32]
      break;
 8006d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3728      	adds	r7, #40	; 0x28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc90      	pop	{r4, r7}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	0800bca0 	.word	0x0800bca0
 8006d60:	0800bcb0 	.word	0x0800bcb0
 8006d64:	40021000 	.word	0x40021000
 8006d68:	007a1200 	.word	0x007a1200
 8006d6c:	003d0900 	.word	0x003d0900

08006d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d74:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d76:	681b      	ldr	r3, [r3, #0]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	20000004 	.word	0x20000004

08006d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d88:	f7ff fff2 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	4a03      	ldr	r2, [pc, #12]	; (8006da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d9a:	5cd3      	ldrb	r3, [r2, r3]
 8006d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40021000 	.word	0x40021000
 8006da8:	0800bcec 	.word	0x0800bcec

08006dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006db0:	f7ff ffde 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006db4:	4601      	mov	r1, r0
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	0adb      	lsrs	r3, r3, #11
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	0800bcec 	.word	0x0800bcec

08006dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <RCC_Delay+0x34>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <RCC_Delay+0x38>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	0a5b      	lsrs	r3, r3, #9
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006df0:	bf00      	nop
  }
  while (Delay --);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	60fa      	str	r2, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f9      	bne.n	8006df0 <RCC_Delay+0x1c>
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000004 	.word	0x20000004
 8006e0c:	10624dd3 	.word	0x10624dd3

08006e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d07d      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e30:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10d      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3c:	4b4c      	ldr	r3, [pc, #304]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4a4b      	ldr	r2, [pc, #300]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e46:	61d3      	str	r3, [r2, #28]
 8006e48:	4b49      	ldr	r3, [pc, #292]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	4b46      	ldr	r3, [pc, #280]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d118      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e64:	4b43      	ldr	r3, [pc, #268]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a42      	ldr	r2, [pc, #264]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e70:	f7fd fab4 	bl	80043dc <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e76:	e008      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e78:	f7fd fab0 	bl	80043dc <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e06d      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8a:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d02e      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d027      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eb4:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ec4:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006eca:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d014      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eda:	f7fd fa7f 	bl	80043dc <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fd fa7b 	bl	80043dc <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e036      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0ee      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4917      	ldr	r1, [pc, #92]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1c:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	490b      	ldr	r1, [pc, #44]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0310 	and.w	r3, r3, #16
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f52:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4904      	ldr	r1, [pc, #16]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40007000 	.word	0x40007000
 8006f78:	42420440 	.word	0x42420440

08006f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b08d      	sub	sp, #52	; 0x34
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f84:	4b55      	ldr	r3, [pc, #340]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006f86:	f107 040c 	add.w	r4, r7, #12
 8006f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f90:	4b53      	ldr	r3, [pc, #332]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d07f      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d002      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d048      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006fb8:	e08b      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006fba:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fc0:	4b48      	ldr	r3, [pc, #288]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d07f      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	0c9b      	lsrs	r3, r3, #18
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fd8:	4413      	add	r3, r2
 8006fda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fde:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d018      	beq.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fea:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	0c5b      	lsrs	r3, r3, #17
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800700a:	4a37      	ldr	r2, [pc, #220]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	fb02 f303 	mul.w	r3, r2, r3
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800701a:	e004      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	4a33      	ldr	r2, [pc, #204]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007026:	4b2f      	ldr	r3, [pc, #188]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007032:	d102      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007038:	e048      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4a2c      	ldr	r2, [pc, #176]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007048:	e040      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800704a:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	d108      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706a:	62bb      	str	r3, [r7, #40]	; 0x28
 800706c:	e01f      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d109      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8007086:	f649 4340 	movw	r3, #40000	; 0x9c40
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
 800708c:	e00f      	b.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007098:	d11a      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d014      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80070a6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070ac:	e010      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80070ae:	e00f      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070b0:	f7ff fe7c 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	0b9b      	lsrs	r3, r3, #14
 80070bc:	f003 0303 	and.w	r3, r3, #3
 80070c0:	3301      	adds	r3, #1
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070ca:	e002      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070d0:	bf00      	nop
    }
  }
  return (frequency);
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3734      	adds	r7, #52	; 0x34
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}
 80070dc:	0800bcb4 	.word	0x0800bcb4
 80070e0:	0800bcc4 	.word	0x0800bcc4
 80070e4:	40021000 	.word	0x40021000
 80070e8:	007a1200 	.word	0x007a1200
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	aaaaaaab 	.word	0xaaaaaaab

080070f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e053      	b.n	80071ae <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7fb feef 	bl	8002f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	ea42 0103 	orr.w	r1, r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	0c1a      	lsrs	r2, r3, #16
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f002 0204 	and.w	r2, r2, #4
 800718c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800719c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e01d      	b.n	8007204 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fb fedd 	bl	8002f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f000 fb45 	bl	8007884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b06      	cmp	r3, #6
 8007234:	d007      	beq.n	8007246 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0201 	orr.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e01d      	b.n	80072a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f815 	bl	80072a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f000 faf7 	bl	8007884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
	...

080072bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fd58 	bl	8007d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a10      	ldr	r2, [pc, #64]	; (800731c <HAL_TIM_PWM_Start+0x60>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d107      	bne.n	80072ee <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b06      	cmp	r3, #6
 80072fe:	d007      	beq.n	8007310 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00

08007320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b02      	cmp	r3, #2
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0202 	mvn.w	r2, #2
 800734c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa73 	bl	800784e <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa66 	bl	800783c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa75 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0204 	mvn.w	r2, #4
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa49 	bl	800784e <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa3c 	bl	800783c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa4b 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0208 	mvn.w	r2, #8
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2204      	movs	r2, #4
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa1f 	bl	800784e <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa12 	bl	800783c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa21 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0210 	mvn.w	r2, #16
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2208      	movs	r2, #8
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9f5 	bl	800784e <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9e8 	bl	800783c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9f7 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0201 	mvn.w	r2, #1
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9c3 	bl	800782a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b80      	cmp	r3, #128	; 0x80
 80074b0:	d10e      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d107      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fd1c 	bl	8007f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d10e      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d107      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9bb 	bl	8007872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b20      	cmp	r3, #32
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0220 	mvn.w	r2, #32
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fce7 	bl	8007ef6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007546:	2302      	movs	r3, #2
 8007548:	e0b4      	b.n	80076b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b0c      	cmp	r3, #12
 800755e:	f200 809f 	bhi.w	80076a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	0800759d 	.word	0x0800759d
 800756c:	080076a1 	.word	0x080076a1
 8007570:	080076a1 	.word	0x080076a1
 8007574:	080076a1 	.word	0x080076a1
 8007578:	080075dd 	.word	0x080075dd
 800757c:	080076a1 	.word	0x080076a1
 8007580:	080076a1 	.word	0x080076a1
 8007584:	080076a1 	.word	0x080076a1
 8007588:	0800761f 	.word	0x0800761f
 800758c:	080076a1 	.word	0x080076a1
 8007590:	080076a1 	.word	0x080076a1
 8007594:	080076a1 	.word	0x080076a1
 8007598:	0800765f 	.word	0x0800765f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 f9d0 	bl	8007948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0208 	orr.w	r2, r2, #8
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0204 	bic.w	r2, r2, #4
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	619a      	str	r2, [r3, #24]
      break;
 80075da:	e062      	b.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fa16 	bl	8007a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6999      	ldr	r1, [r3, #24]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	021a      	lsls	r2, r3, #8
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	619a      	str	r2, [r3, #24]
      break;
 800761c:	e041      	b.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fa5f 	bl	8007ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0208 	orr.w	r2, r2, #8
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0204 	bic.w	r2, r2, #4
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	61da      	str	r2, [r3, #28]
      break;
 800765c:	e021      	b.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 faa9 	bl	8007bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69d9      	ldr	r1, [r3, #28]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	021a      	lsls	r2, r3, #8
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	61da      	str	r2, [r3, #28]
      break;
 800769e:	e000      	b.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80076a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_TIM_ConfigClockSource+0x18>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e0a6      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x166>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d067      	beq.n	80077dc <HAL_TIM_ConfigClockSource+0x120>
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d80b      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x6c>
 8007710:	2b10      	cmp	r3, #16
 8007712:	d073      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x140>
 8007714:	2b10      	cmp	r3, #16
 8007716:	d802      	bhi.n	800771e <HAL_TIM_ConfigClockSource+0x62>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d06f      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800771c:	e078      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800771e:	2b20      	cmp	r3, #32
 8007720:	d06c      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x140>
 8007722:	2b30      	cmp	r3, #48	; 0x30
 8007724:	d06a      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007726:	e073      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007728:	2b70      	cmp	r3, #112	; 0x70
 800772a:	d00d      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x8c>
 800772c:	2b70      	cmp	r3, #112	; 0x70
 800772e:	d804      	bhi.n	800773a <HAL_TIM_ConfigClockSource+0x7e>
 8007730:	2b50      	cmp	r3, #80	; 0x50
 8007732:	d033      	beq.n	800779c <HAL_TIM_ConfigClockSource+0xe0>
 8007734:	2b60      	cmp	r3, #96	; 0x60
 8007736:	d041      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007738:	e06a      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773e:	d066      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x152>
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d017      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007746:	e063      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6899      	ldr	r1, [r3, #8]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f000 faf5 	bl	8007d46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800776a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]
      break;
 8007774:	e04c      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6899      	ldr	r1, [r3, #8]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f000 fade 	bl	8007d46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007798:	609a      	str	r2, [r3, #8]
      break;
 800779a:	e039      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	6859      	ldr	r1, [r3, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	461a      	mov	r2, r3
 80077aa:	f000 fa55 	bl	8007c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2150      	movs	r1, #80	; 0x50
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 faac 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 80077ba:	e029      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6859      	ldr	r1, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f000 fa73 	bl	8007cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2160      	movs	r1, #96	; 0x60
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa9c 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 80077da:	e019      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	6859      	ldr	r1, [r3, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	461a      	mov	r2, r3
 80077ea:	f000 fa35 	bl	8007c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2140      	movs	r1, #64	; 0x40
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fa8c 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 80077fa:	e009      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f000 fa83 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 800780c:	e000      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800780e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a29      	ldr	r2, [pc, #164]	; (800793c <TIM_Base_SetConfig+0xb8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00b      	beq.n	80078b4 <TIM_Base_SetConfig+0x30>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a2:	d007      	beq.n	80078b4 <TIM_Base_SetConfig+0x30>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a26      	ldr	r2, [pc, #152]	; (8007940 <TIM_Base_SetConfig+0xbc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_Base_SetConfig+0x30>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a25      	ldr	r2, [pc, #148]	; (8007944 <TIM_Base_SetConfig+0xc0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d108      	bne.n	80078c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <TIM_Base_SetConfig+0xb8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00b      	beq.n	80078e6 <TIM_Base_SetConfig+0x62>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d4:	d007      	beq.n	80078e6 <TIM_Base_SetConfig+0x62>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <TIM_Base_SetConfig+0xbc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_Base_SetConfig+0x62>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <TIM_Base_SetConfig+0xc0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d108      	bne.n	80078f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a07      	ldr	r2, [pc, #28]	; (800793c <TIM_Base_SetConfig+0xb8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d103      	bne.n	800792c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr
 800793c:	40012c00 	.word	0x40012c00
 8007940:	40000400 	.word	0x40000400
 8007944:	40000800 	.word	0x40000800

08007948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 0302 	bic.w	r3, r3, #2
 8007990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <TIM_OC1_SetConfig+0xc8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d10c      	bne.n	80079be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0308 	bic.w	r3, r3, #8
 80079aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 0304 	bic.w	r3, r3, #4
 80079bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a13      	ldr	r2, [pc, #76]	; (8007a10 <TIM_OC1_SetConfig+0xc8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d111      	bne.n	80079ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	621a      	str	r2, [r3, #32]
}
 8007a04:	bf00      	nop
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40012c00 	.word	0x40012c00

08007a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0210 	bic.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0320 	bic.w	r3, r3, #32
 8007a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <TIM_OC2_SetConfig+0xd0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10d      	bne.n	8007a90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <TIM_OC2_SetConfig+0xd0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d113      	bne.n	8007ac0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr
 8007ae4:	40012c00 	.word	0x40012c00

08007ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a1d      	ldr	r2, [pc, #116]	; (8007bb8 <TIM_OC3_SetConfig+0xd0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d10d      	bne.n	8007b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <TIM_OC3_SetConfig+0xd0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d113      	bne.n	8007b92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	621a      	str	r2, [r3, #32]
}
 8007bac:	bf00      	nop
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40012c00 	.word	0x40012c00

08007bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	031b      	lsls	r3, r3, #12
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a0f      	ldr	r2, [pc, #60]	; (8007c54 <TIM_OC4_SetConfig+0x98>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d109      	bne.n	8007c30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	019b      	lsls	r3, r3, #6
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	621a      	str	r2, [r3, #32]
}
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr
 8007c54:	40012c00 	.word	0x40012c00

08007c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f023 030a 	bic.w	r3, r3, #10
 8007c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	f023 0210 	bic.w	r2, r3, #16
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	031b      	lsls	r3, r3, #12
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	621a      	str	r2, [r3, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f043 0307 	orr.w	r3, r3, #7
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	021a      	lsls	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	609a      	str	r2, [r3, #8]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	2201      	movs	r2, #1
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1a      	ldr	r2, [r3, #32]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	43db      	mvns	r3, r3
 8007da6:	401a      	ands	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1a      	ldr	r2, [r3, #32]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e032      	b.n	8007e4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e03d      	b.n	8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e03f      	b.n	8007fac <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7fb f897 	bl	8003074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2224      	movs	r2, #36	; 0x24
 8007f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f90c 	bl	800817c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695a      	ldr	r2, [r3, #20]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	f040 8083 	bne.w	80080dc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_UART_Transmit+0x2e>
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e07b      	b.n	80080de <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_UART_Transmit+0x40>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e074      	b.n	80080de <HAL_UART_Transmit+0x12a>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2221      	movs	r2, #33	; 0x21
 8008006:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800800a:	f7fc f9e7 	bl	80043dc <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800801c:	e042      	b.n	80080a4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008034:	d122      	bne.n	800807c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f850 	bl	80080e6 <UART_WaitOnFlagUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e046      	b.n	80080de <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008062:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d103      	bne.n	8008074 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3302      	adds	r3, #2
 8008070:	60bb      	str	r3, [r7, #8]
 8008072:	e017      	b.n	80080a4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	e013      	b.n	80080a4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	2180      	movs	r1, #128	; 0x80
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f82d 	bl	80080e6 <UART_WaitOnFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e023      	b.n	80080de <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	60ba      	str	r2, [r7, #8]
 800809c:	781a      	ldrb	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1b7      	bne.n	800801e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2140      	movs	r1, #64	; 0x40
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f814 	bl	80080e6 <UART_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e00a      	b.n	80080de <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f6:	e02c      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080fe:	d028      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <UART_WaitOnFlagUntilTimeout+0x30>
 8008106:	f7fc f969 	bl	80043dc <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	429a      	cmp	r2, r3
 8008114:	d21d      	bcs.n	8008152 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008124:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e00f      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4013      	ands	r3, r2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	429a      	cmp	r2, r3
 800816e:	d0c3      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80081b6:	f023 030c 	bic.w	r3, r3, #12
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	430b      	orrs	r3, r1
 80081c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a52      	ldr	r2, [pc, #328]	; (8008328 <UART_SetConfig+0x1ac>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d14e      	bne.n	8008282 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081e4:	f7fe fde2 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 80081e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009a      	lsls	r2, r3, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008200:	4a4a      	ldr	r2, [pc, #296]	; (800832c <UART_SetConfig+0x1b0>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	095b      	lsrs	r3, r3, #5
 8008208:	0119      	lsls	r1, r3, #4
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009a      	lsls	r2, r3, #2
 8008214:	441a      	add	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008220:	4b42      	ldr	r3, [pc, #264]	; (800832c <UART_SetConfig+0x1b0>)
 8008222:	fba3 0302 	umull	r0, r3, r3, r2
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	2064      	movs	r0, #100	; 0x64
 800822a:	fb00 f303 	mul.w	r3, r0, r3
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	3332      	adds	r3, #50	; 0x32
 8008234:	4a3d      	ldr	r2, [pc, #244]	; (800832c <UART_SetConfig+0x1b0>)
 8008236:	fba2 2303 	umull	r2, r3, r2, r3
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008240:	4419      	add	r1, r3
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009a      	lsls	r2, r3, #2
 800824c:	441a      	add	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	fbb2 f2f3 	udiv	r2, r2, r3
 8008258:	4b34      	ldr	r3, [pc, #208]	; (800832c <UART_SetConfig+0x1b0>)
 800825a:	fba3 0302 	umull	r0, r3, r3, r2
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	2064      	movs	r0, #100	; 0x64
 8008262:	fb00 f303 	mul.w	r3, r0, r3
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	3332      	adds	r3, #50	; 0x32
 800826c:	4a2f      	ldr	r2, [pc, #188]	; (800832c <UART_SetConfig+0x1b0>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	f003 020f 	and.w	r2, r3, #15
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	440a      	add	r2, r1
 800827e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008280:	e04d      	b.n	800831e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008282:	f7fe fd7f 	bl	8006d84 <HAL_RCC_GetPCLK1Freq>
 8008286:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009a      	lsls	r2, r3, #2
 8008292:	441a      	add	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	fbb2 f3f3 	udiv	r3, r2, r3
 800829e:	4a23      	ldr	r2, [pc, #140]	; (800832c <UART_SetConfig+0x1b0>)
 80082a0:	fba2 2303 	umull	r2, r3, r2, r3
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	0119      	lsls	r1, r3, #4
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009a      	lsls	r2, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80082be:	4b1b      	ldr	r3, [pc, #108]	; (800832c <UART_SetConfig+0x1b0>)
 80082c0:	fba3 0302 	umull	r0, r3, r3, r2
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	2064      	movs	r0, #100	; 0x64
 80082c8:	fb00 f303 	mul.w	r3, r0, r3
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	3332      	adds	r3, #50	; 0x32
 80082d2:	4a16      	ldr	r2, [pc, #88]	; (800832c <UART_SetConfig+0x1b0>)
 80082d4:	fba2 2303 	umull	r2, r3, r2, r3
 80082d8:	095b      	lsrs	r3, r3, #5
 80082da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082de:	4419      	add	r1, r3
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009a      	lsls	r2, r3, #2
 80082ea:	441a      	add	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <UART_SetConfig+0x1b0>)
 80082f8:	fba3 0302 	umull	r0, r3, r3, r2
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	2064      	movs	r0, #100	; 0x64
 8008300:	fb00 f303 	mul.w	r3, r0, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	3332      	adds	r3, #50	; 0x32
 800830a:	4a08      	ldr	r2, [pc, #32]	; (800832c <UART_SetConfig+0x1b0>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	440a      	add	r2, r1
 800831c:	609a      	str	r2, [r3, #8]
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40013800 	.word	0x40013800
 800832c:	51eb851f 	.word	0x51eb851f

08008330 <__errno>:
 8008330:	4b01      	ldr	r3, [pc, #4]	; (8008338 <__errno+0x8>)
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000010 	.word	0x20000010

0800833c <__libc_init_array>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	2500      	movs	r5, #0
 8008340:	4e0c      	ldr	r6, [pc, #48]	; (8008374 <__libc_init_array+0x38>)
 8008342:	4c0d      	ldr	r4, [pc, #52]	; (8008378 <__libc_init_array+0x3c>)
 8008344:	1ba4      	subs	r4, r4, r6
 8008346:	10a4      	asrs	r4, r4, #2
 8008348:	42a5      	cmp	r5, r4
 800834a:	d109      	bne.n	8008360 <__libc_init_array+0x24>
 800834c:	f003 fba0 	bl	800ba90 <_init>
 8008350:	2500      	movs	r5, #0
 8008352:	4e0a      	ldr	r6, [pc, #40]	; (800837c <__libc_init_array+0x40>)
 8008354:	4c0a      	ldr	r4, [pc, #40]	; (8008380 <__libc_init_array+0x44>)
 8008356:	1ba4      	subs	r4, r4, r6
 8008358:	10a4      	asrs	r4, r4, #2
 800835a:	42a5      	cmp	r5, r4
 800835c:	d105      	bne.n	800836a <__libc_init_array+0x2e>
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008364:	4798      	blx	r3
 8008366:	3501      	adds	r5, #1
 8008368:	e7ee      	b.n	8008348 <__libc_init_array+0xc>
 800836a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800836e:	4798      	blx	r3
 8008370:	3501      	adds	r5, #1
 8008372:	e7f2      	b.n	800835a <__libc_init_array+0x1e>
 8008374:	0800c138 	.word	0x0800c138
 8008378:	0800c138 	.word	0x0800c138
 800837c:	0800c138 	.word	0x0800c138
 8008380:	0800c13c 	.word	0x0800c13c

08008384 <memset>:
 8008384:	4603      	mov	r3, r0
 8008386:	4402      	add	r2, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <__cvt>:
 8008394:	2b00      	cmp	r3, #0
 8008396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800839a:	461e      	mov	r6, r3
 800839c:	bfbb      	ittet	lt
 800839e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80083a2:	461e      	movlt	r6, r3
 80083a4:	2300      	movge	r3, #0
 80083a6:	232d      	movlt	r3, #45	; 0x2d
 80083a8:	b088      	sub	sp, #32
 80083aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80083ac:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80083b0:	f027 0720 	bic.w	r7, r7, #32
 80083b4:	2f46      	cmp	r7, #70	; 0x46
 80083b6:	4614      	mov	r4, r2
 80083b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80083ba:	700b      	strb	r3, [r1, #0]
 80083bc:	d004      	beq.n	80083c8 <__cvt+0x34>
 80083be:	2f45      	cmp	r7, #69	; 0x45
 80083c0:	d100      	bne.n	80083c4 <__cvt+0x30>
 80083c2:	3501      	adds	r5, #1
 80083c4:	2302      	movs	r3, #2
 80083c6:	e000      	b.n	80083ca <__cvt+0x36>
 80083c8:	2303      	movs	r3, #3
 80083ca:	aa07      	add	r2, sp, #28
 80083cc:	9204      	str	r2, [sp, #16]
 80083ce:	aa06      	add	r2, sp, #24
 80083d0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80083d4:	e9cd 3500 	strd	r3, r5, [sp]
 80083d8:	4622      	mov	r2, r4
 80083da:	4633      	mov	r3, r6
 80083dc:	f000 fcd8 	bl	8008d90 <_dtoa_r>
 80083e0:	2f47      	cmp	r7, #71	; 0x47
 80083e2:	4680      	mov	r8, r0
 80083e4:	d102      	bne.n	80083ec <__cvt+0x58>
 80083e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e8:	07db      	lsls	r3, r3, #31
 80083ea:	d526      	bpl.n	800843a <__cvt+0xa6>
 80083ec:	2f46      	cmp	r7, #70	; 0x46
 80083ee:	eb08 0905 	add.w	r9, r8, r5
 80083f2:	d111      	bne.n	8008418 <__cvt+0x84>
 80083f4:	f898 3000 	ldrb.w	r3, [r8]
 80083f8:	2b30      	cmp	r3, #48	; 0x30
 80083fa:	d10a      	bne.n	8008412 <__cvt+0x7e>
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	4620      	mov	r0, r4
 8008402:	4631      	mov	r1, r6
 8008404:	f7f8 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8008408:	b918      	cbnz	r0, 8008412 <__cvt+0x7e>
 800840a:	f1c5 0501 	rsb	r5, r5, #1
 800840e:	f8ca 5000 	str.w	r5, [sl]
 8008412:	f8da 3000 	ldr.w	r3, [sl]
 8008416:	4499      	add	r9, r3
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	4620      	mov	r0, r4
 800841e:	4631      	mov	r1, r6
 8008420:	f7f8 fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8008424:	b938      	cbnz	r0, 8008436 <__cvt+0xa2>
 8008426:	2230      	movs	r2, #48	; 0x30
 8008428:	9b07      	ldr	r3, [sp, #28]
 800842a:	454b      	cmp	r3, r9
 800842c:	d205      	bcs.n	800843a <__cvt+0xa6>
 800842e:	1c59      	adds	r1, r3, #1
 8008430:	9107      	str	r1, [sp, #28]
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e7f8      	b.n	8008428 <__cvt+0x94>
 8008436:	f8cd 901c 	str.w	r9, [sp, #28]
 800843a:	4640      	mov	r0, r8
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008440:	eba3 0308 	sub.w	r3, r3, r8
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	b008      	add	sp, #32
 8008448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800844c <__exponent>:
 800844c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800844e:	2900      	cmp	r1, #0
 8008450:	bfb4      	ite	lt
 8008452:	232d      	movlt	r3, #45	; 0x2d
 8008454:	232b      	movge	r3, #43	; 0x2b
 8008456:	4604      	mov	r4, r0
 8008458:	bfb8      	it	lt
 800845a:	4249      	neglt	r1, r1
 800845c:	2909      	cmp	r1, #9
 800845e:	f804 2b02 	strb.w	r2, [r4], #2
 8008462:	7043      	strb	r3, [r0, #1]
 8008464:	dd21      	ble.n	80084aa <__exponent+0x5e>
 8008466:	f10d 0307 	add.w	r3, sp, #7
 800846a:	461f      	mov	r7, r3
 800846c:	260a      	movs	r6, #10
 800846e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008472:	fb06 1115 	mls	r1, r6, r5, r1
 8008476:	2d09      	cmp	r5, #9
 8008478:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800847c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008480:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008484:	4629      	mov	r1, r5
 8008486:	dc09      	bgt.n	800849c <__exponent+0x50>
 8008488:	3130      	adds	r1, #48	; 0x30
 800848a:	3b02      	subs	r3, #2
 800848c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008490:	42bb      	cmp	r3, r7
 8008492:	4622      	mov	r2, r4
 8008494:	d304      	bcc.n	80084a0 <__exponent+0x54>
 8008496:	1a10      	subs	r0, r2, r0
 8008498:	b003      	add	sp, #12
 800849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849c:	4613      	mov	r3, r2
 800849e:	e7e6      	b.n	800846e <__exponent+0x22>
 80084a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a4:	f804 2b01 	strb.w	r2, [r4], #1
 80084a8:	e7f2      	b.n	8008490 <__exponent+0x44>
 80084aa:	2330      	movs	r3, #48	; 0x30
 80084ac:	4419      	add	r1, r3
 80084ae:	7083      	strb	r3, [r0, #2]
 80084b0:	1d02      	adds	r2, r0, #4
 80084b2:	70c1      	strb	r1, [r0, #3]
 80084b4:	e7ef      	b.n	8008496 <__exponent+0x4a>
	...

080084b8 <_printf_float>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	b091      	sub	sp, #68	; 0x44
 80084be:	460c      	mov	r4, r1
 80084c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80084c2:	4693      	mov	fp, r2
 80084c4:	461e      	mov	r6, r3
 80084c6:	4605      	mov	r5, r0
 80084c8:	f001 fa16 	bl	80098f8 <_localeconv_r>
 80084cc:	6803      	ldr	r3, [r0, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	9309      	str	r3, [sp, #36]	; 0x24
 80084d2:	f7f7 fe3d 	bl	8000150 <strlen>
 80084d6:	2300      	movs	r3, #0
 80084d8:	930e      	str	r3, [sp, #56]	; 0x38
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	900a      	str	r0, [sp, #40]	; 0x28
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	f103 0208 	add.w	r2, r3, #8
 80084e8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80084ec:	f8d4 a000 	ldr.w	sl, [r4]
 80084f0:	603a      	str	r2, [r7, #0]
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084fa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80084fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008502:	930b      	str	r3, [sp, #44]	; 0x2c
 8008504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008508:	4ba6      	ldr	r3, [pc, #664]	; (80087a4 <_printf_float+0x2ec>)
 800850a:	4638      	mov	r0, r7
 800850c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800850e:	f7f8 fa7d 	bl	8000a0c <__aeabi_dcmpun>
 8008512:	bb68      	cbnz	r0, 8008570 <_printf_float+0xb8>
 8008514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008518:	4ba2      	ldr	r3, [pc, #648]	; (80087a4 <_printf_float+0x2ec>)
 800851a:	4638      	mov	r0, r7
 800851c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800851e:	f7f8 fa57 	bl	80009d0 <__aeabi_dcmple>
 8008522:	bb28      	cbnz	r0, 8008570 <_printf_float+0xb8>
 8008524:	2200      	movs	r2, #0
 8008526:	2300      	movs	r3, #0
 8008528:	4638      	mov	r0, r7
 800852a:	4649      	mov	r1, r9
 800852c:	f7f8 fa46 	bl	80009bc <__aeabi_dcmplt>
 8008530:	b110      	cbz	r0, 8008538 <_printf_float+0x80>
 8008532:	232d      	movs	r3, #45	; 0x2d
 8008534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008538:	4f9b      	ldr	r7, [pc, #620]	; (80087a8 <_printf_float+0x2f0>)
 800853a:	4b9c      	ldr	r3, [pc, #624]	; (80087ac <_printf_float+0x2f4>)
 800853c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008540:	bf98      	it	ls
 8008542:	461f      	movls	r7, r3
 8008544:	2303      	movs	r3, #3
 8008546:	f04f 0900 	mov.w	r9, #0
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	f02a 0304 	bic.w	r3, sl, #4
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	9600      	str	r6, [sp, #0]
 8008554:	465b      	mov	r3, fp
 8008556:	aa0f      	add	r2, sp, #60	; 0x3c
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f9e2 	bl	8008924 <_printf_common>
 8008560:	3001      	adds	r0, #1
 8008562:	f040 8090 	bne.w	8008686 <_printf_float+0x1ce>
 8008566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800856a:	b011      	add	sp, #68	; 0x44
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008570:	463a      	mov	r2, r7
 8008572:	464b      	mov	r3, r9
 8008574:	4638      	mov	r0, r7
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 fa48 	bl	8000a0c <__aeabi_dcmpun>
 800857c:	b110      	cbz	r0, 8008584 <_printf_float+0xcc>
 800857e:	4f8c      	ldr	r7, [pc, #560]	; (80087b0 <_printf_float+0x2f8>)
 8008580:	4b8c      	ldr	r3, [pc, #560]	; (80087b4 <_printf_float+0x2fc>)
 8008582:	e7db      	b.n	800853c <_printf_float+0x84>
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	a80d      	add	r0, sp, #52	; 0x34
 800858e:	a90e      	add	r1, sp, #56	; 0x38
 8008590:	d140      	bne.n	8008614 <_printf_float+0x15c>
 8008592:	2306      	movs	r3, #6
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	f04f 0c00 	mov.w	ip, #0
 800859a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800859e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	463a      	mov	r2, r7
 80085ae:	464b      	mov	r3, r9
 80085b0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80085b4:	4628      	mov	r0, r5
 80085b6:	f7ff feed 	bl	8008394 <__cvt>
 80085ba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80085be:	2b47      	cmp	r3, #71	; 0x47
 80085c0:	4607      	mov	r7, r0
 80085c2:	d109      	bne.n	80085d8 <_printf_float+0x120>
 80085c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c6:	1cd8      	adds	r0, r3, #3
 80085c8:	db02      	blt.n	80085d0 <_printf_float+0x118>
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	dd47      	ble.n	8008660 <_printf_float+0x1a8>
 80085d0:	f1a8 0802 	sub.w	r8, r8, #2
 80085d4:	fa5f f888 	uxtb.w	r8, r8
 80085d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80085dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085de:	d824      	bhi.n	800862a <_printf_float+0x172>
 80085e0:	3901      	subs	r1, #1
 80085e2:	4642      	mov	r2, r8
 80085e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085e8:	910d      	str	r1, [sp, #52]	; 0x34
 80085ea:	f7ff ff2f 	bl	800844c <__exponent>
 80085ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f0:	4681      	mov	r9, r0
 80085f2:	1813      	adds	r3, r2, r0
 80085f4:	2a01      	cmp	r2, #1
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	dc02      	bgt.n	8008600 <_printf_float+0x148>
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	07d1      	lsls	r1, r2, #31
 80085fe:	d501      	bpl.n	8008604 <_printf_float+0x14c>
 8008600:	3301      	adds	r3, #1
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0a2      	beq.n	8008552 <_printf_float+0x9a>
 800860c:	232d      	movs	r3, #45	; 0x2d
 800860e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008612:	e79e      	b.n	8008552 <_printf_float+0x9a>
 8008614:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008618:	f000 816e 	beq.w	80088f8 <_printf_float+0x440>
 800861c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008620:	d1b9      	bne.n	8008596 <_printf_float+0xde>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1b7      	bne.n	8008596 <_printf_float+0xde>
 8008626:	2301      	movs	r3, #1
 8008628:	e7b4      	b.n	8008594 <_printf_float+0xdc>
 800862a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800862e:	d119      	bne.n	8008664 <_printf_float+0x1ac>
 8008630:	2900      	cmp	r1, #0
 8008632:	6863      	ldr	r3, [r4, #4]
 8008634:	dd0c      	ble.n	8008650 <_printf_float+0x198>
 8008636:	6121      	str	r1, [r4, #16]
 8008638:	b913      	cbnz	r3, 8008640 <_printf_float+0x188>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	07d2      	lsls	r2, r2, #31
 800863e:	d502      	bpl.n	8008646 <_printf_float+0x18e>
 8008640:	3301      	adds	r3, #1
 8008642:	440b      	add	r3, r1
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008648:	f04f 0900 	mov.w	r9, #0
 800864c:	65a3      	str	r3, [r4, #88]	; 0x58
 800864e:	e7d9      	b.n	8008604 <_printf_float+0x14c>
 8008650:	b913      	cbnz	r3, 8008658 <_printf_float+0x1a0>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	07d0      	lsls	r0, r2, #31
 8008656:	d501      	bpl.n	800865c <_printf_float+0x1a4>
 8008658:	3302      	adds	r3, #2
 800865a:	e7f3      	b.n	8008644 <_printf_float+0x18c>
 800865c:	2301      	movs	r3, #1
 800865e:	e7f1      	b.n	8008644 <_printf_float+0x18c>
 8008660:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008664:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008668:	4293      	cmp	r3, r2
 800866a:	db05      	blt.n	8008678 <_printf_float+0x1c0>
 800866c:	6822      	ldr	r2, [r4, #0]
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	07d1      	lsls	r1, r2, #31
 8008672:	d5e8      	bpl.n	8008646 <_printf_float+0x18e>
 8008674:	3301      	adds	r3, #1
 8008676:	e7e5      	b.n	8008644 <_printf_float+0x18c>
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfcc      	ite	gt
 800867c:	2301      	movgt	r3, #1
 800867e:	f1c3 0302 	rsble	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	e7de      	b.n	8008644 <_printf_float+0x18c>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	055a      	lsls	r2, r3, #21
 800868a:	d407      	bmi.n	800869c <_printf_float+0x1e4>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	463a      	mov	r2, r7
 8008690:	4659      	mov	r1, fp
 8008692:	4628      	mov	r0, r5
 8008694:	47b0      	blx	r6
 8008696:	3001      	adds	r0, #1
 8008698:	d129      	bne.n	80086ee <_printf_float+0x236>
 800869a:	e764      	b.n	8008566 <_printf_float+0xae>
 800869c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80086a0:	f240 80d7 	bls.w	8008852 <_printf_float+0x39a>
 80086a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086a8:	2200      	movs	r2, #0
 80086aa:	2300      	movs	r3, #0
 80086ac:	f7f8 f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80086b0:	b388      	cbz	r0, 8008716 <_printf_float+0x25e>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4a40      	ldr	r2, [pc, #256]	; (80087b8 <_printf_float+0x300>)
 80086b6:	4659      	mov	r1, fp
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b0      	blx	r6
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f af52 	beq.w	8008566 <_printf_float+0xae>
 80086c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086c6:	429a      	cmp	r2, r3
 80086c8:	db02      	blt.n	80086d0 <_printf_float+0x218>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	07d8      	lsls	r0, r3, #31
 80086ce:	d50e      	bpl.n	80086ee <_printf_float+0x236>
 80086d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d4:	4659      	mov	r1, fp
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b0      	blx	r6
 80086da:	3001      	adds	r0, #1
 80086dc:	f43f af43 	beq.w	8008566 <_printf_float+0xae>
 80086e0:	2700      	movs	r7, #0
 80086e2:	f104 081a 	add.w	r8, r4, #26
 80086e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e8:	3b01      	subs	r3, #1
 80086ea:	42bb      	cmp	r3, r7
 80086ec:	dc09      	bgt.n	8008702 <_printf_float+0x24a>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	079f      	lsls	r7, r3, #30
 80086f2:	f100 80fd 	bmi.w	80088f0 <_printf_float+0x438>
 80086f6:	68e0      	ldr	r0, [r4, #12]
 80086f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086fa:	4298      	cmp	r0, r3
 80086fc:	bfb8      	it	lt
 80086fe:	4618      	movlt	r0, r3
 8008700:	e733      	b.n	800856a <_printf_float+0xb2>
 8008702:	2301      	movs	r3, #1
 8008704:	4642      	mov	r2, r8
 8008706:	4659      	mov	r1, fp
 8008708:	4628      	mov	r0, r5
 800870a:	47b0      	blx	r6
 800870c:	3001      	adds	r0, #1
 800870e:	f43f af2a 	beq.w	8008566 <_printf_float+0xae>
 8008712:	3701      	adds	r7, #1
 8008714:	e7e7      	b.n	80086e6 <_printf_float+0x22e>
 8008716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc2b      	bgt.n	8008774 <_printf_float+0x2bc>
 800871c:	2301      	movs	r3, #1
 800871e:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <_printf_float+0x300>)
 8008720:	4659      	mov	r1, fp
 8008722:	4628      	mov	r0, r5
 8008724:	47b0      	blx	r6
 8008726:	3001      	adds	r0, #1
 8008728:	f43f af1d 	beq.w	8008566 <_printf_float+0xae>
 800872c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800872e:	b923      	cbnz	r3, 800873a <_printf_float+0x282>
 8008730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008732:	b913      	cbnz	r3, 800873a <_printf_float+0x282>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	d5d9      	bpl.n	80086ee <_printf_float+0x236>
 800873a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873e:	4659      	mov	r1, fp
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	3001      	adds	r0, #1
 8008746:	f43f af0e 	beq.w	8008566 <_printf_float+0xae>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 091a 	add.w	r9, r4, #26
 8008752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008754:	425b      	negs	r3, r3
 8008756:	4543      	cmp	r3, r8
 8008758:	dc01      	bgt.n	800875e <_printf_float+0x2a6>
 800875a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875c:	e797      	b.n	800868e <_printf_float+0x1d6>
 800875e:	2301      	movs	r3, #1
 8008760:	464a      	mov	r2, r9
 8008762:	4659      	mov	r1, fp
 8008764:	4628      	mov	r0, r5
 8008766:	47b0      	blx	r6
 8008768:	3001      	adds	r0, #1
 800876a:	f43f aefc 	beq.w	8008566 <_printf_float+0xae>
 800876e:	f108 0801 	add.w	r8, r8, #1
 8008772:	e7ee      	b.n	8008752 <_printf_float+0x29a>
 8008774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008778:	429a      	cmp	r2, r3
 800877a:	bfa8      	it	ge
 800877c:	461a      	movge	r2, r3
 800877e:	2a00      	cmp	r2, #0
 8008780:	4690      	mov	r8, r2
 8008782:	dd07      	ble.n	8008794 <_printf_float+0x2dc>
 8008784:	4613      	mov	r3, r2
 8008786:	4659      	mov	r1, fp
 8008788:	463a      	mov	r2, r7
 800878a:	4628      	mov	r0, r5
 800878c:	47b0      	blx	r6
 800878e:	3001      	adds	r0, #1
 8008790:	f43f aee9 	beq.w	8008566 <_printf_float+0xae>
 8008794:	f104 031a 	add.w	r3, r4, #26
 8008798:	f04f 0a00 	mov.w	sl, #0
 800879c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80087a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087a2:	e015      	b.n	80087d0 <_printf_float+0x318>
 80087a4:	7fefffff 	.word	0x7fefffff
 80087a8:	0800bcf8 	.word	0x0800bcf8
 80087ac:	0800bcf4 	.word	0x0800bcf4
 80087b0:	0800bd00 	.word	0x0800bd00
 80087b4:	0800bcfc 	.word	0x0800bcfc
 80087b8:	0800bd04 	.word	0x0800bd04
 80087bc:	2301      	movs	r3, #1
 80087be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c0:	4659      	mov	r1, fp
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b0      	blx	r6
 80087c6:	3001      	adds	r0, #1
 80087c8:	f43f aecd 	beq.w	8008566 <_printf_float+0xae>
 80087cc:	f10a 0a01 	add.w	sl, sl, #1
 80087d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80087d4:	eba9 0308 	sub.w	r3, r9, r8
 80087d8:	4553      	cmp	r3, sl
 80087da:	dcef      	bgt.n	80087bc <_printf_float+0x304>
 80087dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087e0:	429a      	cmp	r2, r3
 80087e2:	444f      	add	r7, r9
 80087e4:	db14      	blt.n	8008810 <_printf_float+0x358>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	07da      	lsls	r2, r3, #31
 80087ea:	d411      	bmi.n	8008810 <_printf_float+0x358>
 80087ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087f0:	eba3 0209 	sub.w	r2, r3, r9
 80087f4:	eba3 0901 	sub.w	r9, r3, r1
 80087f8:	4591      	cmp	r9, r2
 80087fa:	bfa8      	it	ge
 80087fc:	4691      	movge	r9, r2
 80087fe:	f1b9 0f00 	cmp.w	r9, #0
 8008802:	dc0d      	bgt.n	8008820 <_printf_float+0x368>
 8008804:	2700      	movs	r7, #0
 8008806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800880a:	f104 081a 	add.w	r8, r4, #26
 800880e:	e018      	b.n	8008842 <_printf_float+0x38a>
 8008810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008814:	4659      	mov	r1, fp
 8008816:	4628      	mov	r0, r5
 8008818:	47b0      	blx	r6
 800881a:	3001      	adds	r0, #1
 800881c:	d1e6      	bne.n	80087ec <_printf_float+0x334>
 800881e:	e6a2      	b.n	8008566 <_printf_float+0xae>
 8008820:	464b      	mov	r3, r9
 8008822:	463a      	mov	r2, r7
 8008824:	4659      	mov	r1, fp
 8008826:	4628      	mov	r0, r5
 8008828:	47b0      	blx	r6
 800882a:	3001      	adds	r0, #1
 800882c:	d1ea      	bne.n	8008804 <_printf_float+0x34c>
 800882e:	e69a      	b.n	8008566 <_printf_float+0xae>
 8008830:	2301      	movs	r3, #1
 8008832:	4642      	mov	r2, r8
 8008834:	4659      	mov	r1, fp
 8008836:	4628      	mov	r0, r5
 8008838:	47b0      	blx	r6
 800883a:	3001      	adds	r0, #1
 800883c:	f43f ae93 	beq.w	8008566 <_printf_float+0xae>
 8008840:	3701      	adds	r7, #1
 8008842:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	eba3 0309 	sub.w	r3, r3, r9
 800884c:	42bb      	cmp	r3, r7
 800884e:	dcef      	bgt.n	8008830 <_printf_float+0x378>
 8008850:	e74d      	b.n	80086ee <_printf_float+0x236>
 8008852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008854:	2a01      	cmp	r2, #1
 8008856:	dc01      	bgt.n	800885c <_printf_float+0x3a4>
 8008858:	07db      	lsls	r3, r3, #31
 800885a:	d538      	bpl.n	80088ce <_printf_float+0x416>
 800885c:	2301      	movs	r3, #1
 800885e:	463a      	mov	r2, r7
 8008860:	4659      	mov	r1, fp
 8008862:	4628      	mov	r0, r5
 8008864:	47b0      	blx	r6
 8008866:	3001      	adds	r0, #1
 8008868:	f43f ae7d 	beq.w	8008566 <_printf_float+0xae>
 800886c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008870:	4659      	mov	r1, fp
 8008872:	4628      	mov	r0, r5
 8008874:	47b0      	blx	r6
 8008876:	3001      	adds	r0, #1
 8008878:	f107 0701 	add.w	r7, r7, #1
 800887c:	f43f ae73 	beq.w	8008566 <_printf_float+0xae>
 8008880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008886:	2200      	movs	r2, #0
 8008888:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800888c:	2300      	movs	r3, #0
 800888e:	f7f8 f88b 	bl	80009a8 <__aeabi_dcmpeq>
 8008892:	b9c0      	cbnz	r0, 80088c6 <_printf_float+0x40e>
 8008894:	4643      	mov	r3, r8
 8008896:	463a      	mov	r2, r7
 8008898:	4659      	mov	r1, fp
 800889a:	4628      	mov	r0, r5
 800889c:	47b0      	blx	r6
 800889e:	3001      	adds	r0, #1
 80088a0:	d10d      	bne.n	80088be <_printf_float+0x406>
 80088a2:	e660      	b.n	8008566 <_printf_float+0xae>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4642      	mov	r2, r8
 80088a8:	4659      	mov	r1, fp
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b0      	blx	r6
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f ae59 	beq.w	8008566 <_printf_float+0xae>
 80088b4:	3701      	adds	r7, #1
 80088b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b8:	3b01      	subs	r3, #1
 80088ba:	42bb      	cmp	r3, r7
 80088bc:	dcf2      	bgt.n	80088a4 <_printf_float+0x3ec>
 80088be:	464b      	mov	r3, r9
 80088c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088c4:	e6e4      	b.n	8008690 <_printf_float+0x1d8>
 80088c6:	2700      	movs	r7, #0
 80088c8:	f104 081a 	add.w	r8, r4, #26
 80088cc:	e7f3      	b.n	80088b6 <_printf_float+0x3fe>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e7e1      	b.n	8008896 <_printf_float+0x3de>
 80088d2:	2301      	movs	r3, #1
 80088d4:	4642      	mov	r2, r8
 80088d6:	4659      	mov	r1, fp
 80088d8:	4628      	mov	r0, r5
 80088da:	47b0      	blx	r6
 80088dc:	3001      	adds	r0, #1
 80088de:	f43f ae42 	beq.w	8008566 <_printf_float+0xae>
 80088e2:	3701      	adds	r7, #1
 80088e4:	68e3      	ldr	r3, [r4, #12]
 80088e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	42bb      	cmp	r3, r7
 80088ec:	dcf1      	bgt.n	80088d2 <_printf_float+0x41a>
 80088ee:	e702      	b.n	80086f6 <_printf_float+0x23e>
 80088f0:	2700      	movs	r7, #0
 80088f2:	f104 0819 	add.w	r8, r4, #25
 80088f6:	e7f5      	b.n	80088e4 <_printf_float+0x42c>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f43f ae94 	beq.w	8008626 <_printf_float+0x16e>
 80088fe:	f04f 0c00 	mov.w	ip, #0
 8008902:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008906:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800890a:	6022      	str	r2, [r4, #0]
 800890c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008910:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	463a      	mov	r2, r7
 8008918:	464b      	mov	r3, r9
 800891a:	4628      	mov	r0, r5
 800891c:	f7ff fd3a 	bl	8008394 <__cvt>
 8008920:	4607      	mov	r7, r0
 8008922:	e64f      	b.n	80085c4 <_printf_float+0x10c>

08008924 <_printf_common>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	4691      	mov	r9, r2
 800892a:	461f      	mov	r7, r3
 800892c:	688a      	ldr	r2, [r1, #8]
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	4606      	mov	r6, r0
 8008932:	4293      	cmp	r3, r2
 8008934:	bfb8      	it	lt
 8008936:	4613      	movlt	r3, r2
 8008938:	f8c9 3000 	str.w	r3, [r9]
 800893c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008940:	460c      	mov	r4, r1
 8008942:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008946:	b112      	cbz	r2, 800894e <_printf_common+0x2a>
 8008948:	3301      	adds	r3, #1
 800894a:	f8c9 3000 	str.w	r3, [r9]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	0699      	lsls	r1, r3, #26
 8008952:	bf42      	ittt	mi
 8008954:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008958:	3302      	addmi	r3, #2
 800895a:	f8c9 3000 	strmi.w	r3, [r9]
 800895e:	6825      	ldr	r5, [r4, #0]
 8008960:	f015 0506 	ands.w	r5, r5, #6
 8008964:	d107      	bne.n	8008976 <_printf_common+0x52>
 8008966:	f104 0a19 	add.w	sl, r4, #25
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	f8d9 2000 	ldr.w	r2, [r9]
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	42ab      	cmp	r3, r5
 8008974:	dc29      	bgt.n	80089ca <_printf_common+0xa6>
 8008976:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	3300      	adds	r3, #0
 800897e:	bf18      	it	ne
 8008980:	2301      	movne	r3, #1
 8008982:	0692      	lsls	r2, r2, #26
 8008984:	d42e      	bmi.n	80089e4 <_printf_common+0xc0>
 8008986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	47c0      	blx	r8
 8008990:	3001      	adds	r0, #1
 8008992:	d021      	beq.n	80089d8 <_printf_common+0xb4>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	68e5      	ldr	r5, [r4, #12]
 8008998:	f003 0306 	and.w	r3, r3, #6
 800899c:	2b04      	cmp	r3, #4
 800899e:	bf18      	it	ne
 80089a0:	2500      	movne	r5, #0
 80089a2:	f8d9 2000 	ldr.w	r2, [r9]
 80089a6:	f04f 0900 	mov.w	r9, #0
 80089aa:	bf08      	it	eq
 80089ac:	1aad      	subeq	r5, r5, r2
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	bf08      	it	eq
 80089b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bfc4      	itt	gt
 80089bc:	1a9b      	subgt	r3, r3, r2
 80089be:	18ed      	addgt	r5, r5, r3
 80089c0:	341a      	adds	r4, #26
 80089c2:	454d      	cmp	r5, r9
 80089c4:	d11a      	bne.n	80089fc <_printf_common+0xd8>
 80089c6:	2000      	movs	r0, #0
 80089c8:	e008      	b.n	80089dc <_printf_common+0xb8>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4652      	mov	r2, sl
 80089ce:	4639      	mov	r1, r7
 80089d0:	4630      	mov	r0, r6
 80089d2:	47c0      	blx	r8
 80089d4:	3001      	adds	r0, #1
 80089d6:	d103      	bne.n	80089e0 <_printf_common+0xbc>
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e0:	3501      	adds	r5, #1
 80089e2:	e7c2      	b.n	800896a <_printf_common+0x46>
 80089e4:	2030      	movs	r0, #48	; 0x30
 80089e6:	18e1      	adds	r1, r4, r3
 80089e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089f2:	4422      	add	r2, r4
 80089f4:	3302      	adds	r3, #2
 80089f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089fa:	e7c4      	b.n	8008986 <_printf_common+0x62>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4622      	mov	r2, r4
 8008a00:	4639      	mov	r1, r7
 8008a02:	4630      	mov	r0, r6
 8008a04:	47c0      	blx	r8
 8008a06:	3001      	adds	r0, #1
 8008a08:	d0e6      	beq.n	80089d8 <_printf_common+0xb4>
 8008a0a:	f109 0901 	add.w	r9, r9, #1
 8008a0e:	e7d8      	b.n	80089c2 <_printf_common+0x9e>

08008a10 <_printf_i>:
 8008a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a18:	460c      	mov	r4, r1
 8008a1a:	7e09      	ldrb	r1, [r1, #24]
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	296e      	cmp	r1, #110	; 0x6e
 8008a20:	4617      	mov	r7, r2
 8008a22:	4606      	mov	r6, r0
 8008a24:	4698      	mov	r8, r3
 8008a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a28:	f000 80b3 	beq.w	8008b92 <_printf_i+0x182>
 8008a2c:	d822      	bhi.n	8008a74 <_printf_i+0x64>
 8008a2e:	2963      	cmp	r1, #99	; 0x63
 8008a30:	d036      	beq.n	8008aa0 <_printf_i+0x90>
 8008a32:	d80a      	bhi.n	8008a4a <_printf_i+0x3a>
 8008a34:	2900      	cmp	r1, #0
 8008a36:	f000 80b9 	beq.w	8008bac <_printf_i+0x19c>
 8008a3a:	2958      	cmp	r1, #88	; 0x58
 8008a3c:	f000 8083 	beq.w	8008b46 <_printf_i+0x136>
 8008a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a48:	e032      	b.n	8008ab0 <_printf_i+0xa0>
 8008a4a:	2964      	cmp	r1, #100	; 0x64
 8008a4c:	d001      	beq.n	8008a52 <_printf_i+0x42>
 8008a4e:	2969      	cmp	r1, #105	; 0x69
 8008a50:	d1f6      	bne.n	8008a40 <_printf_i+0x30>
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	6813      	ldr	r3, [r2, #0]
 8008a56:	0605      	lsls	r5, r0, #24
 8008a58:	f103 0104 	add.w	r1, r3, #4
 8008a5c:	d52a      	bpl.n	8008ab4 <_printf_i+0xa4>
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6011      	str	r1, [r2, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da03      	bge.n	8008a6e <_printf_i+0x5e>
 8008a66:	222d      	movs	r2, #45	; 0x2d
 8008a68:	425b      	negs	r3, r3
 8008a6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a6e:	486f      	ldr	r0, [pc, #444]	; (8008c2c <_printf_i+0x21c>)
 8008a70:	220a      	movs	r2, #10
 8008a72:	e039      	b.n	8008ae8 <_printf_i+0xd8>
 8008a74:	2973      	cmp	r1, #115	; 0x73
 8008a76:	f000 809d 	beq.w	8008bb4 <_printf_i+0x1a4>
 8008a7a:	d808      	bhi.n	8008a8e <_printf_i+0x7e>
 8008a7c:	296f      	cmp	r1, #111	; 0x6f
 8008a7e:	d020      	beq.n	8008ac2 <_printf_i+0xb2>
 8008a80:	2970      	cmp	r1, #112	; 0x70
 8008a82:	d1dd      	bne.n	8008a40 <_printf_i+0x30>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	f043 0320 	orr.w	r3, r3, #32
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	e003      	b.n	8008a96 <_printf_i+0x86>
 8008a8e:	2975      	cmp	r1, #117	; 0x75
 8008a90:	d017      	beq.n	8008ac2 <_printf_i+0xb2>
 8008a92:	2978      	cmp	r1, #120	; 0x78
 8008a94:	d1d4      	bne.n	8008a40 <_printf_i+0x30>
 8008a96:	2378      	movs	r3, #120	; 0x78
 8008a98:	4865      	ldr	r0, [pc, #404]	; (8008c30 <_printf_i+0x220>)
 8008a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a9e:	e055      	b.n	8008b4c <_printf_i+0x13c>
 8008aa0:	6813      	ldr	r3, [r2, #0]
 8008aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa6:	1d19      	adds	r1, r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6011      	str	r1, [r2, #0]
 8008aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e08c      	b.n	8008bce <_printf_i+0x1be>
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008aba:	6011      	str	r1, [r2, #0]
 8008abc:	bf18      	it	ne
 8008abe:	b21b      	sxthne	r3, r3
 8008ac0:	e7cf      	b.n	8008a62 <_printf_i+0x52>
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	1d18      	adds	r0, r3, #4
 8008ac8:	6010      	str	r0, [r2, #0]
 8008aca:	0628      	lsls	r0, r5, #24
 8008acc:	d501      	bpl.n	8008ad2 <_printf_i+0xc2>
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	e002      	b.n	8008ad8 <_printf_i+0xc8>
 8008ad2:	0668      	lsls	r0, r5, #25
 8008ad4:	d5fb      	bpl.n	8008ace <_printf_i+0xbe>
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	296f      	cmp	r1, #111	; 0x6f
 8008ada:	bf14      	ite	ne
 8008adc:	220a      	movne	r2, #10
 8008ade:	2208      	moveq	r2, #8
 8008ae0:	4852      	ldr	r0, [pc, #328]	; (8008c2c <_printf_i+0x21c>)
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ae8:	6865      	ldr	r5, [r4, #4]
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	60a5      	str	r5, [r4, #8]
 8008aee:	f2c0 8095 	blt.w	8008c1c <_printf_i+0x20c>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	f021 0104 	bic.w	r1, r1, #4
 8008af8:	6021      	str	r1, [r4, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d13d      	bne.n	8008b7a <_printf_i+0x16a>
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	f040 808e 	bne.w	8008c20 <_printf_i+0x210>
 8008b04:	4665      	mov	r5, ip
 8008b06:	2a08      	cmp	r2, #8
 8008b08:	d10b      	bne.n	8008b22 <_printf_i+0x112>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	07db      	lsls	r3, r3, #31
 8008b0e:	d508      	bpl.n	8008b22 <_printf_i+0x112>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	bfde      	ittt	le
 8008b18:	2330      	movle	r3, #48	; 0x30
 8008b1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b22:	ebac 0305 	sub.w	r3, ip, r5
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	f8cd 8000 	str.w	r8, [sp]
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	aa03      	add	r2, sp, #12
 8008b30:	4621      	mov	r1, r4
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff fef6 	bl	8008924 <_printf_common>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d14d      	bne.n	8008bd8 <_printf_i+0x1c8>
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b40:	b005      	add	sp, #20
 8008b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b46:	4839      	ldr	r0, [pc, #228]	; (8008c2c <_printf_i+0x21c>)
 8008b48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b4c:	6813      	ldr	r3, [r2, #0]
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	1d1d      	adds	r5, r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6015      	str	r5, [r2, #0]
 8008b56:	060a      	lsls	r2, r1, #24
 8008b58:	d50b      	bpl.n	8008b72 <_printf_i+0x162>
 8008b5a:	07ca      	lsls	r2, r1, #31
 8008b5c:	bf44      	itt	mi
 8008b5e:	f041 0120 	orrmi.w	r1, r1, #32
 8008b62:	6021      	strmi	r1, [r4, #0]
 8008b64:	b91b      	cbnz	r3, 8008b6e <_printf_i+0x15e>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	f022 0220 	bic.w	r2, r2, #32
 8008b6c:	6022      	str	r2, [r4, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	e7b7      	b.n	8008ae2 <_printf_i+0xd2>
 8008b72:	064d      	lsls	r5, r1, #25
 8008b74:	bf48      	it	mi
 8008b76:	b29b      	uxthmi	r3, r3
 8008b78:	e7ef      	b.n	8008b5a <_printf_i+0x14a>
 8008b7a:	4665      	mov	r5, ip
 8008b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b80:	fb02 3311 	mls	r3, r2, r1, r3
 8008b84:	5cc3      	ldrb	r3, [r0, r3]
 8008b86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d1f5      	bne.n	8008b7c <_printf_i+0x16c>
 8008b90:	e7b9      	b.n	8008b06 <_printf_i+0xf6>
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	6825      	ldr	r5, [r4, #0]
 8008b96:	1d18      	adds	r0, r3, #4
 8008b98:	6961      	ldr	r1, [r4, #20]
 8008b9a:	6010      	str	r0, [r2, #0]
 8008b9c:	0628      	lsls	r0, r5, #24
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	d501      	bpl.n	8008ba6 <_printf_i+0x196>
 8008ba2:	6019      	str	r1, [r3, #0]
 8008ba4:	e002      	b.n	8008bac <_printf_i+0x19c>
 8008ba6:	066a      	lsls	r2, r5, #25
 8008ba8:	d5fb      	bpl.n	8008ba2 <_printf_i+0x192>
 8008baa:	8019      	strh	r1, [r3, #0]
 8008bac:	2300      	movs	r3, #0
 8008bae:	4665      	mov	r5, ip
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	e7b9      	b.n	8008b28 <_printf_i+0x118>
 8008bb4:	6813      	ldr	r3, [r2, #0]
 8008bb6:	1d19      	adds	r1, r3, #4
 8008bb8:	6011      	str	r1, [r2, #0]
 8008bba:	681d      	ldr	r5, [r3, #0]
 8008bbc:	6862      	ldr	r2, [r4, #4]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 feaf 	bl	8009924 <memchr>
 8008bc6:	b108      	cbz	r0, 8008bcc <_printf_i+0x1bc>
 8008bc8:	1b40      	subs	r0, r0, r5
 8008bca:	6060      	str	r0, [r4, #4]
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	6123      	str	r3, [r4, #16]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd6:	e7a7      	b.n	8008b28 <_printf_i+0x118>
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	462a      	mov	r2, r5
 8008bdc:	4639      	mov	r1, r7
 8008bde:	4630      	mov	r0, r6
 8008be0:	47c0      	blx	r8
 8008be2:	3001      	adds	r0, #1
 8008be4:	d0aa      	beq.n	8008b3c <_printf_i+0x12c>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	079b      	lsls	r3, r3, #30
 8008bea:	d413      	bmi.n	8008c14 <_printf_i+0x204>
 8008bec:	68e0      	ldr	r0, [r4, #12]
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	4298      	cmp	r0, r3
 8008bf2:	bfb8      	it	lt
 8008bf4:	4618      	movlt	r0, r3
 8008bf6:	e7a3      	b.n	8008b40 <_printf_i+0x130>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	464a      	mov	r2, r9
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	4630      	mov	r0, r6
 8008c00:	47c0      	blx	r8
 8008c02:	3001      	adds	r0, #1
 8008c04:	d09a      	beq.n	8008b3c <_printf_i+0x12c>
 8008c06:	3501      	adds	r5, #1
 8008c08:	68e3      	ldr	r3, [r4, #12]
 8008c0a:	9a03      	ldr	r2, [sp, #12]
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	42ab      	cmp	r3, r5
 8008c10:	dcf2      	bgt.n	8008bf8 <_printf_i+0x1e8>
 8008c12:	e7eb      	b.n	8008bec <_printf_i+0x1dc>
 8008c14:	2500      	movs	r5, #0
 8008c16:	f104 0919 	add.w	r9, r4, #25
 8008c1a:	e7f5      	b.n	8008c08 <_printf_i+0x1f8>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1ac      	bne.n	8008b7a <_printf_i+0x16a>
 8008c20:	7803      	ldrb	r3, [r0, #0]
 8008c22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c2a:	e76c      	b.n	8008b06 <_printf_i+0xf6>
 8008c2c:	0800bd06 	.word	0x0800bd06
 8008c30:	0800bd17 	.word	0x0800bd17

08008c34 <siprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c3a:	b500      	push	{lr}
 8008c3c:	b09c      	sub	sp, #112	; 0x70
 8008c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c40:	9002      	str	r0, [sp, #8]
 8008c42:	9006      	str	r0, [sp, #24]
 8008c44:	9107      	str	r1, [sp, #28]
 8008c46:	9104      	str	r1, [sp, #16]
 8008c48:	4808      	ldr	r0, [pc, #32]	; (8008c6c <siprintf+0x38>)
 8008c4a:	4909      	ldr	r1, [pc, #36]	; (8008c70 <siprintf+0x3c>)
 8008c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	a902      	add	r1, sp, #8
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	f001 fa68 	bl	800a12c <_svfiprintf_r>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	b01c      	add	sp, #112	; 0x70
 8008c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c68:	b003      	add	sp, #12
 8008c6a:	4770      	bx	lr
 8008c6c:	20000010 	.word	0x20000010
 8008c70:	ffff0208 	.word	0xffff0208

08008c74 <quorem>:
 8008c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c78:	6903      	ldr	r3, [r0, #16]
 8008c7a:	690c      	ldr	r4, [r1, #16]
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	f2c0 8084 	blt.w	8008d8c <quorem+0x118>
 8008c84:	3c01      	subs	r4, #1
 8008c86:	f101 0714 	add.w	r7, r1, #20
 8008c8a:	f100 0614 	add.w	r6, r0, #20
 8008c8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008c92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008c96:	3501      	adds	r5, #1
 8008c98:	fbb0 f5f5 	udiv	r5, r0, r5
 8008c9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008ca0:	eb06 030c 	add.w	r3, r6, ip
 8008ca4:	eb07 090c 	add.w	r9, r7, ip
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	b39d      	cbz	r5, 8008d14 <quorem+0xa0>
 8008cac:	f04f 0a00 	mov.w	sl, #0
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	46b6      	mov	lr, r6
 8008cb4:	46d3      	mov	fp, sl
 8008cb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cba:	b293      	uxth	r3, r2
 8008cbc:	fb05 a303 	mla	r3, r5, r3, sl
 8008cc0:	0c12      	lsrs	r2, r2, #16
 8008cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cc6:	fb05 a202 	mla	r2, r5, r2, sl
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	ebab 0303 	sub.w	r3, fp, r3
 8008cd0:	f8de b000 	ldr.w	fp, [lr]
 8008cd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008cd8:	fa1f fb8b 	uxth.w	fp, fp
 8008cdc:	445b      	add	r3, fp
 8008cde:	fa1f fb82 	uxth.w	fp, r2
 8008ce2:	f8de 2000 	ldr.w	r2, [lr]
 8008ce6:	4581      	cmp	r9, r0
 8008ce8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cf6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008cfa:	f84e 3b04 	str.w	r3, [lr], #4
 8008cfe:	d2da      	bcs.n	8008cb6 <quorem+0x42>
 8008d00:	f856 300c 	ldr.w	r3, [r6, ip]
 8008d04:	b933      	cbnz	r3, 8008d14 <quorem+0xa0>
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	d331      	bcc.n	8008d74 <quorem+0x100>
 8008d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d14:	4640      	mov	r0, r8
 8008d16:	f001 f833 	bl	8009d80 <__mcmp>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	db26      	blt.n	8008d6c <quorem+0xf8>
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f04f 0c00 	mov.w	ip, #0
 8008d24:	3501      	adds	r5, #1
 8008d26:	f857 1b04 	ldr.w	r1, [r7], #4
 8008d2a:	f8d0 e000 	ldr.w	lr, [r0]
 8008d2e:	b28b      	uxth	r3, r1
 8008d30:	ebac 0303 	sub.w	r3, ip, r3
 8008d34:	fa1f f28e 	uxth.w	r2, lr
 8008d38:	4413      	add	r3, r2
 8008d3a:	0c0a      	lsrs	r2, r1, #16
 8008d3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d4a:	45b9      	cmp	r9, r7
 8008d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d50:	f840 3b04 	str.w	r3, [r0], #4
 8008d54:	d2e7      	bcs.n	8008d26 <quorem+0xb2>
 8008d56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008d5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008d5e:	b92a      	cbnz	r2, 8008d6c <quorem+0xf8>
 8008d60:	3b04      	subs	r3, #4
 8008d62:	429e      	cmp	r6, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	d30b      	bcc.n	8008d80 <quorem+0x10c>
 8008d68:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	b003      	add	sp, #12
 8008d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	3b04      	subs	r3, #4
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	d1c9      	bne.n	8008d10 <quorem+0x9c>
 8008d7c:	3c01      	subs	r4, #1
 8008d7e:	e7c4      	b.n	8008d0a <quorem+0x96>
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	3b04      	subs	r3, #4
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d1ef      	bne.n	8008d68 <quorem+0xf4>
 8008d88:	3c01      	subs	r4, #1
 8008d8a:	e7ea      	b.n	8008d62 <quorem+0xee>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e7ee      	b.n	8008d6e <quorem+0xfa>

08008d90 <_dtoa_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	4616      	mov	r6, r2
 8008d96:	461f      	mov	r7, r3
 8008d98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d9a:	b095      	sub	sp, #84	; 0x54
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008da2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008da6:	b93d      	cbnz	r5, 8008db8 <_dtoa_r+0x28>
 8008da8:	2010      	movs	r0, #16
 8008daa:	f000 fdb3 	bl	8009914 <malloc>
 8008dae:	6260      	str	r0, [r4, #36]	; 0x24
 8008db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008db4:	6005      	str	r5, [r0, #0]
 8008db6:	60c5      	str	r5, [r0, #12]
 8008db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dba:	6819      	ldr	r1, [r3, #0]
 8008dbc:	b151      	cbz	r1, 8008dd4 <_dtoa_r+0x44>
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4093      	lsls	r3, r2
 8008dc4:	604a      	str	r2, [r1, #4]
 8008dc6:	608b      	str	r3, [r1, #8]
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fdf8 	bl	80099be <_Bfree>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	1e3b      	subs	r3, r7, #0
 8008dd6:	bfaf      	iteee	ge
 8008dd8:	2300      	movge	r3, #0
 8008dda:	2201      	movlt	r2, #1
 8008ddc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008de0:	9303      	strlt	r3, [sp, #12]
 8008de2:	bfac      	ite	ge
 8008de4:	f8c8 3000 	strge.w	r3, [r8]
 8008de8:	f8c8 2000 	strlt.w	r2, [r8]
 8008dec:	4bae      	ldr	r3, [pc, #696]	; (80090a8 <_dtoa_r+0x318>)
 8008dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008df2:	ea33 0308 	bics.w	r3, r3, r8
 8008df6:	d11b      	bne.n	8008e30 <_dtoa_r+0xa0>
 8008df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	b923      	cbnz	r3, 8008e0e <_dtoa_r+0x7e>
 8008e04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f000 8545 	beq.w	8009898 <_dtoa_r+0xb08>
 8008e0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e10:	b953      	cbnz	r3, 8008e28 <_dtoa_r+0x98>
 8008e12:	4ba6      	ldr	r3, [pc, #664]	; (80090ac <_dtoa_r+0x31c>)
 8008e14:	e021      	b.n	8008e5a <_dtoa_r+0xca>
 8008e16:	4ba6      	ldr	r3, [pc, #664]	; (80090b0 <_dtoa_r+0x320>)
 8008e18:	9306      	str	r3, [sp, #24]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	9806      	ldr	r0, [sp, #24]
 8008e22:	b015      	add	sp, #84	; 0x54
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	4ba0      	ldr	r3, [pc, #640]	; (80090ac <_dtoa_r+0x31c>)
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	3303      	adds	r3, #3
 8008e2e:	e7f5      	b.n	8008e1c <_dtoa_r+0x8c>
 8008e30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	2300      	movs	r3, #0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	f7f7 fdb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008e40:	4682      	mov	sl, r0
 8008e42:	b160      	cbz	r0, 8008e5e <_dtoa_r+0xce>
 8008e44:	2301      	movs	r3, #1
 8008e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8520 	beq.w	8009892 <_dtoa_r+0xb02>
 8008e52:	4b98      	ldr	r3, [pc, #608]	; (80090b4 <_dtoa_r+0x324>)
 8008e54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	9306      	str	r3, [sp, #24]
 8008e5c:	e7e0      	b.n	8008e20 <_dtoa_r+0x90>
 8008e5e:	ab12      	add	r3, sp, #72	; 0x48
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	ab13      	add	r3, sp, #76	; 0x4c
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f001 f800 	bl	8009e70 <__d2b>
 8008e70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e74:	4683      	mov	fp, r0
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d07d      	beq.n	8008f76 <_dtoa_r+0x1e6>
 8008e7a:	46b0      	mov	r8, r6
 8008e7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008e84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008e88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b89      	ldr	r3, [pc, #548]	; (80090b8 <_dtoa_r+0x328>)
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 f966 	bl	8000168 <__aeabi_dsub>
 8008e9c:	a37c      	add	r3, pc, #496	; (adr r3, 8009090 <_dtoa_r+0x300>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fb19 	bl	80004d8 <__aeabi_dmul>
 8008ea6:	a37c      	add	r3, pc, #496	; (adr r3, 8009098 <_dtoa_r+0x308>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 f95e 	bl	800016c <__adddf3>
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	460f      	mov	r7, r1
 8008eb6:	f7f7 faa5 	bl	8000404 <__aeabi_i2d>
 8008eba:	a379      	add	r3, pc, #484	; (adr r3, 80090a0 <_dtoa_r+0x310>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7f7 fb0a 	bl	80004d8 <__aeabi_dmul>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 f94e 	bl	800016c <__adddf3>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	460f      	mov	r7, r1
 8008ed4:	f7f7 fdb0 	bl	8000a38 <__aeabi_d2iz>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4682      	mov	sl, r0
 8008edc:	2300      	movs	r3, #0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fd6b 	bl	80009bc <__aeabi_dcmplt>
 8008ee6:	b148      	cbz	r0, 8008efc <_dtoa_r+0x16c>
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f7f7 fa8b 	bl	8000404 <__aeabi_i2d>
 8008eee:	4632      	mov	r2, r6
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	f7f7 fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef6:	b908      	cbnz	r0, 8008efc <_dtoa_r+0x16c>
 8008ef8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008efc:	f1ba 0f16 	cmp.w	sl, #22
 8008f00:	d85a      	bhi.n	8008fb8 <_dtoa_r+0x228>
 8008f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f06:	496d      	ldr	r1, [pc, #436]	; (80090bc <_dtoa_r+0x32c>)
 8008f08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f10:	f7f7 fd72 	bl	80009f8 <__aeabi_dcmpgt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d051      	beq.n	8008fbc <_dtoa_r+0x22c>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f22:	1b5d      	subs	r5, r3, r5
 8008f24:	1e6b      	subs	r3, r5, #1
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	bf43      	ittte	mi
 8008f2a:	2300      	movmi	r3, #0
 8008f2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008f30:	9307      	strmi	r3, [sp, #28]
 8008f32:	f04f 0900 	movpl.w	r9, #0
 8008f36:	f1ba 0f00 	cmp.w	sl, #0
 8008f3a:	db41      	blt.n	8008fc0 <_dtoa_r+0x230>
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008f42:	4453      	add	r3, sl
 8008f44:	9307      	str	r3, [sp, #28]
 8008f46:	2300      	movs	r3, #0
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	f200 808f 	bhi.w	8009070 <_dtoa_r+0x2e0>
 8008f52:	2b05      	cmp	r3, #5
 8008f54:	bfc4      	itt	gt
 8008f56:	3b04      	subgt	r3, #4
 8008f58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008f5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f5c:	bfc8      	it	gt
 8008f5e:	2500      	movgt	r5, #0
 8008f60:	f1a3 0302 	sub.w	r3, r3, #2
 8008f64:	bfd8      	it	le
 8008f66:	2501      	movle	r5, #1
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	f200 808d 	bhi.w	8009088 <_dtoa_r+0x2f8>
 8008f6e:	e8df f003 	tbb	[pc, r3]
 8008f72:	7d7b      	.short	0x7d7b
 8008f74:	6f2f      	.short	0x6f2f
 8008f76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008f7a:	441d      	add	r5, r3
 8008f7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008f80:	2820      	cmp	r0, #32
 8008f82:	dd13      	ble.n	8008fac <_dtoa_r+0x21c>
 8008f84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	fa08 f800 	lsl.w	r8, r8, r0
 8008f8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008f92:	fa23 f000 	lsr.w	r0, r3, r0
 8008f96:	ea48 0000 	orr.w	r0, r8, r0
 8008f9a:	f7f7 fa23 	bl	80003e4 <__aeabi_ui2d>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008fa6:	3d01      	subs	r5, #1
 8008fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8008faa:	e771      	b.n	8008e90 <_dtoa_r+0x100>
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	f1c0 0020 	rsb	r0, r0, #32
 8008fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb6:	e7f0      	b.n	8008f9a <_dtoa_r+0x20a>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e7b0      	b.n	8008f1e <_dtoa_r+0x18e>
 8008fbc:	900d      	str	r0, [sp, #52]	; 0x34
 8008fbe:	e7af      	b.n	8008f20 <_dtoa_r+0x190>
 8008fc0:	f1ca 0300 	rsb	r3, sl, #0
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	eba9 090a 	sub.w	r9, r9, sl
 8008fcc:	930c      	str	r3, [sp, #48]	; 0x30
 8008fce:	e7bc      	b.n	8008f4a <_dtoa_r+0x1ba>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd74      	ble.n	80090c4 <_dtoa_r+0x334>
 8008fda:	4698      	mov	r8, r3
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fe2:	6072      	str	r2, [r6, #4]
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	f102 0014 	add.w	r0, r2, #20
 8008fea:	4298      	cmp	r0, r3
 8008fec:	6871      	ldr	r1, [r6, #4]
 8008fee:	d96e      	bls.n	80090ce <_dtoa_r+0x33e>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fcb0 	bl	8009956 <_Balloc>
 8008ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff8:	6030      	str	r0, [r6, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f1b8 0f0e 	cmp.w	r8, #14
 8009000:	9306      	str	r3, [sp, #24]
 8009002:	f200 80ed 	bhi.w	80091e0 <_dtoa_r+0x450>
 8009006:	2d00      	cmp	r5, #0
 8009008:	f000 80ea 	beq.w	80091e0 <_dtoa_r+0x450>
 800900c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009010:	f1ba 0f00 	cmp.w	sl, #0
 8009014:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009018:	dd77      	ble.n	800910a <_dtoa_r+0x37a>
 800901a:	4a28      	ldr	r2, [pc, #160]	; (80090bc <_dtoa_r+0x32c>)
 800901c:	f00a 030f 	and.w	r3, sl, #15
 8009020:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009028:	06f0      	lsls	r0, r6, #27
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009032:	d568      	bpl.n	8009106 <_dtoa_r+0x376>
 8009034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009038:	4b21      	ldr	r3, [pc, #132]	; (80090c0 <_dtoa_r+0x330>)
 800903a:	2503      	movs	r5, #3
 800903c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009040:	f7f7 fb74 	bl	800072c <__aeabi_ddiv>
 8009044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009048:	f006 060f 	and.w	r6, r6, #15
 800904c:	4f1c      	ldr	r7, [pc, #112]	; (80090c0 <_dtoa_r+0x330>)
 800904e:	e04f      	b.n	80090f0 <_dtoa_r+0x360>
 8009050:	2301      	movs	r3, #1
 8009052:	9309      	str	r3, [sp, #36]	; 0x24
 8009054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009056:	4453      	add	r3, sl
 8009058:	f103 0801 	add.w	r8, r3, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	4643      	mov	r3, r8
 8009060:	2b01      	cmp	r3, #1
 8009062:	bfb8      	it	lt
 8009064:	2301      	movlt	r3, #1
 8009066:	e7ba      	b.n	8008fde <_dtoa_r+0x24e>
 8009068:	2300      	movs	r3, #0
 800906a:	e7b2      	b.n	8008fd2 <_dtoa_r+0x242>
 800906c:	2300      	movs	r3, #0
 800906e:	e7f0      	b.n	8009052 <_dtoa_r+0x2c2>
 8009070:	2501      	movs	r5, #1
 8009072:	2300      	movs	r3, #0
 8009074:	9509      	str	r5, [sp, #36]	; 0x24
 8009076:	931e      	str	r3, [sp, #120]	; 0x78
 8009078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800907c:	2200      	movs	r2, #0
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	4698      	mov	r8, r3
 8009082:	2312      	movs	r3, #18
 8009084:	921f      	str	r2, [sp, #124]	; 0x7c
 8009086:	e7aa      	b.n	8008fde <_dtoa_r+0x24e>
 8009088:	2301      	movs	r3, #1
 800908a:	9309      	str	r3, [sp, #36]	; 0x24
 800908c:	e7f4      	b.n	8009078 <_dtoa_r+0x2e8>
 800908e:	bf00      	nop
 8009090:	636f4361 	.word	0x636f4361
 8009094:	3fd287a7 	.word	0x3fd287a7
 8009098:	8b60c8b3 	.word	0x8b60c8b3
 800909c:	3fc68a28 	.word	0x3fc68a28
 80090a0:	509f79fb 	.word	0x509f79fb
 80090a4:	3fd34413 	.word	0x3fd34413
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0800bd31 	.word	0x0800bd31
 80090b0:	0800bd28 	.word	0x0800bd28
 80090b4:	0800bd05 	.word	0x0800bd05
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0800bd60 	.word	0x0800bd60
 80090c0:	0800bd38 	.word	0x0800bd38
 80090c4:	2301      	movs	r3, #1
 80090c6:	9304      	str	r3, [sp, #16]
 80090c8:	4698      	mov	r8, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	e7da      	b.n	8009084 <_dtoa_r+0x2f4>
 80090ce:	3101      	adds	r1, #1
 80090d0:	6071      	str	r1, [r6, #4]
 80090d2:	0052      	lsls	r2, r2, #1
 80090d4:	e787      	b.n	8008fe6 <_dtoa_r+0x256>
 80090d6:	07f1      	lsls	r1, r6, #31
 80090d8:	d508      	bpl.n	80090ec <_dtoa_r+0x35c>
 80090da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e2:	f7f7 f9f9 	bl	80004d8 <__aeabi_dmul>
 80090e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090ea:	3501      	adds	r5, #1
 80090ec:	1076      	asrs	r6, r6, #1
 80090ee:	3708      	adds	r7, #8
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	d1f0      	bne.n	80090d6 <_dtoa_r+0x346>
 80090f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090fc:	f7f7 fb16 	bl	800072c <__aeabi_ddiv>
 8009100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009104:	e01b      	b.n	800913e <_dtoa_r+0x3ae>
 8009106:	2502      	movs	r5, #2
 8009108:	e7a0      	b.n	800904c <_dtoa_r+0x2bc>
 800910a:	f000 80a4 	beq.w	8009256 <_dtoa_r+0x4c6>
 800910e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009112:	f1ca 0600 	rsb	r6, sl, #0
 8009116:	4ba0      	ldr	r3, [pc, #640]	; (8009398 <_dtoa_r+0x608>)
 8009118:	f006 020f 	and.w	r2, r6, #15
 800911c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f9d8 	bl	80004d8 <__aeabi_dmul>
 8009128:	2502      	movs	r5, #2
 800912a:	2300      	movs	r3, #0
 800912c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009130:	4f9a      	ldr	r7, [pc, #616]	; (800939c <_dtoa_r+0x60c>)
 8009132:	1136      	asrs	r6, r6, #4
 8009134:	2e00      	cmp	r6, #0
 8009136:	f040 8083 	bne.w	8009240 <_dtoa_r+0x4b0>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e0      	bne.n	8009100 <_dtoa_r+0x370>
 800913e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 808a 	beq.w	800925a <_dtoa_r+0x4ca>
 8009146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800914a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800914e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009152:	2200      	movs	r2, #0
 8009154:	4b92      	ldr	r3, [pc, #584]	; (80093a0 <_dtoa_r+0x610>)
 8009156:	f7f7 fc31 	bl	80009bc <__aeabi_dcmplt>
 800915a:	2800      	cmp	r0, #0
 800915c:	d07d      	beq.n	800925a <_dtoa_r+0x4ca>
 800915e:	f1b8 0f00 	cmp.w	r8, #0
 8009162:	d07a      	beq.n	800925a <_dtoa_r+0x4ca>
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	dd36      	ble.n	80091d8 <_dtoa_r+0x448>
 800916a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800916e:	2200      	movs	r2, #0
 8009170:	4b8c      	ldr	r3, [pc, #560]	; (80093a4 <_dtoa_r+0x614>)
 8009172:	f7f7 f9b1 	bl	80004d8 <__aeabi_dmul>
 8009176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917a:	9e04      	ldr	r6, [sp, #16]
 800917c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8009180:	3501      	adds	r5, #1
 8009182:	4628      	mov	r0, r5
 8009184:	f7f7 f93e 	bl	8000404 <__aeabi_i2d>
 8009188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800918c:	f7f7 f9a4 	bl	80004d8 <__aeabi_dmul>
 8009190:	2200      	movs	r2, #0
 8009192:	4b85      	ldr	r3, [pc, #532]	; (80093a8 <_dtoa_r+0x618>)
 8009194:	f7f6 ffea 	bl	800016c <__adddf3>
 8009198:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800919c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80091a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d15c      	bne.n	8009260 <_dtoa_r+0x4d0>
 80091a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	4b7f      	ldr	r3, [pc, #508]	; (80093ac <_dtoa_r+0x61c>)
 80091ae:	f7f6 ffdb 	bl	8000168 <__aeabi_dsub>
 80091b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091b4:	462b      	mov	r3, r5
 80091b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ba:	f7f7 fc1d 	bl	80009f8 <__aeabi_dcmpgt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	f040 8281 	bne.w	80096c6 <_dtoa_r+0x936>
 80091c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80091ce:	f7f7 fbf5 	bl	80009bc <__aeabi_dcmplt>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f040 8275 	bne.w	80096c2 <_dtoa_r+0x932>
 80091d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f2c0 814b 	blt.w	800947e <_dtoa_r+0x6ee>
 80091e8:	f1ba 0f0e 	cmp.w	sl, #14
 80091ec:	f300 8147 	bgt.w	800947e <_dtoa_r+0x6ee>
 80091f0:	4b69      	ldr	r3, [pc, #420]	; (8009398 <_dtoa_r+0x608>)
 80091f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009200:	2b00      	cmp	r3, #0
 8009202:	f280 80d7 	bge.w	80093b4 <_dtoa_r+0x624>
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	f300 80d3 	bgt.w	80093b4 <_dtoa_r+0x624>
 800920e:	f040 8257 	bne.w	80096c0 <_dtoa_r+0x930>
 8009212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009216:	2200      	movs	r2, #0
 8009218:	4b64      	ldr	r3, [pc, #400]	; (80093ac <_dtoa_r+0x61c>)
 800921a:	f7f7 f95d 	bl	80004d8 <__aeabi_dmul>
 800921e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009222:	f7f7 fbdf 	bl	80009e4 <__aeabi_dcmpge>
 8009226:	4646      	mov	r6, r8
 8009228:	4647      	mov	r7, r8
 800922a:	2800      	cmp	r0, #0
 800922c:	f040 822d 	bne.w	800968a <_dtoa_r+0x8fa>
 8009230:	9b06      	ldr	r3, [sp, #24]
 8009232:	9a06      	ldr	r2, [sp, #24]
 8009234:	1c5d      	adds	r5, r3, #1
 8009236:	2331      	movs	r3, #49	; 0x31
 8009238:	f10a 0a01 	add.w	sl, sl, #1
 800923c:	7013      	strb	r3, [r2, #0]
 800923e:	e228      	b.n	8009692 <_dtoa_r+0x902>
 8009240:	07f2      	lsls	r2, r6, #31
 8009242:	d505      	bpl.n	8009250 <_dtoa_r+0x4c0>
 8009244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009248:	f7f7 f946 	bl	80004d8 <__aeabi_dmul>
 800924c:	2301      	movs	r3, #1
 800924e:	3501      	adds	r5, #1
 8009250:	1076      	asrs	r6, r6, #1
 8009252:	3708      	adds	r7, #8
 8009254:	e76e      	b.n	8009134 <_dtoa_r+0x3a4>
 8009256:	2502      	movs	r5, #2
 8009258:	e771      	b.n	800913e <_dtoa_r+0x3ae>
 800925a:	4657      	mov	r7, sl
 800925c:	4646      	mov	r6, r8
 800925e:	e790      	b.n	8009182 <_dtoa_r+0x3f2>
 8009260:	4b4d      	ldr	r3, [pc, #308]	; (8009398 <_dtoa_r+0x608>)
 8009262:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009266:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d048      	beq.n	8009302 <_dtoa_r+0x572>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	2000      	movs	r0, #0
 8009276:	494e      	ldr	r1, [pc, #312]	; (80093b0 <_dtoa_r+0x620>)
 8009278:	f7f7 fa58 	bl	800072c <__aeabi_ddiv>
 800927c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009280:	f7f6 ff72 	bl	8000168 <__aeabi_dsub>
 8009284:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009288:	9d06      	ldr	r5, [sp, #24]
 800928a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928e:	f7f7 fbd3 	bl	8000a38 <__aeabi_d2iz>
 8009292:	9011      	str	r0, [sp, #68]	; 0x44
 8009294:	f7f7 f8b6 	bl	8000404 <__aeabi_i2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a0:	f7f6 ff62 	bl	8000168 <__aeabi_dsub>
 80092a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092aa:	3330      	adds	r3, #48	; 0x30
 80092ac:	f805 3b01 	strb.w	r3, [r5], #1
 80092b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092b4:	f7f7 fb82 	bl	80009bc <__aeabi_dcmplt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d163      	bne.n	8009384 <_dtoa_r+0x5f4>
 80092bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092c0:	2000      	movs	r0, #0
 80092c2:	4937      	ldr	r1, [pc, #220]	; (80093a0 <_dtoa_r+0x610>)
 80092c4:	f7f6 ff50 	bl	8000168 <__aeabi_dsub>
 80092c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092cc:	f7f7 fb76 	bl	80009bc <__aeabi_dcmplt>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f040 80b5 	bne.w	8009440 <_dtoa_r+0x6b0>
 80092d6:	9b06      	ldr	r3, [sp, #24]
 80092d8:	1aeb      	subs	r3, r5, r3
 80092da:	429e      	cmp	r6, r3
 80092dc:	f77f af7c 	ble.w	80091d8 <_dtoa_r+0x448>
 80092e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092e4:	2200      	movs	r2, #0
 80092e6:	4b2f      	ldr	r3, [pc, #188]	; (80093a4 <_dtoa_r+0x614>)
 80092e8:	f7f7 f8f6 	bl	80004d8 <__aeabi_dmul>
 80092ec:	2200      	movs	r2, #0
 80092ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f6:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <_dtoa_r+0x614>)
 80092f8:	f7f7 f8ee 	bl	80004d8 <__aeabi_dmul>
 80092fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009300:	e7c3      	b.n	800928a <_dtoa_r+0x4fa>
 8009302:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009306:	f7f7 f8e7 	bl	80004d8 <__aeabi_dmul>
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009310:	199d      	adds	r5, r3, r6
 8009312:	461e      	mov	r6, r3
 8009314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009318:	f7f7 fb8e 	bl	8000a38 <__aeabi_d2iz>
 800931c:	9011      	str	r0, [sp, #68]	; 0x44
 800931e:	f7f7 f871 	bl	8000404 <__aeabi_i2d>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932a:	f7f6 ff1d 	bl	8000168 <__aeabi_dsub>
 800932e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009334:	3330      	adds	r3, #48	; 0x30
 8009336:	f806 3b01 	strb.w	r3, [r6], #1
 800933a:	42ae      	cmp	r6, r5
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	d124      	bne.n	800938c <_dtoa_r+0x5fc>
 8009342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009346:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <_dtoa_r+0x620>)
 8009348:	f7f6 ff10 	bl	800016c <__adddf3>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f7 fb50 	bl	80009f8 <__aeabi_dcmpgt>
 8009358:	2800      	cmp	r0, #0
 800935a:	d171      	bne.n	8009440 <_dtoa_r+0x6b0>
 800935c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009360:	2000      	movs	r0, #0
 8009362:	4913      	ldr	r1, [pc, #76]	; (80093b0 <_dtoa_r+0x620>)
 8009364:	f7f6 ff00 	bl	8000168 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009370:	f7f7 fb24 	bl	80009bc <__aeabi_dcmplt>
 8009374:	2800      	cmp	r0, #0
 8009376:	f43f af2f 	beq.w	80091d8 <_dtoa_r+0x448>
 800937a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800937e:	1e6a      	subs	r2, r5, #1
 8009380:	2b30      	cmp	r3, #48	; 0x30
 8009382:	d001      	beq.n	8009388 <_dtoa_r+0x5f8>
 8009384:	46ba      	mov	sl, r7
 8009386:	e04a      	b.n	800941e <_dtoa_r+0x68e>
 8009388:	4615      	mov	r5, r2
 800938a:	e7f6      	b.n	800937a <_dtoa_r+0x5ea>
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <_dtoa_r+0x614>)
 800938e:	f7f7 f8a3 	bl	80004d8 <__aeabi_dmul>
 8009392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009396:	e7bd      	b.n	8009314 <_dtoa_r+0x584>
 8009398:	0800bd60 	.word	0x0800bd60
 800939c:	0800bd38 	.word	0x0800bd38
 80093a0:	3ff00000 	.word	0x3ff00000
 80093a4:	40240000 	.word	0x40240000
 80093a8:	401c0000 	.word	0x401c0000
 80093ac:	40140000 	.word	0x40140000
 80093b0:	3fe00000 	.word	0x3fe00000
 80093b4:	9d06      	ldr	r5, [sp, #24]
 80093b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093be:	4630      	mov	r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	f7f7 f9b3 	bl	800072c <__aeabi_ddiv>
 80093c6:	f7f7 fb37 	bl	8000a38 <__aeabi_d2iz>
 80093ca:	4681      	mov	r9, r0
 80093cc:	f7f7 f81a 	bl	8000404 <__aeabi_i2d>
 80093d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d4:	f7f7 f880 	bl	80004d8 <__aeabi_dmul>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f6 fec2 	bl	8000168 <__aeabi_dsub>
 80093e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80093e8:	f805 6b01 	strb.w	r6, [r5], #1
 80093ec:	9e06      	ldr	r6, [sp, #24]
 80093ee:	4602      	mov	r2, r0
 80093f0:	1bae      	subs	r6, r5, r6
 80093f2:	45b0      	cmp	r8, r6
 80093f4:	460b      	mov	r3, r1
 80093f6:	d135      	bne.n	8009464 <_dtoa_r+0x6d4>
 80093f8:	f7f6 feb8 	bl	800016c <__adddf3>
 80093fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009400:	4606      	mov	r6, r0
 8009402:	460f      	mov	r7, r1
 8009404:	f7f7 faf8 	bl	80009f8 <__aeabi_dcmpgt>
 8009408:	b9c8      	cbnz	r0, 800943e <_dtoa_r+0x6ae>
 800940a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	f7f7 fac9 	bl	80009a8 <__aeabi_dcmpeq>
 8009416:	b110      	cbz	r0, 800941e <_dtoa_r+0x68e>
 8009418:	f019 0f01 	tst.w	r9, #1
 800941c:	d10f      	bne.n	800943e <_dtoa_r+0x6ae>
 800941e:	4659      	mov	r1, fp
 8009420:	4620      	mov	r0, r4
 8009422:	f000 facc 	bl	80099be <_Bfree>
 8009426:	2300      	movs	r3, #0
 8009428:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800942a:	702b      	strb	r3, [r5, #0]
 800942c:	f10a 0301 	add.w	r3, sl, #1
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009434:	2b00      	cmp	r3, #0
 8009436:	f43f acf3 	beq.w	8008e20 <_dtoa_r+0x90>
 800943a:	601d      	str	r5, [r3, #0]
 800943c:	e4f0      	b.n	8008e20 <_dtoa_r+0x90>
 800943e:	4657      	mov	r7, sl
 8009440:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009444:	1e6b      	subs	r3, r5, #1
 8009446:	2a39      	cmp	r2, #57	; 0x39
 8009448:	d106      	bne.n	8009458 <_dtoa_r+0x6c8>
 800944a:	9a06      	ldr	r2, [sp, #24]
 800944c:	429a      	cmp	r2, r3
 800944e:	d107      	bne.n	8009460 <_dtoa_r+0x6d0>
 8009450:	2330      	movs	r3, #48	; 0x30
 8009452:	7013      	strb	r3, [r2, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	3701      	adds	r7, #1
 8009458:	781a      	ldrb	r2, [r3, #0]
 800945a:	3201      	adds	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	e791      	b.n	8009384 <_dtoa_r+0x5f4>
 8009460:	461d      	mov	r5, r3
 8009462:	e7ed      	b.n	8009440 <_dtoa_r+0x6b0>
 8009464:	2200      	movs	r2, #0
 8009466:	4b99      	ldr	r3, [pc, #612]	; (80096cc <_dtoa_r+0x93c>)
 8009468:	f7f7 f836 	bl	80004d8 <__aeabi_dmul>
 800946c:	2200      	movs	r2, #0
 800946e:	2300      	movs	r3, #0
 8009470:	4606      	mov	r6, r0
 8009472:	460f      	mov	r7, r1
 8009474:	f7f7 fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8009478:	2800      	cmp	r0, #0
 800947a:	d09e      	beq.n	80093ba <_dtoa_r+0x62a>
 800947c:	e7cf      	b.n	800941e <_dtoa_r+0x68e>
 800947e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009480:	2a00      	cmp	r2, #0
 8009482:	f000 8088 	beq.w	8009596 <_dtoa_r+0x806>
 8009486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009488:	2a01      	cmp	r2, #1
 800948a:	dc6d      	bgt.n	8009568 <_dtoa_r+0x7d8>
 800948c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800948e:	2a00      	cmp	r2, #0
 8009490:	d066      	beq.n	8009560 <_dtoa_r+0x7d0>
 8009492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009496:	464d      	mov	r5, r9
 8009498:	9e08      	ldr	r6, [sp, #32]
 800949a:	9a07      	ldr	r2, [sp, #28]
 800949c:	2101      	movs	r1, #1
 800949e:	441a      	add	r2, r3
 80094a0:	4620      	mov	r0, r4
 80094a2:	4499      	add	r9, r3
 80094a4:	9207      	str	r2, [sp, #28]
 80094a6:	f000 fb2a 	bl	8009afe <__i2b>
 80094aa:	4607      	mov	r7, r0
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	dd0b      	ble.n	80094c8 <_dtoa_r+0x738>
 80094b0:	9b07      	ldr	r3, [sp, #28]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd08      	ble.n	80094c8 <_dtoa_r+0x738>
 80094b6:	42ab      	cmp	r3, r5
 80094b8:	bfa8      	it	ge
 80094ba:	462b      	movge	r3, r5
 80094bc:	9a07      	ldr	r2, [sp, #28]
 80094be:	eba9 0903 	sub.w	r9, r9, r3
 80094c2:	1aed      	subs	r5, r5, r3
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	9b08      	ldr	r3, [sp, #32]
 80094ca:	b1eb      	cbz	r3, 8009508 <_dtoa_r+0x778>
 80094cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d065      	beq.n	800959e <_dtoa_r+0x80e>
 80094d2:	b18e      	cbz	r6, 80094f8 <_dtoa_r+0x768>
 80094d4:	4639      	mov	r1, r7
 80094d6:	4632      	mov	r2, r6
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 fbaf 	bl	8009c3c <__pow5mult>
 80094de:	465a      	mov	r2, fp
 80094e0:	4601      	mov	r1, r0
 80094e2:	4607      	mov	r7, r0
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fb13 	bl	8009b10 <__multiply>
 80094ea:	4659      	mov	r1, fp
 80094ec:	900a      	str	r0, [sp, #40]	; 0x28
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fa65 	bl	80099be <_Bfree>
 80094f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f6:	469b      	mov	fp, r3
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	1b9a      	subs	r2, r3, r6
 80094fc:	d004      	beq.n	8009508 <_dtoa_r+0x778>
 80094fe:	4659      	mov	r1, fp
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fb9b 	bl	8009c3c <__pow5mult>
 8009506:	4683      	mov	fp, r0
 8009508:	2101      	movs	r1, #1
 800950a:	4620      	mov	r0, r4
 800950c:	f000 faf7 	bl	8009afe <__i2b>
 8009510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009512:	4606      	mov	r6, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 81c6 	beq.w	80098a6 <_dtoa_r+0xb16>
 800951a:	461a      	mov	r2, r3
 800951c:	4601      	mov	r1, r0
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fb8c 	bl	8009c3c <__pow5mult>
 8009524:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009526:	4606      	mov	r6, r0
 8009528:	2b01      	cmp	r3, #1
 800952a:	dc3e      	bgt.n	80095aa <_dtoa_r+0x81a>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d137      	bne.n	80095a2 <_dtoa_r+0x812>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009538:	2b00      	cmp	r3, #0
 800953a:	d134      	bne.n	80095a6 <_dtoa_r+0x816>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009542:	0d1b      	lsrs	r3, r3, #20
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	b12b      	cbz	r3, 8009554 <_dtoa_r+0x7c4>
 8009548:	9b07      	ldr	r3, [sp, #28]
 800954a:	f109 0901 	add.w	r9, r9, #1
 800954e:	3301      	adds	r3, #1
 8009550:	9307      	str	r3, [sp, #28]
 8009552:	2301      	movs	r3, #1
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009558:	2b00      	cmp	r3, #0
 800955a:	d128      	bne.n	80095ae <_dtoa_r+0x81e>
 800955c:	2001      	movs	r0, #1
 800955e:	e02e      	b.n	80095be <_dtoa_r+0x82e>
 8009560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009562:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009566:	e796      	b.n	8009496 <_dtoa_r+0x706>
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800956e:	42b3      	cmp	r3, r6
 8009570:	bfb7      	itett	lt
 8009572:	9b08      	ldrlt	r3, [sp, #32]
 8009574:	1b9e      	subge	r6, r3, r6
 8009576:	1af2      	sublt	r2, r6, r3
 8009578:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800957a:	bfbf      	itttt	lt
 800957c:	9608      	strlt	r6, [sp, #32]
 800957e:	189b      	addlt	r3, r3, r2
 8009580:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009582:	2600      	movlt	r6, #0
 8009584:	f1b8 0f00 	cmp.w	r8, #0
 8009588:	bfb9      	ittee	lt
 800958a:	eba9 0508 	sublt.w	r5, r9, r8
 800958e:	2300      	movlt	r3, #0
 8009590:	464d      	movge	r5, r9
 8009592:	4643      	movge	r3, r8
 8009594:	e781      	b.n	800949a <_dtoa_r+0x70a>
 8009596:	9e08      	ldr	r6, [sp, #32]
 8009598:	464d      	mov	r5, r9
 800959a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800959c:	e786      	b.n	80094ac <_dtoa_r+0x71c>
 800959e:	9a08      	ldr	r2, [sp, #32]
 80095a0:	e7ad      	b.n	80094fe <_dtoa_r+0x76e>
 80095a2:	2300      	movs	r3, #0
 80095a4:	e7d6      	b.n	8009554 <_dtoa_r+0x7c4>
 80095a6:	9b02      	ldr	r3, [sp, #8]
 80095a8:	e7d4      	b.n	8009554 <_dtoa_r+0x7c4>
 80095aa:	2300      	movs	r3, #0
 80095ac:	9308      	str	r3, [sp, #32]
 80095ae:	6933      	ldr	r3, [r6, #16]
 80095b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095b4:	6918      	ldr	r0, [r3, #16]
 80095b6:	f000 fa54 	bl	8009a62 <__hi0bits>
 80095ba:	f1c0 0020 	rsb	r0, r0, #32
 80095be:	9b07      	ldr	r3, [sp, #28]
 80095c0:	4418      	add	r0, r3
 80095c2:	f010 001f 	ands.w	r0, r0, #31
 80095c6:	d047      	beq.n	8009658 <_dtoa_r+0x8c8>
 80095c8:	f1c0 0320 	rsb	r3, r0, #32
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	dd3b      	ble.n	8009648 <_dtoa_r+0x8b8>
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	f1c0 001c 	rsb	r0, r0, #28
 80095d6:	4481      	add	r9, r0
 80095d8:	4405      	add	r5, r0
 80095da:	4403      	add	r3, r0
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	f1b9 0f00 	cmp.w	r9, #0
 80095e2:	dd05      	ble.n	80095f0 <_dtoa_r+0x860>
 80095e4:	4659      	mov	r1, fp
 80095e6:	464a      	mov	r2, r9
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fb75 	bl	8009cd8 <__lshift>
 80095ee:	4683      	mov	fp, r0
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd05      	ble.n	8009602 <_dtoa_r+0x872>
 80095f6:	4631      	mov	r1, r6
 80095f8:	461a      	mov	r2, r3
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fb6c 	bl	8009cd8 <__lshift>
 8009600:	4606      	mov	r6, r0
 8009602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009604:	b353      	cbz	r3, 800965c <_dtoa_r+0x8cc>
 8009606:	4631      	mov	r1, r6
 8009608:	4658      	mov	r0, fp
 800960a:	f000 fbb9 	bl	8009d80 <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	da24      	bge.n	800965c <_dtoa_r+0x8cc>
 8009612:	2300      	movs	r3, #0
 8009614:	4659      	mov	r1, fp
 8009616:	220a      	movs	r2, #10
 8009618:	4620      	mov	r0, r4
 800961a:	f000 f9e7 	bl	80099ec <__multadd>
 800961e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009620:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009624:	4683      	mov	fp, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 8144 	beq.w	80098b4 <_dtoa_r+0xb24>
 800962c:	2300      	movs	r3, #0
 800962e:	4639      	mov	r1, r7
 8009630:	220a      	movs	r2, #10
 8009632:	4620      	mov	r0, r4
 8009634:	f000 f9da 	bl	80099ec <__multadd>
 8009638:	9b04      	ldr	r3, [sp, #16]
 800963a:	4607      	mov	r7, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc4d      	bgt.n	80096dc <_dtoa_r+0x94c>
 8009640:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009642:	2b02      	cmp	r3, #2
 8009644:	dd4a      	ble.n	80096dc <_dtoa_r+0x94c>
 8009646:	e011      	b.n	800966c <_dtoa_r+0x8dc>
 8009648:	d0c9      	beq.n	80095de <_dtoa_r+0x84e>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	331c      	adds	r3, #28
 800964e:	441a      	add	r2, r3
 8009650:	4499      	add	r9, r3
 8009652:	441d      	add	r5, r3
 8009654:	4613      	mov	r3, r2
 8009656:	e7c1      	b.n	80095dc <_dtoa_r+0x84c>
 8009658:	4603      	mov	r3, r0
 800965a:	e7f6      	b.n	800964a <_dtoa_r+0x8ba>
 800965c:	f1b8 0f00 	cmp.w	r8, #0
 8009660:	dc36      	bgt.n	80096d0 <_dtoa_r+0x940>
 8009662:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009664:	2b02      	cmp	r3, #2
 8009666:	dd33      	ble.n	80096d0 <_dtoa_r+0x940>
 8009668:	f8cd 8010 	str.w	r8, [sp, #16]
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	b963      	cbnz	r3, 800968a <_dtoa_r+0x8fa>
 8009670:	4631      	mov	r1, r6
 8009672:	2205      	movs	r2, #5
 8009674:	4620      	mov	r0, r4
 8009676:	f000 f9b9 	bl	80099ec <__multadd>
 800967a:	4601      	mov	r1, r0
 800967c:	4606      	mov	r6, r0
 800967e:	4658      	mov	r0, fp
 8009680:	f000 fb7e 	bl	8009d80 <__mcmp>
 8009684:	2800      	cmp	r0, #0
 8009686:	f73f add3 	bgt.w	8009230 <_dtoa_r+0x4a0>
 800968a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800968c:	9d06      	ldr	r5, [sp, #24]
 800968e:	ea6f 0a03 	mvn.w	sl, r3
 8009692:	f04f 0900 	mov.w	r9, #0
 8009696:	4631      	mov	r1, r6
 8009698:	4620      	mov	r0, r4
 800969a:	f000 f990 	bl	80099be <_Bfree>
 800969e:	2f00      	cmp	r7, #0
 80096a0:	f43f aebd 	beq.w	800941e <_dtoa_r+0x68e>
 80096a4:	f1b9 0f00 	cmp.w	r9, #0
 80096a8:	d005      	beq.n	80096b6 <_dtoa_r+0x926>
 80096aa:	45b9      	cmp	r9, r7
 80096ac:	d003      	beq.n	80096b6 <_dtoa_r+0x926>
 80096ae:	4649      	mov	r1, r9
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 f984 	bl	80099be <_Bfree>
 80096b6:	4639      	mov	r1, r7
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 f980 	bl	80099be <_Bfree>
 80096be:	e6ae      	b.n	800941e <_dtoa_r+0x68e>
 80096c0:	2600      	movs	r6, #0
 80096c2:	4637      	mov	r7, r6
 80096c4:	e7e1      	b.n	800968a <_dtoa_r+0x8fa>
 80096c6:	46ba      	mov	sl, r7
 80096c8:	4637      	mov	r7, r6
 80096ca:	e5b1      	b.n	8009230 <_dtoa_r+0x4a0>
 80096cc:	40240000 	.word	0x40240000
 80096d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 80f3 	beq.w	80098c2 <_dtoa_r+0xb32>
 80096dc:	2d00      	cmp	r5, #0
 80096de:	dd05      	ble.n	80096ec <_dtoa_r+0x95c>
 80096e0:	4639      	mov	r1, r7
 80096e2:	462a      	mov	r2, r5
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 faf7 	bl	8009cd8 <__lshift>
 80096ea:	4607      	mov	r7, r0
 80096ec:	9b08      	ldr	r3, [sp, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d04c      	beq.n	800978c <_dtoa_r+0x9fc>
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f92e 	bl	8009956 <_Balloc>
 80096fa:	4605      	mov	r5, r0
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	f107 010c 	add.w	r1, r7, #12
 8009702:	3202      	adds	r2, #2
 8009704:	0092      	lsls	r2, r2, #2
 8009706:	300c      	adds	r0, #12
 8009708:	f000 f91a 	bl	8009940 <memcpy>
 800970c:	2201      	movs	r2, #1
 800970e:	4629      	mov	r1, r5
 8009710:	4620      	mov	r0, r4
 8009712:	f000 fae1 	bl	8009cd8 <__lshift>
 8009716:	46b9      	mov	r9, r7
 8009718:	4607      	mov	r7, r0
 800971a:	9b06      	ldr	r3, [sp, #24]
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	9b02      	ldr	r3, [sp, #8]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	9308      	str	r3, [sp, #32]
 8009726:	4631      	mov	r1, r6
 8009728:	4658      	mov	r0, fp
 800972a:	f7ff faa3 	bl	8008c74 <quorem>
 800972e:	4649      	mov	r1, r9
 8009730:	4605      	mov	r5, r0
 8009732:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fb22 	bl	8009d80 <__mcmp>
 800973c:	463a      	mov	r2, r7
 800973e:	9002      	str	r0, [sp, #8]
 8009740:	4631      	mov	r1, r6
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fb36 	bl	8009db4 <__mdiff>
 8009748:	68c3      	ldr	r3, [r0, #12]
 800974a:	4602      	mov	r2, r0
 800974c:	bb03      	cbnz	r3, 8009790 <_dtoa_r+0xa00>
 800974e:	4601      	mov	r1, r0
 8009750:	9009      	str	r0, [sp, #36]	; 0x24
 8009752:	4658      	mov	r0, fp
 8009754:	f000 fb14 	bl	8009d80 <__mcmp>
 8009758:	4603      	mov	r3, r0
 800975a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975c:	4611      	mov	r1, r2
 800975e:	4620      	mov	r0, r4
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	f000 f92c 	bl	80099be <_Bfree>
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	b9a3      	cbnz	r3, 8009794 <_dtoa_r+0xa04>
 800976a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800976c:	b992      	cbnz	r2, 8009794 <_dtoa_r+0xa04>
 800976e:	9a08      	ldr	r2, [sp, #32]
 8009770:	b982      	cbnz	r2, 8009794 <_dtoa_r+0xa04>
 8009772:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009776:	d029      	beq.n	80097cc <_dtoa_r+0xa3c>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dd01      	ble.n	8009782 <_dtoa_r+0x9f2>
 800977e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009782:	9b07      	ldr	r3, [sp, #28]
 8009784:	1c5d      	adds	r5, r3, #1
 8009786:	f883 8000 	strb.w	r8, [r3]
 800978a:	e784      	b.n	8009696 <_dtoa_r+0x906>
 800978c:	4638      	mov	r0, r7
 800978e:	e7c2      	b.n	8009716 <_dtoa_r+0x986>
 8009790:	2301      	movs	r3, #1
 8009792:	e7e3      	b.n	800975c <_dtoa_r+0x9cc>
 8009794:	9a02      	ldr	r2, [sp, #8]
 8009796:	2a00      	cmp	r2, #0
 8009798:	db04      	blt.n	80097a4 <_dtoa_r+0xa14>
 800979a:	d123      	bne.n	80097e4 <_dtoa_r+0xa54>
 800979c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800979e:	bb0a      	cbnz	r2, 80097e4 <_dtoa_r+0xa54>
 80097a0:	9a08      	ldr	r2, [sp, #32]
 80097a2:	b9fa      	cbnz	r2, 80097e4 <_dtoa_r+0xa54>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	ddec      	ble.n	8009782 <_dtoa_r+0x9f2>
 80097a8:	4659      	mov	r1, fp
 80097aa:	2201      	movs	r2, #1
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 fa93 	bl	8009cd8 <__lshift>
 80097b2:	4631      	mov	r1, r6
 80097b4:	4683      	mov	fp, r0
 80097b6:	f000 fae3 	bl	8009d80 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	dc03      	bgt.n	80097c6 <_dtoa_r+0xa36>
 80097be:	d1e0      	bne.n	8009782 <_dtoa_r+0x9f2>
 80097c0:	f018 0f01 	tst.w	r8, #1
 80097c4:	d0dd      	beq.n	8009782 <_dtoa_r+0x9f2>
 80097c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80097ca:	d1d8      	bne.n	800977e <_dtoa_r+0x9ee>
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	9a07      	ldr	r2, [sp, #28]
 80097d0:	1c5d      	adds	r5, r3, #1
 80097d2:	2339      	movs	r3, #57	; 0x39
 80097d4:	7013      	strb	r3, [r2, #0]
 80097d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097da:	1e6a      	subs	r2, r5, #1
 80097dc:	2b39      	cmp	r3, #57	; 0x39
 80097de:	d04d      	beq.n	800987c <_dtoa_r+0xaec>
 80097e0:	3301      	adds	r3, #1
 80097e2:	e052      	b.n	800988a <_dtoa_r+0xafa>
 80097e4:	9a07      	ldr	r2, [sp, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f102 0501 	add.w	r5, r2, #1
 80097ec:	dd06      	ble.n	80097fc <_dtoa_r+0xa6c>
 80097ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80097f2:	d0eb      	beq.n	80097cc <_dtoa_r+0xa3c>
 80097f4:	f108 0801 	add.w	r8, r8, #1
 80097f8:	9b07      	ldr	r3, [sp, #28]
 80097fa:	e7c4      	b.n	8009786 <_dtoa_r+0x9f6>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	9a04      	ldr	r2, [sp, #16]
 8009800:	1aeb      	subs	r3, r5, r3
 8009802:	4293      	cmp	r3, r2
 8009804:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009808:	d021      	beq.n	800984e <_dtoa_r+0xabe>
 800980a:	4659      	mov	r1, fp
 800980c:	2300      	movs	r3, #0
 800980e:	220a      	movs	r2, #10
 8009810:	4620      	mov	r0, r4
 8009812:	f000 f8eb 	bl	80099ec <__multadd>
 8009816:	45b9      	cmp	r9, r7
 8009818:	4683      	mov	fp, r0
 800981a:	f04f 0300 	mov.w	r3, #0
 800981e:	f04f 020a 	mov.w	r2, #10
 8009822:	4649      	mov	r1, r9
 8009824:	4620      	mov	r0, r4
 8009826:	d105      	bne.n	8009834 <_dtoa_r+0xaa4>
 8009828:	f000 f8e0 	bl	80099ec <__multadd>
 800982c:	4681      	mov	r9, r0
 800982e:	4607      	mov	r7, r0
 8009830:	9507      	str	r5, [sp, #28]
 8009832:	e778      	b.n	8009726 <_dtoa_r+0x996>
 8009834:	f000 f8da 	bl	80099ec <__multadd>
 8009838:	4639      	mov	r1, r7
 800983a:	4681      	mov	r9, r0
 800983c:	2300      	movs	r3, #0
 800983e:	220a      	movs	r2, #10
 8009840:	4620      	mov	r0, r4
 8009842:	f000 f8d3 	bl	80099ec <__multadd>
 8009846:	4607      	mov	r7, r0
 8009848:	e7f2      	b.n	8009830 <_dtoa_r+0xaa0>
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	4659      	mov	r1, fp
 8009850:	2201      	movs	r2, #1
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fa40 	bl	8009cd8 <__lshift>
 8009858:	4631      	mov	r1, r6
 800985a:	4683      	mov	fp, r0
 800985c:	f000 fa90 	bl	8009d80 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dcb8      	bgt.n	80097d6 <_dtoa_r+0xa46>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xadc>
 8009866:	f018 0f01 	tst.w	r8, #1
 800986a:	d1b4      	bne.n	80097d6 <_dtoa_r+0xa46>
 800986c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009870:	1e6a      	subs	r2, r5, #1
 8009872:	2b30      	cmp	r3, #48	; 0x30
 8009874:	f47f af0f 	bne.w	8009696 <_dtoa_r+0x906>
 8009878:	4615      	mov	r5, r2
 800987a:	e7f7      	b.n	800986c <_dtoa_r+0xadc>
 800987c:	9b06      	ldr	r3, [sp, #24]
 800987e:	4293      	cmp	r3, r2
 8009880:	d105      	bne.n	800988e <_dtoa_r+0xafe>
 8009882:	2331      	movs	r3, #49	; 0x31
 8009884:	9a06      	ldr	r2, [sp, #24]
 8009886:	f10a 0a01 	add.w	sl, sl, #1
 800988a:	7013      	strb	r3, [r2, #0]
 800988c:	e703      	b.n	8009696 <_dtoa_r+0x906>
 800988e:	4615      	mov	r5, r2
 8009890:	e7a1      	b.n	80097d6 <_dtoa_r+0xa46>
 8009892:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <_dtoa_r+0xb60>)
 8009894:	f7ff bae1 	b.w	8008e5a <_dtoa_r+0xca>
 8009898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800989a:	2b00      	cmp	r3, #0
 800989c:	f47f aabb 	bne.w	8008e16 <_dtoa_r+0x86>
 80098a0:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <_dtoa_r+0xb64>)
 80098a2:	f7ff bada 	b.w	8008e5a <_dtoa_r+0xca>
 80098a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f77f ae3f 	ble.w	800952c <_dtoa_r+0x79c>
 80098ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	e653      	b.n	800955c <_dtoa_r+0x7cc>
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dc03      	bgt.n	80098c2 <_dtoa_r+0xb32>
 80098ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098bc:	2b02      	cmp	r3, #2
 80098be:	f73f aed5 	bgt.w	800966c <_dtoa_r+0x8dc>
 80098c2:	9d06      	ldr	r5, [sp, #24]
 80098c4:	4631      	mov	r1, r6
 80098c6:	4658      	mov	r0, fp
 80098c8:	f7ff f9d4 	bl	8008c74 <quorem>
 80098cc:	9b06      	ldr	r3, [sp, #24]
 80098ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80098d2:	f805 8b01 	strb.w	r8, [r5], #1
 80098d6:	9a04      	ldr	r2, [sp, #16]
 80098d8:	1aeb      	subs	r3, r5, r3
 80098da:	429a      	cmp	r2, r3
 80098dc:	ddb5      	ble.n	800984a <_dtoa_r+0xaba>
 80098de:	4659      	mov	r1, fp
 80098e0:	2300      	movs	r3, #0
 80098e2:	220a      	movs	r2, #10
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 f881 	bl	80099ec <__multadd>
 80098ea:	4683      	mov	fp, r0
 80098ec:	e7ea      	b.n	80098c4 <_dtoa_r+0xb34>
 80098ee:	bf00      	nop
 80098f0:	0800bd04 	.word	0x0800bd04
 80098f4:	0800bd28 	.word	0x0800bd28

080098f8 <_localeconv_r>:
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <_localeconv_r+0x14>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6a18      	ldr	r0, [r3, #32]
 80098fe:	4b04      	ldr	r3, [pc, #16]	; (8009910 <_localeconv_r+0x18>)
 8009900:	2800      	cmp	r0, #0
 8009902:	bf08      	it	eq
 8009904:	4618      	moveq	r0, r3
 8009906:	30f0      	adds	r0, #240	; 0xf0
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000010 	.word	0x20000010
 8009910:	20000074 	.word	0x20000074

08009914 <malloc>:
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <malloc+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f000 bb53 	b.w	8009fc4 <_malloc_r>
 800991e:	bf00      	nop
 8009920:	20000010 	.word	0x20000010

08009924 <memchr>:
 8009924:	b510      	push	{r4, lr}
 8009926:	b2c9      	uxtb	r1, r1
 8009928:	4402      	add	r2, r0
 800992a:	4290      	cmp	r0, r2
 800992c:	4603      	mov	r3, r0
 800992e:	d101      	bne.n	8009934 <memchr+0x10>
 8009930:	2300      	movs	r3, #0
 8009932:	e003      	b.n	800993c <memchr+0x18>
 8009934:	781c      	ldrb	r4, [r3, #0]
 8009936:	3001      	adds	r0, #1
 8009938:	428c      	cmp	r4, r1
 800993a:	d1f6      	bne.n	800992a <memchr+0x6>
 800993c:	4618      	mov	r0, r3
 800993e:	bd10      	pop	{r4, pc}

08009940 <memcpy>:
 8009940:	b510      	push	{r4, lr}
 8009942:	1e43      	subs	r3, r0, #1
 8009944:	440a      	add	r2, r1
 8009946:	4291      	cmp	r1, r2
 8009948:	d100      	bne.n	800994c <memcpy+0xc>
 800994a:	bd10      	pop	{r4, pc}
 800994c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009954:	e7f7      	b.n	8009946 <memcpy+0x6>

08009956 <_Balloc>:
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800995a:	4604      	mov	r4, r0
 800995c:	460e      	mov	r6, r1
 800995e:	b93d      	cbnz	r5, 8009970 <_Balloc+0x1a>
 8009960:	2010      	movs	r0, #16
 8009962:	f7ff ffd7 	bl	8009914 <malloc>
 8009966:	6260      	str	r0, [r4, #36]	; 0x24
 8009968:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800996c:	6005      	str	r5, [r0, #0]
 800996e:	60c5      	str	r5, [r0, #12]
 8009970:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009972:	68eb      	ldr	r3, [r5, #12]
 8009974:	b183      	cbz	r3, 8009998 <_Balloc+0x42>
 8009976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800997e:	b9b8      	cbnz	r0, 80099b0 <_Balloc+0x5a>
 8009980:	2101      	movs	r1, #1
 8009982:	fa01 f506 	lsl.w	r5, r1, r6
 8009986:	1d6a      	adds	r2, r5, #5
 8009988:	0092      	lsls	r2, r2, #2
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fabf 	bl	8009f0e <_calloc_r>
 8009990:	b160      	cbz	r0, 80099ac <_Balloc+0x56>
 8009992:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009996:	e00e      	b.n	80099b6 <_Balloc+0x60>
 8009998:	2221      	movs	r2, #33	; 0x21
 800999a:	2104      	movs	r1, #4
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fab6 	bl	8009f0e <_calloc_r>
 80099a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a4:	60e8      	str	r0, [r5, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e4      	bne.n	8009976 <_Balloc+0x20>
 80099ac:	2000      	movs	r0, #0
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	6802      	ldr	r2, [r0, #0]
 80099b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80099b6:	2300      	movs	r3, #0
 80099b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099bc:	e7f7      	b.n	80099ae <_Balloc+0x58>

080099be <_Bfree>:
 80099be:	b570      	push	{r4, r5, r6, lr}
 80099c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80099c2:	4606      	mov	r6, r0
 80099c4:	460d      	mov	r5, r1
 80099c6:	b93c      	cbnz	r4, 80099d8 <_Bfree+0x1a>
 80099c8:	2010      	movs	r0, #16
 80099ca:	f7ff ffa3 	bl	8009914 <malloc>
 80099ce:	6270      	str	r0, [r6, #36]	; 0x24
 80099d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d4:	6004      	str	r4, [r0, #0]
 80099d6:	60c4      	str	r4, [r0, #12]
 80099d8:	b13d      	cbz	r5, 80099ea <_Bfree+0x2c>
 80099da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80099dc:	686a      	ldr	r2, [r5, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099e4:	6029      	str	r1, [r5, #0]
 80099e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80099ea:	bd70      	pop	{r4, r5, r6, pc}

080099ec <__multadd>:
 80099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	461f      	mov	r7, r3
 80099f2:	4606      	mov	r6, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	2300      	movs	r3, #0
 80099f8:	690d      	ldr	r5, [r1, #16]
 80099fa:	f101 0c14 	add.w	ip, r1, #20
 80099fe:	f8dc 0000 	ldr.w	r0, [ip]
 8009a02:	3301      	adds	r3, #1
 8009a04:	b281      	uxth	r1, r0
 8009a06:	fb02 7101 	mla	r1, r2, r1, r7
 8009a0a:	0c00      	lsrs	r0, r0, #16
 8009a0c:	0c0f      	lsrs	r7, r1, #16
 8009a0e:	fb02 7000 	mla	r0, r2, r0, r7
 8009a12:	b289      	uxth	r1, r1
 8009a14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a22:	dcec      	bgt.n	80099fe <__multadd+0x12>
 8009a24:	b1d7      	cbz	r7, 8009a5c <__multadd+0x70>
 8009a26:	68a3      	ldr	r3, [r4, #8]
 8009a28:	42ab      	cmp	r3, r5
 8009a2a:	dc12      	bgt.n	8009a52 <__multadd+0x66>
 8009a2c:	6861      	ldr	r1, [r4, #4]
 8009a2e:	4630      	mov	r0, r6
 8009a30:	3101      	adds	r1, #1
 8009a32:	f7ff ff90 	bl	8009956 <_Balloc>
 8009a36:	4680      	mov	r8, r0
 8009a38:	6922      	ldr	r2, [r4, #16]
 8009a3a:	f104 010c 	add.w	r1, r4, #12
 8009a3e:	3202      	adds	r2, #2
 8009a40:	0092      	lsls	r2, r2, #2
 8009a42:	300c      	adds	r0, #12
 8009a44:	f7ff ff7c 	bl	8009940 <memcpy>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffb7 	bl	80099be <_Bfree>
 8009a50:	4644      	mov	r4, r8
 8009a52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a56:	3501      	adds	r5, #1
 8009a58:	615f      	str	r7, [r3, #20]
 8009a5a:	6125      	str	r5, [r4, #16]
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a62 <__hi0bits>:
 8009a62:	0c02      	lsrs	r2, r0, #16
 8009a64:	0412      	lsls	r2, r2, #16
 8009a66:	4603      	mov	r3, r0
 8009a68:	b9b2      	cbnz	r2, 8009a98 <__hi0bits+0x36>
 8009a6a:	0403      	lsls	r3, r0, #16
 8009a6c:	2010      	movs	r0, #16
 8009a6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a72:	bf04      	itt	eq
 8009a74:	021b      	lsleq	r3, r3, #8
 8009a76:	3008      	addeq	r0, #8
 8009a78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a7c:	bf04      	itt	eq
 8009a7e:	011b      	lsleq	r3, r3, #4
 8009a80:	3004      	addeq	r0, #4
 8009a82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a86:	bf04      	itt	eq
 8009a88:	009b      	lsleq	r3, r3, #2
 8009a8a:	3002      	addeq	r0, #2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	db06      	blt.n	8009a9e <__hi0bits+0x3c>
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	d503      	bpl.n	8009a9c <__hi0bits+0x3a>
 8009a94:	3001      	adds	r0, #1
 8009a96:	4770      	bx	lr
 8009a98:	2000      	movs	r0, #0
 8009a9a:	e7e8      	b.n	8009a6e <__hi0bits+0xc>
 8009a9c:	2020      	movs	r0, #32
 8009a9e:	4770      	bx	lr

08009aa0 <__lo0bits>:
 8009aa0:	6803      	ldr	r3, [r0, #0]
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	f013 0207 	ands.w	r2, r3, #7
 8009aa8:	d00b      	beq.n	8009ac2 <__lo0bits+0x22>
 8009aaa:	07da      	lsls	r2, r3, #31
 8009aac:	d423      	bmi.n	8009af6 <__lo0bits+0x56>
 8009aae:	0798      	lsls	r0, r3, #30
 8009ab0:	bf49      	itett	mi
 8009ab2:	085b      	lsrmi	r3, r3, #1
 8009ab4:	089b      	lsrpl	r3, r3, #2
 8009ab6:	2001      	movmi	r0, #1
 8009ab8:	600b      	strmi	r3, [r1, #0]
 8009aba:	bf5c      	itt	pl
 8009abc:	600b      	strpl	r3, [r1, #0]
 8009abe:	2002      	movpl	r0, #2
 8009ac0:	4770      	bx	lr
 8009ac2:	b298      	uxth	r0, r3
 8009ac4:	b9a8      	cbnz	r0, 8009af2 <__lo0bits+0x52>
 8009ac6:	2010      	movs	r0, #16
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ace:	bf04      	itt	eq
 8009ad0:	0a1b      	lsreq	r3, r3, #8
 8009ad2:	3008      	addeq	r0, #8
 8009ad4:	071a      	lsls	r2, r3, #28
 8009ad6:	bf04      	itt	eq
 8009ad8:	091b      	lsreq	r3, r3, #4
 8009ada:	3004      	addeq	r0, #4
 8009adc:	079a      	lsls	r2, r3, #30
 8009ade:	bf04      	itt	eq
 8009ae0:	089b      	lsreq	r3, r3, #2
 8009ae2:	3002      	addeq	r0, #2
 8009ae4:	07da      	lsls	r2, r3, #31
 8009ae6:	d402      	bmi.n	8009aee <__lo0bits+0x4e>
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	d006      	beq.n	8009afa <__lo0bits+0x5a>
 8009aec:	3001      	adds	r0, #1
 8009aee:	600b      	str	r3, [r1, #0]
 8009af0:	4770      	bx	lr
 8009af2:	4610      	mov	r0, r2
 8009af4:	e7e9      	b.n	8009aca <__lo0bits+0x2a>
 8009af6:	2000      	movs	r0, #0
 8009af8:	4770      	bx	lr
 8009afa:	2020      	movs	r0, #32
 8009afc:	4770      	bx	lr

08009afe <__i2b>:
 8009afe:	b510      	push	{r4, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	2101      	movs	r1, #1
 8009b04:	f7ff ff27 	bl	8009956 <_Balloc>
 8009b08:	2201      	movs	r2, #1
 8009b0a:	6144      	str	r4, [r0, #20]
 8009b0c:	6102      	str	r2, [r0, #16]
 8009b0e:	bd10      	pop	{r4, pc}

08009b10 <__multiply>:
 8009b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4614      	mov	r4, r2
 8009b16:	690a      	ldr	r2, [r1, #16]
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	bfbe      	ittt	lt
 8009b20:	460b      	movlt	r3, r1
 8009b22:	46a0      	movlt	r8, r4
 8009b24:	461c      	movlt	r4, r3
 8009b26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b36:	eb07 0609 	add.w	r6, r7, r9
 8009b3a:	42b3      	cmp	r3, r6
 8009b3c:	bfb8      	it	lt
 8009b3e:	3101      	addlt	r1, #1
 8009b40:	f7ff ff09 	bl	8009956 <_Balloc>
 8009b44:	f100 0514 	add.w	r5, r0, #20
 8009b48:	462b      	mov	r3, r5
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009b50:	4573      	cmp	r3, lr
 8009b52:	d316      	bcc.n	8009b82 <__multiply+0x72>
 8009b54:	f104 0214 	add.w	r2, r4, #20
 8009b58:	f108 0114 	add.w	r1, r8, #20
 8009b5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009b60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	9201      	str	r2, [sp, #4]
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d80c      	bhi.n	8009b88 <__multiply+0x78>
 8009b6e:	2e00      	cmp	r6, #0
 8009b70:	dd03      	ble.n	8009b7a <__multiply+0x6a>
 8009b72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d05d      	beq.n	8009c36 <__multiply+0x126>
 8009b7a:	6106      	str	r6, [r0, #16]
 8009b7c:	b003      	add	sp, #12
 8009b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b82:	f843 2b04 	str.w	r2, [r3], #4
 8009b86:	e7e3      	b.n	8009b50 <__multiply+0x40>
 8009b88:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b8c:	f1bb 0f00 	cmp.w	fp, #0
 8009b90:	d023      	beq.n	8009bda <__multiply+0xca>
 8009b92:	4689      	mov	r9, r1
 8009b94:	46ac      	mov	ip, r5
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b9e:	f8dc a000 	ldr.w	sl, [ip]
 8009ba2:	b2a3      	uxth	r3, r4
 8009ba4:	fa1f fa8a 	uxth.w	sl, sl
 8009ba8:	fb0b a303 	mla	r3, fp, r3, sl
 8009bac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009bb0:	f8dc 4000 	ldr.w	r4, [ip]
 8009bb4:	4443      	add	r3, r8
 8009bb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009bba:	fb0b 840a 	mla	r4, fp, sl, r8
 8009bbe:	46e2      	mov	sl, ip
 8009bc0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009bca:	454f      	cmp	r7, r9
 8009bcc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009bd0:	f84a 3b04 	str.w	r3, [sl], #4
 8009bd4:	d82b      	bhi.n	8009c2e <__multiply+0x11e>
 8009bd6:	f8cc 8004 	str.w	r8, [ip, #4]
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	3204      	adds	r2, #4
 8009bde:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009be2:	f1ba 0f00 	cmp.w	sl, #0
 8009be6:	d020      	beq.n	8009c2a <__multiply+0x11a>
 8009be8:	4689      	mov	r9, r1
 8009bea:	46a8      	mov	r8, r5
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	f8b9 c000 	ldrh.w	ip, [r9]
 8009bf6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	fb0a 440c 	mla	r4, sl, ip, r4
 8009c00:	46c4      	mov	ip, r8
 8009c02:	445c      	add	r4, fp
 8009c04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c08:	f84c 3b04 	str.w	r3, [ip], #4
 8009c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c10:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	fb0a b303 	mla	r3, sl, r3, fp
 8009c1a:	454f      	cmp	r7, r9
 8009c1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009c20:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009c24:	d805      	bhi.n	8009c32 <__multiply+0x122>
 8009c26:	f8c8 3004 	str.w	r3, [r8, #4]
 8009c2a:	3504      	adds	r5, #4
 8009c2c:	e79b      	b.n	8009b66 <__multiply+0x56>
 8009c2e:	46d4      	mov	ip, sl
 8009c30:	e7b3      	b.n	8009b9a <__multiply+0x8a>
 8009c32:	46e0      	mov	r8, ip
 8009c34:	e7dd      	b.n	8009bf2 <__multiply+0xe2>
 8009c36:	3e01      	subs	r6, #1
 8009c38:	e799      	b.n	8009b6e <__multiply+0x5e>
	...

08009c3c <__pow5mult>:
 8009c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c40:	4615      	mov	r5, r2
 8009c42:	f012 0203 	ands.w	r2, r2, #3
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	d007      	beq.n	8009c5c <__pow5mult+0x20>
 8009c4c:	4c21      	ldr	r4, [pc, #132]	; (8009cd4 <__pow5mult+0x98>)
 8009c4e:	3a01      	subs	r2, #1
 8009c50:	2300      	movs	r3, #0
 8009c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c56:	f7ff fec9 	bl	80099ec <__multadd>
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	10ad      	asrs	r5, r5, #2
 8009c5e:	d035      	beq.n	8009ccc <__pow5mult+0x90>
 8009c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c62:	b93c      	cbnz	r4, 8009c74 <__pow5mult+0x38>
 8009c64:	2010      	movs	r0, #16
 8009c66:	f7ff fe55 	bl	8009914 <malloc>
 8009c6a:	6270      	str	r0, [r6, #36]	; 0x24
 8009c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c70:	6004      	str	r4, [r0, #0]
 8009c72:	60c4      	str	r4, [r0, #12]
 8009c74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c7c:	b94c      	cbnz	r4, 8009c92 <__pow5mult+0x56>
 8009c7e:	f240 2171 	movw	r1, #625	; 0x271
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ff3b 	bl	8009afe <__i2b>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	f04f 0800 	mov.w	r8, #0
 8009c96:	07eb      	lsls	r3, r5, #31
 8009c98:	d50a      	bpl.n	8009cb0 <__pow5mult+0x74>
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff ff36 	bl	8009b10 <__multiply>
 8009ca4:	4681      	mov	r9, r0
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff fe88 	bl	80099be <_Bfree>
 8009cae:	464f      	mov	r7, r9
 8009cb0:	106d      	asrs	r5, r5, #1
 8009cb2:	d00b      	beq.n	8009ccc <__pow5mult+0x90>
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	b938      	cbnz	r0, 8009cc8 <__pow5mult+0x8c>
 8009cb8:	4622      	mov	r2, r4
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff ff27 	bl	8009b10 <__multiply>
 8009cc2:	6020      	str	r0, [r4, #0]
 8009cc4:	f8c0 8000 	str.w	r8, [r0]
 8009cc8:	4604      	mov	r4, r0
 8009cca:	e7e4      	b.n	8009c96 <__pow5mult+0x5a>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0800be28 	.word	0x0800be28

08009cd8 <__lshift>:
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	460c      	mov	r4, r1
 8009cde:	4607      	mov	r7, r0
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ce8:	eb0a 0903 	add.w	r9, sl, r3
 8009cec:	6849      	ldr	r1, [r1, #4]
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	f109 0501 	add.w	r5, r9, #1
 8009cf4:	42ab      	cmp	r3, r5
 8009cf6:	db32      	blt.n	8009d5e <__lshift+0x86>
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7ff fe2c 	bl	8009956 <_Balloc>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4680      	mov	r8, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	f100 0114 	add.w	r1, r0, #20
 8009d08:	4553      	cmp	r3, sl
 8009d0a:	db2b      	blt.n	8009d64 <__lshift+0x8c>
 8009d0c:	6920      	ldr	r0, [r4, #16]
 8009d0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d12:	f104 0314 	add.w	r3, r4, #20
 8009d16:	f016 021f 	ands.w	r2, r6, #31
 8009d1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d22:	d025      	beq.n	8009d70 <__lshift+0x98>
 8009d24:	2000      	movs	r0, #0
 8009d26:	f1c2 0e20 	rsb	lr, r2, #32
 8009d2a:	468a      	mov	sl, r1
 8009d2c:	681e      	ldr	r6, [r3, #0]
 8009d2e:	4096      	lsls	r6, r2
 8009d30:	4330      	orrs	r0, r6
 8009d32:	f84a 0b04 	str.w	r0, [sl], #4
 8009d36:	f853 0b04 	ldr.w	r0, [r3], #4
 8009d3a:	459c      	cmp	ip, r3
 8009d3c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009d40:	d814      	bhi.n	8009d6c <__lshift+0x94>
 8009d42:	6048      	str	r0, [r1, #4]
 8009d44:	b108      	cbz	r0, 8009d4a <__lshift+0x72>
 8009d46:	f109 0502 	add.w	r5, r9, #2
 8009d4a:	3d01      	subs	r5, #1
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009d52:	4621      	mov	r1, r4
 8009d54:	f7ff fe33 	bl	80099be <_Bfree>
 8009d58:	4640      	mov	r0, r8
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5e:	3101      	adds	r1, #1
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	e7c7      	b.n	8009cf4 <__lshift+0x1c>
 8009d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	e7cd      	b.n	8009d08 <__lshift+0x30>
 8009d6c:	4651      	mov	r1, sl
 8009d6e:	e7dc      	b.n	8009d2a <__lshift+0x52>
 8009d70:	3904      	subs	r1, #4
 8009d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d76:	459c      	cmp	ip, r3
 8009d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d7c:	d8f9      	bhi.n	8009d72 <__lshift+0x9a>
 8009d7e:	e7e4      	b.n	8009d4a <__lshift+0x72>

08009d80 <__mcmp>:
 8009d80:	6903      	ldr	r3, [r0, #16]
 8009d82:	690a      	ldr	r2, [r1, #16]
 8009d84:	b530      	push	{r4, r5, lr}
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	d10c      	bne.n	8009da4 <__mcmp+0x24>
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	3014      	adds	r0, #20
 8009d8e:	3114      	adds	r1, #20
 8009d90:	1884      	adds	r4, r0, r2
 8009d92:	4411      	add	r1, r2
 8009d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d9c:	4295      	cmp	r5, r2
 8009d9e:	d003      	beq.n	8009da8 <__mcmp+0x28>
 8009da0:	d305      	bcc.n	8009dae <__mcmp+0x2e>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4618      	mov	r0, r3
 8009da6:	bd30      	pop	{r4, r5, pc}
 8009da8:	42a0      	cmp	r0, r4
 8009daa:	d3f3      	bcc.n	8009d94 <__mcmp+0x14>
 8009dac:	e7fa      	b.n	8009da4 <__mcmp+0x24>
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db2:	e7f7      	b.n	8009da4 <__mcmp+0x24>

08009db4 <__mdiff>:
 8009db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db8:	460d      	mov	r5, r1
 8009dba:	4607      	mov	r7, r0
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	f7ff ffdd 	bl	8009d80 <__mcmp>
 8009dc6:	1e06      	subs	r6, r0, #0
 8009dc8:	d108      	bne.n	8009ddc <__mdiff+0x28>
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7ff fdc2 	bl	8009956 <_Balloc>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ddc:	bfa4      	itt	ge
 8009dde:	4623      	movge	r3, r4
 8009de0:	462c      	movge	r4, r5
 8009de2:	4638      	mov	r0, r7
 8009de4:	6861      	ldr	r1, [r4, #4]
 8009de6:	bfa6      	itte	ge
 8009de8:	461d      	movge	r5, r3
 8009dea:	2600      	movge	r6, #0
 8009dec:	2601      	movlt	r6, #1
 8009dee:	f7ff fdb2 	bl	8009956 <_Balloc>
 8009df2:	f04f 0e00 	mov.w	lr, #0
 8009df6:	60c6      	str	r6, [r0, #12]
 8009df8:	692b      	ldr	r3, [r5, #16]
 8009dfa:	6926      	ldr	r6, [r4, #16]
 8009dfc:	f104 0214 	add.w	r2, r4, #20
 8009e00:	f105 0914 	add.w	r9, r5, #20
 8009e04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009e08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009e0c:	f100 0114 	add.w	r1, r0, #20
 8009e10:	f852 ab04 	ldr.w	sl, [r2], #4
 8009e14:	f859 5b04 	ldr.w	r5, [r9], #4
 8009e18:	fa1f f38a 	uxth.w	r3, sl
 8009e1c:	4473      	add	r3, lr
 8009e1e:	b2ac      	uxth	r4, r5
 8009e20:	1b1b      	subs	r3, r3, r4
 8009e22:	0c2c      	lsrs	r4, r5, #16
 8009e24:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009e28:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009e32:	45c8      	cmp	r8, r9
 8009e34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009e38:	4694      	mov	ip, r2
 8009e3a:	f841 4b04 	str.w	r4, [r1], #4
 8009e3e:	d8e7      	bhi.n	8009e10 <__mdiff+0x5c>
 8009e40:	45bc      	cmp	ip, r7
 8009e42:	d304      	bcc.n	8009e4e <__mdiff+0x9a>
 8009e44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e48:	b183      	cbz	r3, 8009e6c <__mdiff+0xb8>
 8009e4a:	6106      	str	r6, [r0, #16]
 8009e4c:	e7c4      	b.n	8009dd8 <__mdiff+0x24>
 8009e4e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009e52:	b2a2      	uxth	r2, r4
 8009e54:	4472      	add	r2, lr
 8009e56:	1413      	asrs	r3, r2, #16
 8009e58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e62:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009e66:	f841 2b04 	str.w	r2, [r1], #4
 8009e6a:	e7e9      	b.n	8009e40 <__mdiff+0x8c>
 8009e6c:	3e01      	subs	r6, #1
 8009e6e:	e7e9      	b.n	8009e44 <__mdiff+0x90>

08009e70 <__d2b>:
 8009e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e74:	461c      	mov	r4, r3
 8009e76:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	f7ff fd6a 	bl	8009956 <_Balloc>
 8009e82:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009e86:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	bb34      	cbnz	r4, 8009edc <__d2b+0x6c>
 8009e8e:	9201      	str	r2, [sp, #4]
 8009e90:	f1b8 0200 	subs.w	r2, r8, #0
 8009e94:	d027      	beq.n	8009ee6 <__d2b+0x76>
 8009e96:	a802      	add	r0, sp, #8
 8009e98:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009e9c:	f7ff fe00 	bl	8009aa0 <__lo0bits>
 8009ea0:	9900      	ldr	r1, [sp, #0]
 8009ea2:	b1f0      	cbz	r0, 8009ee2 <__d2b+0x72>
 8009ea4:	9a01      	ldr	r2, [sp, #4]
 8009ea6:	f1c0 0320 	rsb	r3, r0, #32
 8009eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	40c2      	lsrs	r2, r0
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	9201      	str	r2, [sp, #4]
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bf14      	ite	ne
 8009ebc:	2102      	movne	r1, #2
 8009ebe:	2101      	moveq	r1, #1
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	6139      	str	r1, [r7, #16]
 8009ec4:	b1c4      	cbz	r4, 8009ef8 <__d2b+0x88>
 8009ec6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009eca:	4404      	add	r4, r0
 8009ecc:	6034      	str	r4, [r6, #0]
 8009ece:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ed2:	6028      	str	r0, [r5, #0]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	b002      	add	sp, #8
 8009ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009edc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009ee0:	e7d5      	b.n	8009e8e <__d2b+0x1e>
 8009ee2:	6179      	str	r1, [r7, #20]
 8009ee4:	e7e7      	b.n	8009eb6 <__d2b+0x46>
 8009ee6:	a801      	add	r0, sp, #4
 8009ee8:	f7ff fdda 	bl	8009aa0 <__lo0bits>
 8009eec:	2101      	movs	r1, #1
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	6139      	str	r1, [r7, #16]
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	3020      	adds	r0, #32
 8009ef6:	e7e5      	b.n	8009ec4 <__d2b+0x54>
 8009ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009efc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f00:	6030      	str	r0, [r6, #0]
 8009f02:	6918      	ldr	r0, [r3, #16]
 8009f04:	f7ff fdad 	bl	8009a62 <__hi0bits>
 8009f08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f0c:	e7e1      	b.n	8009ed2 <__d2b+0x62>

08009f0e <_calloc_r>:
 8009f0e:	b538      	push	{r3, r4, r5, lr}
 8009f10:	fb02 f401 	mul.w	r4, r2, r1
 8009f14:	4621      	mov	r1, r4
 8009f16:	f000 f855 	bl	8009fc4 <_malloc_r>
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	b118      	cbz	r0, 8009f26 <_calloc_r+0x18>
 8009f1e:	4622      	mov	r2, r4
 8009f20:	2100      	movs	r1, #0
 8009f22:	f7fe fa2f 	bl	8008384 <memset>
 8009f26:	4628      	mov	r0, r5
 8009f28:	bd38      	pop	{r3, r4, r5, pc}
	...

08009f2c <_free_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4605      	mov	r5, r0
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d043      	beq.n	8009fbc <_free_r+0x90>
 8009f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f38:	1f0c      	subs	r4, r1, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	bfb8      	it	lt
 8009f3e:	18e4      	addlt	r4, r4, r3
 8009f40:	f000 fa27 	bl	800a392 <__malloc_lock>
 8009f44:	4a1e      	ldr	r2, [pc, #120]	; (8009fc0 <_free_r+0x94>)
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	4610      	mov	r0, r2
 8009f4a:	b933      	cbnz	r3, 8009f5a <_free_r+0x2e>
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6014      	str	r4, [r2, #0]
 8009f50:	4628      	mov	r0, r5
 8009f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f56:	f000 ba1d 	b.w	800a394 <__malloc_unlock>
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	d90b      	bls.n	8009f76 <_free_r+0x4a>
 8009f5e:	6821      	ldr	r1, [r4, #0]
 8009f60:	1862      	adds	r2, r4, r1
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bf01      	itttt	eq
 8009f66:	681a      	ldreq	r2, [r3, #0]
 8009f68:	685b      	ldreq	r3, [r3, #4]
 8009f6a:	1852      	addeq	r2, r2, r1
 8009f6c:	6022      	streq	r2, [r4, #0]
 8009f6e:	6063      	str	r3, [r4, #4]
 8009f70:	6004      	str	r4, [r0, #0]
 8009f72:	e7ed      	b.n	8009f50 <_free_r+0x24>
 8009f74:	4613      	mov	r3, r2
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	b10a      	cbz	r2, 8009f7e <_free_r+0x52>
 8009f7a:	42a2      	cmp	r2, r4
 8009f7c:	d9fa      	bls.n	8009f74 <_free_r+0x48>
 8009f7e:	6819      	ldr	r1, [r3, #0]
 8009f80:	1858      	adds	r0, r3, r1
 8009f82:	42a0      	cmp	r0, r4
 8009f84:	d10b      	bne.n	8009f9e <_free_r+0x72>
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	4401      	add	r1, r0
 8009f8a:	1858      	adds	r0, r3, r1
 8009f8c:	4282      	cmp	r2, r0
 8009f8e:	6019      	str	r1, [r3, #0]
 8009f90:	d1de      	bne.n	8009f50 <_free_r+0x24>
 8009f92:	6810      	ldr	r0, [r2, #0]
 8009f94:	6852      	ldr	r2, [r2, #4]
 8009f96:	4401      	add	r1, r0
 8009f98:	6019      	str	r1, [r3, #0]
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	e7d8      	b.n	8009f50 <_free_r+0x24>
 8009f9e:	d902      	bls.n	8009fa6 <_free_r+0x7a>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	e7d4      	b.n	8009f50 <_free_r+0x24>
 8009fa6:	6820      	ldr	r0, [r4, #0]
 8009fa8:	1821      	adds	r1, r4, r0
 8009faa:	428a      	cmp	r2, r1
 8009fac:	bf01      	itttt	eq
 8009fae:	6811      	ldreq	r1, [r2, #0]
 8009fb0:	6852      	ldreq	r2, [r2, #4]
 8009fb2:	1809      	addeq	r1, r1, r0
 8009fb4:	6021      	streq	r1, [r4, #0]
 8009fb6:	6062      	str	r2, [r4, #4]
 8009fb8:	605c      	str	r4, [r3, #4]
 8009fba:	e7c9      	b.n	8009f50 <_free_r+0x24>
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000270 	.word	0x20000270

08009fc4 <_malloc_r>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	1ccd      	adds	r5, r1, #3
 8009fc8:	f025 0503 	bic.w	r5, r5, #3
 8009fcc:	3508      	adds	r5, #8
 8009fce:	2d0c      	cmp	r5, #12
 8009fd0:	bf38      	it	cc
 8009fd2:	250c      	movcc	r5, #12
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	db01      	blt.n	8009fde <_malloc_r+0x1a>
 8009fda:	42a9      	cmp	r1, r5
 8009fdc:	d903      	bls.n	8009fe6 <_malloc_r+0x22>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
 8009fe6:	f000 f9d4 	bl	800a392 <__malloc_lock>
 8009fea:	4a21      	ldr	r2, [pc, #132]	; (800a070 <_malloc_r+0xac>)
 8009fec:	6814      	ldr	r4, [r2, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	b991      	cbnz	r1, 800a018 <_malloc_r+0x54>
 8009ff2:	4c20      	ldr	r4, [pc, #128]	; (800a074 <_malloc_r+0xb0>)
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	b91b      	cbnz	r3, 800a000 <_malloc_r+0x3c>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f98f 	bl	800a31c <_sbrk_r>
 8009ffe:	6020      	str	r0, [r4, #0]
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f98a 	bl	800a31c <_sbrk_r>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d124      	bne.n	800a056 <_malloc_r+0x92>
 800a00c:	230c      	movs	r3, #12
 800a00e:	4630      	mov	r0, r6
 800a010:	6033      	str	r3, [r6, #0]
 800a012:	f000 f9bf 	bl	800a394 <__malloc_unlock>
 800a016:	e7e4      	b.n	8009fe2 <_malloc_r+0x1e>
 800a018:	680b      	ldr	r3, [r1, #0]
 800a01a:	1b5b      	subs	r3, r3, r5
 800a01c:	d418      	bmi.n	800a050 <_malloc_r+0x8c>
 800a01e:	2b0b      	cmp	r3, #11
 800a020:	d90f      	bls.n	800a042 <_malloc_r+0x7e>
 800a022:	600b      	str	r3, [r1, #0]
 800a024:	18cc      	adds	r4, r1, r3
 800a026:	50cd      	str	r5, [r1, r3]
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f9b3 	bl	800a394 <__malloc_unlock>
 800a02e:	f104 000b 	add.w	r0, r4, #11
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	f020 0007 	bic.w	r0, r0, #7
 800a038:	1ac3      	subs	r3, r0, r3
 800a03a:	d0d3      	beq.n	8009fe4 <_malloc_r+0x20>
 800a03c:	425a      	negs	r2, r3
 800a03e:	50e2      	str	r2, [r4, r3]
 800a040:	e7d0      	b.n	8009fe4 <_malloc_r+0x20>
 800a042:	684b      	ldr	r3, [r1, #4]
 800a044:	428c      	cmp	r4, r1
 800a046:	bf16      	itet	ne
 800a048:	6063      	strne	r3, [r4, #4]
 800a04a:	6013      	streq	r3, [r2, #0]
 800a04c:	460c      	movne	r4, r1
 800a04e:	e7eb      	b.n	800a028 <_malloc_r+0x64>
 800a050:	460c      	mov	r4, r1
 800a052:	6849      	ldr	r1, [r1, #4]
 800a054:	e7cc      	b.n	8009ff0 <_malloc_r+0x2c>
 800a056:	1cc4      	adds	r4, r0, #3
 800a058:	f024 0403 	bic.w	r4, r4, #3
 800a05c:	42a0      	cmp	r0, r4
 800a05e:	d005      	beq.n	800a06c <_malloc_r+0xa8>
 800a060:	1a21      	subs	r1, r4, r0
 800a062:	4630      	mov	r0, r6
 800a064:	f000 f95a 	bl	800a31c <_sbrk_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	d0cf      	beq.n	800a00c <_malloc_r+0x48>
 800a06c:	6025      	str	r5, [r4, #0]
 800a06e:	e7db      	b.n	800a028 <_malloc_r+0x64>
 800a070:	20000270 	.word	0x20000270
 800a074:	20000274 	.word	0x20000274

0800a078 <__ssputs_r>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	688e      	ldr	r6, [r1, #8]
 800a07e:	4682      	mov	sl, r0
 800a080:	429e      	cmp	r6, r3
 800a082:	460c      	mov	r4, r1
 800a084:	4690      	mov	r8, r2
 800a086:	4699      	mov	r9, r3
 800a088:	d837      	bhi.n	800a0fa <__ssputs_r+0x82>
 800a08a:	898a      	ldrh	r2, [r1, #12]
 800a08c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a090:	d031      	beq.n	800a0f6 <__ssputs_r+0x7e>
 800a092:	2302      	movs	r3, #2
 800a094:	6825      	ldr	r5, [r4, #0]
 800a096:	6909      	ldr	r1, [r1, #16]
 800a098:	1a6f      	subs	r7, r5, r1
 800a09a:	6965      	ldr	r5, [r4, #20]
 800a09c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a0a4:	f109 0301 	add.w	r3, r9, #1
 800a0a8:	443b      	add	r3, r7
 800a0aa:	429d      	cmp	r5, r3
 800a0ac:	bf38      	it	cc
 800a0ae:	461d      	movcc	r5, r3
 800a0b0:	0553      	lsls	r3, r2, #21
 800a0b2:	d530      	bpl.n	800a116 <__ssputs_r+0x9e>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7ff ff85 	bl	8009fc4 <_malloc_r>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	b950      	cbnz	r0, 800a0d4 <__ssputs_r+0x5c>
 800a0be:	230c      	movs	r3, #12
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c4:	f8ca 3000 	str.w	r3, [sl]
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d4:	463a      	mov	r2, r7
 800a0d6:	6921      	ldr	r1, [r4, #16]
 800a0d8:	f7ff fc32 	bl	8009940 <memcpy>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	6126      	str	r6, [r4, #16]
 800a0ea:	443e      	add	r6, r7
 800a0ec:	6026      	str	r6, [r4, #0]
 800a0ee:	464e      	mov	r6, r9
 800a0f0:	6165      	str	r5, [r4, #20]
 800a0f2:	1bed      	subs	r5, r5, r7
 800a0f4:	60a5      	str	r5, [r4, #8]
 800a0f6:	454e      	cmp	r6, r9
 800a0f8:	d900      	bls.n	800a0fc <__ssputs_r+0x84>
 800a0fa:	464e      	mov	r6, r9
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	4641      	mov	r1, r8
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	f000 f92d 	bl	800a360 <memmove>
 800a106:	68a3      	ldr	r3, [r4, #8]
 800a108:	2000      	movs	r0, #0
 800a10a:	1b9b      	subs	r3, r3, r6
 800a10c:	60a3      	str	r3, [r4, #8]
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	441e      	add	r6, r3
 800a112:	6026      	str	r6, [r4, #0]
 800a114:	e7dc      	b.n	800a0d0 <__ssputs_r+0x58>
 800a116:	462a      	mov	r2, r5
 800a118:	f000 f93d 	bl	800a396 <_realloc_r>
 800a11c:	4606      	mov	r6, r0
 800a11e:	2800      	cmp	r0, #0
 800a120:	d1e2      	bne.n	800a0e8 <__ssputs_r+0x70>
 800a122:	6921      	ldr	r1, [r4, #16]
 800a124:	4650      	mov	r0, sl
 800a126:	f7ff ff01 	bl	8009f2c <_free_r>
 800a12a:	e7c8      	b.n	800a0be <__ssputs_r+0x46>

0800a12c <_svfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	461d      	mov	r5, r3
 800a132:	898b      	ldrh	r3, [r1, #12]
 800a134:	b09d      	sub	sp, #116	; 0x74
 800a136:	061f      	lsls	r7, r3, #24
 800a138:	4680      	mov	r8, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	4616      	mov	r6, r2
 800a13e:	d50f      	bpl.n	800a160 <_svfiprintf_r+0x34>
 800a140:	690b      	ldr	r3, [r1, #16]
 800a142:	b96b      	cbnz	r3, 800a160 <_svfiprintf_r+0x34>
 800a144:	2140      	movs	r1, #64	; 0x40
 800a146:	f7ff ff3d 	bl	8009fc4 <_malloc_r>
 800a14a:	6020      	str	r0, [r4, #0]
 800a14c:	6120      	str	r0, [r4, #16]
 800a14e:	b928      	cbnz	r0, 800a15c <_svfiprintf_r+0x30>
 800a150:	230c      	movs	r3, #12
 800a152:	f8c8 3000 	str.w	r3, [r8]
 800a156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a15a:	e0c8      	b.n	800a2ee <_svfiprintf_r+0x1c2>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	6163      	str	r3, [r4, #20]
 800a160:	2300      	movs	r3, #0
 800a162:	9309      	str	r3, [sp, #36]	; 0x24
 800a164:	2320      	movs	r3, #32
 800a166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a16a:	2330      	movs	r3, #48	; 0x30
 800a16c:	f04f 0b01 	mov.w	fp, #1
 800a170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a174:	9503      	str	r5, [sp, #12]
 800a176:	4637      	mov	r7, r6
 800a178:	463d      	mov	r5, r7
 800a17a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a17e:	b10b      	cbz	r3, 800a184 <_svfiprintf_r+0x58>
 800a180:	2b25      	cmp	r3, #37	; 0x25
 800a182:	d13e      	bne.n	800a202 <_svfiprintf_r+0xd6>
 800a184:	ebb7 0a06 	subs.w	sl, r7, r6
 800a188:	d00b      	beq.n	800a1a2 <_svfiprintf_r+0x76>
 800a18a:	4653      	mov	r3, sl
 800a18c:	4632      	mov	r2, r6
 800a18e:	4621      	mov	r1, r4
 800a190:	4640      	mov	r0, r8
 800a192:	f7ff ff71 	bl	800a078 <__ssputs_r>
 800a196:	3001      	adds	r0, #1
 800a198:	f000 80a4 	beq.w	800a2e4 <_svfiprintf_r+0x1b8>
 800a19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19e:	4453      	add	r3, sl
 800a1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a2:	783b      	ldrb	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 809d 	beq.w	800a2e4 <_svfiprintf_r+0x1b8>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	9307      	str	r3, [sp, #28]
 800a1b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a1be:	462f      	mov	r7, r5
 800a1c0:	2205      	movs	r2, #5
 800a1c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1c6:	4850      	ldr	r0, [pc, #320]	; (800a308 <_svfiprintf_r+0x1dc>)
 800a1c8:	f7ff fbac 	bl	8009924 <memchr>
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	b9d0      	cbnz	r0, 800a206 <_svfiprintf_r+0xda>
 800a1d0:	06d9      	lsls	r1, r3, #27
 800a1d2:	bf44      	itt	mi
 800a1d4:	2220      	movmi	r2, #32
 800a1d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1da:	071a      	lsls	r2, r3, #28
 800a1dc:	bf44      	itt	mi
 800a1de:	222b      	movmi	r2, #43	; 0x2b
 800a1e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1e4:	782a      	ldrb	r2, [r5, #0]
 800a1e6:	2a2a      	cmp	r2, #42	; 0x2a
 800a1e8:	d015      	beq.n	800a216 <_svfiprintf_r+0xea>
 800a1ea:	462f      	mov	r7, r5
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	250a      	movs	r5, #10
 800a1f0:	9a07      	ldr	r2, [sp, #28]
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f8:	3b30      	subs	r3, #48	; 0x30
 800a1fa:	2b09      	cmp	r3, #9
 800a1fc:	d94d      	bls.n	800a29a <_svfiprintf_r+0x16e>
 800a1fe:	b1b8      	cbz	r0, 800a230 <_svfiprintf_r+0x104>
 800a200:	e00f      	b.n	800a222 <_svfiprintf_r+0xf6>
 800a202:	462f      	mov	r7, r5
 800a204:	e7b8      	b.n	800a178 <_svfiprintf_r+0x4c>
 800a206:	4a40      	ldr	r2, [pc, #256]	; (800a308 <_svfiprintf_r+0x1dc>)
 800a208:	463d      	mov	r5, r7
 800a20a:	1a80      	subs	r0, r0, r2
 800a20c:	fa0b f000 	lsl.w	r0, fp, r0
 800a210:	4318      	orrs	r0, r3
 800a212:	9004      	str	r0, [sp, #16]
 800a214:	e7d3      	b.n	800a1be <_svfiprintf_r+0x92>
 800a216:	9a03      	ldr	r2, [sp, #12]
 800a218:	1d11      	adds	r1, r2, #4
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	9103      	str	r1, [sp, #12]
 800a21e:	2a00      	cmp	r2, #0
 800a220:	db01      	blt.n	800a226 <_svfiprintf_r+0xfa>
 800a222:	9207      	str	r2, [sp, #28]
 800a224:	e004      	b.n	800a230 <_svfiprintf_r+0x104>
 800a226:	4252      	negs	r2, r2
 800a228:	f043 0302 	orr.w	r3, r3, #2
 800a22c:	9207      	str	r2, [sp, #28]
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	783b      	ldrb	r3, [r7, #0]
 800a232:	2b2e      	cmp	r3, #46	; 0x2e
 800a234:	d10c      	bne.n	800a250 <_svfiprintf_r+0x124>
 800a236:	787b      	ldrb	r3, [r7, #1]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d133      	bne.n	800a2a4 <_svfiprintf_r+0x178>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	3702      	adds	r7, #2
 800a240:	1d1a      	adds	r2, r3, #4
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	9203      	str	r2, [sp, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfb8      	it	lt
 800a24a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a24e:	9305      	str	r3, [sp, #20]
 800a250:	4d2e      	ldr	r5, [pc, #184]	; (800a30c <_svfiprintf_r+0x1e0>)
 800a252:	2203      	movs	r2, #3
 800a254:	7839      	ldrb	r1, [r7, #0]
 800a256:	4628      	mov	r0, r5
 800a258:	f7ff fb64 	bl	8009924 <memchr>
 800a25c:	b138      	cbz	r0, 800a26e <_svfiprintf_r+0x142>
 800a25e:	2340      	movs	r3, #64	; 0x40
 800a260:	1b40      	subs	r0, r0, r5
 800a262:	fa03 f000 	lsl.w	r0, r3, r0
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3701      	adds	r7, #1
 800a26a:	4303      	orrs	r3, r0
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	7839      	ldrb	r1, [r7, #0]
 800a270:	2206      	movs	r2, #6
 800a272:	4827      	ldr	r0, [pc, #156]	; (800a310 <_svfiprintf_r+0x1e4>)
 800a274:	1c7e      	adds	r6, r7, #1
 800a276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a27a:	f7ff fb53 	bl	8009924 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d038      	beq.n	800a2f4 <_svfiprintf_r+0x1c8>
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <_svfiprintf_r+0x1e8>)
 800a284:	bb13      	cbnz	r3, 800a2cc <_svfiprintf_r+0x1a0>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	3308      	adds	r3, #8
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	444b      	add	r3, r9
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	e76d      	b.n	800a176 <_svfiprintf_r+0x4a>
 800a29a:	fb05 3202 	mla	r2, r5, r2, r3
 800a29e:	2001      	movs	r0, #1
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	e7a6      	b.n	800a1f2 <_svfiprintf_r+0xc6>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	250a      	movs	r5, #10
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	3701      	adds	r7, #1
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b4:	3a30      	subs	r2, #48	; 0x30
 800a2b6:	2a09      	cmp	r2, #9
 800a2b8:	d903      	bls.n	800a2c2 <_svfiprintf_r+0x196>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0c8      	beq.n	800a250 <_svfiprintf_r+0x124>
 800a2be:	9105      	str	r1, [sp, #20]
 800a2c0:	e7c6      	b.n	800a250 <_svfiprintf_r+0x124>
 800a2c2:	fb05 2101 	mla	r1, r5, r1, r2
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	e7f0      	b.n	800a2ae <_svfiprintf_r+0x182>
 800a2cc:	ab03      	add	r3, sp, #12
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4b11      	ldr	r3, [pc, #68]	; (800a318 <_svfiprintf_r+0x1ec>)
 800a2d4:	a904      	add	r1, sp, #16
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f7fe f8ee 	bl	80084b8 <_printf_float>
 800a2dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	d1d6      	bne.n	800a292 <_svfiprintf_r+0x166>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	f53f af35 	bmi.w	800a156 <_svfiprintf_r+0x2a>
 800a2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ee:	b01d      	add	sp, #116	; 0x74
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	ab03      	add	r3, sp, #12
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4b07      	ldr	r3, [pc, #28]	; (800a318 <_svfiprintf_r+0x1ec>)
 800a2fc:	a904      	add	r1, sp, #16
 800a2fe:	4640      	mov	r0, r8
 800a300:	f7fe fb86 	bl	8008a10 <_printf_i>
 800a304:	e7ea      	b.n	800a2dc <_svfiprintf_r+0x1b0>
 800a306:	bf00      	nop
 800a308:	0800be34 	.word	0x0800be34
 800a30c:	0800be3a 	.word	0x0800be3a
 800a310:	0800be3e 	.word	0x0800be3e
 800a314:	080084b9 	.word	0x080084b9
 800a318:	0800a079 	.word	0x0800a079

0800a31c <_sbrk_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	2300      	movs	r3, #0
 800a320:	4c05      	ldr	r4, [pc, #20]	; (800a338 <_sbrk_r+0x1c>)
 800a322:	4605      	mov	r5, r0
 800a324:	4608      	mov	r0, r1
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	f7f9 ff7a 	bl	8004220 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_sbrk_r+0x1a>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	b103      	cbz	r3, 800a336 <_sbrk_r+0x1a>
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20000758 	.word	0x20000758

0800a33c <__ascii_mbtowc>:
 800a33c:	b082      	sub	sp, #8
 800a33e:	b901      	cbnz	r1, 800a342 <__ascii_mbtowc+0x6>
 800a340:	a901      	add	r1, sp, #4
 800a342:	b142      	cbz	r2, 800a356 <__ascii_mbtowc+0x1a>
 800a344:	b14b      	cbz	r3, 800a35a <__ascii_mbtowc+0x1e>
 800a346:	7813      	ldrb	r3, [r2, #0]
 800a348:	600b      	str	r3, [r1, #0]
 800a34a:	7812      	ldrb	r2, [r2, #0]
 800a34c:	1c10      	adds	r0, r2, #0
 800a34e:	bf18      	it	ne
 800a350:	2001      	movne	r0, #1
 800a352:	b002      	add	sp, #8
 800a354:	4770      	bx	lr
 800a356:	4610      	mov	r0, r2
 800a358:	e7fb      	b.n	800a352 <__ascii_mbtowc+0x16>
 800a35a:	f06f 0001 	mvn.w	r0, #1
 800a35e:	e7f8      	b.n	800a352 <__ascii_mbtowc+0x16>

0800a360 <memmove>:
 800a360:	4288      	cmp	r0, r1
 800a362:	b510      	push	{r4, lr}
 800a364:	eb01 0302 	add.w	r3, r1, r2
 800a368:	d807      	bhi.n	800a37a <memmove+0x1a>
 800a36a:	1e42      	subs	r2, r0, #1
 800a36c:	4299      	cmp	r1, r3
 800a36e:	d00a      	beq.n	800a386 <memmove+0x26>
 800a370:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a374:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a378:	e7f8      	b.n	800a36c <memmove+0xc>
 800a37a:	4283      	cmp	r3, r0
 800a37c:	d9f5      	bls.n	800a36a <memmove+0xa>
 800a37e:	1881      	adds	r1, r0, r2
 800a380:	1ad2      	subs	r2, r2, r3
 800a382:	42d3      	cmn	r3, r2
 800a384:	d100      	bne.n	800a388 <memmove+0x28>
 800a386:	bd10      	pop	{r4, pc}
 800a388:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a38c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a390:	e7f7      	b.n	800a382 <memmove+0x22>

0800a392 <__malloc_lock>:
 800a392:	4770      	bx	lr

0800a394 <__malloc_unlock>:
 800a394:	4770      	bx	lr

0800a396 <_realloc_r>:
 800a396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a398:	4607      	mov	r7, r0
 800a39a:	4614      	mov	r4, r2
 800a39c:	460e      	mov	r6, r1
 800a39e:	b921      	cbnz	r1, 800a3aa <_realloc_r+0x14>
 800a3a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	f7ff be0d 	b.w	8009fc4 <_malloc_r>
 800a3aa:	b922      	cbnz	r2, 800a3b6 <_realloc_r+0x20>
 800a3ac:	f7ff fdbe 	bl	8009f2c <_free_r>
 800a3b0:	4625      	mov	r5, r4
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b6:	f000 f821 	bl	800a3fc <_malloc_usable_size_r>
 800a3ba:	42a0      	cmp	r0, r4
 800a3bc:	d20f      	bcs.n	800a3de <_realloc_r+0x48>
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7ff fdff 	bl	8009fc4 <_malloc_r>
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d0f2      	beq.n	800a3b2 <_realloc_r+0x1c>
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	f7ff fab6 	bl	8009940 <memcpy>
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7ff fda8 	bl	8009f2c <_free_r>
 800a3dc:	e7e9      	b.n	800a3b2 <_realloc_r+0x1c>
 800a3de:	4635      	mov	r5, r6
 800a3e0:	e7e7      	b.n	800a3b2 <_realloc_r+0x1c>

0800a3e2 <__ascii_wctomb>:
 800a3e2:	b149      	cbz	r1, 800a3f8 <__ascii_wctomb+0x16>
 800a3e4:	2aff      	cmp	r2, #255	; 0xff
 800a3e6:	bf8b      	itete	hi
 800a3e8:	238a      	movhi	r3, #138	; 0x8a
 800a3ea:	700a      	strbls	r2, [r1, #0]
 800a3ec:	6003      	strhi	r3, [r0, #0]
 800a3ee:	2001      	movls	r0, #1
 800a3f0:	bf88      	it	hi
 800a3f2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a3f6:	4770      	bx	lr
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4770      	bx	lr

0800a3fc <_malloc_usable_size_r>:
 800a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a400:	1f18      	subs	r0, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfbc      	itt	lt
 800a406:	580b      	ldrlt	r3, [r1, r0]
 800a408:	18c0      	addlt	r0, r0, r3
 800a40a:	4770      	bx	lr

0800a40c <sin>:
 800a40c:	b530      	push	{r4, r5, lr}
 800a40e:	4a1a      	ldr	r2, [pc, #104]	; (800a478 <sin+0x6c>)
 800a410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a414:	4293      	cmp	r3, r2
 800a416:	b087      	sub	sp, #28
 800a418:	dc06      	bgt.n	800a428 <sin+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	2200      	movs	r2, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2300      	movs	r3, #0
 800a422:	f001 f975 	bl	800b710 <__kernel_sin>
 800a426:	e006      	b.n	800a436 <sin+0x2a>
 800a428:	4a14      	ldr	r2, [pc, #80]	; (800a47c <sin+0x70>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	dd05      	ble.n	800a43a <sin+0x2e>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	f7f5 fe99 	bl	8000168 <__aeabi_dsub>
 800a436:	b007      	add	sp, #28
 800a438:	bd30      	pop	{r4, r5, pc}
 800a43a:	aa02      	add	r2, sp, #8
 800a43c:	f000 fac4 	bl	800a9c8 <__ieee754_rem_pio2>
 800a440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a444:	f000 0403 	and.w	r4, r0, #3
 800a448:	2c01      	cmp	r4, #1
 800a44a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44e:	d005      	beq.n	800a45c <sin+0x50>
 800a450:	2c02      	cmp	r4, #2
 800a452:	d006      	beq.n	800a462 <sin+0x56>
 800a454:	b964      	cbnz	r4, 800a470 <sin+0x64>
 800a456:	2401      	movs	r4, #1
 800a458:	9400      	str	r4, [sp, #0]
 800a45a:	e7e2      	b.n	800a422 <sin+0x16>
 800a45c:	f000 fd50 	bl	800af00 <__kernel_cos>
 800a460:	e7e9      	b.n	800a436 <sin+0x2a>
 800a462:	2401      	movs	r4, #1
 800a464:	9400      	str	r4, [sp, #0]
 800a466:	f001 f953 	bl	800b710 <__kernel_sin>
 800a46a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a46e:	e7e2      	b.n	800a436 <sin+0x2a>
 800a470:	f000 fd46 	bl	800af00 <__kernel_cos>
 800a474:	e7f9      	b.n	800a46a <sin+0x5e>
 800a476:	bf00      	nop
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	7fefffff 	.word	0x7fefffff

0800a480 <asin>:
 800a480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a484:	b08b      	sub	sp, #44	; 0x2c
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	f000 f8a1 	bl	800a5d0 <__ieee754_asin>
 800a48e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a524 <asin+0xa4>
 800a492:	4606      	mov	r6, r0
 800a494:	f998 3000 	ldrsb.w	r3, [r8]
 800a498:	460f      	mov	r7, r1
 800a49a:	3301      	adds	r3, #1
 800a49c:	d036      	beq.n	800a50c <asin+0x8c>
 800a49e:	4622      	mov	r2, r4
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	f7f6 fab1 	bl	8000a0c <__aeabi_dcmpun>
 800a4aa:	4681      	mov	r9, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d12d      	bne.n	800a50c <asin+0x8c>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	f001 f9e2 	bl	800b87c <fabs>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4b17      	ldr	r3, [pc, #92]	; (800a518 <asin+0x98>)
 800a4bc:	f7f6 fa9c 	bl	80009f8 <__aeabi_dcmpgt>
 800a4c0:	b320      	cbz	r0, 800a50c <asin+0x8c>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <asin+0x9c>)
 800a4c8:	4815      	ldr	r0, [pc, #84]	; (800a520 <asin+0xa0>)
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	f8cd 9020 	str.w	r9, [sp, #32]
 800a4d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a4d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a4d8:	f001 fa5c 	bl	800b994 <nan>
 800a4dc:	f998 3000 	ldrsb.w	r3, [r8]
 800a4e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d104      	bne.n	800a4f2 <asin+0x72>
 800a4e8:	f7fd ff22 	bl	8008330 <__errno>
 800a4ec:	2321      	movs	r3, #33	; 0x21
 800a4ee:	6003      	str	r3, [r0, #0]
 800a4f0:	e004      	b.n	800a4fc <asin+0x7c>
 800a4f2:	4668      	mov	r0, sp
 800a4f4:	f001 fa4c 	bl	800b990 <matherr>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0f5      	beq.n	800a4e8 <asin+0x68>
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	b11b      	cbz	r3, 800a508 <asin+0x88>
 800a500:	f7fd ff16 	bl	8008330 <__errno>
 800a504:	9b08      	ldr	r3, [sp, #32]
 800a506:	6003      	str	r3, [r0, #0]
 800a508:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	b00b      	add	sp, #44	; 0x2c
 800a512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a516:	bf00      	nop
 800a518:	3ff00000 	.word	0x3ff00000
 800a51c:	0800bf50 	.word	0x0800bf50
 800a520:	0800be39 	.word	0x0800be39
 800a524:	200001e0 	.word	0x200001e0

0800a528 <sqrt>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	b08b      	sub	sp, #44	; 0x2c
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	f000 fc39 	bl	800ada8 <__ieee754_sqrt>
 800a536:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <sqrt+0xa0>)
 800a538:	4680      	mov	r8, r0
 800a53a:	f993 a000 	ldrsb.w	sl, [r3]
 800a53e:	4689      	mov	r9, r1
 800a540:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a544:	d02b      	beq.n	800a59e <sqrt+0x76>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f6 fa5d 	bl	8000a0c <__aeabi_dcmpun>
 800a552:	4683      	mov	fp, r0
 800a554:	bb18      	cbnz	r0, 800a59e <sqrt+0x76>
 800a556:	2600      	movs	r6, #0
 800a558:	2700      	movs	r7, #0
 800a55a:	4632      	mov	r2, r6
 800a55c:	463b      	mov	r3, r7
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 fa2b 	bl	80009bc <__aeabi_dcmplt>
 800a566:	b1d0      	cbz	r0, 800a59e <sqrt+0x76>
 800a568:	2301      	movs	r3, #1
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	4b17      	ldr	r3, [pc, #92]	; (800a5cc <sqrt+0xa4>)
 800a56e:	f8cd b020 	str.w	fp, [sp, #32]
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a578:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a57c:	f1ba 0f00 	cmp.w	sl, #0
 800a580:	d112      	bne.n	800a5a8 <sqrt+0x80>
 800a582:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a586:	4668      	mov	r0, sp
 800a588:	f001 fa02 	bl	800b990 <matherr>
 800a58c:	b1b8      	cbz	r0, 800a5be <sqrt+0x96>
 800a58e:	9b08      	ldr	r3, [sp, #32]
 800a590:	b11b      	cbz	r3, 800a59a <sqrt+0x72>
 800a592:	f7fd fecd 	bl	8008330 <__errno>
 800a596:	9b08      	ldr	r3, [sp, #32]
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	b00b      	add	sp, #44	; 0x2c
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f6 f8bc 	bl	800072c <__aeabi_ddiv>
 800a5b4:	f1ba 0f02 	cmp.w	sl, #2
 800a5b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5bc:	d1e3      	bne.n	800a586 <sqrt+0x5e>
 800a5be:	f7fd feb7 	bl	8008330 <__errno>
 800a5c2:	2321      	movs	r3, #33	; 0x21
 800a5c4:	6003      	str	r3, [r0, #0]
 800a5c6:	e7e2      	b.n	800a58e <sqrt+0x66>
 800a5c8:	200001e0 	.word	0x200001e0
 800a5cc:	0800bf55 	.word	0x0800bf55

0800a5d0 <__ieee754_asin>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4bc4      	ldr	r3, [pc, #784]	; (800a8e8 <__ieee754_asin+0x318>)
 800a5d6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a5da:	b087      	sub	sp, #28
 800a5dc:	429f      	cmp	r7, r3
 800a5de:	4604      	mov	r4, r0
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	9103      	str	r1, [sp, #12]
 800a5e4:	dd2a      	ble.n	800a63c <__ieee754_asin+0x6c>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a5ec:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a5f0:	433b      	orrs	r3, r7
 800a5f2:	d114      	bne.n	800a61e <__ieee754_asin+0x4e>
 800a5f4:	a3a2      	add	r3, pc, #648	; (adr r3, 800a880 <__ieee754_asin+0x2b0>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f5 ff6d 	bl	80004d8 <__aeabi_dmul>
 800a5fe:	a3a2      	add	r3, pc, #648	; (adr r3, 800a888 <__ieee754_asin+0x2b8>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	4620      	mov	r0, r4
 800a60a:	4629      	mov	r1, r5
 800a60c:	f7f5 ff64 	bl	80004d8 <__aeabi_dmul>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4630      	mov	r0, r6
 800a616:	4639      	mov	r1, r7
 800a618:	f7f5 fda8 	bl	800016c <__adddf3>
 800a61c:	e007      	b.n	800a62e <__ieee754_asin+0x5e>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	f7f5 fda1 	bl	8000168 <__aeabi_dsub>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	f7f6 f87f 	bl	800072c <__aeabi_ddiv>
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	4620      	mov	r0, r4
 800a634:	4629      	mov	r1, r5
 800a636:	b007      	add	sp, #28
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4bab      	ldr	r3, [pc, #684]	; (800a8ec <__ieee754_asin+0x31c>)
 800a63e:	429f      	cmp	r7, r3
 800a640:	dc0e      	bgt.n	800a660 <__ieee754_asin+0x90>
 800a642:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a646:	f280 80ab 	bge.w	800a7a0 <__ieee754_asin+0x1d0>
 800a64a:	a391      	add	r3, pc, #580	; (adr r3, 800a890 <__ieee754_asin+0x2c0>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f7f5 fd8c 	bl	800016c <__adddf3>
 800a654:	2200      	movs	r2, #0
 800a656:	4ba6      	ldr	r3, [pc, #664]	; (800a8f0 <__ieee754_asin+0x320>)
 800a658:	f7f6 f9ce 	bl	80009f8 <__aeabi_dcmpgt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1e8      	bne.n	800a632 <__ieee754_asin+0x62>
 800a660:	4620      	mov	r0, r4
 800a662:	4629      	mov	r1, r5
 800a664:	f001 f90a 	bl	800b87c <fabs>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	2000      	movs	r0, #0
 800a66e:	49a0      	ldr	r1, [pc, #640]	; (800a8f0 <__ieee754_asin+0x320>)
 800a670:	f7f5 fd7a 	bl	8000168 <__aeabi_dsub>
 800a674:	2200      	movs	r2, #0
 800a676:	4b9f      	ldr	r3, [pc, #636]	; (800a8f4 <__ieee754_asin+0x324>)
 800a678:	f7f5 ff2e 	bl	80004d8 <__aeabi_dmul>
 800a67c:	a386      	add	r3, pc, #536	; (adr r3, 800a898 <__ieee754_asin+0x2c8>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	f7f5 ff27 	bl	80004d8 <__aeabi_dmul>
 800a68a:	a385      	add	r3, pc, #532	; (adr r3, 800a8a0 <__ieee754_asin+0x2d0>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f5 fd6c 	bl	800016c <__adddf3>
 800a694:	4622      	mov	r2, r4
 800a696:	462b      	mov	r3, r5
 800a698:	f7f5 ff1e 	bl	80004d8 <__aeabi_dmul>
 800a69c:	a382      	add	r3, pc, #520	; (adr r3, 800a8a8 <__ieee754_asin+0x2d8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 fd61 	bl	8000168 <__aeabi_dsub>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ff15 	bl	80004d8 <__aeabi_dmul>
 800a6ae:	a380      	add	r3, pc, #512	; (adr r3, 800a8b0 <__ieee754_asin+0x2e0>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fd5a 	bl	800016c <__adddf3>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff0c 	bl	80004d8 <__aeabi_dmul>
 800a6c0:	a37d      	add	r3, pc, #500	; (adr r3, 800a8b8 <__ieee754_asin+0x2e8>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fd4f 	bl	8000168 <__aeabi_dsub>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	a37b      	add	r3, pc, #492	; (adr r3, 800a8c0 <__ieee754_asin+0x2f0>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fd48 	bl	800016c <__adddf3>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	462b      	mov	r3, r5
 800a6e0:	f7f5 fefa 	bl	80004d8 <__aeabi_dmul>
 800a6e4:	a378      	add	r3, pc, #480	; (adr r3, 800a8c8 <__ieee754_asin+0x2f8>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4689      	mov	r9, r1
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f5 fef1 	bl	80004d8 <__aeabi_dmul>
 800a6f6:	a376      	add	r3, pc, #472	; (adr r3, 800a8d0 <__ieee754_asin+0x300>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 fd34 	bl	8000168 <__aeabi_dsub>
 800a700:	4622      	mov	r2, r4
 800a702:	462b      	mov	r3, r5
 800a704:	f7f5 fee8 	bl	80004d8 <__aeabi_dmul>
 800a708:	a373      	add	r3, pc, #460	; (adr r3, 800a8d8 <__ieee754_asin+0x308>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f5 fd2d 	bl	800016c <__adddf3>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 fedf 	bl	80004d8 <__aeabi_dmul>
 800a71a:	a371      	add	r3, pc, #452	; (adr r3, 800a8e0 <__ieee754_asin+0x310>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 fd22 	bl	8000168 <__aeabi_dsub>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 fed6 	bl	80004d8 <__aeabi_dmul>
 800a72c:	4b70      	ldr	r3, [pc, #448]	; (800a8f0 <__ieee754_asin+0x320>)
 800a72e:	2200      	movs	r2, #0
 800a730:	f7f5 fd1c 	bl	800016c <__adddf3>
 800a734:	e9cd 0100 	strd	r0, r1, [sp]
 800a738:	4620      	mov	r0, r4
 800a73a:	4629      	mov	r1, r5
 800a73c:	f000 fb34 	bl	800ada8 <__ieee754_sqrt>
 800a740:	4b6d      	ldr	r3, [pc, #436]	; (800a8f8 <__ieee754_asin+0x328>)
 800a742:	4682      	mov	sl, r0
 800a744:	429f      	cmp	r7, r3
 800a746:	468b      	mov	fp, r1
 800a748:	f340 80d8 	ble.w	800a8fc <__ieee754_asin+0x32c>
 800a74c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 ffea 	bl	800072c <__aeabi_ddiv>
 800a758:	4652      	mov	r2, sl
 800a75a:	465b      	mov	r3, fp
 800a75c:	f7f5 febc 	bl	80004d8 <__aeabi_dmul>
 800a760:	4652      	mov	r2, sl
 800a762:	465b      	mov	r3, fp
 800a764:	f7f5 fd02 	bl	800016c <__adddf3>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	f7f5 fcfe 	bl	800016c <__adddf3>
 800a770:	a345      	add	r3, pc, #276	; (adr r3, 800a888 <__ieee754_asin+0x2b8>)
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f7f5 fcf7 	bl	8000168 <__aeabi_dsub>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	a140      	add	r1, pc, #256	; (adr r1, 800a880 <__ieee754_asin+0x2b0>)
 800a780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a784:	f7f5 fcf0 	bl	8000168 <__aeabi_dsub>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	4604      	mov	r4, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfdc      	itt	le
 800a790:	4602      	movle	r2, r0
 800a792:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a796:	460d      	mov	r5, r1
 800a798:	bfdc      	itt	le
 800a79a:	4614      	movle	r4, r2
 800a79c:	461d      	movle	r5, r3
 800a79e:	e748      	b.n	800a632 <__ieee754_asin+0x62>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	f7f5 fe98 	bl	80004d8 <__aeabi_dmul>
 800a7a8:	a33b      	add	r3, pc, #236	; (adr r3, 800a898 <__ieee754_asin+0x2c8>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	f7f5 fe91 	bl	80004d8 <__aeabi_dmul>
 800a7b6:	a33a      	add	r3, pc, #232	; (adr r3, 800a8a0 <__ieee754_asin+0x2d0>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fcd6 	bl	800016c <__adddf3>
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	f7f5 fe88 	bl	80004d8 <__aeabi_dmul>
 800a7c8:	a337      	add	r3, pc, #220	; (adr r3, 800a8a8 <__ieee754_asin+0x2d8>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fccb 	bl	8000168 <__aeabi_dsub>
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	f7f5 fe7f 	bl	80004d8 <__aeabi_dmul>
 800a7da:	a335      	add	r3, pc, #212	; (adr r3, 800a8b0 <__ieee754_asin+0x2e0>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f7f5 fcc4 	bl	800016c <__adddf3>
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	f7f5 fe76 	bl	80004d8 <__aeabi_dmul>
 800a7ec:	a332      	add	r3, pc, #200	; (adr r3, 800a8b8 <__ieee754_asin+0x2e8>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fcb9 	bl	8000168 <__aeabi_dsub>
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	463b      	mov	r3, r7
 800a7fa:	f7f5 fe6d 	bl	80004d8 <__aeabi_dmul>
 800a7fe:	a330      	add	r3, pc, #192	; (adr r3, 800a8c0 <__ieee754_asin+0x2f0>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	f7f5 fcb2 	bl	800016c <__adddf3>
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	f7f5 fe64 	bl	80004d8 <__aeabi_dmul>
 800a810:	a32d      	add	r3, pc, #180	; (adr r3, 800a8c8 <__ieee754_asin+0x2f8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	4680      	mov	r8, r0
 800a818:	4689      	mov	r9, r1
 800a81a:	4630      	mov	r0, r6
 800a81c:	4639      	mov	r1, r7
 800a81e:	f7f5 fe5b 	bl	80004d8 <__aeabi_dmul>
 800a822:	a32b      	add	r3, pc, #172	; (adr r3, 800a8d0 <__ieee754_asin+0x300>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 fc9e 	bl	8000168 <__aeabi_dsub>
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	f7f5 fe52 	bl	80004d8 <__aeabi_dmul>
 800a834:	a328      	add	r3, pc, #160	; (adr r3, 800a8d8 <__ieee754_asin+0x308>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fc97 	bl	800016c <__adddf3>
 800a83e:	4632      	mov	r2, r6
 800a840:	463b      	mov	r3, r7
 800a842:	f7f5 fe49 	bl	80004d8 <__aeabi_dmul>
 800a846:	a326      	add	r3, pc, #152	; (adr r3, 800a8e0 <__ieee754_asin+0x310>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fc8c 	bl	8000168 <__aeabi_dsub>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	f7f5 fe40 	bl	80004d8 <__aeabi_dmul>
 800a858:	2200      	movs	r2, #0
 800a85a:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <__ieee754_asin+0x320>)
 800a85c:	f7f5 fc86 	bl	800016c <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4640      	mov	r0, r8
 800a866:	4649      	mov	r1, r9
 800a868:	f7f5 ff60 	bl	800072c <__aeabi_ddiv>
 800a86c:	4622      	mov	r2, r4
 800a86e:	462b      	mov	r3, r5
 800a870:	f7f5 fe32 	bl	80004d8 <__aeabi_dmul>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4620      	mov	r0, r4
 800a87a:	4629      	mov	r1, r5
 800a87c:	e6cc      	b.n	800a618 <__ieee754_asin+0x48>
 800a87e:	bf00      	nop
 800a880:	54442d18 	.word	0x54442d18
 800a884:	3ff921fb 	.word	0x3ff921fb
 800a888:	33145c07 	.word	0x33145c07
 800a88c:	3c91a626 	.word	0x3c91a626
 800a890:	8800759c 	.word	0x8800759c
 800a894:	7e37e43c 	.word	0x7e37e43c
 800a898:	0dfdf709 	.word	0x0dfdf709
 800a89c:	3f023de1 	.word	0x3f023de1
 800a8a0:	7501b288 	.word	0x7501b288
 800a8a4:	3f49efe0 	.word	0x3f49efe0
 800a8a8:	b5688f3b 	.word	0xb5688f3b
 800a8ac:	3fa48228 	.word	0x3fa48228
 800a8b0:	0e884455 	.word	0x0e884455
 800a8b4:	3fc9c155 	.word	0x3fc9c155
 800a8b8:	03eb6f7d 	.word	0x03eb6f7d
 800a8bc:	3fd4d612 	.word	0x3fd4d612
 800a8c0:	55555555 	.word	0x55555555
 800a8c4:	3fc55555 	.word	0x3fc55555
 800a8c8:	b12e9282 	.word	0xb12e9282
 800a8cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800a8d0:	1b8d0159 	.word	0x1b8d0159
 800a8d4:	3fe6066c 	.word	0x3fe6066c
 800a8d8:	9c598ac8 	.word	0x9c598ac8
 800a8dc:	40002ae5 	.word	0x40002ae5
 800a8e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a8e4:	40033a27 	.word	0x40033a27
 800a8e8:	3fefffff 	.word	0x3fefffff
 800a8ec:	3fdfffff 	.word	0x3fdfffff
 800a8f0:	3ff00000 	.word	0x3ff00000
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	3fef3332 	.word	0x3fef3332
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	460f      	mov	r7, r1
 800a902:	f7f5 fc33 	bl	800016c <__adddf3>
 800a906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f7f5 ff0b 	bl	800072c <__aeabi_ddiv>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a91e:	f7f5 fddb 	bl	80004d8 <__aeabi_dmul>
 800a922:	2600      	movs	r6, #0
 800a924:	4680      	mov	r8, r0
 800a926:	4689      	mov	r9, r1
 800a928:	4632      	mov	r2, r6
 800a92a:	465b      	mov	r3, fp
 800a92c:	4630      	mov	r0, r6
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fdd2 	bl	80004d8 <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fc14 	bl	8000168 <__aeabi_dsub>
 800a940:	4632      	mov	r2, r6
 800a942:	4604      	mov	r4, r0
 800a944:	460d      	mov	r5, r1
 800a946:	465b      	mov	r3, fp
 800a948:	4650      	mov	r0, sl
 800a94a:	4659      	mov	r1, fp
 800a94c:	f7f5 fc0e 	bl	800016c <__adddf3>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4620      	mov	r0, r4
 800a956:	4629      	mov	r1, r5
 800a958:	f7f5 fee8 	bl	800072c <__aeabi_ddiv>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	f7f5 fc04 	bl	800016c <__adddf3>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	a113      	add	r1, pc, #76	; (adr r1, 800a9b8 <__ieee754_asin+0x3e8>)
 800a96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96e:	f7f5 fbfb 	bl	8000168 <__aeabi_dsub>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	f7f5 fbf5 	bl	8000168 <__aeabi_dsub>
 800a97e:	4632      	mov	r2, r6
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	465b      	mov	r3, fp
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f5 fbef 	bl	800016c <__adddf3>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	a10b      	add	r1, pc, #44	; (adr r1, 800a9c0 <__ieee754_asin+0x3f0>)
 800a994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a998:	f7f5 fbe6 	bl	8000168 <__aeabi_dsub>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	a104      	add	r1, pc, #16	; (adr r1, 800a9c0 <__ieee754_asin+0x3f0>)
 800a9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b2:	e6e7      	b.n	800a784 <__ieee754_asin+0x1b4>
 800a9b4:	f3af 8000 	nop.w
 800a9b8:	33145c07 	.word	0x33145c07
 800a9bc:	3c91a626 	.word	0x3c91a626
 800a9c0:	54442d18 	.word	0x54442d18
 800a9c4:	3fe921fb 	.word	0x3fe921fb

0800a9c8 <__ieee754_rem_pio2>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4ac2      	ldr	r2, [pc, #776]	; (800acd8 <__ieee754_rem_pio2+0x310>)
 800a9d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a9d4:	4592      	cmp	sl, r2
 800a9d6:	b08d      	sub	sp, #52	; 0x34
 800a9d8:	468b      	mov	fp, r1
 800a9da:	dc07      	bgt.n	800a9ec <__ieee754_rem_pio2+0x24>
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e9c4 0100 	strd	r0, r1, [r4]
 800a9e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	e023      	b.n	800aa34 <__ieee754_rem_pio2+0x6c>
 800a9ec:	4abb      	ldr	r2, [pc, #748]	; (800acdc <__ieee754_rem_pio2+0x314>)
 800a9ee:	4592      	cmp	sl, r2
 800a9f0:	dc71      	bgt.n	800aad6 <__ieee754_rem_pio2+0x10e>
 800a9f2:	a3ab      	add	r3, pc, #684	; (adr r3, 800aca0 <__ieee754_rem_pio2+0x2d8>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	4db9      	ldr	r5, [pc, #740]	; (800ace0 <__ieee754_rem_pio2+0x318>)
 800a9fc:	dd36      	ble.n	800aa6c <__ieee754_rem_pio2+0xa4>
 800a9fe:	f7f5 fbb3 	bl	8000168 <__aeabi_dsub>
 800aa02:	45aa      	cmp	sl, r5
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	d018      	beq.n	800aa3c <__ieee754_rem_pio2+0x74>
 800aa0a:	a3a7      	add	r3, pc, #668	; (adr r3, 800aca8 <__ieee754_rem_pio2+0x2e0>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fbaa 	bl	8000168 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4630      	mov	r0, r6
 800aa1a:	e9c4 2300 	strd	r2, r3, [r4]
 800aa1e:	4639      	mov	r1, r7
 800aa20:	f7f5 fba2 	bl	8000168 <__aeabi_dsub>
 800aa24:	a3a0      	add	r3, pc, #640	; (adr r3, 800aca8 <__ieee754_rem_pio2+0x2e0>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fb9d 	bl	8000168 <__aeabi_dsub>
 800aa2e:	2501      	movs	r5, #1
 800aa30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa34:	4628      	mov	r0, r5
 800aa36:	b00d      	add	sp, #52	; 0x34
 800aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3c:	a39c      	add	r3, pc, #624	; (adr r3, 800acb0 <__ieee754_rem_pio2+0x2e8>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fb91 	bl	8000168 <__aeabi_dsub>
 800aa46:	a39c      	add	r3, pc, #624	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2f0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	f7f5 fb8a 	bl	8000168 <__aeabi_dsub>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4630      	mov	r0, r6
 800aa5a:	e9c4 2300 	strd	r2, r3, [r4]
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f5 fb82 	bl	8000168 <__aeabi_dsub>
 800aa64:	a394      	add	r3, pc, #592	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2f0>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	e7de      	b.n	800aa2a <__ieee754_rem_pio2+0x62>
 800aa6c:	f7f5 fb7e 	bl	800016c <__adddf3>
 800aa70:	45aa      	cmp	sl, r5
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	d016      	beq.n	800aaa6 <__ieee754_rem_pio2+0xde>
 800aa78:	a38b      	add	r3, pc, #556	; (adr r3, 800aca8 <__ieee754_rem_pio2+0x2e0>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f7f5 fb75 	bl	800016c <__adddf3>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4630      	mov	r0, r6
 800aa88:	e9c4 2300 	strd	r2, r3, [r4]
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	f7f5 fb6b 	bl	8000168 <__aeabi_dsub>
 800aa92:	a385      	add	r3, pc, #532	; (adr r3, 800aca8 <__ieee754_rem_pio2+0x2e0>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fb68 	bl	800016c <__adddf3>
 800aa9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aaa0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aaa4:	e7c6      	b.n	800aa34 <__ieee754_rem_pio2+0x6c>
 800aaa6:	a382      	add	r3, pc, #520	; (adr r3, 800acb0 <__ieee754_rem_pio2+0x2e8>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fb5e 	bl	800016c <__adddf3>
 800aab0:	a381      	add	r3, pc, #516	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2f0>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4606      	mov	r6, r0
 800aab8:	460f      	mov	r7, r1
 800aaba:	f7f5 fb57 	bl	800016c <__adddf3>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4630      	mov	r0, r6
 800aac4:	e9c4 2300 	strd	r2, r3, [r4]
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fb4d 	bl	8000168 <__aeabi_dsub>
 800aace:	a37a      	add	r3, pc, #488	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2f0>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	e7e0      	b.n	800aa98 <__ieee754_rem_pio2+0xd0>
 800aad6:	4a83      	ldr	r2, [pc, #524]	; (800ace4 <__ieee754_rem_pio2+0x31c>)
 800aad8:	4592      	cmp	sl, r2
 800aada:	f300 80d2 	bgt.w	800ac82 <__ieee754_rem_pio2+0x2ba>
 800aade:	f000 fecd 	bl	800b87c <fabs>
 800aae2:	a377      	add	r3, pc, #476	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f8>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	f7f5 fcf4 	bl	80004d8 <__aeabi_dmul>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4b7d      	ldr	r3, [pc, #500]	; (800ace8 <__ieee754_rem_pio2+0x320>)
 800aaf4:	f7f5 fb3a 	bl	800016c <__adddf3>
 800aaf8:	f7f5 ff9e 	bl	8000a38 <__aeabi_d2iz>
 800aafc:	4605      	mov	r5, r0
 800aafe:	f7f5 fc81 	bl	8000404 <__aeabi_i2d>
 800ab02:	a367      	add	r3, pc, #412	; (adr r3, 800aca0 <__ieee754_rem_pio2+0x2d8>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 fb26 	bl	8000168 <__aeabi_dsub>
 800ab1c:	a362      	add	r3, pc, #392	; (adr r3, 800aca8 <__ieee754_rem_pio2+0x2e0>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab2a:	f7f5 fcd5 	bl	80004d8 <__aeabi_dmul>
 800ab2e:	2d1f      	cmp	r5, #31
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	dc0e      	bgt.n	800ab54 <__ieee754_rem_pio2+0x18c>
 800ab36:	4b6d      	ldr	r3, [pc, #436]	; (800acec <__ieee754_rem_pio2+0x324>)
 800ab38:	1e6a      	subs	r2, r5, #1
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	4553      	cmp	r3, sl
 800ab40:	d008      	beq.n	800ab54 <__ieee754_rem_pio2+0x18c>
 800ab42:	4642      	mov	r2, r8
 800ab44:	464b      	mov	r3, r9
 800ab46:	4630      	mov	r0, r6
 800ab48:	4639      	mov	r1, r7
 800ab4a:	f7f5 fb0d 	bl	8000168 <__aeabi_dsub>
 800ab4e:	e9c4 0100 	strd	r0, r1, [r4]
 800ab52:	e011      	b.n	800ab78 <__ieee754_rem_pio2+0x1b0>
 800ab54:	464b      	mov	r3, r9
 800ab56:	4642      	mov	r2, r8
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f5 fb04 	bl	8000168 <__aeabi_dsub>
 800ab60:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ab64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab68:	ebaa 0303 	sub.w	r3, sl, r3
 800ab6c:	2b10      	cmp	r3, #16
 800ab6e:	dc1f      	bgt.n	800abb0 <__ieee754_rem_pio2+0x1e8>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	e9c4 2300 	strd	r2, r3, [r4]
 800ab78:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4653      	mov	r3, sl
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 faf1 	bl	8000168 <__aeabi_dsub>
 800ab86:	4642      	mov	r2, r8
 800ab88:	464b      	mov	r3, r9
 800ab8a:	f7f5 faed 	bl	8000168 <__aeabi_dsub>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	f1bb 0f00 	cmp.w	fp, #0
 800ab96:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab9a:	f6bf af4b 	bge.w	800aa34 <__ieee754_rem_pio2+0x6c>
 800ab9e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800aba2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800aba6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800abaa:	60e1      	str	r1, [r4, #12]
 800abac:	426d      	negs	r5, r5
 800abae:	e741      	b.n	800aa34 <__ieee754_rem_pio2+0x6c>
 800abb0:	a33f      	add	r3, pc, #252	; (adr r3, 800acb0 <__ieee754_rem_pio2+0x2e8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abba:	f7f5 fc8d 	bl	80004d8 <__aeabi_dmul>
 800abbe:	4680      	mov	r8, r0
 800abc0:	4689      	mov	r9, r1
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 facd 	bl	8000168 <__aeabi_dsub>
 800abce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fac5 	bl	8000168 <__aeabi_dsub>
 800abde:	4642      	mov	r2, r8
 800abe0:	464b      	mov	r3, r9
 800abe2:	f7f5 fac1 	bl	8000168 <__aeabi_dsub>
 800abe6:	a334      	add	r3, pc, #208	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2f0>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf4:	f7f5 fc70 	bl	80004d8 <__aeabi_dmul>
 800abf8:	4632      	mov	r2, r6
 800abfa:	463b      	mov	r3, r7
 800abfc:	f7f5 fab4 	bl	8000168 <__aeabi_dsub>
 800ac00:	460b      	mov	r3, r1
 800ac02:	4602      	mov	r2, r0
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac0c:	f7f5 faac 	bl	8000168 <__aeabi_dsub>
 800ac10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac14:	ebaa 0a03 	sub.w	sl, sl, r3
 800ac18:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800ac1c:	dc06      	bgt.n	800ac2c <__ieee754_rem_pio2+0x264>
 800ac1e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	e9c4 2300 	strd	r2, r3, [r4]
 800ac2a:	e7a5      	b.n	800ab78 <__ieee754_rem_pio2+0x1b0>
 800ac2c:	a326      	add	r3, pc, #152	; (adr r3, 800acc8 <__ieee754_rem_pio2+0x300>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac36:	f7f5 fc4f 	bl	80004d8 <__aeabi_dmul>
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac46:	f7f5 fa8f 	bl	8000168 <__aeabi_dsub>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460f      	mov	r7, r1
 800ac52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac56:	f7f5 fa87 	bl	8000168 <__aeabi_dsub>
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	f7f5 fa83 	bl	8000168 <__aeabi_dsub>
 800ac62:	a31b      	add	r3, pc, #108	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x308>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4689      	mov	r9, r1
 800ac6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac70:	f7f5 fc32 	bl	80004d8 <__aeabi_dmul>
 800ac74:	4642      	mov	r2, r8
 800ac76:	464b      	mov	r3, r9
 800ac78:	f7f5 fa76 	bl	8000168 <__aeabi_dsub>
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	4689      	mov	r9, r1
 800ac80:	e75f      	b.n	800ab42 <__ieee754_rem_pio2+0x17a>
 800ac82:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <__ieee754_rem_pio2+0x328>)
 800ac84:	4592      	cmp	sl, r2
 800ac86:	dd35      	ble.n	800acf4 <__ieee754_rem_pio2+0x32c>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	f7f5 fa6c 	bl	8000168 <__aeabi_dsub>
 800ac90:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac94:	e9c4 0100 	strd	r0, r1, [r4]
 800ac98:	e6a6      	b.n	800a9e8 <__ieee754_rem_pio2+0x20>
 800ac9a:	bf00      	nop
 800ac9c:	f3af 8000 	nop.w
 800aca0:	54400000 	.word	0x54400000
 800aca4:	3ff921fb 	.word	0x3ff921fb
 800aca8:	1a626331 	.word	0x1a626331
 800acac:	3dd0b461 	.word	0x3dd0b461
 800acb0:	1a600000 	.word	0x1a600000
 800acb4:	3dd0b461 	.word	0x3dd0b461
 800acb8:	2e037073 	.word	0x2e037073
 800acbc:	3ba3198a 	.word	0x3ba3198a
 800acc0:	6dc9c883 	.word	0x6dc9c883
 800acc4:	3fe45f30 	.word	0x3fe45f30
 800acc8:	2e000000 	.word	0x2e000000
 800accc:	3ba3198a 	.word	0x3ba3198a
 800acd0:	252049c1 	.word	0x252049c1
 800acd4:	397b839a 	.word	0x397b839a
 800acd8:	3fe921fb 	.word	0x3fe921fb
 800acdc:	4002d97b 	.word	0x4002d97b
 800ace0:	3ff921fb 	.word	0x3ff921fb
 800ace4:	413921fb 	.word	0x413921fb
 800ace8:	3fe00000 	.word	0x3fe00000
 800acec:	0800bf5c 	.word	0x0800bf5c
 800acf0:	7fefffff 	.word	0x7fefffff
 800acf4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800acf8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800acfc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ad00:	460f      	mov	r7, r1
 800ad02:	4606      	mov	r6, r0
 800ad04:	f7f5 fe98 	bl	8000a38 <__aeabi_d2iz>
 800ad08:	f7f5 fb7c 	bl	8000404 <__aeabi_i2d>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad18:	f7f5 fa26 	bl	8000168 <__aeabi_dsub>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4b20      	ldr	r3, [pc, #128]	; (800ada0 <__ieee754_rem_pio2+0x3d8>)
 800ad20:	f7f5 fbda 	bl	80004d8 <__aeabi_dmul>
 800ad24:	460f      	mov	r7, r1
 800ad26:	4606      	mov	r6, r0
 800ad28:	f7f5 fe86 	bl	8000a38 <__aeabi_d2iz>
 800ad2c:	f7f5 fb6a 	bl	8000404 <__aeabi_i2d>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad3c:	f7f5 fa14 	bl	8000168 <__aeabi_dsub>
 800ad40:	2200      	movs	r2, #0
 800ad42:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <__ieee754_rem_pio2+0x3d8>)
 800ad44:	f7f5 fbc8 	bl	80004d8 <__aeabi_dmul>
 800ad48:	f04f 0803 	mov.w	r8, #3
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	2700      	movs	r7, #0
 800ad50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad54:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ad58:	4632      	mov	r2, r6
 800ad5a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800ad64:	f7f5 fe20 	bl	80009a8 <__aeabi_dcmpeq>
 800ad68:	b9b8      	cbnz	r0, 800ad9a <__ieee754_rem_pio2+0x3d2>
 800ad6a:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <__ieee754_rem_pio2+0x3dc>)
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	2302      	movs	r3, #2
 800ad72:	4621      	mov	r1, r4
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	a806      	add	r0, sp, #24
 800ad78:	4643      	mov	r3, r8
 800ad7a:	f000 f97f 	bl	800b07c <__kernel_rem_pio2>
 800ad7e:	f1bb 0f00 	cmp.w	fp, #0
 800ad82:	4605      	mov	r5, r0
 800ad84:	f6bf ae56 	bge.w	800aa34 <__ieee754_rem_pio2+0x6c>
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad8e:	6063      	str	r3, [r4, #4]
 800ad90:	68e3      	ldr	r3, [r4, #12]
 800ad92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad96:	60e3      	str	r3, [r4, #12]
 800ad98:	e708      	b.n	800abac <__ieee754_rem_pio2+0x1e4>
 800ad9a:	46d0      	mov	r8, sl
 800ad9c:	e7dc      	b.n	800ad58 <__ieee754_rem_pio2+0x390>
 800ad9e:	bf00      	nop
 800ada0:	41700000 	.word	0x41700000
 800ada4:	0800bfdc 	.word	0x0800bfdc

0800ada8 <__ieee754_sqrt>:
 800ada8:	4b54      	ldr	r3, [pc, #336]	; (800aefc <__ieee754_sqrt+0x154>)
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	438b      	bics	r3, r1
 800adb0:	4606      	mov	r6, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	460a      	mov	r2, r1
 800adb6:	460c      	mov	r4, r1
 800adb8:	d10f      	bne.n	800adda <__ieee754_sqrt+0x32>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	f7f5 fb8b 	bl	80004d8 <__aeabi_dmul>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4630      	mov	r0, r6
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 f9cf 	bl	800016c <__adddf3>
 800adce:	4606      	mov	r6, r0
 800add0:	460d      	mov	r5, r1
 800add2:	4630      	mov	r0, r6
 800add4:	4629      	mov	r1, r5
 800add6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adda:	2900      	cmp	r1, #0
 800addc:	4607      	mov	r7, r0
 800adde:	4603      	mov	r3, r0
 800ade0:	dc0e      	bgt.n	800ae00 <__ieee754_sqrt+0x58>
 800ade2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ade6:	ea5c 0707 	orrs.w	r7, ip, r7
 800adea:	d0f2      	beq.n	800add2 <__ieee754_sqrt+0x2a>
 800adec:	b141      	cbz	r1, 800ae00 <__ieee754_sqrt+0x58>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	f7f5 f9b9 	bl	8000168 <__aeabi_dsub>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	f7f5 fc97 	bl	800072c <__aeabi_ddiv>
 800adfe:	e7e6      	b.n	800adce <__ieee754_sqrt+0x26>
 800ae00:	1512      	asrs	r2, r2, #20
 800ae02:	d074      	beq.n	800aeee <__ieee754_sqrt+0x146>
 800ae04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae08:	07d5      	lsls	r5, r2, #31
 800ae0a:	f04f 0500 	mov.w	r5, #0
 800ae0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ae12:	bf48      	it	mi
 800ae14:	0fd9      	lsrmi	r1, r3, #31
 800ae16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ae1a:	bf44      	itt	mi
 800ae1c:	005b      	lslmi	r3, r3, #1
 800ae1e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ae22:	1051      	asrs	r1, r2, #1
 800ae24:	0fda      	lsrs	r2, r3, #31
 800ae26:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	2216      	movs	r2, #22
 800ae2e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	1987      	adds	r7, r0, r6
 800ae36:	42a7      	cmp	r7, r4
 800ae38:	bfde      	ittt	le
 800ae3a:	19b8      	addle	r0, r7, r6
 800ae3c:	1be4      	suble	r4, r4, r7
 800ae3e:	19ad      	addle	r5, r5, r6
 800ae40:	0fdf      	lsrs	r7, r3, #31
 800ae42:	3a01      	subs	r2, #1
 800ae44:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ae48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae50:	d1f0      	bne.n	800ae34 <__ieee754_sqrt+0x8c>
 800ae52:	f04f 0c20 	mov.w	ip, #32
 800ae56:	4696      	mov	lr, r2
 800ae58:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae5c:	4284      	cmp	r4, r0
 800ae5e:	eb06 070e 	add.w	r7, r6, lr
 800ae62:	dc02      	bgt.n	800ae6a <__ieee754_sqrt+0xc2>
 800ae64:	d112      	bne.n	800ae8c <__ieee754_sqrt+0xe4>
 800ae66:	429f      	cmp	r7, r3
 800ae68:	d810      	bhi.n	800ae8c <__ieee754_sqrt+0xe4>
 800ae6a:	2f00      	cmp	r7, #0
 800ae6c:	eb07 0e06 	add.w	lr, r7, r6
 800ae70:	da42      	bge.n	800aef8 <__ieee754_sqrt+0x150>
 800ae72:	f1be 0f00 	cmp.w	lr, #0
 800ae76:	db3f      	blt.n	800aef8 <__ieee754_sqrt+0x150>
 800ae78:	f100 0801 	add.w	r8, r0, #1
 800ae7c:	1a24      	subs	r4, r4, r0
 800ae7e:	4640      	mov	r0, r8
 800ae80:	429f      	cmp	r7, r3
 800ae82:	bf88      	it	hi
 800ae84:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800ae88:	1bdb      	subs	r3, r3, r7
 800ae8a:	4432      	add	r2, r6
 800ae8c:	0064      	lsls	r4, r4, #1
 800ae8e:	f1bc 0c01 	subs.w	ip, ip, #1
 800ae92:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800ae96:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae9e:	d1dd      	bne.n	800ae5c <__ieee754_sqrt+0xb4>
 800aea0:	4323      	orrs	r3, r4
 800aea2:	d006      	beq.n	800aeb2 <__ieee754_sqrt+0x10a>
 800aea4:	1c54      	adds	r4, r2, #1
 800aea6:	bf0b      	itete	eq
 800aea8:	4662      	moveq	r2, ip
 800aeaa:	3201      	addne	r2, #1
 800aeac:	3501      	addeq	r5, #1
 800aeae:	f022 0201 	bicne.w	r2, r2, #1
 800aeb2:	106b      	asrs	r3, r5, #1
 800aeb4:	0852      	lsrs	r2, r2, #1
 800aeb6:	07e8      	lsls	r0, r5, #31
 800aeb8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aebc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aec0:	bf48      	it	mi
 800aec2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aec6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800aeca:	4616      	mov	r6, r2
 800aecc:	e781      	b.n	800add2 <__ieee754_sqrt+0x2a>
 800aece:	0adc      	lsrs	r4, r3, #11
 800aed0:	3915      	subs	r1, #21
 800aed2:	055b      	lsls	r3, r3, #21
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d0fa      	beq.n	800aece <__ieee754_sqrt+0x126>
 800aed8:	02e6      	lsls	r6, r4, #11
 800aeda:	d50a      	bpl.n	800aef2 <__ieee754_sqrt+0x14a>
 800aedc:	f1c2 0020 	rsb	r0, r2, #32
 800aee0:	fa23 f000 	lsr.w	r0, r3, r0
 800aee4:	1e55      	subs	r5, r2, #1
 800aee6:	4093      	lsls	r3, r2
 800aee8:	4304      	orrs	r4, r0
 800aeea:	1b4a      	subs	r2, r1, r5
 800aeec:	e78a      	b.n	800ae04 <__ieee754_sqrt+0x5c>
 800aeee:	4611      	mov	r1, r2
 800aef0:	e7f0      	b.n	800aed4 <__ieee754_sqrt+0x12c>
 800aef2:	0064      	lsls	r4, r4, #1
 800aef4:	3201      	adds	r2, #1
 800aef6:	e7ef      	b.n	800aed8 <__ieee754_sqrt+0x130>
 800aef8:	4680      	mov	r8, r0
 800aefa:	e7bf      	b.n	800ae7c <__ieee754_sqrt+0xd4>
 800aefc:	7ff00000 	.word	0x7ff00000

0800af00 <__kernel_cos>:
 800af00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800af0c:	4680      	mov	r8, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	e9cd 2300 	strd	r2, r3, [sp]
 800af14:	da04      	bge.n	800af20 <__kernel_cos+0x20>
 800af16:	f7f5 fd8f 	bl	8000a38 <__aeabi_d2iz>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	f000 8086 	beq.w	800b02c <__kernel_cos+0x12c>
 800af20:	4642      	mov	r2, r8
 800af22:	463b      	mov	r3, r7
 800af24:	4640      	mov	r0, r8
 800af26:	4639      	mov	r1, r7
 800af28:	f7f5 fad6 	bl	80004d8 <__aeabi_dmul>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4b4e      	ldr	r3, [pc, #312]	; (800b068 <__kernel_cos+0x168>)
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	f7f5 fad0 	bl	80004d8 <__aeabi_dmul>
 800af38:	a33f      	add	r3, pc, #252	; (adr r3, 800b038 <__kernel_cos+0x138>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4682      	mov	sl, r0
 800af40:	468b      	mov	fp, r1
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 fac7 	bl	80004d8 <__aeabi_dmul>
 800af4a:	a33d      	add	r3, pc, #244	; (adr r3, 800b040 <__kernel_cos+0x140>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f90c 	bl	800016c <__adddf3>
 800af54:	4622      	mov	r2, r4
 800af56:	462b      	mov	r3, r5
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	a33a      	add	r3, pc, #232	; (adr r3, 800b048 <__kernel_cos+0x148>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 f901 	bl	8000168 <__aeabi_dsub>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	f7f5 fab5 	bl	80004d8 <__aeabi_dmul>
 800af6e:	a338      	add	r3, pc, #224	; (adr r3, 800b050 <__kernel_cos+0x150>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f8fa 	bl	800016c <__adddf3>
 800af78:	4622      	mov	r2, r4
 800af7a:	462b      	mov	r3, r5
 800af7c:	f7f5 faac 	bl	80004d8 <__aeabi_dmul>
 800af80:	a335      	add	r3, pc, #212	; (adr r3, 800b058 <__kernel_cos+0x158>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 f8ef 	bl	8000168 <__aeabi_dsub>
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	f7f5 faa3 	bl	80004d8 <__aeabi_dmul>
 800af92:	a333      	add	r3, pc, #204	; (adr r3, 800b060 <__kernel_cos+0x160>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 f8e8 	bl	800016c <__adddf3>
 800af9c:	4622      	mov	r2, r4
 800af9e:	462b      	mov	r3, r5
 800afa0:	f7f5 fa9a 	bl	80004d8 <__aeabi_dmul>
 800afa4:	4622      	mov	r2, r4
 800afa6:	462b      	mov	r3, r5
 800afa8:	f7f5 fa96 	bl	80004d8 <__aeabi_dmul>
 800afac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	4640      	mov	r0, r8
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fa8e 	bl	80004d8 <__aeabi_dmul>
 800afbc:	460b      	mov	r3, r1
 800afbe:	4602      	mov	r2, r0
 800afc0:	4629      	mov	r1, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7f5 f8d0 	bl	8000168 <__aeabi_dsub>
 800afc8:	4b28      	ldr	r3, [pc, #160]	; (800b06c <__kernel_cos+0x16c>)
 800afca:	4680      	mov	r8, r0
 800afcc:	429e      	cmp	r6, r3
 800afce:	4689      	mov	r9, r1
 800afd0:	dc0e      	bgt.n	800aff0 <__kernel_cos+0xf0>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4650      	mov	r0, sl
 800afd8:	4659      	mov	r1, fp
 800afda:	f7f5 f8c5 	bl	8000168 <__aeabi_dsub>
 800afde:	4602      	mov	r2, r0
 800afe0:	2000      	movs	r0, #0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4922      	ldr	r1, [pc, #136]	; (800b070 <__kernel_cos+0x170>)
 800afe6:	f7f5 f8bf 	bl	8000168 <__aeabi_dsub>
 800afea:	b003      	add	sp, #12
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff0:	2400      	movs	r4, #0
 800aff2:	4b20      	ldr	r3, [pc, #128]	; (800b074 <__kernel_cos+0x174>)
 800aff4:	4622      	mov	r2, r4
 800aff6:	429e      	cmp	r6, r3
 800aff8:	bfcc      	ite	gt
 800affa:	4d1f      	ldrgt	r5, [pc, #124]	; (800b078 <__kernel_cos+0x178>)
 800affc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b000:	462b      	mov	r3, r5
 800b002:	2000      	movs	r0, #0
 800b004:	491a      	ldr	r1, [pc, #104]	; (800b070 <__kernel_cos+0x170>)
 800b006:	f7f5 f8af 	bl	8000168 <__aeabi_dsub>
 800b00a:	4622      	mov	r2, r4
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	462b      	mov	r3, r5
 800b012:	4650      	mov	r0, sl
 800b014:	4659      	mov	r1, fp
 800b016:	f7f5 f8a7 	bl	8000168 <__aeabi_dsub>
 800b01a:	4642      	mov	r2, r8
 800b01c:	464b      	mov	r3, r9
 800b01e:	f7f5 f8a3 	bl	8000168 <__aeabi_dsub>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4630      	mov	r0, r6
 800b028:	4639      	mov	r1, r7
 800b02a:	e7dc      	b.n	800afe6 <__kernel_cos+0xe6>
 800b02c:	2000      	movs	r0, #0
 800b02e:	4910      	ldr	r1, [pc, #64]	; (800b070 <__kernel_cos+0x170>)
 800b030:	e7db      	b.n	800afea <__kernel_cos+0xea>
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	be8838d4 	.word	0xbe8838d4
 800b03c:	bda8fae9 	.word	0xbda8fae9
 800b040:	bdb4b1c4 	.word	0xbdb4b1c4
 800b044:	3e21ee9e 	.word	0x3e21ee9e
 800b048:	809c52ad 	.word	0x809c52ad
 800b04c:	3e927e4f 	.word	0x3e927e4f
 800b050:	19cb1590 	.word	0x19cb1590
 800b054:	3efa01a0 	.word	0x3efa01a0
 800b058:	16c15177 	.word	0x16c15177
 800b05c:	3f56c16c 	.word	0x3f56c16c
 800b060:	5555554c 	.word	0x5555554c
 800b064:	3fa55555 	.word	0x3fa55555
 800b068:	3fe00000 	.word	0x3fe00000
 800b06c:	3fd33332 	.word	0x3fd33332
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	3fe90000 	.word	0x3fe90000
 800b078:	3fd20000 	.word	0x3fd20000

0800b07c <__kernel_rem_pio2>:
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b084:	9307      	str	r3, [sp, #28]
 800b086:	9104      	str	r1, [sp, #16]
 800b088:	4bbf      	ldr	r3, [pc, #764]	; (800b388 <__kernel_rem_pio2+0x30c>)
 800b08a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b08c:	1ed4      	subs	r4, r2, #3
 800b08e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b092:	2500      	movs	r5, #0
 800b094:	9302      	str	r3, [sp, #8]
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	9008      	str	r0, [sp, #32]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	9306      	str	r3, [sp, #24]
 800b09e:	2318      	movs	r3, #24
 800b0a0:	fb94 f4f3 	sdiv	r4, r4, r3
 800b0a4:	f06f 0317 	mvn.w	r3, #23
 800b0a8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b0ac:	fb04 3303 	mla	r3, r4, r3, r3
 800b0b0:	eb03 0a02 	add.w	sl, r3, r2
 800b0b4:	9a06      	ldr	r2, [sp, #24]
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	1aa7      	subs	r7, r4, r2
 800b0ba:	eb03 0802 	add.w	r8, r3, r2
 800b0be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	ae1e      	add	r6, sp, #120	; 0x78
 800b0ca:	4545      	cmp	r5, r8
 800b0cc:	dd14      	ble.n	800b0f8 <__kernel_rem_pio2+0x7c>
 800b0ce:	2600      	movs	r6, #0
 800b0d0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	429e      	cmp	r6, r3
 800b0d8:	dc39      	bgt.n	800b14e <__kernel_rem_pio2+0xd2>
 800b0da:	9b08      	ldr	r3, [sp, #32]
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	3b08      	subs	r3, #8
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	199d      	adds	r5, r3, r6
 800b0ec:	ab20      	add	r3, sp, #128	; 0x80
 800b0ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b0f2:	9305      	str	r3, [sp, #20]
 800b0f4:	2700      	movs	r7, #0
 800b0f6:	e023      	b.n	800b140 <__kernel_rem_pio2+0xc4>
 800b0f8:	42ef      	cmn	r7, r5
 800b0fa:	d40b      	bmi.n	800b114 <__kernel_rem_pio2+0x98>
 800b0fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b100:	e9cd 2300 	strd	r2, r3, [sp]
 800b104:	f7f5 f97e 	bl	8000404 <__aeabi_i2d>
 800b108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b10c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b110:	3501      	adds	r5, #1
 800b112:	e7da      	b.n	800b0ca <__kernel_rem_pio2+0x4e>
 800b114:	4610      	mov	r0, r2
 800b116:	4619      	mov	r1, r3
 800b118:	e7f8      	b.n	800b10c <__kernel_rem_pio2+0x90>
 800b11a:	9905      	ldr	r1, [sp, #20]
 800b11c:	9d00      	ldr	r5, [sp, #0]
 800b11e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b122:	9105      	str	r1, [sp, #20]
 800b124:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b128:	9500      	str	r5, [sp, #0]
 800b12a:	f7f5 f9d5 	bl	80004d8 <__aeabi_dmul>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 f819 	bl	800016c <__adddf3>
 800b13a:	4680      	mov	r8, r0
 800b13c:	4689      	mov	r9, r1
 800b13e:	3701      	adds	r7, #1
 800b140:	9b06      	ldr	r3, [sp, #24]
 800b142:	429f      	cmp	r7, r3
 800b144:	dde9      	ble.n	800b11a <__kernel_rem_pio2+0x9e>
 800b146:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b14a:	3601      	adds	r6, #1
 800b14c:	e7c2      	b.n	800b0d4 <__kernel_rem_pio2+0x58>
 800b14e:	9b02      	ldr	r3, [sp, #8]
 800b150:	aa0c      	add	r2, sp, #48	; 0x30
 800b152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b156:	930b      	str	r3, [sp, #44]	; 0x2c
 800b158:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b15a:	9f02      	ldr	r7, [sp, #8]
 800b15c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b160:	930a      	str	r3, [sp, #40]	; 0x28
 800b162:	2600      	movs	r6, #0
 800b164:	ab98      	add	r3, sp, #608	; 0x260
 800b166:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b16a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b16e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b172:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b176:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b17a:	ab98      	add	r3, sp, #608	; 0x260
 800b17c:	445b      	add	r3, fp
 800b17e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b182:	1bbb      	subs	r3, r7, r6
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc71      	bgt.n	800b26c <__kernel_rem_pio2+0x1f0>
 800b188:	4652      	mov	r2, sl
 800b18a:	4640      	mov	r0, r8
 800b18c:	4649      	mov	r1, r9
 800b18e:	f000 fc07 	bl	800b9a0 <scalbn>
 800b192:	2200      	movs	r2, #0
 800b194:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b198:	4604      	mov	r4, r0
 800b19a:	460d      	mov	r5, r1
 800b19c:	f7f5 f99c 	bl	80004d8 <__aeabi_dmul>
 800b1a0:	f000 fb72 	bl	800b888 <floor>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	4b79      	ldr	r3, [pc, #484]	; (800b38c <__kernel_rem_pio2+0x310>)
 800b1a8:	f7f5 f996 	bl	80004d8 <__aeabi_dmul>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7f4 ffd8 	bl	8000168 <__aeabi_dsub>
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	f7f5 fc3c 	bl	8000a38 <__aeabi_d2iz>
 800b1c0:	9005      	str	r0, [sp, #20]
 800b1c2:	f7f5 f91f 	bl	8000404 <__aeabi_i2d>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f4 ffcb 	bl	8000168 <__aeabi_dsub>
 800b1d2:	f1ba 0f00 	cmp.w	sl, #0
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	4689      	mov	r9, r1
 800b1da:	dd6c      	ble.n	800b2b6 <__kernel_rem_pio2+0x23a>
 800b1dc:	1e7a      	subs	r2, r7, #1
 800b1de:	ab0c      	add	r3, sp, #48	; 0x30
 800b1e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1e4:	f1ca 0118 	rsb	r1, sl, #24
 800b1e8:	9c05      	ldr	r4, [sp, #20]
 800b1ea:	fa40 f301 	asr.w	r3, r0, r1
 800b1ee:	441c      	add	r4, r3
 800b1f0:	408b      	lsls	r3, r1
 800b1f2:	1ac0      	subs	r0, r0, r3
 800b1f4:	ab0c      	add	r3, sp, #48	; 0x30
 800b1f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b1fa:	f1ca 0317 	rsb	r3, sl, #23
 800b1fe:	9405      	str	r4, [sp, #20]
 800b200:	fa40 f303 	asr.w	r3, r0, r3
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	9b00      	ldr	r3, [sp, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dd62      	ble.n	800b2d2 <__kernel_rem_pio2+0x256>
 800b20c:	2200      	movs	r2, #0
 800b20e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b212:	4614      	mov	r4, r2
 800b214:	9b05      	ldr	r3, [sp, #20]
 800b216:	3301      	adds	r3, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4297      	cmp	r7, r2
 800b21c:	f300 809f 	bgt.w	800b35e <__kernel_rem_pio2+0x2e2>
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	dd07      	ble.n	800b236 <__kernel_rem_pio2+0x1ba>
 800b226:	f1ba 0f01 	cmp.w	sl, #1
 800b22a:	f000 80bb 	beq.w	800b3a4 <__kernel_rem_pio2+0x328>
 800b22e:	f1ba 0f02 	cmp.w	sl, #2
 800b232:	f000 80c1 	beq.w	800b3b8 <__kernel_rem_pio2+0x33c>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d14a      	bne.n	800b2d2 <__kernel_rem_pio2+0x256>
 800b23c:	4642      	mov	r2, r8
 800b23e:	464b      	mov	r3, r9
 800b240:	2000      	movs	r0, #0
 800b242:	4953      	ldr	r1, [pc, #332]	; (800b390 <__kernel_rem_pio2+0x314>)
 800b244:	f7f4 ff90 	bl	8000168 <__aeabi_dsub>
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	2c00      	cmp	r4, #0
 800b24e:	d040      	beq.n	800b2d2 <__kernel_rem_pio2+0x256>
 800b250:	4652      	mov	r2, sl
 800b252:	2000      	movs	r0, #0
 800b254:	494e      	ldr	r1, [pc, #312]	; (800b390 <__kernel_rem_pio2+0x314>)
 800b256:	f000 fba3 	bl	800b9a0 <scalbn>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4640      	mov	r0, r8
 800b260:	4649      	mov	r1, r9
 800b262:	f7f4 ff81 	bl	8000168 <__aeabi_dsub>
 800b266:	4680      	mov	r8, r0
 800b268:	4689      	mov	r9, r1
 800b26a:	e032      	b.n	800b2d2 <__kernel_rem_pio2+0x256>
 800b26c:	2200      	movs	r2, #0
 800b26e:	4b49      	ldr	r3, [pc, #292]	; (800b394 <__kernel_rem_pio2+0x318>)
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	f7f5 f930 	bl	80004d8 <__aeabi_dmul>
 800b278:	f7f5 fbde 	bl	8000a38 <__aeabi_d2iz>
 800b27c:	f7f5 f8c2 	bl	8000404 <__aeabi_i2d>
 800b280:	2200      	movs	r2, #0
 800b282:	4b45      	ldr	r3, [pc, #276]	; (800b398 <__kernel_rem_pio2+0x31c>)
 800b284:	e9cd 0100 	strd	r0, r1, [sp]
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	4640      	mov	r0, r8
 800b292:	4649      	mov	r1, r9
 800b294:	f7f4 ff68 	bl	8000168 <__aeabi_dsub>
 800b298:	f7f5 fbce 	bl	8000a38 <__aeabi_d2iz>
 800b29c:	ab0c      	add	r3, sp, #48	; 0x30
 800b29e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b2a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2aa:	f7f4 ff5f 	bl	800016c <__adddf3>
 800b2ae:	3601      	adds	r6, #1
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	4689      	mov	r9, r1
 800b2b4:	e765      	b.n	800b182 <__kernel_rem_pio2+0x106>
 800b2b6:	d105      	bne.n	800b2c4 <__kernel_rem_pio2+0x248>
 800b2b8:	1e7b      	subs	r3, r7, #1
 800b2ba:	aa0c      	add	r2, sp, #48	; 0x30
 800b2bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b2c0:	15c3      	asrs	r3, r0, #23
 800b2c2:	e79f      	b.n	800b204 <__kernel_rem_pio2+0x188>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4b35      	ldr	r3, [pc, #212]	; (800b39c <__kernel_rem_pio2+0x320>)
 800b2c8:	f7f5 fb8c 	bl	80009e4 <__aeabi_dcmpge>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d143      	bne.n	800b358 <__kernel_rem_pio2+0x2dc>
 800b2d0:	9000      	str	r0, [sp, #0]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f5 fb65 	bl	80009a8 <__aeabi_dcmpeq>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f000 80c3 	beq.w	800b46a <__kernel_rem_pio2+0x3ee>
 800b2e4:	1e7c      	subs	r4, r7, #1
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	9902      	ldr	r1, [sp, #8]
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	da6a      	bge.n	800b3c6 <__kernel_rem_pio2+0x34a>
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	f000 8084 	beq.w	800b3fe <__kernel_rem_pio2+0x382>
 800b2f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b2f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b2fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 80b0 	beq.w	800b466 <__kernel_rem_pio2+0x3ea>
 800b306:	4652      	mov	r2, sl
 800b308:	2000      	movs	r0, #0
 800b30a:	4921      	ldr	r1, [pc, #132]	; (800b390 <__kernel_rem_pio2+0x314>)
 800b30c:	f000 fb48 	bl	800b9a0 <scalbn>
 800b310:	4625      	mov	r5, r4
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	f04f 0a00 	mov.w	sl, #0
 800b31a:	00e3      	lsls	r3, r4, #3
 800b31c:	aa98      	add	r2, sp, #608	; 0x260
 800b31e:	eb02 0803 	add.w	r8, r2, r3
 800b322:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b394 <__kernel_rem_pio2+0x318>
 800b326:	9306      	str	r3, [sp, #24]
 800b328:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b32c:	2d00      	cmp	r5, #0
 800b32e:	f280 80d2 	bge.w	800b4d6 <__kernel_rem_pio2+0x45a>
 800b332:	2500      	movs	r5, #0
 800b334:	9a06      	ldr	r2, [sp, #24]
 800b336:	ab98      	add	r3, sp, #608	; 0x260
 800b338:	189e      	adds	r6, r3, r2
 800b33a:	3ea8      	subs	r6, #168	; 0xa8
 800b33c:	1b63      	subs	r3, r4, r5
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f2c0 80f9 	blt.w	800b536 <__kernel_rem_pio2+0x4ba>
 800b344:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b3a0 <__kernel_rem_pio2+0x324>
 800b348:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b34c:	f04f 0a00 	mov.w	sl, #0
 800b350:	f04f 0b00 	mov.w	fp, #0
 800b354:	2700      	movs	r7, #0
 800b356:	e0e2      	b.n	800b51e <__kernel_rem_pio2+0x4a2>
 800b358:	2302      	movs	r3, #2
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	e756      	b.n	800b20c <__kernel_rem_pio2+0x190>
 800b35e:	ab0c      	add	r3, sp, #48	; 0x30
 800b360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b364:	b94c      	cbnz	r4, 800b37a <__kernel_rem_pio2+0x2fe>
 800b366:	b12b      	cbz	r3, 800b374 <__kernel_rem_pio2+0x2f8>
 800b368:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b36c:	a80c      	add	r0, sp, #48	; 0x30
 800b36e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b372:	2301      	movs	r3, #1
 800b374:	3201      	adds	r2, #1
 800b376:	461c      	mov	r4, r3
 800b378:	e74f      	b.n	800b21a <__kernel_rem_pio2+0x19e>
 800b37a:	1acb      	subs	r3, r1, r3
 800b37c:	a80c      	add	r0, sp, #48	; 0x30
 800b37e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b382:	4623      	mov	r3, r4
 800b384:	e7f6      	b.n	800b374 <__kernel_rem_pio2+0x2f8>
 800b386:	bf00      	nop
 800b388:	0800c128 	.word	0x0800c128
 800b38c:	40200000 	.word	0x40200000
 800b390:	3ff00000 	.word	0x3ff00000
 800b394:	3e700000 	.word	0x3e700000
 800b398:	41700000 	.word	0x41700000
 800b39c:	3fe00000 	.word	0x3fe00000
 800b3a0:	0800c0e0 	.word	0x0800c0e0
 800b3a4:	1e7a      	subs	r2, r7, #1
 800b3a6:	ab0c      	add	r3, sp, #48	; 0x30
 800b3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3b0:	a90c      	add	r1, sp, #48	; 0x30
 800b3b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3b6:	e73e      	b.n	800b236 <__kernel_rem_pio2+0x1ba>
 800b3b8:	1e7a      	subs	r2, r7, #1
 800b3ba:	ab0c      	add	r3, sp, #48	; 0x30
 800b3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3c4:	e7f4      	b.n	800b3b0 <__kernel_rem_pio2+0x334>
 800b3c6:	a90c      	add	r1, sp, #48	; 0x30
 800b3c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	e78b      	b.n	800b2ea <__kernel_rem_pio2+0x26e>
 800b3d2:	3401      	adds	r4, #1
 800b3d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3d8:	2a00      	cmp	r2, #0
 800b3da:	d0fa      	beq.n	800b3d2 <__kernel_rem_pio2+0x356>
 800b3dc:	ab98      	add	r3, sp, #608	; 0x260
 800b3de:	449b      	add	fp, r3
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	1c7e      	adds	r6, r7, #1
 800b3e4:	19dd      	adds	r5, r3, r7
 800b3e6:	ab98      	add	r3, sp, #608	; 0x260
 800b3e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3ec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800b3f0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800b3f4:	443c      	add	r4, r7
 800b3f6:	42b4      	cmp	r4, r6
 800b3f8:	da04      	bge.n	800b404 <__kernel_rem_pio2+0x388>
 800b3fa:	4627      	mov	r7, r4
 800b3fc:	e6b1      	b.n	800b162 <__kernel_rem_pio2+0xe6>
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b400:	2401      	movs	r4, #1
 800b402:	e7e7      	b.n	800b3d4 <__kernel_rem_pio2+0x358>
 800b404:	f105 0308 	add.w	r3, r5, #8
 800b408:	9309      	str	r3, [sp, #36]	; 0x24
 800b40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b40c:	2700      	movs	r7, #0
 800b40e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b412:	f7f4 fff7 	bl	8000404 <__aeabi_i2d>
 800b416:	f04f 0800 	mov.w	r8, #0
 800b41a:	f04f 0900 	mov.w	r9, #0
 800b41e:	9b08      	ldr	r3, [sp, #32]
 800b420:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b424:	3b08      	subs	r3, #8
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	f105 0310 	add.w	r3, r5, #16
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	9b06      	ldr	r3, [sp, #24]
 800b430:	429f      	cmp	r7, r3
 800b432:	dd04      	ble.n	800b43e <__kernel_rem_pio2+0x3c2>
 800b434:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b438:	3601      	adds	r6, #1
 800b43a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b43c:	e7db      	b.n	800b3f6 <__kernel_rem_pio2+0x37a>
 800b43e:	9905      	ldr	r1, [sp, #20]
 800b440:	9d00      	ldr	r5, [sp, #0]
 800b442:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b446:	9105      	str	r1, [sp, #20]
 800b448:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b44c:	9500      	str	r5, [sp, #0]
 800b44e:	f7f5 f843 	bl	80004d8 <__aeabi_dmul>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f4 fe87 	bl	800016c <__adddf3>
 800b45e:	3701      	adds	r7, #1
 800b460:	4680      	mov	r8, r0
 800b462:	4689      	mov	r9, r1
 800b464:	e7e3      	b.n	800b42e <__kernel_rem_pio2+0x3b2>
 800b466:	3c01      	subs	r4, #1
 800b468:	e745      	b.n	800b2f6 <__kernel_rem_pio2+0x27a>
 800b46a:	f1ca 0200 	rsb	r2, sl, #0
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f000 fa95 	bl	800b9a0 <scalbn>
 800b476:	2200      	movs	r2, #0
 800b478:	4ba3      	ldr	r3, [pc, #652]	; (800b708 <__kernel_rem_pio2+0x68c>)
 800b47a:	4604      	mov	r4, r0
 800b47c:	460d      	mov	r5, r1
 800b47e:	f7f5 fab1 	bl	80009e4 <__aeabi_dcmpge>
 800b482:	b1f8      	cbz	r0, 800b4c4 <__kernel_rem_pio2+0x448>
 800b484:	2200      	movs	r2, #0
 800b486:	4ba1      	ldr	r3, [pc, #644]	; (800b70c <__kernel_rem_pio2+0x690>)
 800b488:	4620      	mov	r0, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f5 f824 	bl	80004d8 <__aeabi_dmul>
 800b490:	f7f5 fad2 	bl	8000a38 <__aeabi_d2iz>
 800b494:	4606      	mov	r6, r0
 800b496:	f7f4 ffb5 	bl	8000404 <__aeabi_i2d>
 800b49a:	2200      	movs	r2, #0
 800b49c:	4b9a      	ldr	r3, [pc, #616]	; (800b708 <__kernel_rem_pio2+0x68c>)
 800b49e:	f7f5 f81b 	bl	80004d8 <__aeabi_dmul>
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7f4 fe5d 	bl	8000168 <__aeabi_dsub>
 800b4ae:	f7f5 fac3 	bl	8000a38 <__aeabi_d2iz>
 800b4b2:	1c7c      	adds	r4, r7, #1
 800b4b4:	ab0c      	add	r3, sp, #48	; 0x30
 800b4b6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b4ba:	f10a 0a18 	add.w	sl, sl, #24
 800b4be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b4c2:	e720      	b.n	800b306 <__kernel_rem_pio2+0x28a>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 fab6 	bl	8000a38 <__aeabi_d2iz>
 800b4cc:	ab0c      	add	r3, sp, #48	; 0x30
 800b4ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b4d2:	463c      	mov	r4, r7
 800b4d4:	e717      	b.n	800b306 <__kernel_rem_pio2+0x28a>
 800b4d6:	ab0c      	add	r3, sp, #48	; 0x30
 800b4d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4dc:	f7f4 ff92 	bl	8000404 <__aeabi_i2d>
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	f7f4 fff8 	bl	80004d8 <__aeabi_dmul>
 800b4e8:	4652      	mov	r2, sl
 800b4ea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f4 fff0 	bl	80004d8 <__aeabi_dmul>
 800b4f8:	3d01      	subs	r5, #1
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	e715      	b.n	800b32c <__kernel_rem_pio2+0x2b0>
 800b500:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800b504:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b508:	f7f4 ffe6 	bl	80004d8 <__aeabi_dmul>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4650      	mov	r0, sl
 800b512:	4659      	mov	r1, fp
 800b514:	f7f4 fe2a 	bl	800016c <__adddf3>
 800b518:	4682      	mov	sl, r0
 800b51a:	468b      	mov	fp, r1
 800b51c:	3701      	adds	r7, #1
 800b51e:	9b02      	ldr	r3, [sp, #8]
 800b520:	429f      	cmp	r7, r3
 800b522:	dc01      	bgt.n	800b528 <__kernel_rem_pio2+0x4ac>
 800b524:	42bd      	cmp	r5, r7
 800b526:	daeb      	bge.n	800b500 <__kernel_rem_pio2+0x484>
 800b528:	ab48      	add	r3, sp, #288	; 0x120
 800b52a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b52e:	e9c3 ab00 	strd	sl, fp, [r3]
 800b532:	3501      	adds	r5, #1
 800b534:	e702      	b.n	800b33c <__kernel_rem_pio2+0x2c0>
 800b536:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d86c      	bhi.n	800b616 <__kernel_rem_pio2+0x59a>
 800b53c:	e8df f003 	tbb	[pc, r3]
 800b540:	022f2f59 	.word	0x022f2f59
 800b544:	9a06      	ldr	r2, [sp, #24]
 800b546:	ab48      	add	r3, sp, #288	; 0x120
 800b548:	189d      	adds	r5, r3, r2
 800b54a:	46aa      	mov	sl, r5
 800b54c:	46a3      	mov	fp, r4
 800b54e:	f1bb 0f00 	cmp.w	fp, #0
 800b552:	f300 8087 	bgt.w	800b664 <__kernel_rem_pio2+0x5e8>
 800b556:	46a2      	mov	sl, r4
 800b558:	f1ba 0f01 	cmp.w	sl, #1
 800b55c:	f300 809f 	bgt.w	800b69e <__kernel_rem_pio2+0x622>
 800b560:	2700      	movs	r7, #0
 800b562:	463e      	mov	r6, r7
 800b564:	9d06      	ldr	r5, [sp, #24]
 800b566:	ab48      	add	r3, sp, #288	; 0x120
 800b568:	3508      	adds	r5, #8
 800b56a:	441d      	add	r5, r3
 800b56c:	2c01      	cmp	r4, #1
 800b56e:	f300 80b3 	bgt.w	800b6d8 <__kernel_rem_pio2+0x65c>
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b576:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b578:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b57a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f040 80b5 	bne.w	800b6ec <__kernel_rem_pio2+0x670>
 800b582:	4603      	mov	r3, r0
 800b584:	462a      	mov	r2, r5
 800b586:	9804      	ldr	r0, [sp, #16]
 800b588:	e9c0 2300 	strd	r2, r3, [r0]
 800b58c:	4622      	mov	r2, r4
 800b58e:	460b      	mov	r3, r1
 800b590:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b594:	463a      	mov	r2, r7
 800b596:	4633      	mov	r3, r6
 800b598:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b59c:	e03b      	b.n	800b616 <__kernel_rem_pio2+0x59a>
 800b59e:	f04f 0c00 	mov.w	ip, #0
 800b5a2:	4626      	mov	r6, r4
 800b5a4:	4667      	mov	r7, ip
 800b5a6:	9d06      	ldr	r5, [sp, #24]
 800b5a8:	ab48      	add	r3, sp, #288	; 0x120
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	441d      	add	r5, r3
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	da42      	bge.n	800b638 <__kernel_rem_pio2+0x5bc>
 800b5b2:	9b00      	ldr	r3, [sp, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d049      	beq.n	800b64c <__kernel_rem_pio2+0x5d0>
 800b5b8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b5bc:	4662      	mov	r2, ip
 800b5be:	460b      	mov	r3, r1
 800b5c0:	9904      	ldr	r1, [sp, #16]
 800b5c2:	2601      	movs	r6, #1
 800b5c4:	e9c1 2300 	strd	r2, r3, [r1]
 800b5c8:	a948      	add	r1, sp, #288	; 0x120
 800b5ca:	463b      	mov	r3, r7
 800b5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5d0:	f7f4 fdca 	bl	8000168 <__aeabi_dsub>
 800b5d4:	4684      	mov	ip, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	ad48      	add	r5, sp, #288	; 0x120
 800b5da:	42b4      	cmp	r4, r6
 800b5dc:	da38      	bge.n	800b650 <__kernel_rem_pio2+0x5d4>
 800b5de:	9b00      	ldr	r3, [sp, #0]
 800b5e0:	b10b      	cbz	r3, 800b5e6 <__kernel_rem_pio2+0x56a>
 800b5e2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b5e6:	4662      	mov	r2, ip
 800b5e8:	463b      	mov	r3, r7
 800b5ea:	9904      	ldr	r1, [sp, #16]
 800b5ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b5f0:	e011      	b.n	800b616 <__kernel_rem_pio2+0x59a>
 800b5f2:	2700      	movs	r7, #0
 800b5f4:	463d      	mov	r5, r7
 800b5f6:	9b06      	ldr	r3, [sp, #24]
 800b5f8:	aa98      	add	r2, sp, #608	; 0x260
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b600:	2c00      	cmp	r4, #0
 800b602:	da0f      	bge.n	800b624 <__kernel_rem_pio2+0x5a8>
 800b604:	9b00      	ldr	r3, [sp, #0]
 800b606:	b10b      	cbz	r3, 800b60c <__kernel_rem_pio2+0x590>
 800b608:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b60c:	463a      	mov	r2, r7
 800b60e:	462b      	mov	r3, r5
 800b610:	9904      	ldr	r1, [sp, #16]
 800b612:	e9c1 2300 	strd	r2, r3, [r1]
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	f003 0007 	and.w	r0, r3, #7
 800b61c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	4638      	mov	r0, r7
 800b626:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7f4 fd9e 	bl	800016c <__adddf3>
 800b630:	3c01      	subs	r4, #1
 800b632:	4607      	mov	r7, r0
 800b634:	460d      	mov	r5, r1
 800b636:	e7e3      	b.n	800b600 <__kernel_rem_pio2+0x584>
 800b638:	4660      	mov	r0, ip
 800b63a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f4 fd94 	bl	800016c <__adddf3>
 800b644:	3e01      	subs	r6, #1
 800b646:	4684      	mov	ip, r0
 800b648:	460f      	mov	r7, r1
 800b64a:	e7b0      	b.n	800b5ae <__kernel_rem_pio2+0x532>
 800b64c:	4639      	mov	r1, r7
 800b64e:	e7b5      	b.n	800b5bc <__kernel_rem_pio2+0x540>
 800b650:	4660      	mov	r0, ip
 800b652:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 fd88 	bl	800016c <__adddf3>
 800b65c:	3601      	adds	r6, #1
 800b65e:	4684      	mov	ip, r0
 800b660:	460f      	mov	r7, r1
 800b662:	e7ba      	b.n	800b5da <__kernel_rem_pio2+0x55e>
 800b664:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b668:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b66c:	4640      	mov	r0, r8
 800b66e:	4649      	mov	r1, r9
 800b670:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b674:	f7f4 fd7a 	bl	800016c <__adddf3>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4606      	mov	r6, r0
 800b67e:	460f      	mov	r7, r1
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f4 fd70 	bl	8000168 <__aeabi_dsub>
 800b688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b68c:	f7f4 fd6e 	bl	800016c <__adddf3>
 800b690:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b694:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b698:	e9ca 6700 	strd	r6, r7, [sl]
 800b69c:	e757      	b.n	800b54e <__kernel_rem_pio2+0x4d2>
 800b69e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b6a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ae:	f7f4 fd5d 	bl	800016c <__adddf3>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	4639      	mov	r1, r7
 800b6be:	f7f4 fd53 	bl	8000168 <__aeabi_dsub>
 800b6c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6c6:	f7f4 fd51 	bl	800016c <__adddf3>
 800b6ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b6ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b6d2:	e9c5 8900 	strd	r8, r9, [r5]
 800b6d6:	e73f      	b.n	800b558 <__kernel_rem_pio2+0x4dc>
 800b6d8:	4638      	mov	r0, r7
 800b6da:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b6de:	4631      	mov	r1, r6
 800b6e0:	f7f4 fd44 	bl	800016c <__adddf3>
 800b6e4:	3c01      	subs	r4, #1
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	460e      	mov	r6, r1
 800b6ea:	e73f      	b.n	800b56c <__kernel_rem_pio2+0x4f0>
 800b6ec:	9b04      	ldr	r3, [sp, #16]
 800b6ee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b6f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b6f6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b6fa:	601d      	str	r5, [r3, #0]
 800b6fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b700:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b704:	615e      	str	r6, [r3, #20]
 800b706:	e786      	b.n	800b616 <__kernel_rem_pio2+0x59a>
 800b708:	41700000 	.word	0x41700000
 800b70c:	3e700000 	.word	0x3e700000

0800b710 <__kernel_sin>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	b086      	sub	sp, #24
 800b716:	e9cd 2300 	strd	r2, r3, [sp]
 800b71a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b71e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b722:	4682      	mov	sl, r0
 800b724:	460c      	mov	r4, r1
 800b726:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b728:	da03      	bge.n	800b732 <__kernel_sin+0x22>
 800b72a:	f7f5 f985 	bl	8000a38 <__aeabi_d2iz>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d050      	beq.n	800b7d4 <__kernel_sin+0xc4>
 800b732:	4652      	mov	r2, sl
 800b734:	4623      	mov	r3, r4
 800b736:	4650      	mov	r0, sl
 800b738:	4621      	mov	r1, r4
 800b73a:	f7f4 fecd 	bl	80004d8 <__aeabi_dmul>
 800b73e:	4606      	mov	r6, r0
 800b740:	460f      	mov	r7, r1
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4650      	mov	r0, sl
 800b748:	4621      	mov	r1, r4
 800b74a:	f7f4 fec5 	bl	80004d8 <__aeabi_dmul>
 800b74e:	a33e      	add	r3, pc, #248	; (adr r3, 800b848 <__kernel_sin+0x138>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	4680      	mov	r8, r0
 800b756:	4689      	mov	r9, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f4 febc 	bl	80004d8 <__aeabi_dmul>
 800b760:	a33b      	add	r3, pc, #236	; (adr r3, 800b850 <__kernel_sin+0x140>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 fcff 	bl	8000168 <__aeabi_dsub>
 800b76a:	4632      	mov	r2, r6
 800b76c:	463b      	mov	r3, r7
 800b76e:	f7f4 feb3 	bl	80004d8 <__aeabi_dmul>
 800b772:	a339      	add	r3, pc, #228	; (adr r3, 800b858 <__kernel_sin+0x148>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 fcf8 	bl	800016c <__adddf3>
 800b77c:	4632      	mov	r2, r6
 800b77e:	463b      	mov	r3, r7
 800b780:	f7f4 feaa 	bl	80004d8 <__aeabi_dmul>
 800b784:	a336      	add	r3, pc, #216	; (adr r3, 800b860 <__kernel_sin+0x150>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fced 	bl	8000168 <__aeabi_dsub>
 800b78e:	4632      	mov	r2, r6
 800b790:	463b      	mov	r3, r7
 800b792:	f7f4 fea1 	bl	80004d8 <__aeabi_dmul>
 800b796:	a334      	add	r3, pc, #208	; (adr r3, 800b868 <__kernel_sin+0x158>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 fce6 	bl	800016c <__adddf3>
 800b7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a4:	b9dd      	cbnz	r5, 800b7de <__kernel_sin+0xce>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	f7f4 fe93 	bl	80004d8 <__aeabi_dmul>
 800b7b2:	a32f      	add	r3, pc, #188	; (adr r3, 800b870 <__kernel_sin+0x160>)
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f7f4 fcd6 	bl	8000168 <__aeabi_dsub>
 800b7bc:	4642      	mov	r2, r8
 800b7be:	464b      	mov	r3, r9
 800b7c0:	f7f4 fe8a 	bl	80004d8 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	f7f4 fcce 	bl	800016c <__adddf3>
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	b006      	add	sp, #24
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	2200      	movs	r2, #0
 800b7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7e4:	4b24      	ldr	r3, [pc, #144]	; (800b878 <__kernel_sin+0x168>)
 800b7e6:	f7f4 fe77 	bl	80004d8 <__aeabi_dmul>
 800b7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f4 fe6f 	bl	80004d8 <__aeabi_dmul>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b802:	f7f4 fcb1 	bl	8000168 <__aeabi_dsub>
 800b806:	4632      	mov	r2, r6
 800b808:	463b      	mov	r3, r7
 800b80a:	f7f4 fe65 	bl	80004d8 <__aeabi_dmul>
 800b80e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b812:	f7f4 fca9 	bl	8000168 <__aeabi_dsub>
 800b816:	a316      	add	r3, pc, #88	; (adr r3, 800b870 <__kernel_sin+0x160>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4640      	mov	r0, r8
 800b822:	4649      	mov	r1, r9
 800b824:	f7f4 fe58 	bl	80004d8 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4650      	mov	r0, sl
 800b83a:	4621      	mov	r1, r4
 800b83c:	f7f4 fc94 	bl	8000168 <__aeabi_dsub>
 800b840:	e7c6      	b.n	800b7d0 <__kernel_sin+0xc0>
 800b842:	bf00      	nop
 800b844:	f3af 8000 	nop.w
 800b848:	5acfd57c 	.word	0x5acfd57c
 800b84c:	3de5d93a 	.word	0x3de5d93a
 800b850:	8a2b9ceb 	.word	0x8a2b9ceb
 800b854:	3e5ae5e6 	.word	0x3e5ae5e6
 800b858:	57b1fe7d 	.word	0x57b1fe7d
 800b85c:	3ec71de3 	.word	0x3ec71de3
 800b860:	19c161d5 	.word	0x19c161d5
 800b864:	3f2a01a0 	.word	0x3f2a01a0
 800b868:	1110f8a6 	.word	0x1110f8a6
 800b86c:	3f811111 	.word	0x3f811111
 800b870:	55555549 	.word	0x55555549
 800b874:	3fc55555 	.word	0x3fc55555
 800b878:	3fe00000 	.word	0x3fe00000

0800b87c <fabs>:
 800b87c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b880:	4619      	mov	r1, r3
 800b882:	4770      	bx	lr
 800b884:	0000      	movs	r0, r0
	...

0800b888 <floor>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b890:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b894:	2e13      	cmp	r6, #19
 800b896:	4607      	mov	r7, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	460c      	mov	r4, r1
 800b89c:	4605      	mov	r5, r0
 800b89e:	dc35      	bgt.n	800b90c <floor+0x84>
 800b8a0:	2e00      	cmp	r6, #0
 800b8a2:	da16      	bge.n	800b8d2 <floor+0x4a>
 800b8a4:	a336      	add	r3, pc, #216	; (adr r3, 800b980 <floor+0xf8>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f7f4 fc5f 	bl	800016c <__adddf3>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f7f5 f8a1 	bl	80009f8 <__aeabi_dcmpgt>
 800b8b6:	b148      	cbz	r0, 800b8cc <floor+0x44>
 800b8b8:	2c00      	cmp	r4, #0
 800b8ba:	da5b      	bge.n	800b974 <floor+0xec>
 800b8bc:	2500      	movs	r5, #0
 800b8be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b8c2:	4a31      	ldr	r2, [pc, #196]	; (800b988 <floor+0x100>)
 800b8c4:	433b      	orrs	r3, r7
 800b8c6:	42ab      	cmp	r3, r5
 800b8c8:	bf18      	it	ne
 800b8ca:	4614      	movne	r4, r2
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	462f      	mov	r7, r5
 800b8d0:	e026      	b.n	800b920 <floor+0x98>
 800b8d2:	4a2e      	ldr	r2, [pc, #184]	; (800b98c <floor+0x104>)
 800b8d4:	fa42 f806 	asr.w	r8, r2, r6
 800b8d8:	ea01 0208 	and.w	r2, r1, r8
 800b8dc:	4302      	orrs	r2, r0
 800b8de:	d01f      	beq.n	800b920 <floor+0x98>
 800b8e0:	a327      	add	r3, pc, #156	; (adr r3, 800b980 <floor+0xf8>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7f4 fc41 	bl	800016c <__adddf3>
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f7f5 f883 	bl	80009f8 <__aeabi_dcmpgt>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0ea      	beq.n	800b8cc <floor+0x44>
 800b8f6:	2c00      	cmp	r4, #0
 800b8f8:	bfbe      	ittt	lt
 800b8fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b8fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800b902:	19a4      	addlt	r4, r4, r6
 800b904:	ea24 0408 	bic.w	r4, r4, r8
 800b908:	2500      	movs	r5, #0
 800b90a:	e7df      	b.n	800b8cc <floor+0x44>
 800b90c:	2e33      	cmp	r6, #51	; 0x33
 800b90e:	dd0b      	ble.n	800b928 <floor+0xa0>
 800b910:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b914:	d104      	bne.n	800b920 <floor+0x98>
 800b916:	4602      	mov	r2, r0
 800b918:	f7f4 fc28 	bl	800016c <__adddf3>
 800b91c:	4607      	mov	r7, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4638      	mov	r0, r7
 800b922:	4619      	mov	r1, r3
 800b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b930:	fa22 f808 	lsr.w	r8, r2, r8
 800b934:	ea18 0f00 	tst.w	r8, r0
 800b938:	d0f2      	beq.n	800b920 <floor+0x98>
 800b93a:	a311      	add	r3, pc, #68	; (adr r3, 800b980 <floor+0xf8>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fc14 	bl	800016c <__adddf3>
 800b944:	2200      	movs	r2, #0
 800b946:	2300      	movs	r3, #0
 800b948:	f7f5 f856 	bl	80009f8 <__aeabi_dcmpgt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d0bd      	beq.n	800b8cc <floor+0x44>
 800b950:	2c00      	cmp	r4, #0
 800b952:	da02      	bge.n	800b95a <floor+0xd2>
 800b954:	2e14      	cmp	r6, #20
 800b956:	d103      	bne.n	800b960 <floor+0xd8>
 800b958:	3401      	adds	r4, #1
 800b95a:	ea25 0508 	bic.w	r5, r5, r8
 800b95e:	e7b5      	b.n	800b8cc <floor+0x44>
 800b960:	2301      	movs	r3, #1
 800b962:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b966:	fa03 f606 	lsl.w	r6, r3, r6
 800b96a:	4435      	add	r5, r6
 800b96c:	42bd      	cmp	r5, r7
 800b96e:	bf38      	it	cc
 800b970:	18e4      	addcc	r4, r4, r3
 800b972:	e7f2      	b.n	800b95a <floor+0xd2>
 800b974:	2500      	movs	r5, #0
 800b976:	462c      	mov	r4, r5
 800b978:	e7a8      	b.n	800b8cc <floor+0x44>
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w
 800b980:	8800759c 	.word	0x8800759c
 800b984:	7e37e43c 	.word	0x7e37e43c
 800b988:	bff00000 	.word	0xbff00000
 800b98c:	000fffff 	.word	0x000fffff

0800b990 <matherr>:
 800b990:	2000      	movs	r0, #0
 800b992:	4770      	bx	lr

0800b994 <nan>:
 800b994:	2000      	movs	r0, #0
 800b996:	4901      	ldr	r1, [pc, #4]	; (800b99c <nan+0x8>)
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	7ff80000 	.word	0x7ff80000

0800b9a0 <scalbn>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	4616      	mov	r6, r2
 800b9a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	b982      	cbnz	r2, 800b9d2 <scalbn+0x32>
 800b9b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9b4:	4303      	orrs	r3, r0
 800b9b6:	d034      	beq.n	800ba22 <scalbn+0x82>
 800b9b8:	4b2d      	ldr	r3, [pc, #180]	; (800ba70 <scalbn+0xd0>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f7f4 fd8c 	bl	80004d8 <__aeabi_dmul>
 800b9c0:	4b2c      	ldr	r3, [pc, #176]	; (800ba74 <scalbn+0xd4>)
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	429e      	cmp	r6, r3
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	da0d      	bge.n	800b9e6 <scalbn+0x46>
 800b9ca:	a325      	add	r3, pc, #148	; (adr r3, 800ba60 <scalbn+0xc0>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	e01c      	b.n	800ba0c <scalbn+0x6c>
 800b9d2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b9d6:	42ba      	cmp	r2, r7
 800b9d8:	d109      	bne.n	800b9ee <scalbn+0x4e>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	f7f4 fbc6 	bl	800016c <__adddf3>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	e01d      	b.n	800ba22 <scalbn+0x82>
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b9ec:	3a36      	subs	r2, #54	; 0x36
 800b9ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b9f2:	4432      	add	r2, r6
 800b9f4:	428a      	cmp	r2, r1
 800b9f6:	dd0c      	ble.n	800ba12 <scalbn+0x72>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	a11a      	add	r1, pc, #104	; (adr r1, 800ba68 <scalbn+0xc8>)
 800b9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba02:	f000 f83b 	bl	800ba7c <copysign>
 800ba06:	a318      	add	r3, pc, #96	; (adr r3, 800ba68 <scalbn+0xc8>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	f7f4 fd64 	bl	80004d8 <__aeabi_dmul>
 800ba10:	e7e6      	b.n	800b9e0 <scalbn+0x40>
 800ba12:	2a00      	cmp	r2, #0
 800ba14:	dd08      	ble.n	800ba28 <scalbn+0x88>
 800ba16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba1e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba22:	4620      	mov	r0, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba2c:	da0b      	bge.n	800ba46 <scalbn+0xa6>
 800ba2e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba32:	429e      	cmp	r6, r3
 800ba34:	4622      	mov	r2, r4
 800ba36:	462b      	mov	r3, r5
 800ba38:	dce0      	bgt.n	800b9fc <scalbn+0x5c>
 800ba3a:	a109      	add	r1, pc, #36	; (adr r1, 800ba60 <scalbn+0xc0>)
 800ba3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba40:	f000 f81c 	bl	800ba7c <copysign>
 800ba44:	e7c1      	b.n	800b9ca <scalbn+0x2a>
 800ba46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba4a:	3236      	adds	r2, #54	; 0x36
 800ba4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <scalbn+0xd8>)
 800ba5c:	e7d6      	b.n	800ba0c <scalbn+0x6c>
 800ba5e:	bf00      	nop
 800ba60:	c2f8f359 	.word	0xc2f8f359
 800ba64:	01a56e1f 	.word	0x01a56e1f
 800ba68:	8800759c 	.word	0x8800759c
 800ba6c:	7e37e43c 	.word	0x7e37e43c
 800ba70:	43500000 	.word	0x43500000
 800ba74:	ffff3cb0 	.word	0xffff3cb0
 800ba78:	3c900000 	.word	0x3c900000

0800ba7c <copysign>:
 800ba7c:	b530      	push	{r4, r5, lr}
 800ba7e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ba82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba86:	ea42 0503 	orr.w	r5, r2, r3
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	bd30      	pop	{r4, r5, pc}
	...

0800ba90 <_init>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr

0800ba9c <_fini>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr
