
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800aaf0  0800aaf0  0001aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b010  0800b010  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b010  0800b010  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b010  0800b010  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b010  0800b010  0001b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b014  0800b014  0001b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001f8  0800b210  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  0800b210  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d7a  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000283e  00000000  00000000  00033f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  000367e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00037ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165dd  00000000  00000000  00038c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d951  00000000  00000000  0004f255  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d8bd  00000000  00000000  0005cba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  000da4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aad8 	.word	0x0800aad8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800aad8 	.word	0x0800aad8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2275      	movs	r2, #117	; 0x75
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f003 fd08 	bl	8004b44 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b68      	cmp	r3, #104	; 0x68
 8001138:	d101      	bne.n	800113e <MPU6050_check+0x2e>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 800113e:	2300      	movs	r3, #0

}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	226b      	movs	r2, #107	; 0x6b
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f003 fbf0 	bl	8004950 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8001170:	2307      	movs	r3, #7
 8001172:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2219      	movs	r2, #25
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f003 fbe0 	bl	8004950 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001190:	2308      	movs	r3, #8
 8001192:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221b      	movs	r2, #27
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f003 fbd0 	bl	8004950 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 80011b0:	2310      	movs	r3, #16
 80011b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030f 	add.w	r3, r7, #15
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	221c      	movs	r2, #28
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f003 fbc0 	bl	8004950 <HAL_I2C_Mem_Write>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2306      	movs	r3, #6
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	223b      	movs	r2, #59	; 0x3b
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f003 fca3 	bl	8004b44 <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	809a      	strh	r2, [r3, #4]

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2243      	movs	r2, #67	; 0x43
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 fc71 	bl	8004b44 <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001262:	7a3b      	ldrb	r3, [r7, #8]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	815a      	strh	r2, [r3, #10]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b598      	push	{r3, r4, r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <main+0x110>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a41      	ldr	r2, [pc, #260]	; (8001418 <main+0x110>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <main+0x114>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 800131e:	4b3f      	ldr	r3, [pc, #252]	; (800141c <main+0x114>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3e      	ldr	r2, [pc, #248]	; (800141c <main+0x114>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f002 fa21 	bl	8003770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f9c5 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fbfd 	bl	8001b30 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001336:	f000 fa1d 	bl	8001774 <MX_ADC1_Init>
  MX_I2C2_Init();
 800133a:	f000 fa59 	bl	80017f0 <MX_I2C2_Init>
  MX_SPI2_Init();
 800133e:	f000 fa85 	bl	800184c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001342:	f000 fab9 	bl	80018b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fbc9 	bl	8001adc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800134a:	f000 fb7b 	bl	8001a44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 800134e:	4834      	ldr	r0, [pc, #208]	; (8001420 <main+0x118>)
 8001350:	f002 fea2 	bl	8004098 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001354:	4832      	ldr	r0, [pc, #200]	; (8001420 <main+0x118>)
 8001356:	f002 fb67 	bl	8003a28 <HAL_ADC_Start>


  HAL_Delay(100);//wait for stable power
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f002 fa6a 	bl	8003834 <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001360:	4830      	ldr	r0, [pc, #192]	; (8001424 <main+0x11c>)
 8001362:	f7ff fed5 	bl	8001110 <MPU6050_check>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <main+0x120>)
 800136c:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 800136e:	482d      	ldr	r0, [pc, #180]	; (8001424 <main+0x11c>)
 8001370:	f7ff feea 	bl	8001148 <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 8001374:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001378:	f002 fa5c 	bl	8003834 <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <main+0x124>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2a      	ldr	r2, [pc, #168]	; (800142c <main+0x124>)
 8001382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001386:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138e:	4828      	ldr	r0, [pc, #160]	; (8001430 <main+0x128>)
 8001390:	f003 f986 	bl	80046a0 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8001394:	f000 fdfa 	bl	8001f8c <nRF24_Check>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <main+0x12c>)
 800139e:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80013a0:	f000 fda2 	bl	8001ee8 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80013a4:	20ff      	movs	r0, #255	; 0xff
 80013a6:	f000 ff83 	bl	80022b0 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 fe7d 	bl	80020aa <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 ff0e 	bl	80021d2 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80013b6:	2008      	movs	r0, #8
 80013b8:	f000 fe56 	bl	8002068 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 fe82 	bl	80020c6 <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80013c2:	491d      	ldr	r1, [pc, #116]	; (8001438 <main+0x130>)
 80013c4:	2001      	movs	r0, #1
 80013c6:	f000 fe8f 	bl	80020e8 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 80013ca:	2207      	movs	r2, #7
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 ff1a 	bl	8002208 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80013d4:	4918      	ldr	r1, [pc, #96]	; (8001438 <main+0x130>)
 80013d6:	2006      	movs	r0, #6
 80013d8:	f000 fe86 	bl	80020e8 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80013dc:	2004      	movs	r0, #4
 80013de:	f000 fedd 	bl	800219c <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fe1f 	bl	8002026 <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80013e8:	f000 ffac 	bl	8002344 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80013ec:	2002      	movs	r0, #2
 80013ee:	f000 fdfb 	bl	8001fe8 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <main+0x128>)
 80013fa:	f003 f951 	bl	80046a0 <HAL_GPIO_WritePin>

  //get GYRO offset
  SUMGyroX=0;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <main+0x134>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <main+0x138>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <main+0x13c>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
  for(i=0;i<1000;i++)
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <main+0x140>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e040      	b.n	800149a <main+0x192>
 8001418:	e000edf0 	.word	0xe000edf0
 800141c:	e0001000 	.word	0xe0001000
 8001420:	2000040c 	.word	0x2000040c
 8001424:	200002f0 	.word	0x200002f0
 8001428:	20000482 	.word	0x20000482
 800142c:	40003800 	.word	0x40003800
 8001430:	40010c00 	.word	0x40010c00
 8001434:	20000374 	.word	0x20000374
 8001438:	0800ab9c 	.word	0x0800ab9c
 800143c:	20000558 	.word	0x20000558
 8001440:	20000490 	.word	0x20000490
 8001444:	200003e8 	.word	0x200003e8
 8001448:	20000218 	.word	0x20000218
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 800144c:	497e      	ldr	r1, [pc, #504]	; (8001648 <main+0x340>)
 800144e:	487f      	ldr	r0, [pc, #508]	; (800164c <main+0x344>)
 8001450:	f7ff fef4 	bl	800123c <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <main+0x340>)
 8001456:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800145a:	461a      	mov	r2, r3
 800145c:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <main+0x348>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4413      	add	r3, r2
 8001462:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <main+0x348>)
 8001464:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <main+0x340>)
 8001468:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <main+0x34c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a77      	ldr	r2, [pc, #476]	; (8001654 <main+0x34c>)
 8001476:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 8001478:	4b73      	ldr	r3, [pc, #460]	; (8001648 <main+0x340>)
 800147a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800147e:	461a      	mov	r2, r3
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <main+0x350>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4413      	add	r3, r2
 8001486:	4a74      	ldr	r2, [pc, #464]	; (8001658 <main+0x350>)
 8001488:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f002 f9d2 	bl	8003834 <HAL_Delay>
  for(i=0;i<1000;i++)
 8001490:	4b72      	ldr	r3, [pc, #456]	; (800165c <main+0x354>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <main+0x354>)
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <main+0x354>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a2:	d3d3      	bcc.n	800144c <main+0x144>
  }
  GyroXOff=SUMGyroX/1000;
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <main+0x348>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6d      	ldr	r2, [pc, #436]	; (8001660 <main+0x358>)
 80014aa:	fb82 1203 	smull	r1, r2, r2, r3
 80014ae:	1192      	asrs	r2, r2, #6
 80014b0:	17db      	asrs	r3, r3, #31
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <main+0x35c>)
 80014b8:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <main+0x34c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a68      	ldr	r2, [pc, #416]	; (8001660 <main+0x358>)
 80014c0:	fb82 1203 	smull	r1, r2, r2, r3
 80014c4:	1192      	asrs	r2, r2, #6
 80014c6:	17db      	asrs	r3, r3, #31
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <main+0x360>)
 80014ce:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <main+0x350>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a62      	ldr	r2, [pc, #392]	; (8001660 <main+0x358>)
 80014d6:	fb82 1203 	smull	r1, r2, r2, r3
 80014da:	1192      	asrs	r2, r2, #6
 80014dc:	17db      	asrs	r3, r3, #31
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b62      	ldr	r3, [pc, #392]	; (800166c <main+0x364>)
 80014e4:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014e6:	2100      	movs	r1, #0
 80014e8:	4861      	ldr	r0, [pc, #388]	; (8001670 <main+0x368>)
 80014ea:	f004 ff09 	bl	8006300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014ee:	2104      	movs	r1, #4
 80014f0:	485f      	ldr	r0, [pc, #380]	; (8001670 <main+0x368>)
 80014f2:	f004 ff05 	bl	8006300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014f6:	2108      	movs	r1, #8
 80014f8:	485d      	ldr	r0, [pc, #372]	; (8001670 <main+0x368>)
 80014fa:	f004 ff01 	bl	8006300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014fe:	210c      	movs	r1, #12
 8001500:	485b      	ldr	r0, [pc, #364]	; (8001670 <main+0x368>)
 8001502:	f004 fefd 	bl	8006300 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001506:	485b      	ldr	r0, [pc, #364]	; (8001674 <main+0x36c>)
 8001508:	f004 fea2 	bl	8006250 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f002 f991 	bl	8003834 <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8001512:	4b59      	ldr	r3, [pc, #356]	; (8001678 <main+0x370>)
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <main+0x374>)
 8001516:	6810      	ldr	r0, [r2, #0]
 8001518:	6018      	str	r0, [r3, #0]
 800151a:	7912      	ldrb	r2, [r2, #4]
 800151c:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800151e:	4856      	ldr	r0, [pc, #344]	; (8001678 <main+0x370>)
 8001520:	f7fe fe16 	bl	8000150 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	4953      	ldr	r1, [pc, #332]	; (8001678 <main+0x370>)
 800152c:	4854      	ldr	r0, [pc, #336]	; (8001680 <main+0x378>)
 800152e:	f005 fd63 	bl	8006ff8 <HAL_UART_Transmit>

	  //sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );


	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8001532:	4b54      	ldr	r3, [pc, #336]	; (8001684 <main+0x37c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ff76 	bl	8000428 <__aeabi_f2d>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	4950      	ldr	r1, [pc, #320]	; (8001688 <main+0x380>)
 8001546:	484c      	ldr	r0, [pc, #304]	; (8001678 <main+0x370>)
 8001548:	f006 fb96 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800154c:	484a      	ldr	r0, [pc, #296]	; (8001678 <main+0x370>)
 800154e:	f7fe fdff 	bl	8000150 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	4947      	ldr	r1, [pc, #284]	; (8001678 <main+0x370>)
 800155a:	4849      	ldr	r0, [pc, #292]	; (8001680 <main+0x378>)
 800155c:	f005 fd4c 	bl	8006ff8 <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "PWM Mot1=%u \n\r",PWM_Mot1);
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <main+0x384>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	494a      	ldr	r1, [pc, #296]	; (8001690 <main+0x388>)
 8001568:	4843      	ldr	r0, [pc, #268]	; (8001678 <main+0x370>)
 800156a:	f006 fb85 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800156e:	4842      	ldr	r0, [pc, #264]	; (8001678 <main+0x370>)
 8001570:	f7fe fdee 	bl	8000150 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	2301      	movs	r3, #1
 800157a:	493f      	ldr	r1, [pc, #252]	; (8001678 <main+0x370>)
 800157c:	4840      	ldr	r0, [pc, #256]	; (8001680 <main+0x378>)
 800157e:	f005 fd3b 	bl	8006ff8 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot2=%u \n\r",PWM_Mot2);
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <main+0x38c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4943      	ldr	r1, [pc, #268]	; (8001698 <main+0x390>)
 800158a:	483b      	ldr	r0, [pc, #236]	; (8001678 <main+0x370>)
 800158c:	f006 fb74 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001590:	4839      	ldr	r0, [pc, #228]	; (8001678 <main+0x370>)
 8001592:	f7fe fddd 	bl	8000150 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29a      	uxth	r2, r3
 800159a:	2301      	movs	r3, #1
 800159c:	4936      	ldr	r1, [pc, #216]	; (8001678 <main+0x370>)
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <main+0x378>)
 80015a0:	f005 fd2a 	bl	8006ff8 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot3=%u \n\r",PWM_Mot3);
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <main+0x394>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	493d      	ldr	r1, [pc, #244]	; (80016a0 <main+0x398>)
 80015ac:	4832      	ldr	r0, [pc, #200]	; (8001678 <main+0x370>)
 80015ae:	f006 fb63 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015b2:	4831      	ldr	r0, [pc, #196]	; (8001678 <main+0x370>)
 80015b4:	f7fe fdcc 	bl	8000150 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	492e      	ldr	r1, [pc, #184]	; (8001678 <main+0x370>)
 80015c0:	482f      	ldr	r0, [pc, #188]	; (8001680 <main+0x378>)
 80015c2:	f005 fd19 	bl	8006ff8 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot4=%u \n\r",PWM_Mot4);
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <main+0x39c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4936      	ldr	r1, [pc, #216]	; (80016a8 <main+0x3a0>)
 80015ce:	482a      	ldr	r0, [pc, #168]	; (8001678 <main+0x370>)
 80015d0:	f006 fb52 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <main+0x370>)
 80015d6:	f7fe fdbb 	bl	8000150 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	2301      	movs	r3, #1
 80015e0:	4925      	ldr	r1, [pc, #148]	; (8001678 <main+0x370>)
 80015e2:	4827      	ldr	r0, [pc, #156]	; (8001680 <main+0x378>)
 80015e4:	f005 fd08 	bl	8006ff8 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "wfl1=%.2f \n\r",wfl1);
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <main+0x3a4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff1b 	bl	8000428 <__aeabi_f2d>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	492d      	ldr	r1, [pc, #180]	; (80016b0 <main+0x3a8>)
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <main+0x370>)
 80015fe:	f006 fb3b 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <main+0x370>)
 8001604:	f7fe fda4 	bl	8000150 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	2301      	movs	r3, #1
 800160e:	491a      	ldr	r1, [pc, #104]	; (8001678 <main+0x370>)
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <main+0x378>)
 8001612:	f005 fcf1 	bl	8006ff8 <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "wfl2=%.2f \n\r",wfl2);
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <main+0x3ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	461a      	mov	r2, r3
 8001626:	4623      	mov	r3, r4
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <main+0x3b0>)
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <main+0x370>)
 800162c:	f006 fb24 	bl	8007c78 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <main+0x370>)
 8001632:	f7fe fd8d 	bl	8000150 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	2301      	movs	r3, #1
 800163c:	490e      	ldr	r1, [pc, #56]	; (8001678 <main+0x370>)
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <main+0x378>)
 8001640:	f005 fcda 	bl	8006ff8 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8001644:	e762      	b.n	800150c <main+0x204>
 8001646:	bf00      	nop
 8001648:	20000530 	.word	0x20000530
 800164c:	200002f0 	.word	0x200002f0
 8001650:	20000558 	.word	0x20000558
 8001654:	20000490 	.word	0x20000490
 8001658:	200003e8 	.word	0x200003e8
 800165c:	20000218 	.word	0x20000218
 8001660:	10624dd3 	.word	0x10624dd3
 8001664:	20000364 	.word	0x20000364
 8001668:	200003e4 	.word	0x200003e4
 800166c:	20000292 	.word	0x20000292
 8001670:	20000494 	.word	0x20000494
 8001674:	200004f0 	.word	0x200004f0
 8001678:	20000380 	.word	0x20000380
 800167c:	0800aaf0 	.word	0x0800aaf0
 8001680:	20000440 	.word	0x20000440
 8001684:	20000238 	.word	0x20000238
 8001688:	0800aaf8 	.word	0x0800aaf8
 800168c:	2000065c 	.word	0x2000065c
 8001690:	0800ab0c 	.word	0x0800ab0c
 8001694:	20000570 	.word	0x20000570
 8001698:	0800ab1c 	.word	0x0800ab1c
 800169c:	2000056c 	.word	0x2000056c
 80016a0:	0800ab2c 	.word	0x0800ab2c
 80016a4:	20000650 	.word	0x20000650
 80016a8:	0800ab3c 	.word	0x0800ab3c
 80016ac:	200004dc 	.word	0x200004dc
 80016b0:	0800ab4c 	.word	0x0800ab4c
 80016b4:	2000048c 	.word	0x2000048c
 80016b8:	0800ab5c 	.word	0x0800ab5c

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fe7c 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fa:	2301      	movs	r3, #1
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001708:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	4618      	mov	r0, r3
 8001714:	f003 ff82 	bl	800561c <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800171e:	f000 faa9 	bl	8001c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f004 f9ec 	bl	8005b1c <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800174a:	f000 fa93 	bl	8001c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800174e:	2302      	movs	r3, #2
 8001750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fb7a 	bl	8005e54 <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001766:	f000 fa85 	bl	8001c74 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	; 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <MX_ADC1_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_ADC1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001792:	2201      	movs	r2, #1
 8001794:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_ADC1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_ADC1_Init+0x74>)
 800179e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017b2:	f002 f861 	bl	8003878 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f000 fa5a 	bl	8001c74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80017c8:	2302      	movs	r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0x74>)
 80017d2:	f002 fadd 	bl	8003d90 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017dc:	f000 fa4a 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000040c 	.word	0x2000040c
 80017ec:	40012400 	.word	0x40012400

080017f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C2_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_I2C2_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C2_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_I2C2_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C2_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_I2C2_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_I2C2_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_I2C2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_I2C2_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_I2C2_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_I2C2_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C2_Init+0x50>)
 800182e:	f002 ff67 	bl	8004700 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 fa1c 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200002f0 	.word	0x200002f0
 8001844:	40005800 	.word	0x40005800
 8001848:	00061a80 	.word	0x00061a80

0800184c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_SPI2_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001880:	2208      	movs	r2, #8
 8001882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0x64>)
 8001898:	220a      	movs	r2, #10
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI2_Init+0x64>)
 800189e:	f004 fc4b 	bl	8006138 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018a8:	f000 f9e4 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000294 	.word	0x20000294
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b096      	sub	sp, #88	; 0x58
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2220      	movs	r2, #32
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f005 fd69 	bl	80073c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <MX_TIM1_Init+0x184>)
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <MX_TIM1_Init+0x188>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <MX_TIM1_Init+0x184>)
 80018fe:	2247      	movs	r2, #71	; 0x47
 8001900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001908:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <MX_TIM1_Init+0x184>)
 800190a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800190e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <MX_TIM1_Init+0x184>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001922:	4846      	ldr	r0, [pc, #280]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001924:	f004 fc69 	bl	80061fa <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800192e:	f000 f9a1 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800193c:	4619      	mov	r1, r3
 800193e:	483f      	ldr	r0, [pc, #252]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001940:	f004 fede 	bl	8006700 <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800194a:	f000 f993 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194e:	483b      	ldr	r0, [pc, #236]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001950:	f004 fca1 	bl	8006296 <HAL_TIM_PWM_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800195a:	f000 f98b 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	4619      	mov	r1, r3
 800196c:	4833      	ldr	r0, [pc, #204]	; (8001a3c <MX_TIM1_Init+0x184>)
 800196e:	f005 fa4f 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001978:	f000 f97c 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800198e:	2304      	movs	r3, #4
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4826      	ldr	r0, [pc, #152]	; (8001a3c <MX_TIM1_Init+0x184>)
 80019a4:	f004 fde6 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019ae:	f000 f961 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	2204      	movs	r2, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4820      	ldr	r0, [pc, #128]	; (8001a3c <MX_TIM1_Init+0x184>)
 80019bc:	f004 fdda 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80019c6:	f000 f955 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	2208      	movs	r2, #8
 80019d0:	4619      	mov	r1, r3
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <MX_TIM1_Init+0x184>)
 80019d4:	f004 fdce 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80019de:	f000 f949 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	220c      	movs	r2, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM1_Init+0x184>)
 80019ec:	f004 fdc2 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f000 f93d 	bl	8001c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001a1e:	f005 fa3b 	bl	8006e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001a28:	f000 f924 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM1_Init+0x184>)
 8001a2e:	f000 fe13 	bl	8002658 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3758      	adds	r7, #88	; 0x58
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000494 	.word	0x20000494
 8001a40:	40012c00 	.word	0x40012c00

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a6a:	2247      	movs	r2, #71	; 0x47
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001a8a:	f004 fbb6 	bl	80061fa <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a94:	f000 f8ee 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001aa6:	f004 fe2b 	bl	8006700 <HAL_TIM_ConfigClockSource>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f000 f8e0 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_TIM2_Init+0x94>)
 8001ac2:	f005 f9a5 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001acc:	f000 f8d2 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200004f0 	.word	0x200004f0

08001adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MX_USART1_UART_Init+0x50>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART1_UART_Init+0x4c>)
 8001b14:	f005 fa23 	bl	8006f5e <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f000 f8a9 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000440 	.word	0x20000440
 8001b2c:	40013800 	.word	0x40013800

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a46      	ldr	r2, [pc, #280]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <MX_GPIO_Init+0x134>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	482f      	ldr	r0, [pc, #188]	; (8001c68 <MX_GPIO_Init+0x138>)
 8001bac:	f002 fd78 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001bb6:	482d      	ldr	r0, [pc, #180]	; (8001c6c <MX_GPIO_Init+0x13c>)
 8001bb8:	f002 fd72 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc2:	482b      	ldr	r0, [pc, #172]	; (8001c70 <MX_GPIO_Init+0x140>)
 8001bc4:	f002 fd6c 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4821      	ldr	r0, [pc, #132]	; (8001c68 <MX_GPIO_Init+0x138>)
 8001be2:	f002 fc03 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <MX_GPIO_Init+0x13c>)
 8001c00:	f002 fbf4 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4619      	mov	r1, r3
 8001c18:	4815      	ldr	r0, [pc, #84]	; (8001c70 <MX_GPIO_Init+0x140>)
 8001c1a:	f002 fbe7 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	480e      	ldr	r0, [pc, #56]	; (8001c70 <MX_GPIO_Init+0x140>)
 8001c38:	f002 fbd8 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_GPIO_Init+0x13c>)
 8001c56:	f002 fbc9 	bl	80043ec <HAL_GPIO_Init>

}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40010800 	.word	0x40010800

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <nRF24_TransmitPacket+0x98>)
 8001c8e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c96:	4821      	ldr	r0, [pc, #132]	; (8001d1c <nRF24_TransmitPacket+0x9c>)
 8001c98:	f002 fd02 	bl	80046a0 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fb64 	bl	800236e <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	481b      	ldr	r0, [pc, #108]	; (8001d1c <nRF24_TransmitPacket+0x9c>)
 8001cae:	f002 fcf7 	bl	80046a0 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001cb2:	f000 fb24 	bl	80022fe <nRF24_GetStatus>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f1      	bne.n	8001cb2 <nRF24_TransmitPacket+0x32>
 8001cce:	e000      	b.n	8001cd2 <nRF24_TransmitPacket+0x52>
			break;
 8001cd0:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd8:	4810      	ldr	r0, [pc, #64]	; (8001d1c <nRF24_TransmitPacket+0x9c>)
 8001cda:	f002 fce1 	bl	80046a0 <HAL_GPIO_WritePin>

	if (!wait) {
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e012      	b.n	8001d0e <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001ce8:	f000 fb2c 	bl	8002344 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e009      	b.n	8001d0e <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e002      	b.n	8001d0e <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001d08:	f000 fb0c 	bl	8002324 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	000fffff 	.word	0x000fffff
 8001d1c:	40010c00 	.word	0x40010c00

08001d20 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001d2a:	bf00      	nop
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <nRF24_LL_RW+0x48>)
 8001d30:	f7ff fad0 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f8      	beq.n	8001d2c <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <nRF24_LL_RW+0x48>)
 8001d42:	f7ff faad 	bl	80012a0 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001d46:	bf00      	nop
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <nRF24_LL_RW+0x48>)
 8001d4c:	f7ff fac2 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f8      	beq.n	8001d48 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <nRF24_LL_RW+0x48>)
 8001d58:	f7ff fab0 	bl	80012bc <SPI_I2S_ReceiveData>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b2db      	uxtb	r3, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40003800 	.word	0x40003800

08001d6c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <nRF24_ReadReg+0x44>)
 8001d7e:	f002 fc8f 	bl	80046a0 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ffc8 	bl	8001d20 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001d90:	20ff      	movs	r0, #255	; 0xff
 8001d92:	f7ff ffc5 	bl	8001d20 <nRF24_LL_RW>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <nRF24_ReadReg+0x44>)
 8001da2:	f002 fc7d 	bl	80046a0 <HAL_GPIO_WritePin>

	return value;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40010800 	.word	0x40010800

08001db4 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dca:	481a      	ldr	r0, [pc, #104]	; (8001e34 <nRF24_WriteReg+0x80>)
 8001dcc:	f002 fc68 	bl	80046a0 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	d810      	bhi.n	8001df8 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff99 	bl	8001d20 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff95 	bl	8001d20 <nRF24_LL_RW>
 8001df6:	e013      	b.n	8001e20 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff90 	bl	8001d20 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2be1      	cmp	r3, #225	; 0xe1
 8001e04:	d00c      	beq.n	8001e20 <nRF24_WriteReg+0x6c>
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2be2      	cmp	r3, #226	; 0xe2
 8001e0a:	d009      	beq.n	8001e20 <nRF24_WriteReg+0x6c>
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2be3      	cmp	r3, #227	; 0xe3
 8001e10:	d006      	beq.n	8001e20 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d003      	beq.n	8001e20 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff80 	bl	8001d20 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <nRF24_WriteReg+0x80>)
 8001e28:	f002 fc3a 	bl	80046a0 <HAL_GPIO_WritePin>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40010800 	.word	0x40010800

08001e38 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4e:	480f      	ldr	r0, [pc, #60]	; (8001e8c <nRF24_ReadMBReg+0x54>)
 8001e50:	f002 fc26 	bl	80046a0 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff62 	bl	8001d20 <nRF24_LL_RW>
	while (count--) {
 8001e5c:	e007      	b.n	8001e6e <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001e5e:	683c      	ldr	r4, [r7, #0]
 8001e60:	1c63      	adds	r3, r4, #1
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	20ff      	movs	r0, #255	; 0xff
 8001e66:	f7ff ff5b 	bl	8001d20 <nRF24_LL_RW>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	71ba      	strb	r2, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f2      	bne.n	8001e5e <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <nRF24_ReadMBReg+0x54>)
 8001e80:	f002 fc0e 	bl	80046a0 <HAL_GPIO_WritePin>
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	40010800 	.word	0x40010800

08001e90 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea6:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <nRF24_WriteMBReg+0x54>)
 8001ea8:	f002 fbfa 	bl	80046a0 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff36 	bl	8001d20 <nRF24_LL_RW>
	while (count--) {
 8001eb4:	e006      	b.n	8001ec4 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	603a      	str	r2, [r7, #0]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff2e 	bl	8001d20 <nRF24_LL_RW>
	while (count--) {
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	71ba      	strb	r2, [r7, #6]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f3      	bne.n	8001eb6 <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <nRF24_WriteMBReg+0x54>)
 8001ed6:	f002 fbe3 	bl	80046a0 <HAL_GPIO_WritePin>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40010800 	.word	0x40010800

08001ee8 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8001eec:	2108      	movs	r1, #8
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff ff60 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001ef4:	213f      	movs	r1, #63	; 0x3f
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff ff5c 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8001efc:	2103      	movs	r1, #3
 8001efe:	2002      	movs	r0, #2
 8001f00:	f7ff ff58 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001f04:	2103      	movs	r1, #3
 8001f06:	2003      	movs	r0, #3
 8001f08:	f7ff ff54 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	2004      	movs	r0, #4
 8001f10:	f7ff ff50 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001f14:	2102      	movs	r1, #2
 8001f16:	2005      	movs	r0, #5
 8001f18:	f7ff ff4c 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8001f1c:	210e      	movs	r1, #14
 8001f1e:	2006      	movs	r0, #6
 8001f20:	f7ff ff48 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2007      	movs	r0, #7
 8001f28:	f7ff ff44 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2011      	movs	r0, #17
 8001f30:	f7ff ff40 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2012      	movs	r0, #18
 8001f38:	f7ff ff3c 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2013      	movs	r0, #19
 8001f40:	f7ff ff38 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2014      	movs	r0, #20
 8001f48:	f7ff ff34 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2015      	movs	r0, #21
 8001f50:	f7ff ff30 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	2016      	movs	r0, #22
 8001f58:	f7ff ff2c 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f7ff ff28 	bl	8001db4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001f64:	2100      	movs	r1, #0
 8001f66:	201d      	movs	r0, #29
 8001f68:	f7ff ff24 	bl	8001db4 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8001f6c:	f000 f9e2 	bl	8002334 <nRF24_FlushRX>
	nRF24_FlushTX();
 8001f70:	f000 f9d8 	bl	8002324 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001f74:	f000 f9e6 	bl	8002344 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f7e:	4802      	ldr	r0, [pc, #8]	; (8001f88 <nRF24_Init+0xa0>)
 8001f80:	f002 fb8e 	bl	80046a0 <HAL_GPIO_WritePin>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40010800 	.word	0x40010800

08001f8c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <nRF24_Check+0x58>)
 8001f94:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8001f96:	2205      	movs	r2, #5
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	2030      	movs	r0, #48	; 0x30
 8001f9c:	f7ff ff78 	bl	8001e90 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f7ff ff46 	bl	8001e38 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e010      	b.n	8001fd4 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	4413      	add	r3, r2
 8001fba:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1c59      	adds	r1, r3, #1
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <nRF24_Check+0x42>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e006      	b.n	8001fdc <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d9eb      	bls.n	8001fb2 <nRF24_Check+0x26>
	}

	return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	0800ab6c 	.word	0x0800ab6c

08001fe8 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff feba 	bl	8001d6c <nRF24_ReadReg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d104      	bne.n	800200c <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e003      	b.n	8002014 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	f023 0302 	bic.w	r3, r3, #2
 8002012:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4619      	mov	r1, r3
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fecb 	bl	8001db4 <nRF24_WriteReg>
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fe9b 	bl	8001d6c <nRF24_ReadReg>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	b25a      	sxtb	r2, r3
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	4313      	orrs	r3, r2
 8002052:	b25b      	sxtb	r3, r3
 8002054:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4619      	mov	r1, r3
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff feaa 	bl	8001db4 <nRF24_WriteReg>
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fe7a 	bl	8001d6c <nRF24_ReadReg>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	f023 030c 	bic.w	r3, r3, #12
 8002082:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	b25a      	sxtb	r2, r3
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4313      	orrs	r3, r2
 8002094:	b25b      	sxtb	r3, r3
 8002096:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4619      	mov	r1, r3
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff fe89 	bl	8001db4 <nRF24_WriteReg>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2005      	movs	r0, #5
 80020ba:	f7ff fe7b 	bl	8001db4 <nRF24_WriteReg>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	3b02      	subs	r3, #2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4619      	mov	r1, r3
 80020d8:	2003      	movs	r0, #3
 80020da:	f7ff fe6b 	bl	8001db4 <nRF24_WriteReg>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d846      	bhi.n	8002188 <nRF24_SetAddr+0xa0>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <nRF24_SetAddr+0x18>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	0800211d 	.word	0x0800211d
 8002104:	0800211d 	.word	0x0800211d
 8002108:	08002175 	.word	0x08002175
 800210c:	08002175 	.word	0x08002175
 8002110:	08002175 	.word	0x08002175
 8002114:	08002175 	.word	0x08002175
 8002118:	0800211d 	.word	0x0800211d
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800211c:	2003      	movs	r0, #3
 800211e:	f7ff fe25 	bl	8001d6c <nRF24_ReadReg>
 8002122:	4603      	mov	r3, r0
 8002124:	3301      	adds	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002130:	2200      	movs	r2, #0
 8002132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002136:	4817      	ldr	r0, [pc, #92]	; (8002194 <nRF24_SetAddr+0xac>)
 8002138:	f002 fab2 	bl	80046a0 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <nRF24_SetAddr+0xb0>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	f043 0320 	orr.w	r3, r3, #32
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fde9 	bl	8001d20 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	603a      	str	r2, [r7, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fde2 	bl	8001d20 <nRF24_LL_RW>
			} while (addr_width--);
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	73fa      	strb	r2, [r7, #15]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f3      	bne.n	800214e <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <nRF24_SetAddr+0xac>)
 800216e:	f002 fa97 	bl	80046a0 <HAL_GPIO_WritePin>
			break;
 8002172:	e00a      	b.n	800218a <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <nRF24_SetAddr+0xb0>)
 8002178:	5cd2      	ldrb	r2, [r2, r3]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7ff fe17 	bl	8001db4 <nRF24_WriteReg>
			break;
 8002186:	e000      	b.n	800218a <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002188:	bf00      	nop
	}
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40010800 	.word	0x40010800
 8002198:	0800aba8 	.word	0x0800aba8

0800219c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80021a6:	2006      	movs	r0, #6
 80021a8:	f7ff fde0 	bl	8001d6c <nRF24_ReadReg>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	f023 0306 	bic.w	r3, r3, #6
 80021b6:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4619      	mov	r1, r3
 80021c4:	2006      	movs	r0, #6
 80021c6:	f7ff fdf5 	bl	8001db4 <nRF24_WriteReg>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80021dc:	2006      	movs	r0, #6
 80021de:	f7ff fdc5 	bl	8001d6c <nRF24_ReadReg>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80021ec:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4619      	mov	r1, r3
 80021fa:	2006      	movs	r0, #6
 80021fc:	f7ff fdda 	bl	8001db4 <nRF24_WriteReg>
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	460b      	mov	r3, r1
 8002214:	71bb      	strb	r3, [r7, #6]
 8002216:	4613      	mov	r3, r2
 8002218:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff fda6 	bl	8001d6c <nRF24_ReadReg>
 8002220:	4603      	mov	r3, r0
 8002222:	b25a      	sxtb	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	b25b      	sxtb	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b25b      	sxtb	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002238:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	4619      	mov	r1, r3
 800223e:	2002      	movs	r0, #2
 8002240:	f7ff fdb8 	bl	8001db4 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4a19      	ldr	r2, [pc, #100]	; (80022ac <nRF24_SetRXPipe+0xa4>)
 8002248:	5cd2      	ldrb	r2, [r2, r3]
 800224a:	797b      	ldrb	r3, [r7, #5]
 800224c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7ff fdad 	bl	8001db4 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff fd86 	bl	8001d6c <nRF24_ReadReg>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10a      	bne.n	8002280 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2201      	movs	r2, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	b25a      	sxtb	r2, r3
 8002274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002278:	4313      	orrs	r3, r2
 800227a:	b25b      	sxtb	r3, r3
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e00b      	b.n	8002298 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2201      	movs	r2, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	b25b      	sxtb	r3, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	b25a      	sxtb	r2, r3
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4013      	ands	r3, r2
 8002294:	b25b      	sxtb	r3, r3
 8002296:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	4619      	mov	r1, r3
 800229c:	2001      	movs	r0, #1
 800229e:	f7ff fd89 	bl	8001db4 <nRF24_WriteReg>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0800aba0 	.word	0x0800aba0

080022b0 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d904      	bls.n	80022ca <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80022c0:	2100      	movs	r1, #0
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fd76 	bl	8001db4 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80022c8:	e015      	b.n	80022f6 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fd4e 	bl	8001d6c <nRF24_ReadReg>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	b25a      	sxtb	r2, r3
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4013      	ands	r3, r2
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	4619      	mov	r1, r3
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff fd5f 	bl	8001db4 <nRF24_WriteReg>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002302:	2007      	movs	r0, #7
 8002304:	f7ff fd32 	bl	8001d6c <nRF24_ReadReg>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}

0800230e <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002312:	2017      	movs	r0, #23
 8002314:	f7ff fd2a 	bl	8001d6c <nRF24_ReadReg>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	b2db      	uxtb	r3, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}

08002324 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002328:	21ff      	movs	r1, #255	; 0xff
 800232a:	20e1      	movs	r0, #225	; 0xe1
 800232c:	f7ff fd42 	bl	8001db4 <nRF24_WriteReg>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002338:	21ff      	movs	r1, #255	; 0xff
 800233a:	20e2      	movs	r0, #226	; 0xe2
 800233c:	f7ff fd3a 	bl	8001db4 <nRF24_WriteReg>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800234a:	2007      	movs	r0, #7
 800234c:	f7ff fd0e 	bl	8001d6c <nRF24_ReadReg>
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800235a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4619      	mov	r1, r3
 8002360:	2007      	movs	r0, #7
 8002362:	f7ff fd27 	bl	8001db4 <nRF24_WriteReg>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	461a      	mov	r2, r3
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	20a0      	movs	r0, #160	; 0xa0
 8002382:	f7ff fd85 	bl	8001e90 <nRF24_WriteMBReg>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800239a:	2007      	movs	r0, #7
 800239c:	f7ff fce6 	bl	8001d6c <nRF24_ReadReg>
 80023a0:	4603      	mov	r3, r0
 80023a2:	105b      	asrs	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d816      	bhi.n	80023e0 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <nRF24_ReadPayload+0x60>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fcd7 	bl	8001d6c <nRF24_ReadReg>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	2061      	movs	r0, #97	; 0x61
 80023d8:	f7ff fd2e 	bl	8001e38 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	e003      	b.n	80023e8 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80023e6:	23ff      	movs	r3, #255	; 0xff
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	0800aba0 	.word	0x0800aba0

080023f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_MspInit+0x5c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_MspInit+0x5c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_MspInit+0x5c>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <HAL_MspInit+0x5c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_MspInit+0x60>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_MspInit+0x60>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000

08002458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_ADC_MspInit+0x6c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d121      	bne.n	80024bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 800247e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_ADC_MspInit+0x70>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ac:	2303      	movs	r3, #3
 80024ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_ADC_MspInit+0x74>)
 80024b8:	f001 ff98 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012400 	.word	0x40012400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010800 	.word	0x40010800

080024d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0x74>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d124      	bne.n	800253a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_I2C_MspInit+0x78>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_I2C_MspInit+0x78>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_I2C_MspInit+0x78>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800250c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250e:	2312      	movs	r3, #18
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4619      	mov	r1, r3
 800251c:	480b      	ldr	r0, [pc, #44]	; (800254c <HAL_I2C_MspInit+0x7c>)
 800251e:	f001 ff65 	bl	80043ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_I2C_MspInit+0x78>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_I2C_MspInit+0x78>)
 8002528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_I2C_MspInit+0x78>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40005800 	.word	0x40005800
 8002548:	40021000 	.word	0x40021000
 800254c:	40010c00 	.word	0x40010c00

08002550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_SPI_MspInit+0x8c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d131      	bne.n	80025d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 8002576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257a:	61d3      	str	r3, [r2, #28]
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_SPI_MspInit+0x90>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80025a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <HAL_SPI_MspInit+0x94>)
 80025b6:	f001 ff19 	bl	80043ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	4619      	mov	r1, r3
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_SPI_MspInit+0x94>)
 80025d0:	f001 ff0c 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40003800 	.word	0x40003800
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010c00 	.word	0x40010c00

080025e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_TIM_Base_MspInit+0x68>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10c      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 8002600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002604:	6193      	str	r3, [r2, #24]
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002612:	e018      	b.n	8002646 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d113      	bne.n	8002646 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_TIM_Base_MspInit+0x6c>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2101      	movs	r1, #1
 800263a:	201c      	movs	r0, #28
 800263c:	f001 fe9f 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002640:	201c      	movs	r0, #28
 8002642:	f001 feb8 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_TIM_MspPostInit+0x5c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d118      	bne.n	80026aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002690:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2302      	movs	r3, #2
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_TIM_MspPostInit+0x64>)
 80026a6:	f001 fea1 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010800 	.word	0x40010800

080026c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_UART_MspInit+0xa4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d13d      	bne.n	800275c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <HAL_UART_MspInit+0xa8>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_UART_MspInit+0xa8>)
 80026e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ea:	6193      	str	r3, [r2, #24]
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_UART_MspInit+0xa8>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_UART_MspInit+0xa8>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_UART_MspInit+0xa8>)
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0xa8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002710:	2340      	movs	r3, #64	; 0x40
 8002712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	4812      	ldr	r0, [pc, #72]	; (800276c <HAL_UART_MspInit+0xac>)
 8002724:	f001 fe62 	bl	80043ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <HAL_UART_MspInit+0xac>)
 800273c:	f001 fe56 	bl	80043ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_UART_MspInit+0xb0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_UART_MspInit+0xb0>)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40013800 	.word	0x40013800
 8002768:	40021000 	.word	0x40021000
 800276c:	40010c00 	.word	0x40010c00
 8002770:	40010000 	.word	0x40010000

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <HardFault_Handler+0x4>

08002786 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <MemManage_Handler+0x4>

0800278c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <BusFault_Handler+0x4>

08002792 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <UsageFault_Handler+0x4>

08002798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f001 f81c 	bl	80037fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	b089      	sub	sp, #36	; 0x24
 80027ce:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d0:	4891      	ldr	r0, [pc, #580]	; (8002a18 <TIM2_IRQHandler+0x250>)
 80027d2:	f003 fdc7 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 80027d6:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <TIM2_IRQHandler+0x254>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	4a8f      	ldr	r2, [pc, #572]	; (8002a1c <TIM2_IRQHandler+0x254>)
 80027de:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 80027e0:	4b8e      	ldr	r3, [pc, #568]	; (8002a1c <TIM2_IRQHandler+0x254>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2bf9      	cmp	r3, #249	; 0xf9
 80027e6:	d907      	bls.n	80027f8 <TIM2_IRQHandler+0x30>
  {
	  LEDcount=0;
 80027e8:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <TIM2_IRQHandler+0x254>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80027ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f2:	488b      	ldr	r0, [pc, #556]	; (8002a20 <TIM2_IRQHandler+0x258>)
 80027f4:	f001 ff6c 	bl	80046d0 <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027fe:	4889      	ldr	r0, [pc, #548]	; (8002a24 <TIM2_IRQHandler+0x25c>)
 8002800:	f001 ff4e 	bl	80046a0 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 8002804:	210a      	movs	r1, #10
 8002806:	4888      	ldr	r0, [pc, #544]	; (8002a28 <TIM2_IRQHandler+0x260>)
 8002808:	f001 f9bc 	bl	8003b84 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 800280c:	4886      	ldr	r0, [pc, #536]	; (8002a28 <TIM2_IRQHandler+0x260>)
 800280e:	f001 fab3 	bl	8003d78 <HAL_ADC_GetValue>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fa3d 	bl	8000c94 <__aeabi_ui2f>
 800281a:	4603      	mov	r3, r0
 800281c:	4983      	ldr	r1, [pc, #524]	; (8002a2c <TIM2_IRQHandler+0x264>)
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fa90 	bl	8000d44 <__aeabi_fmul>
 8002824:	4603      	mov	r3, r0
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc52 	bl	80010d0 <__aeabi_f2uiz>
 800282c:	4602      	mov	r2, r0
 800282e:	4b80      	ldr	r3, [pc, #512]	; (8002a30 <TIM2_IRQHandler+0x268>)
 8002830:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8002832:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <TIM2_IRQHandler+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7e      	ldr	r2, [pc, #504]	; (8002a30 <TIM2_IRQHandler+0x268>)
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	497f      	ldr	r1, [pc, #508]	; (8002a38 <TIM2_IRQHandler+0x270>)
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8002840:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <TIM2_IRQHandler+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a7b      	ldr	r2, [pc, #492]	; (8002a34 <TIM2_IRQHandler+0x26c>)
 8002848:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <TIM2_IRQHandler+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b31      	cmp	r3, #49	; 0x31
 8002850:	d902      	bls.n	8002858 <TIM2_IRQHandler+0x90>
 8002852:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <TIM2_IRQHandler+0x26c>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8002858:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <TIM2_IRQHandler+0x274>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <TIM2_IRQHandler+0x278>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e00e      	b.n	8002884 <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <TIM2_IRQHandler+0x278>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <TIM2_IRQHandler+0x270>)
 800286c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002870:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <TIM2_IRQHandler+0x274>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4413      	add	r3, r2
 8002876:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <TIM2_IRQHandler+0x274>)
 8002878:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <TIM2_IRQHandler+0x278>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <TIM2_IRQHandler+0x278>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <TIM2_IRQHandler+0x278>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b31      	cmp	r3, #49	; 0x31
 800288a:	d9ec      	bls.n	8002866 <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 800288c:	4b6b      	ldr	r3, [pc, #428]	; (8002a3c <TIM2_IRQHandler+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6c      	ldr	r2, [pc, #432]	; (8002a44 <TIM2_IRQHandler+0x27c>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	4a6b      	ldr	r2, [pc, #428]	; (8002a48 <TIM2_IRQHandler+0x280>)
 800289a:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------


  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 800289c:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <TIM2_IRQHandler+0x284>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06f      	beq.n	8002984 <TIM2_IRQHandler+0x1bc>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 80028a4:	f7ff fd33 	bl	800230e <nRF24_GetStatus_RXFIFO>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d06a      	beq.n	8002984 <TIM2_IRQHandler+0x1bc>
  		{
  			watch1++;
 80028ae:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <TIM2_IRQHandler+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a66      	ldr	r2, [pc, #408]	; (8002a50 <TIM2_IRQHandler+0x288>)
 80028b6:	6013      	str	r3, [r2, #0]

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 80028b8:	4966      	ldr	r1, [pc, #408]	; (8002a54 <TIM2_IRQHandler+0x28c>)
 80028ba:	4867      	ldr	r0, [pc, #412]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028bc:	f7ff fd68 	bl	8002390 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 80028c0:	f7ff fd40 	bl	8002344 <nRF24_ClearIRQFlags>

  			Ljoyupdown=nRF24_payloadRX[0];
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <TIM2_IRQHandler+0x294>)
 80028cc:	601a      	str	r2, [r3, #0]
  			Ljoyleftright=nRF24_payloadRX[1];
 80028ce:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b62      	ldr	r3, [pc, #392]	; (8002a60 <TIM2_IRQHandler+0x298>)
 80028d6:	601a      	str	r2, [r3, #0]
  			Djoyupdown=nRF24_payloadRX[2];
 80028d8:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028da:	789b      	ldrb	r3, [r3, #2]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <TIM2_IRQHandler+0x29c>)
 80028e0:	601a      	str	r2, [r3, #0]
  			Djoyleftright=nRF24_payloadRX[3];
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028e4:	78db      	ldrb	r3, [r3, #3]
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <TIM2_IRQHandler+0x2a0>)
 80028ea:	601a      	str	r2, [r3, #0]
  			potenc1=nRF24_payloadRX[4];
 80028ec:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <TIM2_IRQHandler+0x2a4>)
 80028f4:	601a      	str	r2, [r3, #0]
  			potenc2=nRF24_payloadRX[5];
 80028f6:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <TIM2_IRQHandler+0x290>)
 80028f8:	795b      	ldrb	r3, [r3, #5]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <TIM2_IRQHandler+0x2a8>)
 80028fe:	601a      	str	r2, [r3, #0]

  			togg1=nRF24_payloadRX[6]>>7;
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <TIM2_IRQHandler+0x290>)
 8002902:	799b      	ldrb	r3, [r3, #6]
 8002904:	09db      	lsrs	r3, r3, #7
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <TIM2_IRQHandler+0x2ac>)
 800290c:	601a      	str	r2, [r3, #0]
  			togg2=(nRF24_payloadRX[6] & 64 )>>6;
 800290e:	4b52      	ldr	r3, [pc, #328]	; (8002a58 <TIM2_IRQHandler+0x290>)
 8002910:	799b      	ldrb	r3, [r3, #6]
 8002912:	119b      	asrs	r3, r3, #6
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <TIM2_IRQHandler+0x2b0>)
 800291a:	6013      	str	r3, [r2, #0]
  			butt1=(nRF24_payloadRX[6] & 32 )>>5;
 800291c:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <TIM2_IRQHandler+0x290>)
 800291e:	799b      	ldrb	r3, [r3, #6]
 8002920:	115b      	asrs	r3, r3, #5
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <TIM2_IRQHandler+0x2b4>)
 8002928:	6013      	str	r3, [r2, #0]
  			butt2=(nRF24_payloadRX[6] & 16 )>>4;
 800292a:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <TIM2_IRQHandler+0x290>)
 800292c:	799b      	ldrb	r3, [r3, #6]
 800292e:	111b      	asrs	r3, r3, #4
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <TIM2_IRQHandler+0x2b8>)
 8002936:	6013      	str	r3, [r2, #0]
  			butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8002938:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <TIM2_IRQHandler+0x290>)
 800293a:	799b      	ldrb	r3, [r3, #6]
 800293c:	10db      	asrs	r3, r3, #3
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <TIM2_IRQHandler+0x2bc>)
 8002944:	6013      	str	r3, [r2, #0]
  			butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8002946:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <TIM2_IRQHandler+0x290>)
 8002948:	799b      	ldrb	r3, [r3, #6]
 800294a:	109b      	asrs	r3, r3, #2
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <TIM2_IRQHandler+0x2c0>)
 8002952:	6013      	str	r3, [r2, #0]
  			buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <TIM2_IRQHandler+0x290>)
 8002956:	799b      	ldrb	r3, [r3, #6]
 8002958:	105b      	asrs	r3, r3, #1
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <TIM2_IRQHandler+0x2c4>)
 8002960:	6013      	str	r3, [r2, #0]
  			buttD=(nRF24_payloadRX[6] & 1 );
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <TIM2_IRQHandler+0x290>)
 8002964:	799b      	ldrb	r3, [r3, #6]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	4a49      	ldr	r2, [pc, #292]	; (8002a90 <TIM2_IRQHandler+0x2c8>)
 800296c:	6013      	str	r3, [r2, #0]

  			SendBackFlag=1;
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <TIM2_IRQHandler+0x2cc>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8002974:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <TIM2_IRQHandler+0x284>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <TIM2_IRQHandler+0x2d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a45      	ldr	r2, [pc, #276]	; (8002a98 <TIM2_IRQHandler+0x2d0>)
 8002982:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <TIM2_IRQHandler+0x2cc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8097 	beq.w	8002abc <TIM2_IRQHandler+0x2f4>
  {
    	BackTimer++;
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <TIM2_IRQHandler+0x2d4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <TIM2_IRQHandler+0x2d4>)
 8002996:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <TIM2_IRQHandler+0x2d4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	2b05      	cmp	r3, #5
 80029a0:	f200 808c 	bhi.w	8002abc <TIM2_IRQHandler+0x2f4>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <TIM2_IRQHandler+0x1e4>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029c5 	.word	0x080029c5
 80029b0:	08002abd 	.word	0x08002abd
 80029b4:	08002abd 	.word	0x08002abd
 80029b8:	080029d9 	.word	0x080029d9
 80029bc:	08002a03 	.word	0x08002a03
 80029c0:	08002aa9 	.word	0x08002aa9
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ca:	4816      	ldr	r0, [pc, #88]	; (8002a24 <TIM2_IRQHandler+0x25c>)
 80029cc:	f001 fe68 	bl	80046a0 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fb28 	bl	8002026 <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 80029d6:	e071      	b.n	8002abc <TIM2_IRQHandler+0x2f4>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <TIM2_IRQHandler+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <TIM2_IRQHandler+0x2d8>)
 80029e0:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <TIM2_IRQHandler+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <TIM2_IRQHandler+0x2d8>)
 80029ec:	705a      	strb	r2, [r3, #1]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 2);
 80029ee:	2102      	movs	r1, #2
 80029f0:	482b      	ldr	r0, [pc, #172]	; (8002aa0 <TIM2_IRQHandler+0x2d8>)
 80029f2:	f7ff f945 	bl	8001c80 <nRF24_TransmitPacket>
  	 	 			watch2++;
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <TIM2_IRQHandler+0x2dc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a29      	ldr	r2, [pc, #164]	; (8002aa4 <TIM2_IRQHandler+0x2dc>)
 80029fe:	6013      	str	r3, [r2, #0]
  	 	 	 	 }break;
 8002a00:	e05c      	b.n	8002abc <TIM2_IRQHandler+0x2f4>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7ff fb0f 	bl	8002026 <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <TIM2_IRQHandler+0x25c>)
 8002a10:	f001 fe46 	bl	80046a0 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8002a14:	e052      	b.n	8002abc <TIM2_IRQHandler+0x2f4>
 8002a16:	bf00      	nop
 8002a18:	200004f0 	.word	0x200004f0
 8002a1c:	20000664 	.word	0x20000664
 8002a20:	40011000 	.word	0x40011000
 8002a24:	40010c00 	.word	0x40010c00
 8002a28:	2000040c 	.word	0x2000040c
 8002a2c:	4090ac29 	.word	0x4090ac29
 8002a30:	20000668 	.word	0x20000668
 8002a34:	2000022c 	.word	0x2000022c
 8002a38:	20000578 	.word	0x20000578
 8002a3c:	20000224 	.word	0x20000224
 8002a40:	20000218 	.word	0x20000218
 8002a44:	51eb851f 	.word	0x51eb851f
 8002a48:	20000228 	.word	0x20000228
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	2000037c 	.word	0x2000037c
 8002a54:	20000214 	.word	0x20000214
 8002a58:	20000344 	.word	0x20000344
 8002a5c:	200004d4 	.word	0x200004d4
 8002a60:	2000043c 	.word	0x2000043c
 8002a64:	20000544 	.word	0x20000544
 8002a68:	20000284 	.word	0x20000284
 8002a6c:	200004ec 	.word	0x200004ec
 8002a70:	20000548 	.word	0x20000548
 8002a74:	20000488 	.word	0x20000488
 8002a78:	20000554 	.word	0x20000554
 8002a7c:	200004e4 	.word	0x200004e4
 8002a80:	20000550 	.word	0x20000550
 8002a84:	20000484 	.word	0x20000484
 8002a88:	2000028c 	.word	0x2000028c
 8002a8c:	200002ec 	.word	0x200002ec
 8002a90:	200004e8 	.word	0x200004e8
 8002a94:	20000230 	.word	0x20000230
 8002a98:	20000574 	.word	0x20000574
 8002a9c:	20000234 	.word	0x20000234
 8002aa0:	200003ec 	.word	0x200003ec
 8002aa4:	20000368 	.word	0x20000368

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <TIM2_IRQHandler+0x32c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <TIM2_IRQHandler+0x330>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <TIM2_IRQHandler+0x334>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

  				}break;
 8002aba:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <TIM2_IRQHandler+0x338>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <TIM2_IRQHandler+0x338>)
 8002ac4:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <TIM2_IRQHandler+0x338>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	d12a      	bne.n	8002b26 <TIM2_IRQHandler+0x35e>
  {
    		MSGprerSecond=MSGcount;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <TIM2_IRQHandler+0x33c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <TIM2_IRQHandler+0x340>)
 8002ad6:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <TIM2_IRQHandler+0x33c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b09      	cmp	r3, #9
 8002ade:	d819      	bhi.n	8002b14 <TIM2_IRQHandler+0x34c>
    		{
    			MSGLowCount++;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <TIM2_IRQHandler+0x344>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <TIM2_IRQHandler+0x344>)
 8002ae8:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <TIM2_IRQHandler+0x348>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e013      	b.n	8002b1a <TIM2_IRQHandler+0x352>
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000230 	.word	0x20000230
 8002afc:	20000234 	.word	0x20000234
 8002b00:	20000560 	.word	0x20000560
 8002b04:	20000574 	.word	0x20000574
 8002b08:	20000644 	.word	0x20000644
 8002b0c:	20000640 	.word	0x20000640
 8002b10:	20000660 	.word	0x20000660
    		}
    		 else  ConnectWeakFlag=0;
 8002b14:	4bb8      	ldr	r3, [pc, #736]	; (8002df8 <TIM2_IRQHandler+0x630>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002b1a:	4bb8      	ldr	r3, [pc, #736]	; (8002dfc <TIM2_IRQHandler+0x634>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8002b20:	4bb7      	ldr	r3, [pc, #732]	; (8002e00 <TIM2_IRQHandler+0x638>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8002b26:	49b7      	ldr	r1, [pc, #732]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002b28:	48b7      	ldr	r0, [pc, #732]	; (8002e08 <TIM2_IRQHandler+0x640>)
 8002b2a:	f7fe fb55 	bl	80011d8 <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8002b2e:	49b5      	ldr	r1, [pc, #724]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002b30:	48b5      	ldr	r0, [pc, #724]	; (8002e08 <TIM2_IRQHandler+0x640>)
 8002b32:	f7fe fb83 	bl	800123c <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8002b36:	4bb3      	ldr	r3, [pc, #716]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002b38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4bb3      	ldr	r3, [pc, #716]	; (8002e0c <TIM2_IRQHandler+0x644>)
 8002b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	4bb0      	ldr	r3, [pc, #704]	; (8002e10 <TIM2_IRQHandler+0x648>)
 8002b4e:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8002b50:	4bac      	ldr	r3, [pc, #688]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002b52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	4bae      	ldr	r3, [pc, #696]	; (8002e14 <TIM2_IRQHandler+0x64c>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	4bac      	ldr	r3, [pc, #688]	; (8002e18 <TIM2_IRQHandler+0x650>)
 8002b68:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8002b6a:	4ba6      	ldr	r3, [pc, #664]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002b6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4baa      	ldr	r3, [pc, #680]	; (8002e1c <TIM2_IRQHandler+0x654>)
 8002b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	4ba7      	ldr	r3, [pc, #668]	; (8002e20 <TIM2_IRQHandler+0x658>)
 8002b82:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTORANGLE;
 8002b84:	4ba2      	ldr	r3, [pc, #648]	; (8002e10 <TIM2_IRQHandler+0x648>)
 8002b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe f886 	bl	8000c9c <__aeabi_i2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	49a4      	ldr	r1, [pc, #656]	; (8002e24 <TIM2_IRQHandler+0x65c>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f8d5 	bl	8000d44 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4ba2      	ldr	r3, [pc, #648]	; (8002e28 <TIM2_IRQHandler+0x660>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fd ffc5 	bl	8000b34 <__addsf3>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b9e      	ldr	r3, [pc, #632]	; (8002e28 <TIM2_IRQHandler+0x660>)
 8002bb0:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTORANGLE;
 8002bb2:	4b99      	ldr	r3, [pc, #612]	; (8002e18 <TIM2_IRQHandler+0x650>)
 8002bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f86f 	bl	8000c9c <__aeabi_i2f>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4998      	ldr	r1, [pc, #608]	; (8002e24 <TIM2_IRQHandler+0x65c>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f8be 	bl	8000d44 <__aeabi_fmul>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b97      	ldr	r3, [pc, #604]	; (8002e2c <TIM2_IRQHandler+0x664>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7fd ffae 	bl	8000b34 <__addsf3>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b93      	ldr	r3, [pc, #588]	; (8002e2c <TIM2_IRQHandler+0x664>)
 8002bde:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <TIM2_IRQHandler+0x660>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fc1f 	bl	8000428 <__aeabi_f2d>
 8002bea:	4680      	mov	r8, r0
 8002bec:	4689      	mov	r9, r1
 8002bee:	4b8f      	ldr	r3, [pc, #572]	; (8002e2c <TIM2_IRQHandler+0x664>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc18 	bl	8000428 <__aeabi_f2d>
 8002bf8:	4682      	mov	sl, r0
 8002bfa:	468b      	mov	fp, r1
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <TIM2_IRQHandler+0x658>)
 8002bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f84a 	bl	8000c9c <__aeabi_i2f>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4989      	ldr	r1, [pc, #548]	; (8002e30 <TIM2_IRQHandler+0x668>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f899 	bl	8000d44 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4983      	ldr	r1, [pc, #524]	; (8002e24 <TIM2_IRQHandler+0x65c>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f894 	bl	8000d44 <__aeabi_fmul>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc02 	bl	8000428 <__aeabi_f2d>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f006 fc12 	bl	8009454 <sin>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4650      	mov	r0, sl
 8002c36:	4659      	mov	r1, fp
 8002c38:	f7fd fc4e 	bl	80004d8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4640      	mov	r0, r8
 8002c42:	4649      	mov	r1, r9
 8002c44:	f7fd fa92 	bl	800016c <__adddf3>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fd ff1a 	bl	8000a88 <__aeabi_d2f>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <TIM2_IRQHandler+0x660>)
 8002c58:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <TIM2_IRQHandler+0x664>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fbe2 	bl	8000428 <__aeabi_f2d>
 8002c64:	4680      	mov	r8, r0
 8002c66:	4689      	mov	r9, r1
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <TIM2_IRQHandler+0x660>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fbdb 	bl	8000428 <__aeabi_f2d>
 8002c72:	4682      	mov	sl, r0
 8002c74:	468b      	mov	fp, r1
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <TIM2_IRQHandler+0x658>)
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f80d 	bl	8000c9c <__aeabi_i2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	496a      	ldr	r1, [pc, #424]	; (8002e30 <TIM2_IRQHandler+0x668>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f85c 	bl	8000d44 <__aeabi_fmul>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <TIM2_IRQHandler+0x65c>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f857 	bl	8000d44 <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fbc5 	bl	8000428 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f006 fbd5 	bl	8009454 <sin>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4650      	mov	r0, sl
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	f7fd fc11 	bl	80004d8 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4640      	mov	r0, r8
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	f7fd fa53 	bl	8000168 <__aeabi_dsub>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd fedd 	bl	8000a88 <__aeabi_d2f>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <TIM2_IRQHandler+0x664>)
 8002cd2:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cec:	4619      	mov	r1, r3
 8002cee:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf4:	fb03 f301 	mul.w	r3, r3, r1
 8002cf8:	441a      	add	r2, r3
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002cfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d08:	fb03 f301 	mul.w	r3, r3, r1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fb78 	bl	8000404 <__aeabi_i2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f006 fc28 	bl	8009570 <sqrt>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f7fd feae 	bl	8000a88 <__aeabi_d2f>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <TIM2_IRQHandler+0x66c>)
 8002d30:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002d34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd ffaf 	bl	8000c9c <__aeabi_i2f>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <TIM2_IRQHandler+0x66c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7fe f8b0 	bl	8000eac <__aeabi_fdiv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fb6a 	bl	8000428 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f006 fbb4 	bl	80094c8 <asin>
 8002d60:	a323      	add	r3, pc, #140	; (adr r3, 8002df0 <TIM2_IRQHandler+0x628>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fbb7 	bl	80004d8 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd fe89 	bl	8000a88 <__aeabi_d2f>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <TIM2_IRQHandler+0x670>)
 8002d7a:	601a      	str	r2, [r3, #0]
  AngleRollAccel=-asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <TIM2_IRQHandler+0x63c>)
 8002d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd ff8a 	bl	8000c9c <__aeabi_i2f>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <TIM2_IRQHandler+0x66c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7fe f88b 	bl	8000eac <__aeabi_fdiv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb45 	bl	8000428 <__aeabi_f2d>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f006 fb8f 	bl	80094c8 <asin>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4614      	mov	r4, r2
 8002db0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002db4:	a30e      	add	r3, pc, #56	; (adr r3, 8002df0 <TIM2_IRQHandler+0x628>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fb8b 	bl	80004d8 <__aeabi_dmul>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4621      	mov	r1, r4
 8002dca:	f7fd fe5d 	bl	8000a88 <__aeabi_d2f>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <TIM2_IRQHandler+0x674>)
 8002dd2:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <TIM2_IRQHandler+0x670>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4919      	ldr	r1, [pc, #100]	; (8002e40 <TIM2_IRQHandler+0x678>)
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fea8 	bl	8000b30 <__aeabi_fsub>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <TIM2_IRQHandler+0x670>)
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e02c      	b.n	8002e44 <TIM2_IRQHandler+0x67c>
 8002dea:	bf00      	nop
 8002dec:	f3af 8000 	nop.w
 8002df0:	20000000 	.word	0x20000000
 8002df4:	404ca5dc 	.word	0x404ca5dc
 8002df8:	20000660 	.word	0x20000660
 8002dfc:	20000574 	.word	0x20000574
 8002e00:	20000560 	.word	0x20000560
 8002e04:	20000530 	.word	0x20000530
 8002e08:	200002f0 	.word	0x200002f0
 8002e0c:	20000364 	.word	0x20000364
 8002e10:	20000290 	.word	0x20000290
 8002e14:	200003e4 	.word	0x200003e4
 8002e18:	20000378 	.word	0x20000378
 8002e1c:	20000292 	.word	0x20000292
 8002e20:	20000480 	.word	0x20000480
 8002e24:	38001203 	.word	0x38001203
 8002e28:	20000654 	.word	0x20000654
 8002e2c:	20000568 	.word	0x20000568
 8002e30:	3c8efa35 	.word	0x3c8efa35
 8002e34:	20000564 	.word	0x20000564
 8002e38:	20000658 	.word	0x20000658
 8002e3c:	20000648 	.word	0x20000648
 8002e40:	3e4ccccd 	.word	0x3e4ccccd
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 8002e44:	4bae      	ldr	r3, [pc, #696]	; (8003100 <TIM2_IRQHandler+0x938>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	49ae      	ldr	r1, [pc, #696]	; (8003104 <TIM2_IRQHandler+0x93c>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fe70 	bl	8000b30 <__aeabi_fsub>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4baa      	ldr	r3, [pc, #680]	; (8003100 <TIM2_IRQHandler+0x938>)
 8002e56:	601a      	str	r2, [r3, #0]

  AnglePitch=0.998*AnglePitchGyro + 0.002*AnglePitchAccel;
 8002e58:	4bab      	ldr	r3, [pc, #684]	; (8003108 <TIM2_IRQHandler+0x940>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fae3 	bl	8000428 <__aeabi_f2d>
 8002e62:	a39f      	add	r3, pc, #636	; (adr r3, 80030e0 <TIM2_IRQHandler+0x918>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fb36 	bl	80004d8 <__aeabi_dmul>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4625      	mov	r5, r4
 8002e72:	461c      	mov	r4, r3
 8002e74:	4ba5      	ldr	r3, [pc, #660]	; (800310c <TIM2_IRQHandler+0x944>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fad5 	bl	8000428 <__aeabi_f2d>
 8002e7e:	a39a      	add	r3, pc, #616	; (adr r3, 80030e8 <TIM2_IRQHandler+0x920>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd fb28 	bl	80004d8 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd f96c 	bl	800016c <__adddf3>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	f7fd fdf4 	bl	8000a88 <__aeabi_d2f>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b9b      	ldr	r3, [pc, #620]	; (8003110 <TIM2_IRQHandler+0x948>)
 8002ea4:	601a      	str	r2, [r3, #0]
  AngleRoll=0.998*AngleRollGyro + 0.002*AngleRollAccel;
 8002ea6:	4b9b      	ldr	r3, [pc, #620]	; (8003114 <TIM2_IRQHandler+0x94c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fabc 	bl	8000428 <__aeabi_f2d>
 8002eb0:	a38b      	add	r3, pc, #556	; (adr r3, 80030e0 <TIM2_IRQHandler+0x918>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fb0f 	bl	80004d8 <__aeabi_dmul>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	4625      	mov	r5, r4
 8002ec0:	461c      	mov	r4, r3
 8002ec2:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <TIM2_IRQHandler+0x938>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd faae 	bl	8000428 <__aeabi_f2d>
 8002ecc:	a386      	add	r3, pc, #536	; (adr r3, 80030e8 <TIM2_IRQHandler+0x920>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fb01 	bl	80004d8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f945 	bl	800016c <__adddf3>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4621      	mov	r1, r4
 8002eea:	f7fd fdcd 	bl	8000a88 <__aeabi_d2f>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b89      	ldr	r3, [pc, #548]	; (8003118 <TIM2_IRQHandler+0x950>)
 8002ef2:	601a      	str	r2, [r3, #0]

  //GYRO Data deg/s for 3 PID loops Filtered
  PitchGyroPIDin = (PitchGyroPIDin * 0.7) + (GyroXcal * GYROFACTORANGLEDEG * 0.3);
 8002ef4:	4b89      	ldr	r3, [pc, #548]	; (800311c <TIM2_IRQHandler+0x954>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fa95 	bl	8000428 <__aeabi_f2d>
 8002efe:	a37c      	add	r3, pc, #496	; (adr r3, 80030f0 <TIM2_IRQHandler+0x928>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fae8 	bl	80004d8 <__aeabi_dmul>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4625      	mov	r5, r4
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4b83      	ldr	r3, [pc, #524]	; (8003120 <TIM2_IRQHandler+0x958>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fec0 	bl	8000c9c <__aeabi_i2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4981      	ldr	r1, [pc, #516]	; (8003124 <TIM2_IRQHandler+0x95c>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd ff0f 	bl	8000d44 <__aeabi_fmul>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fa7d 	bl	8000428 <__aeabi_f2d>
 8002f2e:	a372      	add	r3, pc, #456	; (adr r3, 80030f8 <TIM2_IRQHandler+0x930>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd fad0 	bl	80004d8 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd f914 	bl	800016c <__adddf3>
 8002f44:	4603      	mov	r3, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	f7fd fd9c 	bl	8000a88 <__aeabi_d2f>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <TIM2_IRQHandler+0x954>)
 8002f54:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (GyroYcal * GYROFACTORANGLEDEG * 0.3);
 8002f56:	4b74      	ldr	r3, [pc, #464]	; (8003128 <TIM2_IRQHandler+0x960>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fa64 	bl	8000428 <__aeabi_f2d>
 8002f60:	a363      	add	r3, pc, #396	; (adr r3, 80030f0 <TIM2_IRQHandler+0x928>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd fab7 	bl	80004d8 <__aeabi_dmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	4625      	mov	r5, r4
 8002f70:	461c      	mov	r4, r3
 8002f72:	4b6e      	ldr	r3, [pc, #440]	; (800312c <TIM2_IRQHandler+0x964>)
 8002f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fe8f 	bl	8000c9c <__aeabi_i2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4968      	ldr	r1, [pc, #416]	; (8003124 <TIM2_IRQHandler+0x95c>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fede 	bl	8000d44 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fa4c 	bl	8000428 <__aeabi_f2d>
 8002f90:	a359      	add	r3, pc, #356	; (adr r3, 80030f8 <TIM2_IRQHandler+0x930>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fa9f 	bl	80004d8 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7fd f8e3 	bl	800016c <__adddf3>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	4618      	mov	r0, r3
 8002fac:	4621      	mov	r1, r4
 8002fae:	f7fd fd6b 	bl	8000a88 <__aeabi_d2f>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <TIM2_IRQHandler+0x960>)
 8002fb6:	601a      	str	r2, [r3, #0]
  YawGyroPIDin = (YawGyroPIDin * 0.7) + (GyroZcal * GYROFACTORANGLEDEG * 0.3);
 8002fb8:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <TIM2_IRQHandler+0x968>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fa33 	bl	8000428 <__aeabi_f2d>
 8002fc2:	a34b      	add	r3, pc, #300	; (adr r3, 80030f0 <TIM2_IRQHandler+0x928>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f7fd fa86 	bl	80004d8 <__aeabi_dmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4625      	mov	r5, r4
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	4b57      	ldr	r3, [pc, #348]	; (8003134 <TIM2_IRQHandler+0x96c>)
 8002fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fe5e 	bl	8000c9c <__aeabi_i2f>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4950      	ldr	r1, [pc, #320]	; (8003124 <TIM2_IRQHandler+0x95c>)
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fead 	bl	8000d44 <__aeabi_fmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd fa1b 	bl	8000428 <__aeabi_f2d>
 8002ff2:	a341      	add	r3, pc, #260	; (adr r3, 80030f8 <TIM2_IRQHandler+0x930>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fa6e 	bl	80004d8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd f8b2 	bl	800016c <__adddf3>
 8003008:	4603      	mov	r3, r0
 800300a:	460c      	mov	r4, r1
 800300c:	4618      	mov	r0, r3
 800300e:	4621      	mov	r1, r4
 8003010:	f7fd fd3a 	bl	8000a88 <__aeabi_d2f>
 8003014:	4602      	mov	r2, r0
 8003016:	4b46      	ldr	r3, [pc, #280]	; (8003130 <TIM2_IRQHandler+0x968>)
 8003018:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA

  //Input Controller Center to MAX 50 - >100  --->0-800 us
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,50,100,MINTRHOTTLE,THROTTLESCALE);//throttle limit to 80%
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <TIM2_IRQHandler+0x970>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fe38 	bl	8000c94 <__aeabi_ui2f>
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <TIM2_IRQHandler+0x974>)
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4b45      	ldr	r3, [pc, #276]	; (8003140 <TIM2_IRQHandler+0x978>)
 800302a:	4a46      	ldr	r2, [pc, #280]	; (8003144 <TIM2_IRQHandler+0x97c>)
 800302c:	4946      	ldr	r1, [pc, #280]	; (8003148 <TIM2_IRQHandler+0x980>)
 800302e:	f000 fa6f 	bl	8003510 <ScaleDataFl>
 8003032:	4602      	mov	r2, r0
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <TIM2_IRQHandler+0x984>)
 8003036:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0 -> 100 -----> -180 ->180 deg/s
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-MAXPITCHSCALE,MAXPITCHSCALE);
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <TIM2_IRQHandler+0x988>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fe29 	bl	8000c94 <__aeabi_ui2f>
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <TIM2_IRQHandler+0x98c>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4b44      	ldr	r3, [pc, #272]	; (8003158 <TIM2_IRQHandler+0x990>)
 8003048:	4a3e      	ldr	r2, [pc, #248]	; (8003144 <TIM2_IRQHandler+0x97c>)
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	f000 fa5f 	bl	8003510 <ScaleDataFl>
 8003052:	4602      	mov	r2, r0
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <TIM2_IRQHandler+0x994>)
 8003056:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 -----> -180 ->180 deg/s
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-MAXROLLSCALE,MAXROLLSCALE);
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <TIM2_IRQHandler+0x998>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fe19 	bl	8000c94 <__aeabi_ui2f>
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <TIM2_IRQHandler+0x98c>)
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <TIM2_IRQHandler+0x990>)
 8003068:	4a36      	ldr	r2, [pc, #216]	; (8003144 <TIM2_IRQHandler+0x97c>)
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	f000 fa4f 	bl	8003510 <ScaleDataFl>
 8003072:	4602      	mov	r2, r0
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <TIM2_IRQHandler+0x99c>)
 8003076:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 -----> -270 ->270 deg/s
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-MAXYAWSCALE,MAXYAWSCALE);
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <TIM2_IRQHandler+0x9a0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fe09 	bl	8000c94 <__aeabi_ui2f>
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <TIM2_IRQHandler+0x9a4>)
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <TIM2_IRQHandler+0x9a8>)
 8003088:	4a2e      	ldr	r2, [pc, #184]	; (8003144 <TIM2_IRQHandler+0x97c>)
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	f000 fa3f 	bl	8003510 <ScaleDataFl>
 8003092:	4602      	mov	r2, r0
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <TIM2_IRQHandler+0x9ac>)
 8003096:	601a      	str	r2, [r3, #0]



  if(AutoLevel==1)
 8003098:	4b37      	ldr	r3, [pc, #220]	; (8003178 <TIM2_IRQHandler+0x9b0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d173      	bne.n	8003188 <TIM2_IRQHandler+0x9c0>
  {
	  PitchAutoAdjust=(AnglePitch*MAXPITCHSCALE)/MAXPITCHANGLE;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <TIM2_IRQHandler+0x948>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	492b      	ldr	r1, [pc, #172]	; (8003154 <TIM2_IRQHandler+0x98c>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fe4c 	bl	8000d44 <__aeabi_fmul>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4933      	ldr	r1, [pc, #204]	; (800317c <TIM2_IRQHandler+0x9b4>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fefb 	bl	8000eac <__aeabi_fdiv>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <TIM2_IRQHandler+0x9b8>)
 80030bc:	601a      	str	r2, [r3, #0]
	  RollAutoAdjust=(AngleRollAccel*MAXROLLSCALE)/MAXROLLANGLE;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <TIM2_IRQHandler+0x938>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4924      	ldr	r1, [pc, #144]	; (8003154 <TIM2_IRQHandler+0x98c>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fe3d 	bl	8000d44 <__aeabi_fmul>
 80030ca:	4603      	mov	r3, r0
 80030cc:	492b      	ldr	r1, [pc, #172]	; (800317c <TIM2_IRQHandler+0x9b4>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd feec 	bl	8000eac <__aeabi_fdiv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <TIM2_IRQHandler+0x9bc>)
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e05c      	b.n	8003198 <TIM2_IRQHandler+0x9d0>
 80030de:	bf00      	nop
 80030e0:	b22d0e56 	.word	0xb22d0e56
 80030e4:	3fefef9d 	.word	0x3fefef9d
 80030e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80030ec:	3f60624d 	.word	0x3f60624d
 80030f0:	66666666 	.word	0x66666666
 80030f4:	3fe66666 	.word	0x3fe66666
 80030f8:	33333333 	.word	0x33333333
 80030fc:	3fd33333 	.word	0x3fd33333
 8003100:	20000648 	.word	0x20000648
 8003104:	400ccccd 	.word	0x400ccccd
 8003108:	20000654 	.word	0x20000654
 800310c:	20000658 	.word	0x20000658
 8003110:	2000064c 	.word	0x2000064c
 8003114:	20000568 	.word	0x20000568
 8003118:	2000066c 	.word	0x2000066c
 800311c:	20000248 	.word	0x20000248
 8003120:	20000290 	.word	0x20000290
 8003124:	3c7a232d 	.word	0x3c7a232d
 8003128:	2000024c 	.word	0x2000024c
 800312c:	20000378 	.word	0x20000378
 8003130:	20000250 	.word	0x20000250
 8003134:	20000480 	.word	0x20000480
 8003138:	200004d4 	.word	0x200004d4
 800313c:	44480000 	.word	0x44480000
 8003140:	43480000 	.word	0x43480000
 8003144:	42c80000 	.word	0x42c80000
 8003148:	42480000 	.word	0x42480000
 800314c:	20000238 	.word	0x20000238
 8003150:	20000544 	.word	0x20000544
 8003154:	43340000 	.word	0x43340000
 8003158:	c3340000 	.word	0xc3340000
 800315c:	2000023c 	.word	0x2000023c
 8003160:	20000284 	.word	0x20000284
 8003164:	20000240 	.word	0x20000240
 8003168:	2000043c 	.word	0x2000043c
 800316c:	43870000 	.word	0x43870000
 8003170:	c3870000 	.word	0xc3870000
 8003174:	20000244 	.word	0x20000244
 8003178:	20000220 	.word	0x20000220
 800317c:	42700000 	.word	0x42700000
 8003180:	20000270 	.word	0x20000270
 8003184:	20000274 	.word	0x20000274
  }
  else
  {
	  PitchAutoAdjust=0;
 8003188:	4b93      	ldr	r3, [pc, #588]	; (80033d8 <TIM2_IRQHandler+0xc10>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
	  RollAutoAdjust=0;
 8003190:	4b92      	ldr	r3, [pc, #584]	; (80033dc <TIM2_IRQHandler+0xc14>)
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
  }
  PitchINscaled-=PitchAutoAdjust;
 8003198:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <TIM2_IRQHandler+0xc18>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <TIM2_IRQHandler+0xc10>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fd fcc4 	bl	8000b30 <__aeabi_fsub>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b8c      	ldr	r3, [pc, #560]	; (80033e0 <TIM2_IRQHandler+0xc18>)
 80031ae:	601a      	str	r2, [r3, #0]
  RollINscaled-=RollAutoAdjust;
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <TIM2_IRQHandler+0xc1c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b89      	ldr	r3, [pc, #548]	; (80033dc <TIM2_IRQHandler+0xc14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fd fcb8 	bl	8000b30 <__aeabi_fsub>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b87      	ldr	r3, [pc, #540]	; (80033e4 <TIM2_IRQHandler+0xc1c>)
 80031c6:	601a      	str	r2, [r3, #0]

  //PID
 // pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, pid_p_gain_pitch, pid_i_gain_pitch, pid_d_gain_pitch,pitch_integral, pitch_diffErrHist, pid_i_max_pitch, pid_max_pitch);
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, pid_p_gain_roll, pid_i_gain_roll, pid_d_gain_roll,roll_integral,roll_diffErrHist,pid_i_max_roll, pid_max_roll );
 80031c8:	4b86      	ldr	r3, [pc, #536]	; (80033e4 <TIM2_IRQHandler+0xc1c>)
 80031ca:	f8d3 8000 	ldr.w	r8, [r3]
 80031ce:	4b86      	ldr	r3, [pc, #536]	; (80033e8 <TIM2_IRQHandler+0xc20>)
 80031d0:	f8d3 9000 	ldr.w	r9, [r3]
 80031d4:	4b85      	ldr	r3, [pc, #532]	; (80033ec <TIM2_IRQHandler+0xc24>)
 80031d6:	f8d3 a000 	ldr.w	sl, [r3]
 80031da:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <TIM2_IRQHandler+0xc28>)
 80031dc:	f8d3 b000 	ldr.w	fp, [r3]
 80031e0:	4b84      	ldr	r3, [pc, #528]	; (80033f4 <TIM2_IRQHandler+0xc2c>)
 80031e2:	681c      	ldr	r4, [r3, #0]
 80031e4:	4b84      	ldr	r3, [pc, #528]	; (80033f8 <TIM2_IRQHandler+0xc30>)
 80031e6:	681d      	ldr	r5, [r3, #0]
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <TIM2_IRQHandler+0xc34>)
 80031ea:	681e      	ldr	r6, [r3, #0]
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <TIM2_IRQHandler+0xc38>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fd53 	bl	8000c9c <__aeabi_i2f>
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4b82      	ldr	r3, [pc, #520]	; (8003404 <TIM2_IRQHandler+0xc3c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fd4d 	bl	8000c9c <__aeabi_i2f>
 8003202:	4603      	mov	r3, r0
 8003204:	9304      	str	r3, [sp, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	9602      	str	r6, [sp, #8]
 800320c:	9501      	str	r5, [sp, #4]
 800320e:	9400      	str	r4, [sp, #0]
 8003210:	465b      	mov	r3, fp
 8003212:	4652      	mov	r2, sl
 8003214:	4649      	mov	r1, r9
 8003216:	4640      	mov	r0, r8
 8003218:	f000 f9b0 	bl	800357c <pid>
 800321c:	4602      	mov	r2, r0
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <TIM2_IRQHandler+0xc40>)
 8003220:	601a      	str	r2, [r3, #0]
  //pid_output_yaw = pid(YawINscaled, YawGyroPIDin, pid_p_gain_yaw, pid_i_gain_yaw, pid_d_gain_yaw, yaw_integral,yaw_diffErrHist,pid_i_max_roll, pid_max_yaw );

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus==0;//if connection is lost!
 8003222:	4b7a      	ldr	r3, [pc, #488]	; (800340c <TIM2_IRQHandler+0xc44>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1


  //AutoLevel ON/OFF (TOGGLE 2)
  if(togg2==1)AutoLevel=1;
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <TIM2_IRQHandler+0xc48>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d103      	bne.n	8003238 <TIM2_IRQHandler+0xa70>
 8003230:	4b78      	ldr	r3, [pc, #480]	; (8003414 <TIM2_IRQHandler+0xc4c>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e002      	b.n	800323e <TIM2_IRQHandler+0xa76>
  else AutoLevel=0;
 8003238:	4b76      	ldr	r3, [pc, #472]	; (8003414 <TIM2_IRQHandler+0xc4c>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1)MotorStatus=1;
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <TIM2_IRQHandler+0xc50>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <TIM2_IRQHandler+0xc54>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d006      	beq.n	8003258 <TIM2_IRQHandler+0xa90>
 800324a:	4b74      	ldr	r3, [pc, #464]	; (800341c <TIM2_IRQHandler+0xc54>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <TIM2_IRQHandler+0xa90>
 8003252:	4b73      	ldr	r3, [pc, #460]	; (8003420 <TIM2_IRQHandler+0xc58>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
  togg1hist=togg1;
 8003258:	4b70      	ldr	r3, [pc, #448]	; (800341c <TIM2_IRQHandler+0xc54>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <TIM2_IRQHandler+0xc50>)
 800325e:	6013      	str	r3, [r2, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=0;
 8003260:	4b6e      	ldr	r3, [pc, #440]	; (800341c <TIM2_IRQHandler+0xc54>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <TIM2_IRQHandler+0xaa6>
 8003268:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <TIM2_IRQHandler+0xc58>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

  if(MotorStatus==1)
 800326e:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <TIM2_IRQHandler+0xc58>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10a      	bne.n	800328c <TIM2_IRQHandler+0xac4>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 8003276:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <TIM2_IRQHandler+0xc5c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6b      	ldr	r2, [pc, #428]	; (8003428 <TIM2_IRQHandler+0xc60>)
 800327c:	6013      	str	r3, [r2, #0]
	  AngleRollGyro=AngleRollAccel;
 800327e:	4b6b      	ldr	r3, [pc, #428]	; (800342c <TIM2_IRQHandler+0xc64>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <TIM2_IRQHandler+0xc68>)
 8003284:	6013      	str	r3, [r2, #0]

	  MotorStatus=2;
 8003286:	4b66      	ldr	r3, [pc, #408]	; (8003420 <TIM2_IRQHandler+0xc58>)
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <TIM2_IRQHandler+0xc58>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 80db 	bne.w	800344c <TIM2_IRQHandler+0xc84>
  {
  	  case 2:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled /*- pid_output_pitch*/ - pid_output_roll /*+ pid_output_yaw*/;
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <TIM2_IRQHandler+0xc6c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4967      	ldr	r1, [pc, #412]	; (8003438 <TIM2_IRQHandler+0xc70>)
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fc49 	bl	8000b34 <__addsf3>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b58      	ldr	r3, [pc, #352]	; (8003408 <TIM2_IRQHandler+0xc40>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fd fc3f 	bl	8000b30 <__aeabi_fsub>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd ff0b 	bl	80010d0 <__aeabi_f2uiz>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b5f      	ldr	r3, [pc, #380]	; (800343c <TIM2_IRQHandler+0xc74>)
 80032be:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled /*- pid_output_pitch*/ + pid_output_roll /*- pid_output_yaw*/;
 80032c0:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <TIM2_IRQHandler+0xc6c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	495c      	ldr	r1, [pc, #368]	; (8003438 <TIM2_IRQHandler+0xc70>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fc34 	bl	8000b34 <__addsf3>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <TIM2_IRQHandler+0xc40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7fd fc2c 	bl	8000b34 <__addsf3>
 80032dc:	4603      	mov	r3, r0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fef6 	bl	80010d0 <__aeabi_f2uiz>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <TIM2_IRQHandler+0xc78>)
 80032e8:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled /*+ pid_output_pitch*/ + pid_output_roll /*+ pid_output_yaw*/;
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <TIM2_IRQHandler+0xc6c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4952      	ldr	r1, [pc, #328]	; (8003438 <TIM2_IRQHandler+0xc70>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fc1f 	bl	8000b34 <__addsf3>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <TIM2_IRQHandler+0xc40>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7fd fc17 	bl	8000b34 <__addsf3>
 8003306:	4603      	mov	r3, r0
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fee1 	bl	80010d0 <__aeabi_f2uiz>
 800330e:	4602      	mov	r2, r0
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <TIM2_IRQHandler+0xc7c>)
 8003312:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled /*+ pid_output_pitch*/ - pid_output_roll /*- pid_output_yaw*/;
 8003314:	4b47      	ldr	r3, [pc, #284]	; (8003434 <TIM2_IRQHandler+0xc6c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4947      	ldr	r1, [pc, #284]	; (8003438 <TIM2_IRQHandler+0xc70>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fc0a 	bl	8000b34 <__addsf3>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <TIM2_IRQHandler+0xc40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f7fd fc00 	bl	8000b30 <__aeabi_fsub>
 8003330:	4603      	mov	r3, r0
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fecc 	bl	80010d0 <__aeabi_f2uiz>
 8003338:	4602      	mov	r2, r0
 800333a:	4b43      	ldr	r3, [pc, #268]	; (8003448 <TIM2_IRQHandler+0xc80>)
 800333c:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ MINTRHOTTLE))PWM_Mot1=(1000+ MINTRHOTTLE);
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <TIM2_IRQHandler+0xc74>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003346:	d203      	bcs.n	8003350 <TIM2_IRQHandler+0xb88>
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <TIM2_IRQHandler+0xc74>)
 800334a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800334e:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ MINTRHOTTLE))PWM_Mot2=(1000+ MINTRHOTTLE);
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <TIM2_IRQHandler+0xc78>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003358:	d203      	bcs.n	8003362 <TIM2_IRQHandler+0xb9a>
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <TIM2_IRQHandler+0xc78>)
 800335c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003360:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ MINTRHOTTLE))PWM_Mot3=(1000+ MINTRHOTTLE);
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <TIM2_IRQHandler+0xc7c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800336a:	d203      	bcs.n	8003374 <TIM2_IRQHandler+0xbac>
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <TIM2_IRQHandler+0xc7c>)
 800336e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003372:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ MINTRHOTTLE))PWM_Mot4=(1000+ MINTRHOTTLE);
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <TIM2_IRQHandler+0xc80>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800337c:	d203      	bcs.n	8003386 <TIM2_IRQHandler+0xbbe>
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <TIM2_IRQHandler+0xc80>)
 8003380:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003384:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <TIM2_IRQHandler+0xc74>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f240 729e 	movw	r2, #1950	; 0x79e
 800338e:	4293      	cmp	r3, r2
 8003390:	d903      	bls.n	800339a <TIM2_IRQHandler+0xbd2>
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <TIM2_IRQHandler+0xc74>)
 8003394:	f240 729e 	movw	r2, #1950	; 0x79e
 8003398:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <TIM2_IRQHandler+0xc78>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f240 729e 	movw	r2, #1950	; 0x79e
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d903      	bls.n	80033ae <TIM2_IRQHandler+0xbe6>
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <TIM2_IRQHandler+0xc78>)
 80033a8:	f240 729e 	movw	r2, #1950	; 0x79e
 80033ac:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 80033ae:	4b25      	ldr	r3, [pc, #148]	; (8003444 <TIM2_IRQHandler+0xc7c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f240 729e 	movw	r2, #1950	; 0x79e
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d903      	bls.n	80033c2 <TIM2_IRQHandler+0xbfa>
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <TIM2_IRQHandler+0xc7c>)
 80033bc:	f240 729e 	movw	r2, #1950	; 0x79e
 80033c0:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 80033c2:	4b21      	ldr	r3, [pc, #132]	; (8003448 <TIM2_IRQHandler+0xc80>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f240 729e 	movw	r2, #1950	; 0x79e
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d967      	bls.n	800349e <TIM2_IRQHandler+0xcd6>
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <TIM2_IRQHandler+0xc80>)
 80033d0:	f240 729e 	movw	r2, #1950	; 0x79e
 80033d4:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 80033d6:	e062      	b.n	800349e <TIM2_IRQHandler+0xcd6>
 80033d8:	20000270 	.word	0x20000270
 80033dc:	20000274 	.word	0x20000274
 80033e0:	2000023c 	.word	0x2000023c
 80033e4:	20000240 	.word	0x20000240
 80033e8:	2000024c 	.word	0x2000024c
 80033ec:	20000004 	.word	0x20000004
 80033f0:	20000008 	.word	0x20000008
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	20000260 	.word	0x20000260
 80033fc:	20000264 	.word	0x20000264
 8003400:	20000014 	.word	0x20000014
 8003404:	20000010 	.word	0x20000010
 8003408:	20000254 	.word	0x20000254
 800340c:	20000660 	.word	0x20000660
 8003410:	20000554 	.word	0x20000554
 8003414:	20000220 	.word	0x20000220
 8003418:	20000670 	.word	0x20000670
 800341c:	20000488 	.word	0x20000488
 8003420:	2000021c 	.word	0x2000021c
 8003424:	20000658 	.word	0x20000658
 8003428:	20000654 	.word	0x20000654
 800342c:	20000648 	.word	0x20000648
 8003430:	20000568 	.word	0x20000568
 8003434:	20000238 	.word	0x20000238
 8003438:	447a0000 	.word	0x447a0000
 800343c:	2000065c 	.word	0x2000065c
 8003440:	20000570 	.word	0x20000570
 8003444:	2000056c 	.word	0x2000056c
 8003448:	20000650 	.word	0x20000650

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <TIM2_IRQHandler+0xd18>)
 800344e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003452:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <TIM2_IRQHandler+0xd1c>)
 8003456:	f44f 7261 	mov.w	r2, #900	; 0x384
 800345a:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <TIM2_IRQHandler+0xd20>)
 800345e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003462:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <TIM2_IRQHandler+0xd24>)
 8003466:	f44f 7261 	mov.w	r2, #900	; 0x384
 800346a:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <TIM2_IRQHandler+0xd28>)
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <TIM2_IRQHandler+0xd2c>)
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <TIM2_IRQHandler+0xd30>)
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <TIM2_IRQHandler+0xd34>)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <TIM2_IRQHandler+0xd38>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <TIM2_IRQHandler+0xd3c>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 800349c:	e000      	b.n	80034a0 <TIM2_IRQHandler+0xcd8>
  	  	  	  }break;
 800349e:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <TIM2_IRQHandler+0xd40>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <TIM2_IRQHandler+0xd18>)
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <TIM2_IRQHandler+0xd40>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <TIM2_IRQHandler+0xd1c>)
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <TIM2_IRQHandler+0xd40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <TIM2_IRQHandler+0xd20>)
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <TIM2_IRQHandler+0xd40>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <TIM2_IRQHandler+0xd24>)
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ce:	480f      	ldr	r0, [pc, #60]	; (800350c <TIM2_IRQHandler+0xd44>)
 80034d0:	f001 f8e6 	bl	80046a0 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	2000065c 	.word	0x2000065c
 80034e4:	20000570 	.word	0x20000570
 80034e8:	2000056c 	.word	0x2000056c
 80034ec:	20000650 	.word	0x20000650
 80034f0:	20000258 	.word	0x20000258
 80034f4:	2000025c 	.word	0x2000025c
 80034f8:	20000260 	.word	0x20000260
 80034fc:	20000264 	.word	0x20000264
 8003500:	20000268 	.word	0x20000268
 8003504:	2000026c 	.word	0x2000026c
 8003508:	20000494 	.word	0x20000494
 800350c:	40010c00 	.word	0x40010c00

08003510 <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003522:	f7fd fb05 	bl	8000b30 <__aeabi_fsub>
 8003526:	4603      	mov	r3, r0
 8003528:	461c      	mov	r4, r3
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fd faff 	bl	8000b30 <__aeabi_fsub>
 8003532:	4603      	mov	r3, r0
 8003534:	4619      	mov	r1, r3
 8003536:	4620      	mov	r0, r4
 8003538:	f7fd fcb8 	bl	8000eac <__aeabi_fdiv>
 800353c:	4603      	mov	r3, r0
 800353e:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7fd faf4 	bl	8000b30 <__aeabi_fsub>
 8003548:	4603      	mov	r3, r0
 800354a:	6939      	ldr	r1, [r7, #16]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd fbf9 	bl	8000d44 <__aeabi_fmul>
 8003552:	4603      	mov	r3, r0
 8003554:	4619      	mov	r1, r3
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f7fd faec 	bl	8000b34 <__addsf3>
 800355c:	4603      	mov	r3, r0
 800355e:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7fd fd8c 	bl	8001080 <__aeabi_fcmplt>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <ScaleDataFl+0x62>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	617b      	str	r3, [r7, #20]

	return out;
 8003572:	697b      	ldr	r3, [r7, #20]

}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd90      	pop	{r4, r7, pc}

0800357c <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float integral, float diffErrHist, float PIDimax, float PIDmax)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f7fd facf 	bl	8000b30 <__aeabi_fsub>
 8003592:	4603      	mov	r3, r0
 8003594:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	integral += pid_i * pid_error_temp;
 8003596:	6939      	ldr	r1, [r7, #16]
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f7fd fbd3 	bl	8000d44 <__aeabi_fmul>
 800359e:	4603      	mov	r3, r0
 80035a0:	4619      	mov	r1, r3
 80035a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a4:	f7fd fac6 	bl	8000b34 <__addsf3>
 80035a8:	4603      	mov	r3, r0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(integral > PIDimax)integral = PIDimax;
 80035ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035b0:	f7fd fd84 	bl	80010bc <__aeabi_fcmpgt>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <pid+0x44>
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035be:	e00d      	b.n	80035dc <pid+0x60>
	else if(integral < PIDimax * -1)integral = PIDimax * -1;
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	4619      	mov	r1, r3
 80035c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ca:	f7fd fd59 	bl	8001080 <__aeabi_fcmplt>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <pid+0x60>
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c

	out = pid_p * pid_error_temp + integral + pid_d * (pid_error_temp - diffErrHist);
 80035dc:	6939      	ldr	r1, [r7, #16]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fbb0 	bl	8000d44 <__aeabi_fmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd faa3 	bl	8000b34 <__addsf3>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461c      	mov	r4, r3
 80035f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f4:	6938      	ldr	r0, [r7, #16]
 80035f6:	f7fd fa9b 	bl	8000b30 <__aeabi_fsub>
 80035fa:	4603      	mov	r3, r0
 80035fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fba0 	bl	8000d44 <__aeabi_fmul>
 8003604:	4603      	mov	r3, r0
 8003606:	4619      	mov	r1, r3
 8003608:	4620      	mov	r0, r4
 800360a:	f7fd fa93 	bl	8000b34 <__addsf3>
 800360e:	4603      	mov	r3, r0
 8003610:	617b      	str	r3, [r7, #20]
	wfl1=out;
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <pid+0xe0>)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	6013      	str	r3, [r2, #0]
	if(out > PIDmax)out = PIDmax;
 8003618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7fd fd4e 	bl	80010bc <__aeabi_fcmpgt>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <pid+0xb0>
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e00d      	b.n	8003648 <pid+0xcc>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003632:	4619      	mov	r1, r3
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7fd fd23 	bl	8001080 <__aeabi_fcmplt>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <pid+0xcc>
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003646:	617b      	str	r3, [r7, #20]
    wfl2=out;
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <pid+0xe4>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6013      	str	r3, [r2, #0]
	//save Error for next cylce D calculation
	diffErrHist = pid_error_temp;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	633b      	str	r3, [r7, #48]	; 0x30

	return out;
 8003652:	697b      	ldr	r3, [r7, #20]
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	200004dc 	.word	0x200004dc
 8003660:	2000048c 	.word	0x2000048c

08003664 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <_sbrk+0x50>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_sbrk+0x16>
		heap_end = &end;
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <_sbrk+0x50>)
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <_sbrk+0x54>)
 8003678:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <_sbrk+0x50>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <_sbrk+0x50>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	466a      	mov	r2, sp
 800368a:	4293      	cmp	r3, r2
 800368c:	d907      	bls.n	800369e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800368e:	f003 fe71 	bl	8007374 <__errno>
 8003692:	4602      	mov	r2, r0
 8003694:	230c      	movs	r3, #12
 8003696:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800369c:	e006      	b.n	80036ac <_sbrk+0x48>
	}

	heap_end += incr;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <_sbrk+0x50>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <_sbrk+0x50>)
 80036a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000278 	.word	0x20000278
 80036b8:	20000680 	.word	0x20000680

080036bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <SystemInit+0x5c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <SystemInit+0x5c>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <SystemInit+0x5c>)
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4911      	ldr	r1, [pc, #68]	; (8003718 <SystemInit+0x5c>)
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <SystemInit+0x60>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <SystemInit+0x5c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <SystemInit+0x5c>)
 80036de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <SystemInit+0x5c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SystemInit+0x5c>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <SystemInit+0x5c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <SystemInit+0x5c>)
 80036fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SystemInit+0x5c>)
 8003702:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003706:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SystemInit+0x64>)
 800370a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40021000 	.word	0x40021000
 800371c:	f8ff0000 	.word	0xf8ff0000
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003726:	e003      	b.n	8003730 <LoopCopyDataInit>

08003728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800372a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800372c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800372e:	3104      	adds	r1, #4

08003730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003730:	480a      	ldr	r0, [pc, #40]	; (800375c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003738:	d3f6      	bcc.n	8003728 <CopyDataInit>
  ldr r2, =_sbss
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800373c:	e002      	b.n	8003744 <LoopFillZerobss>

0800373e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003740:	f842 3b04 	str.w	r3, [r2], #4

08003744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003748:	d3f9      	bcc.n	800373e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800374a:	f7ff ffb7 	bl	80036bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800374e:	f003 fe17 	bl	8007380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003752:	f7fd fdd9 	bl	8001308 <main>
  bx lr
 8003756:	4770      	bx	lr
  ldr r3, =_sidata
 8003758:	0800b018 	.word	0x0800b018
  ldr r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003760:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8003764:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003768:	2000067c 	.word	0x2000067c

0800376c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800376c:	e7fe      	b.n	800376c <ADC1_2_IRQHandler>
	...

08003770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_Init+0x28>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_Init+0x28>)
 800377a:	f043 0310 	orr.w	r3, r3, #16
 800377e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003780:	2003      	movs	r0, #3
 8003782:	f000 fdf1 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003786:	2002      	movs	r0, #2
 8003788:	f000 f808 	bl	800379c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800378c:	f7fe fe32 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000

0800379c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a4:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_InitTick+0x54>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_InitTick+0x58>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fe09 	bl	80043d2 <HAL_SYSTICK_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00e      	b.n	80037e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d80a      	bhi.n	80037e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d0:	2200      	movs	r2, #0
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d8:	f000 fdd1 	bl	800437e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <HAL_InitTick+0x5c>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000018 	.word	0x20000018
 80037f4:	20000020 	.word	0x20000020
 80037f8:	2000001c 	.word	0x2000001c

080037fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_IncTick+0x1c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_IncTick+0x20>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4413      	add	r3, r2
 800380c:	4a03      	ldr	r2, [pc, #12]	; (800381c <HAL_IncTick+0x20>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000020 	.word	0x20000020
 800381c:	20000674 	.word	0x20000674

08003820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <HAL_GetTick+0x10>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	20000674 	.word	0x20000674

08003834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff fff0 	bl	8003820 <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800384c:	d005      	beq.n	800385a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_Delay+0x40>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800385a:	bf00      	nop
 800385c:	f7ff ffe0 	bl	8003820 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d8f7      	bhi.n	800385c <HAL_Delay+0x28>
  {
  }
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000020 	.word	0x20000020

08003878 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0be      	b.n	8003a18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe fdce 	bl	8002458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fbb1 	bl	8004024 <ADC_ConversionStop_Disable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 8099 	bne.w	8003a06 <HAL_ADC_Init+0x18e>
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8095 	bne.w	8003a06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038e4:	f023 0302 	bic.w	r3, r3, #2
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7b1b      	ldrb	r3, [r3, #12]
 80038fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003900:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4313      	orrs	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d003      	beq.n	800391a <HAL_ADC_Init+0xa2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d102      	bne.n	8003920 <HAL_ADC_Init+0xa8>
 800391a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800391e:	e000      	b.n	8003922 <HAL_ADC_Init+0xaa>
 8003920:	2300      	movs	r3, #0
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7d1b      	ldrb	r3, [r3, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d119      	bne.n	8003964 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b1b      	ldrb	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	3b01      	subs	r3, #1
 800393e:	035a      	lsls	r2, r3, #13
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e00b      	b.n	8003964 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_ADC_Init+0x1a8>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	430b      	orrs	r3, r1
 800398a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003994:	d003      	beq.n	800399e <HAL_ADC_Init+0x126>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d104      	bne.n	80039a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	051b      	lsls	r3, r3, #20
 80039a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_ADC_Init+0x1ac>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039e2:	e018      	b.n	8003a16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	f023 0312 	bic.w	r3, r3, #18
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a04:	e007      	b.n	8003a16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	f043 0210 	orr.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	ffe1f7fd 	.word	0xffe1f7fd
 8003a24:	ff1f0efe 	.word	0xff1f0efe

08003a28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_Start+0x1a>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e098      	b.n	8003b74 <HAL_ADC_Start+0x14c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa98 	bl	8003f80 <ADC_Enable>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8087 	bne.w	8003b6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a41      	ldr	r2, [pc, #260]	; (8003b7c <HAL_ADC_Start+0x154>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d105      	bne.n	8003a86 <HAL_ADC_Start+0x5e>
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_ADC_Start+0x158>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d115      	bne.n	8003ab2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d026      	beq.n	8003aee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ab0:	e01d      	b.n	8003aee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <HAL_ADC_Start+0x158>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_Start+0xaa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <HAL_ADC_Start+0x154>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10d      	bne.n	8003aee <HAL_ADC_Start+0xc6>
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <HAL_ADC_Start+0x158>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f023 0206 	bic.w	r2, r3, #6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b06:	e002      	b.n	8003b0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f06f 0202 	mvn.w	r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b2e:	d113      	bne.n	8003b58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_ADC_Start+0x154>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d105      	bne.n	8003b46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_ADC_Start+0x158>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003b54:	609a      	str	r2, [r3, #8]
 8003b56:	e00c      	b.n	8003b72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e003      	b.n	8003b72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40012800 	.word	0x40012800
 8003b80:	40012400 	.word	0x40012400

08003b84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b9a:	f7ff fe41 	bl	8003820 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0c8      	b.n	8003d58 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d12a      	bne.n	8003c2a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d123      	bne.n	8003c2a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003be2:	e01a      	b.n	8003c1a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d016      	beq.n	8003c1a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_ADC_PollForConversion+0x7e>
 8003bf2:	f7ff fe15 	bl	8003820 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20b      	bcs.n	8003c1a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e09e      	b.n	8003d58 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0dd      	beq.n	8003be4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003c28:	e06c      	b.n	8003d04 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c2a:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_ADC_PollForConversion+0x1dc>)
 8003c2c:	681c      	ldr	r4, [r3, #0]
 8003c2e:	2002      	movs	r0, #2
 8003c30:	f002 f9c6 	bl	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c34:	4603      	mov	r3, r0
 8003c36:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6919      	ldr	r1, [r3, #16]
 8003c40:	4b48      	ldr	r3, [pc, #288]	; (8003d64 <HAL_ADC_PollForConversion+0x1e0>)
 8003c42:	400b      	ands	r3, r1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_ADC_PollForConversion+0xf6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68d9      	ldr	r1, [r3, #12]
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_ADC_PollForConversion+0x1e4>)
 8003c50:	400b      	ands	r3, r1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d111      	bne.n	8003c7a <HAL_ADC_PollForConversion+0xf6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6919      	ldr	r1, [r3, #16]
 8003c5c:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <HAL_ADC_PollForConversion+0x1e8>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <HAL_ADC_PollForConversion+0xf2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68d9      	ldr	r1, [r3, #12]
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_ADC_PollForConversion+0x1ec>)
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_PollForConversion+0xf2>
 8003c72:	2314      	movs	r3, #20
 8003c74:	e020      	b.n	8003cb8 <HAL_ADC_PollForConversion+0x134>
 8003c76:	2329      	movs	r3, #41	; 0x29
 8003c78:	e01e      	b.n	8003cb8 <HAL_ADC_PollForConversion+0x134>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6919      	ldr	r1, [r3, #16]
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_ADC_PollForConversion+0x1e8>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_ADC_PollForConversion+0x112>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68d9      	ldr	r1, [r3, #12]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_ADC_PollForConversion+0x1ec>)
 8003c90:	400b      	ands	r3, r1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <HAL_ADC_PollForConversion+0x12e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6919      	ldr	r1, [r3, #16]
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <HAL_ADC_PollForConversion+0x1f0>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <HAL_ADC_PollForConversion+0x132>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68d9      	ldr	r1, [r3, #12]
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_ADC_PollForConversion+0x1f0>)
 8003cac:	400b      	ands	r3, r1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_PollForConversion+0x132>
 8003cb2:	2354      	movs	r3, #84	; 0x54
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADC_PollForConversion+0x134>
 8003cb6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003cbe:	e01d      	b.n	8003cfc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc6:	d016      	beq.n	8003cf6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_ADC_PollForConversion+0x15a>
 8003cce:	f7ff fda7 	bl	8003820 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20b      	bcs.n	8003cf6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e030      	b.n	8003d58 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d8dd      	bhi.n	8003cc0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0212 	mvn.w	r2, #18
 8003d0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d24:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d28:	d115      	bne.n	8003d56 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d111      	bne.n	8003d56 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	20000018 	.word	0x20000018
 8003d64:	24924924 	.word	0x24924924
 8003d68:	00924924 	.word	0x00924924
 8003d6c:	12492492 	.word	0x12492492
 8003d70:	00492492 	.word	0x00492492
 8003d74:	00249249 	.word	0x00249249

08003d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x20>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e0dc      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x1da>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d81c      	bhi.n	8003dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b05      	subs	r3, #5
 8003dd2:	221f      	movs	r2, #31
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	4019      	ands	r1, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	3b05      	subs	r3, #5
 8003dec:	fa00 f203 	lsl.w	r2, r0, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
 8003df8:	e03c      	b.n	8003e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d81c      	bhi.n	8003e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	3b23      	subs	r3, #35	; 0x23
 8003e14:	221f      	movs	r2, #31
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	4019      	ands	r1, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b23      	subs	r3, #35	; 0x23
 8003e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	e01b      	b.n	8003e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b41      	subs	r3, #65	; 0x41
 8003e4e:	221f      	movs	r2, #31
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	4019      	ands	r1, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	3b41      	subs	r3, #65	; 0x41
 8003e68:	fa00 f203 	lsl.w	r2, r0, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d91c      	bls.n	8003eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3b1e      	subs	r3, #30
 8003e8e:	2207      	movs	r2, #7
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	4019      	ands	r1, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6898      	ldr	r0, [r3, #8]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b1e      	subs	r3, #30
 8003ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e019      	b.n	8003eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6919      	ldr	r1, [r3, #16]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	2207      	movs	r2, #7
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4019      	ands	r1, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6898      	ldr	r0, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d003      	beq.n	8003efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ef6:	2b11      	cmp	r3, #17
 8003ef8:	d132      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d125      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d126      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f20:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d11a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	0c9a      	lsrs	r2, r3, #18
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f40:	e002      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f9      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x1b2>
 8003f4e:	e007      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40012400 	.word	0x40012400
 8003f78:	20000018 	.word	0x20000018
 8003f7c:	431bde83 	.word	0x431bde83

08003f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d039      	beq.n	8004012 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <ADC_Enable+0x9c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <ADC_Enable+0xa0>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	0c9b      	lsrs	r3, r3, #18
 8003fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fbc:	e002      	b.n	8003fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f9      	bne.n	8003fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fca:	f7ff fc29 	bl	8003820 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fd0:	e018      	b.n	8004004 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fd2:	f7ff fc25 	bl	8003820 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d911      	bls.n	8004004 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e007      	b.n	8004014 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d1df      	bne.n	8003fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000018 	.word	0x20000018
 8004020:	431bde83 	.word	0x431bde83

08004024 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d127      	bne.n	800408e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800404e:	f7ff fbe7 	bl	8003820 <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004054:	e014      	b.n	8004080 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004056:	f7ff fbe3 	bl	8003820 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d90d      	bls.n	8004080 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f043 0210 	orr.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e007      	b.n	8004090 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d0e3      	beq.n	8004056 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e086      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0x12c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffb0 	bl	8004024 <ADC_ConversionStop_Disable>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d175      	bne.n	80041ba <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040d6:	f023 0302 	bic.w	r3, r3, #2
 80040da:	f043 0202 	orr.w	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_ADCEx_Calibration_Start+0x134>)
 80040e4:	681c      	ldr	r4, [r3, #0]
 80040e6:	2002      	movs	r0, #2
 80040e8:	f001 ff6a 	bl	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 80040ec:	4603      	mov	r3, r0
 80040ee:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80040f2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80040f4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80040f6:	e002      	b.n	80040fe <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f9      	bne.n	80040f8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff3b 	bl	8003f80 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0208 	orr.w	r2, r2, #8
 8004118:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800411a:	f7ff fb81 	bl	8003820 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004120:	e014      	b.n	800414c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004122:	f7ff fb7d 	bl	8003820 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b0a      	cmp	r3, #10
 800412e:	d90d      	bls.n	800414c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f023 0312 	bic.w	r3, r3, #18
 8004138:	f043 0210 	orr.w	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e03b      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e3      	bne.n	8004122 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0204 	orr.w	r2, r2, #4
 8004168:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800416a:	f7ff fb59 	bl	8003820 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004170:	e014      	b.n	800419c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004172:	f7ff fb55 	bl	8003820 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b0a      	cmp	r3, #10
 800417e:	d90d      	bls.n	800419c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f023 0312 	bic.w	r3, r3, #18
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e013      	b.n	80041c4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e3      	bne.n	8004172 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	20000018 	.word	0x20000018

080041d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0307 	and.w	r3, r3, #7
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0b      	blt.n	800425e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4906      	ldr	r1, [pc, #24]	; (8004268 <__NVIC_EnableIRQ+0x34>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	; (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	; 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004334:	d301      	bcc.n	800433a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004336:	2301      	movs	r3, #1
 8004338:	e00f      	b.n	800435a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <SysTick_Config+0x40>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004342:	210f      	movs	r1, #15
 8004344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004348:	f7ff ff90 	bl	800426c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <SysTick_Config+0x40>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <SysTick_Config+0x40>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000e010 	.word	0xe000e010

08004368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff2d 	bl	80041d0 <__NVIC_SetPriorityGrouping>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff42 	bl	8004218 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff90 	bl	80042c0 <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5f 	bl	800426c <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff35 	bl	8004234 <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa2 	bl	8004324 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b08b      	sub	sp, #44	; 0x2c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	e127      	b.n	8004650 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004400:	2201      	movs	r2, #1
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 8116 	bne.w	800464a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b12      	cmp	r3, #18
 8004424:	d034      	beq.n	8004490 <HAL_GPIO_Init+0xa4>
 8004426:	2b12      	cmp	r3, #18
 8004428:	d80d      	bhi.n	8004446 <HAL_GPIO_Init+0x5a>
 800442a:	2b02      	cmp	r3, #2
 800442c:	d02b      	beq.n	8004486 <HAL_GPIO_Init+0x9a>
 800442e:	2b02      	cmp	r3, #2
 8004430:	d804      	bhi.n	800443c <HAL_GPIO_Init+0x50>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d031      	beq.n	800449a <HAL_GPIO_Init+0xae>
 8004436:	2b01      	cmp	r3, #1
 8004438:	d01c      	beq.n	8004474 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800443a:	e048      	b.n	80044ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800443c:	2b03      	cmp	r3, #3
 800443e:	d043      	beq.n	80044c8 <HAL_GPIO_Init+0xdc>
 8004440:	2b11      	cmp	r3, #17
 8004442:	d01b      	beq.n	800447c <HAL_GPIO_Init+0x90>
          break;
 8004444:	e043      	b.n	80044ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004446:	4a89      	ldr	r2, [pc, #548]	; (800466c <HAL_GPIO_Init+0x280>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d026      	beq.n	800449a <HAL_GPIO_Init+0xae>
 800444c:	4a87      	ldr	r2, [pc, #540]	; (800466c <HAL_GPIO_Init+0x280>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d806      	bhi.n	8004460 <HAL_GPIO_Init+0x74>
 8004452:	4a87      	ldr	r2, [pc, #540]	; (8004670 <HAL_GPIO_Init+0x284>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d020      	beq.n	800449a <HAL_GPIO_Init+0xae>
 8004458:	4a86      	ldr	r2, [pc, #536]	; (8004674 <HAL_GPIO_Init+0x288>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_GPIO_Init+0xae>
          break;
 800445e:	e036      	b.n	80044ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004460:	4a85      	ldr	r2, [pc, #532]	; (8004678 <HAL_GPIO_Init+0x28c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d019      	beq.n	800449a <HAL_GPIO_Init+0xae>
 8004466:	4a85      	ldr	r2, [pc, #532]	; (800467c <HAL_GPIO_Init+0x290>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d016      	beq.n	800449a <HAL_GPIO_Init+0xae>
 800446c:	4a84      	ldr	r2, [pc, #528]	; (8004680 <HAL_GPIO_Init+0x294>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_GPIO_Init+0xae>
          break;
 8004472:	e02c      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	623b      	str	r3, [r7, #32]
          break;
 800447a:	e028      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	623b      	str	r3, [r7, #32]
          break;
 8004484:	e023      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	3308      	adds	r3, #8
 800448c:	623b      	str	r3, [r7, #32]
          break;
 800448e:	e01e      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	330c      	adds	r3, #12
 8004496:	623b      	str	r3, [r7, #32]
          break;
 8004498:	e019      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044a2:	2304      	movs	r3, #4
 80044a4:	623b      	str	r3, [r7, #32]
          break;
 80044a6:	e012      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044b0:	2308      	movs	r3, #8
 80044b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	611a      	str	r2, [r3, #16]
          break;
 80044ba:	e008      	b.n	80044ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044bc:	2308      	movs	r3, #8
 80044be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	615a      	str	r2, [r3, #20]
          break;
 80044c6:	e002      	b.n	80044ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
          break;
 80044cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2bff      	cmp	r3, #255	; 0xff
 80044d2:	d801      	bhi.n	80044d8 <HAL_GPIO_Init+0xec>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	e001      	b.n	80044dc <HAL_GPIO_Init+0xf0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2bff      	cmp	r3, #255	; 0xff
 80044e2:	d802      	bhi.n	80044ea <HAL_GPIO_Init+0xfe>
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x104>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	3b08      	subs	r3, #8
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	210f      	movs	r1, #15
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	401a      	ands	r2, r3
 8004502:	6a39      	ldr	r1, [r7, #32]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	431a      	orrs	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8096 	beq.w	800464a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800451e:	4b59      	ldr	r3, [pc, #356]	; (8004684 <HAL_GPIO_Init+0x298>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4a58      	ldr	r2, [pc, #352]	; (8004684 <HAL_GPIO_Init+0x298>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6193      	str	r3, [r2, #24]
 800452a:	4b56      	ldr	r3, [pc, #344]	; (8004684 <HAL_GPIO_Init+0x298>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004536:	4a54      	ldr	r2, [pc, #336]	; (8004688 <HAL_GPIO_Init+0x29c>)
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	3302      	adds	r3, #2
 800453e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004542:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	220f      	movs	r2, #15
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4013      	ands	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <HAL_GPIO_Init+0x2a0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_GPIO_Init+0x19e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4a      	ldr	r2, [pc, #296]	; (8004690 <HAL_GPIO_Init+0x2a4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_GPIO_Init+0x19a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a49      	ldr	r2, [pc, #292]	; (8004694 <HAL_GPIO_Init+0x2a8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_Init+0x196>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a48      	ldr	r2, [pc, #288]	; (8004698 <HAL_GPIO_Init+0x2ac>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_GPIO_Init+0x192>
 800457a:	2303      	movs	r3, #3
 800457c:	e006      	b.n	800458c <HAL_GPIO_Init+0x1a0>
 800457e:	2304      	movs	r3, #4
 8004580:	e004      	b.n	800458c <HAL_GPIO_Init+0x1a0>
 8004582:	2302      	movs	r3, #2
 8004584:	e002      	b.n	800458c <HAL_GPIO_Init+0x1a0>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_GPIO_Init+0x1a0>
 800458a:	2300      	movs	r3, #0
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	f002 0203 	and.w	r2, r2, #3
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	4093      	lsls	r3, r2
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800459c:	493a      	ldr	r1, [pc, #232]	; (8004688 <HAL_GPIO_Init+0x29c>)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	3302      	adds	r3, #2
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4938      	ldr	r1, [pc, #224]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045c4:	4b35      	ldr	r3, [pc, #212]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	4933      	ldr	r1, [pc, #204]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045de:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	492e      	ldr	r1, [pc, #184]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
 80045ea:	e006      	b.n	80045fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	4929      	ldr	r1, [pc, #164]	; (800469c <HAL_GPIO_Init+0x2b0>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004606:	4b25      	ldr	r3, [pc, #148]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	4924      	ldr	r1, [pc, #144]	; (800469c <HAL_GPIO_Init+0x2b0>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
 8004612:	e006      	b.n	8004622 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	43db      	mvns	r3, r3
 800461c:	491f      	ldr	r1, [pc, #124]	; (800469c <HAL_GPIO_Init+0x2b0>)
 800461e:	4013      	ands	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800462e:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	491a      	ldr	r1, [pc, #104]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	60cb      	str	r3, [r1, #12]
 800463a:	e006      	b.n	800464a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_GPIO_Init+0x2b0>)
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	43db      	mvns	r3, r3
 8004644:	4915      	ldr	r1, [pc, #84]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004646:	4013      	ands	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	3301      	adds	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	f47f aed0 	bne.w	8004400 <HAL_GPIO_Init+0x14>
  }
}
 8004660:	bf00      	nop
 8004662:	372c      	adds	r7, #44	; 0x2c
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	10210000 	.word	0x10210000
 8004670:	10110000 	.word	0x10110000
 8004674:	10120000 	.word	0x10120000
 8004678:	10310000 	.word	0x10310000
 800467c:	10320000 	.word	0x10320000
 8004680:	10220000 	.word	0x10220000
 8004684:	40021000 	.word	0x40021000
 8004688:	40010000 	.word	0x40010000
 800468c:	40010800 	.word	0x40010800
 8004690:	40010c00 	.word	0x40010c00
 8004694:	40011000 	.word	0x40011000
 8004698:	40011400 	.word	0x40011400
 800469c:	40010400 	.word	0x40010400

080046a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
 80046ac:	4613      	mov	r3, r2
 80046ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046b0:	787b      	ldrb	r3, [r7, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046bc:	e003      	b.n	80046c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046be:	887b      	ldrh	r3, [r7, #2]
 80046c0:	041a      	lsls	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046e8:	887a      	ldrh	r2, [r7, #2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80046ee:	e002      	b.n	80046f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046f0:	887a      	ldrh	r2, [r7, #2]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e10f      	b.n	8004932 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fed2 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004744:	f001 fb40 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4a7b      	ldr	r2, [pc, #492]	; (800493c <HAL_I2C_Init+0x23c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d807      	bhi.n	8004764 <HAL_I2C_Init+0x64>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a7a      	ldr	r2, [pc, #488]	; (8004940 <HAL_I2C_Init+0x240>)
 8004758:	4293      	cmp	r3, r2
 800475a:	bf94      	ite	ls
 800475c:	2301      	movls	r3, #1
 800475e:	2300      	movhi	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e006      	b.n	8004772 <HAL_I2C_Init+0x72>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a77      	ldr	r2, [pc, #476]	; (8004944 <HAL_I2C_Init+0x244>)
 8004768:	4293      	cmp	r3, r2
 800476a:	bf94      	ite	ls
 800476c:	2301      	movls	r3, #1
 800476e:	2300      	movhi	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0db      	b.n	8004932 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a72      	ldr	r2, [pc, #456]	; (8004948 <HAL_I2C_Init+0x248>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0c9b      	lsrs	r3, r3, #18
 8004784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a64      	ldr	r2, [pc, #400]	; (800493c <HAL_I2C_Init+0x23c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d802      	bhi.n	80047b4 <HAL_I2C_Init+0xb4>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3301      	adds	r3, #1
 80047b2:	e009      	b.n	80047c8 <HAL_I2C_Init+0xc8>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	4a63      	ldr	r2, [pc, #396]	; (800494c <HAL_I2C_Init+0x24c>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	3301      	adds	r3, #1
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4956      	ldr	r1, [pc, #344]	; (800493c <HAL_I2C_Init+0x23c>)
 80047e4:	428b      	cmp	r3, r1
 80047e6:	d80d      	bhi.n	8004804 <HAL_I2C_Init+0x104>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e59      	subs	r1, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	bf38      	it	cc
 8004800:	2304      	movcc	r3, #4
 8004802:	e04f      	b.n	80048a4 <HAL_I2C_Init+0x1a4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d111      	bne.n	8004830 <HAL_I2C_Init+0x130>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e012      	b.n	8004856 <HAL_I2C_Init+0x156>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Init+0x15e>
 800485a:	2301      	movs	r3, #1
 800485c:	e022      	b.n	80048a4 <HAL_I2C_Init+0x1a4>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10e      	bne.n	8004884 <HAL_I2C_Init+0x184>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1e58      	subs	r0, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	440b      	add	r3, r1
 8004874:	fbb0 f3f3 	udiv	r3, r0, r3
 8004878:	3301      	adds	r3, #1
 800487a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	e00f      	b.n	80048a4 <HAL_I2C_Init+0x1a4>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1e58      	subs	r0, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	0099      	lsls	r1, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	fbb0 f3f3 	udiv	r3, r0, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	6809      	ldr	r1, [r1, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6911      	ldr	r1, [r2, #16]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	000186a0 	.word	0x000186a0
 8004940:	001e847f 	.word	0x001e847f
 8004944:	003d08ff 	.word	0x003d08ff
 8004948:	431bde83 	.word	0x431bde83
 800494c:	10624dd3 	.word	0x10624dd3

08004950 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	4603      	mov	r3, r0
 8004960:	817b      	strh	r3, [r7, #10]
 8004962:	460b      	mov	r3, r1
 8004964:	813b      	strh	r3, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800496a:	f7fe ff59 	bl	8003820 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b20      	cmp	r3, #32
 800497a:	f040 80d9 	bne.w	8004b30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2319      	movs	r3, #25
 8004984:	2201      	movs	r2, #1
 8004986:	496d      	ldr	r1, [pc, #436]	; (8004b3c <HAL_I2C_Mem_Write+0x1ec>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fc6b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	e0cc      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Mem_Write+0x56>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0c5      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d007      	beq.n	80049cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2221      	movs	r2, #33	; 0x21
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a4d      	ldr	r2, [pc, #308]	; (8004b40 <HAL_I2C_Mem_Write+0x1f0>)
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0e:	88f8      	ldrh	r0, [r7, #6]
 8004a10:	893a      	ldrh	r2, [r7, #8]
 8004a12:	8979      	ldrh	r1, [r7, #10]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fac6 	bl	8004fb0 <I2C_RequestMemoryWrite>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d052      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e081      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fcec 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1aa      	bne.n	8004a2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fcd8 	bl	8005492 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d107      	bne.n	8004b00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e016      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	817b      	strh	r3, [r7, #10]
 8004b56:	460b      	mov	r3, r1
 8004b58:	813b      	strh	r3, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b5e:	f7fe fe5f 	bl	8003820 <HAL_GetTick>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	f040 8218 	bne.w	8004fa2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2319      	movs	r3, #25
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4981      	ldr	r1, [pc, #516]	; (8004d80 <HAL_I2C_Mem_Read+0x23c>)
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fb71 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e20b      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x56>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e204      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d007      	beq.n	8004bc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2222      	movs	r2, #34	; 0x22
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2240      	movs	r2, #64	; 0x40
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a61      	ldr	r2, [pc, #388]	; (8004d84 <HAL_I2C_Mem_Read+0x240>)
 8004c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c02:	88f8      	ldrh	r0, [r7, #6]
 8004c04:	893a      	ldrh	r2, [r7, #8]
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4603      	mov	r3, r0
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fa56 	bl	80050c4 <I2C_RequestMemoryRead>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1c0      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d113      	bne.n	8004c52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e194      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11d      	bne.n	8004c96 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c6a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c92:	b662      	cpsie	i
 8004c94:	e172      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d11d      	bne.n	8004cda <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cd6:	b662      	cpsie	i
 8004cd8:	e150      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d00:	e13c      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	f200 80f5 	bhi.w	8004ef6 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d123      	bne.n	8004d5c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fbfb 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e13d      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d5a:	e10f      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d150      	bne.n	8004e06 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4906      	ldr	r1, [pc, #24]	; (8004d88 <HAL_I2C_Mem_Read+0x244>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa78 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e112      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
 8004d7e:	bf00      	nop
 8004d80:	00100002 	.word	0x00100002
 8004d84:	ffff0000 	.word	0xffff0000
 8004d88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d8c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004dd0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e04:	e0ba      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4967      	ldr	r1, [pc, #412]	; (8004fac <HAL_I2C_Mem_Read+0x468>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa27 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0c1      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e30:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	494f      	ldr	r1, [pc, #316]	; (8004fac <HAL_I2C_Mem_Read+0x468>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f9f8 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e092      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef4:	e042      	b.n	8004f7c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fb0a 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e04c      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d118      	bne.n	8004f7c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f47f aebe 	bne.w	8004d02 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	00010004 	.word	0x00010004

08004fb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f93c 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e05f      	b.n	80050b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005004:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	492d      	ldr	r1, [pc, #180]	; (80050c0 <I2C_RequestMemoryWrite+0x110>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f980 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e04c      	b.n	80050b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f9ea 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	2b04      	cmp	r3, #4
 8005048:	d107      	bne.n	800505a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005058:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e02b      	b.n	80050b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005064:	893b      	ldrh	r3, [r7, #8]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]
 800506e:	e021      	b.n	80050b4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005070:	893b      	ldrh	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f9c4 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b04      	cmp	r3, #4
 8005094:	d107      	bne.n	80050a6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e005      	b.n	80050b6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050aa:	893b      	ldrh	r3, [r7, #8]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	00010002 	.word	0x00010002

080050c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	461a      	mov	r2, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	817b      	strh	r3, [r7, #10]
 80050d6:	460b      	mov	r3, r1
 80050d8:	813b      	strh	r3, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2200      	movs	r2, #0
 8005106:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8aa 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e09e      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800511a:	897b      	ldrh	r3, [r7, #10]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	494c      	ldr	r1, [pc, #304]	; (8005260 <I2C_RequestMemoryRead+0x19c>)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f8ee 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e08b      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	6a39      	ldr	r1, [r7, #32]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f958 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2b04      	cmp	r3, #4
 800516c:	d107      	bne.n	800517e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06a      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d105      	bne.n	8005194 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005188:	893b      	ldrh	r3, [r7, #8]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]
 8005192:	e021      	b.n	80051d8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005194:	893b      	ldrh	r3, [r7, #8]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	b29b      	uxth	r3, r3
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f932 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d107      	bne.n	80051ca <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e044      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ce:	893b      	ldrh	r3, [r7, #8]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	6a39      	ldr	r1, [r7, #32]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f917 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d107      	bne.n	8005200 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e029      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005212:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2200      	movs	r2, #0
 800521c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f81f 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e013      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <I2C_RequestMemoryRead+0x19c>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f863 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00010002 	.word	0x00010002

08005264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005274:	e025      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d021      	beq.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7fe facf 	bl	8003820 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d116      	bne.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e023      	b.n	800530a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10d      	bne.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	43da      	mvns	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	e00c      	b.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d0b6      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005320:	e051      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d123      	bne.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0204 	orr.w	r2, r3, #4
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e046      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005380:	d021      	beq.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fe fa4d 	bl	8003820 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e020      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10c      	bne.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e00b      	b.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	43da      	mvns	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d18d      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541c:	e02d      	b.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f8ce 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e02d      	b.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005434:	d021      	beq.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fe f9f3 	bl	8003820 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d116      	bne.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e007      	b.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d1ca      	bne.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800549e:	e02d      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f88d 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02d      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b6:	d021      	beq.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fe f9b2 	bl	8003820 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d1ca      	bne.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005520:	e042      	b.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d119      	bne.n	8005564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0210 	mvn.w	r2, #16
 8005538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e029      	b.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fe f95c 	bl	8003820 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d116      	bne.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e007      	b.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d1b5      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d6:	d11b      	bne.n	8005610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f043 0204 	orr.w	r2, r3, #4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e26c      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8087 	beq.w	800574a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800563c:	4b92      	ldr	r3, [pc, #584]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b04      	cmp	r3, #4
 8005646:	d00c      	beq.n	8005662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005648:	4b8f      	ldr	r3, [pc, #572]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d112      	bne.n	800567a <HAL_RCC_OscConfig+0x5e>
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d10b      	bne.n	800567a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005662:	4b89      	ldr	r3, [pc, #548]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d06c      	beq.n	8005748 <HAL_RCC_OscConfig+0x12c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d168      	bne.n	8005748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e246      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x76>
 8005684:	4b80      	ldr	r3, [pc, #512]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7f      	ldr	r2, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800568a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e02e      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x98>
 800569a:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a7a      	ldr	r2, [pc, #488]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b78      	ldr	r3, [pc, #480]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a77      	ldr	r2, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0xbc>
 80056be:	4b72      	ldr	r3, [pc, #456]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a6e      	ldr	r2, [pc, #440]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xd4>
 80056d8:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6a      	ldr	r2, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4b68      	ldr	r3, [pc, #416]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80056ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fe f892 	bl	8003820 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fe f88e 	bl	8003820 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1fa      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b5d      	ldr	r3, [pc, #372]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0xe4>
 800571e:	e014      	b.n	800574a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005720:	f7fe f87e 	bl	8003820 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005728:	f7fe f87a 	bl	8003820 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b64      	cmp	r3, #100	; 0x64
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1e6      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573a:	4b53      	ldr	r3, [pc, #332]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x10c>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005756:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005762:	4b49      	ldr	r3, [pc, #292]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x18c>
 800576e:	4b46      	ldr	r3, [pc, #280]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d116      	bne.n	80057a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x176>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e1ba      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4939      	ldr	r1, [pc, #228]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	e03a      	b.n	800581e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <HAL_RCC_OscConfig+0x270>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fe f833 	bl	8003820 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057be:	f7fe f82f 	bl	8003820 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e19b      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d0:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057dc:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4927      	ldr	r1, [pc, #156]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
 80057f0:	e015      	b.n	800581e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <HAL_RCC_OscConfig+0x270>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fe f812 	bl	8003820 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005800:	f7fe f80e 	bl	8003820 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e17a      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03a      	beq.n	80058a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <HAL_RCC_OscConfig+0x274>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005838:	f7fd fff2 	bl	8003820 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005840:	f7fd ffee 	bl	8003820 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e15a      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <HAL_RCC_OscConfig+0x26c>)
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800585e:	2001      	movs	r0, #1
 8005860:	f000 fada 	bl	8005e18 <RCC_Delay>
 8005864:	e01c      	b.n	80058a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_RCC_OscConfig+0x274>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586c:	f7fd ffd8 	bl	8003820 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005872:	e00f      	b.n	8005894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005874:	f7fd ffd4 	bl	8003820 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d908      	bls.n	8005894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e140      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000
 800588c:	42420000 	.word	0x42420000
 8005890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005894:	4b9e      	ldr	r3, [pc, #632]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e9      	bne.n	8005874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a6 	beq.w	80059fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b2:	4b97      	ldr	r3, [pc, #604]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058be:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	4a93      	ldr	r2, [pc, #588]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	61d3      	str	r3, [r2, #28]
 80058ca:	4b91      	ldr	r3, [pc, #580]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058da:	4b8e      	ldr	r3, [pc, #568]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e6:	4b8b      	ldr	r3, [pc, #556]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a8a      	ldr	r2, [pc, #552]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f2:	f7fd ff95 	bl	8003820 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fa:	f7fd ff91 	bl	8003820 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b64      	cmp	r3, #100	; 0x64
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0fd      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <HAL_RCC_OscConfig+0x4f8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x312>
 8005920:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4a7a      	ldr	r2, [pc, #488]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6213      	str	r3, [r2, #32]
 800592c:	e02d      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x334>
 8005936:	4b76      	ldr	r3, [pc, #472]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4a75      	ldr	r2, [pc, #468]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	6213      	str	r3, [r2, #32]
 8005942:	4b73      	ldr	r3, [pc, #460]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6213      	str	r3, [r2, #32]
 800594e:	e01c      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d10c      	bne.n	8005972 <HAL_RCC_OscConfig+0x356>
 8005958:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4a6c      	ldr	r2, [pc, #432]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800595e:	f043 0304 	orr.w	r3, r3, #4
 8005962:	6213      	str	r3, [r2, #32]
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4a69      	ldr	r2, [pc, #420]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6213      	str	r3, [r2, #32]
 8005970:	e00b      	b.n	800598a <HAL_RCC_OscConfig+0x36e>
 8005972:	4b67      	ldr	r3, [pc, #412]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4a66      	ldr	r2, [pc, #408]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6213      	str	r3, [r2, #32]
 800597e:	4b64      	ldr	r3, [pc, #400]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4a63      	ldr	r2, [pc, #396]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d015      	beq.n	80059be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fd ff45 	bl	8003820 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005998:	e00a      	b.n	80059b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fd ff41 	bl	8003820 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0ab      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ee      	beq.n	800599a <HAL_RCC_OscConfig+0x37e>
 80059bc:	e014      	b.n	80059e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059be:	f7fd ff2f 	bl	8003820 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c6:	f7fd ff2b 	bl	8003820 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e095      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059dc:	4b4c      	ldr	r3, [pc, #304]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ee      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4a47      	ldr	r2, [pc, #284]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 80059f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8081 	beq.w	8005b06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a04:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d061      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d146      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a18:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1e:	f7fd feff 	bl	8003820 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fd fefb 	bl	8003820 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e067      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a38:	4b35      	ldr	r3, [pc, #212]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d108      	bne.n	8005a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	492d      	ldr	r1, [pc, #180]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a60:	4b2b      	ldr	r3, [pc, #172]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a19      	ldr	r1, [r3, #32]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	430b      	orrs	r3, r1
 8005a72:	4927      	ldr	r1, [pc, #156]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a78:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fecf 	bl	8003820 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fd fecb 	bl	8003820 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e037      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x46a>
 8005aa4:	e02f      	b.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <HAL_RCC_OscConfig+0x4fc>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fd feb8 	bl	8003820 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fd feb4 	bl	8003820 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e020      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x498>
 8005ad2:	e018      	b.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e013      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_OscConfig+0x4f4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d106      	bne.n	8005b02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40007000 	.word	0x40007000
 8005b18:	42420060 	.word	0x42420060

08005b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0d0      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b30:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d910      	bls.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b67      	ldr	r3, [pc, #412]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0207 	bic.w	r2, r3, #7
 8005b46:	4965      	ldr	r1, [pc, #404]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b63      	ldr	r3, [pc, #396]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0b8      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a58      	ldr	r2, [pc, #352]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b90:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9c:	4b50      	ldr	r3, [pc, #320]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	494d      	ldr	r1, [pc, #308]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d040      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d115      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e07f      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d107      	bne.n	8005bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e073      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	4936      	ldr	r1, [pc, #216]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fd fe08 	bl	8003820 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fd fe04 	bl	8003820 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e053      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d210      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4922      	ldr	r1, [pc, #136]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e032      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4916      	ldr	r1, [pc, #88]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	490e      	ldr	r1, [pc, #56]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005caa:	f000 f821 	bl	8005cf0 <HAL_RCC_GetSysClockFreq>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbc:	5cd3      	ldrb	r3, [r2, r3]
 8005cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1d0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd fd66 	bl	800379c <HAL_InitTick>

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40022000 	.word	0x40022000
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	0800abb0 	.word	0x0800abb0
 8005ce8:	20000018 	.word	0x20000018
 8005cec:	2000001c 	.word	0x2000001c

08005cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf0:	b490      	push	{r4, r7}
 8005cf2:	b08a      	sub	sp, #40	; 0x28
 8005cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005cf6:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005cf8:	1d3c      	adds	r4, r7, #4
 8005cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d00:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d002      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x40>
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x46>
 8005d2e:	e02d      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d30:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d32:	623b      	str	r3, [r7, #32]
      break;
 8005d34:	e02d      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	0c9b      	lsrs	r3, r3, #18
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d42:	4413      	add	r3, r2
 8005d44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d013      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d54:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c5b      	lsrs	r3, r3, #17
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d62:	4413      	add	r3, r2
 8005d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d6e:	fb02 f203 	mul.w	r2, r2, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7a:	e004      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	623b      	str	r3, [r7, #32]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d8e:	623b      	str	r3, [r7, #32]
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	6a3b      	ldr	r3, [r7, #32]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc90      	pop	{r4, r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	0800ab74 	.word	0x0800ab74
 8005da4:	0800ab84 	.word	0x0800ab84
 8005da8:	40021000 	.word	0x40021000
 8005dac:	007a1200 	.word	0x007a1200
 8005db0:	003d0900 	.word	0x003d0900

08005db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db8:	4b02      	ldr	r3, [pc, #8]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dba:	681b      	ldr	r3, [r3, #0]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	20000018 	.word	0x20000018

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dcc:	f7ff fff2 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4a03      	ldr	r2, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000
 8005dec:	0800abc0 	.word	0x0800abc0

08005df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005df4:	f7ff ffde 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005df8:	4601      	mov	r1, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	0adb      	lsrs	r3, r3, #11
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4a03      	ldr	r2, [pc, #12]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	0800abc0 	.word	0x0800abc0

08005e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <RCC_Delay+0x34>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <RCC_Delay+0x38>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	0a5b      	lsrs	r3, r3, #9
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e34:	bf00      	nop
  }
  while (Delay --);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1e5a      	subs	r2, r3, #1
 8005e3a:	60fa      	str	r2, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f9      	bne.n	8005e34 <RCC_Delay+0x1c>
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000018 	.word	0x20000018
 8005e50:	10624dd3 	.word	0x10624dd3

08005e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d07d      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e74:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e80:	4b4c      	ldr	r3, [pc, #304]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	4a4b      	ldr	r2, [pc, #300]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	61d3      	str	r3, [r2, #28]
 8005e8c:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d118      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea8:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a42      	ldr	r2, [pc, #264]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb4:	f7fd fcb4 	bl	8003820 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eba:	e008      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ebc:	f7fd fcb0 	bl	8003820 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b64      	cmp	r3, #100	; 0x64
 8005ec8:	d901      	bls.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e06d      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b3a      	ldr	r3, [pc, #232]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eda:	4b36      	ldr	r3, [pc, #216]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d027      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef8:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f02:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f08:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f0e:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d014      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1e:	f7fd fc7f 	bl	8003820 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f24:	e00a      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fd fc7b 	bl	8003820 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e036      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ee      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4917      	ldr	r1, [pc, #92]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f60:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f78:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	490b      	ldr	r1, [pc, #44]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	4904      	ldr	r1, [pc, #16]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40007000 	.word	0x40007000
 8005fbc:	42420440 	.word	0x42420440

08005fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b08d      	sub	sp, #52	; 0x34
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005fc8:	4b55      	ldr	r3, [pc, #340]	; (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005fca:	f107 040c 	add.w	r4, r7, #12
 8005fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005fd4:	4b53      	ldr	r3, [pc, #332]	; (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	2300      	movs	r3, #0
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d07f      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d002      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d048      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ffc:	e08b      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006004:	4b48      	ldr	r3, [pc, #288]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d07f      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	0c9b      	lsrs	r3, r3, #18
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800601c:	4413      	add	r3, r2
 800601e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006022:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800602e:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0c5b      	lsrs	r3, r3, #17
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800603c:	4413      	add	r3, r2
 800603e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800604e:	4a37      	ldr	r2, [pc, #220]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	fbb2 f2f3 	udiv	r2, r2, r3
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	e004      	b.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	4a33      	ldr	r2, [pc, #204]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006064:	fb02 f303 	mul.w	r3, r2, r3
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006076:	d102      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800607c:	e048      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4a2c      	ldr	r2, [pc, #176]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800608c:	e040      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800608e:	4b26      	ldr	r3, [pc, #152]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d108      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b0:	e01f      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060bc:	d109      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80060ca:	f649 4340 	movw	r3, #40000	; 0x9c40
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d0:	e00f      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060dc:	d11a      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d014      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80060ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80060f0:	e010      	b.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060f2:	e00f      	b.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80060f4:	f7ff fe7c 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	0b9b      	lsrs	r3, r3, #14
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	3301      	adds	r3, #1
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800610e:	e002      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006114:	bf00      	nop
    }
  }
  return (frequency);
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006118:	4618      	mov	r0, r3
 800611a:	3734      	adds	r7, #52	; 0x34
 800611c:	46bd      	mov	sp, r7
 800611e:	bd90      	pop	{r4, r7, pc}
 8006120:	0800ab88 	.word	0x0800ab88
 8006124:	0800ab98 	.word	0x0800ab98
 8006128:	40021000 	.word	0x40021000
 800612c:	007a1200 	.word	0x007a1200
 8006130:	003d0900 	.word	0x003d0900
 8006134:	aaaaaaab 	.word	0xaaaaaaab

08006138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e053      	b.n	80061f2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7fc f9f3 	bl	8002550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006180:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	ea42 0103 	orr.w	r1, r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	0c1a      	lsrs	r2, r3, #16
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f002 0204 	and.w	r2, r2, #4
 80061d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e01d      	b.n	8006248 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fc f9e1 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f000 fb45 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d007      	beq.n	800628a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e01d      	b.n	80062e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f815 	bl	80062ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f000 faf7 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fd58 	bl	8006dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a10      	ldr	r2, [pc, #64]	; (8006360 <HAL_TIM_PWM_Start+0x60>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d107      	bne.n	8006332 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b06      	cmp	r3, #6
 8006342:	d007      	beq.n	8006354 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa73 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa66 	bl	8006880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa75 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa49 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa3c 	bl	8006880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa4b 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa1f 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa12 	bl	8006880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa21 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9f5 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9e8 	bl	8006880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9f7 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f9c3 	bl	800686e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fd1c 	bl	8006f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d10e      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d107      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9bb 	bl	80068b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b20      	cmp	r3, #32
 800654c:	d10e      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b20      	cmp	r3, #32
 800655a:	d107      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0220 	mvn.w	r2, #32
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fce7 	bl	8006f3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800658a:	2302      	movs	r3, #2
 800658c:	e0b4      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b0c      	cmp	r3, #12
 80065a2:	f200 809f 	bhi.w	80066e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065e1 	.word	0x080065e1
 80065b0:	080066e5 	.word	0x080066e5
 80065b4:	080066e5 	.word	0x080066e5
 80065b8:	080066e5 	.word	0x080066e5
 80065bc:	08006621 	.word	0x08006621
 80065c0:	080066e5 	.word	0x080066e5
 80065c4:	080066e5 	.word	0x080066e5
 80065c8:	080066e5 	.word	0x080066e5
 80065cc:	08006663 	.word	0x08006663
 80065d0:	080066e5 	.word	0x080066e5
 80065d4:	080066e5 	.word	0x080066e5
 80065d8:	080066e5 	.word	0x080066e5
 80065dc:	080066a3 	.word	0x080066a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f9d0 	bl	800698c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0208 	orr.w	r2, r2, #8
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	619a      	str	r2, [r3, #24]
      break;
 800661e:	e062      	b.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fa16 	bl	8006a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	619a      	str	r2, [r3, #24]
      break;
 8006660:	e041      	b.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fa5f 	bl	8006b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0208 	orr.w	r2, r2, #8
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0204 	bic.w	r2, r2, #4
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	61da      	str	r2, [r3, #28]
      break;
 80066a0:	e021      	b.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 faa9 	bl	8006c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69d9      	ldr	r1, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	021a      	lsls	r2, r3, #8
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	61da      	str	r2, [r3, #28]
      break;
 80066e2:	e000      	b.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80066e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIM_ConfigClockSource+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e0a6      	b.n	8006866 <HAL_TIM_ConfigClockSource+0x166>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800673e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d067      	beq.n	8006820 <HAL_TIM_ConfigClockSource+0x120>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d80b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x6c>
 8006754:	2b10      	cmp	r3, #16
 8006756:	d073      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x140>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d802      	bhi.n	8006762 <HAL_TIM_ConfigClockSource+0x62>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d06f      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006760:	e078      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006762:	2b20      	cmp	r3, #32
 8006764:	d06c      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x140>
 8006766:	2b30      	cmp	r3, #48	; 0x30
 8006768:	d06a      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800676a:	e073      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800676c:	2b70      	cmp	r3, #112	; 0x70
 800676e:	d00d      	beq.n	800678c <HAL_TIM_ConfigClockSource+0x8c>
 8006770:	2b70      	cmp	r3, #112	; 0x70
 8006772:	d804      	bhi.n	800677e <HAL_TIM_ConfigClockSource+0x7e>
 8006774:	2b50      	cmp	r3, #80	; 0x50
 8006776:	d033      	beq.n	80067e0 <HAL_TIM_ConfigClockSource+0xe0>
 8006778:	2b60      	cmp	r3, #96	; 0x60
 800677a:	d041      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800677c:	e06a      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800677e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006782:	d066      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x152>
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006788:	d017      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800678a:	e063      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f000 faf5 	bl	8006d8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	609a      	str	r2, [r3, #8]
      break;
 80067b8:	e04c      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6899      	ldr	r1, [r3, #8]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f000 fade 	bl	8006d8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067dc:	609a      	str	r2, [r3, #8]
      break;
 80067de:	e039      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	461a      	mov	r2, r3
 80067ee:	f000 fa55 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2150      	movs	r1, #80	; 0x50
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 faac 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 80067fe:	e029      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	6859      	ldr	r1, [r3, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	461a      	mov	r2, r3
 800680e:	f000 fa73 	bl	8006cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2160      	movs	r1, #96	; 0x60
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fa9c 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 800681e:	e019      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	461a      	mov	r2, r3
 800682e:	f000 fa35 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fa8c 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 800683e:	e009      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f000 fa83 	bl	8006d56 <TIM_ITRx_SetConfig>
      break;
 8006850:	e000      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a29      	ldr	r2, [pc, #164]	; (8006980 <TIM_Base_SetConfig+0xb8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0x30>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0x30>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a26      	ldr	r2, [pc, #152]	; (8006984 <TIM_Base_SetConfig+0xbc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0x30>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a25      	ldr	r2, [pc, #148]	; (8006988 <TIM_Base_SetConfig+0xc0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d108      	bne.n	800690a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <TIM_Base_SetConfig+0xb8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_Base_SetConfig+0x62>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d007      	beq.n	800692a <TIM_Base_SetConfig+0x62>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <TIM_Base_SetConfig+0xbc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_Base_SetConfig+0x62>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a18      	ldr	r2, [pc, #96]	; (8006988 <TIM_Base_SetConfig+0xc0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d108      	bne.n	800693c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a07      	ldr	r2, [pc, #28]	; (8006980 <TIM_Base_SetConfig+0xb8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d103      	bne.n	8006970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	615a      	str	r2, [r3, #20]
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr
 8006980:	40012c00 	.word	0x40012c00
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800

0800698c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 0302 	bic.w	r3, r3, #2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <TIM_OC1_SetConfig+0xc8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0308 	bic.w	r3, r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <TIM_OC1_SetConfig+0xc8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d111      	bne.n	8006a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40012c00 	.word	0x40012c00

08006a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0210 	bic.w	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0320 	bic.w	r3, r3, #32
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <TIM_OC2_SetConfig+0xd0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <TIM_OC2_SetConfig+0xd0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d113      	bne.n	8006b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr
 8006b28:	40012c00 	.word	0x40012c00

08006b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <TIM_OC3_SetConfig+0xd0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <TIM_OC3_SetConfig+0xd0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d113      	bne.n	8006bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40012c00 	.word	0x40012c00

08006c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a0f      	ldr	r2, [pc, #60]	; (8006c98 <TIM_OC4_SetConfig+0x98>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d109      	bne.n	8006c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	019b      	lsls	r3, r3, #6
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00

08006c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0201 	bic.w	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 030a 	bic.w	r3, r3, #10
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f023 0210 	bic.w	r2, r3, #16
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	031b      	lsls	r3, r3, #12
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f043 0307 	orr.w	r3, r3, #7
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	021a      	lsls	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	609a      	str	r2, [r3, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2201      	movs	r2, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e032      	b.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e60:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e03d      	b.n	8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e03f      	b.n	8006ff0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fb fb9b 	bl	80026c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2224      	movs	r2, #36	; 0x24
 8006f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f90c 	bl	80071c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691a      	ldr	r2, [r3, #16]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b20      	cmp	r3, #32
 8007016:	f040 8083 	bne.w	8007120 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_UART_Transmit+0x2e>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e07b      	b.n	8007122 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_UART_Transmit+0x40>
 8007034:	2302      	movs	r3, #2
 8007036:	e074      	b.n	8007122 <HAL_UART_Transmit+0x12a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2221      	movs	r2, #33	; 0x21
 800704a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800704e:	f7fc fbe7 	bl	8003820 <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007060:	e042      	b.n	80070e8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007078:	d122      	bne.n	80070c0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2200      	movs	r2, #0
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f850 	bl	800712a <UART_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e046      	b.n	8007122 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3302      	adds	r3, #2
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	e017      	b.n	80070e8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	e013      	b.n	80070e8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f82d 	bl	800712a <UART_WaitOnFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e023      	b.n	8007122 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	60ba      	str	r2, [r7, #8]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1b7      	bne.n	8007062 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2140      	movs	r1, #64	; 0x40
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f814 	bl	800712a <UART_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e00a      	b.n	8007122 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	4613      	mov	r3, r2
 8007138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713a:	e02c      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007142:	d028      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0x30>
 800714a:	f7fc fb69 	bl	8003820 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	429a      	cmp	r2, r3
 8007158:	d21d      	bcs.n	8007196 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007168:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e00f      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bf0c      	ite	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	2300      	movne	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d0c3      	beq.n	800713c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071fa:	f023 030c 	bic.w	r3, r3, #12
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	430b      	orrs	r3, r1
 8007206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a52      	ldr	r2, [pc, #328]	; (800736c <UART_SetConfig+0x1ac>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d14e      	bne.n	80072c6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007228:	f7fe fde2 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 800722c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009a      	lsls	r2, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	4a4a      	ldr	r2, [pc, #296]	; (8007370 <UART_SetConfig+0x1b0>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	0119      	lsls	r1, r3, #4
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009a      	lsls	r2, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	fbb2 f2f3 	udiv	r2, r2, r3
 8007264:	4b42      	ldr	r3, [pc, #264]	; (8007370 <UART_SetConfig+0x1b0>)
 8007266:	fba3 0302 	umull	r0, r3, r3, r2
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2064      	movs	r0, #100	; 0x64
 800726e:	fb00 f303 	mul.w	r3, r0, r3
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	3332      	adds	r3, #50	; 0x32
 8007278:	4a3d      	ldr	r2, [pc, #244]	; (8007370 <UART_SetConfig+0x1b0>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007284:	4419      	add	r1, r3
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009a      	lsls	r2, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	fbb2 f2f3 	udiv	r2, r2, r3
 800729c:	4b34      	ldr	r3, [pc, #208]	; (8007370 <UART_SetConfig+0x1b0>)
 800729e:	fba3 0302 	umull	r0, r3, r3, r2
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	2064      	movs	r0, #100	; 0x64
 80072a6:	fb00 f303 	mul.w	r3, r0, r3
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	3332      	adds	r3, #50	; 0x32
 80072b0:	4a2f      	ldr	r2, [pc, #188]	; (8007370 <UART_SetConfig+0x1b0>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	f003 020f 	and.w	r2, r3, #15
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	440a      	add	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80072c4:	e04d      	b.n	8007362 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80072c6:	f7fe fd7f 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 80072ca:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009a      	lsls	r2, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	4a23      	ldr	r2, [pc, #140]	; (8007370 <UART_SetConfig+0x1b0>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	0119      	lsls	r1, r3, #4
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009a      	lsls	r2, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007302:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <UART_SetConfig+0x1b0>)
 8007304:	fba3 0302 	umull	r0, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	2064      	movs	r0, #100	; 0x64
 800730c:	fb00 f303 	mul.w	r3, r0, r3
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	3332      	adds	r3, #50	; 0x32
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <UART_SetConfig+0x1b0>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007322:	4419      	add	r1, r3
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009a      	lsls	r2, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	fbb2 f2f3 	udiv	r2, r2, r3
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <UART_SetConfig+0x1b0>)
 800733c:	fba3 0302 	umull	r0, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2064      	movs	r0, #100	; 0x64
 8007344:	fb00 f303 	mul.w	r3, r0, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	3332      	adds	r3, #50	; 0x32
 800734e:	4a08      	ldr	r2, [pc, #32]	; (8007370 <UART_SetConfig+0x1b0>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 020f 	and.w	r2, r3, #15
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	440a      	add	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40013800 	.word	0x40013800
 8007370:	51eb851f 	.word	0x51eb851f

08007374 <__errno>:
 8007374:	4b01      	ldr	r3, [pc, #4]	; (800737c <__errno+0x8>)
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000024 	.word	0x20000024

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	2500      	movs	r5, #0
 8007384:	4e0c      	ldr	r6, [pc, #48]	; (80073b8 <__libc_init_array+0x38>)
 8007386:	4c0d      	ldr	r4, [pc, #52]	; (80073bc <__libc_init_array+0x3c>)
 8007388:	1ba4      	subs	r4, r4, r6
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	42a5      	cmp	r5, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	f003 fba2 	bl	800aad8 <_init>
 8007394:	2500      	movs	r5, #0
 8007396:	4e0a      	ldr	r6, [pc, #40]	; (80073c0 <__libc_init_array+0x40>)
 8007398:	4c0a      	ldr	r4, [pc, #40]	; (80073c4 <__libc_init_array+0x44>)
 800739a:	1ba4      	subs	r4, r4, r6
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	42a5      	cmp	r5, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073a8:	4798      	blx	r3
 80073aa:	3501      	adds	r5, #1
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073b2:	4798      	blx	r3
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	0800b010 	.word	0x0800b010
 80073bc:	0800b010 	.word	0x0800b010
 80073c0:	0800b010 	.word	0x0800b010
 80073c4:	0800b014 	.word	0x0800b014

080073c8 <memset>:
 80073c8:	4603      	mov	r3, r0
 80073ca:	4402      	add	r2, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <__cvt>:
 80073d8:	2b00      	cmp	r3, #0
 80073da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073de:	461e      	mov	r6, r3
 80073e0:	bfbb      	ittet	lt
 80073e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80073e6:	461e      	movlt	r6, r3
 80073e8:	2300      	movge	r3, #0
 80073ea:	232d      	movlt	r3, #45	; 0x2d
 80073ec:	b088      	sub	sp, #32
 80073ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073f0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80073f4:	f027 0720 	bic.w	r7, r7, #32
 80073f8:	2f46      	cmp	r7, #70	; 0x46
 80073fa:	4614      	mov	r4, r2
 80073fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80073fe:	700b      	strb	r3, [r1, #0]
 8007400:	d004      	beq.n	800740c <__cvt+0x34>
 8007402:	2f45      	cmp	r7, #69	; 0x45
 8007404:	d100      	bne.n	8007408 <__cvt+0x30>
 8007406:	3501      	adds	r5, #1
 8007408:	2302      	movs	r3, #2
 800740a:	e000      	b.n	800740e <__cvt+0x36>
 800740c:	2303      	movs	r3, #3
 800740e:	aa07      	add	r2, sp, #28
 8007410:	9204      	str	r2, [sp, #16]
 8007412:	aa06      	add	r2, sp, #24
 8007414:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007418:	e9cd 3500 	strd	r3, r5, [sp]
 800741c:	4622      	mov	r2, r4
 800741e:	4633      	mov	r3, r6
 8007420:	f000 fcda 	bl	8007dd8 <_dtoa_r>
 8007424:	2f47      	cmp	r7, #71	; 0x47
 8007426:	4680      	mov	r8, r0
 8007428:	d102      	bne.n	8007430 <__cvt+0x58>
 800742a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d526      	bpl.n	800747e <__cvt+0xa6>
 8007430:	2f46      	cmp	r7, #70	; 0x46
 8007432:	eb08 0905 	add.w	r9, r8, r5
 8007436:	d111      	bne.n	800745c <__cvt+0x84>
 8007438:	f898 3000 	ldrb.w	r3, [r8]
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d10a      	bne.n	8007456 <__cvt+0x7e>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	4620      	mov	r0, r4
 8007446:	4631      	mov	r1, r6
 8007448:	f7f9 faae 	bl	80009a8 <__aeabi_dcmpeq>
 800744c:	b918      	cbnz	r0, 8007456 <__cvt+0x7e>
 800744e:	f1c5 0501 	rsb	r5, r5, #1
 8007452:	f8ca 5000 	str.w	r5, [sl]
 8007456:	f8da 3000 	ldr.w	r3, [sl]
 800745a:	4499      	add	r9, r3
 800745c:	2200      	movs	r2, #0
 800745e:	2300      	movs	r3, #0
 8007460:	4620      	mov	r0, r4
 8007462:	4631      	mov	r1, r6
 8007464:	f7f9 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8007468:	b938      	cbnz	r0, 800747a <__cvt+0xa2>
 800746a:	2230      	movs	r2, #48	; 0x30
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	454b      	cmp	r3, r9
 8007470:	d205      	bcs.n	800747e <__cvt+0xa6>
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	9107      	str	r1, [sp, #28]
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e7f8      	b.n	800746c <__cvt+0x94>
 800747a:	f8cd 901c 	str.w	r9, [sp, #28]
 800747e:	4640      	mov	r0, r8
 8007480:	9b07      	ldr	r3, [sp, #28]
 8007482:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007484:	eba3 0308 	sub.w	r3, r3, r8
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	b008      	add	sp, #32
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007490 <__exponent>:
 8007490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007492:	2900      	cmp	r1, #0
 8007494:	bfb4      	ite	lt
 8007496:	232d      	movlt	r3, #45	; 0x2d
 8007498:	232b      	movge	r3, #43	; 0x2b
 800749a:	4604      	mov	r4, r0
 800749c:	bfb8      	it	lt
 800749e:	4249      	neglt	r1, r1
 80074a0:	2909      	cmp	r1, #9
 80074a2:	f804 2b02 	strb.w	r2, [r4], #2
 80074a6:	7043      	strb	r3, [r0, #1]
 80074a8:	dd21      	ble.n	80074ee <__exponent+0x5e>
 80074aa:	f10d 0307 	add.w	r3, sp, #7
 80074ae:	461f      	mov	r7, r3
 80074b0:	260a      	movs	r6, #10
 80074b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80074b6:	fb06 1115 	mls	r1, r6, r5, r1
 80074ba:	2d09      	cmp	r5, #9
 80074bc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80074c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074c4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80074c8:	4629      	mov	r1, r5
 80074ca:	dc09      	bgt.n	80074e0 <__exponent+0x50>
 80074cc:	3130      	adds	r1, #48	; 0x30
 80074ce:	3b02      	subs	r3, #2
 80074d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074d4:	42bb      	cmp	r3, r7
 80074d6:	4622      	mov	r2, r4
 80074d8:	d304      	bcc.n	80074e4 <__exponent+0x54>
 80074da:	1a10      	subs	r0, r2, r0
 80074dc:	b003      	add	sp, #12
 80074de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074e0:	4613      	mov	r3, r2
 80074e2:	e7e6      	b.n	80074b2 <__exponent+0x22>
 80074e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e8:	f804 2b01 	strb.w	r2, [r4], #1
 80074ec:	e7f2      	b.n	80074d4 <__exponent+0x44>
 80074ee:	2330      	movs	r3, #48	; 0x30
 80074f0:	4419      	add	r1, r3
 80074f2:	7083      	strb	r3, [r0, #2]
 80074f4:	1d02      	adds	r2, r0, #4
 80074f6:	70c1      	strb	r1, [r0, #3]
 80074f8:	e7ef      	b.n	80074da <__exponent+0x4a>
	...

080074fc <_printf_float>:
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	b091      	sub	sp, #68	; 0x44
 8007502:	460c      	mov	r4, r1
 8007504:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007506:	4693      	mov	fp, r2
 8007508:	461e      	mov	r6, r3
 800750a:	4605      	mov	r5, r0
 800750c:	f001 fa18 	bl	8008940 <_localeconv_r>
 8007510:	6803      	ldr	r3, [r0, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	9309      	str	r3, [sp, #36]	; 0x24
 8007516:	f7f8 fe1b 	bl	8000150 <strlen>
 800751a:	2300      	movs	r3, #0
 800751c:	930e      	str	r3, [sp, #56]	; 0x38
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	900a      	str	r0, [sp, #40]	; 0x28
 8007522:	3307      	adds	r3, #7
 8007524:	f023 0307 	bic.w	r3, r3, #7
 8007528:	f103 0208 	add.w	r2, r3, #8
 800752c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007530:	f8d4 a000 	ldr.w	sl, [r4]
 8007534:	603a      	str	r2, [r7, #0]
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800753e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007546:	930b      	str	r3, [sp, #44]	; 0x2c
 8007548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754c:	4ba6      	ldr	r3, [pc, #664]	; (80077e8 <_printf_float+0x2ec>)
 800754e:	4638      	mov	r0, r7
 8007550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007552:	f7f9 fa5b 	bl	8000a0c <__aeabi_dcmpun>
 8007556:	bb68      	cbnz	r0, 80075b4 <_printf_float+0xb8>
 8007558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800755c:	4ba2      	ldr	r3, [pc, #648]	; (80077e8 <_printf_float+0x2ec>)
 800755e:	4638      	mov	r0, r7
 8007560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007562:	f7f9 fa35 	bl	80009d0 <__aeabi_dcmple>
 8007566:	bb28      	cbnz	r0, 80075b4 <_printf_float+0xb8>
 8007568:	2200      	movs	r2, #0
 800756a:	2300      	movs	r3, #0
 800756c:	4638      	mov	r0, r7
 800756e:	4649      	mov	r1, r9
 8007570:	f7f9 fa24 	bl	80009bc <__aeabi_dcmplt>
 8007574:	b110      	cbz	r0, 800757c <_printf_float+0x80>
 8007576:	232d      	movs	r3, #45	; 0x2d
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	4f9b      	ldr	r7, [pc, #620]	; (80077ec <_printf_float+0x2f0>)
 800757e:	4b9c      	ldr	r3, [pc, #624]	; (80077f0 <_printf_float+0x2f4>)
 8007580:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007584:	bf98      	it	ls
 8007586:	461f      	movls	r7, r3
 8007588:	2303      	movs	r3, #3
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	6123      	str	r3, [r4, #16]
 8007590:	f02a 0304 	bic.w	r3, sl, #4
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	9600      	str	r6, [sp, #0]
 8007598:	465b      	mov	r3, fp
 800759a:	aa0f      	add	r2, sp, #60	; 0x3c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9e2 	bl	8007968 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 8090 	bne.w	80076ca <_printf_float+0x1ce>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075ae:	b011      	add	sp, #68	; 0x44
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	463a      	mov	r2, r7
 80075b6:	464b      	mov	r3, r9
 80075b8:	4638      	mov	r0, r7
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 fa26 	bl	8000a0c <__aeabi_dcmpun>
 80075c0:	b110      	cbz	r0, 80075c8 <_printf_float+0xcc>
 80075c2:	4f8c      	ldr	r7, [pc, #560]	; (80077f4 <_printf_float+0x2f8>)
 80075c4:	4b8c      	ldr	r3, [pc, #560]	; (80077f8 <_printf_float+0x2fc>)
 80075c6:	e7db      	b.n	8007580 <_printf_float+0x84>
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80075ce:	1c59      	adds	r1, r3, #1
 80075d0:	a80d      	add	r0, sp, #52	; 0x34
 80075d2:	a90e      	add	r1, sp, #56	; 0x38
 80075d4:	d140      	bne.n	8007658 <_printf_float+0x15c>
 80075d6:	2306      	movs	r3, #6
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	f04f 0c00 	mov.w	ip, #0
 80075de:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80075e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	463a      	mov	r2, r7
 80075f2:	464b      	mov	r3, r9
 80075f4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff feed 	bl	80073d8 <__cvt>
 80075fe:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007602:	2b47      	cmp	r3, #71	; 0x47
 8007604:	4607      	mov	r7, r0
 8007606:	d109      	bne.n	800761c <_printf_float+0x120>
 8007608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760a:	1cd8      	adds	r0, r3, #3
 800760c:	db02      	blt.n	8007614 <_printf_float+0x118>
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	4293      	cmp	r3, r2
 8007612:	dd47      	ble.n	80076a4 <_printf_float+0x1a8>
 8007614:	f1a8 0802 	sub.w	r8, r8, #2
 8007618:	fa5f f888 	uxtb.w	r8, r8
 800761c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007620:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007622:	d824      	bhi.n	800766e <_printf_float+0x172>
 8007624:	3901      	subs	r1, #1
 8007626:	4642      	mov	r2, r8
 8007628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800762c:	910d      	str	r1, [sp, #52]	; 0x34
 800762e:	f7ff ff2f 	bl	8007490 <__exponent>
 8007632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007634:	4681      	mov	r9, r0
 8007636:	1813      	adds	r3, r2, r0
 8007638:	2a01      	cmp	r2, #1
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	dc02      	bgt.n	8007644 <_printf_float+0x148>
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	07d1      	lsls	r1, r2, #31
 8007642:	d501      	bpl.n	8007648 <_printf_float+0x14c>
 8007644:	3301      	adds	r3, #1
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0a2      	beq.n	8007596 <_printf_float+0x9a>
 8007650:	232d      	movs	r3, #45	; 0x2d
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007656:	e79e      	b.n	8007596 <_printf_float+0x9a>
 8007658:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800765c:	f000 816e 	beq.w	800793c <_printf_float+0x440>
 8007660:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007664:	d1b9      	bne.n	80075da <_printf_float+0xde>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1b7      	bne.n	80075da <_printf_float+0xde>
 800766a:	2301      	movs	r3, #1
 800766c:	e7b4      	b.n	80075d8 <_printf_float+0xdc>
 800766e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007672:	d119      	bne.n	80076a8 <_printf_float+0x1ac>
 8007674:	2900      	cmp	r1, #0
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	dd0c      	ble.n	8007694 <_printf_float+0x198>
 800767a:	6121      	str	r1, [r4, #16]
 800767c:	b913      	cbnz	r3, 8007684 <_printf_float+0x188>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	07d2      	lsls	r2, r2, #31
 8007682:	d502      	bpl.n	800768a <_printf_float+0x18e>
 8007684:	3301      	adds	r3, #1
 8007686:	440b      	add	r3, r1
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768c:	f04f 0900 	mov.w	r9, #0
 8007690:	65a3      	str	r3, [r4, #88]	; 0x58
 8007692:	e7d9      	b.n	8007648 <_printf_float+0x14c>
 8007694:	b913      	cbnz	r3, 800769c <_printf_float+0x1a0>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	07d0      	lsls	r0, r2, #31
 800769a:	d501      	bpl.n	80076a0 <_printf_float+0x1a4>
 800769c:	3302      	adds	r3, #2
 800769e:	e7f3      	b.n	8007688 <_printf_float+0x18c>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f1      	b.n	8007688 <_printf_float+0x18c>
 80076a4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80076a8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80076ac:	4293      	cmp	r3, r2
 80076ae:	db05      	blt.n	80076bc <_printf_float+0x1c0>
 80076b0:	6822      	ldr	r2, [r4, #0]
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	07d1      	lsls	r1, r2, #31
 80076b6:	d5e8      	bpl.n	800768a <_printf_float+0x18e>
 80076b8:	3301      	adds	r3, #1
 80076ba:	e7e5      	b.n	8007688 <_printf_float+0x18c>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfcc      	ite	gt
 80076c0:	2301      	movgt	r3, #1
 80076c2:	f1c3 0302 	rsble	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	e7de      	b.n	8007688 <_printf_float+0x18c>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	055a      	lsls	r2, r3, #21
 80076ce:	d407      	bmi.n	80076e0 <_printf_float+0x1e4>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	463a      	mov	r2, r7
 80076d4:	4659      	mov	r1, fp
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b0      	blx	r6
 80076da:	3001      	adds	r0, #1
 80076dc:	d129      	bne.n	8007732 <_printf_float+0x236>
 80076de:	e764      	b.n	80075aa <_printf_float+0xae>
 80076e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80076e4:	f240 80d7 	bls.w	8007896 <_printf_float+0x39a>
 80076e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80076f4:	b388      	cbz	r0, 800775a <_printf_float+0x25e>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4a40      	ldr	r2, [pc, #256]	; (80077fc <_printf_float+0x300>)
 80076fa:	4659      	mov	r1, fp
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b0      	blx	r6
 8007700:	3001      	adds	r0, #1
 8007702:	f43f af52 	beq.w	80075aa <_printf_float+0xae>
 8007706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800770a:	429a      	cmp	r2, r3
 800770c:	db02      	blt.n	8007714 <_printf_float+0x218>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	07d8      	lsls	r0, r3, #31
 8007712:	d50e      	bpl.n	8007732 <_printf_float+0x236>
 8007714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007718:	4659      	mov	r1, fp
 800771a:	4628      	mov	r0, r5
 800771c:	47b0      	blx	r6
 800771e:	3001      	adds	r0, #1
 8007720:	f43f af43 	beq.w	80075aa <_printf_float+0xae>
 8007724:	2700      	movs	r7, #0
 8007726:	f104 081a 	add.w	r8, r4, #26
 800772a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800772c:	3b01      	subs	r3, #1
 800772e:	42bb      	cmp	r3, r7
 8007730:	dc09      	bgt.n	8007746 <_printf_float+0x24a>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	079f      	lsls	r7, r3, #30
 8007736:	f100 80fd 	bmi.w	8007934 <_printf_float+0x438>
 800773a:	68e0      	ldr	r0, [r4, #12]
 800773c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800773e:	4298      	cmp	r0, r3
 8007740:	bfb8      	it	lt
 8007742:	4618      	movlt	r0, r3
 8007744:	e733      	b.n	80075ae <_printf_float+0xb2>
 8007746:	2301      	movs	r3, #1
 8007748:	4642      	mov	r2, r8
 800774a:	4659      	mov	r1, fp
 800774c:	4628      	mov	r0, r5
 800774e:	47b0      	blx	r6
 8007750:	3001      	adds	r0, #1
 8007752:	f43f af2a 	beq.w	80075aa <_printf_float+0xae>
 8007756:	3701      	adds	r7, #1
 8007758:	e7e7      	b.n	800772a <_printf_float+0x22e>
 800775a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc2b      	bgt.n	80077b8 <_printf_float+0x2bc>
 8007760:	2301      	movs	r3, #1
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <_printf_float+0x300>)
 8007764:	4659      	mov	r1, fp
 8007766:	4628      	mov	r0, r5
 8007768:	47b0      	blx	r6
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af1d 	beq.w	80075aa <_printf_float+0xae>
 8007770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007772:	b923      	cbnz	r3, 800777e <_printf_float+0x282>
 8007774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007776:	b913      	cbnz	r3, 800777e <_printf_float+0x282>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d5d9      	bpl.n	8007732 <_printf_float+0x236>
 800777e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007782:	4659      	mov	r1, fp
 8007784:	4628      	mov	r0, r5
 8007786:	47b0      	blx	r6
 8007788:	3001      	adds	r0, #1
 800778a:	f43f af0e 	beq.w	80075aa <_printf_float+0xae>
 800778e:	f04f 0800 	mov.w	r8, #0
 8007792:	f104 091a 	add.w	r9, r4, #26
 8007796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007798:	425b      	negs	r3, r3
 800779a:	4543      	cmp	r3, r8
 800779c:	dc01      	bgt.n	80077a2 <_printf_float+0x2a6>
 800779e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a0:	e797      	b.n	80076d2 <_printf_float+0x1d6>
 80077a2:	2301      	movs	r3, #1
 80077a4:	464a      	mov	r2, r9
 80077a6:	4659      	mov	r1, fp
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f aefc 	beq.w	80075aa <_printf_float+0xae>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	e7ee      	b.n	8007796 <_printf_float+0x29a>
 80077b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfa8      	it	ge
 80077c0:	461a      	movge	r2, r3
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	4690      	mov	r8, r2
 80077c6:	dd07      	ble.n	80077d8 <_printf_float+0x2dc>
 80077c8:	4613      	mov	r3, r2
 80077ca:	4659      	mov	r1, fp
 80077cc:	463a      	mov	r2, r7
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b0      	blx	r6
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f aee9 	beq.w	80075aa <_printf_float+0xae>
 80077d8:	f104 031a 	add.w	r3, r4, #26
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80077e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077e6:	e015      	b.n	8007814 <_printf_float+0x318>
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	0800abcc 	.word	0x0800abcc
 80077f0:	0800abc8 	.word	0x0800abc8
 80077f4:	0800abd4 	.word	0x0800abd4
 80077f8:	0800abd0 	.word	0x0800abd0
 80077fc:	0800abd8 	.word	0x0800abd8
 8007800:	2301      	movs	r3, #1
 8007802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007804:	4659      	mov	r1, fp
 8007806:	4628      	mov	r0, r5
 8007808:	47b0      	blx	r6
 800780a:	3001      	adds	r0, #1
 800780c:	f43f aecd 	beq.w	80075aa <_printf_float+0xae>
 8007810:	f10a 0a01 	add.w	sl, sl, #1
 8007814:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007818:	eba9 0308 	sub.w	r3, r9, r8
 800781c:	4553      	cmp	r3, sl
 800781e:	dcef      	bgt.n	8007800 <_printf_float+0x304>
 8007820:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007824:	429a      	cmp	r2, r3
 8007826:	444f      	add	r7, r9
 8007828:	db14      	blt.n	8007854 <_printf_float+0x358>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	07da      	lsls	r2, r3, #31
 800782e:	d411      	bmi.n	8007854 <_printf_float+0x358>
 8007830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007832:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007834:	eba3 0209 	sub.w	r2, r3, r9
 8007838:	eba3 0901 	sub.w	r9, r3, r1
 800783c:	4591      	cmp	r9, r2
 800783e:	bfa8      	it	ge
 8007840:	4691      	movge	r9, r2
 8007842:	f1b9 0f00 	cmp.w	r9, #0
 8007846:	dc0d      	bgt.n	8007864 <_printf_float+0x368>
 8007848:	2700      	movs	r7, #0
 800784a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800784e:	f104 081a 	add.w	r8, r4, #26
 8007852:	e018      	b.n	8007886 <_printf_float+0x38a>
 8007854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007858:	4659      	mov	r1, fp
 800785a:	4628      	mov	r0, r5
 800785c:	47b0      	blx	r6
 800785e:	3001      	adds	r0, #1
 8007860:	d1e6      	bne.n	8007830 <_printf_float+0x334>
 8007862:	e6a2      	b.n	80075aa <_printf_float+0xae>
 8007864:	464b      	mov	r3, r9
 8007866:	463a      	mov	r2, r7
 8007868:	4659      	mov	r1, fp
 800786a:	4628      	mov	r0, r5
 800786c:	47b0      	blx	r6
 800786e:	3001      	adds	r0, #1
 8007870:	d1ea      	bne.n	8007848 <_printf_float+0x34c>
 8007872:	e69a      	b.n	80075aa <_printf_float+0xae>
 8007874:	2301      	movs	r3, #1
 8007876:	4642      	mov	r2, r8
 8007878:	4659      	mov	r1, fp
 800787a:	4628      	mov	r0, r5
 800787c:	47b0      	blx	r6
 800787e:	3001      	adds	r0, #1
 8007880:	f43f ae93 	beq.w	80075aa <_printf_float+0xae>
 8007884:	3701      	adds	r7, #1
 8007886:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	eba3 0309 	sub.w	r3, r3, r9
 8007890:	42bb      	cmp	r3, r7
 8007892:	dcef      	bgt.n	8007874 <_printf_float+0x378>
 8007894:	e74d      	b.n	8007732 <_printf_float+0x236>
 8007896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007898:	2a01      	cmp	r2, #1
 800789a:	dc01      	bgt.n	80078a0 <_printf_float+0x3a4>
 800789c:	07db      	lsls	r3, r3, #31
 800789e:	d538      	bpl.n	8007912 <_printf_float+0x416>
 80078a0:	2301      	movs	r3, #1
 80078a2:	463a      	mov	r2, r7
 80078a4:	4659      	mov	r1, fp
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b0      	blx	r6
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f ae7d 	beq.w	80075aa <_printf_float+0xae>
 80078b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b4:	4659      	mov	r1, fp
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b0      	blx	r6
 80078ba:	3001      	adds	r0, #1
 80078bc:	f107 0701 	add.w	r7, r7, #1
 80078c0:	f43f ae73 	beq.w	80075aa <_printf_float+0xae>
 80078c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ca:	2200      	movs	r2, #0
 80078cc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80078d0:	2300      	movs	r3, #0
 80078d2:	f7f9 f869 	bl	80009a8 <__aeabi_dcmpeq>
 80078d6:	b9c0      	cbnz	r0, 800790a <_printf_float+0x40e>
 80078d8:	4643      	mov	r3, r8
 80078da:	463a      	mov	r2, r7
 80078dc:	4659      	mov	r1, fp
 80078de:	4628      	mov	r0, r5
 80078e0:	47b0      	blx	r6
 80078e2:	3001      	adds	r0, #1
 80078e4:	d10d      	bne.n	8007902 <_printf_float+0x406>
 80078e6:	e660      	b.n	80075aa <_printf_float+0xae>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4642      	mov	r2, r8
 80078ec:	4659      	mov	r1, fp
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b0      	blx	r6
 80078f2:	3001      	adds	r0, #1
 80078f4:	f43f ae59 	beq.w	80075aa <_printf_float+0xae>
 80078f8:	3701      	adds	r7, #1
 80078fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078fc:	3b01      	subs	r3, #1
 80078fe:	42bb      	cmp	r3, r7
 8007900:	dcf2      	bgt.n	80078e8 <_printf_float+0x3ec>
 8007902:	464b      	mov	r3, r9
 8007904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007908:	e6e4      	b.n	80076d4 <_printf_float+0x1d8>
 800790a:	2700      	movs	r7, #0
 800790c:	f104 081a 	add.w	r8, r4, #26
 8007910:	e7f3      	b.n	80078fa <_printf_float+0x3fe>
 8007912:	2301      	movs	r3, #1
 8007914:	e7e1      	b.n	80078da <_printf_float+0x3de>
 8007916:	2301      	movs	r3, #1
 8007918:	4642      	mov	r2, r8
 800791a:	4659      	mov	r1, fp
 800791c:	4628      	mov	r0, r5
 800791e:	47b0      	blx	r6
 8007920:	3001      	adds	r0, #1
 8007922:	f43f ae42 	beq.w	80075aa <_printf_float+0xae>
 8007926:	3701      	adds	r7, #1
 8007928:	68e3      	ldr	r3, [r4, #12]
 800792a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	42bb      	cmp	r3, r7
 8007930:	dcf1      	bgt.n	8007916 <_printf_float+0x41a>
 8007932:	e702      	b.n	800773a <_printf_float+0x23e>
 8007934:	2700      	movs	r7, #0
 8007936:	f104 0819 	add.w	r8, r4, #25
 800793a:	e7f5      	b.n	8007928 <_printf_float+0x42c>
 800793c:	2b00      	cmp	r3, #0
 800793e:	f43f ae94 	beq.w	800766a <_printf_float+0x16e>
 8007942:	f04f 0c00 	mov.w	ip, #0
 8007946:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800794a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800794e:	6022      	str	r2, [r4, #0]
 8007950:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007954:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	463a      	mov	r2, r7
 800795c:	464b      	mov	r3, r9
 800795e:	4628      	mov	r0, r5
 8007960:	f7ff fd3a 	bl	80073d8 <__cvt>
 8007964:	4607      	mov	r7, r0
 8007966:	e64f      	b.n	8007608 <_printf_float+0x10c>

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4691      	mov	r9, r2
 800796e:	461f      	mov	r7, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	4606      	mov	r6, r0
 8007976:	4293      	cmp	r3, r2
 8007978:	bfb8      	it	lt
 800797a:	4613      	movlt	r3, r2
 800797c:	f8c9 3000 	str.w	r3, [r9]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007984:	460c      	mov	r4, r1
 8007986:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800798a:	b112      	cbz	r2, 8007992 <_printf_common+0x2a>
 800798c:	3301      	adds	r3, #1
 800798e:	f8c9 3000 	str.w	r3, [r9]
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	0699      	lsls	r1, r3, #26
 8007996:	bf42      	ittt	mi
 8007998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800799c:	3302      	addmi	r3, #2
 800799e:	f8c9 3000 	strmi.w	r3, [r9]
 80079a2:	6825      	ldr	r5, [r4, #0]
 80079a4:	f015 0506 	ands.w	r5, r5, #6
 80079a8:	d107      	bne.n	80079ba <_printf_common+0x52>
 80079aa:	f104 0a19 	add.w	sl, r4, #25
 80079ae:	68e3      	ldr	r3, [r4, #12]
 80079b0:	f8d9 2000 	ldr.w	r2, [r9]
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	42ab      	cmp	r3, r5
 80079b8:	dc29      	bgt.n	8007a0e <_printf_common+0xa6>
 80079ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	3300      	adds	r3, #0
 80079c2:	bf18      	it	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	0692      	lsls	r2, r2, #26
 80079c8:	d42e      	bmi.n	8007a28 <_printf_common+0xc0>
 80079ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ce:	4639      	mov	r1, r7
 80079d0:	4630      	mov	r0, r6
 80079d2:	47c0      	blx	r8
 80079d4:	3001      	adds	r0, #1
 80079d6:	d021      	beq.n	8007a1c <_printf_common+0xb4>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	68e5      	ldr	r5, [r4, #12]
 80079dc:	f003 0306 	and.w	r3, r3, #6
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	bf18      	it	ne
 80079e4:	2500      	movne	r5, #0
 80079e6:	f8d9 2000 	ldr.w	r2, [r9]
 80079ea:	f04f 0900 	mov.w	r9, #0
 80079ee:	bf08      	it	eq
 80079f0:	1aad      	subeq	r5, r5, r2
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	bf08      	it	eq
 80079f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079fc:	4293      	cmp	r3, r2
 80079fe:	bfc4      	itt	gt
 8007a00:	1a9b      	subgt	r3, r3, r2
 8007a02:	18ed      	addgt	r5, r5, r3
 8007a04:	341a      	adds	r4, #26
 8007a06:	454d      	cmp	r5, r9
 8007a08:	d11a      	bne.n	8007a40 <_printf_common+0xd8>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e008      	b.n	8007a20 <_printf_common+0xb8>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4652      	mov	r2, sl
 8007a12:	4639      	mov	r1, r7
 8007a14:	4630      	mov	r0, r6
 8007a16:	47c0      	blx	r8
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d103      	bne.n	8007a24 <_printf_common+0xbc>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a24:	3501      	adds	r5, #1
 8007a26:	e7c2      	b.n	80079ae <_printf_common+0x46>
 8007a28:	2030      	movs	r0, #48	; 0x30
 8007a2a:	18e1      	adds	r1, r4, r3
 8007a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a36:	4422      	add	r2, r4
 8007a38:	3302      	adds	r3, #2
 8007a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a3e:	e7c4      	b.n	80079ca <_printf_common+0x62>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4622      	mov	r2, r4
 8007a44:	4639      	mov	r1, r7
 8007a46:	4630      	mov	r0, r6
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d0e6      	beq.n	8007a1c <_printf_common+0xb4>
 8007a4e:	f109 0901 	add.w	r9, r9, #1
 8007a52:	e7d8      	b.n	8007a06 <_printf_common+0x9e>

08007a54 <_printf_i>:
 8007a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	7e09      	ldrb	r1, [r1, #24]
 8007a60:	b085      	sub	sp, #20
 8007a62:	296e      	cmp	r1, #110	; 0x6e
 8007a64:	4617      	mov	r7, r2
 8007a66:	4606      	mov	r6, r0
 8007a68:	4698      	mov	r8, r3
 8007a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a6c:	f000 80b3 	beq.w	8007bd6 <_printf_i+0x182>
 8007a70:	d822      	bhi.n	8007ab8 <_printf_i+0x64>
 8007a72:	2963      	cmp	r1, #99	; 0x63
 8007a74:	d036      	beq.n	8007ae4 <_printf_i+0x90>
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x3a>
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	f000 80b9 	beq.w	8007bf0 <_printf_i+0x19c>
 8007a7e:	2958      	cmp	r1, #88	; 0x58
 8007a80:	f000 8083 	beq.w	8007b8a <_printf_i+0x136>
 8007a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a8c:	e032      	b.n	8007af4 <_printf_i+0xa0>
 8007a8e:	2964      	cmp	r1, #100	; 0x64
 8007a90:	d001      	beq.n	8007a96 <_printf_i+0x42>
 8007a92:	2969      	cmp	r1, #105	; 0x69
 8007a94:	d1f6      	bne.n	8007a84 <_printf_i+0x30>
 8007a96:	6820      	ldr	r0, [r4, #0]
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	0605      	lsls	r5, r0, #24
 8007a9c:	f103 0104 	add.w	r1, r3, #4
 8007aa0:	d52a      	bpl.n	8007af8 <_printf_i+0xa4>
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6011      	str	r1, [r2, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da03      	bge.n	8007ab2 <_printf_i+0x5e>
 8007aaa:	222d      	movs	r2, #45	; 0x2d
 8007aac:	425b      	negs	r3, r3
 8007aae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ab2:	486f      	ldr	r0, [pc, #444]	; (8007c70 <_printf_i+0x21c>)
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	e039      	b.n	8007b2c <_printf_i+0xd8>
 8007ab8:	2973      	cmp	r1, #115	; 0x73
 8007aba:	f000 809d 	beq.w	8007bf8 <_printf_i+0x1a4>
 8007abe:	d808      	bhi.n	8007ad2 <_printf_i+0x7e>
 8007ac0:	296f      	cmp	r1, #111	; 0x6f
 8007ac2:	d020      	beq.n	8007b06 <_printf_i+0xb2>
 8007ac4:	2970      	cmp	r1, #112	; 0x70
 8007ac6:	d1dd      	bne.n	8007a84 <_printf_i+0x30>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	f043 0320 	orr.w	r3, r3, #32
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e003      	b.n	8007ada <_printf_i+0x86>
 8007ad2:	2975      	cmp	r1, #117	; 0x75
 8007ad4:	d017      	beq.n	8007b06 <_printf_i+0xb2>
 8007ad6:	2978      	cmp	r1, #120	; 0x78
 8007ad8:	d1d4      	bne.n	8007a84 <_printf_i+0x30>
 8007ada:	2378      	movs	r3, #120	; 0x78
 8007adc:	4865      	ldr	r0, [pc, #404]	; (8007c74 <_printf_i+0x220>)
 8007ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae2:	e055      	b.n	8007b90 <_printf_i+0x13c>
 8007ae4:	6813      	ldr	r3, [r2, #0]
 8007ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aea:	1d19      	adds	r1, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6011      	str	r1, [r2, #0]
 8007af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007af4:	2301      	movs	r3, #1
 8007af6:	e08c      	b.n	8007c12 <_printf_i+0x1be>
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007afe:	6011      	str	r1, [r2, #0]
 8007b00:	bf18      	it	ne
 8007b02:	b21b      	sxthne	r3, r3
 8007b04:	e7cf      	b.n	8007aa6 <_printf_i+0x52>
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	1d18      	adds	r0, r3, #4
 8007b0c:	6010      	str	r0, [r2, #0]
 8007b0e:	0628      	lsls	r0, r5, #24
 8007b10:	d501      	bpl.n	8007b16 <_printf_i+0xc2>
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	e002      	b.n	8007b1c <_printf_i+0xc8>
 8007b16:	0668      	lsls	r0, r5, #25
 8007b18:	d5fb      	bpl.n	8007b12 <_printf_i+0xbe>
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	296f      	cmp	r1, #111	; 0x6f
 8007b1e:	bf14      	ite	ne
 8007b20:	220a      	movne	r2, #10
 8007b22:	2208      	moveq	r2, #8
 8007b24:	4852      	ldr	r0, [pc, #328]	; (8007c70 <_printf_i+0x21c>)
 8007b26:	2100      	movs	r1, #0
 8007b28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b2c:	6865      	ldr	r5, [r4, #4]
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	60a5      	str	r5, [r4, #8]
 8007b32:	f2c0 8095 	blt.w	8007c60 <_printf_i+0x20c>
 8007b36:	6821      	ldr	r1, [r4, #0]
 8007b38:	f021 0104 	bic.w	r1, r1, #4
 8007b3c:	6021      	str	r1, [r4, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d13d      	bne.n	8007bbe <_printf_i+0x16a>
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	f040 808e 	bne.w	8007c64 <_printf_i+0x210>
 8007b48:	4665      	mov	r5, ip
 8007b4a:	2a08      	cmp	r2, #8
 8007b4c:	d10b      	bne.n	8007b66 <_printf_i+0x112>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	07db      	lsls	r3, r3, #31
 8007b52:	d508      	bpl.n	8007b66 <_printf_i+0x112>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	bfde      	ittt	le
 8007b5c:	2330      	movle	r3, #48	; 0x30
 8007b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b66:	ebac 0305 	sub.w	r3, ip, r5
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	f8cd 8000 	str.w	r8, [sp]
 8007b70:	463b      	mov	r3, r7
 8007b72:	aa03      	add	r2, sp, #12
 8007b74:	4621      	mov	r1, r4
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7ff fef6 	bl	8007968 <_printf_common>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d14d      	bne.n	8007c1c <_printf_i+0x1c8>
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b84:	b005      	add	sp, #20
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	4839      	ldr	r0, [pc, #228]	; (8007c70 <_printf_i+0x21c>)
 8007b8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b90:	6813      	ldr	r3, [r2, #0]
 8007b92:	6821      	ldr	r1, [r4, #0]
 8007b94:	1d1d      	adds	r5, r3, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6015      	str	r5, [r2, #0]
 8007b9a:	060a      	lsls	r2, r1, #24
 8007b9c:	d50b      	bpl.n	8007bb6 <_printf_i+0x162>
 8007b9e:	07ca      	lsls	r2, r1, #31
 8007ba0:	bf44      	itt	mi
 8007ba2:	f041 0120 	orrmi.w	r1, r1, #32
 8007ba6:	6021      	strmi	r1, [r4, #0]
 8007ba8:	b91b      	cbnz	r3, 8007bb2 <_printf_i+0x15e>
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	f022 0220 	bic.w	r2, r2, #32
 8007bb0:	6022      	str	r2, [r4, #0]
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	e7b7      	b.n	8007b26 <_printf_i+0xd2>
 8007bb6:	064d      	lsls	r5, r1, #25
 8007bb8:	bf48      	it	mi
 8007bba:	b29b      	uxthmi	r3, r3
 8007bbc:	e7ef      	b.n	8007b9e <_printf_i+0x14a>
 8007bbe:	4665      	mov	r5, ip
 8007bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc4:	fb02 3311 	mls	r3, r2, r1, r3
 8007bc8:	5cc3      	ldrb	r3, [r0, r3]
 8007bca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007bce:	460b      	mov	r3, r1
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d1f5      	bne.n	8007bc0 <_printf_i+0x16c>
 8007bd4:	e7b9      	b.n	8007b4a <_printf_i+0xf6>
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	6825      	ldr	r5, [r4, #0]
 8007bda:	1d18      	adds	r0, r3, #4
 8007bdc:	6961      	ldr	r1, [r4, #20]
 8007bde:	6010      	str	r0, [r2, #0]
 8007be0:	0628      	lsls	r0, r5, #24
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	d501      	bpl.n	8007bea <_printf_i+0x196>
 8007be6:	6019      	str	r1, [r3, #0]
 8007be8:	e002      	b.n	8007bf0 <_printf_i+0x19c>
 8007bea:	066a      	lsls	r2, r5, #25
 8007bec:	d5fb      	bpl.n	8007be6 <_printf_i+0x192>
 8007bee:	8019      	strh	r1, [r3, #0]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4665      	mov	r5, ip
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	e7b9      	b.n	8007b6c <_printf_i+0x118>
 8007bf8:	6813      	ldr	r3, [r2, #0]
 8007bfa:	1d19      	adds	r1, r3, #4
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	681d      	ldr	r5, [r3, #0]
 8007c00:	6862      	ldr	r2, [r4, #4]
 8007c02:	2100      	movs	r1, #0
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 feb1 	bl	800896c <memchr>
 8007c0a:	b108      	cbz	r0, 8007c10 <_printf_i+0x1bc>
 8007c0c:	1b40      	subs	r0, r0, r5
 8007c0e:	6060      	str	r0, [r4, #4]
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	6123      	str	r3, [r4, #16]
 8007c14:	2300      	movs	r3, #0
 8007c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1a:	e7a7      	b.n	8007b6c <_printf_i+0x118>
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4639      	mov	r1, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	47c0      	blx	r8
 8007c26:	3001      	adds	r0, #1
 8007c28:	d0aa      	beq.n	8007b80 <_printf_i+0x12c>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	079b      	lsls	r3, r3, #30
 8007c2e:	d413      	bmi.n	8007c58 <_printf_i+0x204>
 8007c30:	68e0      	ldr	r0, [r4, #12]
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	4298      	cmp	r0, r3
 8007c36:	bfb8      	it	lt
 8007c38:	4618      	movlt	r0, r3
 8007c3a:	e7a3      	b.n	8007b84 <_printf_i+0x130>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	464a      	mov	r2, r9
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	47c0      	blx	r8
 8007c46:	3001      	adds	r0, #1
 8007c48:	d09a      	beq.n	8007b80 <_printf_i+0x12c>
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	68e3      	ldr	r3, [r4, #12]
 8007c4e:	9a03      	ldr	r2, [sp, #12]
 8007c50:	1a9b      	subs	r3, r3, r2
 8007c52:	42ab      	cmp	r3, r5
 8007c54:	dcf2      	bgt.n	8007c3c <_printf_i+0x1e8>
 8007c56:	e7eb      	b.n	8007c30 <_printf_i+0x1dc>
 8007c58:	2500      	movs	r5, #0
 8007c5a:	f104 0919 	add.w	r9, r4, #25
 8007c5e:	e7f5      	b.n	8007c4c <_printf_i+0x1f8>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ac      	bne.n	8007bbe <_printf_i+0x16a>
 8007c64:	7803      	ldrb	r3, [r0, #0]
 8007c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c6e:	e76c      	b.n	8007b4a <_printf_i+0xf6>
 8007c70:	0800abda 	.word	0x0800abda
 8007c74:	0800abeb 	.word	0x0800abeb

08007c78 <siprintf>:
 8007c78:	b40e      	push	{r1, r2, r3}
 8007c7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c7e:	b500      	push	{lr}
 8007c80:	b09c      	sub	sp, #112	; 0x70
 8007c82:	ab1d      	add	r3, sp, #116	; 0x74
 8007c84:	9002      	str	r0, [sp, #8]
 8007c86:	9006      	str	r0, [sp, #24]
 8007c88:	9107      	str	r1, [sp, #28]
 8007c8a:	9104      	str	r1, [sp, #16]
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <siprintf+0x38>)
 8007c8e:	4909      	ldr	r1, [pc, #36]	; (8007cb4 <siprintf+0x3c>)
 8007c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c94:	9105      	str	r1, [sp, #20]
 8007c96:	6800      	ldr	r0, [r0, #0]
 8007c98:	a902      	add	r1, sp, #8
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f001 fa6a 	bl	8009174 <_svfiprintf_r>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	b01c      	add	sp, #112	; 0x70
 8007ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cac:	b003      	add	sp, #12
 8007cae:	4770      	bx	lr
 8007cb0:	20000024 	.word	0x20000024
 8007cb4:	ffff0208 	.word	0xffff0208

08007cb8 <quorem>:
 8007cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	6903      	ldr	r3, [r0, #16]
 8007cbe:	690c      	ldr	r4, [r1, #16]
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	f2c0 8084 	blt.w	8007dd0 <quorem+0x118>
 8007cc8:	3c01      	subs	r4, #1
 8007cca:	f101 0714 	add.w	r7, r1, #20
 8007cce:	f100 0614 	add.w	r6, r0, #20
 8007cd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cda:	3501      	adds	r5, #1
 8007cdc:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ce0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ce4:	eb06 030c 	add.w	r3, r6, ip
 8007ce8:	eb07 090c 	add.w	r9, r7, ip
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	b39d      	cbz	r5, 8007d58 <quorem+0xa0>
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	46b6      	mov	lr, r6
 8007cf8:	46d3      	mov	fp, sl
 8007cfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cfe:	b293      	uxth	r3, r2
 8007d00:	fb05 a303 	mla	r3, r5, r3, sl
 8007d04:	0c12      	lsrs	r2, r2, #16
 8007d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d0a:	fb05 a202 	mla	r2, r5, r2, sl
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	ebab 0303 	sub.w	r3, fp, r3
 8007d14:	f8de b000 	ldr.w	fp, [lr]
 8007d18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d1c:	fa1f fb8b 	uxth.w	fp, fp
 8007d20:	445b      	add	r3, fp
 8007d22:	fa1f fb82 	uxth.w	fp, r2
 8007d26:	f8de 2000 	ldr.w	r2, [lr]
 8007d2a:	4581      	cmp	r9, r0
 8007d2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d3e:	f84e 3b04 	str.w	r3, [lr], #4
 8007d42:	d2da      	bcs.n	8007cfa <quorem+0x42>
 8007d44:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d48:	b933      	cbnz	r3, 8007d58 <quorem+0xa0>
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	429e      	cmp	r6, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	d331      	bcc.n	8007db8 <quorem+0x100>
 8007d54:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d58:	4640      	mov	r0, r8
 8007d5a:	f001 f835 	bl	8008dc8 <__mcmp>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	db26      	blt.n	8007db0 <quorem+0xf8>
 8007d62:	4630      	mov	r0, r6
 8007d64:	f04f 0c00 	mov.w	ip, #0
 8007d68:	3501      	adds	r5, #1
 8007d6a:	f857 1b04 	ldr.w	r1, [r7], #4
 8007d6e:	f8d0 e000 	ldr.w	lr, [r0]
 8007d72:	b28b      	uxth	r3, r1
 8007d74:	ebac 0303 	sub.w	r3, ip, r3
 8007d78:	fa1f f28e 	uxth.w	r2, lr
 8007d7c:	4413      	add	r3, r2
 8007d7e:	0c0a      	lsrs	r2, r1, #16
 8007d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d8e:	45b9      	cmp	r9, r7
 8007d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d94:	f840 3b04 	str.w	r3, [r0], #4
 8007d98:	d2e7      	bcs.n	8007d6a <quorem+0xb2>
 8007d9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007da2:	b92a      	cbnz	r2, 8007db0 <quorem+0xf8>
 8007da4:	3b04      	subs	r3, #4
 8007da6:	429e      	cmp	r6, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	d30b      	bcc.n	8007dc4 <quorem+0x10c>
 8007dac:	f8c8 4010 	str.w	r4, [r8, #16]
 8007db0:	4628      	mov	r0, r5
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1c9      	bne.n	8007d54 <quorem+0x9c>
 8007dc0:	3c01      	subs	r4, #1
 8007dc2:	e7c4      	b.n	8007d4e <quorem+0x96>
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	3b04      	subs	r3, #4
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d1ef      	bne.n	8007dac <quorem+0xf4>
 8007dcc:	3c01      	subs	r4, #1
 8007dce:	e7ea      	b.n	8007da6 <quorem+0xee>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e7ee      	b.n	8007db2 <quorem+0xfa>
 8007dd4:	0000      	movs	r0, r0
	...

08007dd8 <_dtoa_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007de2:	b095      	sub	sp, #84	; 0x54
 8007de4:	4604      	mov	r4, r0
 8007de6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007dea:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007dee:	b93d      	cbnz	r5, 8007e00 <_dtoa_r+0x28>
 8007df0:	2010      	movs	r0, #16
 8007df2:	f000 fdb3 	bl	800895c <malloc>
 8007df6:	6260      	str	r0, [r4, #36]	; 0x24
 8007df8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dfc:	6005      	str	r5, [r0, #0]
 8007dfe:	60c5      	str	r5, [r0, #12]
 8007e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	b151      	cbz	r1, 8007e1c <_dtoa_r+0x44>
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4093      	lsls	r3, r2
 8007e0c:	604a      	str	r2, [r1, #4]
 8007e0e:	608b      	str	r3, [r1, #8]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fdf8 	bl	8008a06 <_Bfree>
 8007e16:	2200      	movs	r2, #0
 8007e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	1e3b      	subs	r3, r7, #0
 8007e1e:	bfaf      	iteee	ge
 8007e20:	2300      	movge	r3, #0
 8007e22:	2201      	movlt	r2, #1
 8007e24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e28:	9303      	strlt	r3, [sp, #12]
 8007e2a:	bfac      	ite	ge
 8007e2c:	f8c8 3000 	strge.w	r3, [r8]
 8007e30:	f8c8 2000 	strlt.w	r2, [r8]
 8007e34:	4bae      	ldr	r3, [pc, #696]	; (80080f0 <_dtoa_r+0x318>)
 8007e36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e3a:	ea33 0308 	bics.w	r3, r3, r8
 8007e3e:	d11b      	bne.n	8007e78 <_dtoa_r+0xa0>
 8007e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	9b02      	ldr	r3, [sp, #8]
 8007e4a:	b923      	cbnz	r3, 8007e56 <_dtoa_r+0x7e>
 8007e4c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f000 8545 	beq.w	80088e0 <_dtoa_r+0xb08>
 8007e56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e58:	b953      	cbnz	r3, 8007e70 <_dtoa_r+0x98>
 8007e5a:	4ba6      	ldr	r3, [pc, #664]	; (80080f4 <_dtoa_r+0x31c>)
 8007e5c:	e021      	b.n	8007ea2 <_dtoa_r+0xca>
 8007e5e:	4ba6      	ldr	r3, [pc, #664]	; (80080f8 <_dtoa_r+0x320>)
 8007e60:	9306      	str	r3, [sp, #24]
 8007e62:	3308      	adds	r3, #8
 8007e64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	9806      	ldr	r0, [sp, #24]
 8007e6a:	b015      	add	sp, #84	; 0x54
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	4ba0      	ldr	r3, [pc, #640]	; (80080f4 <_dtoa_r+0x31c>)
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	3303      	adds	r3, #3
 8007e76:	e7f5      	b.n	8007e64 <_dtoa_r+0x8c>
 8007e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4630      	mov	r0, r6
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f8 fd90 	bl	80009a8 <__aeabi_dcmpeq>
 8007e88:	4682      	mov	sl, r0
 8007e8a:	b160      	cbz	r0, 8007ea6 <_dtoa_r+0xce>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8520 	beq.w	80088da <_dtoa_r+0xb02>
 8007e9a:	4b98      	ldr	r3, [pc, #608]	; (80080fc <_dtoa_r+0x324>)
 8007e9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	9306      	str	r3, [sp, #24]
 8007ea4:	e7e0      	b.n	8007e68 <_dtoa_r+0x90>
 8007ea6:	ab12      	add	r3, sp, #72	; 0x48
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	ab13      	add	r3, sp, #76	; 0x4c
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	4632      	mov	r2, r6
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f001 f800 	bl	8008eb8 <__d2b>
 8007eb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ebc:	4683      	mov	fp, r0
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	d07d      	beq.n	8007fbe <_dtoa_r+0x1e6>
 8007ec2:	46b0      	mov	r8, r6
 8007ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ec8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007ecc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007ed0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ed4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4b89      	ldr	r3, [pc, #548]	; (8008100 <_dtoa_r+0x328>)
 8007edc:	4640      	mov	r0, r8
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 f942 	bl	8000168 <__aeabi_dsub>
 8007ee4:	a37c      	add	r3, pc, #496	; (adr r3, 80080d8 <_dtoa_r+0x300>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 faf5 	bl	80004d8 <__aeabi_dmul>
 8007eee:	a37c      	add	r3, pc, #496	; (adr r3, 80080e0 <_dtoa_r+0x308>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 f93a 	bl	800016c <__adddf3>
 8007ef8:	4606      	mov	r6, r0
 8007efa:	4628      	mov	r0, r5
 8007efc:	460f      	mov	r7, r1
 8007efe:	f7f8 fa81 	bl	8000404 <__aeabi_i2d>
 8007f02:	a379      	add	r3, pc, #484	; (adr r3, 80080e8 <_dtoa_r+0x310>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 fae6 	bl	80004d8 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 f92a 	bl	800016c <__adddf3>
 8007f18:	4606      	mov	r6, r0
 8007f1a:	460f      	mov	r7, r1
 8007f1c:	f7f8 fd8c 	bl	8000a38 <__aeabi_d2iz>
 8007f20:	2200      	movs	r2, #0
 8007f22:	4682      	mov	sl, r0
 8007f24:	2300      	movs	r3, #0
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fd47 	bl	80009bc <__aeabi_dcmplt>
 8007f2e:	b148      	cbz	r0, 8007f44 <_dtoa_r+0x16c>
 8007f30:	4650      	mov	r0, sl
 8007f32:	f7f8 fa67 	bl	8000404 <__aeabi_i2d>
 8007f36:	4632      	mov	r2, r6
 8007f38:	463b      	mov	r3, r7
 8007f3a:	f7f8 fd35 	bl	80009a8 <__aeabi_dcmpeq>
 8007f3e:	b908      	cbnz	r0, 8007f44 <_dtoa_r+0x16c>
 8007f40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f44:	f1ba 0f16 	cmp.w	sl, #22
 8007f48:	d85a      	bhi.n	8008000 <_dtoa_r+0x228>
 8007f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f4e:	496d      	ldr	r1, [pc, #436]	; (8008104 <_dtoa_r+0x32c>)
 8007f50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f58:	f7f8 fd4e 	bl	80009f8 <__aeabi_dcmpgt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d051      	beq.n	8008004 <_dtoa_r+0x22c>
 8007f60:	2300      	movs	r3, #0
 8007f62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f66:	930d      	str	r3, [sp, #52]	; 0x34
 8007f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f6a:	1b5d      	subs	r5, r3, r5
 8007f6c:	1e6b      	subs	r3, r5, #1
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	bf43      	ittte	mi
 8007f72:	2300      	movmi	r3, #0
 8007f74:	f1c5 0901 	rsbmi	r9, r5, #1
 8007f78:	9307      	strmi	r3, [sp, #28]
 8007f7a:	f04f 0900 	movpl.w	r9, #0
 8007f7e:	f1ba 0f00 	cmp.w	sl, #0
 8007f82:	db41      	blt.n	8008008 <_dtoa_r+0x230>
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007f8a:	4453      	add	r3, sl
 8007f8c:	9307      	str	r3, [sp, #28]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9308      	str	r3, [sp, #32]
 8007f92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	f200 808f 	bhi.w	80080b8 <_dtoa_r+0x2e0>
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	bfc4      	itt	gt
 8007f9e:	3b04      	subgt	r3, #4
 8007fa0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fa4:	bfc8      	it	gt
 8007fa6:	2500      	movgt	r5, #0
 8007fa8:	f1a3 0302 	sub.w	r3, r3, #2
 8007fac:	bfd8      	it	le
 8007fae:	2501      	movle	r5, #1
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	f200 808d 	bhi.w	80080d0 <_dtoa_r+0x2f8>
 8007fb6:	e8df f003 	tbb	[pc, r3]
 8007fba:	7d7b      	.short	0x7d7b
 8007fbc:	6f2f      	.short	0x6f2f
 8007fbe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007fc2:	441d      	add	r5, r3
 8007fc4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fc8:	2820      	cmp	r0, #32
 8007fca:	dd13      	ble.n	8007ff4 <_dtoa_r+0x21c>
 8007fcc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	fa08 f800 	lsl.w	r8, r8, r0
 8007fd6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fda:	fa23 f000 	lsr.w	r0, r3, r0
 8007fde:	ea48 0000 	orr.w	r0, r8, r0
 8007fe2:	f7f8 f9ff 	bl	80003e4 <__aeabi_ui2d>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4680      	mov	r8, r0
 8007fea:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007fee:	3d01      	subs	r5, #1
 8007ff0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ff2:	e771      	b.n	8007ed8 <_dtoa_r+0x100>
 8007ff4:	9b02      	ldr	r3, [sp, #8]
 8007ff6:	f1c0 0020 	rsb	r0, r0, #32
 8007ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8007ffe:	e7f0      	b.n	8007fe2 <_dtoa_r+0x20a>
 8008000:	2301      	movs	r3, #1
 8008002:	e7b0      	b.n	8007f66 <_dtoa_r+0x18e>
 8008004:	900d      	str	r0, [sp, #52]	; 0x34
 8008006:	e7af      	b.n	8007f68 <_dtoa_r+0x190>
 8008008:	f1ca 0300 	rsb	r3, sl, #0
 800800c:	9308      	str	r3, [sp, #32]
 800800e:	2300      	movs	r3, #0
 8008010:	eba9 090a 	sub.w	r9, r9, sl
 8008014:	930c      	str	r3, [sp, #48]	; 0x30
 8008016:	e7bc      	b.n	8007f92 <_dtoa_r+0x1ba>
 8008018:	2301      	movs	r3, #1
 800801a:	9309      	str	r3, [sp, #36]	; 0x24
 800801c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd74      	ble.n	800810c <_dtoa_r+0x334>
 8008022:	4698      	mov	r8, r3
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	2200      	movs	r2, #0
 8008028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800802a:	6072      	str	r2, [r6, #4]
 800802c:	2204      	movs	r2, #4
 800802e:	f102 0014 	add.w	r0, r2, #20
 8008032:	4298      	cmp	r0, r3
 8008034:	6871      	ldr	r1, [r6, #4]
 8008036:	d96e      	bls.n	8008116 <_dtoa_r+0x33e>
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fcb0 	bl	800899e <_Balloc>
 800803e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008040:	6030      	str	r0, [r6, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f1b8 0f0e 	cmp.w	r8, #14
 8008048:	9306      	str	r3, [sp, #24]
 800804a:	f200 80ed 	bhi.w	8008228 <_dtoa_r+0x450>
 800804e:	2d00      	cmp	r5, #0
 8008050:	f000 80ea 	beq.w	8008228 <_dtoa_r+0x450>
 8008054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008058:	f1ba 0f00 	cmp.w	sl, #0
 800805c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008060:	dd77      	ble.n	8008152 <_dtoa_r+0x37a>
 8008062:	4a28      	ldr	r2, [pc, #160]	; (8008104 <_dtoa_r+0x32c>)
 8008064:	f00a 030f 	and.w	r3, sl, #15
 8008068:	ea4f 162a 	mov.w	r6, sl, asr #4
 800806c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008070:	06f0      	lsls	r0, r6, #27
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800807a:	d568      	bpl.n	800814e <_dtoa_r+0x376>
 800807c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008080:	4b21      	ldr	r3, [pc, #132]	; (8008108 <_dtoa_r+0x330>)
 8008082:	2503      	movs	r5, #3
 8008084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008088:	f7f8 fb50 	bl	800072c <__aeabi_ddiv>
 800808c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008090:	f006 060f 	and.w	r6, r6, #15
 8008094:	4f1c      	ldr	r7, [pc, #112]	; (8008108 <_dtoa_r+0x330>)
 8008096:	e04f      	b.n	8008138 <_dtoa_r+0x360>
 8008098:	2301      	movs	r3, #1
 800809a:	9309      	str	r3, [sp, #36]	; 0x24
 800809c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800809e:	4453      	add	r3, sl
 80080a0:	f103 0801 	add.w	r8, r3, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	4643      	mov	r3, r8
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	bfb8      	it	lt
 80080ac:	2301      	movlt	r3, #1
 80080ae:	e7ba      	b.n	8008026 <_dtoa_r+0x24e>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e7b2      	b.n	800801a <_dtoa_r+0x242>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e7f0      	b.n	800809a <_dtoa_r+0x2c2>
 80080b8:	2501      	movs	r5, #1
 80080ba:	2300      	movs	r3, #0
 80080bc:	9509      	str	r5, [sp, #36]	; 0x24
 80080be:	931e      	str	r3, [sp, #120]	; 0x78
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080c4:	2200      	movs	r2, #0
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	4698      	mov	r8, r3
 80080ca:	2312      	movs	r3, #18
 80080cc:	921f      	str	r2, [sp, #124]	; 0x7c
 80080ce:	e7aa      	b.n	8008026 <_dtoa_r+0x24e>
 80080d0:	2301      	movs	r3, #1
 80080d2:	9309      	str	r3, [sp, #36]	; 0x24
 80080d4:	e7f4      	b.n	80080c0 <_dtoa_r+0x2e8>
 80080d6:	bf00      	nop
 80080d8:	636f4361 	.word	0x636f4361
 80080dc:	3fd287a7 	.word	0x3fd287a7
 80080e0:	8b60c8b3 	.word	0x8b60c8b3
 80080e4:	3fc68a28 	.word	0x3fc68a28
 80080e8:	509f79fb 	.word	0x509f79fb
 80080ec:	3fd34413 	.word	0x3fd34413
 80080f0:	7ff00000 	.word	0x7ff00000
 80080f4:	0800ac05 	.word	0x0800ac05
 80080f8:	0800abfc 	.word	0x0800abfc
 80080fc:	0800abd9 	.word	0x0800abd9
 8008100:	3ff80000 	.word	0x3ff80000
 8008104:	0800ac38 	.word	0x0800ac38
 8008108:	0800ac10 	.word	0x0800ac10
 800810c:	2301      	movs	r3, #1
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	4698      	mov	r8, r3
 8008112:	461a      	mov	r2, r3
 8008114:	e7da      	b.n	80080cc <_dtoa_r+0x2f4>
 8008116:	3101      	adds	r1, #1
 8008118:	6071      	str	r1, [r6, #4]
 800811a:	0052      	lsls	r2, r2, #1
 800811c:	e787      	b.n	800802e <_dtoa_r+0x256>
 800811e:	07f1      	lsls	r1, r6, #31
 8008120:	d508      	bpl.n	8008134 <_dtoa_r+0x35c>
 8008122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812a:	f7f8 f9d5 	bl	80004d8 <__aeabi_dmul>
 800812e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008132:	3501      	adds	r5, #1
 8008134:	1076      	asrs	r6, r6, #1
 8008136:	3708      	adds	r7, #8
 8008138:	2e00      	cmp	r6, #0
 800813a:	d1f0      	bne.n	800811e <_dtoa_r+0x346>
 800813c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008144:	f7f8 faf2 	bl	800072c <__aeabi_ddiv>
 8008148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814c:	e01b      	b.n	8008186 <_dtoa_r+0x3ae>
 800814e:	2502      	movs	r5, #2
 8008150:	e7a0      	b.n	8008094 <_dtoa_r+0x2bc>
 8008152:	f000 80a4 	beq.w	800829e <_dtoa_r+0x4c6>
 8008156:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800815a:	f1ca 0600 	rsb	r6, sl, #0
 800815e:	4ba0      	ldr	r3, [pc, #640]	; (80083e0 <_dtoa_r+0x608>)
 8008160:	f006 020f 	and.w	r2, r6, #15
 8008164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 f9b4 	bl	80004d8 <__aeabi_dmul>
 8008170:	2502      	movs	r5, #2
 8008172:	2300      	movs	r3, #0
 8008174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008178:	4f9a      	ldr	r7, [pc, #616]	; (80083e4 <_dtoa_r+0x60c>)
 800817a:	1136      	asrs	r6, r6, #4
 800817c:	2e00      	cmp	r6, #0
 800817e:	f040 8083 	bne.w	8008288 <_dtoa_r+0x4b0>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e0      	bne.n	8008148 <_dtoa_r+0x370>
 8008186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 808a 	beq.w	80082a2 <_dtoa_r+0x4ca>
 800818e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008192:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800819a:	2200      	movs	r2, #0
 800819c:	4b92      	ldr	r3, [pc, #584]	; (80083e8 <_dtoa_r+0x610>)
 800819e:	f7f8 fc0d 	bl	80009bc <__aeabi_dcmplt>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d07d      	beq.n	80082a2 <_dtoa_r+0x4ca>
 80081a6:	f1b8 0f00 	cmp.w	r8, #0
 80081aa:	d07a      	beq.n	80082a2 <_dtoa_r+0x4ca>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd36      	ble.n	8008220 <_dtoa_r+0x448>
 80081b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b8c      	ldr	r3, [pc, #560]	; (80083ec <_dtoa_r+0x614>)
 80081ba:	f7f8 f98d 	bl	80004d8 <__aeabi_dmul>
 80081be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c2:	9e04      	ldr	r6, [sp, #16]
 80081c4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80081c8:	3501      	adds	r5, #1
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7f8 f91a 	bl	8000404 <__aeabi_i2d>
 80081d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d4:	f7f8 f980 	bl	80004d8 <__aeabi_dmul>
 80081d8:	2200      	movs	r2, #0
 80081da:	4b85      	ldr	r3, [pc, #532]	; (80083f0 <_dtoa_r+0x618>)
 80081dc:	f7f7 ffc6 	bl	800016c <__adddf3>
 80081e0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80081e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081e8:	950b      	str	r5, [sp, #44]	; 0x2c
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	d15c      	bne.n	80082a8 <_dtoa_r+0x4d0>
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	4b7f      	ldr	r3, [pc, #508]	; (80083f4 <_dtoa_r+0x61c>)
 80081f6:	f7f7 ffb7 	bl	8000168 <__aeabi_dsub>
 80081fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fc:	462b      	mov	r3, r5
 80081fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008202:	f7f8 fbf9 	bl	80009f8 <__aeabi_dcmpgt>
 8008206:	2800      	cmp	r0, #0
 8008208:	f040 8281 	bne.w	800870e <_dtoa_r+0x936>
 800820c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008212:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008216:	f7f8 fbd1 	bl	80009bc <__aeabi_dcmplt>
 800821a:	2800      	cmp	r0, #0
 800821c:	f040 8275 	bne.w	800870a <_dtoa_r+0x932>
 8008220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800822a:	2b00      	cmp	r3, #0
 800822c:	f2c0 814b 	blt.w	80084c6 <_dtoa_r+0x6ee>
 8008230:	f1ba 0f0e 	cmp.w	sl, #14
 8008234:	f300 8147 	bgt.w	80084c6 <_dtoa_r+0x6ee>
 8008238:	4b69      	ldr	r3, [pc, #420]	; (80083e0 <_dtoa_r+0x608>)
 800823a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008248:	2b00      	cmp	r3, #0
 800824a:	f280 80d7 	bge.w	80083fc <_dtoa_r+0x624>
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	f300 80d3 	bgt.w	80083fc <_dtoa_r+0x624>
 8008256:	f040 8257 	bne.w	8008708 <_dtoa_r+0x930>
 800825a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800825e:	2200      	movs	r2, #0
 8008260:	4b64      	ldr	r3, [pc, #400]	; (80083f4 <_dtoa_r+0x61c>)
 8008262:	f7f8 f939 	bl	80004d8 <__aeabi_dmul>
 8008266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800826a:	f7f8 fbbb 	bl	80009e4 <__aeabi_dcmpge>
 800826e:	4646      	mov	r6, r8
 8008270:	4647      	mov	r7, r8
 8008272:	2800      	cmp	r0, #0
 8008274:	f040 822d 	bne.w	80086d2 <_dtoa_r+0x8fa>
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	9a06      	ldr	r2, [sp, #24]
 800827c:	1c5d      	adds	r5, r3, #1
 800827e:	2331      	movs	r3, #49	; 0x31
 8008280:	f10a 0a01 	add.w	sl, sl, #1
 8008284:	7013      	strb	r3, [r2, #0]
 8008286:	e228      	b.n	80086da <_dtoa_r+0x902>
 8008288:	07f2      	lsls	r2, r6, #31
 800828a:	d505      	bpl.n	8008298 <_dtoa_r+0x4c0>
 800828c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008290:	f7f8 f922 	bl	80004d8 <__aeabi_dmul>
 8008294:	2301      	movs	r3, #1
 8008296:	3501      	adds	r5, #1
 8008298:	1076      	asrs	r6, r6, #1
 800829a:	3708      	adds	r7, #8
 800829c:	e76e      	b.n	800817c <_dtoa_r+0x3a4>
 800829e:	2502      	movs	r5, #2
 80082a0:	e771      	b.n	8008186 <_dtoa_r+0x3ae>
 80082a2:	4657      	mov	r7, sl
 80082a4:	4646      	mov	r6, r8
 80082a6:	e790      	b.n	80081ca <_dtoa_r+0x3f2>
 80082a8:	4b4d      	ldr	r3, [pc, #308]	; (80083e0 <_dtoa_r+0x608>)
 80082aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082ae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d048      	beq.n	800834a <_dtoa_r+0x572>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	2000      	movs	r0, #0
 80082be:	494e      	ldr	r1, [pc, #312]	; (80083f8 <_dtoa_r+0x620>)
 80082c0:	f7f8 fa34 	bl	800072c <__aeabi_ddiv>
 80082c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082c8:	f7f7 ff4e 	bl	8000168 <__aeabi_dsub>
 80082cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082d0:	9d06      	ldr	r5, [sp, #24]
 80082d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d6:	f7f8 fbaf 	bl	8000a38 <__aeabi_d2iz>
 80082da:	9011      	str	r0, [sp, #68]	; 0x44
 80082dc:	f7f8 f892 	bl	8000404 <__aeabi_i2d>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082e8:	f7f7 ff3e 	bl	8000168 <__aeabi_dsub>
 80082ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f2:	3330      	adds	r3, #48	; 0x30
 80082f4:	f805 3b01 	strb.w	r3, [r5], #1
 80082f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082fc:	f7f8 fb5e 	bl	80009bc <__aeabi_dcmplt>
 8008300:	2800      	cmp	r0, #0
 8008302:	d163      	bne.n	80083cc <_dtoa_r+0x5f4>
 8008304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008308:	2000      	movs	r0, #0
 800830a:	4937      	ldr	r1, [pc, #220]	; (80083e8 <_dtoa_r+0x610>)
 800830c:	f7f7 ff2c 	bl	8000168 <__aeabi_dsub>
 8008310:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008314:	f7f8 fb52 	bl	80009bc <__aeabi_dcmplt>
 8008318:	2800      	cmp	r0, #0
 800831a:	f040 80b5 	bne.w	8008488 <_dtoa_r+0x6b0>
 800831e:	9b06      	ldr	r3, [sp, #24]
 8008320:	1aeb      	subs	r3, r5, r3
 8008322:	429e      	cmp	r6, r3
 8008324:	f77f af7c 	ble.w	8008220 <_dtoa_r+0x448>
 8008328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800832c:	2200      	movs	r2, #0
 800832e:	4b2f      	ldr	r3, [pc, #188]	; (80083ec <_dtoa_r+0x614>)
 8008330:	f7f8 f8d2 	bl	80004d8 <__aeabi_dmul>
 8008334:	2200      	movs	r2, #0
 8008336:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800833a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833e:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <_dtoa_r+0x614>)
 8008340:	f7f8 f8ca 	bl	80004d8 <__aeabi_dmul>
 8008344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008348:	e7c3      	b.n	80082d2 <_dtoa_r+0x4fa>
 800834a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800834e:	f7f8 f8c3 	bl	80004d8 <__aeabi_dmul>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008358:	199d      	adds	r5, r3, r6
 800835a:	461e      	mov	r6, r3
 800835c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008360:	f7f8 fb6a 	bl	8000a38 <__aeabi_d2iz>
 8008364:	9011      	str	r0, [sp, #68]	; 0x44
 8008366:	f7f8 f84d 	bl	8000404 <__aeabi_i2d>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008372:	f7f7 fef9 	bl	8000168 <__aeabi_dsub>
 8008376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800837c:	3330      	adds	r3, #48	; 0x30
 800837e:	f806 3b01 	strb.w	r3, [r6], #1
 8008382:	42ae      	cmp	r6, r5
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	d124      	bne.n	80083d4 <_dtoa_r+0x5fc>
 800838a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800838e:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <_dtoa_r+0x620>)
 8008390:	f7f7 feec 	bl	800016c <__adddf3>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800839c:	f7f8 fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d171      	bne.n	8008488 <_dtoa_r+0x6b0>
 80083a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083a8:	2000      	movs	r0, #0
 80083aa:	4913      	ldr	r1, [pc, #76]	; (80083f8 <_dtoa_r+0x620>)
 80083ac:	f7f7 fedc 	bl	8000168 <__aeabi_dsub>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b8:	f7f8 fb00 	bl	80009bc <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f43f af2f 	beq.w	8008220 <_dtoa_r+0x448>
 80083c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083c6:	1e6a      	subs	r2, r5, #1
 80083c8:	2b30      	cmp	r3, #48	; 0x30
 80083ca:	d001      	beq.n	80083d0 <_dtoa_r+0x5f8>
 80083cc:	46ba      	mov	sl, r7
 80083ce:	e04a      	b.n	8008466 <_dtoa_r+0x68e>
 80083d0:	4615      	mov	r5, r2
 80083d2:	e7f6      	b.n	80083c2 <_dtoa_r+0x5ea>
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <_dtoa_r+0x614>)
 80083d6:	f7f8 f87f 	bl	80004d8 <__aeabi_dmul>
 80083da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083de:	e7bd      	b.n	800835c <_dtoa_r+0x584>
 80083e0:	0800ac38 	.word	0x0800ac38
 80083e4:	0800ac10 	.word	0x0800ac10
 80083e8:	3ff00000 	.word	0x3ff00000
 80083ec:	40240000 	.word	0x40240000
 80083f0:	401c0000 	.word	0x401c0000
 80083f4:	40140000 	.word	0x40140000
 80083f8:	3fe00000 	.word	0x3fe00000
 80083fc:	9d06      	ldr	r5, [sp, #24]
 80083fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	4630      	mov	r0, r6
 8008408:	4639      	mov	r1, r7
 800840a:	f7f8 f98f 	bl	800072c <__aeabi_ddiv>
 800840e:	f7f8 fb13 	bl	8000a38 <__aeabi_d2iz>
 8008412:	4681      	mov	r9, r0
 8008414:	f7f7 fff6 	bl	8000404 <__aeabi_i2d>
 8008418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841c:	f7f8 f85c 	bl	80004d8 <__aeabi_dmul>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f7 fe9e 	bl	8000168 <__aeabi_dsub>
 800842c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008430:	f805 6b01 	strb.w	r6, [r5], #1
 8008434:	9e06      	ldr	r6, [sp, #24]
 8008436:	4602      	mov	r2, r0
 8008438:	1bae      	subs	r6, r5, r6
 800843a:	45b0      	cmp	r8, r6
 800843c:	460b      	mov	r3, r1
 800843e:	d135      	bne.n	80084ac <_dtoa_r+0x6d4>
 8008440:	f7f7 fe94 	bl	800016c <__adddf3>
 8008444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008448:	4606      	mov	r6, r0
 800844a:	460f      	mov	r7, r1
 800844c:	f7f8 fad4 	bl	80009f8 <__aeabi_dcmpgt>
 8008450:	b9c8      	cbnz	r0, 8008486 <_dtoa_r+0x6ae>
 8008452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	f7f8 faa5 	bl	80009a8 <__aeabi_dcmpeq>
 800845e:	b110      	cbz	r0, 8008466 <_dtoa_r+0x68e>
 8008460:	f019 0f01 	tst.w	r9, #1
 8008464:	d10f      	bne.n	8008486 <_dtoa_r+0x6ae>
 8008466:	4659      	mov	r1, fp
 8008468:	4620      	mov	r0, r4
 800846a:	f000 facc 	bl	8008a06 <_Bfree>
 800846e:	2300      	movs	r3, #0
 8008470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008472:	702b      	strb	r3, [r5, #0]
 8008474:	f10a 0301 	add.w	r3, sl, #1
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800847c:	2b00      	cmp	r3, #0
 800847e:	f43f acf3 	beq.w	8007e68 <_dtoa_r+0x90>
 8008482:	601d      	str	r5, [r3, #0]
 8008484:	e4f0      	b.n	8007e68 <_dtoa_r+0x90>
 8008486:	4657      	mov	r7, sl
 8008488:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800848c:	1e6b      	subs	r3, r5, #1
 800848e:	2a39      	cmp	r2, #57	; 0x39
 8008490:	d106      	bne.n	80084a0 <_dtoa_r+0x6c8>
 8008492:	9a06      	ldr	r2, [sp, #24]
 8008494:	429a      	cmp	r2, r3
 8008496:	d107      	bne.n	80084a8 <_dtoa_r+0x6d0>
 8008498:	2330      	movs	r3, #48	; 0x30
 800849a:	7013      	strb	r3, [r2, #0]
 800849c:	4613      	mov	r3, r2
 800849e:	3701      	adds	r7, #1
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e791      	b.n	80083cc <_dtoa_r+0x5f4>
 80084a8:	461d      	mov	r5, r3
 80084aa:	e7ed      	b.n	8008488 <_dtoa_r+0x6b0>
 80084ac:	2200      	movs	r2, #0
 80084ae:	4b99      	ldr	r3, [pc, #612]	; (8008714 <_dtoa_r+0x93c>)
 80084b0:	f7f8 f812 	bl	80004d8 <__aeabi_dmul>
 80084b4:	2200      	movs	r2, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	f7f8 fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d09e      	beq.n	8008402 <_dtoa_r+0x62a>
 80084c4:	e7cf      	b.n	8008466 <_dtoa_r+0x68e>
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	f000 8088 	beq.w	80085de <_dtoa_r+0x806>
 80084ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084d0:	2a01      	cmp	r2, #1
 80084d2:	dc6d      	bgt.n	80085b0 <_dtoa_r+0x7d8>
 80084d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	d066      	beq.n	80085a8 <_dtoa_r+0x7d0>
 80084da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084de:	464d      	mov	r5, r9
 80084e0:	9e08      	ldr	r6, [sp, #32]
 80084e2:	9a07      	ldr	r2, [sp, #28]
 80084e4:	2101      	movs	r1, #1
 80084e6:	441a      	add	r2, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	4499      	add	r9, r3
 80084ec:	9207      	str	r2, [sp, #28]
 80084ee:	f000 fb2a 	bl	8008b46 <__i2b>
 80084f2:	4607      	mov	r7, r0
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	dd0b      	ble.n	8008510 <_dtoa_r+0x738>
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd08      	ble.n	8008510 <_dtoa_r+0x738>
 80084fe:	42ab      	cmp	r3, r5
 8008500:	bfa8      	it	ge
 8008502:	462b      	movge	r3, r5
 8008504:	9a07      	ldr	r2, [sp, #28]
 8008506:	eba9 0903 	sub.w	r9, r9, r3
 800850a:	1aed      	subs	r5, r5, r3
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	b1eb      	cbz	r3, 8008550 <_dtoa_r+0x778>
 8008514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d065      	beq.n	80085e6 <_dtoa_r+0x80e>
 800851a:	b18e      	cbz	r6, 8008540 <_dtoa_r+0x768>
 800851c:	4639      	mov	r1, r7
 800851e:	4632      	mov	r2, r6
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fbaf 	bl	8008c84 <__pow5mult>
 8008526:	465a      	mov	r2, fp
 8008528:	4601      	mov	r1, r0
 800852a:	4607      	mov	r7, r0
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fb13 	bl	8008b58 <__multiply>
 8008532:	4659      	mov	r1, fp
 8008534:	900a      	str	r0, [sp, #40]	; 0x28
 8008536:	4620      	mov	r0, r4
 8008538:	f000 fa65 	bl	8008a06 <_Bfree>
 800853c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853e:	469b      	mov	fp, r3
 8008540:	9b08      	ldr	r3, [sp, #32]
 8008542:	1b9a      	subs	r2, r3, r6
 8008544:	d004      	beq.n	8008550 <_dtoa_r+0x778>
 8008546:	4659      	mov	r1, fp
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fb9b 	bl	8008c84 <__pow5mult>
 800854e:	4683      	mov	fp, r0
 8008550:	2101      	movs	r1, #1
 8008552:	4620      	mov	r0, r4
 8008554:	f000 faf7 	bl	8008b46 <__i2b>
 8008558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800855a:	4606      	mov	r6, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 81c6 	beq.w	80088ee <_dtoa_r+0xb16>
 8008562:	461a      	mov	r2, r3
 8008564:	4601      	mov	r1, r0
 8008566:	4620      	mov	r0, r4
 8008568:	f000 fb8c 	bl	8008c84 <__pow5mult>
 800856c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800856e:	4606      	mov	r6, r0
 8008570:	2b01      	cmp	r3, #1
 8008572:	dc3e      	bgt.n	80085f2 <_dtoa_r+0x81a>
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d137      	bne.n	80085ea <_dtoa_r+0x812>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008580:	2b00      	cmp	r3, #0
 8008582:	d134      	bne.n	80085ee <_dtoa_r+0x816>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800858a:	0d1b      	lsrs	r3, r3, #20
 800858c:	051b      	lsls	r3, r3, #20
 800858e:	b12b      	cbz	r3, 800859c <_dtoa_r+0x7c4>
 8008590:	9b07      	ldr	r3, [sp, #28]
 8008592:	f109 0901 	add.w	r9, r9, #1
 8008596:	3301      	adds	r3, #1
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	2301      	movs	r3, #1
 800859c:	9308      	str	r3, [sp, #32]
 800859e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d128      	bne.n	80085f6 <_dtoa_r+0x81e>
 80085a4:	2001      	movs	r0, #1
 80085a6:	e02e      	b.n	8008606 <_dtoa_r+0x82e>
 80085a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ae:	e796      	b.n	80084de <_dtoa_r+0x706>
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80085b6:	42b3      	cmp	r3, r6
 80085b8:	bfb7      	itett	lt
 80085ba:	9b08      	ldrlt	r3, [sp, #32]
 80085bc:	1b9e      	subge	r6, r3, r6
 80085be:	1af2      	sublt	r2, r6, r3
 80085c0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80085c2:	bfbf      	itttt	lt
 80085c4:	9608      	strlt	r6, [sp, #32]
 80085c6:	189b      	addlt	r3, r3, r2
 80085c8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80085ca:	2600      	movlt	r6, #0
 80085cc:	f1b8 0f00 	cmp.w	r8, #0
 80085d0:	bfb9      	ittee	lt
 80085d2:	eba9 0508 	sublt.w	r5, r9, r8
 80085d6:	2300      	movlt	r3, #0
 80085d8:	464d      	movge	r5, r9
 80085da:	4643      	movge	r3, r8
 80085dc:	e781      	b.n	80084e2 <_dtoa_r+0x70a>
 80085de:	9e08      	ldr	r6, [sp, #32]
 80085e0:	464d      	mov	r5, r9
 80085e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085e4:	e786      	b.n	80084f4 <_dtoa_r+0x71c>
 80085e6:	9a08      	ldr	r2, [sp, #32]
 80085e8:	e7ad      	b.n	8008546 <_dtoa_r+0x76e>
 80085ea:	2300      	movs	r3, #0
 80085ec:	e7d6      	b.n	800859c <_dtoa_r+0x7c4>
 80085ee:	9b02      	ldr	r3, [sp, #8]
 80085f0:	e7d4      	b.n	800859c <_dtoa_r+0x7c4>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	6933      	ldr	r3, [r6, #16]
 80085f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085fc:	6918      	ldr	r0, [r3, #16]
 80085fe:	f000 fa54 	bl	8008aaa <__hi0bits>
 8008602:	f1c0 0020 	rsb	r0, r0, #32
 8008606:	9b07      	ldr	r3, [sp, #28]
 8008608:	4418      	add	r0, r3
 800860a:	f010 001f 	ands.w	r0, r0, #31
 800860e:	d047      	beq.n	80086a0 <_dtoa_r+0x8c8>
 8008610:	f1c0 0320 	rsb	r3, r0, #32
 8008614:	2b04      	cmp	r3, #4
 8008616:	dd3b      	ble.n	8008690 <_dtoa_r+0x8b8>
 8008618:	9b07      	ldr	r3, [sp, #28]
 800861a:	f1c0 001c 	rsb	r0, r0, #28
 800861e:	4481      	add	r9, r0
 8008620:	4405      	add	r5, r0
 8008622:	4403      	add	r3, r0
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	f1b9 0f00 	cmp.w	r9, #0
 800862a:	dd05      	ble.n	8008638 <_dtoa_r+0x860>
 800862c:	4659      	mov	r1, fp
 800862e:	464a      	mov	r2, r9
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fb75 	bl	8008d20 <__lshift>
 8008636:	4683      	mov	fp, r0
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	dd05      	ble.n	800864a <_dtoa_r+0x872>
 800863e:	4631      	mov	r1, r6
 8008640:	461a      	mov	r2, r3
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fb6c 	bl	8008d20 <__lshift>
 8008648:	4606      	mov	r6, r0
 800864a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864c:	b353      	cbz	r3, 80086a4 <_dtoa_r+0x8cc>
 800864e:	4631      	mov	r1, r6
 8008650:	4658      	mov	r0, fp
 8008652:	f000 fbb9 	bl	8008dc8 <__mcmp>
 8008656:	2800      	cmp	r0, #0
 8008658:	da24      	bge.n	80086a4 <_dtoa_r+0x8cc>
 800865a:	2300      	movs	r3, #0
 800865c:	4659      	mov	r1, fp
 800865e:	220a      	movs	r2, #10
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f9e7 	bl	8008a34 <__multadd>
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800866c:	4683      	mov	fp, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8144 	beq.w	80088fc <_dtoa_r+0xb24>
 8008674:	2300      	movs	r3, #0
 8008676:	4639      	mov	r1, r7
 8008678:	220a      	movs	r2, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f000 f9da 	bl	8008a34 <__multadd>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	4607      	mov	r7, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	dc4d      	bgt.n	8008724 <_dtoa_r+0x94c>
 8008688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800868a:	2b02      	cmp	r3, #2
 800868c:	dd4a      	ble.n	8008724 <_dtoa_r+0x94c>
 800868e:	e011      	b.n	80086b4 <_dtoa_r+0x8dc>
 8008690:	d0c9      	beq.n	8008626 <_dtoa_r+0x84e>
 8008692:	9a07      	ldr	r2, [sp, #28]
 8008694:	331c      	adds	r3, #28
 8008696:	441a      	add	r2, r3
 8008698:	4499      	add	r9, r3
 800869a:	441d      	add	r5, r3
 800869c:	4613      	mov	r3, r2
 800869e:	e7c1      	b.n	8008624 <_dtoa_r+0x84c>
 80086a0:	4603      	mov	r3, r0
 80086a2:	e7f6      	b.n	8008692 <_dtoa_r+0x8ba>
 80086a4:	f1b8 0f00 	cmp.w	r8, #0
 80086a8:	dc36      	bgt.n	8008718 <_dtoa_r+0x940>
 80086aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	dd33      	ble.n	8008718 <_dtoa_r+0x940>
 80086b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	b963      	cbnz	r3, 80086d2 <_dtoa_r+0x8fa>
 80086b8:	4631      	mov	r1, r6
 80086ba:	2205      	movs	r2, #5
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 f9b9 	bl	8008a34 <__multadd>
 80086c2:	4601      	mov	r1, r0
 80086c4:	4606      	mov	r6, r0
 80086c6:	4658      	mov	r0, fp
 80086c8:	f000 fb7e 	bl	8008dc8 <__mcmp>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f73f add3 	bgt.w	8008278 <_dtoa_r+0x4a0>
 80086d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086d4:	9d06      	ldr	r5, [sp, #24]
 80086d6:	ea6f 0a03 	mvn.w	sl, r3
 80086da:	f04f 0900 	mov.w	r9, #0
 80086de:	4631      	mov	r1, r6
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f990 	bl	8008a06 <_Bfree>
 80086e6:	2f00      	cmp	r7, #0
 80086e8:	f43f aebd 	beq.w	8008466 <_dtoa_r+0x68e>
 80086ec:	f1b9 0f00 	cmp.w	r9, #0
 80086f0:	d005      	beq.n	80086fe <_dtoa_r+0x926>
 80086f2:	45b9      	cmp	r9, r7
 80086f4:	d003      	beq.n	80086fe <_dtoa_r+0x926>
 80086f6:	4649      	mov	r1, r9
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 f984 	bl	8008a06 <_Bfree>
 80086fe:	4639      	mov	r1, r7
 8008700:	4620      	mov	r0, r4
 8008702:	f000 f980 	bl	8008a06 <_Bfree>
 8008706:	e6ae      	b.n	8008466 <_dtoa_r+0x68e>
 8008708:	2600      	movs	r6, #0
 800870a:	4637      	mov	r7, r6
 800870c:	e7e1      	b.n	80086d2 <_dtoa_r+0x8fa>
 800870e:	46ba      	mov	sl, r7
 8008710:	4637      	mov	r7, r6
 8008712:	e5b1      	b.n	8008278 <_dtoa_r+0x4a0>
 8008714:	40240000 	.word	0x40240000
 8008718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871a:	f8cd 8010 	str.w	r8, [sp, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80f3 	beq.w	800890a <_dtoa_r+0xb32>
 8008724:	2d00      	cmp	r5, #0
 8008726:	dd05      	ble.n	8008734 <_dtoa_r+0x95c>
 8008728:	4639      	mov	r1, r7
 800872a:	462a      	mov	r2, r5
 800872c:	4620      	mov	r0, r4
 800872e:	f000 faf7 	bl	8008d20 <__lshift>
 8008732:	4607      	mov	r7, r0
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04c      	beq.n	80087d4 <_dtoa_r+0x9fc>
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f92e 	bl	800899e <_Balloc>
 8008742:	4605      	mov	r5, r0
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	f107 010c 	add.w	r1, r7, #12
 800874a:	3202      	adds	r2, #2
 800874c:	0092      	lsls	r2, r2, #2
 800874e:	300c      	adds	r0, #12
 8008750:	f000 f91a 	bl	8008988 <memcpy>
 8008754:	2201      	movs	r2, #1
 8008756:	4629      	mov	r1, r5
 8008758:	4620      	mov	r0, r4
 800875a:	f000 fae1 	bl	8008d20 <__lshift>
 800875e:	46b9      	mov	r9, r7
 8008760:	4607      	mov	r7, r0
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	9307      	str	r3, [sp, #28]
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	9308      	str	r3, [sp, #32]
 800876e:	4631      	mov	r1, r6
 8008770:	4658      	mov	r0, fp
 8008772:	f7ff faa1 	bl	8007cb8 <quorem>
 8008776:	4649      	mov	r1, r9
 8008778:	4605      	mov	r5, r0
 800877a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800877e:	4658      	mov	r0, fp
 8008780:	f000 fb22 	bl	8008dc8 <__mcmp>
 8008784:	463a      	mov	r2, r7
 8008786:	9002      	str	r0, [sp, #8]
 8008788:	4631      	mov	r1, r6
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fb36 	bl	8008dfc <__mdiff>
 8008790:	68c3      	ldr	r3, [r0, #12]
 8008792:	4602      	mov	r2, r0
 8008794:	bb03      	cbnz	r3, 80087d8 <_dtoa_r+0xa00>
 8008796:	4601      	mov	r1, r0
 8008798:	9009      	str	r0, [sp, #36]	; 0x24
 800879a:	4658      	mov	r0, fp
 800879c:	f000 fb14 	bl	8008dc8 <__mcmp>
 80087a0:	4603      	mov	r3, r0
 80087a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087a4:	4611      	mov	r1, r2
 80087a6:	4620      	mov	r0, r4
 80087a8:	9309      	str	r3, [sp, #36]	; 0x24
 80087aa:	f000 f92c 	bl	8008a06 <_Bfree>
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	b9a3      	cbnz	r3, 80087dc <_dtoa_r+0xa04>
 80087b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087b4:	b992      	cbnz	r2, 80087dc <_dtoa_r+0xa04>
 80087b6:	9a08      	ldr	r2, [sp, #32]
 80087b8:	b982      	cbnz	r2, 80087dc <_dtoa_r+0xa04>
 80087ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087be:	d029      	beq.n	8008814 <_dtoa_r+0xa3c>
 80087c0:	9b02      	ldr	r3, [sp, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd01      	ble.n	80087ca <_dtoa_r+0x9f2>
 80087c6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	1c5d      	adds	r5, r3, #1
 80087ce:	f883 8000 	strb.w	r8, [r3]
 80087d2:	e784      	b.n	80086de <_dtoa_r+0x906>
 80087d4:	4638      	mov	r0, r7
 80087d6:	e7c2      	b.n	800875e <_dtoa_r+0x986>
 80087d8:	2301      	movs	r3, #1
 80087da:	e7e3      	b.n	80087a4 <_dtoa_r+0x9cc>
 80087dc:	9a02      	ldr	r2, [sp, #8]
 80087de:	2a00      	cmp	r2, #0
 80087e0:	db04      	blt.n	80087ec <_dtoa_r+0xa14>
 80087e2:	d123      	bne.n	800882c <_dtoa_r+0xa54>
 80087e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087e6:	bb0a      	cbnz	r2, 800882c <_dtoa_r+0xa54>
 80087e8:	9a08      	ldr	r2, [sp, #32]
 80087ea:	b9fa      	cbnz	r2, 800882c <_dtoa_r+0xa54>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	ddec      	ble.n	80087ca <_dtoa_r+0x9f2>
 80087f0:	4659      	mov	r1, fp
 80087f2:	2201      	movs	r2, #1
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fa93 	bl	8008d20 <__lshift>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4683      	mov	fp, r0
 80087fe:	f000 fae3 	bl	8008dc8 <__mcmp>
 8008802:	2800      	cmp	r0, #0
 8008804:	dc03      	bgt.n	800880e <_dtoa_r+0xa36>
 8008806:	d1e0      	bne.n	80087ca <_dtoa_r+0x9f2>
 8008808:	f018 0f01 	tst.w	r8, #1
 800880c:	d0dd      	beq.n	80087ca <_dtoa_r+0x9f2>
 800880e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008812:	d1d8      	bne.n	80087c6 <_dtoa_r+0x9ee>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	9a07      	ldr	r2, [sp, #28]
 8008818:	1c5d      	adds	r5, r3, #1
 800881a:	2339      	movs	r3, #57	; 0x39
 800881c:	7013      	strb	r3, [r2, #0]
 800881e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008822:	1e6a      	subs	r2, r5, #1
 8008824:	2b39      	cmp	r3, #57	; 0x39
 8008826:	d04d      	beq.n	80088c4 <_dtoa_r+0xaec>
 8008828:	3301      	adds	r3, #1
 800882a:	e052      	b.n	80088d2 <_dtoa_r+0xafa>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f102 0501 	add.w	r5, r2, #1
 8008834:	dd06      	ble.n	8008844 <_dtoa_r+0xa6c>
 8008836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800883a:	d0eb      	beq.n	8008814 <_dtoa_r+0xa3c>
 800883c:	f108 0801 	add.w	r8, r8, #1
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	e7c4      	b.n	80087ce <_dtoa_r+0x9f6>
 8008844:	9b06      	ldr	r3, [sp, #24]
 8008846:	9a04      	ldr	r2, [sp, #16]
 8008848:	1aeb      	subs	r3, r5, r3
 800884a:	4293      	cmp	r3, r2
 800884c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008850:	d021      	beq.n	8008896 <_dtoa_r+0xabe>
 8008852:	4659      	mov	r1, fp
 8008854:	2300      	movs	r3, #0
 8008856:	220a      	movs	r2, #10
 8008858:	4620      	mov	r0, r4
 800885a:	f000 f8eb 	bl	8008a34 <__multadd>
 800885e:	45b9      	cmp	r9, r7
 8008860:	4683      	mov	fp, r0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	f04f 020a 	mov.w	r2, #10
 800886a:	4649      	mov	r1, r9
 800886c:	4620      	mov	r0, r4
 800886e:	d105      	bne.n	800887c <_dtoa_r+0xaa4>
 8008870:	f000 f8e0 	bl	8008a34 <__multadd>
 8008874:	4681      	mov	r9, r0
 8008876:	4607      	mov	r7, r0
 8008878:	9507      	str	r5, [sp, #28]
 800887a:	e778      	b.n	800876e <_dtoa_r+0x996>
 800887c:	f000 f8da 	bl	8008a34 <__multadd>
 8008880:	4639      	mov	r1, r7
 8008882:	4681      	mov	r9, r0
 8008884:	2300      	movs	r3, #0
 8008886:	220a      	movs	r2, #10
 8008888:	4620      	mov	r0, r4
 800888a:	f000 f8d3 	bl	8008a34 <__multadd>
 800888e:	4607      	mov	r7, r0
 8008890:	e7f2      	b.n	8008878 <_dtoa_r+0xaa0>
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	4659      	mov	r1, fp
 8008898:	2201      	movs	r2, #1
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fa40 	bl	8008d20 <__lshift>
 80088a0:	4631      	mov	r1, r6
 80088a2:	4683      	mov	fp, r0
 80088a4:	f000 fa90 	bl	8008dc8 <__mcmp>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	dcb8      	bgt.n	800881e <_dtoa_r+0xa46>
 80088ac:	d102      	bne.n	80088b4 <_dtoa_r+0xadc>
 80088ae:	f018 0f01 	tst.w	r8, #1
 80088b2:	d1b4      	bne.n	800881e <_dtoa_r+0xa46>
 80088b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088b8:	1e6a      	subs	r2, r5, #1
 80088ba:	2b30      	cmp	r3, #48	; 0x30
 80088bc:	f47f af0f 	bne.w	80086de <_dtoa_r+0x906>
 80088c0:	4615      	mov	r5, r2
 80088c2:	e7f7      	b.n	80088b4 <_dtoa_r+0xadc>
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d105      	bne.n	80088d6 <_dtoa_r+0xafe>
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	9a06      	ldr	r2, [sp, #24]
 80088ce:	f10a 0a01 	add.w	sl, sl, #1
 80088d2:	7013      	strb	r3, [r2, #0]
 80088d4:	e703      	b.n	80086de <_dtoa_r+0x906>
 80088d6:	4615      	mov	r5, r2
 80088d8:	e7a1      	b.n	800881e <_dtoa_r+0xa46>
 80088da:	4b17      	ldr	r3, [pc, #92]	; (8008938 <_dtoa_r+0xb60>)
 80088dc:	f7ff bae1 	b.w	8007ea2 <_dtoa_r+0xca>
 80088e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f47f aabb 	bne.w	8007e5e <_dtoa_r+0x86>
 80088e8:	4b14      	ldr	r3, [pc, #80]	; (800893c <_dtoa_r+0xb64>)
 80088ea:	f7ff bada 	b.w	8007ea2 <_dtoa_r+0xca>
 80088ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f77f ae3f 	ble.w	8008574 <_dtoa_r+0x79c>
 80088f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	e653      	b.n	80085a4 <_dtoa_r+0x7cc>
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dc03      	bgt.n	800890a <_dtoa_r+0xb32>
 8008902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008904:	2b02      	cmp	r3, #2
 8008906:	f73f aed5 	bgt.w	80086b4 <_dtoa_r+0x8dc>
 800890a:	9d06      	ldr	r5, [sp, #24]
 800890c:	4631      	mov	r1, r6
 800890e:	4658      	mov	r0, fp
 8008910:	f7ff f9d2 	bl	8007cb8 <quorem>
 8008914:	9b06      	ldr	r3, [sp, #24]
 8008916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800891a:	f805 8b01 	strb.w	r8, [r5], #1
 800891e:	9a04      	ldr	r2, [sp, #16]
 8008920:	1aeb      	subs	r3, r5, r3
 8008922:	429a      	cmp	r2, r3
 8008924:	ddb5      	ble.n	8008892 <_dtoa_r+0xaba>
 8008926:	4659      	mov	r1, fp
 8008928:	2300      	movs	r3, #0
 800892a:	220a      	movs	r2, #10
 800892c:	4620      	mov	r0, r4
 800892e:	f000 f881 	bl	8008a34 <__multadd>
 8008932:	4683      	mov	fp, r0
 8008934:	e7ea      	b.n	800890c <_dtoa_r+0xb34>
 8008936:	bf00      	nop
 8008938:	0800abd8 	.word	0x0800abd8
 800893c:	0800abfc 	.word	0x0800abfc

08008940 <_localeconv_r>:
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <_localeconv_r+0x14>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a18      	ldr	r0, [r3, #32]
 8008946:	4b04      	ldr	r3, [pc, #16]	; (8008958 <_localeconv_r+0x18>)
 8008948:	2800      	cmp	r0, #0
 800894a:	bf08      	it	eq
 800894c:	4618      	moveq	r0, r3
 800894e:	30f0      	adds	r0, #240	; 0xf0
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20000024 	.word	0x20000024
 8008958:	20000088 	.word	0x20000088

0800895c <malloc>:
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <malloc+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f000 bb53 	b.w	800900c <_malloc_r>
 8008966:	bf00      	nop
 8008968:	20000024 	.word	0x20000024

0800896c <memchr>:
 800896c:	b510      	push	{r4, lr}
 800896e:	b2c9      	uxtb	r1, r1
 8008970:	4402      	add	r2, r0
 8008972:	4290      	cmp	r0, r2
 8008974:	4603      	mov	r3, r0
 8008976:	d101      	bne.n	800897c <memchr+0x10>
 8008978:	2300      	movs	r3, #0
 800897a:	e003      	b.n	8008984 <memchr+0x18>
 800897c:	781c      	ldrb	r4, [r3, #0]
 800897e:	3001      	adds	r0, #1
 8008980:	428c      	cmp	r4, r1
 8008982:	d1f6      	bne.n	8008972 <memchr+0x6>
 8008984:	4618      	mov	r0, r3
 8008986:	bd10      	pop	{r4, pc}

08008988 <memcpy>:
 8008988:	b510      	push	{r4, lr}
 800898a:	1e43      	subs	r3, r0, #1
 800898c:	440a      	add	r2, r1
 800898e:	4291      	cmp	r1, r2
 8008990:	d100      	bne.n	8008994 <memcpy+0xc>
 8008992:	bd10      	pop	{r4, pc}
 8008994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800899c:	e7f7      	b.n	800898e <memcpy+0x6>

0800899e <_Balloc>:
 800899e:	b570      	push	{r4, r5, r6, lr}
 80089a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089a2:	4604      	mov	r4, r0
 80089a4:	460e      	mov	r6, r1
 80089a6:	b93d      	cbnz	r5, 80089b8 <_Balloc+0x1a>
 80089a8:	2010      	movs	r0, #16
 80089aa:	f7ff ffd7 	bl	800895c <malloc>
 80089ae:	6260      	str	r0, [r4, #36]	; 0x24
 80089b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089b4:	6005      	str	r5, [r0, #0]
 80089b6:	60c5      	str	r5, [r0, #12]
 80089b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80089ba:	68eb      	ldr	r3, [r5, #12]
 80089bc:	b183      	cbz	r3, 80089e0 <_Balloc+0x42>
 80089be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089c6:	b9b8      	cbnz	r0, 80089f8 <_Balloc+0x5a>
 80089c8:	2101      	movs	r1, #1
 80089ca:	fa01 f506 	lsl.w	r5, r1, r6
 80089ce:	1d6a      	adds	r2, r5, #5
 80089d0:	0092      	lsls	r2, r2, #2
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fabf 	bl	8008f56 <_calloc_r>
 80089d8:	b160      	cbz	r0, 80089f4 <_Balloc+0x56>
 80089da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089de:	e00e      	b.n	80089fe <_Balloc+0x60>
 80089e0:	2221      	movs	r2, #33	; 0x21
 80089e2:	2104      	movs	r1, #4
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fab6 	bl	8008f56 <_calloc_r>
 80089ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ec:	60e8      	str	r0, [r5, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e4      	bne.n	80089be <_Balloc+0x20>
 80089f4:	2000      	movs	r0, #0
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	6802      	ldr	r2, [r0, #0]
 80089fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089fe:	2300      	movs	r3, #0
 8008a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a04:	e7f7      	b.n	80089f6 <_Balloc+0x58>

08008a06 <_Bfree>:
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460d      	mov	r5, r1
 8008a0e:	b93c      	cbnz	r4, 8008a20 <_Bfree+0x1a>
 8008a10:	2010      	movs	r0, #16
 8008a12:	f7ff ffa3 	bl	800895c <malloc>
 8008a16:	6270      	str	r0, [r6, #36]	; 0x24
 8008a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a1c:	6004      	str	r4, [r0, #0]
 8008a1e:	60c4      	str	r4, [r0, #12]
 8008a20:	b13d      	cbz	r5, 8008a32 <_Bfree+0x2c>
 8008a22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a24:	686a      	ldr	r2, [r5, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a2c:	6029      	str	r1, [r5, #0]
 8008a2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a32:	bd70      	pop	{r4, r5, r6, pc}

08008a34 <__multadd>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	461f      	mov	r7, r3
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	2300      	movs	r3, #0
 8008a40:	690d      	ldr	r5, [r1, #16]
 8008a42:	f101 0c14 	add.w	ip, r1, #20
 8008a46:	f8dc 0000 	ldr.w	r0, [ip]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	b281      	uxth	r1, r0
 8008a4e:	fb02 7101 	mla	r1, r2, r1, r7
 8008a52:	0c00      	lsrs	r0, r0, #16
 8008a54:	0c0f      	lsrs	r7, r1, #16
 8008a56:	fb02 7000 	mla	r0, r2, r0, r7
 8008a5a:	b289      	uxth	r1, r1
 8008a5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a60:	429d      	cmp	r5, r3
 8008a62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a66:	f84c 1b04 	str.w	r1, [ip], #4
 8008a6a:	dcec      	bgt.n	8008a46 <__multadd+0x12>
 8008a6c:	b1d7      	cbz	r7, 8008aa4 <__multadd+0x70>
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	dc12      	bgt.n	8008a9a <__multadd+0x66>
 8008a74:	6861      	ldr	r1, [r4, #4]
 8008a76:	4630      	mov	r0, r6
 8008a78:	3101      	adds	r1, #1
 8008a7a:	f7ff ff90 	bl	800899e <_Balloc>
 8008a7e:	4680      	mov	r8, r0
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	f104 010c 	add.w	r1, r4, #12
 8008a86:	3202      	adds	r2, #2
 8008a88:	0092      	lsls	r2, r2, #2
 8008a8a:	300c      	adds	r0, #12
 8008a8c:	f7ff ff7c 	bl	8008988 <memcpy>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff ffb7 	bl	8008a06 <_Bfree>
 8008a98:	4644      	mov	r4, r8
 8008a9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a9e:	3501      	adds	r5, #1
 8008aa0:	615f      	str	r7, [r3, #20]
 8008aa2:	6125      	str	r5, [r4, #16]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008aaa <__hi0bits>:
 8008aaa:	0c02      	lsrs	r2, r0, #16
 8008aac:	0412      	lsls	r2, r2, #16
 8008aae:	4603      	mov	r3, r0
 8008ab0:	b9b2      	cbnz	r2, 8008ae0 <__hi0bits+0x36>
 8008ab2:	0403      	lsls	r3, r0, #16
 8008ab4:	2010      	movs	r0, #16
 8008ab6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008aba:	bf04      	itt	eq
 8008abc:	021b      	lsleq	r3, r3, #8
 8008abe:	3008      	addeq	r0, #8
 8008ac0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ac4:	bf04      	itt	eq
 8008ac6:	011b      	lsleq	r3, r3, #4
 8008ac8:	3004      	addeq	r0, #4
 8008aca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ace:	bf04      	itt	eq
 8008ad0:	009b      	lsleq	r3, r3, #2
 8008ad2:	3002      	addeq	r0, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	db06      	blt.n	8008ae6 <__hi0bits+0x3c>
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	d503      	bpl.n	8008ae4 <__hi0bits+0x3a>
 8008adc:	3001      	adds	r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e7e8      	b.n	8008ab6 <__hi0bits+0xc>
 8008ae4:	2020      	movs	r0, #32
 8008ae6:	4770      	bx	lr

08008ae8 <__lo0bits>:
 8008ae8:	6803      	ldr	r3, [r0, #0]
 8008aea:	4601      	mov	r1, r0
 8008aec:	f013 0207 	ands.w	r2, r3, #7
 8008af0:	d00b      	beq.n	8008b0a <__lo0bits+0x22>
 8008af2:	07da      	lsls	r2, r3, #31
 8008af4:	d423      	bmi.n	8008b3e <__lo0bits+0x56>
 8008af6:	0798      	lsls	r0, r3, #30
 8008af8:	bf49      	itett	mi
 8008afa:	085b      	lsrmi	r3, r3, #1
 8008afc:	089b      	lsrpl	r3, r3, #2
 8008afe:	2001      	movmi	r0, #1
 8008b00:	600b      	strmi	r3, [r1, #0]
 8008b02:	bf5c      	itt	pl
 8008b04:	600b      	strpl	r3, [r1, #0]
 8008b06:	2002      	movpl	r0, #2
 8008b08:	4770      	bx	lr
 8008b0a:	b298      	uxth	r0, r3
 8008b0c:	b9a8      	cbnz	r0, 8008b3a <__lo0bits+0x52>
 8008b0e:	2010      	movs	r0, #16
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b16:	bf04      	itt	eq
 8008b18:	0a1b      	lsreq	r3, r3, #8
 8008b1a:	3008      	addeq	r0, #8
 8008b1c:	071a      	lsls	r2, r3, #28
 8008b1e:	bf04      	itt	eq
 8008b20:	091b      	lsreq	r3, r3, #4
 8008b22:	3004      	addeq	r0, #4
 8008b24:	079a      	lsls	r2, r3, #30
 8008b26:	bf04      	itt	eq
 8008b28:	089b      	lsreq	r3, r3, #2
 8008b2a:	3002      	addeq	r0, #2
 8008b2c:	07da      	lsls	r2, r3, #31
 8008b2e:	d402      	bmi.n	8008b36 <__lo0bits+0x4e>
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	d006      	beq.n	8008b42 <__lo0bits+0x5a>
 8008b34:	3001      	adds	r0, #1
 8008b36:	600b      	str	r3, [r1, #0]
 8008b38:	4770      	bx	lr
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	e7e9      	b.n	8008b12 <__lo0bits+0x2a>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	4770      	bx	lr
 8008b42:	2020      	movs	r0, #32
 8008b44:	4770      	bx	lr

08008b46 <__i2b>:
 8008b46:	b510      	push	{r4, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	f7ff ff27 	bl	800899e <_Balloc>
 8008b50:	2201      	movs	r2, #1
 8008b52:	6144      	str	r4, [r0, #20]
 8008b54:	6102      	str	r2, [r0, #16]
 8008b56:	bd10      	pop	{r4, pc}

08008b58 <__multiply>:
 8008b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	690a      	ldr	r2, [r1, #16]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	4688      	mov	r8, r1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	bfbe      	ittt	lt
 8008b68:	460b      	movlt	r3, r1
 8008b6a:	46a0      	movlt	r8, r4
 8008b6c:	461c      	movlt	r4, r3
 8008b6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b7e:	eb07 0609 	add.w	r6, r7, r9
 8008b82:	42b3      	cmp	r3, r6
 8008b84:	bfb8      	it	lt
 8008b86:	3101      	addlt	r1, #1
 8008b88:	f7ff ff09 	bl	800899e <_Balloc>
 8008b8c:	f100 0514 	add.w	r5, r0, #20
 8008b90:	462b      	mov	r3, r5
 8008b92:	2200      	movs	r2, #0
 8008b94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008b98:	4573      	cmp	r3, lr
 8008b9a:	d316      	bcc.n	8008bca <__multiply+0x72>
 8008b9c:	f104 0214 	add.w	r2, r4, #20
 8008ba0:	f108 0114 	add.w	r1, r8, #20
 8008ba4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008ba8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	9b00      	ldr	r3, [sp, #0]
 8008bb0:	9201      	str	r2, [sp, #4]
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d80c      	bhi.n	8008bd0 <__multiply+0x78>
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	dd03      	ble.n	8008bc2 <__multiply+0x6a>
 8008bba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d05d      	beq.n	8008c7e <__multiply+0x126>
 8008bc2:	6106      	str	r6, [r0, #16]
 8008bc4:	b003      	add	sp, #12
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	f843 2b04 	str.w	r2, [r3], #4
 8008bce:	e7e3      	b.n	8008b98 <__multiply+0x40>
 8008bd0:	f8b2 b000 	ldrh.w	fp, [r2]
 8008bd4:	f1bb 0f00 	cmp.w	fp, #0
 8008bd8:	d023      	beq.n	8008c22 <__multiply+0xca>
 8008bda:	4689      	mov	r9, r1
 8008bdc:	46ac      	mov	ip, r5
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	f859 4b04 	ldr.w	r4, [r9], #4
 8008be6:	f8dc a000 	ldr.w	sl, [ip]
 8008bea:	b2a3      	uxth	r3, r4
 8008bec:	fa1f fa8a 	uxth.w	sl, sl
 8008bf0:	fb0b a303 	mla	r3, fp, r3, sl
 8008bf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bf8:	f8dc 4000 	ldr.w	r4, [ip]
 8008bfc:	4443      	add	r3, r8
 8008bfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c02:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c06:	46e2      	mov	sl, ip
 8008c08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c12:	454f      	cmp	r7, r9
 8008c14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c18:	f84a 3b04 	str.w	r3, [sl], #4
 8008c1c:	d82b      	bhi.n	8008c76 <__multiply+0x11e>
 8008c1e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	3204      	adds	r2, #4
 8008c26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c2a:	f1ba 0f00 	cmp.w	sl, #0
 8008c2e:	d020      	beq.n	8008c72 <__multiply+0x11a>
 8008c30:	4689      	mov	r9, r1
 8008c32:	46a8      	mov	r8, r5
 8008c34:	f04f 0b00 	mov.w	fp, #0
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c48:	46c4      	mov	ip, r8
 8008c4a:	445c      	add	r4, fp
 8008c4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c50:	f84c 3b04 	str.w	r3, [ip], #4
 8008c54:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	fb0a b303 	mla	r3, sl, r3, fp
 8008c62:	454f      	cmp	r7, r9
 8008c64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008c68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008c6c:	d805      	bhi.n	8008c7a <__multiply+0x122>
 8008c6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c72:	3504      	adds	r5, #4
 8008c74:	e79b      	b.n	8008bae <__multiply+0x56>
 8008c76:	46d4      	mov	ip, sl
 8008c78:	e7b3      	b.n	8008be2 <__multiply+0x8a>
 8008c7a:	46e0      	mov	r8, ip
 8008c7c:	e7dd      	b.n	8008c3a <__multiply+0xe2>
 8008c7e:	3e01      	subs	r6, #1
 8008c80:	e799      	b.n	8008bb6 <__multiply+0x5e>
	...

08008c84 <__pow5mult>:
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	4615      	mov	r5, r2
 8008c8a:	f012 0203 	ands.w	r2, r2, #3
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	d007      	beq.n	8008ca4 <__pow5mult+0x20>
 8008c94:	4c21      	ldr	r4, [pc, #132]	; (8008d1c <__pow5mult+0x98>)
 8008c96:	3a01      	subs	r2, #1
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c9e:	f7ff fec9 	bl	8008a34 <__multadd>
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	10ad      	asrs	r5, r5, #2
 8008ca6:	d035      	beq.n	8008d14 <__pow5mult+0x90>
 8008ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008caa:	b93c      	cbnz	r4, 8008cbc <__pow5mult+0x38>
 8008cac:	2010      	movs	r0, #16
 8008cae:	f7ff fe55 	bl	800895c <malloc>
 8008cb2:	6270      	str	r0, [r6, #36]	; 0x24
 8008cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cb8:	6004      	str	r4, [r0, #0]
 8008cba:	60c4      	str	r4, [r0, #12]
 8008cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cc4:	b94c      	cbnz	r4, 8008cda <__pow5mult+0x56>
 8008cc6:	f240 2171 	movw	r1, #625	; 0x271
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff ff3b 	bl	8008b46 <__i2b>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cd8:	6003      	str	r3, [r0, #0]
 8008cda:	f04f 0800 	mov.w	r8, #0
 8008cde:	07eb      	lsls	r3, r5, #31
 8008ce0:	d50a      	bpl.n	8008cf8 <__pow5mult+0x74>
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ff36 	bl	8008b58 <__multiply>
 8008cec:	4681      	mov	r9, r0
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff fe88 	bl	8008a06 <_Bfree>
 8008cf6:	464f      	mov	r7, r9
 8008cf8:	106d      	asrs	r5, r5, #1
 8008cfa:	d00b      	beq.n	8008d14 <__pow5mult+0x90>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	b938      	cbnz	r0, 8008d10 <__pow5mult+0x8c>
 8008d00:	4622      	mov	r2, r4
 8008d02:	4621      	mov	r1, r4
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff ff27 	bl	8008b58 <__multiply>
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	f8c0 8000 	str.w	r8, [r0]
 8008d10:	4604      	mov	r4, r0
 8008d12:	e7e4      	b.n	8008cde <__pow5mult+0x5a>
 8008d14:	4638      	mov	r0, r7
 8008d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1a:	bf00      	nop
 8008d1c:	0800ad00 	.word	0x0800ad00

08008d20 <__lshift>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	4607      	mov	r7, r0
 8008d28:	4616      	mov	r6, r2
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d30:	eb0a 0903 	add.w	r9, sl, r3
 8008d34:	6849      	ldr	r1, [r1, #4]
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	f109 0501 	add.w	r5, r9, #1
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	db32      	blt.n	8008da6 <__lshift+0x86>
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff fe2c 	bl	800899e <_Balloc>
 8008d46:	2300      	movs	r3, #0
 8008d48:	4680      	mov	r8, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f100 0114 	add.w	r1, r0, #20
 8008d50:	4553      	cmp	r3, sl
 8008d52:	db2b      	blt.n	8008dac <__lshift+0x8c>
 8008d54:	6920      	ldr	r0, [r4, #16]
 8008d56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d5a:	f104 0314 	add.w	r3, r4, #20
 8008d5e:	f016 021f 	ands.w	r2, r6, #31
 8008d62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d6a:	d025      	beq.n	8008db8 <__lshift+0x98>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f1c2 0e20 	rsb	lr, r2, #32
 8008d72:	468a      	mov	sl, r1
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	4096      	lsls	r6, r2
 8008d78:	4330      	orrs	r0, r6
 8008d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008d82:	459c      	cmp	ip, r3
 8008d84:	fa20 f00e 	lsr.w	r0, r0, lr
 8008d88:	d814      	bhi.n	8008db4 <__lshift+0x94>
 8008d8a:	6048      	str	r0, [r1, #4]
 8008d8c:	b108      	cbz	r0, 8008d92 <__lshift+0x72>
 8008d8e:	f109 0502 	add.w	r5, r9, #2
 8008d92:	3d01      	subs	r5, #1
 8008d94:	4638      	mov	r0, r7
 8008d96:	f8c8 5010 	str.w	r5, [r8, #16]
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	f7ff fe33 	bl	8008a06 <_Bfree>
 8008da0:	4640      	mov	r0, r8
 8008da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da6:	3101      	adds	r1, #1
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	e7c7      	b.n	8008d3c <__lshift+0x1c>
 8008dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008db0:	3301      	adds	r3, #1
 8008db2:	e7cd      	b.n	8008d50 <__lshift+0x30>
 8008db4:	4651      	mov	r1, sl
 8008db6:	e7dc      	b.n	8008d72 <__lshift+0x52>
 8008db8:	3904      	subs	r1, #4
 8008dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbe:	459c      	cmp	ip, r3
 8008dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dc4:	d8f9      	bhi.n	8008dba <__lshift+0x9a>
 8008dc6:	e7e4      	b.n	8008d92 <__lshift+0x72>

08008dc8 <__mcmp>:
 8008dc8:	6903      	ldr	r3, [r0, #16]
 8008dca:	690a      	ldr	r2, [r1, #16]
 8008dcc:	b530      	push	{r4, r5, lr}
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	d10c      	bne.n	8008dec <__mcmp+0x24>
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	3014      	adds	r0, #20
 8008dd6:	3114      	adds	r1, #20
 8008dd8:	1884      	adds	r4, r0, r2
 8008dda:	4411      	add	r1, r2
 8008ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008de4:	4295      	cmp	r5, r2
 8008de6:	d003      	beq.n	8008df0 <__mcmp+0x28>
 8008de8:	d305      	bcc.n	8008df6 <__mcmp+0x2e>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4618      	mov	r0, r3
 8008dee:	bd30      	pop	{r4, r5, pc}
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	d3f3      	bcc.n	8008ddc <__mcmp+0x14>
 8008df4:	e7fa      	b.n	8008dec <__mcmp+0x24>
 8008df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dfa:	e7f7      	b.n	8008dec <__mcmp+0x24>

08008dfc <__mdiff>:
 8008dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e00:	460d      	mov	r5, r1
 8008e02:	4607      	mov	r7, r0
 8008e04:	4611      	mov	r1, r2
 8008e06:	4628      	mov	r0, r5
 8008e08:	4614      	mov	r4, r2
 8008e0a:	f7ff ffdd 	bl	8008dc8 <__mcmp>
 8008e0e:	1e06      	subs	r6, r0, #0
 8008e10:	d108      	bne.n	8008e24 <__mdiff+0x28>
 8008e12:	4631      	mov	r1, r6
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff fdc2 	bl	800899e <_Balloc>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	bfa4      	itt	ge
 8008e26:	4623      	movge	r3, r4
 8008e28:	462c      	movge	r4, r5
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	bfa6      	itte	ge
 8008e30:	461d      	movge	r5, r3
 8008e32:	2600      	movge	r6, #0
 8008e34:	2601      	movlt	r6, #1
 8008e36:	f7ff fdb2 	bl	800899e <_Balloc>
 8008e3a:	f04f 0e00 	mov.w	lr, #0
 8008e3e:	60c6      	str	r6, [r0, #12]
 8008e40:	692b      	ldr	r3, [r5, #16]
 8008e42:	6926      	ldr	r6, [r4, #16]
 8008e44:	f104 0214 	add.w	r2, r4, #20
 8008e48:	f105 0914 	add.w	r9, r5, #20
 8008e4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008e54:	f100 0114 	add.w	r1, r0, #20
 8008e58:	f852 ab04 	ldr.w	sl, [r2], #4
 8008e5c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008e60:	fa1f f38a 	uxth.w	r3, sl
 8008e64:	4473      	add	r3, lr
 8008e66:	b2ac      	uxth	r4, r5
 8008e68:	1b1b      	subs	r3, r3, r4
 8008e6a:	0c2c      	lsrs	r4, r5, #16
 8008e6c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008e70:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008e7a:	45c8      	cmp	r8, r9
 8008e7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008e80:	4694      	mov	ip, r2
 8008e82:	f841 4b04 	str.w	r4, [r1], #4
 8008e86:	d8e7      	bhi.n	8008e58 <__mdiff+0x5c>
 8008e88:	45bc      	cmp	ip, r7
 8008e8a:	d304      	bcc.n	8008e96 <__mdiff+0x9a>
 8008e8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008e90:	b183      	cbz	r3, 8008eb4 <__mdiff+0xb8>
 8008e92:	6106      	str	r6, [r0, #16]
 8008e94:	e7c4      	b.n	8008e20 <__mdiff+0x24>
 8008e96:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008e9a:	b2a2      	uxth	r2, r4
 8008e9c:	4472      	add	r2, lr
 8008e9e:	1413      	asrs	r3, r2, #16
 8008ea0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008eaa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008eae:	f841 2b04 	str.w	r2, [r1], #4
 8008eb2:	e7e9      	b.n	8008e88 <__mdiff+0x8c>
 8008eb4:	3e01      	subs	r6, #1
 8008eb6:	e7e9      	b.n	8008e8c <__mdiff+0x90>

08008eb8 <__d2b>:
 8008eb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ebc:	461c      	mov	r4, r3
 8008ebe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	4690      	mov	r8, r2
 8008ec6:	f7ff fd6a 	bl	800899e <_Balloc>
 8008eca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008ece:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	bb34      	cbnz	r4, 8008f24 <__d2b+0x6c>
 8008ed6:	9201      	str	r2, [sp, #4]
 8008ed8:	f1b8 0200 	subs.w	r2, r8, #0
 8008edc:	d027      	beq.n	8008f2e <__d2b+0x76>
 8008ede:	a802      	add	r0, sp, #8
 8008ee0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008ee4:	f7ff fe00 	bl	8008ae8 <__lo0bits>
 8008ee8:	9900      	ldr	r1, [sp, #0]
 8008eea:	b1f0      	cbz	r0, 8008f2a <__d2b+0x72>
 8008eec:	9a01      	ldr	r2, [sp, #4]
 8008eee:	f1c0 0320 	rsb	r3, r0, #32
 8008ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	40c2      	lsrs	r2, r0
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	9201      	str	r2, [sp, #4]
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bf14      	ite	ne
 8008f04:	2102      	movne	r1, #2
 8008f06:	2101      	moveq	r1, #1
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	6139      	str	r1, [r7, #16]
 8008f0c:	b1c4      	cbz	r4, 8008f40 <__d2b+0x88>
 8008f0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f12:	4404      	add	r4, r0
 8008f14:	6034      	str	r4, [r6, #0]
 8008f16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f1a:	6028      	str	r0, [r5, #0]
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	b002      	add	sp, #8
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f28:	e7d5      	b.n	8008ed6 <__d2b+0x1e>
 8008f2a:	6179      	str	r1, [r7, #20]
 8008f2c:	e7e7      	b.n	8008efe <__d2b+0x46>
 8008f2e:	a801      	add	r0, sp, #4
 8008f30:	f7ff fdda 	bl	8008ae8 <__lo0bits>
 8008f34:	2101      	movs	r1, #1
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	6139      	str	r1, [r7, #16]
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	3020      	adds	r0, #32
 8008f3e:	e7e5      	b.n	8008f0c <__d2b+0x54>
 8008f40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f44:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	6918      	ldr	r0, [r3, #16]
 8008f4c:	f7ff fdad 	bl	8008aaa <__hi0bits>
 8008f50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f54:	e7e1      	b.n	8008f1a <__d2b+0x62>

08008f56 <_calloc_r>:
 8008f56:	b538      	push	{r3, r4, r5, lr}
 8008f58:	fb02 f401 	mul.w	r4, r2, r1
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f000 f855 	bl	800900c <_malloc_r>
 8008f62:	4605      	mov	r5, r0
 8008f64:	b118      	cbz	r0, 8008f6e <_calloc_r+0x18>
 8008f66:	4622      	mov	r2, r4
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f7fe fa2d 	bl	80073c8 <memset>
 8008f6e:	4628      	mov	r0, r5
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
	...

08008f74 <_free_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4605      	mov	r5, r0
 8008f78:	2900      	cmp	r1, #0
 8008f7a:	d043      	beq.n	8009004 <_free_r+0x90>
 8008f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f80:	1f0c      	subs	r4, r1, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfb8      	it	lt
 8008f86:	18e4      	addlt	r4, r4, r3
 8008f88:	f000 fa27 	bl	80093da <__malloc_lock>
 8008f8c:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <_free_r+0x94>)
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	4610      	mov	r0, r2
 8008f92:	b933      	cbnz	r3, 8008fa2 <_free_r+0x2e>
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	6014      	str	r4, [r2, #0]
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f9e:	f000 ba1d 	b.w	80093dc <__malloc_unlock>
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	d90b      	bls.n	8008fbe <_free_r+0x4a>
 8008fa6:	6821      	ldr	r1, [r4, #0]
 8008fa8:	1862      	adds	r2, r4, r1
 8008faa:	4293      	cmp	r3, r2
 8008fac:	bf01      	itttt	eq
 8008fae:	681a      	ldreq	r2, [r3, #0]
 8008fb0:	685b      	ldreq	r3, [r3, #4]
 8008fb2:	1852      	addeq	r2, r2, r1
 8008fb4:	6022      	streq	r2, [r4, #0]
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	6004      	str	r4, [r0, #0]
 8008fba:	e7ed      	b.n	8008f98 <_free_r+0x24>
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_free_r+0x52>
 8008fc2:	42a2      	cmp	r2, r4
 8008fc4:	d9fa      	bls.n	8008fbc <_free_r+0x48>
 8008fc6:	6819      	ldr	r1, [r3, #0]
 8008fc8:	1858      	adds	r0, r3, r1
 8008fca:	42a0      	cmp	r0, r4
 8008fcc:	d10b      	bne.n	8008fe6 <_free_r+0x72>
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	4401      	add	r1, r0
 8008fd2:	1858      	adds	r0, r3, r1
 8008fd4:	4282      	cmp	r2, r0
 8008fd6:	6019      	str	r1, [r3, #0]
 8008fd8:	d1de      	bne.n	8008f98 <_free_r+0x24>
 8008fda:	6810      	ldr	r0, [r2, #0]
 8008fdc:	6852      	ldr	r2, [r2, #4]
 8008fde:	4401      	add	r1, r0
 8008fe0:	6019      	str	r1, [r3, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
 8008fe4:	e7d8      	b.n	8008f98 <_free_r+0x24>
 8008fe6:	d902      	bls.n	8008fee <_free_r+0x7a>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	e7d4      	b.n	8008f98 <_free_r+0x24>
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	1821      	adds	r1, r4, r0
 8008ff2:	428a      	cmp	r2, r1
 8008ff4:	bf01      	itttt	eq
 8008ff6:	6811      	ldreq	r1, [r2, #0]
 8008ff8:	6852      	ldreq	r2, [r2, #4]
 8008ffa:	1809      	addeq	r1, r1, r0
 8008ffc:	6021      	streq	r1, [r4, #0]
 8008ffe:	6062      	str	r2, [r4, #4]
 8009000:	605c      	str	r4, [r3, #4]
 8009002:	e7c9      	b.n	8008f98 <_free_r+0x24>
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	bf00      	nop
 8009008:	2000027c 	.word	0x2000027c

0800900c <_malloc_r>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	1ccd      	adds	r5, r1, #3
 8009010:	f025 0503 	bic.w	r5, r5, #3
 8009014:	3508      	adds	r5, #8
 8009016:	2d0c      	cmp	r5, #12
 8009018:	bf38      	it	cc
 800901a:	250c      	movcc	r5, #12
 800901c:	2d00      	cmp	r5, #0
 800901e:	4606      	mov	r6, r0
 8009020:	db01      	blt.n	8009026 <_malloc_r+0x1a>
 8009022:	42a9      	cmp	r1, r5
 8009024:	d903      	bls.n	800902e <_malloc_r+0x22>
 8009026:	230c      	movs	r3, #12
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	2000      	movs	r0, #0
 800902c:	bd70      	pop	{r4, r5, r6, pc}
 800902e:	f000 f9d4 	bl	80093da <__malloc_lock>
 8009032:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <_malloc_r+0xac>)
 8009034:	6814      	ldr	r4, [r2, #0]
 8009036:	4621      	mov	r1, r4
 8009038:	b991      	cbnz	r1, 8009060 <_malloc_r+0x54>
 800903a:	4c20      	ldr	r4, [pc, #128]	; (80090bc <_malloc_r+0xb0>)
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	b91b      	cbnz	r3, 8009048 <_malloc_r+0x3c>
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f98f 	bl	8009364 <_sbrk_r>
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	4629      	mov	r1, r5
 800904a:	4630      	mov	r0, r6
 800904c:	f000 f98a 	bl	8009364 <_sbrk_r>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d124      	bne.n	800909e <_malloc_r+0x92>
 8009054:	230c      	movs	r3, #12
 8009056:	4630      	mov	r0, r6
 8009058:	6033      	str	r3, [r6, #0]
 800905a:	f000 f9bf 	bl	80093dc <__malloc_unlock>
 800905e:	e7e4      	b.n	800902a <_malloc_r+0x1e>
 8009060:	680b      	ldr	r3, [r1, #0]
 8009062:	1b5b      	subs	r3, r3, r5
 8009064:	d418      	bmi.n	8009098 <_malloc_r+0x8c>
 8009066:	2b0b      	cmp	r3, #11
 8009068:	d90f      	bls.n	800908a <_malloc_r+0x7e>
 800906a:	600b      	str	r3, [r1, #0]
 800906c:	18cc      	adds	r4, r1, r3
 800906e:	50cd      	str	r5, [r1, r3]
 8009070:	4630      	mov	r0, r6
 8009072:	f000 f9b3 	bl	80093dc <__malloc_unlock>
 8009076:	f104 000b 	add.w	r0, r4, #11
 800907a:	1d23      	adds	r3, r4, #4
 800907c:	f020 0007 	bic.w	r0, r0, #7
 8009080:	1ac3      	subs	r3, r0, r3
 8009082:	d0d3      	beq.n	800902c <_malloc_r+0x20>
 8009084:	425a      	negs	r2, r3
 8009086:	50e2      	str	r2, [r4, r3]
 8009088:	e7d0      	b.n	800902c <_malloc_r+0x20>
 800908a:	684b      	ldr	r3, [r1, #4]
 800908c:	428c      	cmp	r4, r1
 800908e:	bf16      	itet	ne
 8009090:	6063      	strne	r3, [r4, #4]
 8009092:	6013      	streq	r3, [r2, #0]
 8009094:	460c      	movne	r4, r1
 8009096:	e7eb      	b.n	8009070 <_malloc_r+0x64>
 8009098:	460c      	mov	r4, r1
 800909a:	6849      	ldr	r1, [r1, #4]
 800909c:	e7cc      	b.n	8009038 <_malloc_r+0x2c>
 800909e:	1cc4      	adds	r4, r0, #3
 80090a0:	f024 0403 	bic.w	r4, r4, #3
 80090a4:	42a0      	cmp	r0, r4
 80090a6:	d005      	beq.n	80090b4 <_malloc_r+0xa8>
 80090a8:	1a21      	subs	r1, r4, r0
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 f95a 	bl	8009364 <_sbrk_r>
 80090b0:	3001      	adds	r0, #1
 80090b2:	d0cf      	beq.n	8009054 <_malloc_r+0x48>
 80090b4:	6025      	str	r5, [r4, #0]
 80090b6:	e7db      	b.n	8009070 <_malloc_r+0x64>
 80090b8:	2000027c 	.word	0x2000027c
 80090bc:	20000280 	.word	0x20000280

080090c0 <__ssputs_r>:
 80090c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	688e      	ldr	r6, [r1, #8]
 80090c6:	4682      	mov	sl, r0
 80090c8:	429e      	cmp	r6, r3
 80090ca:	460c      	mov	r4, r1
 80090cc:	4690      	mov	r8, r2
 80090ce:	4699      	mov	r9, r3
 80090d0:	d837      	bhi.n	8009142 <__ssputs_r+0x82>
 80090d2:	898a      	ldrh	r2, [r1, #12]
 80090d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090d8:	d031      	beq.n	800913e <__ssputs_r+0x7e>
 80090da:	2302      	movs	r3, #2
 80090dc:	6825      	ldr	r5, [r4, #0]
 80090de:	6909      	ldr	r1, [r1, #16]
 80090e0:	1a6f      	subs	r7, r5, r1
 80090e2:	6965      	ldr	r5, [r4, #20]
 80090e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80090ec:	f109 0301 	add.w	r3, r9, #1
 80090f0:	443b      	add	r3, r7
 80090f2:	429d      	cmp	r5, r3
 80090f4:	bf38      	it	cc
 80090f6:	461d      	movcc	r5, r3
 80090f8:	0553      	lsls	r3, r2, #21
 80090fa:	d530      	bpl.n	800915e <__ssputs_r+0x9e>
 80090fc:	4629      	mov	r1, r5
 80090fe:	f7ff ff85 	bl	800900c <_malloc_r>
 8009102:	4606      	mov	r6, r0
 8009104:	b950      	cbnz	r0, 800911c <__ssputs_r+0x5c>
 8009106:	230c      	movs	r3, #12
 8009108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800910c:	f8ca 3000 	str.w	r3, [sl]
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911c:	463a      	mov	r2, r7
 800911e:	6921      	ldr	r1, [r4, #16]
 8009120:	f7ff fc32 	bl	8008988 <memcpy>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800912a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	6126      	str	r6, [r4, #16]
 8009132:	443e      	add	r6, r7
 8009134:	6026      	str	r6, [r4, #0]
 8009136:	464e      	mov	r6, r9
 8009138:	6165      	str	r5, [r4, #20]
 800913a:	1bed      	subs	r5, r5, r7
 800913c:	60a5      	str	r5, [r4, #8]
 800913e:	454e      	cmp	r6, r9
 8009140:	d900      	bls.n	8009144 <__ssputs_r+0x84>
 8009142:	464e      	mov	r6, r9
 8009144:	4632      	mov	r2, r6
 8009146:	4641      	mov	r1, r8
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	f000 f92d 	bl	80093a8 <memmove>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	2000      	movs	r0, #0
 8009152:	1b9b      	subs	r3, r3, r6
 8009154:	60a3      	str	r3, [r4, #8]
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	441e      	add	r6, r3
 800915a:	6026      	str	r6, [r4, #0]
 800915c:	e7dc      	b.n	8009118 <__ssputs_r+0x58>
 800915e:	462a      	mov	r2, r5
 8009160:	f000 f93d 	bl	80093de <_realloc_r>
 8009164:	4606      	mov	r6, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	d1e2      	bne.n	8009130 <__ssputs_r+0x70>
 800916a:	6921      	ldr	r1, [r4, #16]
 800916c:	4650      	mov	r0, sl
 800916e:	f7ff ff01 	bl	8008f74 <_free_r>
 8009172:	e7c8      	b.n	8009106 <__ssputs_r+0x46>

08009174 <_svfiprintf_r>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	461d      	mov	r5, r3
 800917a:	898b      	ldrh	r3, [r1, #12]
 800917c:	b09d      	sub	sp, #116	; 0x74
 800917e:	061f      	lsls	r7, r3, #24
 8009180:	4680      	mov	r8, r0
 8009182:	460c      	mov	r4, r1
 8009184:	4616      	mov	r6, r2
 8009186:	d50f      	bpl.n	80091a8 <_svfiprintf_r+0x34>
 8009188:	690b      	ldr	r3, [r1, #16]
 800918a:	b96b      	cbnz	r3, 80091a8 <_svfiprintf_r+0x34>
 800918c:	2140      	movs	r1, #64	; 0x40
 800918e:	f7ff ff3d 	bl	800900c <_malloc_r>
 8009192:	6020      	str	r0, [r4, #0]
 8009194:	6120      	str	r0, [r4, #16]
 8009196:	b928      	cbnz	r0, 80091a4 <_svfiprintf_r+0x30>
 8009198:	230c      	movs	r3, #12
 800919a:	f8c8 3000 	str.w	r3, [r8]
 800919e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a2:	e0c8      	b.n	8009336 <_svfiprintf_r+0x1c2>
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	6163      	str	r3, [r4, #20]
 80091a8:	2300      	movs	r3, #0
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	2320      	movs	r3, #32
 80091ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b2:	2330      	movs	r3, #48	; 0x30
 80091b4:	f04f 0b01 	mov.w	fp, #1
 80091b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091bc:	9503      	str	r5, [sp, #12]
 80091be:	4637      	mov	r7, r6
 80091c0:	463d      	mov	r5, r7
 80091c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091c6:	b10b      	cbz	r3, 80091cc <_svfiprintf_r+0x58>
 80091c8:	2b25      	cmp	r3, #37	; 0x25
 80091ca:	d13e      	bne.n	800924a <_svfiprintf_r+0xd6>
 80091cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80091d0:	d00b      	beq.n	80091ea <_svfiprintf_r+0x76>
 80091d2:	4653      	mov	r3, sl
 80091d4:	4632      	mov	r2, r6
 80091d6:	4621      	mov	r1, r4
 80091d8:	4640      	mov	r0, r8
 80091da:	f7ff ff71 	bl	80090c0 <__ssputs_r>
 80091de:	3001      	adds	r0, #1
 80091e0:	f000 80a4 	beq.w	800932c <_svfiprintf_r+0x1b8>
 80091e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e6:	4453      	add	r3, sl
 80091e8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ea:	783b      	ldrb	r3, [r7, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 809d 	beq.w	800932c <_svfiprintf_r+0x1b8>
 80091f2:	2300      	movs	r3, #0
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009204:	931a      	str	r3, [sp, #104]	; 0x68
 8009206:	462f      	mov	r7, r5
 8009208:	2205      	movs	r2, #5
 800920a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800920e:	4850      	ldr	r0, [pc, #320]	; (8009350 <_svfiprintf_r+0x1dc>)
 8009210:	f7ff fbac 	bl	800896c <memchr>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	b9d0      	cbnz	r0, 800924e <_svfiprintf_r+0xda>
 8009218:	06d9      	lsls	r1, r3, #27
 800921a:	bf44      	itt	mi
 800921c:	2220      	movmi	r2, #32
 800921e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009222:	071a      	lsls	r2, r3, #28
 8009224:	bf44      	itt	mi
 8009226:	222b      	movmi	r2, #43	; 0x2b
 8009228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800922c:	782a      	ldrb	r2, [r5, #0]
 800922e:	2a2a      	cmp	r2, #42	; 0x2a
 8009230:	d015      	beq.n	800925e <_svfiprintf_r+0xea>
 8009232:	462f      	mov	r7, r5
 8009234:	2000      	movs	r0, #0
 8009236:	250a      	movs	r5, #10
 8009238:	9a07      	ldr	r2, [sp, #28]
 800923a:	4639      	mov	r1, r7
 800923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009240:	3b30      	subs	r3, #48	; 0x30
 8009242:	2b09      	cmp	r3, #9
 8009244:	d94d      	bls.n	80092e2 <_svfiprintf_r+0x16e>
 8009246:	b1b8      	cbz	r0, 8009278 <_svfiprintf_r+0x104>
 8009248:	e00f      	b.n	800926a <_svfiprintf_r+0xf6>
 800924a:	462f      	mov	r7, r5
 800924c:	e7b8      	b.n	80091c0 <_svfiprintf_r+0x4c>
 800924e:	4a40      	ldr	r2, [pc, #256]	; (8009350 <_svfiprintf_r+0x1dc>)
 8009250:	463d      	mov	r5, r7
 8009252:	1a80      	subs	r0, r0, r2
 8009254:	fa0b f000 	lsl.w	r0, fp, r0
 8009258:	4318      	orrs	r0, r3
 800925a:	9004      	str	r0, [sp, #16]
 800925c:	e7d3      	b.n	8009206 <_svfiprintf_r+0x92>
 800925e:	9a03      	ldr	r2, [sp, #12]
 8009260:	1d11      	adds	r1, r2, #4
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	9103      	str	r1, [sp, #12]
 8009266:	2a00      	cmp	r2, #0
 8009268:	db01      	blt.n	800926e <_svfiprintf_r+0xfa>
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	e004      	b.n	8009278 <_svfiprintf_r+0x104>
 800926e:	4252      	negs	r2, r2
 8009270:	f043 0302 	orr.w	r3, r3, #2
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	783b      	ldrb	r3, [r7, #0]
 800927a:	2b2e      	cmp	r3, #46	; 0x2e
 800927c:	d10c      	bne.n	8009298 <_svfiprintf_r+0x124>
 800927e:	787b      	ldrb	r3, [r7, #1]
 8009280:	2b2a      	cmp	r3, #42	; 0x2a
 8009282:	d133      	bne.n	80092ec <_svfiprintf_r+0x178>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	3702      	adds	r7, #2
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9203      	str	r2, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009296:	9305      	str	r3, [sp, #20]
 8009298:	4d2e      	ldr	r5, [pc, #184]	; (8009354 <_svfiprintf_r+0x1e0>)
 800929a:	2203      	movs	r2, #3
 800929c:	7839      	ldrb	r1, [r7, #0]
 800929e:	4628      	mov	r0, r5
 80092a0:	f7ff fb64 	bl	800896c <memchr>
 80092a4:	b138      	cbz	r0, 80092b6 <_svfiprintf_r+0x142>
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	1b40      	subs	r0, r0, r5
 80092aa:	fa03 f000 	lsl.w	r0, r3, r0
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	3701      	adds	r7, #1
 80092b2:	4303      	orrs	r3, r0
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	7839      	ldrb	r1, [r7, #0]
 80092b8:	2206      	movs	r2, #6
 80092ba:	4827      	ldr	r0, [pc, #156]	; (8009358 <_svfiprintf_r+0x1e4>)
 80092bc:	1c7e      	adds	r6, r7, #1
 80092be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c2:	f7ff fb53 	bl	800896c <memchr>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d038      	beq.n	800933c <_svfiprintf_r+0x1c8>
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <_svfiprintf_r+0x1e8>)
 80092cc:	bb13      	cbnz	r3, 8009314 <_svfiprintf_r+0x1a0>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	3307      	adds	r3, #7
 80092d2:	f023 0307 	bic.w	r3, r3, #7
 80092d6:	3308      	adds	r3, #8
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092dc:	444b      	add	r3, r9
 80092de:	9309      	str	r3, [sp, #36]	; 0x24
 80092e0:	e76d      	b.n	80091be <_svfiprintf_r+0x4a>
 80092e2:	fb05 3202 	mla	r2, r5, r2, r3
 80092e6:	2001      	movs	r0, #1
 80092e8:	460f      	mov	r7, r1
 80092ea:	e7a6      	b.n	800923a <_svfiprintf_r+0xc6>
 80092ec:	2300      	movs	r3, #0
 80092ee:	250a      	movs	r5, #10
 80092f0:	4619      	mov	r1, r3
 80092f2:	3701      	adds	r7, #1
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	4638      	mov	r0, r7
 80092f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fc:	3a30      	subs	r2, #48	; 0x30
 80092fe:	2a09      	cmp	r2, #9
 8009300:	d903      	bls.n	800930a <_svfiprintf_r+0x196>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0c8      	beq.n	8009298 <_svfiprintf_r+0x124>
 8009306:	9105      	str	r1, [sp, #20]
 8009308:	e7c6      	b.n	8009298 <_svfiprintf_r+0x124>
 800930a:	fb05 2101 	mla	r1, r5, r1, r2
 800930e:	2301      	movs	r3, #1
 8009310:	4607      	mov	r7, r0
 8009312:	e7f0      	b.n	80092f6 <_svfiprintf_r+0x182>
 8009314:	ab03      	add	r3, sp, #12
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	4622      	mov	r2, r4
 800931a:	4b11      	ldr	r3, [pc, #68]	; (8009360 <_svfiprintf_r+0x1ec>)
 800931c:	a904      	add	r1, sp, #16
 800931e:	4640      	mov	r0, r8
 8009320:	f7fe f8ec 	bl	80074fc <_printf_float>
 8009324:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009328:	4681      	mov	r9, r0
 800932a:	d1d6      	bne.n	80092da <_svfiprintf_r+0x166>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	065b      	lsls	r3, r3, #25
 8009330:	f53f af35 	bmi.w	800919e <_svfiprintf_r+0x2a>
 8009334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009336:	b01d      	add	sp, #116	; 0x74
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	ab03      	add	r3, sp, #12
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4622      	mov	r2, r4
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <_svfiprintf_r+0x1ec>)
 8009344:	a904      	add	r1, sp, #16
 8009346:	4640      	mov	r0, r8
 8009348:	f7fe fb84 	bl	8007a54 <_printf_i>
 800934c:	e7ea      	b.n	8009324 <_svfiprintf_r+0x1b0>
 800934e:	bf00      	nop
 8009350:	0800ad0c 	.word	0x0800ad0c
 8009354:	0800ad12 	.word	0x0800ad12
 8009358:	0800ad16 	.word	0x0800ad16
 800935c:	080074fd 	.word	0x080074fd
 8009360:	080090c1 	.word	0x080090c1

08009364 <_sbrk_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	2300      	movs	r3, #0
 8009368:	4c05      	ldr	r4, [pc, #20]	; (8009380 <_sbrk_r+0x1c>)
 800936a:	4605      	mov	r5, r0
 800936c:	4608      	mov	r0, r1
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	f7fa f978 	bl	8003664 <_sbrk>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_sbrk_r+0x1a>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	b103      	cbz	r3, 800937e <_sbrk_r+0x1a>
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000678 	.word	0x20000678

08009384 <__ascii_mbtowc>:
 8009384:	b082      	sub	sp, #8
 8009386:	b901      	cbnz	r1, 800938a <__ascii_mbtowc+0x6>
 8009388:	a901      	add	r1, sp, #4
 800938a:	b142      	cbz	r2, 800939e <__ascii_mbtowc+0x1a>
 800938c:	b14b      	cbz	r3, 80093a2 <__ascii_mbtowc+0x1e>
 800938e:	7813      	ldrb	r3, [r2, #0]
 8009390:	600b      	str	r3, [r1, #0]
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	1c10      	adds	r0, r2, #0
 8009396:	bf18      	it	ne
 8009398:	2001      	movne	r0, #1
 800939a:	b002      	add	sp, #8
 800939c:	4770      	bx	lr
 800939e:	4610      	mov	r0, r2
 80093a0:	e7fb      	b.n	800939a <__ascii_mbtowc+0x16>
 80093a2:	f06f 0001 	mvn.w	r0, #1
 80093a6:	e7f8      	b.n	800939a <__ascii_mbtowc+0x16>

080093a8 <memmove>:
 80093a8:	4288      	cmp	r0, r1
 80093aa:	b510      	push	{r4, lr}
 80093ac:	eb01 0302 	add.w	r3, r1, r2
 80093b0:	d807      	bhi.n	80093c2 <memmove+0x1a>
 80093b2:	1e42      	subs	r2, r0, #1
 80093b4:	4299      	cmp	r1, r3
 80093b6:	d00a      	beq.n	80093ce <memmove+0x26>
 80093b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80093c0:	e7f8      	b.n	80093b4 <memmove+0xc>
 80093c2:	4283      	cmp	r3, r0
 80093c4:	d9f5      	bls.n	80093b2 <memmove+0xa>
 80093c6:	1881      	adds	r1, r0, r2
 80093c8:	1ad2      	subs	r2, r2, r3
 80093ca:	42d3      	cmn	r3, r2
 80093cc:	d100      	bne.n	80093d0 <memmove+0x28>
 80093ce:	bd10      	pop	{r4, pc}
 80093d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80093d8:	e7f7      	b.n	80093ca <memmove+0x22>

080093da <__malloc_lock>:
 80093da:	4770      	bx	lr

080093dc <__malloc_unlock>:
 80093dc:	4770      	bx	lr

080093de <_realloc_r>:
 80093de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e0:	4607      	mov	r7, r0
 80093e2:	4614      	mov	r4, r2
 80093e4:	460e      	mov	r6, r1
 80093e6:	b921      	cbnz	r1, 80093f2 <_realloc_r+0x14>
 80093e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093ec:	4611      	mov	r1, r2
 80093ee:	f7ff be0d 	b.w	800900c <_malloc_r>
 80093f2:	b922      	cbnz	r2, 80093fe <_realloc_r+0x20>
 80093f4:	f7ff fdbe 	bl	8008f74 <_free_r>
 80093f8:	4625      	mov	r5, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fe:	f000 f821 	bl	8009444 <_malloc_usable_size_r>
 8009402:	42a0      	cmp	r0, r4
 8009404:	d20f      	bcs.n	8009426 <_realloc_r+0x48>
 8009406:	4621      	mov	r1, r4
 8009408:	4638      	mov	r0, r7
 800940a:	f7ff fdff 	bl	800900c <_malloc_r>
 800940e:	4605      	mov	r5, r0
 8009410:	2800      	cmp	r0, #0
 8009412:	d0f2      	beq.n	80093fa <_realloc_r+0x1c>
 8009414:	4631      	mov	r1, r6
 8009416:	4622      	mov	r2, r4
 8009418:	f7ff fab6 	bl	8008988 <memcpy>
 800941c:	4631      	mov	r1, r6
 800941e:	4638      	mov	r0, r7
 8009420:	f7ff fda8 	bl	8008f74 <_free_r>
 8009424:	e7e9      	b.n	80093fa <_realloc_r+0x1c>
 8009426:	4635      	mov	r5, r6
 8009428:	e7e7      	b.n	80093fa <_realloc_r+0x1c>

0800942a <__ascii_wctomb>:
 800942a:	b149      	cbz	r1, 8009440 <__ascii_wctomb+0x16>
 800942c:	2aff      	cmp	r2, #255	; 0xff
 800942e:	bf8b      	itete	hi
 8009430:	238a      	movhi	r3, #138	; 0x8a
 8009432:	700a      	strbls	r2, [r1, #0]
 8009434:	6003      	strhi	r3, [r0, #0]
 8009436:	2001      	movls	r0, #1
 8009438:	bf88      	it	hi
 800943a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800943e:	4770      	bx	lr
 8009440:	4608      	mov	r0, r1
 8009442:	4770      	bx	lr

08009444 <_malloc_usable_size_r>:
 8009444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009448:	1f18      	subs	r0, r3, #4
 800944a:	2b00      	cmp	r3, #0
 800944c:	bfbc      	itt	lt
 800944e:	580b      	ldrlt	r3, [r1, r0]
 8009450:	18c0      	addlt	r0, r0, r3
 8009452:	4770      	bx	lr

08009454 <sin>:
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	4a1a      	ldr	r2, [pc, #104]	; (80094c0 <sin+0x6c>)
 8009458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800945c:	4293      	cmp	r3, r2
 800945e:	b087      	sub	sp, #28
 8009460:	dc06      	bgt.n	8009470 <sin+0x1c>
 8009462:	2300      	movs	r3, #0
 8009464:	2200      	movs	r2, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	f001 f975 	bl	800a758 <__kernel_sin>
 800946e:	e006      	b.n	800947e <sin+0x2a>
 8009470:	4a14      	ldr	r2, [pc, #80]	; (80094c4 <sin+0x70>)
 8009472:	4293      	cmp	r3, r2
 8009474:	dd05      	ble.n	8009482 <sin+0x2e>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	f7f6 fe75 	bl	8000168 <__aeabi_dsub>
 800947e:	b007      	add	sp, #28
 8009480:	bd30      	pop	{r4, r5, pc}
 8009482:	aa02      	add	r2, sp, #8
 8009484:	f000 fac4 	bl	8009a10 <__ieee754_rem_pio2>
 8009488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800948c:	f000 0403 	and.w	r4, r0, #3
 8009490:	2c01      	cmp	r4, #1
 8009492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009496:	d005      	beq.n	80094a4 <sin+0x50>
 8009498:	2c02      	cmp	r4, #2
 800949a:	d006      	beq.n	80094aa <sin+0x56>
 800949c:	b964      	cbnz	r4, 80094b8 <sin+0x64>
 800949e:	2401      	movs	r4, #1
 80094a0:	9400      	str	r4, [sp, #0]
 80094a2:	e7e2      	b.n	800946a <sin+0x16>
 80094a4:	f000 fd50 	bl	8009f48 <__kernel_cos>
 80094a8:	e7e9      	b.n	800947e <sin+0x2a>
 80094aa:	2401      	movs	r4, #1
 80094ac:	9400      	str	r4, [sp, #0]
 80094ae:	f001 f953 	bl	800a758 <__kernel_sin>
 80094b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80094b6:	e7e2      	b.n	800947e <sin+0x2a>
 80094b8:	f000 fd46 	bl	8009f48 <__kernel_cos>
 80094bc:	e7f9      	b.n	80094b2 <sin+0x5e>
 80094be:	bf00      	nop
 80094c0:	3fe921fb 	.word	0x3fe921fb
 80094c4:	7fefffff 	.word	0x7fefffff

080094c8 <asin>:
 80094c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094cc:	b08b      	sub	sp, #44	; 0x2c
 80094ce:	4604      	mov	r4, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	f000 f8a1 	bl	8009618 <__ieee754_asin>
 80094d6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800956c <asin+0xa4>
 80094da:	4606      	mov	r6, r0
 80094dc:	f998 3000 	ldrsb.w	r3, [r8]
 80094e0:	460f      	mov	r7, r1
 80094e2:	3301      	adds	r3, #1
 80094e4:	d036      	beq.n	8009554 <asin+0x8c>
 80094e6:	4622      	mov	r2, r4
 80094e8:	462b      	mov	r3, r5
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f7 fa8d 	bl	8000a0c <__aeabi_dcmpun>
 80094f2:	4681      	mov	r9, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d12d      	bne.n	8009554 <asin+0x8c>
 80094f8:	4620      	mov	r0, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	f001 f9e2 	bl	800a8c4 <fabs>
 8009500:	2200      	movs	r2, #0
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <asin+0x98>)
 8009504:	f7f7 fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8009508:	b320      	cbz	r0, 8009554 <asin+0x8c>
 800950a:	2301      	movs	r3, #1
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4b15      	ldr	r3, [pc, #84]	; (8009564 <asin+0x9c>)
 8009510:	4815      	ldr	r0, [pc, #84]	; (8009568 <asin+0xa0>)
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	f8cd 9020 	str.w	r9, [sp, #32]
 8009518:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800951c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009520:	f001 fa5c 	bl	800a9dc <nan>
 8009524:	f998 3000 	ldrsb.w	r3, [r8]
 8009528:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d104      	bne.n	800953a <asin+0x72>
 8009530:	f7fd ff20 	bl	8007374 <__errno>
 8009534:	2321      	movs	r3, #33	; 0x21
 8009536:	6003      	str	r3, [r0, #0]
 8009538:	e004      	b.n	8009544 <asin+0x7c>
 800953a:	4668      	mov	r0, sp
 800953c:	f001 fa4c 	bl	800a9d8 <matherr>
 8009540:	2800      	cmp	r0, #0
 8009542:	d0f5      	beq.n	8009530 <asin+0x68>
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	b11b      	cbz	r3, 8009550 <asin+0x88>
 8009548:	f7fd ff14 	bl	8007374 <__errno>
 800954c:	9b08      	ldr	r3, [sp, #32]
 800954e:	6003      	str	r3, [r0, #0]
 8009550:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	b00b      	add	sp, #44	; 0x2c
 800955a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955e:	bf00      	nop
 8009560:	3ff00000 	.word	0x3ff00000
 8009564:	0800ae28 	.word	0x0800ae28
 8009568:	0800ad11 	.word	0x0800ad11
 800956c:	200001f4 	.word	0x200001f4

08009570 <sqrt>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	b08b      	sub	sp, #44	; 0x2c
 8009576:	4604      	mov	r4, r0
 8009578:	460d      	mov	r5, r1
 800957a:	f000 fc39 	bl	8009df0 <__ieee754_sqrt>
 800957e:	4b24      	ldr	r3, [pc, #144]	; (8009610 <sqrt+0xa0>)
 8009580:	4680      	mov	r8, r0
 8009582:	f993 a000 	ldrsb.w	sl, [r3]
 8009586:	4689      	mov	r9, r1
 8009588:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800958c:	d02b      	beq.n	80095e6 <sqrt+0x76>
 800958e:	4622      	mov	r2, r4
 8009590:	462b      	mov	r3, r5
 8009592:	4620      	mov	r0, r4
 8009594:	4629      	mov	r1, r5
 8009596:	f7f7 fa39 	bl	8000a0c <__aeabi_dcmpun>
 800959a:	4683      	mov	fp, r0
 800959c:	bb18      	cbnz	r0, 80095e6 <sqrt+0x76>
 800959e:	2600      	movs	r6, #0
 80095a0:	2700      	movs	r7, #0
 80095a2:	4632      	mov	r2, r6
 80095a4:	463b      	mov	r3, r7
 80095a6:	4620      	mov	r0, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7f7 fa07 	bl	80009bc <__aeabi_dcmplt>
 80095ae:	b1d0      	cbz	r0, 80095e6 <sqrt+0x76>
 80095b0:	2301      	movs	r3, #1
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <sqrt+0xa4>)
 80095b6:	f8cd b020 	str.w	fp, [sp, #32]
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80095c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80095c4:	f1ba 0f00 	cmp.w	sl, #0
 80095c8:	d112      	bne.n	80095f0 <sqrt+0x80>
 80095ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80095ce:	4668      	mov	r0, sp
 80095d0:	f001 fa02 	bl	800a9d8 <matherr>
 80095d4:	b1b8      	cbz	r0, 8009606 <sqrt+0x96>
 80095d6:	9b08      	ldr	r3, [sp, #32]
 80095d8:	b11b      	cbz	r3, 80095e2 <sqrt+0x72>
 80095da:	f7fd fecb 	bl	8007374 <__errno>
 80095de:	9b08      	ldr	r3, [sp, #32]
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80095e6:	4640      	mov	r0, r8
 80095e8:	4649      	mov	r1, r9
 80095ea:	b00b      	add	sp, #44	; 0x2c
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	4632      	mov	r2, r6
 80095f2:	463b      	mov	r3, r7
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 f898 	bl	800072c <__aeabi_ddiv>
 80095fc:	f1ba 0f02 	cmp.w	sl, #2
 8009600:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009604:	d1e3      	bne.n	80095ce <sqrt+0x5e>
 8009606:	f7fd feb5 	bl	8007374 <__errno>
 800960a:	2321      	movs	r3, #33	; 0x21
 800960c:	6003      	str	r3, [r0, #0]
 800960e:	e7e2      	b.n	80095d6 <sqrt+0x66>
 8009610:	200001f4 	.word	0x200001f4
 8009614:	0800ae2d 	.word	0x0800ae2d

08009618 <__ieee754_asin>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	4bc4      	ldr	r3, [pc, #784]	; (8009930 <__ieee754_asin+0x318>)
 800961e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009622:	b087      	sub	sp, #28
 8009624:	429f      	cmp	r7, r3
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	9103      	str	r1, [sp, #12]
 800962c:	dd2a      	ble.n	8009684 <__ieee754_asin+0x6c>
 800962e:	4603      	mov	r3, r0
 8009630:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009634:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009638:	433b      	orrs	r3, r7
 800963a:	d114      	bne.n	8009666 <__ieee754_asin+0x4e>
 800963c:	a3a2      	add	r3, pc, #648	; (adr r3, 80098c8 <__ieee754_asin+0x2b0>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f6 ff49 	bl	80004d8 <__aeabi_dmul>
 8009646:	a3a2      	add	r3, pc, #648	; (adr r3, 80098d0 <__ieee754_asin+0x2b8>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f6 ff40 	bl	80004d8 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fd84 	bl	800016c <__adddf3>
 8009664:	e007      	b.n	8009676 <__ieee754_asin+0x5e>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	f7f6 fd7d 	bl	8000168 <__aeabi_dsub>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	f7f7 f85b 	bl	800072c <__aeabi_ddiv>
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	b007      	add	sp, #28
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	4bab      	ldr	r3, [pc, #684]	; (8009934 <__ieee754_asin+0x31c>)
 8009686:	429f      	cmp	r7, r3
 8009688:	dc0e      	bgt.n	80096a8 <__ieee754_asin+0x90>
 800968a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800968e:	f280 80ab 	bge.w	80097e8 <__ieee754_asin+0x1d0>
 8009692:	a391      	add	r3, pc, #580	; (adr r3, 80098d8 <__ieee754_asin+0x2c0>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fd68 	bl	800016c <__adddf3>
 800969c:	2200      	movs	r2, #0
 800969e:	4ba6      	ldr	r3, [pc, #664]	; (8009938 <__ieee754_asin+0x320>)
 80096a0:	f7f7 f9aa 	bl	80009f8 <__aeabi_dcmpgt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d1e8      	bne.n	800967a <__ieee754_asin+0x62>
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	f001 f90a 	bl	800a8c4 <fabs>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	2000      	movs	r0, #0
 80096b6:	49a0      	ldr	r1, [pc, #640]	; (8009938 <__ieee754_asin+0x320>)
 80096b8:	f7f6 fd56 	bl	8000168 <__aeabi_dsub>
 80096bc:	2200      	movs	r2, #0
 80096be:	4b9f      	ldr	r3, [pc, #636]	; (800993c <__ieee754_asin+0x324>)
 80096c0:	f7f6 ff0a 	bl	80004d8 <__aeabi_dmul>
 80096c4:	a386      	add	r3, pc, #536	; (adr r3, 80098e0 <__ieee754_asin+0x2c8>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	f7f6 ff03 	bl	80004d8 <__aeabi_dmul>
 80096d2:	a385      	add	r3, pc, #532	; (adr r3, 80098e8 <__ieee754_asin+0x2d0>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 fd48 	bl	800016c <__adddf3>
 80096dc:	4622      	mov	r2, r4
 80096de:	462b      	mov	r3, r5
 80096e0:	f7f6 fefa 	bl	80004d8 <__aeabi_dmul>
 80096e4:	a382      	add	r3, pc, #520	; (adr r3, 80098f0 <__ieee754_asin+0x2d8>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fd3d 	bl	8000168 <__aeabi_dsub>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	f7f6 fef1 	bl	80004d8 <__aeabi_dmul>
 80096f6:	a380      	add	r3, pc, #512	; (adr r3, 80098f8 <__ieee754_asin+0x2e0>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f6 fd36 	bl	800016c <__adddf3>
 8009700:	4622      	mov	r2, r4
 8009702:	462b      	mov	r3, r5
 8009704:	f7f6 fee8 	bl	80004d8 <__aeabi_dmul>
 8009708:	a37d      	add	r3, pc, #500	; (adr r3, 8009900 <__ieee754_asin+0x2e8>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 fd2b 	bl	8000168 <__aeabi_dsub>
 8009712:	4622      	mov	r2, r4
 8009714:	462b      	mov	r3, r5
 8009716:	f7f6 fedf 	bl	80004d8 <__aeabi_dmul>
 800971a:	a37b      	add	r3, pc, #492	; (adr r3, 8009908 <__ieee754_asin+0x2f0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fd24 	bl	800016c <__adddf3>
 8009724:	4622      	mov	r2, r4
 8009726:	462b      	mov	r3, r5
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	a378      	add	r3, pc, #480	; (adr r3, 8009910 <__ieee754_asin+0x2f8>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	4680      	mov	r8, r0
 8009734:	4689      	mov	r9, r1
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f6 fecd 	bl	80004d8 <__aeabi_dmul>
 800973e:	a376      	add	r3, pc, #472	; (adr r3, 8009918 <__ieee754_asin+0x300>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fd10 	bl	8000168 <__aeabi_dsub>
 8009748:	4622      	mov	r2, r4
 800974a:	462b      	mov	r3, r5
 800974c:	f7f6 fec4 	bl	80004d8 <__aeabi_dmul>
 8009750:	a373      	add	r3, pc, #460	; (adr r3, 8009920 <__ieee754_asin+0x308>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f6 fd09 	bl	800016c <__adddf3>
 800975a:	4622      	mov	r2, r4
 800975c:	462b      	mov	r3, r5
 800975e:	f7f6 febb 	bl	80004d8 <__aeabi_dmul>
 8009762:	a371      	add	r3, pc, #452	; (adr r3, 8009928 <__ieee754_asin+0x310>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 fcfe 	bl	8000168 <__aeabi_dsub>
 800976c:	4622      	mov	r2, r4
 800976e:	462b      	mov	r3, r5
 8009770:	f7f6 feb2 	bl	80004d8 <__aeabi_dmul>
 8009774:	4b70      	ldr	r3, [pc, #448]	; (8009938 <__ieee754_asin+0x320>)
 8009776:	2200      	movs	r2, #0
 8009778:	f7f6 fcf8 	bl	800016c <__adddf3>
 800977c:	e9cd 0100 	strd	r0, r1, [sp]
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f000 fb34 	bl	8009df0 <__ieee754_sqrt>
 8009788:	4b6d      	ldr	r3, [pc, #436]	; (8009940 <__ieee754_asin+0x328>)
 800978a:	4682      	mov	sl, r0
 800978c:	429f      	cmp	r7, r3
 800978e:	468b      	mov	fp, r1
 8009790:	f340 80d8 	ble.w	8009944 <__ieee754_asin+0x32c>
 8009794:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f6 ffc6 	bl	800072c <__aeabi_ddiv>
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	f7f6 fe98 	bl	80004d8 <__aeabi_dmul>
 80097a8:	4652      	mov	r2, sl
 80097aa:	465b      	mov	r3, fp
 80097ac:	f7f6 fcde 	bl	800016c <__adddf3>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	f7f6 fcda 	bl	800016c <__adddf3>
 80097b8:	a345      	add	r3, pc, #276	; (adr r3, 80098d0 <__ieee754_asin+0x2b8>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fcd3 	bl	8000168 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	a140      	add	r1, pc, #256	; (adr r1, 80098c8 <__ieee754_asin+0x2b0>)
 80097c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097cc:	f7f6 fccc 	bl	8000168 <__aeabi_dsub>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	4604      	mov	r4, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfdc      	itt	le
 80097d8:	4602      	movle	r2, r0
 80097da:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80097de:	460d      	mov	r5, r1
 80097e0:	bfdc      	itt	le
 80097e2:	4614      	movle	r4, r2
 80097e4:	461d      	movle	r5, r3
 80097e6:	e748      	b.n	800967a <__ieee754_asin+0x62>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	f7f6 fe74 	bl	80004d8 <__aeabi_dmul>
 80097f0:	a33b      	add	r3, pc, #236	; (adr r3, 80098e0 <__ieee754_asin+0x2c8>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	f7f6 fe6d 	bl	80004d8 <__aeabi_dmul>
 80097fe:	a33a      	add	r3, pc, #232	; (adr r3, 80098e8 <__ieee754_asin+0x2d0>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fcb2 	bl	800016c <__adddf3>
 8009808:	4632      	mov	r2, r6
 800980a:	463b      	mov	r3, r7
 800980c:	f7f6 fe64 	bl	80004d8 <__aeabi_dmul>
 8009810:	a337      	add	r3, pc, #220	; (adr r3, 80098f0 <__ieee754_asin+0x2d8>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fca7 	bl	8000168 <__aeabi_dsub>
 800981a:	4632      	mov	r2, r6
 800981c:	463b      	mov	r3, r7
 800981e:	f7f6 fe5b 	bl	80004d8 <__aeabi_dmul>
 8009822:	a335      	add	r3, pc, #212	; (adr r3, 80098f8 <__ieee754_asin+0x2e0>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fca0 	bl	800016c <__adddf3>
 800982c:	4632      	mov	r2, r6
 800982e:	463b      	mov	r3, r7
 8009830:	f7f6 fe52 	bl	80004d8 <__aeabi_dmul>
 8009834:	a332      	add	r3, pc, #200	; (adr r3, 8009900 <__ieee754_asin+0x2e8>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fc95 	bl	8000168 <__aeabi_dsub>
 800983e:	4632      	mov	r2, r6
 8009840:	463b      	mov	r3, r7
 8009842:	f7f6 fe49 	bl	80004d8 <__aeabi_dmul>
 8009846:	a330      	add	r3, pc, #192	; (adr r3, 8009908 <__ieee754_asin+0x2f0>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fc8e 	bl	800016c <__adddf3>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	f7f6 fe40 	bl	80004d8 <__aeabi_dmul>
 8009858:	a32d      	add	r3, pc, #180	; (adr r3, 8009910 <__ieee754_asin+0x2f8>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	4680      	mov	r8, r0
 8009860:	4689      	mov	r9, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fe37 	bl	80004d8 <__aeabi_dmul>
 800986a:	a32b      	add	r3, pc, #172	; (adr r3, 8009918 <__ieee754_asin+0x300>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fc7a 	bl	8000168 <__aeabi_dsub>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe2e 	bl	80004d8 <__aeabi_dmul>
 800987c:	a328      	add	r3, pc, #160	; (adr r3, 8009920 <__ieee754_asin+0x308>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fc73 	bl	800016c <__adddf3>
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	f7f6 fe25 	bl	80004d8 <__aeabi_dmul>
 800988e:	a326      	add	r3, pc, #152	; (adr r3, 8009928 <__ieee754_asin+0x310>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 fc68 	bl	8000168 <__aeabi_dsub>
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	f7f6 fe1c 	bl	80004d8 <__aeabi_dmul>
 80098a0:	2200      	movs	r2, #0
 80098a2:	4b25      	ldr	r3, [pc, #148]	; (8009938 <__ieee754_asin+0x320>)
 80098a4:	f7f6 fc62 	bl	800016c <__adddf3>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4640      	mov	r0, r8
 80098ae:	4649      	mov	r1, r9
 80098b0:	f7f6 ff3c 	bl	800072c <__aeabi_ddiv>
 80098b4:	4622      	mov	r2, r4
 80098b6:	462b      	mov	r3, r5
 80098b8:	f7f6 fe0e 	bl	80004d8 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4620      	mov	r0, r4
 80098c2:	4629      	mov	r1, r5
 80098c4:	e6cc      	b.n	8009660 <__ieee754_asin+0x48>
 80098c6:	bf00      	nop
 80098c8:	54442d18 	.word	0x54442d18
 80098cc:	3ff921fb 	.word	0x3ff921fb
 80098d0:	33145c07 	.word	0x33145c07
 80098d4:	3c91a626 	.word	0x3c91a626
 80098d8:	8800759c 	.word	0x8800759c
 80098dc:	7e37e43c 	.word	0x7e37e43c
 80098e0:	0dfdf709 	.word	0x0dfdf709
 80098e4:	3f023de1 	.word	0x3f023de1
 80098e8:	7501b288 	.word	0x7501b288
 80098ec:	3f49efe0 	.word	0x3f49efe0
 80098f0:	b5688f3b 	.word	0xb5688f3b
 80098f4:	3fa48228 	.word	0x3fa48228
 80098f8:	0e884455 	.word	0x0e884455
 80098fc:	3fc9c155 	.word	0x3fc9c155
 8009900:	03eb6f7d 	.word	0x03eb6f7d
 8009904:	3fd4d612 	.word	0x3fd4d612
 8009908:	55555555 	.word	0x55555555
 800990c:	3fc55555 	.word	0x3fc55555
 8009910:	b12e9282 	.word	0xb12e9282
 8009914:	3fb3b8c5 	.word	0x3fb3b8c5
 8009918:	1b8d0159 	.word	0x1b8d0159
 800991c:	3fe6066c 	.word	0x3fe6066c
 8009920:	9c598ac8 	.word	0x9c598ac8
 8009924:	40002ae5 	.word	0x40002ae5
 8009928:	1c8a2d4b 	.word	0x1c8a2d4b
 800992c:	40033a27 	.word	0x40033a27
 8009930:	3fefffff 	.word	0x3fefffff
 8009934:	3fdfffff 	.word	0x3fdfffff
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	3fef3332 	.word	0x3fef3332
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	460f      	mov	r7, r1
 800994a:	f7f6 fc0f 	bl	800016c <__adddf3>
 800994e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009952:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009956:	4640      	mov	r0, r8
 8009958:	4649      	mov	r1, r9
 800995a:	f7f6 fee7 	bl	800072c <__aeabi_ddiv>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009966:	f7f6 fdb7 	bl	80004d8 <__aeabi_dmul>
 800996a:	2600      	movs	r6, #0
 800996c:	4680      	mov	r8, r0
 800996e:	4689      	mov	r9, r1
 8009970:	4632      	mov	r2, r6
 8009972:	465b      	mov	r3, fp
 8009974:	4630      	mov	r0, r6
 8009976:	4659      	mov	r1, fp
 8009978:	f7f6 fdae 	bl	80004d8 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4620      	mov	r0, r4
 8009982:	4629      	mov	r1, r5
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	4632      	mov	r2, r6
 800998a:	4604      	mov	r4, r0
 800998c:	460d      	mov	r5, r1
 800998e:	465b      	mov	r3, fp
 8009990:	4650      	mov	r0, sl
 8009992:	4659      	mov	r1, fp
 8009994:	f7f6 fbea 	bl	800016c <__adddf3>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	f7f6 fec4 	bl	800072c <__aeabi_ddiv>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	f7f6 fbe0 	bl	800016c <__adddf3>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	a113      	add	r1, pc, #76	; (adr r1, 8009a00 <__ieee754_asin+0x3e8>)
 80099b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b6:	f7f6 fbd7 	bl	8000168 <__aeabi_dsub>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fbd1 	bl	8000168 <__aeabi_dsub>
 80099c6:	4632      	mov	r2, r6
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	465b      	mov	r3, fp
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f6 fbcb 	bl	800016c <__adddf3>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	a10b      	add	r1, pc, #44	; (adr r1, 8009a08 <__ieee754_asin+0x3f0>)
 80099dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099e0:	f7f6 fbc2 	bl	8000168 <__aeabi_dsub>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f6 fbbc 	bl	8000168 <__aeabi_dsub>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	a104      	add	r1, pc, #16	; (adr r1, 8009a08 <__ieee754_asin+0x3f0>)
 80099f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099fa:	e6e7      	b.n	80097cc <__ieee754_asin+0x1b4>
 80099fc:	f3af 8000 	nop.w
 8009a00:	33145c07 	.word	0x33145c07
 8009a04:	3c91a626 	.word	0x3c91a626
 8009a08:	54442d18 	.word	0x54442d18
 8009a0c:	3fe921fb 	.word	0x3fe921fb

08009a10 <__ieee754_rem_pio2>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	4614      	mov	r4, r2
 8009a16:	4ac2      	ldr	r2, [pc, #776]	; (8009d20 <__ieee754_rem_pio2+0x310>)
 8009a18:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009a1c:	4592      	cmp	sl, r2
 8009a1e:	b08d      	sub	sp, #52	; 0x34
 8009a20:	468b      	mov	fp, r1
 8009a22:	dc07      	bgt.n	8009a34 <__ieee754_rem_pio2+0x24>
 8009a24:	2200      	movs	r2, #0
 8009a26:	2300      	movs	r3, #0
 8009a28:	e9c4 0100 	strd	r0, r1, [r4]
 8009a2c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009a30:	2500      	movs	r5, #0
 8009a32:	e023      	b.n	8009a7c <__ieee754_rem_pio2+0x6c>
 8009a34:	4abb      	ldr	r2, [pc, #748]	; (8009d24 <__ieee754_rem_pio2+0x314>)
 8009a36:	4592      	cmp	sl, r2
 8009a38:	dc71      	bgt.n	8009b1e <__ieee754_rem_pio2+0x10e>
 8009a3a:	a3ab      	add	r3, pc, #684	; (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2d8>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	2900      	cmp	r1, #0
 8009a42:	4db9      	ldr	r5, [pc, #740]	; (8009d28 <__ieee754_rem_pio2+0x318>)
 8009a44:	dd36      	ble.n	8009ab4 <__ieee754_rem_pio2+0xa4>
 8009a46:	f7f6 fb8f 	bl	8000168 <__aeabi_dsub>
 8009a4a:	45aa      	cmp	sl, r5
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460f      	mov	r7, r1
 8009a50:	d018      	beq.n	8009a84 <__ieee754_rem_pio2+0x74>
 8009a52:	a3a7      	add	r3, pc, #668	; (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2e0>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fb86 	bl	8000168 <__aeabi_dsub>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	e9c4 2300 	strd	r2, r3, [r4]
 8009a66:	4639      	mov	r1, r7
 8009a68:	f7f6 fb7e 	bl	8000168 <__aeabi_dsub>
 8009a6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2e0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fb79 	bl	8000168 <__aeabi_dsub>
 8009a76:	2501      	movs	r5, #1
 8009a78:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	b00d      	add	sp, #52	; 0x34
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	a39c      	add	r3, pc, #624	; (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2e8>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f7f6 fb6d 	bl	8000168 <__aeabi_dsub>
 8009a8e:	a39c      	add	r3, pc, #624	; (adr r3, 8009d00 <__ieee754_rem_pio2+0x2f0>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4606      	mov	r6, r0
 8009a96:	460f      	mov	r7, r1
 8009a98:	f7f6 fb66 	bl	8000168 <__aeabi_dsub>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	e9c4 2300 	strd	r2, r3, [r4]
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	f7f6 fb5e 	bl	8000168 <__aeabi_dsub>
 8009aac:	a394      	add	r3, pc, #592	; (adr r3, 8009d00 <__ieee754_rem_pio2+0x2f0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	e7de      	b.n	8009a72 <__ieee754_rem_pio2+0x62>
 8009ab4:	f7f6 fb5a 	bl	800016c <__adddf3>
 8009ab8:	45aa      	cmp	sl, r5
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	d016      	beq.n	8009aee <__ieee754_rem_pio2+0xde>
 8009ac0:	a38b      	add	r3, pc, #556	; (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2e0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fb51 	bl	800016c <__adddf3>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4630      	mov	r0, r6
 8009ad0:	e9c4 2300 	strd	r2, r3, [r4]
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f6 fb47 	bl	8000168 <__aeabi_dsub>
 8009ada:	a385      	add	r3, pc, #532	; (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2e0>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fb44 	bl	800016c <__adddf3>
 8009ae4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009ae8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009aec:	e7c6      	b.n	8009a7c <__ieee754_rem_pio2+0x6c>
 8009aee:	a382      	add	r3, pc, #520	; (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2e8>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fb3a 	bl	800016c <__adddf3>
 8009af8:	a381      	add	r3, pc, #516	; (adr r3, 8009d00 <__ieee754_rem_pio2+0x2f0>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	f7f6 fb33 	bl	800016c <__adddf3>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 fb29 	bl	8000168 <__aeabi_dsub>
 8009b16:	a37a      	add	r3, pc, #488	; (adr r3, 8009d00 <__ieee754_rem_pio2+0x2f0>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	e7e0      	b.n	8009ae0 <__ieee754_rem_pio2+0xd0>
 8009b1e:	4a83      	ldr	r2, [pc, #524]	; (8009d2c <__ieee754_rem_pio2+0x31c>)
 8009b20:	4592      	cmp	sl, r2
 8009b22:	f300 80d2 	bgt.w	8009cca <__ieee754_rem_pio2+0x2ba>
 8009b26:	f000 fecd 	bl	800a8c4 <fabs>
 8009b2a:	a377      	add	r3, pc, #476	; (adr r3, 8009d08 <__ieee754_rem_pio2+0x2f8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	4606      	mov	r6, r0
 8009b32:	460f      	mov	r7, r1
 8009b34:	f7f6 fcd0 	bl	80004d8 <__aeabi_dmul>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4b7d      	ldr	r3, [pc, #500]	; (8009d30 <__ieee754_rem_pio2+0x320>)
 8009b3c:	f7f6 fb16 	bl	800016c <__adddf3>
 8009b40:	f7f6 ff7a 	bl	8000a38 <__aeabi_d2iz>
 8009b44:	4605      	mov	r5, r0
 8009b46:	f7f6 fc5d 	bl	8000404 <__aeabi_i2d>
 8009b4a:	a367      	add	r3, pc, #412	; (adr r3, 8009ce8 <__ieee754_rem_pio2+0x2d8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b54:	f7f6 fcc0 	bl	80004d8 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fb02 	bl	8000168 <__aeabi_dsub>
 8009b64:	a362      	add	r3, pc, #392	; (adr r3, 8009cf0 <__ieee754_rem_pio2+0x2e0>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b72:	f7f6 fcb1 	bl	80004d8 <__aeabi_dmul>
 8009b76:	2d1f      	cmp	r5, #31
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4689      	mov	r9, r1
 8009b7c:	dc0e      	bgt.n	8009b9c <__ieee754_rem_pio2+0x18c>
 8009b7e:	4b6d      	ldr	r3, [pc, #436]	; (8009d34 <__ieee754_rem_pio2+0x324>)
 8009b80:	1e6a      	subs	r2, r5, #1
 8009b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b86:	4553      	cmp	r3, sl
 8009b88:	d008      	beq.n	8009b9c <__ieee754_rem_pio2+0x18c>
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	f7f6 fae9 	bl	8000168 <__aeabi_dsub>
 8009b96:	e9c4 0100 	strd	r0, r1, [r4]
 8009b9a:	e011      	b.n	8009bc0 <__ieee754_rem_pio2+0x1b0>
 8009b9c:	464b      	mov	r3, r9
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 fae0 	bl	8000168 <__aeabi_dsub>
 8009ba8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009bac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	dc1f      	bgt.n	8009bf8 <__ieee754_rem_pio2+0x1e8>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	e9c4 2300 	strd	r2, r3, [r4]
 8009bc0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4653      	mov	r3, sl
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 facd 	bl	8000168 <__aeabi_dsub>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	f7f6 fac9 	bl	8000168 <__aeabi_dsub>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	f1bb 0f00 	cmp.w	fp, #0
 8009bde:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009be2:	f6bf af4b 	bge.w	8009a7c <__ieee754_rem_pio2+0x6c>
 8009be6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009bea:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8009bee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009bf2:	60e1      	str	r1, [r4, #12]
 8009bf4:	426d      	negs	r5, r5
 8009bf6:	e741      	b.n	8009a7c <__ieee754_rem_pio2+0x6c>
 8009bf8:	a33f      	add	r3, pc, #252	; (adr r3, 8009cf8 <__ieee754_rem_pio2+0x2e8>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c02:	f7f6 fc69 	bl	80004d8 <__aeabi_dmul>
 8009c06:	4680      	mov	r8, r0
 8009c08:	4689      	mov	r9, r1
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 faa9 	bl	8000168 <__aeabi_dsub>
 8009c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 faa1 	bl	8000168 <__aeabi_dsub>
 8009c26:	4642      	mov	r2, r8
 8009c28:	464b      	mov	r3, r9
 8009c2a:	f7f6 fa9d 	bl	8000168 <__aeabi_dsub>
 8009c2e:	a334      	add	r3, pc, #208	; (adr r3, 8009d00 <__ieee754_rem_pio2+0x2f0>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3c:	f7f6 fc4c 	bl	80004d8 <__aeabi_dmul>
 8009c40:	4632      	mov	r2, r6
 8009c42:	463b      	mov	r3, r7
 8009c44:	f7f6 fa90 	bl	8000168 <__aeabi_dsub>
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c54:	f7f6 fa88 	bl	8000168 <__aeabi_dsub>
 8009c58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c5c:	ebaa 0a03 	sub.w	sl, sl, r3
 8009c60:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8009c64:	dc06      	bgt.n	8009c74 <__ieee754_rem_pio2+0x264>
 8009c66:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	e9c4 2300 	strd	r2, r3, [r4]
 8009c72:	e7a5      	b.n	8009bc0 <__ieee754_rem_pio2+0x1b0>
 8009c74:	a326      	add	r3, pc, #152	; (adr r3, 8009d10 <__ieee754_rem_pio2+0x300>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7e:	f7f6 fc2b 	bl	80004d8 <__aeabi_dmul>
 8009c82:	4680      	mov	r8, r0
 8009c84:	4689      	mov	r9, r1
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c8e:	f7f6 fa6b 	bl	8000168 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4606      	mov	r6, r0
 8009c98:	460f      	mov	r7, r1
 8009c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	f7f6 fa5f 	bl	8000168 <__aeabi_dsub>
 8009caa:	a31b      	add	r3, pc, #108	; (adr r3, 8009d18 <__ieee754_rem_pio2+0x308>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	4689      	mov	r9, r1
 8009cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb8:	f7f6 fc0e 	bl	80004d8 <__aeabi_dmul>
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	e75f      	b.n	8009b8a <__ieee754_rem_pio2+0x17a>
 8009cca:	4a1b      	ldr	r2, [pc, #108]	; (8009d38 <__ieee754_rem_pio2+0x328>)
 8009ccc:	4592      	cmp	sl, r2
 8009cce:	dd35      	ble.n	8009d3c <__ieee754_rem_pio2+0x32c>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	f7f6 fa48 	bl	8000168 <__aeabi_dsub>
 8009cd8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cdc:	e9c4 0100 	strd	r0, r1, [r4]
 8009ce0:	e6a6      	b.n	8009a30 <__ieee754_rem_pio2+0x20>
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	54400000 	.word	0x54400000
 8009cec:	3ff921fb 	.word	0x3ff921fb
 8009cf0:	1a626331 	.word	0x1a626331
 8009cf4:	3dd0b461 	.word	0x3dd0b461
 8009cf8:	1a600000 	.word	0x1a600000
 8009cfc:	3dd0b461 	.word	0x3dd0b461
 8009d00:	2e037073 	.word	0x2e037073
 8009d04:	3ba3198a 	.word	0x3ba3198a
 8009d08:	6dc9c883 	.word	0x6dc9c883
 8009d0c:	3fe45f30 	.word	0x3fe45f30
 8009d10:	2e000000 	.word	0x2e000000
 8009d14:	3ba3198a 	.word	0x3ba3198a
 8009d18:	252049c1 	.word	0x252049c1
 8009d1c:	397b839a 	.word	0x397b839a
 8009d20:	3fe921fb 	.word	0x3fe921fb
 8009d24:	4002d97b 	.word	0x4002d97b
 8009d28:	3ff921fb 	.word	0x3ff921fb
 8009d2c:	413921fb 	.word	0x413921fb
 8009d30:	3fe00000 	.word	0x3fe00000
 8009d34:	0800ae34 	.word	0x0800ae34
 8009d38:	7fefffff 	.word	0x7fefffff
 8009d3c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009d40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009d44:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009d48:	460f      	mov	r7, r1
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	f7f6 fe74 	bl	8000a38 <__aeabi_d2iz>
 8009d50:	f7f6 fb58 	bl	8000404 <__aeabi_i2d>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d60:	f7f6 fa02 	bl	8000168 <__aeabi_dsub>
 8009d64:	2200      	movs	r2, #0
 8009d66:	4b20      	ldr	r3, [pc, #128]	; (8009de8 <__ieee754_rem_pio2+0x3d8>)
 8009d68:	f7f6 fbb6 	bl	80004d8 <__aeabi_dmul>
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	4606      	mov	r6, r0
 8009d70:	f7f6 fe62 	bl	8000a38 <__aeabi_d2iz>
 8009d74:	f7f6 fb46 	bl	8000404 <__aeabi_i2d>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <__ieee754_rem_pio2+0x3d8>)
 8009d8c:	f7f6 fba4 	bl	80004d8 <__aeabi_dmul>
 8009d90:	f04f 0803 	mov.w	r8, #3
 8009d94:	2600      	movs	r6, #0
 8009d96:	2700      	movs	r7, #0
 8009d98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009da0:	4632      	mov	r2, r6
 8009da2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009da6:	463b      	mov	r3, r7
 8009da8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009dac:	f7f6 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8009db0:	b9b8      	cbnz	r0, 8009de2 <__ieee754_rem_pio2+0x3d2>
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <__ieee754_rem_pio2+0x3dc>)
 8009db4:	462a      	mov	r2, r5
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	2302      	movs	r3, #2
 8009dba:	4621      	mov	r1, r4
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	a806      	add	r0, sp, #24
 8009dc0:	4643      	mov	r3, r8
 8009dc2:	f000 f97f 	bl	800a0c4 <__kernel_rem_pio2>
 8009dc6:	f1bb 0f00 	cmp.w	fp, #0
 8009dca:	4605      	mov	r5, r0
 8009dcc:	f6bf ae56 	bge.w	8009a7c <__ieee754_rem_pio2+0x6c>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009dd6:	6063      	str	r3, [r4, #4]
 8009dd8:	68e3      	ldr	r3, [r4, #12]
 8009dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009dde:	60e3      	str	r3, [r4, #12]
 8009de0:	e708      	b.n	8009bf4 <__ieee754_rem_pio2+0x1e4>
 8009de2:	46d0      	mov	r8, sl
 8009de4:	e7dc      	b.n	8009da0 <__ieee754_rem_pio2+0x390>
 8009de6:	bf00      	nop
 8009de8:	41700000 	.word	0x41700000
 8009dec:	0800aeb4 	.word	0x0800aeb4

08009df0 <__ieee754_sqrt>:
 8009df0:	4b54      	ldr	r3, [pc, #336]	; (8009f44 <__ieee754_sqrt+0x154>)
 8009df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	438b      	bics	r3, r1
 8009df8:	4606      	mov	r6, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	460a      	mov	r2, r1
 8009dfe:	460c      	mov	r4, r1
 8009e00:	d10f      	bne.n	8009e22 <__ieee754_sqrt+0x32>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	f7f6 fb67 	bl	80004d8 <__aeabi_dmul>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7f6 f9ab 	bl	800016c <__adddf3>
 8009e16:	4606      	mov	r6, r0
 8009e18:	460d      	mov	r5, r1
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e22:	2900      	cmp	r1, #0
 8009e24:	4607      	mov	r7, r0
 8009e26:	4603      	mov	r3, r0
 8009e28:	dc0e      	bgt.n	8009e48 <__ieee754_sqrt+0x58>
 8009e2a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009e2e:	ea5c 0707 	orrs.w	r7, ip, r7
 8009e32:	d0f2      	beq.n	8009e1a <__ieee754_sqrt+0x2a>
 8009e34:	b141      	cbz	r1, 8009e48 <__ieee754_sqrt+0x58>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	f7f6 f995 	bl	8000168 <__aeabi_dsub>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	f7f6 fc73 	bl	800072c <__aeabi_ddiv>
 8009e46:	e7e6      	b.n	8009e16 <__ieee754_sqrt+0x26>
 8009e48:	1512      	asrs	r2, r2, #20
 8009e4a:	d074      	beq.n	8009f36 <__ieee754_sqrt+0x146>
 8009e4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e50:	07d5      	lsls	r5, r2, #31
 8009e52:	f04f 0500 	mov.w	r5, #0
 8009e56:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e5a:	bf48      	it	mi
 8009e5c:	0fd9      	lsrmi	r1, r3, #31
 8009e5e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009e62:	bf44      	itt	mi
 8009e64:	005b      	lslmi	r3, r3, #1
 8009e66:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009e6a:	1051      	asrs	r1, r2, #1
 8009e6c:	0fda      	lsrs	r2, r3, #31
 8009e6e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009e72:	4628      	mov	r0, r5
 8009e74:	2216      	movs	r2, #22
 8009e76:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	1987      	adds	r7, r0, r6
 8009e7e:	42a7      	cmp	r7, r4
 8009e80:	bfde      	ittt	le
 8009e82:	19b8      	addle	r0, r7, r6
 8009e84:	1be4      	suble	r4, r4, r7
 8009e86:	19ad      	addle	r5, r5, r6
 8009e88:	0fdf      	lsrs	r7, r3, #31
 8009e8a:	3a01      	subs	r2, #1
 8009e8c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e94:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e98:	d1f0      	bne.n	8009e7c <__ieee754_sqrt+0x8c>
 8009e9a:	f04f 0c20 	mov.w	ip, #32
 8009e9e:	4696      	mov	lr, r2
 8009ea0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009ea4:	4284      	cmp	r4, r0
 8009ea6:	eb06 070e 	add.w	r7, r6, lr
 8009eaa:	dc02      	bgt.n	8009eb2 <__ieee754_sqrt+0xc2>
 8009eac:	d112      	bne.n	8009ed4 <__ieee754_sqrt+0xe4>
 8009eae:	429f      	cmp	r7, r3
 8009eb0:	d810      	bhi.n	8009ed4 <__ieee754_sqrt+0xe4>
 8009eb2:	2f00      	cmp	r7, #0
 8009eb4:	eb07 0e06 	add.w	lr, r7, r6
 8009eb8:	da42      	bge.n	8009f40 <__ieee754_sqrt+0x150>
 8009eba:	f1be 0f00 	cmp.w	lr, #0
 8009ebe:	db3f      	blt.n	8009f40 <__ieee754_sqrt+0x150>
 8009ec0:	f100 0801 	add.w	r8, r0, #1
 8009ec4:	1a24      	subs	r4, r4, r0
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	429f      	cmp	r7, r3
 8009eca:	bf88      	it	hi
 8009ecc:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8009ed0:	1bdb      	subs	r3, r3, r7
 8009ed2:	4432      	add	r2, r6
 8009ed4:	0064      	lsls	r4, r4, #1
 8009ed6:	f1bc 0c01 	subs.w	ip, ip, #1
 8009eda:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009ede:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ee6:	d1dd      	bne.n	8009ea4 <__ieee754_sqrt+0xb4>
 8009ee8:	4323      	orrs	r3, r4
 8009eea:	d006      	beq.n	8009efa <__ieee754_sqrt+0x10a>
 8009eec:	1c54      	adds	r4, r2, #1
 8009eee:	bf0b      	itete	eq
 8009ef0:	4662      	moveq	r2, ip
 8009ef2:	3201      	addne	r2, #1
 8009ef4:	3501      	addeq	r5, #1
 8009ef6:	f022 0201 	bicne.w	r2, r2, #1
 8009efa:	106b      	asrs	r3, r5, #1
 8009efc:	0852      	lsrs	r2, r2, #1
 8009efe:	07e8      	lsls	r0, r5, #31
 8009f00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f08:	bf48      	it	mi
 8009f0a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009f0e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009f12:	4616      	mov	r6, r2
 8009f14:	e781      	b.n	8009e1a <__ieee754_sqrt+0x2a>
 8009f16:	0adc      	lsrs	r4, r3, #11
 8009f18:	3915      	subs	r1, #21
 8009f1a:	055b      	lsls	r3, r3, #21
 8009f1c:	2c00      	cmp	r4, #0
 8009f1e:	d0fa      	beq.n	8009f16 <__ieee754_sqrt+0x126>
 8009f20:	02e6      	lsls	r6, r4, #11
 8009f22:	d50a      	bpl.n	8009f3a <__ieee754_sqrt+0x14a>
 8009f24:	f1c2 0020 	rsb	r0, r2, #32
 8009f28:	fa23 f000 	lsr.w	r0, r3, r0
 8009f2c:	1e55      	subs	r5, r2, #1
 8009f2e:	4093      	lsls	r3, r2
 8009f30:	4304      	orrs	r4, r0
 8009f32:	1b4a      	subs	r2, r1, r5
 8009f34:	e78a      	b.n	8009e4c <__ieee754_sqrt+0x5c>
 8009f36:	4611      	mov	r1, r2
 8009f38:	e7f0      	b.n	8009f1c <__ieee754_sqrt+0x12c>
 8009f3a:	0064      	lsls	r4, r4, #1
 8009f3c:	3201      	adds	r2, #1
 8009f3e:	e7ef      	b.n	8009f20 <__ieee754_sqrt+0x130>
 8009f40:	4680      	mov	r8, r0
 8009f42:	e7bf      	b.n	8009ec4 <__ieee754_sqrt+0xd4>
 8009f44:	7ff00000 	.word	0x7ff00000

08009f48 <__kernel_cos>:
 8009f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f50:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009f54:	4680      	mov	r8, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	e9cd 2300 	strd	r2, r3, [sp]
 8009f5c:	da04      	bge.n	8009f68 <__kernel_cos+0x20>
 8009f5e:	f7f6 fd6b 	bl	8000a38 <__aeabi_d2iz>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f000 8086 	beq.w	800a074 <__kernel_cos+0x12c>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 fab2 	bl	80004d8 <__aeabi_dmul>
 8009f74:	2200      	movs	r2, #0
 8009f76:	4b4e      	ldr	r3, [pc, #312]	; (800a0b0 <__kernel_cos+0x168>)
 8009f78:	4604      	mov	r4, r0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	f7f6 faac 	bl	80004d8 <__aeabi_dmul>
 8009f80:	a33f      	add	r3, pc, #252	; (adr r3, 800a080 <__kernel_cos+0x138>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	4682      	mov	sl, r0
 8009f88:	468b      	mov	fp, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 faa3 	bl	80004d8 <__aeabi_dmul>
 8009f92:	a33d      	add	r3, pc, #244	; (adr r3, 800a088 <__kernel_cos+0x140>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f8e8 	bl	800016c <__adddf3>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	462b      	mov	r3, r5
 8009fa0:	f7f6 fa9a 	bl	80004d8 <__aeabi_dmul>
 8009fa4:	a33a      	add	r3, pc, #232	; (adr r3, 800a090 <__kernel_cos+0x148>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f8dd 	bl	8000168 <__aeabi_dsub>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	f7f6 fa91 	bl	80004d8 <__aeabi_dmul>
 8009fb6:	a338      	add	r3, pc, #224	; (adr r3, 800a098 <__kernel_cos+0x150>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f8d6 	bl	800016c <__adddf3>
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	f7f6 fa88 	bl	80004d8 <__aeabi_dmul>
 8009fc8:	a335      	add	r3, pc, #212	; (adr r3, 800a0a0 <__kernel_cos+0x158>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f8cb 	bl	8000168 <__aeabi_dsub>
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	f7f6 fa7f 	bl	80004d8 <__aeabi_dmul>
 8009fda:	a333      	add	r3, pc, #204	; (adr r3, 800a0a8 <__kernel_cos+0x160>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f8c4 	bl	800016c <__adddf3>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f7f6 fa76 	bl	80004d8 <__aeabi_dmul>
 8009fec:	4622      	mov	r2, r4
 8009fee:	462b      	mov	r3, r5
 8009ff0:	f7f6 fa72 	bl	80004d8 <__aeabi_dmul>
 8009ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4639      	mov	r1, r7
 800a000:	f7f6 fa6a 	bl	80004d8 <__aeabi_dmul>
 800a004:	460b      	mov	r3, r1
 800a006:	4602      	mov	r2, r0
 800a008:	4629      	mov	r1, r5
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7f6 f8ac 	bl	8000168 <__aeabi_dsub>
 800a010:	4b28      	ldr	r3, [pc, #160]	; (800a0b4 <__kernel_cos+0x16c>)
 800a012:	4680      	mov	r8, r0
 800a014:	429e      	cmp	r6, r3
 800a016:	4689      	mov	r9, r1
 800a018:	dc0e      	bgt.n	800a038 <__kernel_cos+0xf0>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4650      	mov	r0, sl
 800a020:	4659      	mov	r1, fp
 800a022:	f7f6 f8a1 	bl	8000168 <__aeabi_dsub>
 800a026:	4602      	mov	r2, r0
 800a028:	2000      	movs	r0, #0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4922      	ldr	r1, [pc, #136]	; (800a0b8 <__kernel_cos+0x170>)
 800a02e:	f7f6 f89b 	bl	8000168 <__aeabi_dsub>
 800a032:	b003      	add	sp, #12
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	2400      	movs	r4, #0
 800a03a:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <__kernel_cos+0x174>)
 800a03c:	4622      	mov	r2, r4
 800a03e:	429e      	cmp	r6, r3
 800a040:	bfcc      	ite	gt
 800a042:	4d1f      	ldrgt	r5, [pc, #124]	; (800a0c0 <__kernel_cos+0x178>)
 800a044:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a048:	462b      	mov	r3, r5
 800a04a:	2000      	movs	r0, #0
 800a04c:	491a      	ldr	r1, [pc, #104]	; (800a0b8 <__kernel_cos+0x170>)
 800a04e:	f7f6 f88b 	bl	8000168 <__aeabi_dsub>
 800a052:	4622      	mov	r2, r4
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	462b      	mov	r3, r5
 800a05a:	4650      	mov	r0, sl
 800a05c:	4659      	mov	r1, fp
 800a05e:	f7f6 f883 	bl	8000168 <__aeabi_dsub>
 800a062:	4642      	mov	r2, r8
 800a064:	464b      	mov	r3, r9
 800a066:	f7f6 f87f 	bl	8000168 <__aeabi_dsub>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	e7dc      	b.n	800a02e <__kernel_cos+0xe6>
 800a074:	2000      	movs	r0, #0
 800a076:	4910      	ldr	r1, [pc, #64]	; (800a0b8 <__kernel_cos+0x170>)
 800a078:	e7db      	b.n	800a032 <__kernel_cos+0xea>
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w
 800a080:	be8838d4 	.word	0xbe8838d4
 800a084:	bda8fae9 	.word	0xbda8fae9
 800a088:	bdb4b1c4 	.word	0xbdb4b1c4
 800a08c:	3e21ee9e 	.word	0x3e21ee9e
 800a090:	809c52ad 	.word	0x809c52ad
 800a094:	3e927e4f 	.word	0x3e927e4f
 800a098:	19cb1590 	.word	0x19cb1590
 800a09c:	3efa01a0 	.word	0x3efa01a0
 800a0a0:	16c15177 	.word	0x16c15177
 800a0a4:	3f56c16c 	.word	0x3f56c16c
 800a0a8:	5555554c 	.word	0x5555554c
 800a0ac:	3fa55555 	.word	0x3fa55555
 800a0b0:	3fe00000 	.word	0x3fe00000
 800a0b4:	3fd33332 	.word	0x3fd33332
 800a0b8:	3ff00000 	.word	0x3ff00000
 800a0bc:	3fe90000 	.word	0x3fe90000
 800a0c0:	3fd20000 	.word	0x3fd20000

0800a0c4 <__kernel_rem_pio2>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	9104      	str	r1, [sp, #16]
 800a0d0:	4bbf      	ldr	r3, [pc, #764]	; (800a3d0 <__kernel_rem_pio2+0x30c>)
 800a0d2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a0d4:	1ed4      	subs	r4, r2, #3
 800a0d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0da:	2500      	movs	r5, #0
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	9b07      	ldr	r3, [sp, #28]
 800a0e0:	9008      	str	r0, [sp, #32]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	9306      	str	r3, [sp, #24]
 800a0e6:	2318      	movs	r3, #24
 800a0e8:	fb94 f4f3 	sdiv	r4, r4, r3
 800a0ec:	f06f 0317 	mvn.w	r3, #23
 800a0f0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a0f4:	fb04 3303 	mla	r3, r4, r3, r3
 800a0f8:	eb03 0a02 	add.w	sl, r3, r2
 800a0fc:	9a06      	ldr	r2, [sp, #24]
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	1aa7      	subs	r7, r4, r2
 800a102:	eb03 0802 	add.w	r8, r3, r2
 800a106:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a108:	2200      	movs	r2, #0
 800a10a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a10e:	2300      	movs	r3, #0
 800a110:	ae1e      	add	r6, sp, #120	; 0x78
 800a112:	4545      	cmp	r5, r8
 800a114:	dd14      	ble.n	800a140 <__kernel_rem_pio2+0x7c>
 800a116:	2600      	movs	r6, #0
 800a118:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	429e      	cmp	r6, r3
 800a120:	dc39      	bgt.n	800a196 <__kernel_rem_pio2+0xd2>
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	f04f 0800 	mov.w	r8, #0
 800a128:	3b08      	subs	r3, #8
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	f04f 0900 	mov.w	r9, #0
 800a132:	199d      	adds	r5, r3, r6
 800a134:	ab20      	add	r3, sp, #128	; 0x80
 800a136:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	2700      	movs	r7, #0
 800a13e:	e023      	b.n	800a188 <__kernel_rem_pio2+0xc4>
 800a140:	42ef      	cmn	r7, r5
 800a142:	d40b      	bmi.n	800a15c <__kernel_rem_pio2+0x98>
 800a144:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a148:	e9cd 2300 	strd	r2, r3, [sp]
 800a14c:	f7f6 f95a 	bl	8000404 <__aeabi_i2d>
 800a150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a154:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800a158:	3501      	adds	r5, #1
 800a15a:	e7da      	b.n	800a112 <__kernel_rem_pio2+0x4e>
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	e7f8      	b.n	800a154 <__kernel_rem_pio2+0x90>
 800a162:	9905      	ldr	r1, [sp, #20]
 800a164:	9d00      	ldr	r5, [sp, #0]
 800a166:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a16a:	9105      	str	r1, [sp, #20]
 800a16c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a170:	9500      	str	r5, [sp, #0]
 800a172:	f7f6 f9b1 	bl	80004d8 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f5 fff5 	bl	800016c <__adddf3>
 800a182:	4680      	mov	r8, r0
 800a184:	4689      	mov	r9, r1
 800a186:	3701      	adds	r7, #1
 800a188:	9b06      	ldr	r3, [sp, #24]
 800a18a:	429f      	cmp	r7, r3
 800a18c:	dde9      	ble.n	800a162 <__kernel_rem_pio2+0x9e>
 800a18e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a192:	3601      	adds	r6, #1
 800a194:	e7c2      	b.n	800a11c <__kernel_rem_pio2+0x58>
 800a196:	9b02      	ldr	r3, [sp, #8]
 800a198:	aa0c      	add	r2, sp, #48	; 0x30
 800a19a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a19e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1a0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a1a2:	9f02      	ldr	r7, [sp, #8]
 800a1a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	ab98      	add	r3, sp, #608	; 0x260
 800a1ae:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a1b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a1ba:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a1be:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a1c2:	ab98      	add	r3, sp, #608	; 0x260
 800a1c4:	445b      	add	r3, fp
 800a1c6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800a1ca:	1bbb      	subs	r3, r7, r6
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dc71      	bgt.n	800a2b4 <__kernel_rem_pio2+0x1f0>
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f000 fc07 	bl	800a9e8 <scalbn>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	f7f6 f978 	bl	80004d8 <__aeabi_dmul>
 800a1e8:	f000 fb72 	bl	800a8d0 <floor>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4b79      	ldr	r3, [pc, #484]	; (800a3d4 <__kernel_rem_pio2+0x310>)
 800a1f0:	f7f6 f972 	bl	80004d8 <__aeabi_dmul>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	f7f5 ffb4 	bl	8000168 <__aeabi_dsub>
 800a200:	460d      	mov	r5, r1
 800a202:	4604      	mov	r4, r0
 800a204:	f7f6 fc18 	bl	8000a38 <__aeabi_d2iz>
 800a208:	9005      	str	r0, [sp, #20]
 800a20a:	f7f6 f8fb 	bl	8000404 <__aeabi_i2d>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f5 ffa7 	bl	8000168 <__aeabi_dsub>
 800a21a:	f1ba 0f00 	cmp.w	sl, #0
 800a21e:	4680      	mov	r8, r0
 800a220:	4689      	mov	r9, r1
 800a222:	dd6c      	ble.n	800a2fe <__kernel_rem_pio2+0x23a>
 800a224:	1e7a      	subs	r2, r7, #1
 800a226:	ab0c      	add	r3, sp, #48	; 0x30
 800a228:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a22c:	f1ca 0118 	rsb	r1, sl, #24
 800a230:	9c05      	ldr	r4, [sp, #20]
 800a232:	fa40 f301 	asr.w	r3, r0, r1
 800a236:	441c      	add	r4, r3
 800a238:	408b      	lsls	r3, r1
 800a23a:	1ac0      	subs	r0, r0, r3
 800a23c:	ab0c      	add	r3, sp, #48	; 0x30
 800a23e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a242:	f1ca 0317 	rsb	r3, sl, #23
 800a246:	9405      	str	r4, [sp, #20]
 800a248:	fa40 f303 	asr.w	r3, r0, r3
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	dd62      	ble.n	800a31a <__kernel_rem_pio2+0x256>
 800a254:	2200      	movs	r2, #0
 800a256:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a25a:	4614      	mov	r4, r2
 800a25c:	9b05      	ldr	r3, [sp, #20]
 800a25e:	3301      	adds	r3, #1
 800a260:	9305      	str	r3, [sp, #20]
 800a262:	4297      	cmp	r7, r2
 800a264:	f300 809f 	bgt.w	800a3a6 <__kernel_rem_pio2+0x2e2>
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	dd07      	ble.n	800a27e <__kernel_rem_pio2+0x1ba>
 800a26e:	f1ba 0f01 	cmp.w	sl, #1
 800a272:	f000 80bb 	beq.w	800a3ec <__kernel_rem_pio2+0x328>
 800a276:	f1ba 0f02 	cmp.w	sl, #2
 800a27a:	f000 80c1 	beq.w	800a400 <__kernel_rem_pio2+0x33c>
 800a27e:	9b00      	ldr	r3, [sp, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d14a      	bne.n	800a31a <__kernel_rem_pio2+0x256>
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	2000      	movs	r0, #0
 800a28a:	4953      	ldr	r1, [pc, #332]	; (800a3d8 <__kernel_rem_pio2+0x314>)
 800a28c:	f7f5 ff6c 	bl	8000168 <__aeabi_dsub>
 800a290:	4680      	mov	r8, r0
 800a292:	4689      	mov	r9, r1
 800a294:	2c00      	cmp	r4, #0
 800a296:	d040      	beq.n	800a31a <__kernel_rem_pio2+0x256>
 800a298:	4652      	mov	r2, sl
 800a29a:	2000      	movs	r0, #0
 800a29c:	494e      	ldr	r1, [pc, #312]	; (800a3d8 <__kernel_rem_pio2+0x314>)
 800a29e:	f000 fba3 	bl	800a9e8 <scalbn>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	f7f5 ff5d 	bl	8000168 <__aeabi_dsub>
 800a2ae:	4680      	mov	r8, r0
 800a2b0:	4689      	mov	r9, r1
 800a2b2:	e032      	b.n	800a31a <__kernel_rem_pio2+0x256>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4b49      	ldr	r3, [pc, #292]	; (800a3dc <__kernel_rem_pio2+0x318>)
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	f7f6 f90c 	bl	80004d8 <__aeabi_dmul>
 800a2c0:	f7f6 fbba 	bl	8000a38 <__aeabi_d2iz>
 800a2c4:	f7f6 f89e 	bl	8000404 <__aeabi_i2d>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4b45      	ldr	r3, [pc, #276]	; (800a3e0 <__kernel_rem_pio2+0x31c>)
 800a2cc:	e9cd 0100 	strd	r0, r1, [sp]
 800a2d0:	f7f6 f902 	bl	80004d8 <__aeabi_dmul>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4649      	mov	r1, r9
 800a2dc:	f7f5 ff44 	bl	8000168 <__aeabi_dsub>
 800a2e0:	f7f6 fbaa 	bl	8000a38 <__aeabi_d2iz>
 800a2e4:	ab0c      	add	r3, sp, #48	; 0x30
 800a2e6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a2ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f2:	f7f5 ff3b 	bl	800016c <__adddf3>
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	4689      	mov	r9, r1
 800a2fc:	e765      	b.n	800a1ca <__kernel_rem_pio2+0x106>
 800a2fe:	d105      	bne.n	800a30c <__kernel_rem_pio2+0x248>
 800a300:	1e7b      	subs	r3, r7, #1
 800a302:	aa0c      	add	r2, sp, #48	; 0x30
 800a304:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a308:	15c3      	asrs	r3, r0, #23
 800a30a:	e79f      	b.n	800a24c <__kernel_rem_pio2+0x188>
 800a30c:	2200      	movs	r2, #0
 800a30e:	4b35      	ldr	r3, [pc, #212]	; (800a3e4 <__kernel_rem_pio2+0x320>)
 800a310:	f7f6 fb68 	bl	80009e4 <__aeabi_dcmpge>
 800a314:	2800      	cmp	r0, #0
 800a316:	d143      	bne.n	800a3a0 <__kernel_rem_pio2+0x2dc>
 800a318:	9000      	str	r0, [sp, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	2300      	movs	r3, #0
 800a31e:	4640      	mov	r0, r8
 800a320:	4649      	mov	r1, r9
 800a322:	f7f6 fb41 	bl	80009a8 <__aeabi_dcmpeq>
 800a326:	2800      	cmp	r0, #0
 800a328:	f000 80c3 	beq.w	800a4b2 <__kernel_rem_pio2+0x3ee>
 800a32c:	1e7c      	subs	r4, r7, #1
 800a32e:	4623      	mov	r3, r4
 800a330:	2200      	movs	r2, #0
 800a332:	9902      	ldr	r1, [sp, #8]
 800a334:	428b      	cmp	r3, r1
 800a336:	da6a      	bge.n	800a40e <__kernel_rem_pio2+0x34a>
 800a338:	2a00      	cmp	r2, #0
 800a33a:	f000 8084 	beq.w	800a446 <__kernel_rem_pio2+0x382>
 800a33e:	ab0c      	add	r3, sp, #48	; 0x30
 800a340:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a344:	f1aa 0a18 	sub.w	sl, sl, #24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80b0 	beq.w	800a4ae <__kernel_rem_pio2+0x3ea>
 800a34e:	4652      	mov	r2, sl
 800a350:	2000      	movs	r0, #0
 800a352:	4921      	ldr	r1, [pc, #132]	; (800a3d8 <__kernel_rem_pio2+0x314>)
 800a354:	f000 fb48 	bl	800a9e8 <scalbn>
 800a358:	4625      	mov	r5, r4
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	00e3      	lsls	r3, r4, #3
 800a364:	aa98      	add	r2, sp, #608	; 0x260
 800a366:	eb02 0803 	add.w	r8, r2, r3
 800a36a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800a3dc <__kernel_rem_pio2+0x318>
 800a36e:	9306      	str	r3, [sp, #24]
 800a370:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800a374:	2d00      	cmp	r5, #0
 800a376:	f280 80d2 	bge.w	800a51e <__kernel_rem_pio2+0x45a>
 800a37a:	2500      	movs	r5, #0
 800a37c:	9a06      	ldr	r2, [sp, #24]
 800a37e:	ab98      	add	r3, sp, #608	; 0x260
 800a380:	189e      	adds	r6, r3, r2
 800a382:	3ea8      	subs	r6, #168	; 0xa8
 800a384:	1b63      	subs	r3, r4, r5
 800a386:	2b00      	cmp	r3, #0
 800a388:	f2c0 80f9 	blt.w	800a57e <__kernel_rem_pio2+0x4ba>
 800a38c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a3e8 <__kernel_rem_pio2+0x324>
 800a390:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800a394:	f04f 0a00 	mov.w	sl, #0
 800a398:	f04f 0b00 	mov.w	fp, #0
 800a39c:	2700      	movs	r7, #0
 800a39e:	e0e2      	b.n	800a566 <__kernel_rem_pio2+0x4a2>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	e756      	b.n	800a254 <__kernel_rem_pio2+0x190>
 800a3a6:	ab0c      	add	r3, sp, #48	; 0x30
 800a3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ac:	b94c      	cbnz	r4, 800a3c2 <__kernel_rem_pio2+0x2fe>
 800a3ae:	b12b      	cbz	r3, 800a3bc <__kernel_rem_pio2+0x2f8>
 800a3b0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a3b4:	a80c      	add	r0, sp, #48	; 0x30
 800a3b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	3201      	adds	r2, #1
 800a3be:	461c      	mov	r4, r3
 800a3c0:	e74f      	b.n	800a262 <__kernel_rem_pio2+0x19e>
 800a3c2:	1acb      	subs	r3, r1, r3
 800a3c4:	a80c      	add	r0, sp, #48	; 0x30
 800a3c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a3ca:	4623      	mov	r3, r4
 800a3cc:	e7f6      	b.n	800a3bc <__kernel_rem_pio2+0x2f8>
 800a3ce:	bf00      	nop
 800a3d0:	0800b000 	.word	0x0800b000
 800a3d4:	40200000 	.word	0x40200000
 800a3d8:	3ff00000 	.word	0x3ff00000
 800a3dc:	3e700000 	.word	0x3e700000
 800a3e0:	41700000 	.word	0x41700000
 800a3e4:	3fe00000 	.word	0x3fe00000
 800a3e8:	0800afb8 	.word	0x0800afb8
 800a3ec:	1e7a      	subs	r2, r7, #1
 800a3ee:	ab0c      	add	r3, sp, #48	; 0x30
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a3f8:	a90c      	add	r1, sp, #48	; 0x30
 800a3fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a3fe:	e73e      	b.n	800a27e <__kernel_rem_pio2+0x1ba>
 800a400:	1e7a      	subs	r2, r7, #1
 800a402:	ab0c      	add	r3, sp, #48	; 0x30
 800a404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a408:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a40c:	e7f4      	b.n	800a3f8 <__kernel_rem_pio2+0x334>
 800a40e:	a90c      	add	r1, sp, #48	; 0x30
 800a410:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a414:	3b01      	subs	r3, #1
 800a416:	430a      	orrs	r2, r1
 800a418:	e78b      	b.n	800a332 <__kernel_rem_pio2+0x26e>
 800a41a:	3401      	adds	r4, #1
 800a41c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a420:	2a00      	cmp	r2, #0
 800a422:	d0fa      	beq.n	800a41a <__kernel_rem_pio2+0x356>
 800a424:	ab98      	add	r3, sp, #608	; 0x260
 800a426:	449b      	add	fp, r3
 800a428:	9b07      	ldr	r3, [sp, #28]
 800a42a:	1c7e      	adds	r6, r7, #1
 800a42c:	19dd      	adds	r5, r3, r7
 800a42e:	ab98      	add	r3, sp, #608	; 0x260
 800a430:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a434:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800a438:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800a43c:	443c      	add	r4, r7
 800a43e:	42b4      	cmp	r4, r6
 800a440:	da04      	bge.n	800a44c <__kernel_rem_pio2+0x388>
 800a442:	4627      	mov	r7, r4
 800a444:	e6b1      	b.n	800a1aa <__kernel_rem_pio2+0xe6>
 800a446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a448:	2401      	movs	r4, #1
 800a44a:	e7e7      	b.n	800a41c <__kernel_rem_pio2+0x358>
 800a44c:	f105 0308 	add.w	r3, r5, #8
 800a450:	9309      	str	r3, [sp, #36]	; 0x24
 800a452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a454:	2700      	movs	r7, #0
 800a456:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a45a:	f7f5 ffd3 	bl	8000404 <__aeabi_i2d>
 800a45e:	f04f 0800 	mov.w	r8, #0
 800a462:	f04f 0900 	mov.w	r9, #0
 800a466:	9b08      	ldr	r3, [sp, #32]
 800a468:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a46c:	3b08      	subs	r3, #8
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	f105 0310 	add.w	r3, r5, #16
 800a474:	9305      	str	r3, [sp, #20]
 800a476:	9b06      	ldr	r3, [sp, #24]
 800a478:	429f      	cmp	r7, r3
 800a47a:	dd04      	ble.n	800a486 <__kernel_rem_pio2+0x3c2>
 800a47c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a480:	3601      	adds	r6, #1
 800a482:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a484:	e7db      	b.n	800a43e <__kernel_rem_pio2+0x37a>
 800a486:	9905      	ldr	r1, [sp, #20]
 800a488:	9d00      	ldr	r5, [sp, #0]
 800a48a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a48e:	9105      	str	r1, [sp, #20]
 800a490:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a494:	9500      	str	r5, [sp, #0]
 800a496:	f7f6 f81f 	bl	80004d8 <__aeabi_dmul>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f5 fe63 	bl	800016c <__adddf3>
 800a4a6:	3701      	adds	r7, #1
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	4689      	mov	r9, r1
 800a4ac:	e7e3      	b.n	800a476 <__kernel_rem_pio2+0x3b2>
 800a4ae:	3c01      	subs	r4, #1
 800a4b0:	e745      	b.n	800a33e <__kernel_rem_pio2+0x27a>
 800a4b2:	f1ca 0200 	rsb	r2, sl, #0
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f000 fa95 	bl	800a9e8 <scalbn>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4ba3      	ldr	r3, [pc, #652]	; (800a750 <__kernel_rem_pio2+0x68c>)
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	f7f6 fa8d 	bl	80009e4 <__aeabi_dcmpge>
 800a4ca:	b1f8      	cbz	r0, 800a50c <__kernel_rem_pio2+0x448>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4ba1      	ldr	r3, [pc, #644]	; (800a754 <__kernel_rem_pio2+0x690>)
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	f7f6 faae 	bl	8000a38 <__aeabi_d2iz>
 800a4dc:	4606      	mov	r6, r0
 800a4de:	f7f5 ff91 	bl	8000404 <__aeabi_i2d>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4b9a      	ldr	r3, [pc, #616]	; (800a750 <__kernel_rem_pio2+0x68c>)
 800a4e6:	f7f5 fff7 	bl	80004d8 <__aeabi_dmul>
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7f5 fe39 	bl	8000168 <__aeabi_dsub>
 800a4f6:	f7f6 fa9f 	bl	8000a38 <__aeabi_d2iz>
 800a4fa:	1c7c      	adds	r4, r7, #1
 800a4fc:	ab0c      	add	r3, sp, #48	; 0x30
 800a4fe:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a502:	f10a 0a18 	add.w	sl, sl, #24
 800a506:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a50a:	e720      	b.n	800a34e <__kernel_rem_pio2+0x28a>
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f6 fa92 	bl	8000a38 <__aeabi_d2iz>
 800a514:	ab0c      	add	r3, sp, #48	; 0x30
 800a516:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a51a:	463c      	mov	r4, r7
 800a51c:	e717      	b.n	800a34e <__kernel_rem_pio2+0x28a>
 800a51e:	ab0c      	add	r3, sp, #48	; 0x30
 800a520:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a524:	f7f5 ff6e 	bl	8000404 <__aeabi_i2d>
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	f7f5 ffd4 	bl	80004d8 <__aeabi_dmul>
 800a530:	4652      	mov	r2, sl
 800a532:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a536:	465b      	mov	r3, fp
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f5 ffcc 	bl	80004d8 <__aeabi_dmul>
 800a540:	3d01      	subs	r5, #1
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	e715      	b.n	800a374 <__kernel_rem_pio2+0x2b0>
 800a548:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a54c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a550:	f7f5 ffc2 	bl	80004d8 <__aeabi_dmul>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4650      	mov	r0, sl
 800a55a:	4659      	mov	r1, fp
 800a55c:	f7f5 fe06 	bl	800016c <__adddf3>
 800a560:	4682      	mov	sl, r0
 800a562:	468b      	mov	fp, r1
 800a564:	3701      	adds	r7, #1
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	429f      	cmp	r7, r3
 800a56a:	dc01      	bgt.n	800a570 <__kernel_rem_pio2+0x4ac>
 800a56c:	42bd      	cmp	r5, r7
 800a56e:	daeb      	bge.n	800a548 <__kernel_rem_pio2+0x484>
 800a570:	ab48      	add	r3, sp, #288	; 0x120
 800a572:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a576:	e9c3 ab00 	strd	sl, fp, [r3]
 800a57a:	3501      	adds	r5, #1
 800a57c:	e702      	b.n	800a384 <__kernel_rem_pio2+0x2c0>
 800a57e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a580:	2b03      	cmp	r3, #3
 800a582:	d86c      	bhi.n	800a65e <__kernel_rem_pio2+0x59a>
 800a584:	e8df f003 	tbb	[pc, r3]
 800a588:	022f2f59 	.word	0x022f2f59
 800a58c:	9a06      	ldr	r2, [sp, #24]
 800a58e:	ab48      	add	r3, sp, #288	; 0x120
 800a590:	189d      	adds	r5, r3, r2
 800a592:	46aa      	mov	sl, r5
 800a594:	46a3      	mov	fp, r4
 800a596:	f1bb 0f00 	cmp.w	fp, #0
 800a59a:	f300 8087 	bgt.w	800a6ac <__kernel_rem_pio2+0x5e8>
 800a59e:	46a2      	mov	sl, r4
 800a5a0:	f1ba 0f01 	cmp.w	sl, #1
 800a5a4:	f300 809f 	bgt.w	800a6e6 <__kernel_rem_pio2+0x622>
 800a5a8:	2700      	movs	r7, #0
 800a5aa:	463e      	mov	r6, r7
 800a5ac:	9d06      	ldr	r5, [sp, #24]
 800a5ae:	ab48      	add	r3, sp, #288	; 0x120
 800a5b0:	3508      	adds	r5, #8
 800a5b2:	441d      	add	r5, r3
 800a5b4:	2c01      	cmp	r4, #1
 800a5b6:	f300 80b3 	bgt.w	800a720 <__kernel_rem_pio2+0x65c>
 800a5ba:	9b00      	ldr	r3, [sp, #0]
 800a5bc:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800a5be:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a5c0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a5c2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f040 80b5 	bne.w	800a734 <__kernel_rem_pio2+0x670>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	9804      	ldr	r0, [sp, #16]
 800a5d0:	e9c0 2300 	strd	r2, r3, [r0]
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a5dc:	463a      	mov	r2, r7
 800a5de:	4633      	mov	r3, r6
 800a5e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a5e4:	e03b      	b.n	800a65e <__kernel_rem_pio2+0x59a>
 800a5e6:	f04f 0c00 	mov.w	ip, #0
 800a5ea:	4626      	mov	r6, r4
 800a5ec:	4667      	mov	r7, ip
 800a5ee:	9d06      	ldr	r5, [sp, #24]
 800a5f0:	ab48      	add	r3, sp, #288	; 0x120
 800a5f2:	3508      	adds	r5, #8
 800a5f4:	441d      	add	r5, r3
 800a5f6:	2e00      	cmp	r6, #0
 800a5f8:	da42      	bge.n	800a680 <__kernel_rem_pio2+0x5bc>
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d049      	beq.n	800a694 <__kernel_rem_pio2+0x5d0>
 800a600:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a604:	4662      	mov	r2, ip
 800a606:	460b      	mov	r3, r1
 800a608:	9904      	ldr	r1, [sp, #16]
 800a60a:	2601      	movs	r6, #1
 800a60c:	e9c1 2300 	strd	r2, r3, [r1]
 800a610:	a948      	add	r1, sp, #288	; 0x120
 800a612:	463b      	mov	r3, r7
 800a614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a618:	f7f5 fda6 	bl	8000168 <__aeabi_dsub>
 800a61c:	4684      	mov	ip, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	ad48      	add	r5, sp, #288	; 0x120
 800a622:	42b4      	cmp	r4, r6
 800a624:	da38      	bge.n	800a698 <__kernel_rem_pio2+0x5d4>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	b10b      	cbz	r3, 800a62e <__kernel_rem_pio2+0x56a>
 800a62a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a62e:	4662      	mov	r2, ip
 800a630:	463b      	mov	r3, r7
 800a632:	9904      	ldr	r1, [sp, #16]
 800a634:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a638:	e011      	b.n	800a65e <__kernel_rem_pio2+0x59a>
 800a63a:	2700      	movs	r7, #0
 800a63c:	463d      	mov	r5, r7
 800a63e:	9b06      	ldr	r3, [sp, #24]
 800a640:	aa98      	add	r2, sp, #608	; 0x260
 800a642:	4413      	add	r3, r2
 800a644:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800a648:	2c00      	cmp	r4, #0
 800a64a:	da0f      	bge.n	800a66c <__kernel_rem_pio2+0x5a8>
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	b10b      	cbz	r3, 800a654 <__kernel_rem_pio2+0x590>
 800a650:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a654:	463a      	mov	r2, r7
 800a656:	462b      	mov	r3, r5
 800a658:	9904      	ldr	r1, [sp, #16]
 800a65a:	e9c1 2300 	strd	r2, r3, [r1]
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	f003 0007 	and.w	r0, r3, #7
 800a664:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	4638      	mov	r0, r7
 800a66e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a672:	4629      	mov	r1, r5
 800a674:	f7f5 fd7a 	bl	800016c <__adddf3>
 800a678:	3c01      	subs	r4, #1
 800a67a:	4607      	mov	r7, r0
 800a67c:	460d      	mov	r5, r1
 800a67e:	e7e3      	b.n	800a648 <__kernel_rem_pio2+0x584>
 800a680:	4660      	mov	r0, ip
 800a682:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fd70 	bl	800016c <__adddf3>
 800a68c:	3e01      	subs	r6, #1
 800a68e:	4684      	mov	ip, r0
 800a690:	460f      	mov	r7, r1
 800a692:	e7b0      	b.n	800a5f6 <__kernel_rem_pio2+0x532>
 800a694:	4639      	mov	r1, r7
 800a696:	e7b5      	b.n	800a604 <__kernel_rem_pio2+0x540>
 800a698:	4660      	mov	r0, ip
 800a69a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a69e:	4639      	mov	r1, r7
 800a6a0:	f7f5 fd64 	bl	800016c <__adddf3>
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	4684      	mov	ip, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	e7ba      	b.n	800a622 <__kernel_rem_pio2+0x55e>
 800a6ac:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800a6b0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6bc:	f7f5 fd56 	bl	800016c <__adddf3>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f5 fd4c 	bl	8000168 <__aeabi_dsub>
 800a6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d4:	f7f5 fd4a 	bl	800016c <__adddf3>
 800a6d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a6dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6e0:	e9ca 6700 	strd	r6, r7, [sl]
 800a6e4:	e757      	b.n	800a596 <__kernel_rem_pio2+0x4d2>
 800a6e6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800a6ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6f6:	f7f5 fd39 	bl	800016c <__adddf3>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4680      	mov	r8, r0
 800a700:	4689      	mov	r9, r1
 800a702:	4630      	mov	r0, r6
 800a704:	4639      	mov	r1, r7
 800a706:	f7f5 fd2f 	bl	8000168 <__aeabi_dsub>
 800a70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a70e:	f7f5 fd2d 	bl	800016c <__adddf3>
 800a712:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a716:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a71a:	e9c5 8900 	strd	r8, r9, [r5]
 800a71e:	e73f      	b.n	800a5a0 <__kernel_rem_pio2+0x4dc>
 800a720:	4638      	mov	r0, r7
 800a722:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a726:	4631      	mov	r1, r6
 800a728:	f7f5 fd20 	bl	800016c <__adddf3>
 800a72c:	3c01      	subs	r4, #1
 800a72e:	4607      	mov	r7, r0
 800a730:	460e      	mov	r6, r1
 800a732:	e73f      	b.n	800a5b4 <__kernel_rem_pio2+0x4f0>
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a73a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a73e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a742:	601d      	str	r5, [r3, #0]
 800a744:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a748:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a74c:	615e      	str	r6, [r3, #20]
 800a74e:	e786      	b.n	800a65e <__kernel_rem_pio2+0x59a>
 800a750:	41700000 	.word	0x41700000
 800a754:	3e700000 	.word	0x3e700000

0800a758 <__kernel_sin>:
 800a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75c:	b086      	sub	sp, #24
 800a75e:	e9cd 2300 	strd	r2, r3, [sp]
 800a762:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a766:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a76a:	4682      	mov	sl, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a770:	da03      	bge.n	800a77a <__kernel_sin+0x22>
 800a772:	f7f6 f961 	bl	8000a38 <__aeabi_d2iz>
 800a776:	2800      	cmp	r0, #0
 800a778:	d050      	beq.n	800a81c <__kernel_sin+0xc4>
 800a77a:	4652      	mov	r2, sl
 800a77c:	4623      	mov	r3, r4
 800a77e:	4650      	mov	r0, sl
 800a780:	4621      	mov	r1, r4
 800a782:	f7f5 fea9 	bl	80004d8 <__aeabi_dmul>
 800a786:	4606      	mov	r6, r0
 800a788:	460f      	mov	r7, r1
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4650      	mov	r0, sl
 800a790:	4621      	mov	r1, r4
 800a792:	f7f5 fea1 	bl	80004d8 <__aeabi_dmul>
 800a796:	a33e      	add	r3, pc, #248	; (adr r3, 800a890 <__kernel_sin+0x138>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 fe98 	bl	80004d8 <__aeabi_dmul>
 800a7a8:	a33b      	add	r3, pc, #236	; (adr r3, 800a898 <__kernel_sin+0x140>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f5 fcdb 	bl	8000168 <__aeabi_dsub>
 800a7b2:	4632      	mov	r2, r6
 800a7b4:	463b      	mov	r3, r7
 800a7b6:	f7f5 fe8f 	bl	80004d8 <__aeabi_dmul>
 800a7ba:	a339      	add	r3, pc, #228	; (adr r3, 800a8a0 <__kernel_sin+0x148>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fcd4 	bl	800016c <__adddf3>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	f7f5 fe86 	bl	80004d8 <__aeabi_dmul>
 800a7cc:	a336      	add	r3, pc, #216	; (adr r3, 800a8a8 <__kernel_sin+0x150>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fcc9 	bl	8000168 <__aeabi_dsub>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f7f5 fe7d 	bl	80004d8 <__aeabi_dmul>
 800a7de:	a334      	add	r3, pc, #208	; (adr r3, 800a8b0 <__kernel_sin+0x158>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f7f5 fcc2 	bl	800016c <__adddf3>
 800a7e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ec:	b9dd      	cbnz	r5, 800a826 <__kernel_sin+0xce>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	f7f5 fe6f 	bl	80004d8 <__aeabi_dmul>
 800a7fa:	a32f      	add	r3, pc, #188	; (adr r3, 800a8b8 <__kernel_sin+0x160>)
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	f7f5 fcb2 	bl	8000168 <__aeabi_dsub>
 800a804:	4642      	mov	r2, r8
 800a806:	464b      	mov	r3, r9
 800a808:	f7f5 fe66 	bl	80004d8 <__aeabi_dmul>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4650      	mov	r0, sl
 800a812:	4621      	mov	r1, r4
 800a814:	f7f5 fcaa 	bl	800016c <__adddf3>
 800a818:	4682      	mov	sl, r0
 800a81a:	460c      	mov	r4, r1
 800a81c:	4650      	mov	r0, sl
 800a81e:	4621      	mov	r1, r4
 800a820:	b006      	add	sp, #24
 800a822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a826:	2200      	movs	r2, #0
 800a828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a82c:	4b24      	ldr	r3, [pc, #144]	; (800a8c0 <__kernel_sin+0x168>)
 800a82e:	f7f5 fe53 	bl	80004d8 <__aeabi_dmul>
 800a832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f5 fe4b 	bl	80004d8 <__aeabi_dmul>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a84a:	f7f5 fc8d 	bl	8000168 <__aeabi_dsub>
 800a84e:	4632      	mov	r2, r6
 800a850:	463b      	mov	r3, r7
 800a852:	f7f5 fe41 	bl	80004d8 <__aeabi_dmul>
 800a856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a85a:	f7f5 fc85 	bl	8000168 <__aeabi_dsub>
 800a85e:	a316      	add	r3, pc, #88	; (adr r3, 800a8b8 <__kernel_sin+0x160>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4640      	mov	r0, r8
 800a86a:	4649      	mov	r1, r9
 800a86c:	f7f5 fe34 	bl	80004d8 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fc78 	bl	800016c <__adddf3>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4650      	mov	r0, sl
 800a882:	4621      	mov	r1, r4
 800a884:	f7f5 fc70 	bl	8000168 <__aeabi_dsub>
 800a888:	e7c6      	b.n	800a818 <__kernel_sin+0xc0>
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w
 800a890:	5acfd57c 	.word	0x5acfd57c
 800a894:	3de5d93a 	.word	0x3de5d93a
 800a898:	8a2b9ceb 	.word	0x8a2b9ceb
 800a89c:	3e5ae5e6 	.word	0x3e5ae5e6
 800a8a0:	57b1fe7d 	.word	0x57b1fe7d
 800a8a4:	3ec71de3 	.word	0x3ec71de3
 800a8a8:	19c161d5 	.word	0x19c161d5
 800a8ac:	3f2a01a0 	.word	0x3f2a01a0
 800a8b0:	1110f8a6 	.word	0x1110f8a6
 800a8b4:	3f811111 	.word	0x3f811111
 800a8b8:	55555549 	.word	0x55555549
 800a8bc:	3fc55555 	.word	0x3fc55555
 800a8c0:	3fe00000 	.word	0x3fe00000

0800a8c4 <fabs>:
 800a8c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4770      	bx	lr
 800a8cc:	0000      	movs	r0, r0
	...

0800a8d0 <floor>:
 800a8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a8d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a8dc:	2e13      	cmp	r6, #19
 800a8de:	4607      	mov	r7, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	dc35      	bgt.n	800a954 <floor+0x84>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	da16      	bge.n	800a91a <floor+0x4a>
 800a8ec:	a336      	add	r3, pc, #216	; (adr r3, 800a9c8 <floor+0xf8>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f5 fc3b 	bl	800016c <__adddf3>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f7f6 f87d 	bl	80009f8 <__aeabi_dcmpgt>
 800a8fe:	b148      	cbz	r0, 800a914 <floor+0x44>
 800a900:	2c00      	cmp	r4, #0
 800a902:	da5b      	bge.n	800a9bc <floor+0xec>
 800a904:	2500      	movs	r5, #0
 800a906:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a90a:	4a31      	ldr	r2, [pc, #196]	; (800a9d0 <floor+0x100>)
 800a90c:	433b      	orrs	r3, r7
 800a90e:	42ab      	cmp	r3, r5
 800a910:	bf18      	it	ne
 800a912:	4614      	movne	r4, r2
 800a914:	4623      	mov	r3, r4
 800a916:	462f      	mov	r7, r5
 800a918:	e026      	b.n	800a968 <floor+0x98>
 800a91a:	4a2e      	ldr	r2, [pc, #184]	; (800a9d4 <floor+0x104>)
 800a91c:	fa42 f806 	asr.w	r8, r2, r6
 800a920:	ea01 0208 	and.w	r2, r1, r8
 800a924:	4302      	orrs	r2, r0
 800a926:	d01f      	beq.n	800a968 <floor+0x98>
 800a928:	a327      	add	r3, pc, #156	; (adr r3, 800a9c8 <floor+0xf8>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fc1d 	bl	800016c <__adddf3>
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	f7f6 f85f 	bl	80009f8 <__aeabi_dcmpgt>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d0ea      	beq.n	800a914 <floor+0x44>
 800a93e:	2c00      	cmp	r4, #0
 800a940:	bfbe      	ittt	lt
 800a942:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a946:	fa43 f606 	asrlt.w	r6, r3, r6
 800a94a:	19a4      	addlt	r4, r4, r6
 800a94c:	ea24 0408 	bic.w	r4, r4, r8
 800a950:	2500      	movs	r5, #0
 800a952:	e7df      	b.n	800a914 <floor+0x44>
 800a954:	2e33      	cmp	r6, #51	; 0x33
 800a956:	dd0b      	ble.n	800a970 <floor+0xa0>
 800a958:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a95c:	d104      	bne.n	800a968 <floor+0x98>
 800a95e:	4602      	mov	r2, r0
 800a960:	f7f5 fc04 	bl	800016c <__adddf3>
 800a964:	4607      	mov	r7, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4638      	mov	r0, r7
 800a96a:	4619      	mov	r1, r3
 800a96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a974:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a978:	fa22 f808 	lsr.w	r8, r2, r8
 800a97c:	ea18 0f00 	tst.w	r8, r0
 800a980:	d0f2      	beq.n	800a968 <floor+0x98>
 800a982:	a311      	add	r3, pc, #68	; (adr r3, 800a9c8 <floor+0xf8>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fbf0 	bl	800016c <__adddf3>
 800a98c:	2200      	movs	r2, #0
 800a98e:	2300      	movs	r3, #0
 800a990:	f7f6 f832 	bl	80009f8 <__aeabi_dcmpgt>
 800a994:	2800      	cmp	r0, #0
 800a996:	d0bd      	beq.n	800a914 <floor+0x44>
 800a998:	2c00      	cmp	r4, #0
 800a99a:	da02      	bge.n	800a9a2 <floor+0xd2>
 800a99c:	2e14      	cmp	r6, #20
 800a99e:	d103      	bne.n	800a9a8 <floor+0xd8>
 800a9a0:	3401      	adds	r4, #1
 800a9a2:	ea25 0508 	bic.w	r5, r5, r8
 800a9a6:	e7b5      	b.n	800a914 <floor+0x44>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a9ae:	fa03 f606 	lsl.w	r6, r3, r6
 800a9b2:	4435      	add	r5, r6
 800a9b4:	42bd      	cmp	r5, r7
 800a9b6:	bf38      	it	cc
 800a9b8:	18e4      	addcc	r4, r4, r3
 800a9ba:	e7f2      	b.n	800a9a2 <floor+0xd2>
 800a9bc:	2500      	movs	r5, #0
 800a9be:	462c      	mov	r4, r5
 800a9c0:	e7a8      	b.n	800a914 <floor+0x44>
 800a9c2:	bf00      	nop
 800a9c4:	f3af 8000 	nop.w
 800a9c8:	8800759c 	.word	0x8800759c
 800a9cc:	7e37e43c 	.word	0x7e37e43c
 800a9d0:	bff00000 	.word	0xbff00000
 800a9d4:	000fffff 	.word	0x000fffff

0800a9d8 <matherr>:
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4770      	bx	lr

0800a9dc <nan>:
 800a9dc:	2000      	movs	r0, #0
 800a9de:	4901      	ldr	r1, [pc, #4]	; (800a9e4 <nan+0x8>)
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	7ff80000 	.word	0x7ff80000

0800a9e8 <scalbn>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	4616      	mov	r6, r2
 800a9ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	b982      	cbnz	r2, 800aa1a <scalbn+0x32>
 800a9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9fc:	4303      	orrs	r3, r0
 800a9fe:	d034      	beq.n	800aa6a <scalbn+0x82>
 800aa00:	4b2d      	ldr	r3, [pc, #180]	; (800aab8 <scalbn+0xd0>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	f7f5 fd68 	bl	80004d8 <__aeabi_dmul>
 800aa08:	4b2c      	ldr	r3, [pc, #176]	; (800aabc <scalbn+0xd4>)
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	429e      	cmp	r6, r3
 800aa0e:	460d      	mov	r5, r1
 800aa10:	da0d      	bge.n	800aa2e <scalbn+0x46>
 800aa12:	a325      	add	r3, pc, #148	; (adr r3, 800aaa8 <scalbn+0xc0>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	e01c      	b.n	800aa54 <scalbn+0x6c>
 800aa1a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800aa1e:	42ba      	cmp	r2, r7
 800aa20:	d109      	bne.n	800aa36 <scalbn+0x4e>
 800aa22:	4602      	mov	r2, r0
 800aa24:	f7f5 fba2 	bl	800016c <__adddf3>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	e01d      	b.n	800aa6a <scalbn+0x82>
 800aa2e:	460b      	mov	r3, r1
 800aa30:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa34:	3a36      	subs	r2, #54	; 0x36
 800aa36:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa3a:	4432      	add	r2, r6
 800aa3c:	428a      	cmp	r2, r1
 800aa3e:	dd0c      	ble.n	800aa5a <scalbn+0x72>
 800aa40:	4622      	mov	r2, r4
 800aa42:	462b      	mov	r3, r5
 800aa44:	a11a      	add	r1, pc, #104	; (adr r1, 800aab0 <scalbn+0xc8>)
 800aa46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa4a:	f000 f83b 	bl	800aac4 <copysign>
 800aa4e:	a318      	add	r3, pc, #96	; (adr r3, 800aab0 <scalbn+0xc8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	e7e6      	b.n	800aa28 <scalbn+0x40>
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	dd08      	ble.n	800aa70 <scalbn+0x88>
 800aa5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa66:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa70:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa74:	da0b      	bge.n	800aa8e <scalbn+0xa6>
 800aa76:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa7a:	429e      	cmp	r6, r3
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	dce0      	bgt.n	800aa44 <scalbn+0x5c>
 800aa82:	a109      	add	r1, pc, #36	; (adr r1, 800aaa8 <scalbn+0xc0>)
 800aa84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa88:	f000 f81c 	bl	800aac4 <copysign>
 800aa8c:	e7c1      	b.n	800aa12 <scalbn+0x2a>
 800aa8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa92:	3236      	adds	r2, #54	; 0x36
 800aa94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <scalbn+0xd8>)
 800aaa4:	e7d6      	b.n	800aa54 <scalbn+0x6c>
 800aaa6:	bf00      	nop
 800aaa8:	c2f8f359 	.word	0xc2f8f359
 800aaac:	01a56e1f 	.word	0x01a56e1f
 800aab0:	8800759c 	.word	0x8800759c
 800aab4:	7e37e43c 	.word	0x7e37e43c
 800aab8:	43500000 	.word	0x43500000
 800aabc:	ffff3cb0 	.word	0xffff3cb0
 800aac0:	3c900000 	.word	0x3c900000

0800aac4 <copysign>:
 800aac4:	b530      	push	{r4, r5, lr}
 800aac6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aaca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aace:	ea42 0503 	orr.w	r5, r2, r3
 800aad2:	4629      	mov	r1, r5
 800aad4:	bd30      	pop	{r4, r5, pc}
	...

0800aad8 <_init>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr

0800aae4 <_fini>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	bf00      	nop
 800aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaea:	bc08      	pop	{r3}
 800aaec:	469e      	mov	lr, r3
 800aaee:	4770      	bx	lr
