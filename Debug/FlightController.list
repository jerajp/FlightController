
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a598  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800a6a8  0800a6a8  0001a6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace8  0800ace8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ace8  0800ace8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ace8  0800ace8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800acf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200001e4  0800aed4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800aed4  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001378c  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027d9  00000000  00000000  00033999  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00036178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  00037448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165a3  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d84e  00000000  00000000  0004eb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d54e  00000000  00000000  0005c3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d992f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  000d99ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a690 	.word	0x0800a690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a690 	.word	0x0800a690

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af04      	add	r7, sp, #16
 800102a:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2275      	movs	r2, #117	; 0x75
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f003 fb5a 	bl	80046fc <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b68      	cmp	r3, #104	; 0x68
 800104c:	d101      	bne.n	8001052 <MPU6050_check+0x2e>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 8001052:	2300      	movs	r3, #0

}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	f107 030f 	add.w	r3, r7, #15
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	226b      	movs	r2, #107	; 0x6b
 800107c:	21d0      	movs	r1, #208	; 0xd0
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f003 fa42 	bl	8004508 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8001084:	2307      	movs	r3, #7
 8001086:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2219      	movs	r2, #25
 800109c:	21d0      	movs	r1, #208	; 0xd0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 fa32 	bl	8004508 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 80010a4:	2308      	movs	r3, #8
 80010a6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	f107 030f 	add.w	r3, r7, #15
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	221b      	movs	r2, #27
 80010bc:	21d0      	movs	r1, #208	; 0xd0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f003 fa22 	bl	8004508 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 80010c4:	2310      	movs	r3, #16
 80010c6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030f 	add.w	r3, r7, #15
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	221c      	movs	r2, #28
 80010dc:	21d0      	movs	r1, #208	; 0xd0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f003 fa12 	bl	8004508 <HAL_I2C_Mem_Write>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2306      	movs	r3, #6
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	223b      	movs	r2, #59	; 0x3b
 800110a:	21d0      	movs	r1, #208	; 0xd0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f003 faf5 	bl	80046fc <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	809a      	strh	r2, [r3, #4]

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2306      	movs	r3, #6
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	2243      	movs	r2, #67	; 0x43
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f003 fac3 	bl	80046fc <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001188:	7abb      	ldrb	r3, [r7, #10]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21a      	sxth	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	815a      	strh	r2, [r3, #10]
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	b29b      	uxth	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001222:	4b83      	ldr	r3, [pc, #524]	; (8001430 <main+0x214>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a82      	ldr	r2, [pc, #520]	; (8001430 <main+0x214>)
 8001228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122c:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800122e:	4b81      	ldr	r3, [pc, #516]	; (8001434 <main+0x218>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 8001234:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <main+0x218>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7e      	ldr	r2, [pc, #504]	; (8001434 <main+0x218>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f002 f872 	bl	8003328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 fb2e 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f000 fd66 	bl	8001d18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800124c:	f000 fb86 	bl	800195c <MX_ADC1_Init>
  MX_I2C2_Init();
 8001250:	f000 fbc2 	bl	80019d8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001254:	f000 fbee 	bl	8001a34 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001258:	f000 fc22 	bl	8001aa0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800125c:	f000 fd32 	bl	8001cc4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001260:	f000 fce4 	bl	8001c2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001264:	4874      	ldr	r0, [pc, #464]	; (8001438 <main+0x21c>)
 8001266:	f002 fcf3 	bl	8003c50 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800126a:	4873      	ldr	r0, [pc, #460]	; (8001438 <main+0x21c>)
 800126c:	f002 f9b8 	bl	80035e0 <HAL_ADC_Start>


  HAL_Delay(100);//wait for stable power
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f002 f8bb 	bl	80033ec <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001276:	4871      	ldr	r0, [pc, #452]	; (800143c <main+0x220>)
 8001278:	f7ff fed4 	bl	8001024 <MPU6050_check>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <main+0x224>)
 8001282:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 8001284:	486d      	ldr	r0, [pc, #436]	; (800143c <main+0x220>)
 8001286:	f7ff fee9 	bl	800105c <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 800128a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800128e:	f002 f8ad 	bl	80033ec <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <main+0x228>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6b      	ldr	r2, [pc, #428]	; (8001444 <main+0x228>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a4:	4868      	ldr	r0, [pc, #416]	; (8001448 <main+0x22c>)
 80012a6:	f002 ffd7 	bl	8004258 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 80012aa:	f000 ff63 	bl	8002174 <nRF24_Check>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <main+0x230>)
 80012b4:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80012b6:	f000 ff0b 	bl	80020d0 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80012ba:	20ff      	movs	r0, #255	; 0xff
 80012bc:	f001 f8ec 	bl	8002498 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80012c0:	200f      	movs	r0, #15
 80012c2:	f000 ffe6 	bl	8002292 <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80012c6:	2020      	movs	r0, #32
 80012c8:	f001 f877 	bl	80023ba <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80012cc:	2008      	movs	r0, #8
 80012ce:	f000 ffbf 	bl	8002250 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 ffeb 	bl	80022ae <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80012d8:	495d      	ldr	r1, [pc, #372]	; (8001450 <main+0x234>)
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fff8 	bl	80022d0 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 80012e0:	2207      	movs	r2, #7
 80012e2:	2100      	movs	r1, #0
 80012e4:	2001      	movs	r0, #1
 80012e6:	f001 f883 	bl	80023f0 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80012ea:	4959      	ldr	r1, [pc, #356]	; (8001450 <main+0x234>)
 80012ec:	2006      	movs	r0, #6
 80012ee:	f000 ffef 	bl	80022d0 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80012f2:	2004      	movs	r0, #4
 80012f4:	f001 f846 	bl	8002384 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 ff88 	bl	800220e <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80012fe:	f001 f915 	bl	800252c <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8001302:	2002      	movs	r0, #2
 8001304:	f000 ff64 	bl	80021d0 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	484e      	ldr	r0, [pc, #312]	; (8001448 <main+0x22c>)
 8001310:	f002 ffa2 	bl	8004258 <HAL_GPIO_WritePin>

  //get GYRO offset
  SUMGyroX=0;
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <main+0x238>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x23c>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 8001320:	4b4e      	ldr	r3, [pc, #312]	; (800145c <main+0x240>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
  for(i=0;i<1000;i++)
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <main+0x244>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e026      	b.n	800137c <main+0x160>
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 800132e:	494d      	ldr	r1, [pc, #308]	; (8001464 <main+0x248>)
 8001330:	4842      	ldr	r0, [pc, #264]	; (800143c <main+0x220>)
 8001332:	f7ff ff0d 	bl	8001150 <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001336:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <main+0x248>)
 8001338:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800133c:	461a      	mov	r2, r3
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <main+0x238>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a43      	ldr	r2, [pc, #268]	; (8001454 <main+0x238>)
 8001346:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <main+0x248>)
 800134a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800134e:	461a      	mov	r2, r3
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <main+0x23c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4413      	add	r3, r2
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <main+0x23c>)
 8001358:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <main+0x248>)
 800135c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001360:	461a      	mov	r2, r3
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <main+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a3c      	ldr	r2, [pc, #240]	; (800145c <main+0x240>)
 800136a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f002 f83d 	bl	80033ec <HAL_Delay>
  for(i=0;i<1000;i++)
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <main+0x244>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <main+0x244>)
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b38      	ldr	r3, [pc, #224]	; (8001460 <main+0x244>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001384:	d3d3      	bcc.n	800132e <main+0x112>
  }
  GyroXOff=SUMGyroX/1000;
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <main+0x238>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a37      	ldr	r2, [pc, #220]	; (8001468 <main+0x24c>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1192      	asrs	r2, r2, #6
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <main+0x250>)
 800139a:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <main+0x23c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a31      	ldr	r2, [pc, #196]	; (8001468 <main+0x24c>)
 80013a2:	fb82 1203 	smull	r1, r2, r2, r3
 80013a6:	1192      	asrs	r2, r2, #6
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <main+0x254>)
 80013b0:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <main+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <main+0x24c>)
 80013b8:	fb82 1203 	smull	r1, r2, r2, r3
 80013bc:	1192      	asrs	r2, r2, #6
 80013be:	17db      	asrs	r3, r3, #31
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <main+0x258>)
 80013c6:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <main+0x25c>)
 80013cc:	f004 fd74 	bl	8005eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013d0:	2104      	movs	r1, #4
 80013d2:	4829      	ldr	r0, [pc, #164]	; (8001478 <main+0x25c>)
 80013d4:	f004 fd70 	bl	8005eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013d8:	2108      	movs	r1, #8
 80013da:	4827      	ldr	r0, [pc, #156]	; (8001478 <main+0x25c>)
 80013dc:	f004 fd6c 	bl	8005eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013e0:	210c      	movs	r1, #12
 80013e2:	4825      	ldr	r0, [pc, #148]	; (8001478 <main+0x25c>)
 80013e4:	f004 fd68 	bl	8005eb8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 80013e8:	4824      	ldr	r0, [pc, #144]	; (800147c <main+0x260>)
 80013ea:	f004 fd0d 	bl	8005e08 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f001 fffc 	bl	80033ec <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <main+0x264>)
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <main+0x268>)
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	6018      	str	r0, [r3, #0]
 80013fc:	7912      	ldrb	r2, [r2, #4]
 80013fe:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <main+0x264>)
 8001402:	f7fe fea5 	bl	8000150 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	2301      	movs	r3, #1
 800140c:	491c      	ldr	r1, [pc, #112]	; (8001480 <main+0x264>)
 800140e:	481e      	ldr	r0, [pc, #120]	; (8001488 <main+0x26c>)
 8001410:	f005 fbce 	bl	8006bb0 <HAL_UART_Transmit>

	  if(wifiOK)
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <main+0x230>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d039      	beq.n	8001490 <main+0x274>
	  {
		  sprintf(UartTXbuff0, "Wifi OK \n\r");
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <main+0x264>)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <main+0x270>)
 8001420:	cb03      	ldmia	r3!, {r0, r1}
 8001422:	6010      	str	r0, [r2, #0]
 8001424:	6051      	str	r1, [r2, #4]
 8001426:	8819      	ldrh	r1, [r3, #0]
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	8111      	strh	r1, [r2, #8]
 800142c:	7293      	strb	r3, [r2, #10]
 800142e:	e038      	b.n	80014a2 <main+0x286>
 8001430:	e000edf0 	.word	0xe000edf0
 8001434:	e0001000 	.word	0xe0001000
 8001438:	200003b4 	.word	0x200003b4
 800143c:	20000298 	.word	0x20000298
 8001440:	2000042a 	.word	0x2000042a
 8001444:	40003800 	.word	0x40003800
 8001448:	40010c00 	.word	0x40010c00
 800144c:	2000031c 	.word	0x2000031c
 8001450:	0800a878 	.word	0x0800a878
 8001454:	200004f4 	.word	0x200004f4
 8001458:	20000434 	.word	0x20000434
 800145c:	20000390 	.word	0x20000390
 8001460:	20000204 	.word	0x20000204
 8001464:	200004d0 	.word	0x200004d0
 8001468:	10624dd3 	.word	0x10624dd3
 800146c:	2000030c 	.word	0x2000030c
 8001470:	2000038c 	.word	0x2000038c
 8001474:	2000023a 	.word	0x2000023a
 8001478:	20000438 	.word	0x20000438
 800147c:	20000490 	.word	0x20000490
 8001480:	20000328 	.word	0x20000328
 8001484:	0800a6a8 	.word	0x0800a6a8
 8001488:	200003e8 	.word	0x200003e8
 800148c:	0800a6b0 	.word	0x0800a6b0
	  }
	  else sprintf(UartTXbuff0, "Wifi Fail \n\r");
 8001490:	4aae      	ldr	r2, [pc, #696]	; (800174c <main+0x530>)
 8001492:	4baf      	ldr	r3, [pc, #700]	; (8001750 <main+0x534>)
 8001494:	4614      	mov	r4, r2
 8001496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001498:	6020      	str	r0, [r4, #0]
 800149a:	6061      	str	r1, [r4, #4]
 800149c:	60a2      	str	r2, [r4, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80014a2:	48aa      	ldr	r0, [pc, #680]	; (800174c <main+0x530>)
 80014a4:	f7fe fe54 	bl	8000150 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	2301      	movs	r3, #1
 80014ae:	49a7      	ldr	r1, [pc, #668]	; (800174c <main+0x530>)
 80014b0:	48a8      	ldr	r0, [pc, #672]	; (8001754 <main+0x538>)
 80014b2:	f005 fb7d 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "L-UD=%u L-LR=%u \n\r",Ljoyupdown,Ljoyleftright);
 80014b6:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <main+0x53c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4ba8      	ldr	r3, [pc, #672]	; (800175c <main+0x540>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	49a8      	ldr	r1, [pc, #672]	; (8001760 <main+0x544>)
 80014c0:	48a2      	ldr	r0, [pc, #648]	; (800174c <main+0x530>)
 80014c2:	f006 f9b5 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80014c6:	48a1      	ldr	r0, [pc, #644]	; (800174c <main+0x530>)
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	499e      	ldr	r1, [pc, #632]	; (800174c <main+0x530>)
 80014d4:	489f      	ldr	r0, [pc, #636]	; (8001754 <main+0x538>)
 80014d6:	f005 fb6b 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
 80014da:	4ba2      	ldr	r3, [pc, #648]	; (8001764 <main+0x548>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba2      	ldr	r3, [pc, #648]	; (8001768 <main+0x54c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	49a2      	ldr	r1, [pc, #648]	; (800176c <main+0x550>)
 80014e4:	4899      	ldr	r0, [pc, #612]	; (800174c <main+0x530>)
 80014e6:	f006 f9a3 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80014ea:	4898      	ldr	r0, [pc, #608]	; (800174c <main+0x530>)
 80014ec:	f7fe fe30 	bl	8000150 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	2301      	movs	r3, #1
 80014f6:	4995      	ldr	r1, [pc, #596]	; (800174c <main+0x530>)
 80014f8:	4896      	ldr	r0, [pc, #600]	; (8001754 <main+0x538>)
 80014fa:	f005 fb59 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Pot1=%u Pot2=%u \n\r",potenc1,potenc2);
 80014fe:	4b9c      	ldr	r3, [pc, #624]	; (8001770 <main+0x554>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b9c      	ldr	r3, [pc, #624]	; (8001774 <main+0x558>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	499c      	ldr	r1, [pc, #624]	; (8001778 <main+0x55c>)
 8001508:	4890      	ldr	r0, [pc, #576]	; (800174c <main+0x530>)
 800150a:	f006 f991 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800150e:	488f      	ldr	r0, [pc, #572]	; (800174c <main+0x530>)
 8001510:	f7fe fe1e 	bl	8000150 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	2301      	movs	r3, #1
 800151a:	498c      	ldr	r1, [pc, #560]	; (800174c <main+0x530>)
 800151c:	488d      	ldr	r0, [pc, #564]	; (8001754 <main+0x538>)
 800151e:	f005 fb47 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Togg1=%u Togg2=%u \n\r",togg1,togg2);
 8001522:	4b96      	ldr	r3, [pc, #600]	; (800177c <main+0x560>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b96      	ldr	r3, [pc, #600]	; (8001780 <main+0x564>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4996      	ldr	r1, [pc, #600]	; (8001784 <main+0x568>)
 800152c:	4887      	ldr	r0, [pc, #540]	; (800174c <main+0x530>)
 800152e:	f006 f97f 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001532:	4886      	ldr	r0, [pc, #536]	; (800174c <main+0x530>)
 8001534:	f7fe fe0c 	bl	8000150 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	2301      	movs	r3, #1
 800153e:	4983      	ldr	r1, [pc, #524]	; (800174c <main+0x530>)
 8001540:	4884      	ldr	r0, [pc, #528]	; (8001754 <main+0x538>)
 8001542:	f005 fb35 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "B1=%u B2=%u B3=%u B4=%u \n\r",butt1,butt2,butt3,butt4);
 8001546:	4b90      	ldr	r3, [pc, #576]	; (8001788 <main+0x56c>)
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	4b90      	ldr	r3, [pc, #576]	; (800178c <main+0x570>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	4b90      	ldr	r3, [pc, #576]	; (8001790 <main+0x574>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a90      	ldr	r2, [pc, #576]	; (8001794 <main+0x578>)
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	9201      	str	r2, [sp, #4]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4603      	mov	r3, r0
 800155c:	460a      	mov	r2, r1
 800155e:	498e      	ldr	r1, [pc, #568]	; (8001798 <main+0x57c>)
 8001560:	487a      	ldr	r0, [pc, #488]	; (800174c <main+0x530>)
 8001562:	f006 f965 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001566:	4879      	ldr	r0, [pc, #484]	; (800174c <main+0x530>)
 8001568:	f7fe fdf2 	bl	8000150 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	2301      	movs	r3, #1
 8001572:	4976      	ldr	r1, [pc, #472]	; (800174c <main+0x530>)
 8001574:	4877      	ldr	r0, [pc, #476]	; (8001754 <main+0x538>)
 8001576:	f005 fb1b 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <main+0x580>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <main+0x584>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4988      	ldr	r1, [pc, #544]	; (80017a4 <main+0x588>)
 8001584:	4871      	ldr	r0, [pc, #452]	; (800174c <main+0x530>)
 8001586:	f006 f953 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800158a:	4870      	ldr	r0, [pc, #448]	; (800174c <main+0x530>)
 800158c:	f7fe fde0 	bl	8000150 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	496d      	ldr	r1, [pc, #436]	; (800174c <main+0x530>)
 8001598:	486e      	ldr	r0, [pc, #440]	; (8001754 <main+0x538>)
 800159a:	f005 fb09 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG RECV=%u \n\r",watch1);
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <main+0x58c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4981      	ldr	r1, [pc, #516]	; (80017ac <main+0x590>)
 80015a6:	4869      	ldr	r0, [pc, #420]	; (800174c <main+0x530>)
 80015a8:	f006 f942 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015ac:	4867      	ldr	r0, [pc, #412]	; (800174c <main+0x530>)
 80015ae:	f7fe fdcf 	bl	8000150 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	4964      	ldr	r1, [pc, #400]	; (800174c <main+0x530>)
 80015ba:	4866      	ldr	r0, [pc, #408]	; (8001754 <main+0x538>)
 80015bc:	f005 faf8 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG SEND=%u \n\r",watch2);
 80015c0:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <main+0x594>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	497b      	ldr	r1, [pc, #492]	; (80017b4 <main+0x598>)
 80015c8:	4860      	ldr	r0, [pc, #384]	; (800174c <main+0x530>)
 80015ca:	f006 f931 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015ce:	485f      	ldr	r0, [pc, #380]	; (800174c <main+0x530>)
 80015d0:	f7fe fdbe 	bl	8000150 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	2301      	movs	r3, #1
 80015da:	495c      	ldr	r1, [pc, #368]	; (800174c <main+0x530>)
 80015dc:	485d      	ldr	r0, [pc, #372]	; (8001754 <main+0x538>)
 80015de:	f005 fae7 	bl	8006bb0 <HAL_UART_Transmit>

	  //MPU 6050
	  sprintf(UartTXbuff0, "GYROX=%d Off=%d\n\r",GyroXcal,GyroXOff);
 80015e2:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <main+0x59c>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b74      	ldr	r3, [pc, #464]	; (80017bc <main+0x5a0>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	4973      	ldr	r1, [pc, #460]	; (80017c0 <main+0x5a4>)
 80015f2:	4856      	ldr	r0, [pc, #344]	; (800174c <main+0x530>)
 80015f4:	f006 f91c 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015f8:	4854      	ldr	r0, [pc, #336]	; (800174c <main+0x530>)
 80015fa:	f7fe fda9 	bl	8000150 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29a      	uxth	r2, r3
 8001602:	2301      	movs	r3, #1
 8001604:	4951      	ldr	r1, [pc, #324]	; (800174c <main+0x530>)
 8001606:	4853      	ldr	r0, [pc, #332]	; (8001754 <main+0x538>)
 8001608:	f005 fad2 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYROY=%d Off=%d\n\r",GyroYcal,GyroYOff);
 800160c:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <main+0x5a8>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	461a      	mov	r2, r3
 8001614:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <main+0x5ac>)
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	496c      	ldr	r1, [pc, #432]	; (80017cc <main+0x5b0>)
 800161c:	484b      	ldr	r0, [pc, #300]	; (800174c <main+0x530>)
 800161e:	f006 f907 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001622:	484a      	ldr	r0, [pc, #296]	; (800174c <main+0x530>)
 8001624:	f7fe fd94 	bl	8000150 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	2301      	movs	r3, #1
 800162e:	4947      	ldr	r1, [pc, #284]	; (800174c <main+0x530>)
 8001630:	4848      	ldr	r0, [pc, #288]	; (8001754 <main+0x538>)
 8001632:	f005 fabd 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYROZ=%d Off=%d\n\r",GyroZcal,GyroZOff);
 8001636:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <main+0x5b4>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	461a      	mov	r2, r3
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <main+0x5b8>)
 8001640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001644:	4964      	ldr	r1, [pc, #400]	; (80017d8 <main+0x5bc>)
 8001646:	4841      	ldr	r0, [pc, #260]	; (800174c <main+0x530>)
 8001648:	f006 f8f2 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800164c:	483f      	ldr	r0, [pc, #252]	; (800174c <main+0x530>)
 800164e:	f7fe fd7f 	bl	8000150 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	2301      	movs	r3, #1
 8001658:	493c      	ldr	r1, [pc, #240]	; (800174c <main+0x530>)
 800165a:	483e      	ldr	r0, [pc, #248]	; (8001754 <main+0x538>)
 800165c:	f005 faa8 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC X RAW=%d \n\r",mpu6050DataStr.Accelerometer_X);
 8001660:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <main+0x5c0>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	461a      	mov	r2, r3
 8001668:	495d      	ldr	r1, [pc, #372]	; (80017e0 <main+0x5c4>)
 800166a:	4838      	ldr	r0, [pc, #224]	; (800174c <main+0x530>)
 800166c:	f006 f8e0 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001670:	4836      	ldr	r0, [pc, #216]	; (800174c <main+0x530>)
 8001672:	f7fe fd6d 	bl	8000150 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	4933      	ldr	r1, [pc, #204]	; (800174c <main+0x530>)
 800167e:	4835      	ldr	r0, [pc, #212]	; (8001754 <main+0x538>)
 8001680:	f005 fa96 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Y RAW=%d \n\r",mpu6050DataStr.Accelerometer_Y);
 8001684:	4b55      	ldr	r3, [pc, #340]	; (80017dc <main+0x5c0>)
 8001686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800168a:	461a      	mov	r2, r3
 800168c:	4955      	ldr	r1, [pc, #340]	; (80017e4 <main+0x5c8>)
 800168e:	482f      	ldr	r0, [pc, #188]	; (800174c <main+0x530>)
 8001690:	f006 f8ce 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001694:	482d      	ldr	r0, [pc, #180]	; (800174c <main+0x530>)
 8001696:	f7fe fd5b 	bl	8000150 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	2301      	movs	r3, #1
 80016a0:	492a      	ldr	r1, [pc, #168]	; (800174c <main+0x530>)
 80016a2:	482c      	ldr	r0, [pc, #176]	; (8001754 <main+0x538>)
 80016a4:	f005 fa84 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Z RAW=%d \n\r",mpu6050DataStr.Accelerometer_Z);
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <main+0x5c0>)
 80016aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ae:	461a      	mov	r2, r3
 80016b0:	494d      	ldr	r1, [pc, #308]	; (80017e8 <main+0x5cc>)
 80016b2:	4826      	ldr	r0, [pc, #152]	; (800174c <main+0x530>)
 80016b4:	f006 f8bc 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016b8:	4824      	ldr	r0, [pc, #144]	; (800174c <main+0x530>)
 80016ba:	f7fe fd49 	bl	8000150 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	4921      	ldr	r1, [pc, #132]	; (800174c <main+0x530>)
 80016c6:	4823      	ldr	r0, [pc, #140]	; (8001754 <main+0x538>)
 80016c8:	f005 fa72 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 80016cc:	4b47      	ldr	r3, [pc, #284]	; (80017ec <main+0x5d0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fea9 	bl	8000428 <__aeabi_f2d>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	461a      	mov	r2, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	4944      	ldr	r1, [pc, #272]	; (80017f0 <main+0x5d4>)
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <main+0x530>)
 80016e2:	f006 f8a5 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016e6:	4819      	ldr	r0, [pc, #100]	; (800174c <main+0x530>)
 80016e8:	f7fe fd32 	bl	8000150 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	2301      	movs	r3, #1
 80016f2:	4916      	ldr	r1, [pc, #88]	; (800174c <main+0x530>)
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <main+0x538>)
 80016f6:	f005 fa5b 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <main+0x5d8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fe92 	bl	8000428 <__aeabi_f2d>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	461a      	mov	r2, r3
 800170a:	4623      	mov	r3, r4
 800170c:	493a      	ldr	r1, [pc, #232]	; (80017f8 <main+0x5dc>)
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <main+0x530>)
 8001710:	f006 f88e 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <main+0x530>)
 8001716:	f7fe fd1b 	bl	8000150 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29a      	uxth	r2, r3
 800171e:	2301      	movs	r3, #1
 8001720:	490a      	ldr	r1, [pc, #40]	; (800174c <main+0x530>)
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <main+0x538>)
 8001724:	f005 fa44 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PitchGyro=%.2f PitchAccel=%.2f \n\r",AnglePitchGyro,AnglePitchAccel);
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <main+0x5e0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe7b 	bl	8000428 <__aeabi_f2d>
 8001732:	4605      	mov	r5, r0
 8001734:	460e      	mov	r6, r1
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <main+0x5e4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe74 	bl	8000428 <__aeabi_f2d>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	e9cd 3400 	strd	r3, r4, [sp]
 8001748:	e05c      	b.n	8001804 <main+0x5e8>
 800174a:	bf00      	nop
 800174c:	20000328 	.word	0x20000328
 8001750:	0800a6bc 	.word	0x0800a6bc
 8001754:	200003e8 	.word	0x200003e8
 8001758:	20000478 	.word	0x20000478
 800175c:	200003e4 	.word	0x200003e4
 8001760:	0800a6cc 	.word	0x0800a6cc
 8001764:	200004e4 	.word	0x200004e4
 8001768:	20000230 	.word	0x20000230
 800176c:	0800a6e0 	.word	0x0800a6e0
 8001770:	2000048c 	.word	0x2000048c
 8001774:	200004e8 	.word	0x200004e8
 8001778:	0800a6f4 	.word	0x0800a6f4
 800177c:	20000430 	.word	0x20000430
 8001780:	200004f0 	.word	0x200004f0
 8001784:	0800a708 	.word	0x0800a708
 8001788:	20000484 	.word	0x20000484
 800178c:	200004ec 	.word	0x200004ec
 8001790:	2000042c 	.word	0x2000042c
 8001794:	20000234 	.word	0x20000234
 8001798:	0800a720 	.word	0x0800a720
 800179c:	20000294 	.word	0x20000294
 80017a0:	20000488 	.word	0x20000488
 80017a4:	0800a73c 	.word	0x0800a73c
 80017a8:	20000324 	.word	0x20000324
 80017ac:	0800a754 	.word	0x0800a754
 80017b0:	20000310 	.word	0x20000310
 80017b4:	0800a764 	.word	0x0800a764
 80017b8:	20000238 	.word	0x20000238
 80017bc:	2000030c 	.word	0x2000030c
 80017c0:	0800a774 	.word	0x0800a774
 80017c4:	20000320 	.word	0x20000320
 80017c8:	2000038c 	.word	0x2000038c
 80017cc:	0800a788 	.word	0x0800a788
 80017d0:	20000428 	.word	0x20000428
 80017d4:	2000023a 	.word	0x2000023a
 80017d8:	0800a79c 	.word	0x0800a79c
 80017dc:	200004d0 	.word	0x200004d0
 80017e0:	0800a7b0 	.word	0x0800a7b0
 80017e4:	0800a7c0 	.word	0x0800a7c0
 80017e8:	0800a7d0 	.word	0x0800a7d0
 80017ec:	200005e8 	.word	0x200005e8
 80017f0:	0800a7e0 	.word	0x0800a7e0
 80017f4:	20000608 	.word	0x20000608
 80017f8:	0800a7f0 	.word	0x0800a7f0
 80017fc:	200005f0 	.word	0x200005f0
 8001800:	200005f4 	.word	0x200005f4
 8001804:	462a      	mov	r2, r5
 8001806:	4633      	mov	r3, r6
 8001808:	491f      	ldr	r1, [pc, #124]	; (8001888 <main+0x66c>)
 800180a:	4820      	ldr	r0, [pc, #128]	; (800188c <main+0x670>)
 800180c:	f006 f810 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001810:	481e      	ldr	r0, [pc, #120]	; (800188c <main+0x670>)
 8001812:	f7fe fc9d 	bl	8000150 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	491b      	ldr	r1, [pc, #108]	; (800188c <main+0x670>)
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <main+0x674>)
 8001820:	f005 f9c6 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "RollGyro=%.2f RollAccel=%.2f \n\r",AngleRollGyro,AngleRollAccel);
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <main+0x678>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	4605      	mov	r5, r0
 8001830:	460e      	mov	r6, r1
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <main+0x67c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fdf6 	bl	8000428 <__aeabi_f2d>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	e9cd 3400 	strd	r3, r4, [sp]
 8001844:	462a      	mov	r2, r5
 8001846:	4633      	mov	r3, r6
 8001848:	4914      	ldr	r1, [pc, #80]	; (800189c <main+0x680>)
 800184a:	4810      	ldr	r0, [pc, #64]	; (800188c <main+0x670>)
 800184c:	f005 fff0 	bl	8007830 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001850:	480e      	ldr	r0, [pc, #56]	; (800188c <main+0x670>)
 8001852:	f7fe fc7d 	bl	8000150 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	2301      	movs	r3, #1
 800185c:	490b      	ldr	r1, [pc, #44]	; (800188c <main+0x670>)
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <main+0x674>)
 8001860:	f005 f9a6 	bl	8006bb0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "\n\r" );
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <main+0x670>)
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <main+0x684>)
 8001868:	8811      	ldrh	r1, [r2, #0]
 800186a:	7892      	ldrb	r2, [r2, #2]
 800186c:	8019      	strh	r1, [r3, #0]
 800186e:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <main+0x670>)
 8001872:	f7fe fc6d 	bl	8000150 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <main+0x670>)
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <main+0x674>)
 8001880:	f005 f996 	bl	8006bb0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001884:	e5b3      	b.n	80013ee <main+0x1d2>
 8001886:	bf00      	nop
 8001888:	0800a800 	.word	0x0800a800
 800188c:	20000328 	.word	0x20000328
 8001890:	200003e8 	.word	0x200003e8
 8001894:	20000504 	.word	0x20000504
 8001898:	200005e4 	.word	0x200005e4
 800189c:	0800a824 	.word	0x0800a824
 80018a0:	0800a844 	.word	0x0800a844

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	2228      	movs	r2, #40	; 0x28
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fb64 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e2:	2301      	movs	r3, #1
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fc6a 	bl	80051d4 <HAL_RCC_OscConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001906:	f000 faa9 	bl	8001e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190a:	230f      	movs	r3, #15
 800190c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2102      	movs	r1, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fed4 	bl	80056d4 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001932:	f000 fa93 	bl	8001e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001936:	2302      	movs	r3, #2
 8001938:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800193a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800193e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f862 	bl	8005a0c <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800194e:	f000 fa85 	bl	8001e5c <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	; 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_ADC1_Init+0x74>)
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <MX_ADC1_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_ADC1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_ADC1_Init+0x74>)
 800197a:	2201      	movs	r2, #1
 800197c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_ADC1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_ADC1_Init+0x74>)
 8001986:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800198a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_ADC1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_ADC1_Init+0x74>)
 8001994:	2201      	movs	r2, #1
 8001996:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_ADC1_Init+0x74>)
 800199a:	f001 fd49 	bl	8003430 <HAL_ADC_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019a4:	f000 fa5a 	bl	8001e5c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_ADC1_Init+0x74>)
 80019ba:	f001 ffc5 	bl	8003948 <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019c4:	f000 fa4a 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200003b4 	.word	0x200003b4
 80019d4:	40012400 	.word	0x40012400

080019d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019de:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <MX_I2C2_Init+0x54>)
 80019e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <MX_I2C2_Init+0x58>)
 80019e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MX_I2C2_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_I2C2_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <MX_I2C2_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_I2C2_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_I2C2_Init+0x50>)
 8001a16:	f002 fc4f 	bl	80042b8 <HAL_I2C_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a20:	f000 fa1c 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000298 	.word	0x20000298
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	00061a80 	.word	0x00061a80

08001a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_SPI2_Init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a68:	2208      	movs	r2, #8
 8001a6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a80:	220a      	movs	r2, #10
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_SPI2_Init+0x64>)
 8001a86:	f004 f933 	bl	8005cf0 <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a90:	f000 f9e4 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000023c 	.word	0x2000023c
 8001a9c:	40003800 	.word	0x40003800

08001aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b096      	sub	sp, #88	; 0x58
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fa51 	bl	8006f80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001ae0:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <MX_TIM1_Init+0x188>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001ae6:	2247      	movs	r2, #71	; 0x47
 8001ae8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001af2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0a:	4846      	ldr	r0, [pc, #280]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b0c:	f004 f951 	bl	8005db2 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b16:	f000 f9a1 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b24:	4619      	mov	r1, r3
 8001b26:	483f      	ldr	r0, [pc, #252]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b28:	f004 fbc6 	bl	80062b8 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b32:	f000 f993 	bl	8001e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b36:	483b      	ldr	r0, [pc, #236]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b38:	f004 f989 	bl	8005e4e <HAL_TIM_PWM_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b42:	f000 f98b 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b52:	4619      	mov	r1, r3
 8001b54:	4833      	ldr	r0, [pc, #204]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b56:	f004 ff37 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b60:	f000 f97c 	bl	8001e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b76:	2304      	movs	r3, #4
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4826      	ldr	r0, [pc, #152]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001b8c:	f004 face 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001b96:	f000 f961 	bl	8001e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4820      	ldr	r0, [pc, #128]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001ba4:	f004 fac2 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001bae:	f000 f955 	bl	8001e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001bbc:	f004 fab6 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001bc6:	f000 f949 	bl	8001e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	220c      	movs	r2, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001bd4:	f004 faaa 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001bde:	f000 f93d 	bl	8001e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001c06:	f004 ff23 	bl	8006a50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001c10:	f000 f924 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM1_Init+0x184>)
 8001c16:	f000 fe13 	bl	8002840 <HAL_TIM_MspPostInit>

}
 8001c1a:	bf00      	nop
 8001c1c:	3758      	adds	r7, #88	; 0x58
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000438 	.word	0x20000438
 8001c28:	40012c00 	.word	0x40012c00

08001c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c52:	2247      	movs	r2, #71	; 0x47
 8001c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c72:	f004 f89e 	bl	8005db2 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c7c:	f000 f8ee 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001c8e:	f004 fb13 	bl	80062b8 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c98:	f000 f8e0 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_TIM2_Init+0x94>)
 8001caa:	f004 fe8d 	bl	80069c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb4:	f000 f8d2 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000490 	.word	0x20000490

08001cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_USART1_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cfc:	f004 ff0b 	bl	8006b16 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d06:	f000 f8a9 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003e8 	.word	0x200003e8
 8001d14:	40013800 	.word	0x40013800

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d44:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d4a:	f043 0320 	orr.w	r3, r3, #32
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <MX_GPIO_Init+0x134>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d92:	482f      	ldr	r0, [pc, #188]	; (8001e50 <MX_GPIO_Init+0x138>)
 8001d94:	f002 fa60 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001d9e:	482d      	ldr	r0, [pc, #180]	; (8001e54 <MX_GPIO_Init+0x13c>)
 8001da0:	f002 fa5a 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001dac:	f002 fa54 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4821      	ldr	r0, [pc, #132]	; (8001e50 <MX_GPIO_Init+0x138>)
 8001dca:	f002 f8eb 	bl	8003fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <MX_GPIO_Init+0x13c>)
 8001de8:	f002 f8dc 	bl	8003fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001e02:	f002 f8cf 	bl	8003fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	480e      	ldr	r0, [pc, #56]	; (8001e58 <MX_GPIO_Init+0x140>)
 8001e20:	f002 f8c0 	bl	8003fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8001e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_GPIO_Init+0x13c>)
 8001e3e:	f002 f8b1 	bl	8003fa4 <HAL_GPIO_Init>

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40010c00 	.word	0x40010c00
 8001e58:	40010800 	.word	0x40010800

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <nRF24_TransmitPacket+0x98>)
 8001e76:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7e:	4821      	ldr	r0, [pc, #132]	; (8001f04 <nRF24_TransmitPacket+0x9c>)
 8001e80:	f002 f9ea 	bl	8004258 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb64 	bl	8002556 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e94:	481b      	ldr	r0, [pc, #108]	; (8001f04 <nRF24_TransmitPacket+0x9c>)
 8001e96:	f002 f9df 	bl	8004258 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001e9a:	f000 fb24 	bl	80024e6 <nRF24_GetStatus>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	60ba      	str	r2, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f1      	bne.n	8001e9a <nRF24_TransmitPacket+0x32>
 8001eb6:	e000      	b.n	8001eba <nRF24_TransmitPacket+0x52>
			break;
 8001eb8:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec0:	4810      	ldr	r0, [pc, #64]	; (8001f04 <nRF24_TransmitPacket+0x9c>)
 8001ec2:	f002 f9c9 	bl	8004258 <HAL_GPIO_WritePin>

	if (!wait) {
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e012      	b.n	8001ef6 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001ed0:	f000 fb2c 	bl	800252c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e009      	b.n	8001ef6 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e002      	b.n	8001ef6 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001ef0:	f000 fb0c 	bl	800250c <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	000fffff 	.word	0x000fffff
 8001f04:	40010c00 	.word	0x40010c00

08001f08 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001f12:	bf00      	nop
 8001f14:	2102      	movs	r1, #2
 8001f16:	480e      	ldr	r0, [pc, #56]	; (8001f50 <nRF24_LL_RW+0x48>)
 8001f18:	f7ff f966 	bl	80011e8 <SPI_I2S_GetFlagStatus>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f8      	beq.n	8001f14 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	4809      	ldr	r0, [pc, #36]	; (8001f50 <nRF24_LL_RW+0x48>)
 8001f2a:	f7ff f943 	bl	80011b4 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001f2e:	bf00      	nop
 8001f30:	2101      	movs	r1, #1
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <nRF24_LL_RW+0x48>)
 8001f34:	f7ff f958 	bl	80011e8 <SPI_I2S_GetFlagStatus>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f8      	beq.n	8001f30 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001f3e:	4804      	ldr	r0, [pc, #16]	; (8001f50 <nRF24_LL_RW+0x48>)
 8001f40:	f7ff f946 	bl	80011d0 <SPI_I2S_ReceiveData>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b2db      	uxtb	r3, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40003800 	.word	0x40003800

08001f54 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <nRF24_ReadReg+0x44>)
 8001f66:	f002 f977 	bl	8004258 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffc8 	bl	8001f08 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001f78:	20ff      	movs	r0, #255	; 0xff
 8001f7a:	f7ff ffc5 	bl	8001f08 <nRF24_LL_RW>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <nRF24_ReadReg+0x44>)
 8001f8a:	f002 f965 	bl	8004258 <HAL_GPIO_WritePin>

	return value;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010800 	.word	0x40010800

08001f9c <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb2:	481a      	ldr	r0, [pc, #104]	; (800201c <nRF24_WriteReg+0x80>)
 8001fb4:	f002 f950 	bl	8004258 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	2b1f      	cmp	r3, #31
 8001fbc:	d810      	bhi.n	8001fe0 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff99 	bl	8001f08 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff95 	bl	8001f08 <nRF24_LL_RW>
 8001fde:	e013      	b.n	8002008 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff90 	bl	8001f08 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2be1      	cmp	r3, #225	; 0xe1
 8001fec:	d00c      	beq.n	8002008 <nRF24_WriteReg+0x6c>
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2be2      	cmp	r3, #226	; 0xe2
 8001ff2:	d009      	beq.n	8002008 <nRF24_WriteReg+0x6c>
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2be3      	cmp	r3, #227	; 0xe3
 8001ff8:	d006      	beq.n	8002008 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2bff      	cmp	r3, #255	; 0xff
 8001ffe:	d003      	beq.n	8002008 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff80 	bl	8001f08 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200e:	4803      	ldr	r0, [pc, #12]	; (800201c <nRF24_WriteReg+0x80>)
 8002010:	f002 f922 	bl	8004258 <HAL_GPIO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010800 	.word	0x40010800

08002020 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	480f      	ldr	r0, [pc, #60]	; (8002074 <nRF24_ReadMBReg+0x54>)
 8002038:	f002 f90e 	bl	8004258 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff62 	bl	8001f08 <nRF24_LL_RW>
	while (count--) {
 8002044:	e007      	b.n	8002056 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002046:	683c      	ldr	r4, [r7, #0]
 8002048:	1c63      	adds	r3, r4, #1
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	20ff      	movs	r0, #255	; 0xff
 800204e:	f7ff ff5b 	bl	8001f08 <nRF24_LL_RW>
 8002052:	4603      	mov	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	71ba      	strb	r2, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f2      	bne.n	8002046 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8002060:	2201      	movs	r2, #1
 8002062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <nRF24_ReadMBReg+0x54>)
 8002068:	f002 f8f6 	bl	8004258 <HAL_GPIO_WritePin>
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	40010800 	.word	0x40010800

08002078 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800208e:	480f      	ldr	r0, [pc, #60]	; (80020cc <nRF24_WriteMBReg+0x54>)
 8002090:	f002 f8e2 	bl	8004258 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff36 	bl	8001f08 <nRF24_LL_RW>
	while (count--) {
 800209c:	e006      	b.n	80020ac <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	603a      	str	r2, [r7, #0]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff2e 	bl	8001f08 <nRF24_LL_RW>
	while (count--) {
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	71ba      	strb	r2, [r7, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f3      	bne.n	800209e <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <nRF24_WriteMBReg+0x54>)
 80020be:	f002 f8cb 	bl	8004258 <HAL_GPIO_WritePin>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010800 	.word	0x40010800

080020d0 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80020d4:	2108      	movs	r1, #8
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff ff60 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80020dc:	213f      	movs	r1, #63	; 0x3f
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff ff5c 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80020e4:	2103      	movs	r1, #3
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7ff ff58 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80020ec:	2103      	movs	r1, #3
 80020ee:	2003      	movs	r0, #3
 80020f0:	f7ff ff54 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80020f4:	2103      	movs	r1, #3
 80020f6:	2004      	movs	r0, #4
 80020f8:	f7ff ff50 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80020fc:	2102      	movs	r1, #2
 80020fe:	2005      	movs	r0, #5
 8002100:	f7ff ff4c 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002104:	210e      	movs	r1, #14
 8002106:	2006      	movs	r0, #6
 8002108:	f7ff ff48 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800210c:	2100      	movs	r1, #0
 800210e:	2007      	movs	r0, #7
 8002110:	f7ff ff44 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002114:	2100      	movs	r1, #0
 8002116:	2011      	movs	r0, #17
 8002118:	f7ff ff40 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800211c:	2100      	movs	r1, #0
 800211e:	2012      	movs	r0, #18
 8002120:	f7ff ff3c 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002124:	2100      	movs	r1, #0
 8002126:	2013      	movs	r0, #19
 8002128:	f7ff ff38 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800212c:	2100      	movs	r1, #0
 800212e:	2014      	movs	r0, #20
 8002130:	f7ff ff34 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002134:	2100      	movs	r1, #0
 8002136:	2015      	movs	r0, #21
 8002138:	f7ff ff30 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800213c:	2100      	movs	r1, #0
 800213e:	2016      	movs	r0, #22
 8002140:	f7ff ff2c 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002144:	2100      	movs	r1, #0
 8002146:	201c      	movs	r0, #28
 8002148:	f7ff ff28 	bl	8001f9c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800214c:	2100      	movs	r1, #0
 800214e:	201d      	movs	r0, #29
 8002150:	f7ff ff24 	bl	8001f9c <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8002154:	f000 f9e2 	bl	800251c <nRF24_FlushRX>
	nRF24_FlushTX();
 8002158:	f000 f9d8 	bl	800250c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800215c:	f000 f9e6 	bl	800252c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002166:	4802      	ldr	r0, [pc, #8]	; (8002170 <nRF24_Init+0xa0>)
 8002168:	f002 f876 	bl	8004258 <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010800 	.word	0x40010800

08002174 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <nRF24_Check+0x58>)
 800217c:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800217e:	2205      	movs	r2, #5
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	2030      	movs	r0, #48	; 0x30
 8002184:	f7ff ff78 	bl	8002078 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002188:	463b      	mov	r3, r7
 800218a:	2205      	movs	r2, #5
 800218c:	4619      	mov	r1, r3
 800218e:	2010      	movs	r0, #16
 8002190:	f7ff ff46 	bl	8002020 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e010      	b.n	80021bc <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	f107 0210 	add.w	r2, r7, #16
 80021a0:	4413      	add	r3, r2
 80021a2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <nRF24_Check+0x42>
 80021b2:	2300      	movs	r3, #0
 80021b4:	e006      	b.n	80021c4 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d9eb      	bls.n	800219a <nRF24_Check+0x26>
	}

	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	0800a848 	.word	0x0800a848

080021d0 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff feba 	bl	8001f54 <nRF24_ReadReg>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d104      	bne.n	80021f4 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e003      	b.n	80021fc <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	f023 0302 	bic.w	r3, r3, #2
 80021fa:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	4619      	mov	r1, r3
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff fecb 	bl	8001f9c <nRF24_WriteReg>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fe9b 	bl	8001f54 <nRF24_ReadReg>
 800221e:	4603      	mov	r3, r0
 8002220:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	b25a      	sxtb	r2, r3
 8002234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002238:	4313      	orrs	r3, r2
 800223a:	b25b      	sxtb	r3, r3
 800223c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4619      	mov	r1, r3
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff feaa 	bl	8001f9c <nRF24_WriteReg>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fe7a 	bl	8001f54 <nRF24_ReadReg>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	f023 030c 	bic.w	r3, r3, #12
 800226a:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	b25a      	sxtb	r2, r3
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4313      	orrs	r3, r2
 800227c:	b25b      	sxtb	r3, r3
 800227e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4619      	mov	r1, r3
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff fe89 	bl	8001f9c <nRF24_WriteReg>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4619      	mov	r1, r3
 80022a0:	2005      	movs	r0, #5
 80022a2:	f7ff fe7b 	bl	8001f9c <nRF24_WriteReg>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	3b02      	subs	r3, #2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	2003      	movs	r0, #3
 80022c2:	f7ff fe6b 	bl	8001f9c <nRF24_WriteReg>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d846      	bhi.n	8002370 <nRF24_SetAddr+0xa0>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <nRF24_SetAddr+0x18>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	08002305 	.word	0x08002305
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800235d 	.word	0x0800235d
 80022f4:	0800235d 	.word	0x0800235d
 80022f8:	0800235d 	.word	0x0800235d
 80022fc:	0800235d 	.word	0x0800235d
 8002300:	08002305 	.word	0x08002305
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002304:	2003      	movs	r0, #3
 8002306:	f7ff fe25 	bl	8001f54 <nRF24_ReadReg>
 800230a:	4603      	mov	r3, r0
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002318:	2200      	movs	r2, #0
 800231a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231e:	4817      	ldr	r0, [pc, #92]	; (800237c <nRF24_SetAddr+0xac>)
 8002320:	f001 ff9a 	bl	8004258 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <nRF24_SetAddr+0xb0>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	f043 0320 	orr.w	r3, r3, #32
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fde9 	bl	8001f08 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	603a      	str	r2, [r7, #0]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fde2 	bl	8001f08 <nRF24_LL_RW>
			} while (addr_width--);
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	73fa      	strb	r2, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f3      	bne.n	8002336 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <nRF24_SetAddr+0xac>)
 8002356:	f001 ff7f 	bl	8004258 <HAL_GPIO_WritePin>
			break;
 800235a:	e00a      	b.n	8002372 <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <nRF24_SetAddr+0xb0>)
 8002360:	5cd2      	ldrb	r2, [r2, r3]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fe17 	bl	8001f9c <nRF24_WriteReg>
			break;
 800236e:	e000      	b.n	8002372 <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002370:	bf00      	nop
	}
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40010800 	.word	0x40010800
 8002380:	0800a884 	.word	0x0800a884

08002384 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800238e:	2006      	movs	r0, #6
 8002390:	f7ff fde0 	bl	8001f54 <nRF24_ReadReg>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	f023 0306 	bic.w	r3, r3, #6
 800239e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	4619      	mov	r1, r3
 80023ac:	2006      	movs	r0, #6
 80023ae:	f7ff fdf5 	bl	8001f9c <nRF24_WriteReg>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80023c4:	2006      	movs	r0, #6
 80023c6:	f7ff fdc5 	bl	8001f54 <nRF24_ReadReg>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80023d4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	4313      	orrs	r3, r2
 80023dc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4619      	mov	r1, r3
 80023e2:	2006      	movs	r0, #6
 80023e4:	f7ff fdda 	bl	8001f9c <nRF24_WriteReg>
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	460b      	mov	r3, r1
 80023fc:	71bb      	strb	r3, [r7, #6]
 80023fe:	4613      	mov	r3, r2
 8002400:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002402:	2002      	movs	r0, #2
 8002404:	f7ff fda6 	bl	8001f54 <nRF24_ReadReg>
 8002408:	4603      	mov	r3, r0
 800240a:	b25a      	sxtb	r2, r3
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	b25b      	sxtb	r3, r3
 8002416:	4313      	orrs	r3, r2
 8002418:	b25b      	sxtb	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002420:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	4619      	mov	r1, r3
 8002426:	2002      	movs	r0, #2
 8002428:	f7ff fdb8 	bl	8001f9c <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4a19      	ldr	r2, [pc, #100]	; (8002494 <nRF24_SetRXPipe+0xa4>)
 8002430:	5cd2      	ldrb	r2, [r2, r3]
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7ff fdad 	bl	8001f9c <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff fd86 	bl	8001f54 <nRF24_ReadReg>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10a      	bne.n	8002468 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2201      	movs	r2, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	b25a      	sxtb	r2, r3
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002460:	4313      	orrs	r3, r2
 8002462:	b25b      	sxtb	r3, r3
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	e00b      	b.n	8002480 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2201      	movs	r2, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	b25b      	sxtb	r3, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	b25a      	sxtb	r2, r3
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4013      	ands	r3, r2
 800247c:	b25b      	sxtb	r3, r3
 800247e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	4619      	mov	r1, r3
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff fd89 	bl	8001f9c <nRF24_WriteReg>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800a87c 	.word	0x0800a87c

08002498 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d904      	bls.n	80024b2 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80024a8:	2100      	movs	r1, #0
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff fd76 	bl	8001f9c <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80024b0:	e015      	b.n	80024de <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff fd4e 	bl	8001f54 <nRF24_ReadReg>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2201      	movs	r2, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	4619      	mov	r1, r3
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff fd5f 	bl	8001f9c <nRF24_WriteReg>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80024ea:	2007      	movs	r0, #7
 80024ec:	f7ff fd32 	bl	8001f54 <nRF24_ReadReg>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80024fa:	2017      	movs	r0, #23
 80024fc:	f7ff fd2a 	bl	8001f54 <nRF24_ReadReg>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	b2db      	uxtb	r3, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}

0800250c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	20e1      	movs	r0, #225	; 0xe1
 8002514:	f7ff fd42 	bl	8001f9c <nRF24_WriteReg>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002520:	21ff      	movs	r1, #255	; 0xff
 8002522:	20e2      	movs	r0, #226	; 0xe2
 8002524:	f7ff fd3a 	bl	8001f9c <nRF24_WriteReg>
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002532:	2007      	movs	r0, #7
 8002534:	f7ff fd0e 	bl	8001f54 <nRF24_ReadReg>
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002542:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	4619      	mov	r1, r3
 8002548:	2007      	movs	r0, #7
 800254a:	f7ff fd27 	bl	8001f9c <nRF24_WriteReg>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	461a      	mov	r2, r3
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	20a0      	movs	r0, #160	; 0xa0
 800256a:	f7ff fd85 	bl	8002078 <nRF24_WriteMBReg>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8002582:	2007      	movs	r0, #7
 8002584:	f7ff fce6 	bl	8001f54 <nRF24_ReadReg>
 8002588:	4603      	mov	r3, r0
 800258a:	105b      	asrs	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d816      	bhi.n	80025c8 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <nRF24_ReadPayload+0x60>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fcd7 	bl	8001f54 <nRF24_ReadReg>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	2061      	movs	r0, #97	; 0x61
 80025c0:	f7ff fd2e 	bl	8002020 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	e003      	b.n	80025d0 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80025ce:	23ff      	movs	r3, #255	; 0xff
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	0800a87c 	.word	0x0800a87c

080025dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_MspInit+0x5c>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_MspInit+0x5c>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_MspInit+0x5c>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_MspInit+0x5c>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_MspInit+0x5c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_MspInit+0x5c>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_MspInit+0x60>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_MspInit+0x60>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000
 800263c:	40010000 	.word	0x40010000

08002640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_ADC_MspInit+0x6c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d121      	bne.n	80026a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_ADC_MspInit+0x70>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002694:	2303      	movs	r3, #3
 8002696:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4619      	mov	r1, r3
 800269e:	4805      	ldr	r0, [pc, #20]	; (80026b4 <HAL_ADC_MspInit+0x74>)
 80026a0:	f001 fc80 	bl	8003fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40012400 	.word	0x40012400
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010800 	.word	0x40010800

080026b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <HAL_I2C_MspInit+0x74>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d124      	bne.n	8002722 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_I2C_MspInit+0x78>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_I2C_MspInit+0x78>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_I2C_MspInit+0x78>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f6:	2312      	movs	r3, #18
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4619      	mov	r1, r3
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <HAL_I2C_MspInit+0x7c>)
 8002706:	f001 fc4d 	bl	8003fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_I2C_MspInit+0x78>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_I2C_MspInit+0x78>)
 8002710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_I2C_MspInit+0x78>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40005800 	.word	0x40005800
 8002730:	40021000 	.word	0x40021000
 8002734:	40010c00 	.word	0x40010c00

08002738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_SPI_MspInit+0x8c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d131      	bne.n	80027bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 800275e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002762:	61d3      	str	r3, [r2, #28]
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_SPI_MspInit+0x90>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002788:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800278c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <HAL_SPI_MspInit+0x94>)
 800279e:	f001 fc01 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_SPI_MspInit+0x94>)
 80027b8:	f001 fbf4 	bl	8003fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40003800 	.word	0x40003800
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010c00 	.word	0x40010c00

080027d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_TIM_Base_MspInit+0x68>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10c      	bne.n	80027fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 80027e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ec:	6193      	str	r3, [r2, #24]
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027fa:	e018      	b.n	800282e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d113      	bne.n	800282e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_TIM_Base_MspInit+0x6c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2101      	movs	r1, #1
 8002822:	201c      	movs	r0, #28
 8002824:	f001 fb87 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002828:	201c      	movs	r0, #28
 800282a:	f001 fba0 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_TIM_MspPostInit+0x5c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d118      	bne.n	8002892 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_TIM_MspPostInit+0x60>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_TIM_MspPostInit+0x60>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_TIM_MspPostInit+0x60>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002878:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800287c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2302      	movs	r3, #2
 8002884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <HAL_TIM_MspPostInit+0x64>)
 800288e:	f001 fb89 	bl	8003fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010800 	.word	0x40010800

080028a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_UART_MspInit+0xa4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d13d      	bne.n	8002944 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0xa8>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f8:	2340      	movs	r3, #64	; 0x40
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4812      	ldr	r0, [pc, #72]	; (8002954 <HAL_UART_MspInit+0xac>)
 800290c:	f001 fb4a 	bl	8003fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	480c      	ldr	r0, [pc, #48]	; (8002954 <HAL_UART_MspInit+0xac>)
 8002924:	f001 fb3e 	bl	8003fa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_UART_MspInit+0xb0>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_UART_MspInit+0xb0>)
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3728      	adds	r7, #40	; 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40013800 	.word	0x40013800
 8002950:	40021000 	.word	0x40021000
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40010000 	.word	0x40010000

0800295c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <HardFault_Handler+0x4>

0800296e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <MemManage_Handler+0x4>

08002974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <BusFault_Handler+0x4>

0800297a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <UsageFault_Handler+0x4>

08002980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a8:	f000 fd04 	bl	80033b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b6:	4891      	ldr	r0, [pc, #580]	; (8002bfc <TIM2_IRQHandler+0x24c>)
 80029b8:	f003 fab0 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <TIM2_IRQHandler+0x250>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a8f      	ldr	r2, [pc, #572]	; (8002c00 <TIM2_IRQHandler+0x250>)
 80029c4:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 80029c6:	4b8e      	ldr	r3, [pc, #568]	; (8002c00 <TIM2_IRQHandler+0x250>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2bf9      	cmp	r3, #249	; 0xf9
 80029cc:	d907      	bls.n	80029de <TIM2_IRQHandler+0x2e>
  {
	  LEDcount=0;
 80029ce:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <TIM2_IRQHandler+0x250>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80029d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d8:	488a      	ldr	r0, [pc, #552]	; (8002c04 <TIM2_IRQHandler+0x254>)
 80029da:	f001 fc55 	bl	8004288 <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029e4:	4888      	ldr	r0, [pc, #544]	; (8002c08 <TIM2_IRQHandler+0x258>)
 80029e6:	f001 fc37 	bl	8004258 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 80029ea:	210a      	movs	r1, #10
 80029ec:	4887      	ldr	r0, [pc, #540]	; (8002c0c <TIM2_IRQHandler+0x25c>)
 80029ee:	f000 fea5 	bl	800373c <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 80029f2:	4886      	ldr	r0, [pc, #536]	; (8002c0c <TIM2_IRQHandler+0x25c>)
 80029f4:	f000 ff9c 	bl	8003930 <HAL_ADC_GetValue>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f94a 	bl	8000c94 <__aeabi_ui2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4983      	ldr	r1, [pc, #524]	; (8002c10 <TIM2_IRQHandler+0x260>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f99d 	bl	8000d44 <__aeabi_fmul>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fae9 	bl	8000fe4 <__aeabi_f2uiz>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <TIM2_IRQHandler+0x264>)
 8002a16:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8002a18:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <TIM2_IRQHandler+0x268>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7d      	ldr	r2, [pc, #500]	; (8002c14 <TIM2_IRQHandler+0x264>)
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	497e      	ldr	r1, [pc, #504]	; (8002c1c <TIM2_IRQHandler+0x26c>)
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8002a26:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <TIM2_IRQHandler+0x268>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a7a      	ldr	r2, [pc, #488]	; (8002c18 <TIM2_IRQHandler+0x268>)
 8002a2e:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8002a30:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <TIM2_IRQHandler+0x268>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b31      	cmp	r3, #49	; 0x31
 8002a36:	d902      	bls.n	8002a3e <TIM2_IRQHandler+0x8e>
 8002a38:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <TIM2_IRQHandler+0x268>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8002a3e:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <TIM2_IRQHandler+0x270>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8002a44:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <TIM2_IRQHandler+0x274>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00e      	b.n	8002a6a <TIM2_IRQHandler+0xba>
  {
	  BattmVSUM+=BAttmVhist[i];
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <TIM2_IRQHandler+0x274>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <TIM2_IRQHandler+0x26c>)
 8002a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a56:	4b72      	ldr	r3, [pc, #456]	; (8002c20 <TIM2_IRQHandler+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a70      	ldr	r2, [pc, #448]	; (8002c20 <TIM2_IRQHandler+0x270>)
 8002a5e:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <TIM2_IRQHandler+0x274>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <TIM2_IRQHandler+0x274>)
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	; (8002c24 <TIM2_IRQHandler+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b31      	cmp	r3, #49	; 0x31
 8002a70:	d9ec      	bls.n	8002a4c <TIM2_IRQHandler+0x9c>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8002a72:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <TIM2_IRQHandler+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6c      	ldr	r2, [pc, #432]	; (8002c28 <TIM2_IRQHandler+0x278>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	4a6b      	ldr	r2, [pc, #428]	; (8002c2c <TIM2_IRQHandler+0x27c>)
 8002a80:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------


  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <TIM2_IRQHandler+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06f      	beq.n	8002b6a <TIM2_IRQHandler+0x1ba>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8002a8a:	f7ff fd34 	bl	80024f6 <nRF24_GetStatus_RXFIFO>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d06a      	beq.n	8002b6a <TIM2_IRQHandler+0x1ba>
  		{
  			watch1++;
 8002a94:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <TIM2_IRQHandler+0x284>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	4a66      	ldr	r2, [pc, #408]	; (8002c34 <TIM2_IRQHandler+0x284>)
 8002a9c:	6013      	str	r3, [r2, #0]

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8002a9e:	4966      	ldr	r1, [pc, #408]	; (8002c38 <TIM2_IRQHandler+0x288>)
 8002aa0:	4866      	ldr	r0, [pc, #408]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002aa2:	f7ff fd69 	bl	8002578 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8002aa6:	f7ff fd41 	bl	800252c <nRF24_ClearIRQFlags>

  			Ljoyupdown=nRF24_payloadRX[0];
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <TIM2_IRQHandler+0x290>)
 8002ab2:	601a      	str	r2, [r3, #0]
  			Ljoyleftright=nRF24_payloadRX[1];
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b62      	ldr	r3, [pc, #392]	; (8002c44 <TIM2_IRQHandler+0x294>)
 8002abc:	601a      	str	r2, [r3, #0]
  			Djoyupdown=nRF24_payloadRX[2];
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <TIM2_IRQHandler+0x298>)
 8002ac6:	601a      	str	r2, [r3, #0]
  			Djoyleftright=nRF24_payloadRX[3];
 8002ac8:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002aca:	78db      	ldrb	r3, [r3, #3]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <TIM2_IRQHandler+0x29c>)
 8002ad0:	601a      	str	r2, [r3, #0]
  			potenc1=nRF24_payloadRX[4];
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <TIM2_IRQHandler+0x2a0>)
 8002ada:	601a      	str	r2, [r3, #0]
  			potenc2=nRF24_payloadRX[5];
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <TIM2_IRQHandler+0x2a4>)
 8002ae4:	601a      	str	r2, [r3, #0]

  			togg1=nRF24_payloadRX[6]>>7;
 8002ae6:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002ae8:	799b      	ldrb	r3, [r3, #6]
 8002aea:	09db      	lsrs	r3, r3, #7
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <TIM2_IRQHandler+0x2a8>)
 8002af2:	601a      	str	r2, [r3, #0]
  			togg2=(nRF24_payloadRX[6] & 64 )>>6;
 8002af4:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002af6:	799b      	ldrb	r3, [r3, #6]
 8002af8:	119b      	asrs	r3, r3, #6
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <TIM2_IRQHandler+0x2ac>)
 8002b00:	6013      	str	r3, [r2, #0]
  			butt1=(nRF24_payloadRX[6] & 32 )>>5;
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b04:	799b      	ldrb	r3, [r3, #6]
 8002b06:	115b      	asrs	r3, r3, #5
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <TIM2_IRQHandler+0x2b0>)
 8002b0e:	6013      	str	r3, [r2, #0]
  			butt2=(nRF24_payloadRX[6] & 16 )>>4;
 8002b10:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b12:	799b      	ldrb	r3, [r3, #6]
 8002b14:	111b      	asrs	r3, r3, #4
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <TIM2_IRQHandler+0x2b4>)
 8002b1c:	6013      	str	r3, [r2, #0]
  			butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b20:	799b      	ldrb	r3, [r3, #6]
 8002b22:	10db      	asrs	r3, r3, #3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <TIM2_IRQHandler+0x2b8>)
 8002b2a:	6013      	str	r3, [r2, #0]
  			butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8002b2c:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b2e:	799b      	ldrb	r3, [r3, #6]
 8002b30:	109b      	asrs	r3, r3, #2
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <TIM2_IRQHandler+0x2bc>)
 8002b38:	6013      	str	r3, [r2, #0]
  			buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b3c:	799b      	ldrb	r3, [r3, #6]
 8002b3e:	105b      	asrs	r3, r3, #1
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <TIM2_IRQHandler+0x2c0>)
 8002b46:	6013      	str	r3, [r2, #0]
  			buttD=(nRF24_payloadRX[6] & 1 );
 8002b48:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <TIM2_IRQHandler+0x28c>)
 8002b4a:	799b      	ldrb	r3, [r3, #6]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	4a48      	ldr	r2, [pc, #288]	; (8002c74 <TIM2_IRQHandler+0x2c4>)
 8002b52:	6013      	str	r3, [r2, #0]

  			SendBackFlag=1;
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <TIM2_IRQHandler+0x2c8>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <TIM2_IRQHandler+0x280>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <TIM2_IRQHandler+0x2cc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <TIM2_IRQHandler+0x2cc>)
 8002b68:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <TIM2_IRQHandler+0x2c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8096 	beq.w	8002ca0 <TIM2_IRQHandler+0x2f0>
  {
    	BackTimer++;
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <TIM2_IRQHandler+0x2d0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a41      	ldr	r2, [pc, #260]	; (8002c80 <TIM2_IRQHandler+0x2d0>)
 8002b7c:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <TIM2_IRQHandler+0x2d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	f200 808b 	bhi.w	8002ca0 <TIM2_IRQHandler+0x2f0>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <TIM2_IRQHandler+0x1e0>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002ba9 	.word	0x08002ba9
 8002b94:	08002ca1 	.word	0x08002ca1
 8002b98:	08002ca1 	.word	0x08002ca1
 8002b9c:	08002bbd 	.word	0x08002bbd
 8002ba0:	08002be7 	.word	0x08002be7
 8002ba4:	08002c8d 	.word	0x08002c8d
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bae:	4816      	ldr	r0, [pc, #88]	; (8002c08 <TIM2_IRQHandler+0x258>)
 8002bb0:	f001 fb52 	bl	8004258 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7ff fb2a 	bl	800220e <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8002bba:	e071      	b.n	8002ca0 <TIM2_IRQHandler+0x2f0>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <TIM2_IRQHandler+0x27c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <TIM2_IRQHandler+0x2d4>)
 8002bc4:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <TIM2_IRQHandler+0x27c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <TIM2_IRQHandler+0x2d4>)
 8002bd0:	705a      	strb	r2, [r3, #1]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 2);
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	482b      	ldr	r0, [pc, #172]	; (8002c84 <TIM2_IRQHandler+0x2d4>)
 8002bd6:	f7ff f947 	bl	8001e68 <nRF24_TransmitPacket>
  	 	 			watch2++;
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <TIM2_IRQHandler+0x2d8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <TIM2_IRQHandler+0x2d8>)
 8002be2:	6013      	str	r3, [r2, #0]
  	 	 	 	 }break;
 8002be4:	e05c      	b.n	8002ca0 <TIM2_IRQHandler+0x2f0>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7ff fb11 	bl	800220e <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8002bec:	2201      	movs	r2, #1
 8002bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <TIM2_IRQHandler+0x258>)
 8002bf4:	f001 fb30 	bl	8004258 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8002bf8:	e052      	b.n	8002ca0 <TIM2_IRQHandler+0x2f0>
 8002bfa:	bf00      	nop
 8002bfc:	20000490 	.word	0x20000490
 8002c00:	20000600 	.word	0x20000600
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40010c00 	.word	0x40010c00
 8002c0c:	200003b4 	.word	0x200003b4
 8002c10:	4090ac29 	.word	0x4090ac29
 8002c14:	20000604 	.word	0x20000604
 8002c18:	20000214 	.word	0x20000214
 8002c1c:	20000514 	.word	0x20000514
 8002c20:	2000020c 	.word	0x2000020c
 8002c24:	20000204 	.word	0x20000204
 8002c28:	51eb851f 	.word	0x51eb851f
 8002c2c:	20000210 	.word	0x20000210
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000324 	.word	0x20000324
 8002c38:	20000200 	.word	0x20000200
 8002c3c:	200002ec 	.word	0x200002ec
 8002c40:	20000478 	.word	0x20000478
 8002c44:	200003e4 	.word	0x200003e4
 8002c48:	200004e4 	.word	0x200004e4
 8002c4c:	20000230 	.word	0x20000230
 8002c50:	2000048c 	.word	0x2000048c
 8002c54:	200004e8 	.word	0x200004e8
 8002c58:	20000430 	.word	0x20000430
 8002c5c:	200004f0 	.word	0x200004f0
 8002c60:	20000484 	.word	0x20000484
 8002c64:	200004ec 	.word	0x200004ec
 8002c68:	2000042c 	.word	0x2000042c
 8002c6c:	20000234 	.word	0x20000234
 8002c70:	20000294 	.word	0x20000294
 8002c74:	20000488 	.word	0x20000488
 8002c78:	20000218 	.word	0x20000218
 8002c7c:	20000510 	.word	0x20000510
 8002c80:	2000021c 	.word	0x2000021c
 8002c84:	20000394 	.word	0x20000394
 8002c88:	20000310 	.word	0x20000310

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <TIM2_IRQHandler+0x328>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <TIM2_IRQHandler+0x32c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <TIM2_IRQHandler+0x330>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

  				}break;
 8002c9e:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <TIM2_IRQHandler+0x334>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <TIM2_IRQHandler+0x334>)
 8002ca8:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <TIM2_IRQHandler+0x334>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb2:	d12a      	bne.n	8002d0a <TIM2_IRQHandler+0x35a>
  {
    		MSGprerSecond=MSGcount;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <TIM2_IRQHandler+0x338>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <TIM2_IRQHandler+0x33c>)
 8002cba:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <TIM2_IRQHandler+0x338>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	d819      	bhi.n	8002cf8 <TIM2_IRQHandler+0x348>
    		{
    			MSGLowCount++;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <TIM2_IRQHandler+0x340>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <TIM2_IRQHandler+0x340>)
 8002ccc:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <TIM2_IRQHandler+0x344>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e013      	b.n	8002cfe <TIM2_IRQHandler+0x34e>
 8002cd6:	bf00      	nop
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000218 	.word	0x20000218
 8002ce0:	2000021c 	.word	0x2000021c
 8002ce4:	200004fc 	.word	0x200004fc
 8002ce8:	20000510 	.word	0x20000510
 8002cec:	200005e0 	.word	0x200005e0
 8002cf0:	200005dc 	.word	0x200005dc
 8002cf4:	200005fc 	.word	0x200005fc
    		}
    		 else  ConnectWeakFlag=0;
 8002cf8:	4bb5      	ldr	r3, [pc, #724]	; (8002fd0 <TIM2_IRQHandler+0x620>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002cfe:	4bb5      	ldr	r3, [pc, #724]	; (8002fd4 <TIM2_IRQHandler+0x624>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8002d04:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <TIM2_IRQHandler+0x628>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8002d0a:	49b4      	ldr	r1, [pc, #720]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002d0c:	48b4      	ldr	r0, [pc, #720]	; (8002fe0 <TIM2_IRQHandler+0x630>)
 8002d0e:	f7fe f9ed 	bl	80010ec <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8002d12:	49b2      	ldr	r1, [pc, #712]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002d14:	48b2      	ldr	r0, [pc, #712]	; (8002fe0 <TIM2_IRQHandler+0x630>)
 8002d16:	f7fe fa1b 	bl	8001150 <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8002d1a:	4bb0      	ldr	r3, [pc, #704]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002d1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	4bb0      	ldr	r3, [pc, #704]	; (8002fe4 <TIM2_IRQHandler+0x634>)
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b21a      	sxth	r2, r3
 8002d30:	4bad      	ldr	r3, [pc, #692]	; (8002fe8 <TIM2_IRQHandler+0x638>)
 8002d32:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8002d34:	4ba9      	ldr	r3, [pc, #676]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002d36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4bab      	ldr	r3, [pc, #684]	; (8002fec <TIM2_IRQHandler+0x63c>)
 8002d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	4ba9      	ldr	r3, [pc, #676]	; (8002ff0 <TIM2_IRQHandler+0x640>)
 8002d4c:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8002d4e:	4ba3      	ldr	r3, [pc, #652]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002d50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	4ba7      	ldr	r3, [pc, #668]	; (8002ff4 <TIM2_IRQHandler+0x644>)
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	4ba4      	ldr	r3, [pc, #656]	; (8002ff8 <TIM2_IRQHandler+0x648>)
 8002d66:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTOR;
 8002d68:	4b9f      	ldr	r3, [pc, #636]	; (8002fe8 <TIM2_IRQHandler+0x638>)
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd ff94 	bl	8000c9c <__aeabi_i2f>
 8002d74:	4603      	mov	r3, r0
 8002d76:	49a1      	ldr	r1, [pc, #644]	; (8002ffc <TIM2_IRQHandler+0x64c>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd ffe3 	bl	8000d44 <__aeabi_fmul>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b9f      	ldr	r3, [pc, #636]	; (8003000 <TIM2_IRQHandler+0x650>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fd fed3 	bl	8000b34 <__addsf3>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b9b      	ldr	r3, [pc, #620]	; (8003000 <TIM2_IRQHandler+0x650>)
 8002d94:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTOR;
 8002d96:	4b96      	ldr	r3, [pc, #600]	; (8002ff0 <TIM2_IRQHandler+0x640>)
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ff7d 	bl	8000c9c <__aeabi_i2f>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4995      	ldr	r1, [pc, #596]	; (8002ffc <TIM2_IRQHandler+0x64c>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd ffcc 	bl	8000d44 <__aeabi_fmul>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b94      	ldr	r3, [pc, #592]	; (8003004 <TIM2_IRQHandler+0x654>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f7fd febc 	bl	8000b34 <__addsf3>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b90      	ldr	r3, [pc, #576]	; (8003004 <TIM2_IRQHandler+0x654>)
 8002dc2:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTOR);
 8002dc4:	4b8e      	ldr	r3, [pc, #568]	; (8003000 <TIM2_IRQHandler+0x650>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb2d 	bl	8000428 <__aeabi_f2d>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	460d      	mov	r5, r1
 8002dd2:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <TIM2_IRQHandler+0x654>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fb26 	bl	8000428 <__aeabi_f2d>
 8002ddc:	4680      	mov	r8, r0
 8002dde:	4689      	mov	r9, r1
 8002de0:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <TIM2_IRQHandler+0x648>)
 8002de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd ff58 	bl	8000c9c <__aeabi_i2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4986      	ldr	r1, [pc, #536]	; (8003008 <TIM2_IRQHandler+0x658>)
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ffa7 	bl	8000d44 <__aeabi_fmul>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4980      	ldr	r1, [pc, #512]	; (8002ffc <TIM2_IRQHandler+0x64c>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd ffa2 	bl	8000d44 <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb10 	bl	8000428 <__aeabi_f2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f006 f8fc 	bl	800900c <sin>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	f7fd fb5c 	bl	80004d8 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd f9a0 	bl	800016c <__adddf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	f7fd fe28 	bl	8000a88 <__aeabi_d2f>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b71      	ldr	r3, [pc, #452]	; (8003000 <TIM2_IRQHandler+0x650>)
 8002e3c:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTOR);
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <TIM2_IRQHandler+0x654>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd faf0 	bl	8000428 <__aeabi_f2d>
 8002e48:	4604      	mov	r4, r0
 8002e4a:	460d      	mov	r5, r1
 8002e4c:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <TIM2_IRQHandler+0x650>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fae9 	bl	8000428 <__aeabi_f2d>
 8002e56:	4680      	mov	r8, r0
 8002e58:	4689      	mov	r9, r1
 8002e5a:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <TIM2_IRQHandler+0x648>)
 8002e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff1b 	bl	8000c9c <__aeabi_i2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4967      	ldr	r1, [pc, #412]	; (8003008 <TIM2_IRQHandler+0x658>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff6a 	bl	8000d44 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4962      	ldr	r1, [pc, #392]	; (8002ffc <TIM2_IRQHandler+0x64c>)
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ff65 	bl	8000d44 <__aeabi_fmul>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fad3 	bl	8000428 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f006 f8bf 	bl	800900c <sin>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4640      	mov	r0, r8
 8002e94:	4649      	mov	r1, r9
 8002e96:	f7fd fb1f 	bl	80004d8 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7fd f961 	bl	8000168 <__aeabi_dsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4621      	mov	r1, r4
 8002eae:	f7fd fdeb 	bl	8000a88 <__aeabi_d2f>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <TIM2_IRQHandler+0x654>)
 8002eb6:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 8002eb8:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec6:	fb03 f202 	mul.w	r2, r3, r2
 8002eca:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ed8:	fb03 f301 	mul.w	r3, r3, r1
 8002edc:	441a      	add	r2, r3
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002ee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002ee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eec:	fb03 f301 	mul.w	r3, r3, r1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fa86 	bl	8000404 <__aeabi_i2d>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	4618      	mov	r0, r3
 8002efe:	4621      	mov	r1, r4
 8002f00:	f006 f912 	bl	8009128 <sqrt>
 8002f04:	4603      	mov	r3, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	f7fd fdbc 	bl	8000a88 <__aeabi_d2f>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b3e      	ldr	r3, [pc, #248]	; (800300c <TIM2_IRQHandler+0x65c>)
 8002f14:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002f18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd febd 	bl	8000c9c <__aeabi_i2f>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <TIM2_IRQHandler+0x65c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7fd ffbe 	bl	8000eac <__aeabi_fdiv>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fa78 	bl	8000428 <__aeabi_f2d>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	4621      	mov	r1, r4
 8002f40:	f006 f89e 	bl	8009080 <asin>
 8002f44:	a320      	add	r3, pc, #128	; (adr r3, 8002fc8 <TIM2_IRQHandler+0x618>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd fac5 	bl	80004d8 <__aeabi_dmul>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	4618      	mov	r0, r3
 8002f54:	4621      	mov	r1, r4
 8002f56:	f7fd fd97 	bl	8000a88 <__aeabi_d2f>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <TIM2_IRQHandler+0x660>)
 8002f5e:	601a      	str	r2, [r3, #0]
  AngleRollAccel=asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <TIM2_IRQHandler+0x62c>)
 8002f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fe98 	bl	8000c9c <__aeabi_i2f>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <TIM2_IRQHandler+0x65c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7fd ff99 	bl	8000eac <__aeabi_fdiv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fa53 	bl	8000428 <__aeabi_f2d>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	4618      	mov	r0, r3
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f006 f879 	bl	8009080 <asin>
 8002f8e:	a30e      	add	r3, pc, #56	; (adr r3, 8002fc8 <TIM2_IRQHandler+0x618>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd faa0 	bl	80004d8 <__aeabi_dmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	f7fd fd72 	bl	8000a88 <__aeabi_d2f>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <TIM2_IRQHandler+0x664>)
 8002fa8:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <TIM2_IRQHandler+0x660>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	491a      	ldr	r1, [pc, #104]	; (8003018 <TIM2_IRQHandler+0x668>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fdbd 	bl	8000b30 <__aeabi_fsub>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <TIM2_IRQHandler+0x660>)
 8002fbc:	601a      	str	r2, [r3, #0]
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <TIM2_IRQHandler+0x664>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4916      	ldr	r1, [pc, #88]	; (800301c <TIM2_IRQHandler+0x66c>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	e02b      	b.n	8003020 <TIM2_IRQHandler+0x670>
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	404ca5dc 	.word	0x404ca5dc
 8002fd0:	200005fc 	.word	0x200005fc
 8002fd4:	20000510 	.word	0x20000510
 8002fd8:	200004fc 	.word	0x200004fc
 8002fdc:	200004d0 	.word	0x200004d0
 8002fe0:	20000298 	.word	0x20000298
 8002fe4:	2000030c 	.word	0x2000030c
 8002fe8:	20000238 	.word	0x20000238
 8002fec:	2000038c 	.word	0x2000038c
 8002ff0:	20000320 	.word	0x20000320
 8002ff4:	2000023a 	.word	0x2000023a
 8002ff8:	20000428 	.word	0x20000428
 8002ffc:	38001203 	.word	0x38001203
 8003000:	200005f0 	.word	0x200005f0
 8003004:	20000504 	.word	0x20000504
 8003008:	3c8efa35 	.word	0x3c8efa35
 800300c:	20000500 	.word	0x20000500
 8003010:	200005f4 	.word	0x200005f4
 8003014:	200005e4 	.word	0x200005e4
 8003018:	3e4ccccd 	.word	0x3e4ccccd
 800301c:	400ccccd 	.word	0x400ccccd
 8003020:	f7fd fd86 	bl	8000b30 <__aeabi_fsub>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b6b      	ldr	r3, [pc, #428]	; (80031d8 <TIM2_IRQHandler+0x828>)
 800302a:	601a      	str	r2, [r3, #0]

  if(!StartupAngleSet)
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <TIM2_IRQHandler+0x82c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <TIM2_IRQHandler+0x69c>
  {
	  AnglePitch=AnglePitchAccel;
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <TIM2_IRQHandler+0x830>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <TIM2_IRQHandler+0x834>)
 800303a:	6013      	str	r3, [r2, #0]
	  AngleRoll=AngleRollAccel;
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <TIM2_IRQHandler+0x828>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <TIM2_IRQHandler+0x838>)
 8003042:	6013      	str	r3, [r2, #0]
	  StartupAngleSet=1; //First angles set to accelorometer at startup
 8003044:	4b65      	ldr	r3, [pc, #404]	; (80031dc <TIM2_IRQHandler+0x82c>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e04d      	b.n	80030e8 <TIM2_IRQHandler+0x738>
  }
  else
  {
	  AnglePitch=0.98*AnglePitchGyro + 0.02*AnglePitchAccel;
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <TIM2_IRQHandler+0x83c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd f9e9 	bl	8000428 <__aeabi_f2d>
 8003056:	a35c      	add	r3, pc, #368	; (adr r3, 80031c8 <TIM2_IRQHandler+0x818>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd fa3c 	bl	80004d8 <__aeabi_dmul>
 8003060:	4603      	mov	r3, r0
 8003062:	460c      	mov	r4, r1
 8003064:	4625      	mov	r5, r4
 8003066:	461c      	mov	r4, r3
 8003068:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <TIM2_IRQHandler+0x830>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd f9db 	bl	8000428 <__aeabi_f2d>
 8003072:	a357      	add	r3, pc, #348	; (adr r3, 80031d0 <TIM2_IRQHandler+0x820>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fa2e 	bl	80004d8 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd f872 	bl	800016c <__adddf3>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	4618      	mov	r0, r3
 800308e:	4621      	mov	r1, r4
 8003090:	f7fd fcfa 	bl	8000a88 <__aeabi_d2f>
 8003094:	4602      	mov	r2, r0
 8003096:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <TIM2_IRQHandler+0x834>)
 8003098:	601a      	str	r2, [r3, #0]
	  AngleRoll=0.98*AngleRollGyro + 0.02*AngleRollAccel;
 800309a:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <TIM2_IRQHandler+0x840>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd f9c2 	bl	8000428 <__aeabi_f2d>
 80030a4:	a348      	add	r3, pc, #288	; (adr r3, 80031c8 <TIM2_IRQHandler+0x818>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fa15 	bl	80004d8 <__aeabi_dmul>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	4625      	mov	r5, r4
 80030b4:	461c      	mov	r4, r3
 80030b6:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <TIM2_IRQHandler+0x828>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f9b4 	bl	8000428 <__aeabi_f2d>
 80030c0:	a343      	add	r3, pc, #268	; (adr r3, 80031d0 <TIM2_IRQHandler+0x820>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f7fd fa07 	bl	80004d8 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd f84b 	bl	800016c <__adddf3>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	4618      	mov	r0, r3
 80030dc:	4621      	mov	r1, r4
 80030de:	f7fd fcd3 	bl	8000a88 <__aeabi_d2f>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <TIM2_IRQHandler+0x838>)
 80030e6:	601a      	str	r2, [r3, #0]

  }
  //-------------------------------------------------------------------

  //testing------------------------------------------------------------
  if(togg1==1 && ConnectWeakFlag==0)MotorStatus=1;
 80030e8:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <TIM2_IRQHandler+0x844>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <TIM2_IRQHandler+0x750>
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <TIM2_IRQHandler+0x848>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <TIM2_IRQHandler+0x750>
 80030f8:	4b40      	ldr	r3, [pc, #256]	; (80031fc <TIM2_IRQHandler+0x84c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e002      	b.n	8003106 <TIM2_IRQHandler+0x756>
  else MotorStatus=0;
 8003100:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <TIM2_IRQHandler+0x84c>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

  if(MotorStatus==0)
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <TIM2_IRQHandler+0x84c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <TIM2_IRQHandler+0x780>
  {
	  PWM_Mot1=1000;
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <TIM2_IRQHandler+0x850>)
 8003110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003114:	601a      	str	r2, [r3, #0]
	  PWM_Mot2=1000;
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <TIM2_IRQHandler+0x854>)
 8003118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311c:	601a      	str	r2, [r3, #0]
	  PWM_Mot3=1000;
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <TIM2_IRQHandler+0x858>)
 8003120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003124:	601a      	str	r2, [r3, #0]
	  PWM_Mot4=1000;
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <TIM2_IRQHandler+0x85c>)
 8003128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e02b      	b.n	8003188 <TIM2_IRQHandler+0x7d8>
  }
  else if(MotorStatus==1)
 8003130:	4b32      	ldr	r3, [pc, #200]	; (80031fc <TIM2_IRQHandler+0x84c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d127      	bne.n	8003188 <TIM2_IRQHandler+0x7d8>
  {
	  PWM_Mot1=1000 + potenc1*10;
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <TIM2_IRQHandler+0x860>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <TIM2_IRQHandler+0x850>)
 800314a:	6013      	str	r3, [r2, #0]
	  PWM_Mot2=1000 + potenc1*10;
 800314c:	4b30      	ldr	r3, [pc, #192]	; (8003210 <TIM2_IRQHandler+0x860>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800315c:	4a29      	ldr	r2, [pc, #164]	; (8003204 <TIM2_IRQHandler+0x854>)
 800315e:	6013      	str	r3, [r2, #0]
	  PWM_Mot3=1000 + potenc1*10;
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <TIM2_IRQHandler+0x860>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <TIM2_IRQHandler+0x858>)
 8003172:	6013      	str	r3, [r2, #0]
	  PWM_Mot4=1000 + potenc1*10;
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <TIM2_IRQHandler+0x860>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003184:	4a21      	ldr	r2, [pc, #132]	; (800320c <TIM2_IRQHandler+0x85c>)
 8003186:	6013      	str	r3, [r2, #0]
  }//-------------------------------------------------------------------

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8003188:	4b22      	ldr	r3, [pc, #136]	; (8003214 <TIM2_IRQHandler+0x864>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <TIM2_IRQHandler+0x850>)
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <TIM2_IRQHandler+0x864>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <TIM2_IRQHandler+0x854>)
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <TIM2_IRQHandler+0x864>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <TIM2_IRQHandler+0x858>)
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <TIM2_IRQHandler+0x864>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <TIM2_IRQHandler+0x85c>)
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b6:	4818      	ldr	r0, [pc, #96]	; (8003218 <TIM2_IRQHandler+0x868>)
 80031b8:	f001 f84e 	bl	8004258 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031c2:	bf00      	nop
 80031c4:	f3af 8000 	nop.w
 80031c8:	f5c28f5c 	.word	0xf5c28f5c
 80031cc:	3fef5c28 	.word	0x3fef5c28
 80031d0:	47ae147b 	.word	0x47ae147b
 80031d4:	3f947ae1 	.word	0x3f947ae1
 80031d8:	200005e4 	.word	0x200005e4
 80031dc:	20000220 	.word	0x20000220
 80031e0:	200005f4 	.word	0x200005f4
 80031e4:	200005e8 	.word	0x200005e8
 80031e8:	20000608 	.word	0x20000608
 80031ec:	200005f0 	.word	0x200005f0
 80031f0:	20000504 	.word	0x20000504
 80031f4:	20000430 	.word	0x20000430
 80031f8:	200005fc 	.word	0x200005fc
 80031fc:	20000208 	.word	0x20000208
 8003200:	200005f8 	.word	0x200005f8
 8003204:	2000050c 	.word	0x2000050c
 8003208:	20000508 	.word	0x20000508
 800320c:	200005ec 	.word	0x200005ec
 8003210:	2000048c 	.word	0x2000048c
 8003214:	20000438 	.word	0x20000438
 8003218:	40010c00 	.word	0x40010c00

0800321c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <_sbrk+0x50>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x16>
		heap_end = &end;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <_sbrk+0x50>)
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <_sbrk+0x54>)
 8003230:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <_sbrk+0x50>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <_sbrk+0x50>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	466a      	mov	r2, sp
 8003242:	4293      	cmp	r3, r2
 8003244:	d907      	bls.n	8003256 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003246:	f003 fe71 	bl	8006f2c <__errno>
 800324a:	4602      	mov	r2, r0
 800324c:	230c      	movs	r3, #12
 800324e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003254:	e006      	b.n	8003264 <_sbrk+0x48>
	}

	heap_end += incr;
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <_sbrk+0x50>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a03      	ldr	r2, [pc, #12]	; (800326c <_sbrk+0x50>)
 8003260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000224 	.word	0x20000224
 8003270:	20000618 	.word	0x20000618

08003274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <SystemInit+0x5c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <SystemInit+0x5c>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <SystemInit+0x5c>)
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4911      	ldr	r1, [pc, #68]	; (80032d0 <SystemInit+0x5c>)
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <SystemInit+0x60>)
 800328c:	4013      	ands	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <SystemInit+0x5c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <SystemInit+0x5c>)
 8003296:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800329a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <SystemInit+0x5c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SystemInit+0x5c>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <SystemInit+0x5c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <SystemInit+0x5c>)
 80032b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80032b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SystemInit+0x5c>)
 80032ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80032be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SystemInit+0x64>)
 80032c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000
 80032d4:	f8ff0000 	.word	0xf8ff0000
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032de:	e003      	b.n	80032e8 <LoopCopyDataInit>

080032e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80032e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032e6:	3104      	adds	r1, #4

080032e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032e8:	480a      	ldr	r0, [pc, #40]	; (8003314 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80032ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032f0:	d3f6      	bcc.n	80032e0 <CopyDataInit>
  ldr r2, =_sbss
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80032f4:	e002      	b.n	80032fc <LoopFillZerobss>

080032f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80032f8:	f842 3b04 	str.w	r3, [r2], #4

080032fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80032fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003300:	d3f9      	bcc.n	80032f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003302:	f7ff ffb7 	bl	8003274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003306:	f003 fe17 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800330a:	f7fd ff87 	bl	800121c <main>
  bx lr
 800330e:	4770      	bx	lr
  ldr r3, =_sidata
 8003310:	0800acf0 	.word	0x0800acf0
  ldr r0, =_sdata
 8003314:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003318:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800331c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8003320:	20000614 	.word	0x20000614

08003324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC1_2_IRQHandler>
	...

08003328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_Init+0x28>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a07      	ldr	r2, [pc, #28]	; (8003350 <HAL_Init+0x28>)
 8003332:	f043 0310 	orr.w	r3, r3, #16
 8003336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003338:	2003      	movs	r0, #3
 800333a:	f000 fdf1 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800333e:	2002      	movs	r0, #2
 8003340:	f000 f808 	bl	8003354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003344:	f7ff f94a 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40022000 	.word	0x40022000

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_InitTick+0x54>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_InitTick+0x58>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800336a:	fbb3 f3f1 	udiv	r3, r3, r1
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fe09 	bl	8003f8a <HAL_SYSTICK_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e00e      	b.n	80033a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d80a      	bhi.n	800339e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003388:	2200      	movs	r2, #0
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003390:	f000 fdd1 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <HAL_InitTick+0x5c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000004 	.word	0x20000004
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	20000008 	.word	0x20000008

080033b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_IncTick+0x1c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_IncTick+0x20>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a03      	ldr	r2, [pc, #12]	; (80033d4 <HAL_IncTick+0x20>)
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	2000060c 	.word	0x2000060c

080033d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return uwTick;
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <HAL_GetTick+0x10>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	2000060c 	.word	0x2000060c

080033ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7ff fff0 	bl	80033d8 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003404:	d005      	beq.n	8003412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_Delay+0x40>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003412:	bf00      	nop
 8003414:	f7ff ffe0 	bl	80033d8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d8f7      	bhi.n	8003414 <HAL_Delay+0x28>
  {
  }
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000000c 	.word	0x2000000c

08003430 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0be      	b.n	80035d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff f8e6 	bl	8002640 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fbb1 	bl	8003bdc <ADC_ConversionStop_Disable>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8099 	bne.w	80035be <HAL_ADC_Init+0x18e>
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8095 	bne.w	80035be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800349c:	f023 0302 	bic.w	r3, r3, #2
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7b1b      	ldrb	r3, [r3, #12]
 80034b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c8:	d003      	beq.n	80034d2 <HAL_ADC_Init+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_ADC_Init+0xa8>
 80034d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d6:	e000      	b.n	80034da <HAL_ADC_Init+0xaa>
 80034d8:	2300      	movs	r3, #0
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7d1b      	ldrb	r3, [r3, #20]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7b1b      	ldrb	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	035a      	lsls	r2, r3, #13
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e00b      	b.n	800351c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_ADC_Init+0x1a8>)
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	430b      	orrs	r3, r1
 8003542:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d003      	beq.n	8003556 <HAL_ADC_Init+0x126>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d104      	bne.n	8003560 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	3b01      	subs	r3, #1
 800355c:	051b      	lsls	r3, r3, #20
 800355e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	430a      	orrs	r2, r1
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_ADC_Init+0x1ac>)
 800357c:	4013      	ands	r3, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d10b      	bne.n	800359c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800359a:	e018      	b.n	80035ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f023 0312 	bic.w	r3, r3, #18
 80035a4:	f043 0210 	orr.w	r2, r3, #16
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035bc:	e007      	b.n	80035ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f043 0210 	orr.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	ffe1f7fd 	.word	0xffe1f7fd
 80035dc:	ff1f0efe 	.word	0xff1f0efe

080035e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_Start+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e098      	b.n	800372c <HAL_ADC_Start+0x14c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa98 	bl	8003b38 <ADC_Enable>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8087 	bne.w	8003722 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a41      	ldr	r2, [pc, #260]	; (8003734 <HAL_ADC_Start+0x154>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d105      	bne.n	800363e <HAL_ADC_Start+0x5e>
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_ADC_Start+0x158>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d115      	bne.n	800366a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d026      	beq.n	80036a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003660:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003668:	e01d      	b.n	80036a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2f      	ldr	r2, [pc, #188]	; (8003738 <HAL_ADC_Start+0x158>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_ADC_Start+0xaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_ADC_Start+0x154>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10d      	bne.n	80036a6 <HAL_ADC_Start+0xc6>
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_ADC_Start+0x158>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800369e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	f023 0206 	bic.w	r2, r3, #6
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80036be:	e002      	b.n	80036c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0202 	mvn.w	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036e6:	d113      	bne.n	8003710 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <HAL_ADC_Start+0x154>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d105      	bne.n	80036fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_ADC_Start+0x158>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	e00c      	b.n	800372a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e003      	b.n	800372a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012800 	.word	0x40012800
 8003738:	40012400 	.word	0x40012400

0800373c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003752:	f7ff fe41 	bl	80033d8 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0c8      	b.n	8003910 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d12a      	bne.n	80037e2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003796:	2b00      	cmp	r3, #0
 8003798:	d123      	bne.n	80037e2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800379a:	e01a      	b.n	80037d2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d016      	beq.n	80037d2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_ADC_PollForConversion+0x7e>
 80037aa:	f7ff fe15 	bl	80033d8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20b      	bcs.n	80037d2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e09e      	b.n	8003910 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0dd      	beq.n	800379c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80037e0:	e06c      	b.n	80038bc <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_ADC_PollForConversion+0x1dc>)
 80037e4:	681c      	ldr	r4, [r3, #0]
 80037e6:	2002      	movs	r0, #2
 80037e8:	f002 f9c6 	bl	8005b78 <HAL_RCCEx_GetPeriphCLKFreq>
 80037ec:	4603      	mov	r3, r0
 80037ee:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6919      	ldr	r1, [r3, #16]
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <HAL_ADC_PollForConversion+0x1e0>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d118      	bne.n	8003832 <HAL_ADC_PollForConversion+0xf6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_ADC_PollForConversion+0x1e4>)
 8003808:	400b      	ands	r3, r1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d111      	bne.n	8003832 <HAL_ADC_PollForConversion+0xf6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6919      	ldr	r1, [r3, #16]
 8003814:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_ADC_PollForConversion+0x1e8>)
 8003816:	400b      	ands	r3, r1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <HAL_ADC_PollForConversion+0xf2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_ADC_PollForConversion+0x1ec>)
 8003824:	400b      	ands	r3, r1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_ADC_PollForConversion+0xf2>
 800382a:	2314      	movs	r3, #20
 800382c:	e020      	b.n	8003870 <HAL_ADC_PollForConversion+0x134>
 800382e:	2329      	movs	r3, #41	; 0x29
 8003830:	e01e      	b.n	8003870 <HAL_ADC_PollForConversion+0x134>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_ADC_PollForConversion+0x1e8>)
 800383a:	400b      	ands	r3, r1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_ADC_PollForConversion+0x112>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68d9      	ldr	r1, [r3, #12]
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_ADC_PollForConversion+0x1ec>)
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_ADC_PollForConversion+0x12e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6919      	ldr	r1, [r3, #16]
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <HAL_ADC_PollForConversion+0x1f0>)
 8003856:	400b      	ands	r3, r1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_ADC_PollForConversion+0x132>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_ADC_PollForConversion+0x1f0>)
 8003864:	400b      	ands	r3, r1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_PollForConversion+0x132>
 800386a:	2354      	movs	r3, #84	; 0x54
 800386c:	e000      	b.n	8003870 <HAL_ADC_PollForConversion+0x134>
 800386e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003876:	e01d      	b.n	80038b4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d016      	beq.n	80038ae <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_ADC_PollForConversion+0x15a>
 8003886:	f7ff fda7 	bl	80033d8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d20b      	bcs.n	80038ae <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e030      	b.n	8003910 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d8dd      	bhi.n	8003878 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0212 	mvn.w	r2, #18
 80038c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038e0:	d115      	bne.n	800390e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d111      	bne.n	800390e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	20000004 	.word	0x20000004
 800391c:	24924924 	.word	0x24924924
 8003920:	00924924 	.word	0x00924924
 8003924:	12492492 	.word	0x12492492
 8003928:	00492492 	.word	0x00492492
 800392c:	00249249 	.word	0x00249249

08003930 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x20>
 8003964:	2302      	movs	r3, #2
 8003966:	e0dc      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x1da>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b06      	cmp	r3, #6
 8003976:	d81c      	bhi.n	80039b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	3b05      	subs	r3, #5
 800398a:	221f      	movs	r2, #31
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	4019      	ands	r1, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b05      	subs	r3, #5
 80039a4:	fa00 f203 	lsl.w	r2, r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34
 80039b0:	e03c      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d81c      	bhi.n	80039f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b23      	subs	r3, #35	; 0x23
 80039cc:	221f      	movs	r2, #31
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	4019      	ands	r1, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b23      	subs	r3, #35	; 0x23
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
 80039f2:	e01b      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	3b41      	subs	r3, #65	; 0x41
 8003a06:	221f      	movs	r2, #31
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4019      	ands	r1, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3b41      	subs	r3, #65	; 0x41
 8003a20:	fa00 f203 	lsl.w	r2, r0, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d91c      	bls.n	8003a6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68d9      	ldr	r1, [r3, #12]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	3b1e      	subs	r3, #30
 8003a46:	2207      	movs	r2, #7
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	4019      	ands	r1, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6898      	ldr	r0, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3b1e      	subs	r3, #30
 8003a60:	fa00 f203 	lsl.w	r2, r0, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e019      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6919      	ldr	r1, [r3, #16]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	2207      	movs	r2, #7
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	4019      	ands	r1, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6898      	ldr	r0, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d003      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aae:	2b11      	cmp	r3, #17
 8003ab0:	d132      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_ADC_ConfigChannel+0x1e4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d125      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d126      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ad8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d11a      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9a      	lsrs	r2, r3, #18
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003af8:	e002      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f9      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x1b2>
 8003b06:	e007      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40012400 	.word	0x40012400
 8003b30:	20000004 	.word	0x20000004
 8003b34:	431bde83 	.word	0x431bde83

08003b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d039      	beq.n	8003bca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <ADC_Enable+0x9c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <ADC_Enable+0xa0>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9b      	lsrs	r3, r3, #18
 8003b72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b74:	e002      	b.n	8003b7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f9      	bne.n	8003b76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b82:	f7ff fc29 	bl	80033d8 <HAL_GetTick>
 8003b86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b88:	e018      	b.n	8003bbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b8a:	f7ff fc25 	bl	80033d8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d911      	bls.n	8003bbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f043 0210 	orr.w	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e007      	b.n	8003bcc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d1df      	bne.n	8003b8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	431bde83 	.word	0x431bde83

08003bdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d127      	bne.n	8003c46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c06:	f7ff fbe7 	bl	80033d8 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c0c:	e014      	b.n	8003c38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c0e:	f7ff fbe3 	bl	80033d8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d90d      	bls.n	8003c38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d0e3      	beq.n	8003c0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_ADCEx_Calibration_Start+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e086      	b.n	8003d7c <HAL_ADCEx_Calibration_Start+0x12c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ffb0 	bl	8003bdc <ADC_ConversionStop_Disable>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d175      	bne.n	8003d72 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c8e:	f023 0302 	bic.w	r3, r3, #2
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <HAL_ADCEx_Calibration_Start+0x134>)
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f001 ff6a 	bl	8005b78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003caa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003cac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003cae:	e002      	b.n	8003cb6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f9      	bne.n	8003cb0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff3b 	bl	8003b38 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0208 	orr.w	r2, r2, #8
 8003cd0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cd2:	f7ff fb81 	bl	80033d8 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cd8:	e014      	b.n	8003d04 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cda:	f7ff fb7d 	bl	80033d8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d90d      	bls.n	8003d04 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f023 0312 	bic.w	r3, r3, #18
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e03b      	b.n	8003d7c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0204 	orr.w	r2, r2, #4
 8003d20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003d22:	f7ff fb59 	bl	80033d8 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d28:	e014      	b.n	8003d54 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d2a:	f7ff fb55 	bl	80033d8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d90d      	bls.n	8003d54 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	f023 0312 	bic.w	r3, r3, #18
 8003d40:	f043 0210 	orr.w	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e013      	b.n	8003d7c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	20000004 	.word	0x20000004

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <__NVIC_EnableIRQ+0x34>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	; (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	f7ff ff90 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff2d 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f48:	f7ff ff42 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff90 	bl	8003e78 <NVIC_EncodePriority>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff5f 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff35 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ffa2 	bl	8003edc <SysTick_Config>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b08b      	sub	sp, #44	; 0x2c
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb6:	e127      	b.n	8004208 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	f040 8116 	bne.w	8004202 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b12      	cmp	r3, #18
 8003fdc:	d034      	beq.n	8004048 <HAL_GPIO_Init+0xa4>
 8003fde:	2b12      	cmp	r3, #18
 8003fe0:	d80d      	bhi.n	8003ffe <HAL_GPIO_Init+0x5a>
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d02b      	beq.n	800403e <HAL_GPIO_Init+0x9a>
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d804      	bhi.n	8003ff4 <HAL_GPIO_Init+0x50>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d031      	beq.n	8004052 <HAL_GPIO_Init+0xae>
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d01c      	beq.n	800402c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ff2:	e048      	b.n	8004086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d043      	beq.n	8004080 <HAL_GPIO_Init+0xdc>
 8003ff8:	2b11      	cmp	r3, #17
 8003ffa:	d01b      	beq.n	8004034 <HAL_GPIO_Init+0x90>
          break;
 8003ffc:	e043      	b.n	8004086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ffe:	4a89      	ldr	r2, [pc, #548]	; (8004224 <HAL_GPIO_Init+0x280>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d026      	beq.n	8004052 <HAL_GPIO_Init+0xae>
 8004004:	4a87      	ldr	r2, [pc, #540]	; (8004224 <HAL_GPIO_Init+0x280>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d806      	bhi.n	8004018 <HAL_GPIO_Init+0x74>
 800400a:	4a87      	ldr	r2, [pc, #540]	; (8004228 <HAL_GPIO_Init+0x284>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d020      	beq.n	8004052 <HAL_GPIO_Init+0xae>
 8004010:	4a86      	ldr	r2, [pc, #536]	; (800422c <HAL_GPIO_Init+0x288>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01d      	beq.n	8004052 <HAL_GPIO_Init+0xae>
          break;
 8004016:	e036      	b.n	8004086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004018:	4a85      	ldr	r2, [pc, #532]	; (8004230 <HAL_GPIO_Init+0x28c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d019      	beq.n	8004052 <HAL_GPIO_Init+0xae>
 800401e:	4a85      	ldr	r2, [pc, #532]	; (8004234 <HAL_GPIO_Init+0x290>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d016      	beq.n	8004052 <HAL_GPIO_Init+0xae>
 8004024:	4a84      	ldr	r2, [pc, #528]	; (8004238 <HAL_GPIO_Init+0x294>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0xae>
          break;
 800402a:	e02c      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	623b      	str	r3, [r7, #32]
          break;
 8004032:	e028      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	3304      	adds	r3, #4
 800403a:	623b      	str	r3, [r7, #32]
          break;
 800403c:	e023      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	3308      	adds	r3, #8
 8004044:	623b      	str	r3, [r7, #32]
          break;
 8004046:	e01e      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	330c      	adds	r3, #12
 800404e:	623b      	str	r3, [r7, #32]
          break;
 8004050:	e019      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800405a:	2304      	movs	r3, #4
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e012      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004068:	2308      	movs	r3, #8
 800406a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	611a      	str	r2, [r3, #16]
          break;
 8004072:	e008      	b.n	8004086 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004074:	2308      	movs	r3, #8
 8004076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	615a      	str	r2, [r3, #20]
          break;
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004080:	2300      	movs	r3, #0
 8004082:	623b      	str	r3, [r7, #32]
          break;
 8004084:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2bff      	cmp	r3, #255	; 0xff
 800408a:	d801      	bhi.n	8004090 <HAL_GPIO_Init+0xec>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	e001      	b.n	8004094 <HAL_GPIO_Init+0xf0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2bff      	cmp	r3, #255	; 0xff
 800409a:	d802      	bhi.n	80040a2 <HAL_GPIO_Init+0xfe>
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x104>
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	3b08      	subs	r3, #8
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	210f      	movs	r1, #15
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	401a      	ands	r2, r3
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	431a      	orrs	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8096 	beq.w	8004202 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040d6:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_GPIO_Init+0x298>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_GPIO_Init+0x298>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6193      	str	r3, [r2, #24]
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_GPIO_Init+0x298>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040ee:	4a54      	ldr	r2, [pc, #336]	; (8004240 <HAL_GPIO_Init+0x29c>)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a4b      	ldr	r2, [pc, #300]	; (8004244 <HAL_GPIO_Init+0x2a0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_GPIO_Init+0x19e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a4a      	ldr	r2, [pc, #296]	; (8004248 <HAL_GPIO_Init+0x2a4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00d      	beq.n	800413e <HAL_GPIO_Init+0x19a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a49      	ldr	r2, [pc, #292]	; (800424c <HAL_GPIO_Init+0x2a8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <HAL_GPIO_Init+0x196>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_GPIO_Init+0x2ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_GPIO_Init+0x192>
 8004132:	2303      	movs	r3, #3
 8004134:	e006      	b.n	8004144 <HAL_GPIO_Init+0x1a0>
 8004136:	2304      	movs	r3, #4
 8004138:	e004      	b.n	8004144 <HAL_GPIO_Init+0x1a0>
 800413a:	2302      	movs	r3, #2
 800413c:	e002      	b.n	8004144 <HAL_GPIO_Init+0x1a0>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_GPIO_Init+0x1a0>
 8004142:	2300      	movs	r3, #0
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	f002 0203 	and.w	r2, r2, #3
 800414a:	0092      	lsls	r2, r2, #2
 800414c:	4093      	lsls	r3, r2
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004154:	493a      	ldr	r1, [pc, #232]	; (8004240 <HAL_GPIO_Init+0x29c>)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	3302      	adds	r3, #2
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4938      	ldr	r1, [pc, #224]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
 800417a:	e006      	b.n	800418a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	43db      	mvns	r3, r3
 8004184:	4933      	ldr	r1, [pc, #204]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 8004186:	4013      	ands	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d006      	beq.n	80041a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	492e      	ldr	r1, [pc, #184]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
 80041a2:	e006      	b.n	80041b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4929      	ldr	r1, [pc, #164]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4924      	ldr	r1, [pc, #144]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
 80041ca:	e006      	b.n	80041da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	491f      	ldr	r1, [pc, #124]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	491a      	ldr	r1, [pc, #104]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60cb      	str	r3, [r1, #12]
 80041f2:	e006      	b.n	8004202 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	4915      	ldr	r1, [pc, #84]	; (8004254 <HAL_GPIO_Init+0x2b0>)
 80041fe:	4013      	ands	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	3301      	adds	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f aed0 	bne.w	8003fb8 <HAL_GPIO_Init+0x14>
  }
}
 8004218:	bf00      	nop
 800421a:	372c      	adds	r7, #44	; 0x2c
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	10210000 	.word	0x10210000
 8004228:	10110000 	.word	0x10110000
 800422c:	10120000 	.word	0x10120000
 8004230:	10310000 	.word	0x10310000
 8004234:	10320000 	.word	0x10320000
 8004238:	10220000 	.word	0x10220000
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000
 8004244:	40010800 	.word	0x40010800
 8004248:	40010c00 	.word	0x40010c00
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	40010400 	.word	0x40010400

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004274:	e003      	b.n	800427e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80042a6:	e002      	b.n	80042ae <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042a8:	887a      	ldrh	r2, [r7, #2]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	611a      	str	r2, [r3, #16]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e10f      	b.n	80044ea <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fe f9ea 	bl	80026b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042fc:	f001 fb40 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8004300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4a7b      	ldr	r2, [pc, #492]	; (80044f4 <HAL_I2C_Init+0x23c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d807      	bhi.n	800431c <HAL_I2C_Init+0x64>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_I2C_Init+0x240>)
 8004310:	4293      	cmp	r3, r2
 8004312:	bf94      	ite	ls
 8004314:	2301      	movls	r3, #1
 8004316:	2300      	movhi	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e006      	b.n	800432a <HAL_I2C_Init+0x72>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a77      	ldr	r2, [pc, #476]	; (80044fc <HAL_I2C_Init+0x244>)
 8004320:	4293      	cmp	r3, r2
 8004322:	bf94      	ite	ls
 8004324:	2301      	movls	r3, #1
 8004326:	2300      	movhi	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0db      	b.n	80044ea <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a72      	ldr	r2, [pc, #456]	; (8004500 <HAL_I2C_Init+0x248>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0c9b      	lsrs	r3, r3, #18
 800433c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a64      	ldr	r2, [pc, #400]	; (80044f4 <HAL_I2C_Init+0x23c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d802      	bhi.n	800436c <HAL_I2C_Init+0xb4>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3301      	adds	r3, #1
 800436a:	e009      	b.n	8004380 <HAL_I2C_Init+0xc8>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	4a63      	ldr	r2, [pc, #396]	; (8004504 <HAL_I2C_Init+0x24c>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	3301      	adds	r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	430b      	orrs	r3, r1
 8004386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4956      	ldr	r1, [pc, #344]	; (80044f4 <HAL_I2C_Init+0x23c>)
 800439c:	428b      	cmp	r3, r1
 800439e:	d80d      	bhi.n	80043bc <HAL_I2C_Init+0x104>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1e59      	subs	r1, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	bf38      	it	cc
 80043b8:	2304      	movcc	r3, #4
 80043ba:	e04f      	b.n	800445c <HAL_I2C_Init+0x1a4>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d111      	bne.n	80043e8 <HAL_I2C_Init+0x130>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e58      	subs	r0, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	440b      	add	r3, r1
 80043d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e012      	b.n	800440e <HAL_I2C_Init+0x156>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	0099      	lsls	r1, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Init+0x15e>
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_I2C_Init+0x1a4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <HAL_I2C_Init+0x184>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e58      	subs	r0, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	440b      	add	r3, r1
 800442c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004430:	3301      	adds	r3, #1
 8004432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443a:	e00f      	b.n	800445c <HAL_I2C_Init+0x1a4>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1e58      	subs	r0, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	0099      	lsls	r1, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	3301      	adds	r3, #1
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	6809      	ldr	r1, [r1, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800448a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6911      	ldr	r1, [r2, #16]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	4311      	orrs	r1, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	430b      	orrs	r3, r1
 800449e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	000186a0 	.word	0x000186a0
 80044f8:	001e847f 	.word	0x001e847f
 80044fc:	003d08ff 	.word	0x003d08ff
 8004500:	431bde83 	.word	0x431bde83
 8004504:	10624dd3 	.word	0x10624dd3

08004508 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004522:	f7fe ff59 	bl	80033d8 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	f040 80d9 	bne.w	80046e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2319      	movs	r3, #25
 800453c:	2201      	movs	r2, #1
 800453e:	496d      	ldr	r1, [pc, #436]	; (80046f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fc6b 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	e0cc      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_I2C_Mem_Write+0x56>
 800455a:	2302      	movs	r3, #2
 800455c:	e0c5      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d007      	beq.n	8004584 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2221      	movs	r2, #33	; 0x21
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a4d      	ldr	r2, [pc, #308]	; (80046f8 <HAL_I2C_Mem_Write+0x1f0>)
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045c6:	88f8      	ldrh	r0, [r7, #6]
 80045c8:	893a      	ldrh	r2, [r7, #8]
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	4603      	mov	r3, r0
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fac6 	bl	8004b68 <I2C_RequestMemoryWrite>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d052      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e081      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fcec 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00d      	beq.n	8004612 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d107      	bne.n	800460e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e06b      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11b      	bne.n	8004688 <HAL_I2C_Mem_Write+0x180>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1aa      	bne.n	80045e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fcd8 	bl	800504a <I2C_WaitOnBTFFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d107      	bne.n	80046b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e016      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	00100002 	.word	0x00100002
 80046f8:	ffff0000 	.word	0xffff0000

080046fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	; 0x30
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004716:	f7fe fe5f 	bl	80033d8 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 8218 	bne.w	8004b5a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2319      	movs	r3, #25
 8004730:	2201      	movs	r2, #1
 8004732:	4981      	ldr	r1, [pc, #516]	; (8004938 <HAL_I2C_Mem_Read+0x23c>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb71 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
 8004742:	e20b      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_I2C_Mem_Read+0x56>
 800474e:	2302      	movs	r3, #2
 8004750:	e204      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d007      	beq.n	8004778 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2222      	movs	r2, #34	; 0x22
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2240      	movs	r2, #64	; 0x40
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a61      	ldr	r2, [pc, #388]	; (800493c <HAL_I2C_Mem_Read+0x240>)
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ba:	88f8      	ldrh	r0, [r7, #6]
 80047bc:	893a      	ldrh	r2, [r7, #8]
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4603      	mov	r3, r0
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa56 	bl	8004c7c <I2C_RequestMemoryRead>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e1c0      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d113      	bne.n	800480a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e194      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	2b01      	cmp	r3, #1
 8004810:	d11d      	bne.n	800484e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004822:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004848:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800484a:	b662      	cpsie	i
 800484c:	e172      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b02      	cmp	r3, #2
 8004854:	d11d      	bne.n	8004892 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004866:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800488e:	b662      	cpsie	i
 8004890:	e150      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b8:	e13c      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b03      	cmp	r3, #3
 80048c0:	f200 80f5 	bhi.w	8004aae <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d123      	bne.n	8004914 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fbfb 	bl	80050cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e13d      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004912:	e10f      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b02      	cmp	r3, #2
 800491a:	d150      	bne.n	80049be <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2200      	movs	r2, #0
 8004924:	4906      	ldr	r1, [pc, #24]	; (8004940 <HAL_I2C_Mem_Read+0x244>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa78 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e112      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
 8004936:	bf00      	nop
 8004938:	00100002 	.word	0x00100002
 800493c:	ffff0000 	.word	0xffff0000
 8004940:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004944:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004988:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049bc:	e0ba      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2200      	movs	r2, #0
 80049c6:	4967      	ldr	r1, [pc, #412]	; (8004b64 <HAL_I2C_Mem_Read+0x468>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fa27 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0c1      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	2200      	movs	r2, #0
 8004a24:	494f      	ldr	r1, [pc, #316]	; (8004b64 <HAL_I2C_Mem_Read+0x468>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9f8 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e092      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a78:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aac:	e042      	b.n	8004b34 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fb0a 	bl	80050cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e04c      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d118      	bne.n	8004b34 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f aebe 	bne.w	80048ba <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00010004 	.word	0x00010004

08004b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	817b      	strh	r3, [r7, #10]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	813b      	strh	r3, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f93c 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e05f      	b.n	8004c6e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	492d      	ldr	r1, [pc, #180]	; (8004c78 <I2C_RequestMemoryWrite+0x110>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f980 	bl	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04c      	b.n	8004c6e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	6a39      	ldr	r1, [r7, #32]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f9ea 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d107      	bne.n	8004c12 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02b      	b.n	8004c6e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e021      	b.n	8004c6c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9c4 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e005      	b.n	8004c6e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00010002 	.word	0x00010002

08004c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	813b      	strh	r3, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8aa 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e09e      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cd2:	897b      	ldrh	r3, [r7, #10]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	494c      	ldr	r1, [pc, #304]	; (8004e18 <I2C_RequestMemoryRead+0x19c>)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f8ee 	bl	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e08b      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d10:	6a39      	ldr	r1, [r7, #32]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f958 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d107      	bne.n	8004d36 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06a      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	611a      	str	r2, [r3, #16]
 8004d4a:	e021      	b.n	8004d90 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	6a39      	ldr	r1, [r7, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f932 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d107      	bne.n	8004d82 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e044      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d86:	893b      	ldrh	r3, [r7, #8]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	6a39      	ldr	r1, [r7, #32]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f917 	bl	8004fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d107      	bne.n	8004db8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e029      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f81f 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e013      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004de8:	897b      	ldrh	r3, [r7, #10]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	4906      	ldr	r1, [pc, #24]	; (8004e18 <I2C_RequestMemoryRead+0x19c>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f863 	bl	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	00010002 	.word	0x00010002

08004e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2c:	e025      	b.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e34:	d021      	beq.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fe facf 	bl	80033d8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e023      	b.n	8004ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d10d      	bne.n	8004ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	e00c      	b.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d0b6      	beq.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed8:	e051      	b.n	8004f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d123      	bne.n	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e046      	b.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f38:	d021      	beq.n	8004f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fe fa4d 	bl	80033d8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d116      	bne.n	8004f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e020      	b.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10c      	bne.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e00b      	b.n	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d18d      	bne.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd4:	e02d      	b.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f8ce 	bl	8005178 <I2C_IsAcknowledgeFailed>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e02d      	b.n	8005042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fec:	d021      	beq.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fe f9f3 	bl	80033d8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d116      	bne.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f043 0220 	orr.w	r2, r3, #32
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e007      	b.n	8005042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d1ca      	bne.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005056:	e02d      	b.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f88d 	bl	8005178 <I2C_IsAcknowledgeFailed>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e02d      	b.n	80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506e:	d021      	beq.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005070:	f7fe f9b2 	bl	80033d8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d116      	bne.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e007      	b.n	80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d1ca      	bne.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d8:	e042      	b.n	8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d119      	bne.n	800511c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0210 	mvn.w	r2, #16
 80050f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e029      	b.n	8005170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511c:	f7fe f95c 	bl	80033d8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	d302      	bcc.n	8005132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e007      	b.n	8005170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d1b5      	bne.n	80050da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d11b      	bne.n	80051c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0204 	orr.w	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e26c      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8087 	beq.w	8005302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f4:	4b92      	ldr	r3, [pc, #584]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d00c      	beq.n	800521a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005200:	4b8f      	ldr	r3, [pc, #572]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d112      	bne.n	8005232 <HAL_RCC_OscConfig+0x5e>
 800520c:	4b8c      	ldr	r3, [pc, #560]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d10b      	bne.n	8005232 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521a:	4b89      	ldr	r3, [pc, #548]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d06c      	beq.n	8005300 <HAL_RCC_OscConfig+0x12c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d168      	bne.n	8005300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e246      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x76>
 800523c:	4b80      	ldr	r3, [pc, #512]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a7f      	ldr	r2, [pc, #508]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	e02e      	b.n	80052a8 <HAL_RCC_OscConfig+0xd4>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x98>
 8005252:	4b7b      	ldr	r3, [pc, #492]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b78      	ldr	r3, [pc, #480]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a77      	ldr	r2, [pc, #476]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e01d      	b.n	80052a8 <HAL_RCC_OscConfig+0xd4>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0xbc>
 8005276:	4b72      	ldr	r3, [pc, #456]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a71      	ldr	r2, [pc, #452]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800527c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b6f      	ldr	r3, [pc, #444]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0xd4>
 8005290:	4b6b      	ldr	r3, [pc, #428]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a6a      	ldr	r2, [pc, #424]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b68      	ldr	r3, [pc, #416]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a67      	ldr	r2, [pc, #412]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80052a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fe f892 	bl	80033d8 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fe f88e 	bl	80033d8 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e1fa      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b5d      	ldr	r3, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0xe4>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fe f87e 	bl	80033d8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fe f87a 	bl	80033d8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1e6      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	4b53      	ldr	r3, [pc, #332]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x10c>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d063      	beq.n	80053d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800530e:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b08      	cmp	r3, #8
 8005324:	d11c      	bne.n	8005360 <HAL_RCC_OscConfig+0x18c>
 8005326:	4b46      	ldr	r3, [pc, #280]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d116      	bne.n	8005360 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005332:	4b43      	ldr	r3, [pc, #268]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_RCC_OscConfig+0x176>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e1ba      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b3d      	ldr	r3, [pc, #244]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4939      	ldr	r1, [pc, #228]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535e:	e03a      	b.n	80053d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005368:	4b36      	ldr	r3, [pc, #216]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fe f833 	bl	80033d8 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fe f82f 	bl	80033d8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e19b      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005388:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4927      	ldr	r1, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fe f812 	bl	80033d8 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fe f80e 	bl	80033d8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e17a      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d03a      	beq.n	8005458 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d019      	beq.n	800541e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ea:	4b17      	ldr	r3, [pc, #92]	; (8005448 <HAL_RCC_OscConfig+0x274>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f0:	f7fd fff2 	bl	80033d8 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f8:	f7fd ffee 	bl	80033d8 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e15a      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <HAL_RCC_OscConfig+0x26c>)
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005416:	2001      	movs	r0, #1
 8005418:	f000 fada 	bl	80059d0 <RCC_Delay>
 800541c:	e01c      	b.n	8005458 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_RCC_OscConfig+0x274>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005424:	f7fd ffd8 	bl	80033d8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542a:	e00f      	b.n	800544c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542c:	f7fd ffd4 	bl	80033d8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d908      	bls.n	800544c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e140      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	42420000 	.word	0x42420000
 8005448:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800544c:	4b9e      	ldr	r3, [pc, #632]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e9      	bne.n	800542c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a6 	beq.w	80055b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546a:	4b97      	ldr	r3, [pc, #604]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4a93      	ldr	r2, [pc, #588]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	61d3      	str	r3, [r2, #28]
 8005482:	4b91      	ldr	r3, [pc, #580]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005492:	4b8e      	ldr	r3, [pc, #568]	; (80056cc <HAL_RCC_OscConfig+0x4f8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d118      	bne.n	80054d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549e:	4b8b      	ldr	r3, [pc, #556]	; (80056cc <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a8a      	ldr	r2, [pc, #552]	; (80056cc <HAL_RCC_OscConfig+0x4f8>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054aa:	f7fd ff95 	bl	80033d8 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b2:	f7fd ff91 	bl	80033d8 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b64      	cmp	r3, #100	; 0x64
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e0fd      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	4b81      	ldr	r3, [pc, #516]	; (80056cc <HAL_RCC_OscConfig+0x4f8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d106      	bne.n	80054e6 <HAL_RCC_OscConfig+0x312>
 80054d8:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	4a7a      	ldr	r2, [pc, #488]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6213      	str	r3, [r2, #32]
 80054e4:	e02d      	b.n	8005542 <HAL_RCC_OscConfig+0x36e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x334>
 80054ee:	4b76      	ldr	r3, [pc, #472]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	4a75      	ldr	r2, [pc, #468]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	6213      	str	r3, [r2, #32]
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4a72      	ldr	r2, [pc, #456]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	6213      	str	r3, [r2, #32]
 8005506:	e01c      	b.n	8005542 <HAL_RCC_OscConfig+0x36e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b05      	cmp	r3, #5
 800550e:	d10c      	bne.n	800552a <HAL_RCC_OscConfig+0x356>
 8005510:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4a6c      	ldr	r2, [pc, #432]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	6213      	str	r3, [r2, #32]
 800551c:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	4a69      	ldr	r2, [pc, #420]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6213      	str	r3, [r2, #32]
 8005528:	e00b      	b.n	8005542 <HAL_RCC_OscConfig+0x36e>
 800552a:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	4a66      	ldr	r2, [pc, #408]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	6213      	str	r3, [r2, #32]
 8005536:	4b64      	ldr	r3, [pc, #400]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	4a63      	ldr	r2, [pc, #396]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800553c:	f023 0304 	bic.w	r3, r3, #4
 8005540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d015      	beq.n	8005576 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fd ff45 	bl	80033d8 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fd ff41 	bl	80033d8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0ab      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b57      	ldr	r3, [pc, #348]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCC_OscConfig+0x37e>
 8005574:	e014      	b.n	80055a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005576:	f7fd ff2f 	bl	80033d8 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557c:	e00a      	b.n	8005594 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557e:	f7fd ff2b 	bl	80033d8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e095      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005594:	4b4c      	ldr	r3, [pc, #304]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ee      	bne.n	800557e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d105      	bne.n	80055b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a6:	4b48      	ldr	r3, [pc, #288]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8081 	beq.w	80056be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055bc:	4b42      	ldr	r3, [pc, #264]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d061      	beq.n	800568c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d146      	bne.n	800565e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d0:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <HAL_RCC_OscConfig+0x4fc>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d6:	f7fd feff 	bl	80033d8 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055de:	f7fd fefb 	bl	80033d8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e067      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d108      	bne.n	8005618 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005606:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	492d      	ldr	r1, [pc, #180]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005618:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a19      	ldr	r1, [r3, #32]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	430b      	orrs	r3, r1
 800562a:	4927      	ldr	r1, [pc, #156]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_OscConfig+0x4fc>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fd fecf 	bl	80033d8 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fd fecb 	bl	80033d8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e037      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x46a>
 800565c:	e02f      	b.n	80056be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <HAL_RCC_OscConfig+0x4fc>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fd feb8 	bl	80033d8 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fd feb4 	bl	80033d8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e020      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x498>
 800568a:	e018      	b.n	80056be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e013      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_OscConfig+0x4f4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d001      	beq.n	80056be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40007000 	.word	0x40007000
 80056d0:	42420060 	.word	0x42420060

080056d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0d0      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d910      	bls.n	8005718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b67      	ldr	r3, [pc, #412]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 0207 	bic.w	r2, r3, #7
 80056fe:	4965      	ldr	r1, [pc, #404]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b8      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a58      	ldr	r2, [pc, #352]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800573a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005748:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4a52      	ldr	r2, [pc, #328]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800574e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	494d      	ldr	r1, [pc, #308]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d040      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d115      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07f      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005792:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e073      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a2:	4b3d      	ldr	r3, [pc, #244]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e06b      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057b2:	4b39      	ldr	r3, [pc, #228]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4936      	ldr	r1, [pc, #216]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057c4:	f7fd fe08 	bl	80033d8 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fd fe04 	bl	80033d8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e053      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 020c 	and.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1eb      	bne.n	80057cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057f4:	4b27      	ldr	r3, [pc, #156]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d210      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 0207 	bic.w	r2, r3, #7
 800580a:	4922      	ldr	r1, [pc, #136]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b20      	ldr	r3, [pc, #128]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e032      	b.n	800588a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4916      	ldr	r1, [pc, #88]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490e      	ldr	r1, [pc, #56]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005862:	f000 f821 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005866:	4601      	mov	r1, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <HAL_RCC_ClockConfig+0x1c8>)
 8005874:	5cd3      	ldrb	r3, [r2, r3]
 8005876:	fa21 f303 	lsr.w	r3, r1, r3
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCC_ClockConfig+0x1cc>)
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fd66 	bl	8003354 <HAL_InitTick>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40022000 	.word	0x40022000
 8005898:	40021000 	.word	0x40021000
 800589c:	0800a88c 	.word	0x0800a88c
 80058a0:	20000004 	.word	0x20000004
 80058a4:	20000008 	.word	0x20000008

080058a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b490      	push	{r4, r7}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <HAL_RCC_GetSysClockFreq+0xb0>)
 80058b0:	1d3c      	adds	r4, r7, #4
 80058b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058b8:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_RCC_GetSysClockFreq+0xb4>)
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d002      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x40>
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x46>
 80058e6:	e02d      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ea:	623b      	str	r3, [r7, #32]
      break;
 80058ec:	e02d      	b.n	800594a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	0c9b      	lsrs	r3, r3, #18
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058fa:	4413      	add	r3, r2
 80058fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005900:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <HAL_RCC_GetSysClockFreq+0xb8>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	0c5b      	lsrs	r3, r3, #17
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800591a:	4413      	add	r3, r2
 800591c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005920:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005926:	fb02 f203 	mul.w	r2, r2, r3
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	e004      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	623b      	str	r3, [r7, #32]
      break;
 8005942:	e002      	b.n	800594a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005946:	623b      	str	r3, [r7, #32]
      break;
 8005948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800594a:	6a3b      	ldr	r3, [r7, #32]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3728      	adds	r7, #40	; 0x28
 8005950:	46bd      	mov	sp, r7
 8005952:	bc90      	pop	{r4, r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	0800a850 	.word	0x0800a850
 800595c:	0800a860 	.word	0x0800a860
 8005960:	40021000 	.word	0x40021000
 8005964:	007a1200 	.word	0x007a1200
 8005968:	003d0900 	.word	0x003d0900

0800596c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <HAL_RCC_GetHCLKFreq+0x10>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr
 800597c:	20000004 	.word	0x20000004

08005980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005984:	f7ff fff2 	bl	800596c <HAL_RCC_GetHCLKFreq>
 8005988:	4601      	mov	r1, r0
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4a03      	ldr	r2, [pc, #12]	; (80059a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40021000 	.word	0x40021000
 80059a4:	0800a89c 	.word	0x0800a89c

080059a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059ac:	f7ff ffde 	bl	800596c <HAL_RCC_GetHCLKFreq>
 80059b0:	4601      	mov	r1, r0
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	0adb      	lsrs	r3, r3, #11
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4a03      	ldr	r2, [pc, #12]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059be:	5cd3      	ldrb	r3, [r2, r3]
 80059c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	0800a89c 	.word	0x0800a89c

080059d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <RCC_Delay+0x34>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <RCC_Delay+0x38>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	0a5b      	lsrs	r3, r3, #9
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059ec:	bf00      	nop
  }
  while (Delay --);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	60fa      	str	r2, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f9      	bne.n	80059ec <RCC_Delay+0x1c>
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000004 	.word	0x20000004
 8005a08:	10624dd3 	.word	0x10624dd3

08005a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d07d      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2c:	4b4f      	ldr	r3, [pc, #316]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a38:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	4a4b      	ldr	r2, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a42:	61d3      	str	r3, [r2, #28]
 8005a44:	4b49      	ldr	r3, [pc, #292]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d118      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a60:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a42      	ldr	r2, [pc, #264]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6c:	f7fd fcb4 	bl	80033d8 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	e008      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a74:	f7fd fcb0 	bl	80033d8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e06d      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a86:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d027      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ab0:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ac0:	4b2c      	ldr	r3, [pc, #176]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ac6:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fd fc7f 	bl	80033d8 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005adc:	e00a      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ade:	f7fd fc7b 	bl	80033d8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e036      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af4:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ee      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4917      	ldr	r1, [pc, #92]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	490b      	ldr	r1, [pc, #44]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40007000 	.word	0x40007000
 8005b74:	42420440 	.word	0x42420440

08005b78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b08d      	sub	sp, #52	; 0x34
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b80:	4b55      	ldr	r3, [pc, #340]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005b82:	f107 040c 	add.w	r4, r7, #12
 8005b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b8c:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d07f      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d002      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d048      	beq.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005bb4:	e08b      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005bbc:	4b48      	ldr	r3, [pc, #288]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d07f      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	0c9b      	lsrs	r3, r3, #18
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005bda:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005be6:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	0c5b      	lsrs	r3, r3, #17
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005c06:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	4a33      	ldr	r2, [pc, #204]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c34:	e048      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005c44:	e040      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005c46:	4b26      	ldr	r3, [pc, #152]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d108      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	e01f      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c74:	d109      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8005c82:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c88:	e00f      	b.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c94:	d11a      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8005ca2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ca8:	e010      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005caa:	e00f      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005cac:	f7ff fe7c 	bl	80059a8 <HAL_RCC_GetPCLK2Freq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	0b9b      	lsrs	r3, r3, #14
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005ccc:	bf00      	nop
    }
  }
  return (frequency);
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3734      	adds	r7, #52	; 0x34
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}
 8005cd8:	0800a864 	.word	0x0800a864
 8005cdc:	0800a874 	.word	0x0800a874
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	007a1200 	.word	0x007a1200
 8005ce8:	003d0900 	.word	0x003d0900
 8005cec:	aaaaaaab 	.word	0xaaaaaaab

08005cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e053      	b.n	8005daa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fc fd0b 	bl	8002738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	0c1a      	lsrs	r2, r3, #16
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f002 0204 	and.w	r2, r2, #4
 8005d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e01d      	b.n	8005e00 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fc fcf9 	bl	80027d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 fb45 	bl	8006480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d007      	beq.n	8005e42 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e01d      	b.n	8005e9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f815 	bl	8005ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f000 faf7 	bl	8006480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fd58 	bl	8006980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <HAL_TIM_PWM_Start+0x60>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	d007      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0202 	mvn.w	r2, #2
 8005f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa73 	bl	800644a <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa66 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa75 	bl	800645c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa49 	bl	800644a <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa3c 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fa4b 	bl	800645c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d122      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d11b      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa1f 	bl	800644a <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa12 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa21 	bl	800645c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b10      	cmp	r3, #16
 800602c:	d122      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d11b      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0210 	mvn.w	r2, #16
 8006044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2208      	movs	r2, #8
 800604a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9f5 	bl	800644a <HAL_TIM_IC_CaptureCallback>
 8006060:	e005      	b.n	800606e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9e8 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9f7 	bl	800645c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0201 	mvn.w	r2, #1
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9c3 	bl	8006426 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fd1c 	bl	8006b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9bb 	bl	800646e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b20      	cmp	r3, #32
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0220 	mvn.w	r2, #32
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fce7 	bl	8006af2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006142:	2302      	movs	r3, #2
 8006144:	e0b4      	b.n	80062b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	f200 809f 	bhi.w	800629c <HAL_TIM_PWM_ConfigChannel+0x170>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006199 	.word	0x08006199
 8006168:	0800629d 	.word	0x0800629d
 800616c:	0800629d 	.word	0x0800629d
 8006170:	0800629d 	.word	0x0800629d
 8006174:	080061d9 	.word	0x080061d9
 8006178:	0800629d 	.word	0x0800629d
 800617c:	0800629d 	.word	0x0800629d
 8006180:	0800629d 	.word	0x0800629d
 8006184:	0800621b 	.word	0x0800621b
 8006188:	0800629d 	.word	0x0800629d
 800618c:	0800629d 	.word	0x0800629d
 8006190:	0800629d 	.word	0x0800629d
 8006194:	0800625b 	.word	0x0800625b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f9d0 	bl	8006544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
      break;
 80061d6:	e062      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fa16 	bl	8006610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]
      break;
 8006218:	e041      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fa5f 	bl	80066e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0208 	orr.w	r2, r2, #8
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0204 	bic.w	r2, r2, #4
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	61da      	str	r2, [r3, #28]
      break;
 8006258:	e021      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 faa9 	bl	80067b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	021a      	lsls	r2, r3, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	61da      	str	r2, [r3, #28]
      break;
 800629a:	e000      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800629c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_TIM_ConfigClockSource+0x18>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0a6      	b.n	800641e <HAL_TIM_ConfigClockSource+0x166>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d067      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x120>
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d80b      	bhi.n	8006324 <HAL_TIM_ConfigClockSource+0x6c>
 800630c:	2b10      	cmp	r3, #16
 800630e:	d073      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x140>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d802      	bhi.n	800631a <HAL_TIM_ConfigClockSource+0x62>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d06f      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006318:	e078      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800631a:	2b20      	cmp	r3, #32
 800631c:	d06c      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x140>
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d06a      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006322:	e073      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006324:	2b70      	cmp	r3, #112	; 0x70
 8006326:	d00d      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0x8c>
 8006328:	2b70      	cmp	r3, #112	; 0x70
 800632a:	d804      	bhi.n	8006336 <HAL_TIM_ConfigClockSource+0x7e>
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d033      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0xe0>
 8006330:	2b60      	cmp	r3, #96	; 0x60
 8006332:	d041      	beq.n	80063b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006334:	e06a      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d066      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x152>
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006340:	d017      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006342:	e063      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f000 faf5 	bl	8006942 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006366:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]
      break;
 8006370:	e04c      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f000 fade 	bl	8006942 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006394:	609a      	str	r2, [r3, #8]
      break;
 8006396:	e039      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f000 fa55 	bl	8006854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2150      	movs	r1, #80	; 0x50
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 faac 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80063b6:	e029      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f000 fa73 	bl	80068b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2160      	movs	r1, #96	; 0x60
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fa9c 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80063d6:	e019      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6859      	ldr	r1, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f000 fa35 	bl	8006854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa8c 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 80063f6:	e009      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 fa83 	bl	800690e <TIM_ITRx_SetConfig>
      break;
 8006408:	e000      	b.n	800640c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800640a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a29      	ldr	r2, [pc, #164]	; (8006538 <TIM_Base_SetConfig+0xb8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_Base_SetConfig+0x30>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0x30>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a26      	ldr	r2, [pc, #152]	; (800653c <TIM_Base_SetConfig+0xbc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0x30>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a25      	ldr	r2, [pc, #148]	; (8006540 <TIM_Base_SetConfig+0xc0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d108      	bne.n	80064c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <TIM_Base_SetConfig+0xb8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <TIM_Base_SetConfig+0x62>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d0:	d007      	beq.n	80064e2 <TIM_Base_SetConfig+0x62>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a19      	ldr	r2, [pc, #100]	; (800653c <TIM_Base_SetConfig+0xbc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_Base_SetConfig+0x62>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a18      	ldr	r2, [pc, #96]	; (8006540 <TIM_Base_SetConfig+0xc0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d108      	bne.n	80064f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a07      	ldr	r2, [pc, #28]	; (8006538 <TIM_Base_SetConfig+0xb8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d103      	bne.n	8006528 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	615a      	str	r2, [r3, #20]
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800

08006544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0302 	bic.w	r3, r3, #2
 800658c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <TIM_OC1_SetConfig+0xc8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10c      	bne.n	80065ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <TIM_OC1_SetConfig+0xc8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d111      	bne.n	80065e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40012c00 	.word	0x40012c00

08006610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0210 	bic.w	r2, r3, #16
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f023 0320 	bic.w	r3, r3, #32
 800665a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <TIM_OC2_SetConfig+0xd0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10d      	bne.n	800668c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <TIM_OC2_SetConfig+0xd0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d113      	bne.n	80066bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800669a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr
 80066e0:	40012c00 	.word	0x40012c00

080066e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800672c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <TIM_OC3_SetConfig+0xd0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10d      	bne.n	800675e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800675c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a14      	ldr	r2, [pc, #80]	; (80067b4 <TIM_OC3_SetConfig+0xd0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d113      	bne.n	800678e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800676c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40012c00 	.word	0x40012c00

080067b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <TIM_OC4_SetConfig+0x98>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00

08006854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800687e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 030a 	bic.w	r3, r3, #10
 8006890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	f023 0210 	bic.w	r2, r3, #16
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	031b      	lsls	r3, r3, #12
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	f043 0307 	orr.w	r3, r3, #7
 8006930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	021a      	lsls	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	431a      	orrs	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4313      	orrs	r3, r2
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	609a      	str	r2, [r3, #8]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2201      	movs	r2, #1
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	401a      	ands	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	fa01 f303 	lsl.w	r3, r1, r3
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069dc:	2302      	movs	r3, #2
 80069de:	e032      	b.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e03d      	b.n	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e03f      	b.n	8006ba8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fb feb3 	bl	80028a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2224      	movs	r2, #36	; 0x24
 8006b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f90c 	bl	8006d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	f040 8083 	bne.w	8006cd8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <HAL_UART_Transmit+0x2e>
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e07b      	b.n	8006cda <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_UART_Transmit+0x40>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e074      	b.n	8006cda <HAL_UART_Transmit+0x12a>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2221      	movs	r2, #33	; 0x21
 8006c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c06:	f7fc fbe7 	bl	80033d8 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	88fa      	ldrh	r2, [r7, #6]
 8006c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c18:	e042      	b.n	8006ca0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d122      	bne.n	8006c78 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f850 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e046      	b.n	8006cda <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c5e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	e017      	b.n	8006ca0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	e013      	b.n	8006ca0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2180      	movs	r1, #128	; 0x80
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f82d 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e023      	b.n	8006cda <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	60ba      	str	r2, [r7, #8]
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1b7      	bne.n	8006c1a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f814 	bl	8006ce2 <UART_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e00a      	b.n	8006cda <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e000      	b.n	8006cda <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006cd8:	2302      	movs	r3, #2
  }
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf2:	e02c      	b.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfa:	d028      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d02:	f7fc fb69 	bl	80033d8 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d21d      	bcs.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e00f      	b.n	8006d6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d0c3      	beq.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006db2:	f023 030c 	bic.w	r3, r3, #12
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a52      	ldr	r2, [pc, #328]	; (8006f24 <UART_SetConfig+0x1ac>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d14e      	bne.n	8006e7e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006de0:	f7fe fde2 	bl	80059a8 <HAL_RCC_GetPCLK2Freq>
 8006de4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009a      	lsls	r2, r3, #2
 8006df0:	441a      	add	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	0119      	lsls	r1, r3, #4
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009a      	lsls	r2, r3, #2
 8006e10:	441a      	add	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	2064      	movs	r0, #100	; 0x64
 8006e26:	fb00 f303 	mul.w	r3, r0, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	3332      	adds	r3, #50	; 0x32
 8006e30:	4a3d      	ldr	r2, [pc, #244]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e3c:	4419      	add	r1, r3
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009a      	lsls	r2, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e54:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006e56:	fba3 0302 	umull	r0, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2064      	movs	r0, #100	; 0x64
 8006e5e:	fb00 f303 	mul.w	r3, r0, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	440a      	add	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006e7c:	e04d      	b.n	8006f1a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e7e:	f7fe fd7f 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8006e82:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009a      	lsls	r2, r3, #2
 8006e8e:	441a      	add	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	4a23      	ldr	r2, [pc, #140]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	0119      	lsls	r1, r3, #4
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009a      	lsls	r2, r3, #2
 8006eae:	441a      	add	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006ebc:	fba3 0302 	umull	r0, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	2064      	movs	r0, #100	; 0x64
 8006ec4:	fb00 f303 	mul.w	r3, r0, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	3332      	adds	r3, #50	; 0x32
 8006ece:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eda:	4419      	add	r1, r3
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009a      	lsls	r2, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006ef4:	fba3 0302 	umull	r0, r3, r3, r2
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	2064      	movs	r0, #100	; 0x64
 8006efc:	fb00 f303 	mul.w	r3, r0, r3
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	3332      	adds	r3, #50	; 0x32
 8006f06:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <UART_SetConfig+0x1b0>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f003 020f 	and.w	r2, r3, #15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	440a      	add	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40013800 	.word	0x40013800
 8006f28:	51eb851f 	.word	0x51eb851f

08006f2c <__errno>:
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <__errno+0x8>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000010 	.word	0x20000010

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	4e0c      	ldr	r6, [pc, #48]	; (8006f70 <__libc_init_array+0x38>)
 8006f3e:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f40:	1ba4      	subs	r4, r4, r6
 8006f42:	10a4      	asrs	r4, r4, #2
 8006f44:	42a5      	cmp	r5, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	f003 fba2 	bl	800a690 <_init>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	4e0a      	ldr	r6, [pc, #40]	; (8006f78 <__libc_init_array+0x40>)
 8006f50:	4c0a      	ldr	r4, [pc, #40]	; (8006f7c <__libc_init_array+0x44>)
 8006f52:	1ba4      	subs	r4, r4, r6
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	42a5      	cmp	r5, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f60:	4798      	blx	r3
 8006f62:	3501      	adds	r5, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f6a:	4798      	blx	r3
 8006f6c:	3501      	adds	r5, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	0800ace8 	.word	0x0800ace8
 8006f74:	0800ace8 	.word	0x0800ace8
 8006f78:	0800ace8 	.word	0x0800ace8
 8006f7c:	0800acec 	.word	0x0800acec

08006f80 <memset>:
 8006f80:	4603      	mov	r3, r0
 8006f82:	4402      	add	r2, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <__cvt>:
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f96:	461e      	mov	r6, r3
 8006f98:	bfbb      	ittet	lt
 8006f9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	461e      	movlt	r6, r3
 8006fa0:	2300      	movge	r3, #0
 8006fa2:	232d      	movlt	r3, #45	; 0x2d
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fa8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006fac:	f027 0720 	bic.w	r7, r7, #32
 8006fb0:	2f46      	cmp	r7, #70	; 0x46
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006fb6:	700b      	strb	r3, [r1, #0]
 8006fb8:	d004      	beq.n	8006fc4 <__cvt+0x34>
 8006fba:	2f45      	cmp	r7, #69	; 0x45
 8006fbc:	d100      	bne.n	8006fc0 <__cvt+0x30>
 8006fbe:	3501      	adds	r5, #1
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e000      	b.n	8006fc6 <__cvt+0x36>
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	aa07      	add	r2, sp, #28
 8006fc8:	9204      	str	r2, [sp, #16]
 8006fca:	aa06      	add	r2, sp, #24
 8006fcc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006fd0:	e9cd 3500 	strd	r3, r5, [sp]
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4633      	mov	r3, r6
 8006fd8:	f000 fcda 	bl	8007990 <_dtoa_r>
 8006fdc:	2f47      	cmp	r7, #71	; 0x47
 8006fde:	4680      	mov	r8, r0
 8006fe0:	d102      	bne.n	8006fe8 <__cvt+0x58>
 8006fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fe4:	07db      	lsls	r3, r3, #31
 8006fe6:	d526      	bpl.n	8007036 <__cvt+0xa6>
 8006fe8:	2f46      	cmp	r7, #70	; 0x46
 8006fea:	eb08 0905 	add.w	r9, r8, r5
 8006fee:	d111      	bne.n	8007014 <__cvt+0x84>
 8006ff0:	f898 3000 	ldrb.w	r3, [r8]
 8006ff4:	2b30      	cmp	r3, #48	; 0x30
 8006ff6:	d10a      	bne.n	800700e <__cvt+0x7e>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4631      	mov	r1, r6
 8007000:	f7f9 fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007004:	b918      	cbnz	r0, 800700e <__cvt+0x7e>
 8007006:	f1c5 0501 	rsb	r5, r5, #1
 800700a:	f8ca 5000 	str.w	r5, [sl]
 800700e:	f8da 3000 	ldr.w	r3, [sl]
 8007012:	4499      	add	r9, r3
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	4620      	mov	r0, r4
 800701a:	4631      	mov	r1, r6
 800701c:	f7f9 fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8007020:	b938      	cbnz	r0, 8007032 <__cvt+0xa2>
 8007022:	2230      	movs	r2, #48	; 0x30
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	454b      	cmp	r3, r9
 8007028:	d205      	bcs.n	8007036 <__cvt+0xa6>
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	9107      	str	r1, [sp, #28]
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e7f8      	b.n	8007024 <__cvt+0x94>
 8007032:	f8cd 901c 	str.w	r9, [sp, #28]
 8007036:	4640      	mov	r0, r8
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800703c:	eba3 0308 	sub.w	r3, r3, r8
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	b008      	add	sp, #32
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007048 <__exponent>:
 8007048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800704a:	2900      	cmp	r1, #0
 800704c:	bfb4      	ite	lt
 800704e:	232d      	movlt	r3, #45	; 0x2d
 8007050:	232b      	movge	r3, #43	; 0x2b
 8007052:	4604      	mov	r4, r0
 8007054:	bfb8      	it	lt
 8007056:	4249      	neglt	r1, r1
 8007058:	2909      	cmp	r1, #9
 800705a:	f804 2b02 	strb.w	r2, [r4], #2
 800705e:	7043      	strb	r3, [r0, #1]
 8007060:	dd21      	ble.n	80070a6 <__exponent+0x5e>
 8007062:	f10d 0307 	add.w	r3, sp, #7
 8007066:	461f      	mov	r7, r3
 8007068:	260a      	movs	r6, #10
 800706a:	fb91 f5f6 	sdiv	r5, r1, r6
 800706e:	fb06 1115 	mls	r1, r6, r5, r1
 8007072:	2d09      	cmp	r5, #9
 8007074:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007078:	f803 1c01 	strb.w	r1, [r3, #-1]
 800707c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007080:	4629      	mov	r1, r5
 8007082:	dc09      	bgt.n	8007098 <__exponent+0x50>
 8007084:	3130      	adds	r1, #48	; 0x30
 8007086:	3b02      	subs	r3, #2
 8007088:	f802 1c01 	strb.w	r1, [r2, #-1]
 800708c:	42bb      	cmp	r3, r7
 800708e:	4622      	mov	r2, r4
 8007090:	d304      	bcc.n	800709c <__exponent+0x54>
 8007092:	1a10      	subs	r0, r2, r0
 8007094:	b003      	add	sp, #12
 8007096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007098:	4613      	mov	r3, r2
 800709a:	e7e6      	b.n	800706a <__exponent+0x22>
 800709c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a0:	f804 2b01 	strb.w	r2, [r4], #1
 80070a4:	e7f2      	b.n	800708c <__exponent+0x44>
 80070a6:	2330      	movs	r3, #48	; 0x30
 80070a8:	4419      	add	r1, r3
 80070aa:	7083      	strb	r3, [r0, #2]
 80070ac:	1d02      	adds	r2, r0, #4
 80070ae:	70c1      	strb	r1, [r0, #3]
 80070b0:	e7ef      	b.n	8007092 <__exponent+0x4a>
	...

080070b4 <_printf_float>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	b091      	sub	sp, #68	; 0x44
 80070ba:	460c      	mov	r4, r1
 80070bc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80070be:	4693      	mov	fp, r2
 80070c0:	461e      	mov	r6, r3
 80070c2:	4605      	mov	r5, r0
 80070c4:	f001 fa18 	bl	80084f8 <_localeconv_r>
 80070c8:	6803      	ldr	r3, [r0, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	9309      	str	r3, [sp, #36]	; 0x24
 80070ce:	f7f9 f83f 	bl	8000150 <strlen>
 80070d2:	2300      	movs	r3, #0
 80070d4:	930e      	str	r3, [sp, #56]	; 0x38
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	900a      	str	r0, [sp, #40]	; 0x28
 80070da:	3307      	adds	r3, #7
 80070dc:	f023 0307 	bic.w	r3, r3, #7
 80070e0:	f103 0208 	add.w	r2, r3, #8
 80070e4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80070e8:	f8d4 a000 	ldr.w	sl, [r4]
 80070ec:	603a      	str	r2, [r7, #0]
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070f6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80070fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007104:	4ba6      	ldr	r3, [pc, #664]	; (80073a0 <_printf_float+0x2ec>)
 8007106:	4638      	mov	r0, r7
 8007108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800710a:	f7f9 fc7f 	bl	8000a0c <__aeabi_dcmpun>
 800710e:	bb68      	cbnz	r0, 800716c <_printf_float+0xb8>
 8007110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007114:	4ba2      	ldr	r3, [pc, #648]	; (80073a0 <_printf_float+0x2ec>)
 8007116:	4638      	mov	r0, r7
 8007118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800711a:	f7f9 fc59 	bl	80009d0 <__aeabi_dcmple>
 800711e:	bb28      	cbnz	r0, 800716c <_printf_float+0xb8>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4638      	mov	r0, r7
 8007126:	4649      	mov	r1, r9
 8007128:	f7f9 fc48 	bl	80009bc <__aeabi_dcmplt>
 800712c:	b110      	cbz	r0, 8007134 <_printf_float+0x80>
 800712e:	232d      	movs	r3, #45	; 0x2d
 8007130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007134:	4f9b      	ldr	r7, [pc, #620]	; (80073a4 <_printf_float+0x2f0>)
 8007136:	4b9c      	ldr	r3, [pc, #624]	; (80073a8 <_printf_float+0x2f4>)
 8007138:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800713c:	bf98      	it	ls
 800713e:	461f      	movls	r7, r3
 8007140:	2303      	movs	r3, #3
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	f02a 0304 	bic.w	r3, sl, #4
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	9600      	str	r6, [sp, #0]
 8007150:	465b      	mov	r3, fp
 8007152:	aa0f      	add	r2, sp, #60	; 0x3c
 8007154:	4621      	mov	r1, r4
 8007156:	4628      	mov	r0, r5
 8007158:	f000 f9e2 	bl	8007520 <_printf_common>
 800715c:	3001      	adds	r0, #1
 800715e:	f040 8090 	bne.w	8007282 <_printf_float+0x1ce>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007166:	b011      	add	sp, #68	; 0x44
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	463a      	mov	r2, r7
 800716e:	464b      	mov	r3, r9
 8007170:	4638      	mov	r0, r7
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fc4a 	bl	8000a0c <__aeabi_dcmpun>
 8007178:	b110      	cbz	r0, 8007180 <_printf_float+0xcc>
 800717a:	4f8c      	ldr	r7, [pc, #560]	; (80073ac <_printf_float+0x2f8>)
 800717c:	4b8c      	ldr	r3, [pc, #560]	; (80073b0 <_printf_float+0x2fc>)
 800717e:	e7db      	b.n	8007138 <_printf_float+0x84>
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	a80d      	add	r0, sp, #52	; 0x34
 800718a:	a90e      	add	r1, sp, #56	; 0x38
 800718c:	d140      	bne.n	8007210 <_printf_float+0x15c>
 800718e:	2306      	movs	r3, #6
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	f04f 0c00 	mov.w	ip, #0
 8007196:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800719a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	463a      	mov	r2, r7
 80071aa:	464b      	mov	r3, r9
 80071ac:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80071b0:	4628      	mov	r0, r5
 80071b2:	f7ff feed 	bl	8006f90 <__cvt>
 80071b6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80071ba:	2b47      	cmp	r3, #71	; 0x47
 80071bc:	4607      	mov	r7, r0
 80071be:	d109      	bne.n	80071d4 <_printf_float+0x120>
 80071c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c2:	1cd8      	adds	r0, r3, #3
 80071c4:	db02      	blt.n	80071cc <_printf_float+0x118>
 80071c6:	6862      	ldr	r2, [r4, #4]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	dd47      	ble.n	800725c <_printf_float+0x1a8>
 80071cc:	f1a8 0802 	sub.w	r8, r8, #2
 80071d0:	fa5f f888 	uxtb.w	r8, r8
 80071d4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80071d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071da:	d824      	bhi.n	8007226 <_printf_float+0x172>
 80071dc:	3901      	subs	r1, #1
 80071de:	4642      	mov	r2, r8
 80071e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071e4:	910d      	str	r1, [sp, #52]	; 0x34
 80071e6:	f7ff ff2f 	bl	8007048 <__exponent>
 80071ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ec:	4681      	mov	r9, r0
 80071ee:	1813      	adds	r3, r2, r0
 80071f0:	2a01      	cmp	r2, #1
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	dc02      	bgt.n	80071fc <_printf_float+0x148>
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	07d1      	lsls	r1, r2, #31
 80071fa:	d501      	bpl.n	8007200 <_printf_float+0x14c>
 80071fc:	3301      	adds	r3, #1
 80071fe:	6123      	str	r3, [r4, #16]
 8007200:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0a2      	beq.n	800714e <_printf_float+0x9a>
 8007208:	232d      	movs	r3, #45	; 0x2d
 800720a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720e:	e79e      	b.n	800714e <_printf_float+0x9a>
 8007210:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007214:	f000 816e 	beq.w	80074f4 <_printf_float+0x440>
 8007218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800721c:	d1b9      	bne.n	8007192 <_printf_float+0xde>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1b7      	bne.n	8007192 <_printf_float+0xde>
 8007222:	2301      	movs	r3, #1
 8007224:	e7b4      	b.n	8007190 <_printf_float+0xdc>
 8007226:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800722a:	d119      	bne.n	8007260 <_printf_float+0x1ac>
 800722c:	2900      	cmp	r1, #0
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	dd0c      	ble.n	800724c <_printf_float+0x198>
 8007232:	6121      	str	r1, [r4, #16]
 8007234:	b913      	cbnz	r3, 800723c <_printf_float+0x188>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	07d2      	lsls	r2, r2, #31
 800723a:	d502      	bpl.n	8007242 <_printf_float+0x18e>
 800723c:	3301      	adds	r3, #1
 800723e:	440b      	add	r3, r1
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007244:	f04f 0900 	mov.w	r9, #0
 8007248:	65a3      	str	r3, [r4, #88]	; 0x58
 800724a:	e7d9      	b.n	8007200 <_printf_float+0x14c>
 800724c:	b913      	cbnz	r3, 8007254 <_printf_float+0x1a0>
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	07d0      	lsls	r0, r2, #31
 8007252:	d501      	bpl.n	8007258 <_printf_float+0x1a4>
 8007254:	3302      	adds	r3, #2
 8007256:	e7f3      	b.n	8007240 <_printf_float+0x18c>
 8007258:	2301      	movs	r3, #1
 800725a:	e7f1      	b.n	8007240 <_printf_float+0x18c>
 800725c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007260:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007264:	4293      	cmp	r3, r2
 8007266:	db05      	blt.n	8007274 <_printf_float+0x1c0>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	07d1      	lsls	r1, r2, #31
 800726e:	d5e8      	bpl.n	8007242 <_printf_float+0x18e>
 8007270:	3301      	adds	r3, #1
 8007272:	e7e5      	b.n	8007240 <_printf_float+0x18c>
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfcc      	ite	gt
 8007278:	2301      	movgt	r3, #1
 800727a:	f1c3 0302 	rsble	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	e7de      	b.n	8007240 <_printf_float+0x18c>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	055a      	lsls	r2, r3, #21
 8007286:	d407      	bmi.n	8007298 <_printf_float+0x1e4>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	463a      	mov	r2, r7
 800728c:	4659      	mov	r1, fp
 800728e:	4628      	mov	r0, r5
 8007290:	47b0      	blx	r6
 8007292:	3001      	adds	r0, #1
 8007294:	d129      	bne.n	80072ea <_printf_float+0x236>
 8007296:	e764      	b.n	8007162 <_printf_float+0xae>
 8007298:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800729c:	f240 80d7 	bls.w	800744e <_printf_float+0x39a>
 80072a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	f7f9 fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80072ac:	b388      	cbz	r0, 8007312 <_printf_float+0x25e>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4a40      	ldr	r2, [pc, #256]	; (80073b4 <_printf_float+0x300>)
 80072b2:	4659      	mov	r1, fp
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b0      	blx	r6
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f af52 	beq.w	8007162 <_printf_float+0xae>
 80072be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072c2:	429a      	cmp	r2, r3
 80072c4:	db02      	blt.n	80072cc <_printf_float+0x218>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	07d8      	lsls	r0, r3, #31
 80072ca:	d50e      	bpl.n	80072ea <_printf_float+0x236>
 80072cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d0:	4659      	mov	r1, fp
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b0      	blx	r6
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f af43 	beq.w	8007162 <_printf_float+0xae>
 80072dc:	2700      	movs	r7, #0
 80072de:	f104 081a 	add.w	r8, r4, #26
 80072e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e4:	3b01      	subs	r3, #1
 80072e6:	42bb      	cmp	r3, r7
 80072e8:	dc09      	bgt.n	80072fe <_printf_float+0x24a>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	079f      	lsls	r7, r3, #30
 80072ee:	f100 80fd 	bmi.w	80074ec <_printf_float+0x438>
 80072f2:	68e0      	ldr	r0, [r4, #12]
 80072f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072f6:	4298      	cmp	r0, r3
 80072f8:	bfb8      	it	lt
 80072fa:	4618      	movlt	r0, r3
 80072fc:	e733      	b.n	8007166 <_printf_float+0xb2>
 80072fe:	2301      	movs	r3, #1
 8007300:	4642      	mov	r2, r8
 8007302:	4659      	mov	r1, fp
 8007304:	4628      	mov	r0, r5
 8007306:	47b0      	blx	r6
 8007308:	3001      	adds	r0, #1
 800730a:	f43f af2a 	beq.w	8007162 <_printf_float+0xae>
 800730e:	3701      	adds	r7, #1
 8007310:	e7e7      	b.n	80072e2 <_printf_float+0x22e>
 8007312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc2b      	bgt.n	8007370 <_printf_float+0x2bc>
 8007318:	2301      	movs	r3, #1
 800731a:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <_printf_float+0x300>)
 800731c:	4659      	mov	r1, fp
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af1d 	beq.w	8007162 <_printf_float+0xae>
 8007328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800732a:	b923      	cbnz	r3, 8007336 <_printf_float+0x282>
 800732c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800732e:	b913      	cbnz	r3, 8007336 <_printf_float+0x282>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	07d9      	lsls	r1, r3, #31
 8007334:	d5d9      	bpl.n	80072ea <_printf_float+0x236>
 8007336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800733a:	4659      	mov	r1, fp
 800733c:	4628      	mov	r0, r5
 800733e:	47b0      	blx	r6
 8007340:	3001      	adds	r0, #1
 8007342:	f43f af0e 	beq.w	8007162 <_printf_float+0xae>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	f104 091a 	add.w	r9, r4, #26
 800734e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007350:	425b      	negs	r3, r3
 8007352:	4543      	cmp	r3, r8
 8007354:	dc01      	bgt.n	800735a <_printf_float+0x2a6>
 8007356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007358:	e797      	b.n	800728a <_printf_float+0x1d6>
 800735a:	2301      	movs	r3, #1
 800735c:	464a      	mov	r2, r9
 800735e:	4659      	mov	r1, fp
 8007360:	4628      	mov	r0, r5
 8007362:	47b0      	blx	r6
 8007364:	3001      	adds	r0, #1
 8007366:	f43f aefc 	beq.w	8007162 <_printf_float+0xae>
 800736a:	f108 0801 	add.w	r8, r8, #1
 800736e:	e7ee      	b.n	800734e <_printf_float+0x29a>
 8007370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007374:	429a      	cmp	r2, r3
 8007376:	bfa8      	it	ge
 8007378:	461a      	movge	r2, r3
 800737a:	2a00      	cmp	r2, #0
 800737c:	4690      	mov	r8, r2
 800737e:	dd07      	ble.n	8007390 <_printf_float+0x2dc>
 8007380:	4613      	mov	r3, r2
 8007382:	4659      	mov	r1, fp
 8007384:	463a      	mov	r2, r7
 8007386:	4628      	mov	r0, r5
 8007388:	47b0      	blx	r6
 800738a:	3001      	adds	r0, #1
 800738c:	f43f aee9 	beq.w	8007162 <_printf_float+0xae>
 8007390:	f104 031a 	add.w	r3, r4, #26
 8007394:	f04f 0a00 	mov.w	sl, #0
 8007398:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800739c:	930b      	str	r3, [sp, #44]	; 0x2c
 800739e:	e015      	b.n	80073cc <_printf_float+0x318>
 80073a0:	7fefffff 	.word	0x7fefffff
 80073a4:	0800a8a8 	.word	0x0800a8a8
 80073a8:	0800a8a4 	.word	0x0800a8a4
 80073ac:	0800a8b0 	.word	0x0800a8b0
 80073b0:	0800a8ac 	.word	0x0800a8ac
 80073b4:	0800a8b4 	.word	0x0800a8b4
 80073b8:	2301      	movs	r3, #1
 80073ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073bc:	4659      	mov	r1, fp
 80073be:	4628      	mov	r0, r5
 80073c0:	47b0      	blx	r6
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f aecd 	beq.w	8007162 <_printf_float+0xae>
 80073c8:	f10a 0a01 	add.w	sl, sl, #1
 80073cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80073d0:	eba9 0308 	sub.w	r3, r9, r8
 80073d4:	4553      	cmp	r3, sl
 80073d6:	dcef      	bgt.n	80073b8 <_printf_float+0x304>
 80073d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073dc:	429a      	cmp	r2, r3
 80073de:	444f      	add	r7, r9
 80073e0:	db14      	blt.n	800740c <_printf_float+0x358>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	d411      	bmi.n	800740c <_printf_float+0x358>
 80073e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80073ec:	eba3 0209 	sub.w	r2, r3, r9
 80073f0:	eba3 0901 	sub.w	r9, r3, r1
 80073f4:	4591      	cmp	r9, r2
 80073f6:	bfa8      	it	ge
 80073f8:	4691      	movge	r9, r2
 80073fa:	f1b9 0f00 	cmp.w	r9, #0
 80073fe:	dc0d      	bgt.n	800741c <_printf_float+0x368>
 8007400:	2700      	movs	r7, #0
 8007402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007406:	f104 081a 	add.w	r8, r4, #26
 800740a:	e018      	b.n	800743e <_printf_float+0x38a>
 800740c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007410:	4659      	mov	r1, fp
 8007412:	4628      	mov	r0, r5
 8007414:	47b0      	blx	r6
 8007416:	3001      	adds	r0, #1
 8007418:	d1e6      	bne.n	80073e8 <_printf_float+0x334>
 800741a:	e6a2      	b.n	8007162 <_printf_float+0xae>
 800741c:	464b      	mov	r3, r9
 800741e:	463a      	mov	r2, r7
 8007420:	4659      	mov	r1, fp
 8007422:	4628      	mov	r0, r5
 8007424:	47b0      	blx	r6
 8007426:	3001      	adds	r0, #1
 8007428:	d1ea      	bne.n	8007400 <_printf_float+0x34c>
 800742a:	e69a      	b.n	8007162 <_printf_float+0xae>
 800742c:	2301      	movs	r3, #1
 800742e:	4642      	mov	r2, r8
 8007430:	4659      	mov	r1, fp
 8007432:	4628      	mov	r0, r5
 8007434:	47b0      	blx	r6
 8007436:	3001      	adds	r0, #1
 8007438:	f43f ae93 	beq.w	8007162 <_printf_float+0xae>
 800743c:	3701      	adds	r7, #1
 800743e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	eba3 0309 	sub.w	r3, r3, r9
 8007448:	42bb      	cmp	r3, r7
 800744a:	dcef      	bgt.n	800742c <_printf_float+0x378>
 800744c:	e74d      	b.n	80072ea <_printf_float+0x236>
 800744e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007450:	2a01      	cmp	r2, #1
 8007452:	dc01      	bgt.n	8007458 <_printf_float+0x3a4>
 8007454:	07db      	lsls	r3, r3, #31
 8007456:	d538      	bpl.n	80074ca <_printf_float+0x416>
 8007458:	2301      	movs	r3, #1
 800745a:	463a      	mov	r2, r7
 800745c:	4659      	mov	r1, fp
 800745e:	4628      	mov	r0, r5
 8007460:	47b0      	blx	r6
 8007462:	3001      	adds	r0, #1
 8007464:	f43f ae7d 	beq.w	8007162 <_printf_float+0xae>
 8007468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800746c:	4659      	mov	r1, fp
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	3001      	adds	r0, #1
 8007474:	f107 0701 	add.w	r7, r7, #1
 8007478:	f43f ae73 	beq.w	8007162 <_printf_float+0xae>
 800747c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007482:	2200      	movs	r2, #0
 8007484:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007488:	2300      	movs	r3, #0
 800748a:	f7f9 fa8d 	bl	80009a8 <__aeabi_dcmpeq>
 800748e:	b9c0      	cbnz	r0, 80074c2 <_printf_float+0x40e>
 8007490:	4643      	mov	r3, r8
 8007492:	463a      	mov	r2, r7
 8007494:	4659      	mov	r1, fp
 8007496:	4628      	mov	r0, r5
 8007498:	47b0      	blx	r6
 800749a:	3001      	adds	r0, #1
 800749c:	d10d      	bne.n	80074ba <_printf_float+0x406>
 800749e:	e660      	b.n	8007162 <_printf_float+0xae>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4642      	mov	r2, r8
 80074a4:	4659      	mov	r1, fp
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b0      	blx	r6
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f ae59 	beq.w	8007162 <_printf_float+0xae>
 80074b0:	3701      	adds	r7, #1
 80074b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074b4:	3b01      	subs	r3, #1
 80074b6:	42bb      	cmp	r3, r7
 80074b8:	dcf2      	bgt.n	80074a0 <_printf_float+0x3ec>
 80074ba:	464b      	mov	r3, r9
 80074bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074c0:	e6e4      	b.n	800728c <_printf_float+0x1d8>
 80074c2:	2700      	movs	r7, #0
 80074c4:	f104 081a 	add.w	r8, r4, #26
 80074c8:	e7f3      	b.n	80074b2 <_printf_float+0x3fe>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7e1      	b.n	8007492 <_printf_float+0x3de>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4642      	mov	r2, r8
 80074d2:	4659      	mov	r1, fp
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f ae42 	beq.w	8007162 <_printf_float+0xae>
 80074de:	3701      	adds	r7, #1
 80074e0:	68e3      	ldr	r3, [r4, #12]
 80074e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	42bb      	cmp	r3, r7
 80074e8:	dcf1      	bgt.n	80074ce <_printf_float+0x41a>
 80074ea:	e702      	b.n	80072f2 <_printf_float+0x23e>
 80074ec:	2700      	movs	r7, #0
 80074ee:	f104 0819 	add.w	r8, r4, #25
 80074f2:	e7f5      	b.n	80074e0 <_printf_float+0x42c>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f43f ae94 	beq.w	8007222 <_printf_float+0x16e>
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007502:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800750c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	463a      	mov	r2, r7
 8007514:	464b      	mov	r3, r9
 8007516:	4628      	mov	r0, r5
 8007518:	f7ff fd3a 	bl	8006f90 <__cvt>
 800751c:	4607      	mov	r7, r0
 800751e:	e64f      	b.n	80071c0 <_printf_float+0x10c>

08007520 <_printf_common>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	4691      	mov	r9, r2
 8007526:	461f      	mov	r7, r3
 8007528:	688a      	ldr	r2, [r1, #8]
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	4606      	mov	r6, r0
 800752e:	4293      	cmp	r3, r2
 8007530:	bfb8      	it	lt
 8007532:	4613      	movlt	r3, r2
 8007534:	f8c9 3000 	str.w	r3, [r9]
 8007538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800753c:	460c      	mov	r4, r1
 800753e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007542:	b112      	cbz	r2, 800754a <_printf_common+0x2a>
 8007544:	3301      	adds	r3, #1
 8007546:	f8c9 3000 	str.w	r3, [r9]
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	0699      	lsls	r1, r3, #26
 800754e:	bf42      	ittt	mi
 8007550:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007554:	3302      	addmi	r3, #2
 8007556:	f8c9 3000 	strmi.w	r3, [r9]
 800755a:	6825      	ldr	r5, [r4, #0]
 800755c:	f015 0506 	ands.w	r5, r5, #6
 8007560:	d107      	bne.n	8007572 <_printf_common+0x52>
 8007562:	f104 0a19 	add.w	sl, r4, #25
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	f8d9 2000 	ldr.w	r2, [r9]
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	42ab      	cmp	r3, r5
 8007570:	dc29      	bgt.n	80075c6 <_printf_common+0xa6>
 8007572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	3300      	adds	r3, #0
 800757a:	bf18      	it	ne
 800757c:	2301      	movne	r3, #1
 800757e:	0692      	lsls	r2, r2, #26
 8007580:	d42e      	bmi.n	80075e0 <_printf_common+0xc0>
 8007582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007586:	4639      	mov	r1, r7
 8007588:	4630      	mov	r0, r6
 800758a:	47c0      	blx	r8
 800758c:	3001      	adds	r0, #1
 800758e:	d021      	beq.n	80075d4 <_printf_common+0xb4>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	68e5      	ldr	r5, [r4, #12]
 8007594:	f003 0306 	and.w	r3, r3, #6
 8007598:	2b04      	cmp	r3, #4
 800759a:	bf18      	it	ne
 800759c:	2500      	movne	r5, #0
 800759e:	f8d9 2000 	ldr.w	r2, [r9]
 80075a2:	f04f 0900 	mov.w	r9, #0
 80075a6:	bf08      	it	eq
 80075a8:	1aad      	subeq	r5, r5, r2
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	bf08      	it	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bfc4      	itt	gt
 80075b8:	1a9b      	subgt	r3, r3, r2
 80075ba:	18ed      	addgt	r5, r5, r3
 80075bc:	341a      	adds	r4, #26
 80075be:	454d      	cmp	r5, r9
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xd8>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xb8>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4639      	mov	r1, r7
 80075cc:	4630      	mov	r0, r6
 80075ce:	47c0      	blx	r8
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xbc>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c2      	b.n	8007566 <_printf_common+0x46>
 80075e0:	2030      	movs	r0, #48	; 0x30
 80075e2:	18e1      	adds	r1, r4, r3
 80075e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ee:	4422      	add	r2, r4
 80075f0:	3302      	adds	r3, #2
 80075f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f6:	e7c4      	b.n	8007582 <_printf_common+0x62>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4639      	mov	r1, r7
 80075fe:	4630      	mov	r0, r6
 8007600:	47c0      	blx	r8
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xb4>
 8007606:	f109 0901 	add.w	r9, r9, #1
 800760a:	e7d8      	b.n	80075be <_printf_common+0x9e>

0800760c <_printf_i>:
 800760c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007610:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007614:	460c      	mov	r4, r1
 8007616:	7e09      	ldrb	r1, [r1, #24]
 8007618:	b085      	sub	sp, #20
 800761a:	296e      	cmp	r1, #110	; 0x6e
 800761c:	4617      	mov	r7, r2
 800761e:	4606      	mov	r6, r0
 8007620:	4698      	mov	r8, r3
 8007622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007624:	f000 80b3 	beq.w	800778e <_printf_i+0x182>
 8007628:	d822      	bhi.n	8007670 <_printf_i+0x64>
 800762a:	2963      	cmp	r1, #99	; 0x63
 800762c:	d036      	beq.n	800769c <_printf_i+0x90>
 800762e:	d80a      	bhi.n	8007646 <_printf_i+0x3a>
 8007630:	2900      	cmp	r1, #0
 8007632:	f000 80b9 	beq.w	80077a8 <_printf_i+0x19c>
 8007636:	2958      	cmp	r1, #88	; 0x58
 8007638:	f000 8083 	beq.w	8007742 <_printf_i+0x136>
 800763c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007640:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007644:	e032      	b.n	80076ac <_printf_i+0xa0>
 8007646:	2964      	cmp	r1, #100	; 0x64
 8007648:	d001      	beq.n	800764e <_printf_i+0x42>
 800764a:	2969      	cmp	r1, #105	; 0x69
 800764c:	d1f6      	bne.n	800763c <_printf_i+0x30>
 800764e:	6820      	ldr	r0, [r4, #0]
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	0605      	lsls	r5, r0, #24
 8007654:	f103 0104 	add.w	r1, r3, #4
 8007658:	d52a      	bpl.n	80076b0 <_printf_i+0xa4>
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da03      	bge.n	800766a <_printf_i+0x5e>
 8007662:	222d      	movs	r2, #45	; 0x2d
 8007664:	425b      	negs	r3, r3
 8007666:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800766a:	486f      	ldr	r0, [pc, #444]	; (8007828 <_printf_i+0x21c>)
 800766c:	220a      	movs	r2, #10
 800766e:	e039      	b.n	80076e4 <_printf_i+0xd8>
 8007670:	2973      	cmp	r1, #115	; 0x73
 8007672:	f000 809d 	beq.w	80077b0 <_printf_i+0x1a4>
 8007676:	d808      	bhi.n	800768a <_printf_i+0x7e>
 8007678:	296f      	cmp	r1, #111	; 0x6f
 800767a:	d020      	beq.n	80076be <_printf_i+0xb2>
 800767c:	2970      	cmp	r1, #112	; 0x70
 800767e:	d1dd      	bne.n	800763c <_printf_i+0x30>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	f043 0320 	orr.w	r3, r3, #32
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	e003      	b.n	8007692 <_printf_i+0x86>
 800768a:	2975      	cmp	r1, #117	; 0x75
 800768c:	d017      	beq.n	80076be <_printf_i+0xb2>
 800768e:	2978      	cmp	r1, #120	; 0x78
 8007690:	d1d4      	bne.n	800763c <_printf_i+0x30>
 8007692:	2378      	movs	r3, #120	; 0x78
 8007694:	4865      	ldr	r0, [pc, #404]	; (800782c <_printf_i+0x220>)
 8007696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800769a:	e055      	b.n	8007748 <_printf_i+0x13c>
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6011      	str	r1, [r2, #0]
 80076a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076ac:	2301      	movs	r3, #1
 80076ae:	e08c      	b.n	80077ca <_printf_i+0x1be>
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076b6:	6011      	str	r1, [r2, #0]
 80076b8:	bf18      	it	ne
 80076ba:	b21b      	sxthne	r3, r3
 80076bc:	e7cf      	b.n	800765e <_printf_i+0x52>
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	6825      	ldr	r5, [r4, #0]
 80076c2:	1d18      	adds	r0, r3, #4
 80076c4:	6010      	str	r0, [r2, #0]
 80076c6:	0628      	lsls	r0, r5, #24
 80076c8:	d501      	bpl.n	80076ce <_printf_i+0xc2>
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	e002      	b.n	80076d4 <_printf_i+0xc8>
 80076ce:	0668      	lsls	r0, r5, #25
 80076d0:	d5fb      	bpl.n	80076ca <_printf_i+0xbe>
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	296f      	cmp	r1, #111	; 0x6f
 80076d6:	bf14      	ite	ne
 80076d8:	220a      	movne	r2, #10
 80076da:	2208      	moveq	r2, #8
 80076dc:	4852      	ldr	r0, [pc, #328]	; (8007828 <_printf_i+0x21c>)
 80076de:	2100      	movs	r1, #0
 80076e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e4:	6865      	ldr	r5, [r4, #4]
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	60a5      	str	r5, [r4, #8]
 80076ea:	f2c0 8095 	blt.w	8007818 <_printf_i+0x20c>
 80076ee:	6821      	ldr	r1, [r4, #0]
 80076f0:	f021 0104 	bic.w	r1, r1, #4
 80076f4:	6021      	str	r1, [r4, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13d      	bne.n	8007776 <_printf_i+0x16a>
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	f040 808e 	bne.w	800781c <_printf_i+0x210>
 8007700:	4665      	mov	r5, ip
 8007702:	2a08      	cmp	r2, #8
 8007704:	d10b      	bne.n	800771e <_printf_i+0x112>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	07db      	lsls	r3, r3, #31
 800770a:	d508      	bpl.n	800771e <_printf_i+0x112>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	6862      	ldr	r2, [r4, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	bfde      	ittt	le
 8007714:	2330      	movle	r3, #48	; 0x30
 8007716:	f805 3c01 	strble.w	r3, [r5, #-1]
 800771a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800771e:	ebac 0305 	sub.w	r3, ip, r5
 8007722:	6123      	str	r3, [r4, #16]
 8007724:	f8cd 8000 	str.w	r8, [sp]
 8007728:	463b      	mov	r3, r7
 800772a:	aa03      	add	r2, sp, #12
 800772c:	4621      	mov	r1, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff fef6 	bl	8007520 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	d14d      	bne.n	80077d4 <_printf_i+0x1c8>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800773c:	b005      	add	sp, #20
 800773e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007742:	4839      	ldr	r0, [pc, #228]	; (8007828 <_printf_i+0x21c>)
 8007744:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007748:	6813      	ldr	r3, [r2, #0]
 800774a:	6821      	ldr	r1, [r4, #0]
 800774c:	1d1d      	adds	r5, r3, #4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6015      	str	r5, [r2, #0]
 8007752:	060a      	lsls	r2, r1, #24
 8007754:	d50b      	bpl.n	800776e <_printf_i+0x162>
 8007756:	07ca      	lsls	r2, r1, #31
 8007758:	bf44      	itt	mi
 800775a:	f041 0120 	orrmi.w	r1, r1, #32
 800775e:	6021      	strmi	r1, [r4, #0]
 8007760:	b91b      	cbnz	r3, 800776a <_printf_i+0x15e>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	f022 0220 	bic.w	r2, r2, #32
 8007768:	6022      	str	r2, [r4, #0]
 800776a:	2210      	movs	r2, #16
 800776c:	e7b7      	b.n	80076de <_printf_i+0xd2>
 800776e:	064d      	lsls	r5, r1, #25
 8007770:	bf48      	it	mi
 8007772:	b29b      	uxthmi	r3, r3
 8007774:	e7ef      	b.n	8007756 <_printf_i+0x14a>
 8007776:	4665      	mov	r5, ip
 8007778:	fbb3 f1f2 	udiv	r1, r3, r2
 800777c:	fb02 3311 	mls	r3, r2, r1, r3
 8007780:	5cc3      	ldrb	r3, [r0, r3]
 8007782:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007786:	460b      	mov	r3, r1
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f5      	bne.n	8007778 <_printf_i+0x16c>
 800778c:	e7b9      	b.n	8007702 <_printf_i+0xf6>
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	6825      	ldr	r5, [r4, #0]
 8007792:	1d18      	adds	r0, r3, #4
 8007794:	6961      	ldr	r1, [r4, #20]
 8007796:	6010      	str	r0, [r2, #0]
 8007798:	0628      	lsls	r0, r5, #24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	d501      	bpl.n	80077a2 <_printf_i+0x196>
 800779e:	6019      	str	r1, [r3, #0]
 80077a0:	e002      	b.n	80077a8 <_printf_i+0x19c>
 80077a2:	066a      	lsls	r2, r5, #25
 80077a4:	d5fb      	bpl.n	800779e <_printf_i+0x192>
 80077a6:	8019      	strh	r1, [r3, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	4665      	mov	r5, ip
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	e7b9      	b.n	8007724 <_printf_i+0x118>
 80077b0:	6813      	ldr	r3, [r2, #0]
 80077b2:	1d19      	adds	r1, r3, #4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	681d      	ldr	r5, [r3, #0]
 80077b8:	6862      	ldr	r2, [r4, #4]
 80077ba:	2100      	movs	r1, #0
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 feb1 	bl	8008524 <memchr>
 80077c2:	b108      	cbz	r0, 80077c8 <_printf_i+0x1bc>
 80077c4:	1b40      	subs	r0, r0, r5
 80077c6:	6060      	str	r0, [r4, #4]
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	2300      	movs	r3, #0
 80077ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d2:	e7a7      	b.n	8007724 <_printf_i+0x118>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	462a      	mov	r2, r5
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d0aa      	beq.n	8007738 <_printf_i+0x12c>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	079b      	lsls	r3, r3, #30
 80077e6:	d413      	bmi.n	8007810 <_printf_i+0x204>
 80077e8:	68e0      	ldr	r0, [r4, #12]
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	4298      	cmp	r0, r3
 80077ee:	bfb8      	it	lt
 80077f0:	4618      	movlt	r0, r3
 80077f2:	e7a3      	b.n	800773c <_printf_i+0x130>
 80077f4:	2301      	movs	r3, #1
 80077f6:	464a      	mov	r2, r9
 80077f8:	4639      	mov	r1, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d09a      	beq.n	8007738 <_printf_i+0x12c>
 8007802:	3501      	adds	r5, #1
 8007804:	68e3      	ldr	r3, [r4, #12]
 8007806:	9a03      	ldr	r2, [sp, #12]
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	42ab      	cmp	r3, r5
 800780c:	dcf2      	bgt.n	80077f4 <_printf_i+0x1e8>
 800780e:	e7eb      	b.n	80077e8 <_printf_i+0x1dc>
 8007810:	2500      	movs	r5, #0
 8007812:	f104 0919 	add.w	r9, r4, #25
 8007816:	e7f5      	b.n	8007804 <_printf_i+0x1f8>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1ac      	bne.n	8007776 <_printf_i+0x16a>
 800781c:	7803      	ldrb	r3, [r0, #0]
 800781e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007826:	e76c      	b.n	8007702 <_printf_i+0xf6>
 8007828:	0800a8b6 	.word	0x0800a8b6
 800782c:	0800a8c7 	.word	0x0800a8c7

08007830 <siprintf>:
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007836:	b500      	push	{lr}
 8007838:	b09c      	sub	sp, #112	; 0x70
 800783a:	ab1d      	add	r3, sp, #116	; 0x74
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	9006      	str	r0, [sp, #24]
 8007840:	9107      	str	r1, [sp, #28]
 8007842:	9104      	str	r1, [sp, #16]
 8007844:	4808      	ldr	r0, [pc, #32]	; (8007868 <siprintf+0x38>)
 8007846:	4909      	ldr	r1, [pc, #36]	; (800786c <siprintf+0x3c>)
 8007848:	f853 2b04 	ldr.w	r2, [r3], #4
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	6800      	ldr	r0, [r0, #0]
 8007850:	a902      	add	r1, sp, #8
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	f001 fa6a 	bl	8008d2c <_svfiprintf_r>
 8007858:	2200      	movs	r2, #0
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	b01c      	add	sp, #112	; 0x70
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b003      	add	sp, #12
 8007866:	4770      	bx	lr
 8007868:	20000010 	.word	0x20000010
 800786c:	ffff0208 	.word	0xffff0208

08007870 <quorem>:
 8007870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	6903      	ldr	r3, [r0, #16]
 8007876:	690c      	ldr	r4, [r1, #16]
 8007878:	4680      	mov	r8, r0
 800787a:	42a3      	cmp	r3, r4
 800787c:	f2c0 8084 	blt.w	8007988 <quorem+0x118>
 8007880:	3c01      	subs	r4, #1
 8007882:	f101 0714 	add.w	r7, r1, #20
 8007886:	f100 0614 	add.w	r6, r0, #20
 800788a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800788e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007892:	3501      	adds	r5, #1
 8007894:	fbb0 f5f5 	udiv	r5, r0, r5
 8007898:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800789c:	eb06 030c 	add.w	r3, r6, ip
 80078a0:	eb07 090c 	add.w	r9, r7, ip
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	b39d      	cbz	r5, 8007910 <quorem+0xa0>
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	4638      	mov	r0, r7
 80078ae:	46b6      	mov	lr, r6
 80078b0:	46d3      	mov	fp, sl
 80078b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80078b6:	b293      	uxth	r3, r2
 80078b8:	fb05 a303 	mla	r3, r5, r3, sl
 80078bc:	0c12      	lsrs	r2, r2, #16
 80078be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078c2:	fb05 a202 	mla	r2, r5, r2, sl
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ebab 0303 	sub.w	r3, fp, r3
 80078cc:	f8de b000 	ldr.w	fp, [lr]
 80078d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80078d4:	fa1f fb8b 	uxth.w	fp, fp
 80078d8:	445b      	add	r3, fp
 80078da:	fa1f fb82 	uxth.w	fp, r2
 80078de:	f8de 2000 	ldr.w	r2, [lr]
 80078e2:	4581      	cmp	r9, r0
 80078e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80078e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80078f6:	f84e 3b04 	str.w	r3, [lr], #4
 80078fa:	d2da      	bcs.n	80078b2 <quorem+0x42>
 80078fc:	f856 300c 	ldr.w	r3, [r6, ip]
 8007900:	b933      	cbnz	r3, 8007910 <quorem+0xa0>
 8007902:	9b01      	ldr	r3, [sp, #4]
 8007904:	3b04      	subs	r3, #4
 8007906:	429e      	cmp	r6, r3
 8007908:	461a      	mov	r2, r3
 800790a:	d331      	bcc.n	8007970 <quorem+0x100>
 800790c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007910:	4640      	mov	r0, r8
 8007912:	f001 f835 	bl	8008980 <__mcmp>
 8007916:	2800      	cmp	r0, #0
 8007918:	db26      	blt.n	8007968 <quorem+0xf8>
 800791a:	4630      	mov	r0, r6
 800791c:	f04f 0c00 	mov.w	ip, #0
 8007920:	3501      	adds	r5, #1
 8007922:	f857 1b04 	ldr.w	r1, [r7], #4
 8007926:	f8d0 e000 	ldr.w	lr, [r0]
 800792a:	b28b      	uxth	r3, r1
 800792c:	ebac 0303 	sub.w	r3, ip, r3
 8007930:	fa1f f28e 	uxth.w	r2, lr
 8007934:	4413      	add	r3, r2
 8007936:	0c0a      	lsrs	r2, r1, #16
 8007938:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800793c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007946:	45b9      	cmp	r9, r7
 8007948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800794c:	f840 3b04 	str.w	r3, [r0], #4
 8007950:	d2e7      	bcs.n	8007922 <quorem+0xb2>
 8007952:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007956:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800795a:	b92a      	cbnz	r2, 8007968 <quorem+0xf8>
 800795c:	3b04      	subs	r3, #4
 800795e:	429e      	cmp	r6, r3
 8007960:	461a      	mov	r2, r3
 8007962:	d30b      	bcc.n	800797c <quorem+0x10c>
 8007964:	f8c8 4010 	str.w	r4, [r8, #16]
 8007968:	4628      	mov	r0, r5
 800796a:	b003      	add	sp, #12
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	3b04      	subs	r3, #4
 8007974:	2a00      	cmp	r2, #0
 8007976:	d1c9      	bne.n	800790c <quorem+0x9c>
 8007978:	3c01      	subs	r4, #1
 800797a:	e7c4      	b.n	8007906 <quorem+0x96>
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	3b04      	subs	r3, #4
 8007980:	2a00      	cmp	r2, #0
 8007982:	d1ef      	bne.n	8007964 <quorem+0xf4>
 8007984:	3c01      	subs	r4, #1
 8007986:	e7ea      	b.n	800795e <quorem+0xee>
 8007988:	2000      	movs	r0, #0
 800798a:	e7ee      	b.n	800796a <quorem+0xfa>
 800798c:	0000      	movs	r0, r0
	...

08007990 <_dtoa_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4616      	mov	r6, r2
 8007996:	461f      	mov	r7, r3
 8007998:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800799a:	b095      	sub	sp, #84	; 0x54
 800799c:	4604      	mov	r4, r0
 800799e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80079a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079a6:	b93d      	cbnz	r5, 80079b8 <_dtoa_r+0x28>
 80079a8:	2010      	movs	r0, #16
 80079aa:	f000 fdb3 	bl	8008514 <malloc>
 80079ae:	6260      	str	r0, [r4, #36]	; 0x24
 80079b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079b4:	6005      	str	r5, [r0, #0]
 80079b6:	60c5      	str	r5, [r0, #12]
 80079b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	b151      	cbz	r1, 80079d4 <_dtoa_r+0x44>
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	2301      	movs	r3, #1
 80079c2:	4093      	lsls	r3, r2
 80079c4:	604a      	str	r2, [r1, #4]
 80079c6:	608b      	str	r3, [r1, #8]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fdf8 	bl	80085be <_Bfree>
 80079ce:	2200      	movs	r2, #0
 80079d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	1e3b      	subs	r3, r7, #0
 80079d6:	bfaf      	iteee	ge
 80079d8:	2300      	movge	r3, #0
 80079da:	2201      	movlt	r2, #1
 80079dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079e0:	9303      	strlt	r3, [sp, #12]
 80079e2:	bfac      	ite	ge
 80079e4:	f8c8 3000 	strge.w	r3, [r8]
 80079e8:	f8c8 2000 	strlt.w	r2, [r8]
 80079ec:	4bae      	ldr	r3, [pc, #696]	; (8007ca8 <_dtoa_r+0x318>)
 80079ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079f2:	ea33 0308 	bics.w	r3, r3, r8
 80079f6:	d11b      	bne.n	8007a30 <_dtoa_r+0xa0>
 80079f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80079fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	b923      	cbnz	r3, 8007a0e <_dtoa_r+0x7e>
 8007a04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f000 8545 	beq.w	8008498 <_dtoa_r+0xb08>
 8007a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a10:	b953      	cbnz	r3, 8007a28 <_dtoa_r+0x98>
 8007a12:	4ba6      	ldr	r3, [pc, #664]	; (8007cac <_dtoa_r+0x31c>)
 8007a14:	e021      	b.n	8007a5a <_dtoa_r+0xca>
 8007a16:	4ba6      	ldr	r3, [pc, #664]	; (8007cb0 <_dtoa_r+0x320>)
 8007a18:	9306      	str	r3, [sp, #24]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	9806      	ldr	r0, [sp, #24]
 8007a22:	b015      	add	sp, #84	; 0x54
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	4ba0      	ldr	r3, [pc, #640]	; (8007cac <_dtoa_r+0x31c>)
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	3303      	adds	r3, #3
 8007a2e:	e7f5      	b.n	8007a1c <_dtoa_r+0x8c>
 8007a30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	f7f8 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8007a40:	4682      	mov	sl, r0
 8007a42:	b160      	cbz	r0, 8007a5e <_dtoa_r+0xce>
 8007a44:	2301      	movs	r3, #1
 8007a46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8520 	beq.w	8008492 <_dtoa_r+0xb02>
 8007a52:	4b98      	ldr	r3, [pc, #608]	; (8007cb4 <_dtoa_r+0x324>)
 8007a54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	9306      	str	r3, [sp, #24]
 8007a5c:	e7e0      	b.n	8007a20 <_dtoa_r+0x90>
 8007a5e:	ab12      	add	r3, sp, #72	; 0x48
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	ab13      	add	r3, sp, #76	; 0x4c
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	4632      	mov	r2, r6
 8007a68:	463b      	mov	r3, r7
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f001 f800 	bl	8008a70 <__d2b>
 8007a70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a74:	4683      	mov	fp, r0
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	d07d      	beq.n	8007b76 <_dtoa_r+0x1e6>
 8007a7a:	46b0      	mov	r8, r6
 8007a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007a84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007a88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b89      	ldr	r3, [pc, #548]	; (8007cb8 <_dtoa_r+0x328>)
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f8 fb66 	bl	8000168 <__aeabi_dsub>
 8007a9c:	a37c      	add	r3, pc, #496	; (adr r3, 8007c90 <_dtoa_r+0x300>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fd19 	bl	80004d8 <__aeabi_dmul>
 8007aa6:	a37c      	add	r3, pc, #496	; (adr r3, 8007c98 <_dtoa_r+0x308>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fb5e 	bl	800016c <__adddf3>
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	f7f8 fca5 	bl	8000404 <__aeabi_i2d>
 8007aba:	a379      	add	r3, pc, #484	; (adr r3, 8007ca0 <_dtoa_r+0x310>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fd0a 	bl	80004d8 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7f8 fb4e 	bl	800016c <__adddf3>
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	f7f8 ffb0 	bl	8000a38 <__aeabi_d2iz>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4682      	mov	sl, r0
 8007adc:	2300      	movs	r3, #0
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f8 ff6b 	bl	80009bc <__aeabi_dcmplt>
 8007ae6:	b148      	cbz	r0, 8007afc <_dtoa_r+0x16c>
 8007ae8:	4650      	mov	r0, sl
 8007aea:	f7f8 fc8b 	bl	8000404 <__aeabi_i2d>
 8007aee:	4632      	mov	r2, r6
 8007af0:	463b      	mov	r3, r7
 8007af2:	f7f8 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8007af6:	b908      	cbnz	r0, 8007afc <_dtoa_r+0x16c>
 8007af8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007afc:	f1ba 0f16 	cmp.w	sl, #22
 8007b00:	d85a      	bhi.n	8007bb8 <_dtoa_r+0x228>
 8007b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b06:	496d      	ldr	r1, [pc, #436]	; (8007cbc <_dtoa_r+0x32c>)
 8007b08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b10:	f7f8 ff72 	bl	80009f8 <__aeabi_dcmpgt>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d051      	beq.n	8007bbc <_dtoa_r+0x22c>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b22:	1b5d      	subs	r5, r3, r5
 8007b24:	1e6b      	subs	r3, r5, #1
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	bf43      	ittte	mi
 8007b2a:	2300      	movmi	r3, #0
 8007b2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007b30:	9307      	strmi	r3, [sp, #28]
 8007b32:	f04f 0900 	movpl.w	r9, #0
 8007b36:	f1ba 0f00 	cmp.w	sl, #0
 8007b3a:	db41      	blt.n	8007bc0 <_dtoa_r+0x230>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007b42:	4453      	add	r3, sl
 8007b44:	9307      	str	r3, [sp, #28]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b4c:	2b09      	cmp	r3, #9
 8007b4e:	f200 808f 	bhi.w	8007c70 <_dtoa_r+0x2e0>
 8007b52:	2b05      	cmp	r3, #5
 8007b54:	bfc4      	itt	gt
 8007b56:	3b04      	subgt	r3, #4
 8007b58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b5c:	bfc8      	it	gt
 8007b5e:	2500      	movgt	r5, #0
 8007b60:	f1a3 0302 	sub.w	r3, r3, #2
 8007b64:	bfd8      	it	le
 8007b66:	2501      	movle	r5, #1
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	f200 808d 	bhi.w	8007c88 <_dtoa_r+0x2f8>
 8007b6e:	e8df f003 	tbb	[pc, r3]
 8007b72:	7d7b      	.short	0x7d7b
 8007b74:	6f2f      	.short	0x6f2f
 8007b76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007b7a:	441d      	add	r5, r3
 8007b7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007b80:	2820      	cmp	r0, #32
 8007b82:	dd13      	ble.n	8007bac <_dtoa_r+0x21c>
 8007b84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007b88:	9b02      	ldr	r3, [sp, #8]
 8007b8a:	fa08 f800 	lsl.w	r8, r8, r0
 8007b8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007b92:	fa23 f000 	lsr.w	r0, r3, r0
 8007b96:	ea48 0000 	orr.w	r0, r8, r0
 8007b9a:	f7f8 fc23 	bl	80003e4 <__aeabi_ui2d>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4680      	mov	r8, r0
 8007ba2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007ba6:	3d01      	subs	r5, #1
 8007ba8:	9310      	str	r3, [sp, #64]	; 0x40
 8007baa:	e771      	b.n	8007a90 <_dtoa_r+0x100>
 8007bac:	9b02      	ldr	r3, [sp, #8]
 8007bae:	f1c0 0020 	rsb	r0, r0, #32
 8007bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb6:	e7f0      	b.n	8007b9a <_dtoa_r+0x20a>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e7b0      	b.n	8007b1e <_dtoa_r+0x18e>
 8007bbc:	900d      	str	r0, [sp, #52]	; 0x34
 8007bbe:	e7af      	b.n	8007b20 <_dtoa_r+0x190>
 8007bc0:	f1ca 0300 	rsb	r3, sl, #0
 8007bc4:	9308      	str	r3, [sp, #32]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	eba9 090a 	sub.w	r9, r9, sl
 8007bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8007bce:	e7bc      	b.n	8007b4a <_dtoa_r+0x1ba>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd74      	ble.n	8007cc4 <_dtoa_r+0x334>
 8007bda:	4698      	mov	r8, r3
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	2200      	movs	r2, #0
 8007be0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007be2:	6072      	str	r2, [r6, #4]
 8007be4:	2204      	movs	r2, #4
 8007be6:	f102 0014 	add.w	r0, r2, #20
 8007bea:	4298      	cmp	r0, r3
 8007bec:	6871      	ldr	r1, [r6, #4]
 8007bee:	d96e      	bls.n	8007cce <_dtoa_r+0x33e>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fcb0 	bl	8008556 <_Balloc>
 8007bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf8:	6030      	str	r0, [r6, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f1b8 0f0e 	cmp.w	r8, #14
 8007c00:	9306      	str	r3, [sp, #24]
 8007c02:	f200 80ed 	bhi.w	8007de0 <_dtoa_r+0x450>
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	f000 80ea 	beq.w	8007de0 <_dtoa_r+0x450>
 8007c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c10:	f1ba 0f00 	cmp.w	sl, #0
 8007c14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c18:	dd77      	ble.n	8007d0a <_dtoa_r+0x37a>
 8007c1a:	4a28      	ldr	r2, [pc, #160]	; (8007cbc <_dtoa_r+0x32c>)
 8007c1c:	f00a 030f 	and.w	r3, sl, #15
 8007c20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007c24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c28:	06f0      	lsls	r0, r6, #27
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c32:	d568      	bpl.n	8007d06 <_dtoa_r+0x376>
 8007c34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c38:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <_dtoa_r+0x330>)
 8007c3a:	2503      	movs	r5, #3
 8007c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c40:	f7f8 fd74 	bl	800072c <__aeabi_ddiv>
 8007c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c48:	f006 060f 	and.w	r6, r6, #15
 8007c4c:	4f1c      	ldr	r7, [pc, #112]	; (8007cc0 <_dtoa_r+0x330>)
 8007c4e:	e04f      	b.n	8007cf0 <_dtoa_r+0x360>
 8007c50:	2301      	movs	r3, #1
 8007c52:	9309      	str	r3, [sp, #36]	; 0x24
 8007c54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c56:	4453      	add	r3, sl
 8007c58:	f103 0801 	add.w	r8, r3, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	4643      	mov	r3, r8
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	bfb8      	it	lt
 8007c64:	2301      	movlt	r3, #1
 8007c66:	e7ba      	b.n	8007bde <_dtoa_r+0x24e>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e7b2      	b.n	8007bd2 <_dtoa_r+0x242>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e7f0      	b.n	8007c52 <_dtoa_r+0x2c2>
 8007c70:	2501      	movs	r5, #1
 8007c72:	2300      	movs	r3, #0
 8007c74:	9509      	str	r5, [sp, #36]	; 0x24
 8007c76:	931e      	str	r3, [sp, #120]	; 0x78
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	4698      	mov	r8, r3
 8007c82:	2312      	movs	r3, #18
 8007c84:	921f      	str	r2, [sp, #124]	; 0x7c
 8007c86:	e7aa      	b.n	8007bde <_dtoa_r+0x24e>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	e7f4      	b.n	8007c78 <_dtoa_r+0x2e8>
 8007c8e:	bf00      	nop
 8007c90:	636f4361 	.word	0x636f4361
 8007c94:	3fd287a7 	.word	0x3fd287a7
 8007c98:	8b60c8b3 	.word	0x8b60c8b3
 8007c9c:	3fc68a28 	.word	0x3fc68a28
 8007ca0:	509f79fb 	.word	0x509f79fb
 8007ca4:	3fd34413 	.word	0x3fd34413
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	0800a8e1 	.word	0x0800a8e1
 8007cb0:	0800a8d8 	.word	0x0800a8d8
 8007cb4:	0800a8b5 	.word	0x0800a8b5
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	0800a910 	.word	0x0800a910
 8007cc0:	0800a8e8 	.word	0x0800a8e8
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	4698      	mov	r8, r3
 8007cca:	461a      	mov	r2, r3
 8007ccc:	e7da      	b.n	8007c84 <_dtoa_r+0x2f4>
 8007cce:	3101      	adds	r1, #1
 8007cd0:	6071      	str	r1, [r6, #4]
 8007cd2:	0052      	lsls	r2, r2, #1
 8007cd4:	e787      	b.n	8007be6 <_dtoa_r+0x256>
 8007cd6:	07f1      	lsls	r1, r6, #31
 8007cd8:	d508      	bpl.n	8007cec <_dtoa_r+0x35c>
 8007cda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce2:	f7f8 fbf9 	bl	80004d8 <__aeabi_dmul>
 8007ce6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cea:	3501      	adds	r5, #1
 8007cec:	1076      	asrs	r6, r6, #1
 8007cee:	3708      	adds	r7, #8
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <_dtoa_r+0x346>
 8007cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfc:	f7f8 fd16 	bl	800072c <__aeabi_ddiv>
 8007d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d04:	e01b      	b.n	8007d3e <_dtoa_r+0x3ae>
 8007d06:	2502      	movs	r5, #2
 8007d08:	e7a0      	b.n	8007c4c <_dtoa_r+0x2bc>
 8007d0a:	f000 80a4 	beq.w	8007e56 <_dtoa_r+0x4c6>
 8007d0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d12:	f1ca 0600 	rsb	r6, sl, #0
 8007d16:	4ba0      	ldr	r3, [pc, #640]	; (8007f98 <_dtoa_r+0x608>)
 8007d18:	f006 020f 	and.w	r2, r6, #15
 8007d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 fbd8 	bl	80004d8 <__aeabi_dmul>
 8007d28:	2502      	movs	r5, #2
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d30:	4f9a      	ldr	r7, [pc, #616]	; (8007f9c <_dtoa_r+0x60c>)
 8007d32:	1136      	asrs	r6, r6, #4
 8007d34:	2e00      	cmp	r6, #0
 8007d36:	f040 8083 	bne.w	8007e40 <_dtoa_r+0x4b0>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e0      	bne.n	8007d00 <_dtoa_r+0x370>
 8007d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 808a 	beq.w	8007e5a <_dtoa_r+0x4ca>
 8007d46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d52:	2200      	movs	r2, #0
 8007d54:	4b92      	ldr	r3, [pc, #584]	; (8007fa0 <_dtoa_r+0x610>)
 8007d56:	f7f8 fe31 	bl	80009bc <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d07d      	beq.n	8007e5a <_dtoa_r+0x4ca>
 8007d5e:	f1b8 0f00 	cmp.w	r8, #0
 8007d62:	d07a      	beq.n	8007e5a <_dtoa_r+0x4ca>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dd36      	ble.n	8007dd8 <_dtoa_r+0x448>
 8007d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d6e:	2200      	movs	r2, #0
 8007d70:	4b8c      	ldr	r3, [pc, #560]	; (8007fa4 <_dtoa_r+0x614>)
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7a:	9e04      	ldr	r6, [sp, #16]
 8007d7c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007d80:	3501      	adds	r5, #1
 8007d82:	4628      	mov	r0, r5
 8007d84:	f7f8 fb3e 	bl	8000404 <__aeabi_i2d>
 8007d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d8c:	f7f8 fba4 	bl	80004d8 <__aeabi_dmul>
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b85      	ldr	r3, [pc, #532]	; (8007fa8 <_dtoa_r+0x618>)
 8007d94:	f7f8 f9ea 	bl	800016c <__adddf3>
 8007d98:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007d9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007da0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007da2:	2e00      	cmp	r6, #0
 8007da4:	d15c      	bne.n	8007e60 <_dtoa_r+0x4d0>
 8007da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b7f      	ldr	r3, [pc, #508]	; (8007fac <_dtoa_r+0x61c>)
 8007dae:	f7f8 f9db 	bl	8000168 <__aeabi_dsub>
 8007db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db4:	462b      	mov	r3, r5
 8007db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dba:	f7f8 fe1d 	bl	80009f8 <__aeabi_dcmpgt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f040 8281 	bne.w	80082c6 <_dtoa_r+0x936>
 8007dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007dce:	f7f8 fdf5 	bl	80009bc <__aeabi_dcmplt>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f040 8275 	bne.w	80082c2 <_dtoa_r+0x932>
 8007dd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f2c0 814b 	blt.w	800807e <_dtoa_r+0x6ee>
 8007de8:	f1ba 0f0e 	cmp.w	sl, #14
 8007dec:	f300 8147 	bgt.w	800807e <_dtoa_r+0x6ee>
 8007df0:	4b69      	ldr	r3, [pc, #420]	; (8007f98 <_dtoa_r+0x608>)
 8007df2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f280 80d7 	bge.w	8007fb4 <_dtoa_r+0x624>
 8007e06:	f1b8 0f00 	cmp.w	r8, #0
 8007e0a:	f300 80d3 	bgt.w	8007fb4 <_dtoa_r+0x624>
 8007e0e:	f040 8257 	bne.w	80082c0 <_dtoa_r+0x930>
 8007e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e16:	2200      	movs	r2, #0
 8007e18:	4b64      	ldr	r3, [pc, #400]	; (8007fac <_dtoa_r+0x61c>)
 8007e1a:	f7f8 fb5d 	bl	80004d8 <__aeabi_dmul>
 8007e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e22:	f7f8 fddf 	bl	80009e4 <__aeabi_dcmpge>
 8007e26:	4646      	mov	r6, r8
 8007e28:	4647      	mov	r7, r8
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f040 822d 	bne.w	800828a <_dtoa_r+0x8fa>
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	9a06      	ldr	r2, [sp, #24]
 8007e34:	1c5d      	adds	r5, r3, #1
 8007e36:	2331      	movs	r3, #49	; 0x31
 8007e38:	f10a 0a01 	add.w	sl, sl, #1
 8007e3c:	7013      	strb	r3, [r2, #0]
 8007e3e:	e228      	b.n	8008292 <_dtoa_r+0x902>
 8007e40:	07f2      	lsls	r2, r6, #31
 8007e42:	d505      	bpl.n	8007e50 <_dtoa_r+0x4c0>
 8007e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e48:	f7f8 fb46 	bl	80004d8 <__aeabi_dmul>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	3501      	adds	r5, #1
 8007e50:	1076      	asrs	r6, r6, #1
 8007e52:	3708      	adds	r7, #8
 8007e54:	e76e      	b.n	8007d34 <_dtoa_r+0x3a4>
 8007e56:	2502      	movs	r5, #2
 8007e58:	e771      	b.n	8007d3e <_dtoa_r+0x3ae>
 8007e5a:	4657      	mov	r7, sl
 8007e5c:	4646      	mov	r6, r8
 8007e5e:	e790      	b.n	8007d82 <_dtoa_r+0x3f2>
 8007e60:	4b4d      	ldr	r3, [pc, #308]	; (8007f98 <_dtoa_r+0x608>)
 8007e62:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e66:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d048      	beq.n	8007f02 <_dtoa_r+0x572>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	2000      	movs	r0, #0
 8007e76:	494e      	ldr	r1, [pc, #312]	; (8007fb0 <_dtoa_r+0x620>)
 8007e78:	f7f8 fc58 	bl	800072c <__aeabi_ddiv>
 8007e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e80:	f7f8 f972 	bl	8000168 <__aeabi_dsub>
 8007e84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e88:	9d06      	ldr	r5, [sp, #24]
 8007e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8e:	f7f8 fdd3 	bl	8000a38 <__aeabi_d2iz>
 8007e92:	9011      	str	r0, [sp, #68]	; 0x44
 8007e94:	f7f8 fab6 	bl	8000404 <__aeabi_i2d>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	f7f8 f962 	bl	8000168 <__aeabi_dsub>
 8007ea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eaa:	3330      	adds	r3, #48	; 0x30
 8007eac:	f805 3b01 	strb.w	r3, [r5], #1
 8007eb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007eb4:	f7f8 fd82 	bl	80009bc <__aeabi_dcmplt>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d163      	bne.n	8007f84 <_dtoa_r+0x5f4>
 8007ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4937      	ldr	r1, [pc, #220]	; (8007fa0 <_dtoa_r+0x610>)
 8007ec4:	f7f8 f950 	bl	8000168 <__aeabi_dsub>
 8007ec8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ecc:	f7f8 fd76 	bl	80009bc <__aeabi_dcmplt>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f040 80b5 	bne.w	8008040 <_dtoa_r+0x6b0>
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	1aeb      	subs	r3, r5, r3
 8007eda:	429e      	cmp	r6, r3
 8007edc:	f77f af7c 	ble.w	8007dd8 <_dtoa_r+0x448>
 8007ee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <_dtoa_r+0x614>)
 8007ee8:	f7f8 faf6 	bl	80004d8 <__aeabi_dmul>
 8007eec:	2200      	movs	r2, #0
 8007eee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef6:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <_dtoa_r+0x614>)
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f00:	e7c3      	b.n	8007e8a <_dtoa_r+0x4fa>
 8007f02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f06:	f7f8 fae7 	bl	80004d8 <__aeabi_dmul>
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f10:	199d      	adds	r5, r3, r6
 8007f12:	461e      	mov	r6, r3
 8007f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f18:	f7f8 fd8e 	bl	8000a38 <__aeabi_d2iz>
 8007f1c:	9011      	str	r0, [sp, #68]	; 0x44
 8007f1e:	f7f8 fa71 	bl	8000404 <__aeabi_i2d>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2a:	f7f8 f91d 	bl	8000168 <__aeabi_dsub>
 8007f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f34:	3330      	adds	r3, #48	; 0x30
 8007f36:	f806 3b01 	strb.w	r3, [r6], #1
 8007f3a:	42ae      	cmp	r6, r5
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	d124      	bne.n	8007f8c <_dtoa_r+0x5fc>
 8007f42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f46:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <_dtoa_r+0x620>)
 8007f48:	f7f8 f910 	bl	800016c <__adddf3>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f54:	f7f8 fd50 	bl	80009f8 <__aeabi_dcmpgt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d171      	bne.n	8008040 <_dtoa_r+0x6b0>
 8007f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f60:	2000      	movs	r0, #0
 8007f62:	4913      	ldr	r1, [pc, #76]	; (8007fb0 <_dtoa_r+0x620>)
 8007f64:	f7f8 f900 	bl	8000168 <__aeabi_dsub>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f70:	f7f8 fd24 	bl	80009bc <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f43f af2f 	beq.w	8007dd8 <_dtoa_r+0x448>
 8007f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f7e:	1e6a      	subs	r2, r5, #1
 8007f80:	2b30      	cmp	r3, #48	; 0x30
 8007f82:	d001      	beq.n	8007f88 <_dtoa_r+0x5f8>
 8007f84:	46ba      	mov	sl, r7
 8007f86:	e04a      	b.n	800801e <_dtoa_r+0x68e>
 8007f88:	4615      	mov	r5, r2
 8007f8a:	e7f6      	b.n	8007f7a <_dtoa_r+0x5ea>
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <_dtoa_r+0x614>)
 8007f8e:	f7f8 faa3 	bl	80004d8 <__aeabi_dmul>
 8007f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f96:	e7bd      	b.n	8007f14 <_dtoa_r+0x584>
 8007f98:	0800a910 	.word	0x0800a910
 8007f9c:	0800a8e8 	.word	0x0800a8e8
 8007fa0:	3ff00000 	.word	0x3ff00000
 8007fa4:	40240000 	.word	0x40240000
 8007fa8:	401c0000 	.word	0x401c0000
 8007fac:	40140000 	.word	0x40140000
 8007fb0:	3fe00000 	.word	0x3fe00000
 8007fb4:	9d06      	ldr	r5, [sp, #24]
 8007fb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	f7f8 fbb3 	bl	800072c <__aeabi_ddiv>
 8007fc6:	f7f8 fd37 	bl	8000a38 <__aeabi_d2iz>
 8007fca:	4681      	mov	r9, r0
 8007fcc:	f7f8 fa1a 	bl	8000404 <__aeabi_i2d>
 8007fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd4:	f7f8 fa80 	bl	80004d8 <__aeabi_dmul>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 f8c2 	bl	8000168 <__aeabi_dsub>
 8007fe4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fec:	9e06      	ldr	r6, [sp, #24]
 8007fee:	4602      	mov	r2, r0
 8007ff0:	1bae      	subs	r6, r5, r6
 8007ff2:	45b0      	cmp	r8, r6
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	d135      	bne.n	8008064 <_dtoa_r+0x6d4>
 8007ff8:	f7f8 f8b8 	bl	800016c <__adddf3>
 8007ffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008000:	4606      	mov	r6, r0
 8008002:	460f      	mov	r7, r1
 8008004:	f7f8 fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8008008:	b9c8      	cbnz	r0, 800803e <_dtoa_r+0x6ae>
 800800a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8008016:	b110      	cbz	r0, 800801e <_dtoa_r+0x68e>
 8008018:	f019 0f01 	tst.w	r9, #1
 800801c:	d10f      	bne.n	800803e <_dtoa_r+0x6ae>
 800801e:	4659      	mov	r1, fp
 8008020:	4620      	mov	r0, r4
 8008022:	f000 facc 	bl	80085be <_Bfree>
 8008026:	2300      	movs	r3, #0
 8008028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800802a:	702b      	strb	r3, [r5, #0]
 800802c:	f10a 0301 	add.w	r3, sl, #1
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008034:	2b00      	cmp	r3, #0
 8008036:	f43f acf3 	beq.w	8007a20 <_dtoa_r+0x90>
 800803a:	601d      	str	r5, [r3, #0]
 800803c:	e4f0      	b.n	8007a20 <_dtoa_r+0x90>
 800803e:	4657      	mov	r7, sl
 8008040:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008044:	1e6b      	subs	r3, r5, #1
 8008046:	2a39      	cmp	r2, #57	; 0x39
 8008048:	d106      	bne.n	8008058 <_dtoa_r+0x6c8>
 800804a:	9a06      	ldr	r2, [sp, #24]
 800804c:	429a      	cmp	r2, r3
 800804e:	d107      	bne.n	8008060 <_dtoa_r+0x6d0>
 8008050:	2330      	movs	r3, #48	; 0x30
 8008052:	7013      	strb	r3, [r2, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	3701      	adds	r7, #1
 8008058:	781a      	ldrb	r2, [r3, #0]
 800805a:	3201      	adds	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e791      	b.n	8007f84 <_dtoa_r+0x5f4>
 8008060:	461d      	mov	r5, r3
 8008062:	e7ed      	b.n	8008040 <_dtoa_r+0x6b0>
 8008064:	2200      	movs	r2, #0
 8008066:	4b99      	ldr	r3, [pc, #612]	; (80082cc <_dtoa_r+0x93c>)
 8008068:	f7f8 fa36 	bl	80004d8 <__aeabi_dmul>
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8008078:	2800      	cmp	r0, #0
 800807a:	d09e      	beq.n	8007fba <_dtoa_r+0x62a>
 800807c:	e7cf      	b.n	800801e <_dtoa_r+0x68e>
 800807e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008080:	2a00      	cmp	r2, #0
 8008082:	f000 8088 	beq.w	8008196 <_dtoa_r+0x806>
 8008086:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008088:	2a01      	cmp	r2, #1
 800808a:	dc6d      	bgt.n	8008168 <_dtoa_r+0x7d8>
 800808c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800808e:	2a00      	cmp	r2, #0
 8008090:	d066      	beq.n	8008160 <_dtoa_r+0x7d0>
 8008092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008096:	464d      	mov	r5, r9
 8008098:	9e08      	ldr	r6, [sp, #32]
 800809a:	9a07      	ldr	r2, [sp, #28]
 800809c:	2101      	movs	r1, #1
 800809e:	441a      	add	r2, r3
 80080a0:	4620      	mov	r0, r4
 80080a2:	4499      	add	r9, r3
 80080a4:	9207      	str	r2, [sp, #28]
 80080a6:	f000 fb2a 	bl	80086fe <__i2b>
 80080aa:	4607      	mov	r7, r0
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	dd0b      	ble.n	80080c8 <_dtoa_r+0x738>
 80080b0:	9b07      	ldr	r3, [sp, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	dd08      	ble.n	80080c8 <_dtoa_r+0x738>
 80080b6:	42ab      	cmp	r3, r5
 80080b8:	bfa8      	it	ge
 80080ba:	462b      	movge	r3, r5
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	eba9 0903 	sub.w	r9, r9, r3
 80080c2:	1aed      	subs	r5, r5, r3
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	9b08      	ldr	r3, [sp, #32]
 80080ca:	b1eb      	cbz	r3, 8008108 <_dtoa_r+0x778>
 80080cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d065      	beq.n	800819e <_dtoa_r+0x80e>
 80080d2:	b18e      	cbz	r6, 80080f8 <_dtoa_r+0x768>
 80080d4:	4639      	mov	r1, r7
 80080d6:	4632      	mov	r2, r6
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fbaf 	bl	800883c <__pow5mult>
 80080de:	465a      	mov	r2, fp
 80080e0:	4601      	mov	r1, r0
 80080e2:	4607      	mov	r7, r0
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fb13 	bl	8008710 <__multiply>
 80080ea:	4659      	mov	r1, fp
 80080ec:	900a      	str	r0, [sp, #40]	; 0x28
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fa65 	bl	80085be <_Bfree>
 80080f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f6:	469b      	mov	fp, r3
 80080f8:	9b08      	ldr	r3, [sp, #32]
 80080fa:	1b9a      	subs	r2, r3, r6
 80080fc:	d004      	beq.n	8008108 <_dtoa_r+0x778>
 80080fe:	4659      	mov	r1, fp
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fb9b 	bl	800883c <__pow5mult>
 8008106:	4683      	mov	fp, r0
 8008108:	2101      	movs	r1, #1
 800810a:	4620      	mov	r0, r4
 800810c:	f000 faf7 	bl	80086fe <__i2b>
 8008110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008112:	4606      	mov	r6, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 81c6 	beq.w	80084a6 <_dtoa_r+0xb16>
 800811a:	461a      	mov	r2, r3
 800811c:	4601      	mov	r1, r0
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fb8c 	bl	800883c <__pow5mult>
 8008124:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008126:	4606      	mov	r6, r0
 8008128:	2b01      	cmp	r3, #1
 800812a:	dc3e      	bgt.n	80081aa <_dtoa_r+0x81a>
 800812c:	9b02      	ldr	r3, [sp, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d137      	bne.n	80081a2 <_dtoa_r+0x812>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	2b00      	cmp	r3, #0
 800813a:	d134      	bne.n	80081a6 <_dtoa_r+0x816>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008142:	0d1b      	lsrs	r3, r3, #20
 8008144:	051b      	lsls	r3, r3, #20
 8008146:	b12b      	cbz	r3, 8008154 <_dtoa_r+0x7c4>
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	f109 0901 	add.w	r9, r9, #1
 800814e:	3301      	adds	r3, #1
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	2301      	movs	r3, #1
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008158:	2b00      	cmp	r3, #0
 800815a:	d128      	bne.n	80081ae <_dtoa_r+0x81e>
 800815c:	2001      	movs	r0, #1
 800815e:	e02e      	b.n	80081be <_dtoa_r+0x82e>
 8008160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008162:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008166:	e796      	b.n	8008096 <_dtoa_r+0x706>
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800816e:	42b3      	cmp	r3, r6
 8008170:	bfb7      	itett	lt
 8008172:	9b08      	ldrlt	r3, [sp, #32]
 8008174:	1b9e      	subge	r6, r3, r6
 8008176:	1af2      	sublt	r2, r6, r3
 8008178:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800817a:	bfbf      	itttt	lt
 800817c:	9608      	strlt	r6, [sp, #32]
 800817e:	189b      	addlt	r3, r3, r2
 8008180:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008182:	2600      	movlt	r6, #0
 8008184:	f1b8 0f00 	cmp.w	r8, #0
 8008188:	bfb9      	ittee	lt
 800818a:	eba9 0508 	sublt.w	r5, r9, r8
 800818e:	2300      	movlt	r3, #0
 8008190:	464d      	movge	r5, r9
 8008192:	4643      	movge	r3, r8
 8008194:	e781      	b.n	800809a <_dtoa_r+0x70a>
 8008196:	9e08      	ldr	r6, [sp, #32]
 8008198:	464d      	mov	r5, r9
 800819a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800819c:	e786      	b.n	80080ac <_dtoa_r+0x71c>
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	e7ad      	b.n	80080fe <_dtoa_r+0x76e>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e7d6      	b.n	8008154 <_dtoa_r+0x7c4>
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	e7d4      	b.n	8008154 <_dtoa_r+0x7c4>
 80081aa:	2300      	movs	r3, #0
 80081ac:	9308      	str	r3, [sp, #32]
 80081ae:	6933      	ldr	r3, [r6, #16]
 80081b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f000 fa54 	bl	8008662 <__hi0bits>
 80081ba:	f1c0 0020 	rsb	r0, r0, #32
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	4418      	add	r0, r3
 80081c2:	f010 001f 	ands.w	r0, r0, #31
 80081c6:	d047      	beq.n	8008258 <_dtoa_r+0x8c8>
 80081c8:	f1c0 0320 	rsb	r3, r0, #32
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	dd3b      	ble.n	8008248 <_dtoa_r+0x8b8>
 80081d0:	9b07      	ldr	r3, [sp, #28]
 80081d2:	f1c0 001c 	rsb	r0, r0, #28
 80081d6:	4481      	add	r9, r0
 80081d8:	4405      	add	r5, r0
 80081da:	4403      	add	r3, r0
 80081dc:	9307      	str	r3, [sp, #28]
 80081de:	f1b9 0f00 	cmp.w	r9, #0
 80081e2:	dd05      	ble.n	80081f0 <_dtoa_r+0x860>
 80081e4:	4659      	mov	r1, fp
 80081e6:	464a      	mov	r2, r9
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fb75 	bl	80088d8 <__lshift>
 80081ee:	4683      	mov	fp, r0
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dd05      	ble.n	8008202 <_dtoa_r+0x872>
 80081f6:	4631      	mov	r1, r6
 80081f8:	461a      	mov	r2, r3
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 fb6c 	bl	80088d8 <__lshift>
 8008200:	4606      	mov	r6, r0
 8008202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008204:	b353      	cbz	r3, 800825c <_dtoa_r+0x8cc>
 8008206:	4631      	mov	r1, r6
 8008208:	4658      	mov	r0, fp
 800820a:	f000 fbb9 	bl	8008980 <__mcmp>
 800820e:	2800      	cmp	r0, #0
 8008210:	da24      	bge.n	800825c <_dtoa_r+0x8cc>
 8008212:	2300      	movs	r3, #0
 8008214:	4659      	mov	r1, fp
 8008216:	220a      	movs	r2, #10
 8008218:	4620      	mov	r0, r4
 800821a:	f000 f9e7 	bl	80085ec <__multadd>
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008224:	4683      	mov	fp, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8144 	beq.w	80084b4 <_dtoa_r+0xb24>
 800822c:	2300      	movs	r3, #0
 800822e:	4639      	mov	r1, r7
 8008230:	220a      	movs	r2, #10
 8008232:	4620      	mov	r0, r4
 8008234:	f000 f9da 	bl	80085ec <__multadd>
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	4607      	mov	r7, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc4d      	bgt.n	80082dc <_dtoa_r+0x94c>
 8008240:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008242:	2b02      	cmp	r3, #2
 8008244:	dd4a      	ble.n	80082dc <_dtoa_r+0x94c>
 8008246:	e011      	b.n	800826c <_dtoa_r+0x8dc>
 8008248:	d0c9      	beq.n	80081de <_dtoa_r+0x84e>
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	331c      	adds	r3, #28
 800824e:	441a      	add	r2, r3
 8008250:	4499      	add	r9, r3
 8008252:	441d      	add	r5, r3
 8008254:	4613      	mov	r3, r2
 8008256:	e7c1      	b.n	80081dc <_dtoa_r+0x84c>
 8008258:	4603      	mov	r3, r0
 800825a:	e7f6      	b.n	800824a <_dtoa_r+0x8ba>
 800825c:	f1b8 0f00 	cmp.w	r8, #0
 8008260:	dc36      	bgt.n	80082d0 <_dtoa_r+0x940>
 8008262:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008264:	2b02      	cmp	r3, #2
 8008266:	dd33      	ble.n	80082d0 <_dtoa_r+0x940>
 8008268:	f8cd 8010 	str.w	r8, [sp, #16]
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	b963      	cbnz	r3, 800828a <_dtoa_r+0x8fa>
 8008270:	4631      	mov	r1, r6
 8008272:	2205      	movs	r2, #5
 8008274:	4620      	mov	r0, r4
 8008276:	f000 f9b9 	bl	80085ec <__multadd>
 800827a:	4601      	mov	r1, r0
 800827c:	4606      	mov	r6, r0
 800827e:	4658      	mov	r0, fp
 8008280:	f000 fb7e 	bl	8008980 <__mcmp>
 8008284:	2800      	cmp	r0, #0
 8008286:	f73f add3 	bgt.w	8007e30 <_dtoa_r+0x4a0>
 800828a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800828c:	9d06      	ldr	r5, [sp, #24]
 800828e:	ea6f 0a03 	mvn.w	sl, r3
 8008292:	f04f 0900 	mov.w	r9, #0
 8008296:	4631      	mov	r1, r6
 8008298:	4620      	mov	r0, r4
 800829a:	f000 f990 	bl	80085be <_Bfree>
 800829e:	2f00      	cmp	r7, #0
 80082a0:	f43f aebd 	beq.w	800801e <_dtoa_r+0x68e>
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	d005      	beq.n	80082b6 <_dtoa_r+0x926>
 80082aa:	45b9      	cmp	r9, r7
 80082ac:	d003      	beq.n	80082b6 <_dtoa_r+0x926>
 80082ae:	4649      	mov	r1, r9
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 f984 	bl	80085be <_Bfree>
 80082b6:	4639      	mov	r1, r7
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f980 	bl	80085be <_Bfree>
 80082be:	e6ae      	b.n	800801e <_dtoa_r+0x68e>
 80082c0:	2600      	movs	r6, #0
 80082c2:	4637      	mov	r7, r6
 80082c4:	e7e1      	b.n	800828a <_dtoa_r+0x8fa>
 80082c6:	46ba      	mov	sl, r7
 80082c8:	4637      	mov	r7, r6
 80082ca:	e5b1      	b.n	8007e30 <_dtoa_r+0x4a0>
 80082cc:	40240000 	.word	0x40240000
 80082d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80f3 	beq.w	80084c2 <_dtoa_r+0xb32>
 80082dc:	2d00      	cmp	r5, #0
 80082de:	dd05      	ble.n	80082ec <_dtoa_r+0x95c>
 80082e0:	4639      	mov	r1, r7
 80082e2:	462a      	mov	r2, r5
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 faf7 	bl	80088d8 <__lshift>
 80082ea:	4607      	mov	r7, r0
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04c      	beq.n	800838c <_dtoa_r+0x9fc>
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 f92e 	bl	8008556 <_Balloc>
 80082fa:	4605      	mov	r5, r0
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	f107 010c 	add.w	r1, r7, #12
 8008302:	3202      	adds	r2, #2
 8008304:	0092      	lsls	r2, r2, #2
 8008306:	300c      	adds	r0, #12
 8008308:	f000 f91a 	bl	8008540 <memcpy>
 800830c:	2201      	movs	r2, #1
 800830e:	4629      	mov	r1, r5
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fae1 	bl	80088d8 <__lshift>
 8008316:	46b9      	mov	r9, r7
 8008318:	4607      	mov	r7, r0
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	9308      	str	r3, [sp, #32]
 8008326:	4631      	mov	r1, r6
 8008328:	4658      	mov	r0, fp
 800832a:	f7ff faa1 	bl	8007870 <quorem>
 800832e:	4649      	mov	r1, r9
 8008330:	4605      	mov	r5, r0
 8008332:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008336:	4658      	mov	r0, fp
 8008338:	f000 fb22 	bl	8008980 <__mcmp>
 800833c:	463a      	mov	r2, r7
 800833e:	9002      	str	r0, [sp, #8]
 8008340:	4631      	mov	r1, r6
 8008342:	4620      	mov	r0, r4
 8008344:	f000 fb36 	bl	80089b4 <__mdiff>
 8008348:	68c3      	ldr	r3, [r0, #12]
 800834a:	4602      	mov	r2, r0
 800834c:	bb03      	cbnz	r3, 8008390 <_dtoa_r+0xa00>
 800834e:	4601      	mov	r1, r0
 8008350:	9009      	str	r0, [sp, #36]	; 0x24
 8008352:	4658      	mov	r0, fp
 8008354:	f000 fb14 	bl	8008980 <__mcmp>
 8008358:	4603      	mov	r3, r0
 800835a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835c:	4611      	mov	r1, r2
 800835e:	4620      	mov	r0, r4
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	f000 f92c 	bl	80085be <_Bfree>
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	b9a3      	cbnz	r3, 8008394 <_dtoa_r+0xa04>
 800836a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800836c:	b992      	cbnz	r2, 8008394 <_dtoa_r+0xa04>
 800836e:	9a08      	ldr	r2, [sp, #32]
 8008370:	b982      	cbnz	r2, 8008394 <_dtoa_r+0xa04>
 8008372:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008376:	d029      	beq.n	80083cc <_dtoa_r+0xa3c>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd01      	ble.n	8008382 <_dtoa_r+0x9f2>
 800837e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	1c5d      	adds	r5, r3, #1
 8008386:	f883 8000 	strb.w	r8, [r3]
 800838a:	e784      	b.n	8008296 <_dtoa_r+0x906>
 800838c:	4638      	mov	r0, r7
 800838e:	e7c2      	b.n	8008316 <_dtoa_r+0x986>
 8008390:	2301      	movs	r3, #1
 8008392:	e7e3      	b.n	800835c <_dtoa_r+0x9cc>
 8008394:	9a02      	ldr	r2, [sp, #8]
 8008396:	2a00      	cmp	r2, #0
 8008398:	db04      	blt.n	80083a4 <_dtoa_r+0xa14>
 800839a:	d123      	bne.n	80083e4 <_dtoa_r+0xa54>
 800839c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800839e:	bb0a      	cbnz	r2, 80083e4 <_dtoa_r+0xa54>
 80083a0:	9a08      	ldr	r2, [sp, #32]
 80083a2:	b9fa      	cbnz	r2, 80083e4 <_dtoa_r+0xa54>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	ddec      	ble.n	8008382 <_dtoa_r+0x9f2>
 80083a8:	4659      	mov	r1, fp
 80083aa:	2201      	movs	r2, #1
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 fa93 	bl	80088d8 <__lshift>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4683      	mov	fp, r0
 80083b6:	f000 fae3 	bl	8008980 <__mcmp>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dc03      	bgt.n	80083c6 <_dtoa_r+0xa36>
 80083be:	d1e0      	bne.n	8008382 <_dtoa_r+0x9f2>
 80083c0:	f018 0f01 	tst.w	r8, #1
 80083c4:	d0dd      	beq.n	8008382 <_dtoa_r+0x9f2>
 80083c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083ca:	d1d8      	bne.n	800837e <_dtoa_r+0x9ee>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	9a07      	ldr	r2, [sp, #28]
 80083d0:	1c5d      	adds	r5, r3, #1
 80083d2:	2339      	movs	r3, #57	; 0x39
 80083d4:	7013      	strb	r3, [r2, #0]
 80083d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083da:	1e6a      	subs	r2, r5, #1
 80083dc:	2b39      	cmp	r3, #57	; 0x39
 80083de:	d04d      	beq.n	800847c <_dtoa_r+0xaec>
 80083e0:	3301      	adds	r3, #1
 80083e2:	e052      	b.n	800848a <_dtoa_r+0xafa>
 80083e4:	9a07      	ldr	r2, [sp, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f102 0501 	add.w	r5, r2, #1
 80083ec:	dd06      	ble.n	80083fc <_dtoa_r+0xa6c>
 80083ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083f2:	d0eb      	beq.n	80083cc <_dtoa_r+0xa3c>
 80083f4:	f108 0801 	add.w	r8, r8, #1
 80083f8:	9b07      	ldr	r3, [sp, #28]
 80083fa:	e7c4      	b.n	8008386 <_dtoa_r+0x9f6>
 80083fc:	9b06      	ldr	r3, [sp, #24]
 80083fe:	9a04      	ldr	r2, [sp, #16]
 8008400:	1aeb      	subs	r3, r5, r3
 8008402:	4293      	cmp	r3, r2
 8008404:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008408:	d021      	beq.n	800844e <_dtoa_r+0xabe>
 800840a:	4659      	mov	r1, fp
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4620      	mov	r0, r4
 8008412:	f000 f8eb 	bl	80085ec <__multadd>
 8008416:	45b9      	cmp	r9, r7
 8008418:	4683      	mov	fp, r0
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	f04f 020a 	mov.w	r2, #10
 8008422:	4649      	mov	r1, r9
 8008424:	4620      	mov	r0, r4
 8008426:	d105      	bne.n	8008434 <_dtoa_r+0xaa4>
 8008428:	f000 f8e0 	bl	80085ec <__multadd>
 800842c:	4681      	mov	r9, r0
 800842e:	4607      	mov	r7, r0
 8008430:	9507      	str	r5, [sp, #28]
 8008432:	e778      	b.n	8008326 <_dtoa_r+0x996>
 8008434:	f000 f8da 	bl	80085ec <__multadd>
 8008438:	4639      	mov	r1, r7
 800843a:	4681      	mov	r9, r0
 800843c:	2300      	movs	r3, #0
 800843e:	220a      	movs	r2, #10
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f8d3 	bl	80085ec <__multadd>
 8008446:	4607      	mov	r7, r0
 8008448:	e7f2      	b.n	8008430 <_dtoa_r+0xaa0>
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	4659      	mov	r1, fp
 8008450:	2201      	movs	r2, #1
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fa40 	bl	80088d8 <__lshift>
 8008458:	4631      	mov	r1, r6
 800845a:	4683      	mov	fp, r0
 800845c:	f000 fa90 	bl	8008980 <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	dcb8      	bgt.n	80083d6 <_dtoa_r+0xa46>
 8008464:	d102      	bne.n	800846c <_dtoa_r+0xadc>
 8008466:	f018 0f01 	tst.w	r8, #1
 800846a:	d1b4      	bne.n	80083d6 <_dtoa_r+0xa46>
 800846c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008470:	1e6a      	subs	r2, r5, #1
 8008472:	2b30      	cmp	r3, #48	; 0x30
 8008474:	f47f af0f 	bne.w	8008296 <_dtoa_r+0x906>
 8008478:	4615      	mov	r5, r2
 800847a:	e7f7      	b.n	800846c <_dtoa_r+0xadc>
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	4293      	cmp	r3, r2
 8008480:	d105      	bne.n	800848e <_dtoa_r+0xafe>
 8008482:	2331      	movs	r3, #49	; 0x31
 8008484:	9a06      	ldr	r2, [sp, #24]
 8008486:	f10a 0a01 	add.w	sl, sl, #1
 800848a:	7013      	strb	r3, [r2, #0]
 800848c:	e703      	b.n	8008296 <_dtoa_r+0x906>
 800848e:	4615      	mov	r5, r2
 8008490:	e7a1      	b.n	80083d6 <_dtoa_r+0xa46>
 8008492:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <_dtoa_r+0xb60>)
 8008494:	f7ff bae1 	b.w	8007a5a <_dtoa_r+0xca>
 8008498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800849a:	2b00      	cmp	r3, #0
 800849c:	f47f aabb 	bne.w	8007a16 <_dtoa_r+0x86>
 80084a0:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <_dtoa_r+0xb64>)
 80084a2:	f7ff bada 	b.w	8007a5a <_dtoa_r+0xca>
 80084a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	f77f ae3f 	ble.w	800812c <_dtoa_r+0x79c>
 80084ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b0:	9308      	str	r3, [sp, #32]
 80084b2:	e653      	b.n	800815c <_dtoa_r+0x7cc>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dc03      	bgt.n	80084c2 <_dtoa_r+0xb32>
 80084ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084bc:	2b02      	cmp	r3, #2
 80084be:	f73f aed5 	bgt.w	800826c <_dtoa_r+0x8dc>
 80084c2:	9d06      	ldr	r5, [sp, #24]
 80084c4:	4631      	mov	r1, r6
 80084c6:	4658      	mov	r0, fp
 80084c8:	f7ff f9d2 	bl	8007870 <quorem>
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80084d2:	f805 8b01 	strb.w	r8, [r5], #1
 80084d6:	9a04      	ldr	r2, [sp, #16]
 80084d8:	1aeb      	subs	r3, r5, r3
 80084da:	429a      	cmp	r2, r3
 80084dc:	ddb5      	ble.n	800844a <_dtoa_r+0xaba>
 80084de:	4659      	mov	r1, fp
 80084e0:	2300      	movs	r3, #0
 80084e2:	220a      	movs	r2, #10
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 f881 	bl	80085ec <__multadd>
 80084ea:	4683      	mov	fp, r0
 80084ec:	e7ea      	b.n	80084c4 <_dtoa_r+0xb34>
 80084ee:	bf00      	nop
 80084f0:	0800a8b4 	.word	0x0800a8b4
 80084f4:	0800a8d8 	.word	0x0800a8d8

080084f8 <_localeconv_r>:
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <_localeconv_r+0x14>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a18      	ldr	r0, [r3, #32]
 80084fe:	4b04      	ldr	r3, [pc, #16]	; (8008510 <_localeconv_r+0x18>)
 8008500:	2800      	cmp	r0, #0
 8008502:	bf08      	it	eq
 8008504:	4618      	moveq	r0, r3
 8008506:	30f0      	adds	r0, #240	; 0xf0
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000010 	.word	0x20000010
 8008510:	20000074 	.word	0x20000074

08008514 <malloc>:
 8008514:	4b02      	ldr	r3, [pc, #8]	; (8008520 <malloc+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f000 bb53 	b.w	8008bc4 <_malloc_r>
 800851e:	bf00      	nop
 8008520:	20000010 	.word	0x20000010

08008524 <memchr>:
 8008524:	b510      	push	{r4, lr}
 8008526:	b2c9      	uxtb	r1, r1
 8008528:	4402      	add	r2, r0
 800852a:	4290      	cmp	r0, r2
 800852c:	4603      	mov	r3, r0
 800852e:	d101      	bne.n	8008534 <memchr+0x10>
 8008530:	2300      	movs	r3, #0
 8008532:	e003      	b.n	800853c <memchr+0x18>
 8008534:	781c      	ldrb	r4, [r3, #0]
 8008536:	3001      	adds	r0, #1
 8008538:	428c      	cmp	r4, r1
 800853a:	d1f6      	bne.n	800852a <memchr+0x6>
 800853c:	4618      	mov	r0, r3
 800853e:	bd10      	pop	{r4, pc}

08008540 <memcpy>:
 8008540:	b510      	push	{r4, lr}
 8008542:	1e43      	subs	r3, r0, #1
 8008544:	440a      	add	r2, r1
 8008546:	4291      	cmp	r1, r2
 8008548:	d100      	bne.n	800854c <memcpy+0xc>
 800854a:	bd10      	pop	{r4, pc}
 800854c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008554:	e7f7      	b.n	8008546 <memcpy+0x6>

08008556 <_Balloc>:
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800855a:	4604      	mov	r4, r0
 800855c:	460e      	mov	r6, r1
 800855e:	b93d      	cbnz	r5, 8008570 <_Balloc+0x1a>
 8008560:	2010      	movs	r0, #16
 8008562:	f7ff ffd7 	bl	8008514 <malloc>
 8008566:	6260      	str	r0, [r4, #36]	; 0x24
 8008568:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800856c:	6005      	str	r5, [r0, #0]
 800856e:	60c5      	str	r5, [r0, #12]
 8008570:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008572:	68eb      	ldr	r3, [r5, #12]
 8008574:	b183      	cbz	r3, 8008598 <_Balloc+0x42>
 8008576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800857e:	b9b8      	cbnz	r0, 80085b0 <_Balloc+0x5a>
 8008580:	2101      	movs	r1, #1
 8008582:	fa01 f506 	lsl.w	r5, r1, r6
 8008586:	1d6a      	adds	r2, r5, #5
 8008588:	0092      	lsls	r2, r2, #2
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fabf 	bl	8008b0e <_calloc_r>
 8008590:	b160      	cbz	r0, 80085ac <_Balloc+0x56>
 8008592:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008596:	e00e      	b.n	80085b6 <_Balloc+0x60>
 8008598:	2221      	movs	r2, #33	; 0x21
 800859a:	2104      	movs	r1, #4
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fab6 	bl	8008b0e <_calloc_r>
 80085a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a4:	60e8      	str	r0, [r5, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e4      	bne.n	8008576 <_Balloc+0x20>
 80085ac:	2000      	movs	r0, #0
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	6802      	ldr	r2, [r0, #0]
 80085b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085b6:	2300      	movs	r3, #0
 80085b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085bc:	e7f7      	b.n	80085ae <_Balloc+0x58>

080085be <_Bfree>:
 80085be:	b570      	push	{r4, r5, r6, lr}
 80085c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085c2:	4606      	mov	r6, r0
 80085c4:	460d      	mov	r5, r1
 80085c6:	b93c      	cbnz	r4, 80085d8 <_Bfree+0x1a>
 80085c8:	2010      	movs	r0, #16
 80085ca:	f7ff ffa3 	bl	8008514 <malloc>
 80085ce:	6270      	str	r0, [r6, #36]	; 0x24
 80085d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d4:	6004      	str	r4, [r0, #0]
 80085d6:	60c4      	str	r4, [r0, #12]
 80085d8:	b13d      	cbz	r5, 80085ea <_Bfree+0x2c>
 80085da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80085dc:	686a      	ldr	r2, [r5, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085e4:	6029      	str	r1, [r5, #0]
 80085e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80085ea:	bd70      	pop	{r4, r5, r6, pc}

080085ec <__multadd>:
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	461f      	mov	r7, r3
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	2300      	movs	r3, #0
 80085f8:	690d      	ldr	r5, [r1, #16]
 80085fa:	f101 0c14 	add.w	ip, r1, #20
 80085fe:	f8dc 0000 	ldr.w	r0, [ip]
 8008602:	3301      	adds	r3, #1
 8008604:	b281      	uxth	r1, r0
 8008606:	fb02 7101 	mla	r1, r2, r1, r7
 800860a:	0c00      	lsrs	r0, r0, #16
 800860c:	0c0f      	lsrs	r7, r1, #16
 800860e:	fb02 7000 	mla	r0, r2, r0, r7
 8008612:	b289      	uxth	r1, r1
 8008614:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008618:	429d      	cmp	r5, r3
 800861a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800861e:	f84c 1b04 	str.w	r1, [ip], #4
 8008622:	dcec      	bgt.n	80085fe <__multadd+0x12>
 8008624:	b1d7      	cbz	r7, 800865c <__multadd+0x70>
 8008626:	68a3      	ldr	r3, [r4, #8]
 8008628:	42ab      	cmp	r3, r5
 800862a:	dc12      	bgt.n	8008652 <__multadd+0x66>
 800862c:	6861      	ldr	r1, [r4, #4]
 800862e:	4630      	mov	r0, r6
 8008630:	3101      	adds	r1, #1
 8008632:	f7ff ff90 	bl	8008556 <_Balloc>
 8008636:	4680      	mov	r8, r0
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	f104 010c 	add.w	r1, r4, #12
 800863e:	3202      	adds	r2, #2
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	300c      	adds	r0, #12
 8008644:	f7ff ff7c 	bl	8008540 <memcpy>
 8008648:	4621      	mov	r1, r4
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ffb7 	bl	80085be <_Bfree>
 8008650:	4644      	mov	r4, r8
 8008652:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008656:	3501      	adds	r5, #1
 8008658:	615f      	str	r7, [r3, #20]
 800865a:	6125      	str	r5, [r4, #16]
 800865c:	4620      	mov	r0, r4
 800865e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008662 <__hi0bits>:
 8008662:	0c02      	lsrs	r2, r0, #16
 8008664:	0412      	lsls	r2, r2, #16
 8008666:	4603      	mov	r3, r0
 8008668:	b9b2      	cbnz	r2, 8008698 <__hi0bits+0x36>
 800866a:	0403      	lsls	r3, r0, #16
 800866c:	2010      	movs	r0, #16
 800866e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008672:	bf04      	itt	eq
 8008674:	021b      	lsleq	r3, r3, #8
 8008676:	3008      	addeq	r0, #8
 8008678:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800867c:	bf04      	itt	eq
 800867e:	011b      	lsleq	r3, r3, #4
 8008680:	3004      	addeq	r0, #4
 8008682:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008686:	bf04      	itt	eq
 8008688:	009b      	lsleq	r3, r3, #2
 800868a:	3002      	addeq	r0, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	db06      	blt.n	800869e <__hi0bits+0x3c>
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	d503      	bpl.n	800869c <__hi0bits+0x3a>
 8008694:	3001      	adds	r0, #1
 8008696:	4770      	bx	lr
 8008698:	2000      	movs	r0, #0
 800869a:	e7e8      	b.n	800866e <__hi0bits+0xc>
 800869c:	2020      	movs	r0, #32
 800869e:	4770      	bx	lr

080086a0 <__lo0bits>:
 80086a0:	6803      	ldr	r3, [r0, #0]
 80086a2:	4601      	mov	r1, r0
 80086a4:	f013 0207 	ands.w	r2, r3, #7
 80086a8:	d00b      	beq.n	80086c2 <__lo0bits+0x22>
 80086aa:	07da      	lsls	r2, r3, #31
 80086ac:	d423      	bmi.n	80086f6 <__lo0bits+0x56>
 80086ae:	0798      	lsls	r0, r3, #30
 80086b0:	bf49      	itett	mi
 80086b2:	085b      	lsrmi	r3, r3, #1
 80086b4:	089b      	lsrpl	r3, r3, #2
 80086b6:	2001      	movmi	r0, #1
 80086b8:	600b      	strmi	r3, [r1, #0]
 80086ba:	bf5c      	itt	pl
 80086bc:	600b      	strpl	r3, [r1, #0]
 80086be:	2002      	movpl	r0, #2
 80086c0:	4770      	bx	lr
 80086c2:	b298      	uxth	r0, r3
 80086c4:	b9a8      	cbnz	r0, 80086f2 <__lo0bits+0x52>
 80086c6:	2010      	movs	r0, #16
 80086c8:	0c1b      	lsrs	r3, r3, #16
 80086ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086ce:	bf04      	itt	eq
 80086d0:	0a1b      	lsreq	r3, r3, #8
 80086d2:	3008      	addeq	r0, #8
 80086d4:	071a      	lsls	r2, r3, #28
 80086d6:	bf04      	itt	eq
 80086d8:	091b      	lsreq	r3, r3, #4
 80086da:	3004      	addeq	r0, #4
 80086dc:	079a      	lsls	r2, r3, #30
 80086de:	bf04      	itt	eq
 80086e0:	089b      	lsreq	r3, r3, #2
 80086e2:	3002      	addeq	r0, #2
 80086e4:	07da      	lsls	r2, r3, #31
 80086e6:	d402      	bmi.n	80086ee <__lo0bits+0x4e>
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	d006      	beq.n	80086fa <__lo0bits+0x5a>
 80086ec:	3001      	adds	r0, #1
 80086ee:	600b      	str	r3, [r1, #0]
 80086f0:	4770      	bx	lr
 80086f2:	4610      	mov	r0, r2
 80086f4:	e7e9      	b.n	80086ca <__lo0bits+0x2a>
 80086f6:	2000      	movs	r0, #0
 80086f8:	4770      	bx	lr
 80086fa:	2020      	movs	r0, #32
 80086fc:	4770      	bx	lr

080086fe <__i2b>:
 80086fe:	b510      	push	{r4, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	2101      	movs	r1, #1
 8008704:	f7ff ff27 	bl	8008556 <_Balloc>
 8008708:	2201      	movs	r2, #1
 800870a:	6144      	str	r4, [r0, #20]
 800870c:	6102      	str	r2, [r0, #16]
 800870e:	bd10      	pop	{r4, pc}

08008710 <__multiply>:
 8008710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	4614      	mov	r4, r2
 8008716:	690a      	ldr	r2, [r1, #16]
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	4688      	mov	r8, r1
 800871c:	429a      	cmp	r2, r3
 800871e:	bfbe      	ittt	lt
 8008720:	460b      	movlt	r3, r1
 8008722:	46a0      	movlt	r8, r4
 8008724:	461c      	movlt	r4, r3
 8008726:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800872a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800872e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008732:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008736:	eb07 0609 	add.w	r6, r7, r9
 800873a:	42b3      	cmp	r3, r6
 800873c:	bfb8      	it	lt
 800873e:	3101      	addlt	r1, #1
 8008740:	f7ff ff09 	bl	8008556 <_Balloc>
 8008744:	f100 0514 	add.w	r5, r0, #20
 8008748:	462b      	mov	r3, r5
 800874a:	2200      	movs	r2, #0
 800874c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008750:	4573      	cmp	r3, lr
 8008752:	d316      	bcc.n	8008782 <__multiply+0x72>
 8008754:	f104 0214 	add.w	r2, r4, #20
 8008758:	f108 0114 	add.w	r1, r8, #20
 800875c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008760:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	9201      	str	r2, [sp, #4]
 800876a:	4293      	cmp	r3, r2
 800876c:	d80c      	bhi.n	8008788 <__multiply+0x78>
 800876e:	2e00      	cmp	r6, #0
 8008770:	dd03      	ble.n	800877a <__multiply+0x6a>
 8008772:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008776:	2b00      	cmp	r3, #0
 8008778:	d05d      	beq.n	8008836 <__multiply+0x126>
 800877a:	6106      	str	r6, [r0, #16]
 800877c:	b003      	add	sp, #12
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008782:	f843 2b04 	str.w	r2, [r3], #4
 8008786:	e7e3      	b.n	8008750 <__multiply+0x40>
 8008788:	f8b2 b000 	ldrh.w	fp, [r2]
 800878c:	f1bb 0f00 	cmp.w	fp, #0
 8008790:	d023      	beq.n	80087da <__multiply+0xca>
 8008792:	4689      	mov	r9, r1
 8008794:	46ac      	mov	ip, r5
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	f859 4b04 	ldr.w	r4, [r9], #4
 800879e:	f8dc a000 	ldr.w	sl, [ip]
 80087a2:	b2a3      	uxth	r3, r4
 80087a4:	fa1f fa8a 	uxth.w	sl, sl
 80087a8:	fb0b a303 	mla	r3, fp, r3, sl
 80087ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087b0:	f8dc 4000 	ldr.w	r4, [ip]
 80087b4:	4443      	add	r3, r8
 80087b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087ba:	fb0b 840a 	mla	r4, fp, sl, r8
 80087be:	46e2      	mov	sl, ip
 80087c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087ca:	454f      	cmp	r7, r9
 80087cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087d0:	f84a 3b04 	str.w	r3, [sl], #4
 80087d4:	d82b      	bhi.n	800882e <__multiply+0x11e>
 80087d6:	f8cc 8004 	str.w	r8, [ip, #4]
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	3204      	adds	r2, #4
 80087de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087e2:	f1ba 0f00 	cmp.w	sl, #0
 80087e6:	d020      	beq.n	800882a <__multiply+0x11a>
 80087e8:	4689      	mov	r9, r1
 80087ea:	46a8      	mov	r8, r5
 80087ec:	f04f 0b00 	mov.w	fp, #0
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	f8b9 c000 	ldrh.w	ip, [r9]
 80087f6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8008800:	46c4      	mov	ip, r8
 8008802:	445c      	add	r4, fp
 8008804:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008808:	f84c 3b04 	str.w	r3, [ip], #4
 800880c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008810:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008814:	0c1b      	lsrs	r3, r3, #16
 8008816:	fb0a b303 	mla	r3, sl, r3, fp
 800881a:	454f      	cmp	r7, r9
 800881c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008820:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008824:	d805      	bhi.n	8008832 <__multiply+0x122>
 8008826:	f8c8 3004 	str.w	r3, [r8, #4]
 800882a:	3504      	adds	r5, #4
 800882c:	e79b      	b.n	8008766 <__multiply+0x56>
 800882e:	46d4      	mov	ip, sl
 8008830:	e7b3      	b.n	800879a <__multiply+0x8a>
 8008832:	46e0      	mov	r8, ip
 8008834:	e7dd      	b.n	80087f2 <__multiply+0xe2>
 8008836:	3e01      	subs	r6, #1
 8008838:	e799      	b.n	800876e <__multiply+0x5e>
	...

0800883c <__pow5mult>:
 800883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008840:	4615      	mov	r5, r2
 8008842:	f012 0203 	ands.w	r2, r2, #3
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	d007      	beq.n	800885c <__pow5mult+0x20>
 800884c:	4c21      	ldr	r4, [pc, #132]	; (80088d4 <__pow5mult+0x98>)
 800884e:	3a01      	subs	r2, #1
 8008850:	2300      	movs	r3, #0
 8008852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008856:	f7ff fec9 	bl	80085ec <__multadd>
 800885a:	4607      	mov	r7, r0
 800885c:	10ad      	asrs	r5, r5, #2
 800885e:	d035      	beq.n	80088cc <__pow5mult+0x90>
 8008860:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008862:	b93c      	cbnz	r4, 8008874 <__pow5mult+0x38>
 8008864:	2010      	movs	r0, #16
 8008866:	f7ff fe55 	bl	8008514 <malloc>
 800886a:	6270      	str	r0, [r6, #36]	; 0x24
 800886c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008870:	6004      	str	r4, [r0, #0]
 8008872:	60c4      	str	r4, [r0, #12]
 8008874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800887c:	b94c      	cbnz	r4, 8008892 <__pow5mult+0x56>
 800887e:	f240 2171 	movw	r1, #625	; 0x271
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff3b 	bl	80086fe <__i2b>
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 0800 	mov.w	r8, #0
 8008896:	07eb      	lsls	r3, r5, #31
 8008898:	d50a      	bpl.n	80088b0 <__pow5mult+0x74>
 800889a:	4639      	mov	r1, r7
 800889c:	4622      	mov	r2, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff36 	bl	8008710 <__multiply>
 80088a4:	4681      	mov	r9, r0
 80088a6:	4639      	mov	r1, r7
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff fe88 	bl	80085be <_Bfree>
 80088ae:	464f      	mov	r7, r9
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	d00b      	beq.n	80088cc <__pow5mult+0x90>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	b938      	cbnz	r0, 80088c8 <__pow5mult+0x8c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ff27 	bl	8008710 <__multiply>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f8c0 8000 	str.w	r8, [r0]
 80088c8:	4604      	mov	r4, r0
 80088ca:	e7e4      	b.n	8008896 <__pow5mult+0x5a>
 80088cc:	4638      	mov	r0, r7
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	0800a9d8 	.word	0x0800a9d8

080088d8 <__lshift>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	4607      	mov	r7, r0
 80088e0:	4616      	mov	r6, r2
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088e8:	eb0a 0903 	add.w	r9, sl, r3
 80088ec:	6849      	ldr	r1, [r1, #4]
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	f109 0501 	add.w	r5, r9, #1
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	db32      	blt.n	800895e <__lshift+0x86>
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7ff fe2c 	bl	8008556 <_Balloc>
 80088fe:	2300      	movs	r3, #0
 8008900:	4680      	mov	r8, r0
 8008902:	461a      	mov	r2, r3
 8008904:	f100 0114 	add.w	r1, r0, #20
 8008908:	4553      	cmp	r3, sl
 800890a:	db2b      	blt.n	8008964 <__lshift+0x8c>
 800890c:	6920      	ldr	r0, [r4, #16]
 800890e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008912:	f104 0314 	add.w	r3, r4, #20
 8008916:	f016 021f 	ands.w	r2, r6, #31
 800891a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800891e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008922:	d025      	beq.n	8008970 <__lshift+0x98>
 8008924:	2000      	movs	r0, #0
 8008926:	f1c2 0e20 	rsb	lr, r2, #32
 800892a:	468a      	mov	sl, r1
 800892c:	681e      	ldr	r6, [r3, #0]
 800892e:	4096      	lsls	r6, r2
 8008930:	4330      	orrs	r0, r6
 8008932:	f84a 0b04 	str.w	r0, [sl], #4
 8008936:	f853 0b04 	ldr.w	r0, [r3], #4
 800893a:	459c      	cmp	ip, r3
 800893c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008940:	d814      	bhi.n	800896c <__lshift+0x94>
 8008942:	6048      	str	r0, [r1, #4]
 8008944:	b108      	cbz	r0, 800894a <__lshift+0x72>
 8008946:	f109 0502 	add.w	r5, r9, #2
 800894a:	3d01      	subs	r5, #1
 800894c:	4638      	mov	r0, r7
 800894e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008952:	4621      	mov	r1, r4
 8008954:	f7ff fe33 	bl	80085be <_Bfree>
 8008958:	4640      	mov	r0, r8
 800895a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895e:	3101      	adds	r1, #1
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	e7c7      	b.n	80088f4 <__lshift+0x1c>
 8008964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008968:	3301      	adds	r3, #1
 800896a:	e7cd      	b.n	8008908 <__lshift+0x30>
 800896c:	4651      	mov	r1, sl
 800896e:	e7dc      	b.n	800892a <__lshift+0x52>
 8008970:	3904      	subs	r1, #4
 8008972:	f853 2b04 	ldr.w	r2, [r3], #4
 8008976:	459c      	cmp	ip, r3
 8008978:	f841 2f04 	str.w	r2, [r1, #4]!
 800897c:	d8f9      	bhi.n	8008972 <__lshift+0x9a>
 800897e:	e7e4      	b.n	800894a <__lshift+0x72>

08008980 <__mcmp>:
 8008980:	6903      	ldr	r3, [r0, #16]
 8008982:	690a      	ldr	r2, [r1, #16]
 8008984:	b530      	push	{r4, r5, lr}
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	d10c      	bne.n	80089a4 <__mcmp+0x24>
 800898a:	0092      	lsls	r2, r2, #2
 800898c:	3014      	adds	r0, #20
 800898e:	3114      	adds	r1, #20
 8008990:	1884      	adds	r4, r0, r2
 8008992:	4411      	add	r1, r2
 8008994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800899c:	4295      	cmp	r5, r2
 800899e:	d003      	beq.n	80089a8 <__mcmp+0x28>
 80089a0:	d305      	bcc.n	80089ae <__mcmp+0x2e>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4618      	mov	r0, r3
 80089a6:	bd30      	pop	{r4, r5, pc}
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d3f3      	bcc.n	8008994 <__mcmp+0x14>
 80089ac:	e7fa      	b.n	80089a4 <__mcmp+0x24>
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089b2:	e7f7      	b.n	80089a4 <__mcmp+0x24>

080089b4 <__mdiff>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	460d      	mov	r5, r1
 80089ba:	4607      	mov	r7, r0
 80089bc:	4611      	mov	r1, r2
 80089be:	4628      	mov	r0, r5
 80089c0:	4614      	mov	r4, r2
 80089c2:	f7ff ffdd 	bl	8008980 <__mcmp>
 80089c6:	1e06      	subs	r6, r0, #0
 80089c8:	d108      	bne.n	80089dc <__mdiff+0x28>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff fdc2 	bl	8008556 <_Balloc>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089dc:	bfa4      	itt	ge
 80089de:	4623      	movge	r3, r4
 80089e0:	462c      	movge	r4, r5
 80089e2:	4638      	mov	r0, r7
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	bfa6      	itte	ge
 80089e8:	461d      	movge	r5, r3
 80089ea:	2600      	movge	r6, #0
 80089ec:	2601      	movlt	r6, #1
 80089ee:	f7ff fdb2 	bl	8008556 <_Balloc>
 80089f2:	f04f 0e00 	mov.w	lr, #0
 80089f6:	60c6      	str	r6, [r0, #12]
 80089f8:	692b      	ldr	r3, [r5, #16]
 80089fa:	6926      	ldr	r6, [r4, #16]
 80089fc:	f104 0214 	add.w	r2, r4, #20
 8008a00:	f105 0914 	add.w	r9, r5, #20
 8008a04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a0c:	f100 0114 	add.w	r1, r0, #20
 8008a10:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a14:	f859 5b04 	ldr.w	r5, [r9], #4
 8008a18:	fa1f f38a 	uxth.w	r3, sl
 8008a1c:	4473      	add	r3, lr
 8008a1e:	b2ac      	uxth	r4, r5
 8008a20:	1b1b      	subs	r3, r3, r4
 8008a22:	0c2c      	lsrs	r4, r5, #16
 8008a24:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008a28:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a32:	45c8      	cmp	r8, r9
 8008a34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a38:	4694      	mov	ip, r2
 8008a3a:	f841 4b04 	str.w	r4, [r1], #4
 8008a3e:	d8e7      	bhi.n	8008a10 <__mdiff+0x5c>
 8008a40:	45bc      	cmp	ip, r7
 8008a42:	d304      	bcc.n	8008a4e <__mdiff+0x9a>
 8008a44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a48:	b183      	cbz	r3, 8008a6c <__mdiff+0xb8>
 8008a4a:	6106      	str	r6, [r0, #16]
 8008a4c:	e7c4      	b.n	80089d8 <__mdiff+0x24>
 8008a4e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a52:	b2a2      	uxth	r2, r4
 8008a54:	4472      	add	r2, lr
 8008a56:	1413      	asrs	r3, r2, #16
 8008a58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a62:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a66:	f841 2b04 	str.w	r2, [r1], #4
 8008a6a:	e7e9      	b.n	8008a40 <__mdiff+0x8c>
 8008a6c:	3e01      	subs	r6, #1
 8008a6e:	e7e9      	b.n	8008a44 <__mdiff+0x90>

08008a70 <__d2b>:
 8008a70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a74:	461c      	mov	r4, r3
 8008a76:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	4690      	mov	r8, r2
 8008a7e:	f7ff fd6a 	bl	8008556 <_Balloc>
 8008a82:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008a86:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	bb34      	cbnz	r4, 8008adc <__d2b+0x6c>
 8008a8e:	9201      	str	r2, [sp, #4]
 8008a90:	f1b8 0200 	subs.w	r2, r8, #0
 8008a94:	d027      	beq.n	8008ae6 <__d2b+0x76>
 8008a96:	a802      	add	r0, sp, #8
 8008a98:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008a9c:	f7ff fe00 	bl	80086a0 <__lo0bits>
 8008aa0:	9900      	ldr	r1, [sp, #0]
 8008aa2:	b1f0      	cbz	r0, 8008ae2 <__d2b+0x72>
 8008aa4:	9a01      	ldr	r2, [sp, #4]
 8008aa6:	f1c0 0320 	rsb	r3, r0, #32
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	40c2      	lsrs	r2, r0
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	9201      	str	r2, [sp, #4]
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2102      	movne	r1, #2
 8008abe:	2101      	moveq	r1, #1
 8008ac0:	61bb      	str	r3, [r7, #24]
 8008ac2:	6139      	str	r1, [r7, #16]
 8008ac4:	b1c4      	cbz	r4, 8008af8 <__d2b+0x88>
 8008ac6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008aca:	4404      	add	r4, r0
 8008acc:	6034      	str	r4, [r6, #0]
 8008ace:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ad2:	6028      	str	r0, [r5, #0]
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	b002      	add	sp, #8
 8008ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008adc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ae0:	e7d5      	b.n	8008a8e <__d2b+0x1e>
 8008ae2:	6179      	str	r1, [r7, #20]
 8008ae4:	e7e7      	b.n	8008ab6 <__d2b+0x46>
 8008ae6:	a801      	add	r0, sp, #4
 8008ae8:	f7ff fdda 	bl	80086a0 <__lo0bits>
 8008aec:	2101      	movs	r1, #1
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	6139      	str	r1, [r7, #16]
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	3020      	adds	r0, #32
 8008af6:	e7e5      	b.n	8008ac4 <__d2b+0x54>
 8008af8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008afc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b00:	6030      	str	r0, [r6, #0]
 8008b02:	6918      	ldr	r0, [r3, #16]
 8008b04:	f7ff fdad 	bl	8008662 <__hi0bits>
 8008b08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b0c:	e7e1      	b.n	8008ad2 <__d2b+0x62>

08008b0e <_calloc_r>:
 8008b0e:	b538      	push	{r3, r4, r5, lr}
 8008b10:	fb02 f401 	mul.w	r4, r2, r1
 8008b14:	4621      	mov	r1, r4
 8008b16:	f000 f855 	bl	8008bc4 <_malloc_r>
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	b118      	cbz	r0, 8008b26 <_calloc_r+0x18>
 8008b1e:	4622      	mov	r2, r4
 8008b20:	2100      	movs	r1, #0
 8008b22:	f7fe fa2d 	bl	8006f80 <memset>
 8008b26:	4628      	mov	r0, r5
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
	...

08008b2c <_free_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4605      	mov	r5, r0
 8008b30:	2900      	cmp	r1, #0
 8008b32:	d043      	beq.n	8008bbc <_free_r+0x90>
 8008b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b38:	1f0c      	subs	r4, r1, #4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfb8      	it	lt
 8008b3e:	18e4      	addlt	r4, r4, r3
 8008b40:	f000 fa27 	bl	8008f92 <__malloc_lock>
 8008b44:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <_free_r+0x94>)
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	4610      	mov	r0, r2
 8008b4a:	b933      	cbnz	r3, 8008b5a <_free_r+0x2e>
 8008b4c:	6063      	str	r3, [r4, #4]
 8008b4e:	6014      	str	r4, [r2, #0]
 8008b50:	4628      	mov	r0, r5
 8008b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b56:	f000 ba1d 	b.w	8008f94 <__malloc_unlock>
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	d90b      	bls.n	8008b76 <_free_r+0x4a>
 8008b5e:	6821      	ldr	r1, [r4, #0]
 8008b60:	1862      	adds	r2, r4, r1
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bf01      	itttt	eq
 8008b66:	681a      	ldreq	r2, [r3, #0]
 8008b68:	685b      	ldreq	r3, [r3, #4]
 8008b6a:	1852      	addeq	r2, r2, r1
 8008b6c:	6022      	streq	r2, [r4, #0]
 8008b6e:	6063      	str	r3, [r4, #4]
 8008b70:	6004      	str	r4, [r0, #0]
 8008b72:	e7ed      	b.n	8008b50 <_free_r+0x24>
 8008b74:	4613      	mov	r3, r2
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	b10a      	cbz	r2, 8008b7e <_free_r+0x52>
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	d9fa      	bls.n	8008b74 <_free_r+0x48>
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	1858      	adds	r0, r3, r1
 8008b82:	42a0      	cmp	r0, r4
 8008b84:	d10b      	bne.n	8008b9e <_free_r+0x72>
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	4401      	add	r1, r0
 8008b8a:	1858      	adds	r0, r3, r1
 8008b8c:	4282      	cmp	r2, r0
 8008b8e:	6019      	str	r1, [r3, #0]
 8008b90:	d1de      	bne.n	8008b50 <_free_r+0x24>
 8008b92:	6810      	ldr	r0, [r2, #0]
 8008b94:	6852      	ldr	r2, [r2, #4]
 8008b96:	4401      	add	r1, r0
 8008b98:	6019      	str	r1, [r3, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
 8008b9c:	e7d8      	b.n	8008b50 <_free_r+0x24>
 8008b9e:	d902      	bls.n	8008ba6 <_free_r+0x7a>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	e7d4      	b.n	8008b50 <_free_r+0x24>
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	1821      	adds	r1, r4, r0
 8008baa:	428a      	cmp	r2, r1
 8008bac:	bf01      	itttt	eq
 8008bae:	6811      	ldreq	r1, [r2, #0]
 8008bb0:	6852      	ldreq	r2, [r2, #4]
 8008bb2:	1809      	addeq	r1, r1, r0
 8008bb4:	6021      	streq	r1, [r4, #0]
 8008bb6:	6062      	str	r2, [r4, #4]
 8008bb8:	605c      	str	r4, [r3, #4]
 8008bba:	e7c9      	b.n	8008b50 <_free_r+0x24>
 8008bbc:	bd38      	pop	{r3, r4, r5, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000228 	.word	0x20000228

08008bc4 <_malloc_r>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	1ccd      	adds	r5, r1, #3
 8008bc8:	f025 0503 	bic.w	r5, r5, #3
 8008bcc:	3508      	adds	r5, #8
 8008bce:	2d0c      	cmp	r5, #12
 8008bd0:	bf38      	it	cc
 8008bd2:	250c      	movcc	r5, #12
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	db01      	blt.n	8008bde <_malloc_r+0x1a>
 8008bda:	42a9      	cmp	r1, r5
 8008bdc:	d903      	bls.n	8008be6 <_malloc_r+0x22>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	2000      	movs	r0, #0
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	f000 f9d4 	bl	8008f92 <__malloc_lock>
 8008bea:	4a21      	ldr	r2, [pc, #132]	; (8008c70 <_malloc_r+0xac>)
 8008bec:	6814      	ldr	r4, [r2, #0]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	b991      	cbnz	r1, 8008c18 <_malloc_r+0x54>
 8008bf2:	4c20      	ldr	r4, [pc, #128]	; (8008c74 <_malloc_r+0xb0>)
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	b91b      	cbnz	r3, 8008c00 <_malloc_r+0x3c>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f98f 	bl	8008f1c <_sbrk_r>
 8008bfe:	6020      	str	r0, [r4, #0]
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f98a 	bl	8008f1c <_sbrk_r>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d124      	bne.n	8008c56 <_malloc_r+0x92>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	4630      	mov	r0, r6
 8008c10:	6033      	str	r3, [r6, #0]
 8008c12:	f000 f9bf 	bl	8008f94 <__malloc_unlock>
 8008c16:	e7e4      	b.n	8008be2 <_malloc_r+0x1e>
 8008c18:	680b      	ldr	r3, [r1, #0]
 8008c1a:	1b5b      	subs	r3, r3, r5
 8008c1c:	d418      	bmi.n	8008c50 <_malloc_r+0x8c>
 8008c1e:	2b0b      	cmp	r3, #11
 8008c20:	d90f      	bls.n	8008c42 <_malloc_r+0x7e>
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	18cc      	adds	r4, r1, r3
 8008c26:	50cd      	str	r5, [r1, r3]
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f000 f9b3 	bl	8008f94 <__malloc_unlock>
 8008c2e:	f104 000b 	add.w	r0, r4, #11
 8008c32:	1d23      	adds	r3, r4, #4
 8008c34:	f020 0007 	bic.w	r0, r0, #7
 8008c38:	1ac3      	subs	r3, r0, r3
 8008c3a:	d0d3      	beq.n	8008be4 <_malloc_r+0x20>
 8008c3c:	425a      	negs	r2, r3
 8008c3e:	50e2      	str	r2, [r4, r3]
 8008c40:	e7d0      	b.n	8008be4 <_malloc_r+0x20>
 8008c42:	684b      	ldr	r3, [r1, #4]
 8008c44:	428c      	cmp	r4, r1
 8008c46:	bf16      	itet	ne
 8008c48:	6063      	strne	r3, [r4, #4]
 8008c4a:	6013      	streq	r3, [r2, #0]
 8008c4c:	460c      	movne	r4, r1
 8008c4e:	e7eb      	b.n	8008c28 <_malloc_r+0x64>
 8008c50:	460c      	mov	r4, r1
 8008c52:	6849      	ldr	r1, [r1, #4]
 8008c54:	e7cc      	b.n	8008bf0 <_malloc_r+0x2c>
 8008c56:	1cc4      	adds	r4, r0, #3
 8008c58:	f024 0403 	bic.w	r4, r4, #3
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d005      	beq.n	8008c6c <_malloc_r+0xa8>
 8008c60:	1a21      	subs	r1, r4, r0
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 f95a 	bl	8008f1c <_sbrk_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d0cf      	beq.n	8008c0c <_malloc_r+0x48>
 8008c6c:	6025      	str	r5, [r4, #0]
 8008c6e:	e7db      	b.n	8008c28 <_malloc_r+0x64>
 8008c70:	20000228 	.word	0x20000228
 8008c74:	2000022c 	.word	0x2000022c

08008c78 <__ssputs_r>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	688e      	ldr	r6, [r1, #8]
 8008c7e:	4682      	mov	sl, r0
 8008c80:	429e      	cmp	r6, r3
 8008c82:	460c      	mov	r4, r1
 8008c84:	4690      	mov	r8, r2
 8008c86:	4699      	mov	r9, r3
 8008c88:	d837      	bhi.n	8008cfa <__ssputs_r+0x82>
 8008c8a:	898a      	ldrh	r2, [r1, #12]
 8008c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c90:	d031      	beq.n	8008cf6 <__ssputs_r+0x7e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	6909      	ldr	r1, [r1, #16]
 8008c98:	1a6f      	subs	r7, r5, r1
 8008c9a:	6965      	ldr	r5, [r4, #20]
 8008c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ca4:	f109 0301 	add.w	r3, r9, #1
 8008ca8:	443b      	add	r3, r7
 8008caa:	429d      	cmp	r5, r3
 8008cac:	bf38      	it	cc
 8008cae:	461d      	movcc	r5, r3
 8008cb0:	0553      	lsls	r3, r2, #21
 8008cb2:	d530      	bpl.n	8008d16 <__ssputs_r+0x9e>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	f7ff ff85 	bl	8008bc4 <_malloc_r>
 8008cba:	4606      	mov	r6, r0
 8008cbc:	b950      	cbnz	r0, 8008cd4 <__ssputs_r+0x5c>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc4:	f8ca 3000 	str.w	r3, [sl]
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	6921      	ldr	r1, [r4, #16]
 8008cd8:	f7ff fc32 	bl	8008540 <memcpy>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	6126      	str	r6, [r4, #16]
 8008cea:	443e      	add	r6, r7
 8008cec:	6026      	str	r6, [r4, #0]
 8008cee:	464e      	mov	r6, r9
 8008cf0:	6165      	str	r5, [r4, #20]
 8008cf2:	1bed      	subs	r5, r5, r7
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	454e      	cmp	r6, r9
 8008cf8:	d900      	bls.n	8008cfc <__ssputs_r+0x84>
 8008cfa:	464e      	mov	r6, r9
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4641      	mov	r1, r8
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	f000 f92d 	bl	8008f60 <memmove>
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	2000      	movs	r0, #0
 8008d0a:	1b9b      	subs	r3, r3, r6
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	441e      	add	r6, r3
 8008d12:	6026      	str	r6, [r4, #0]
 8008d14:	e7dc      	b.n	8008cd0 <__ssputs_r+0x58>
 8008d16:	462a      	mov	r2, r5
 8008d18:	f000 f93d 	bl	8008f96 <_realloc_r>
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d1e2      	bne.n	8008ce8 <__ssputs_r+0x70>
 8008d22:	6921      	ldr	r1, [r4, #16]
 8008d24:	4650      	mov	r0, sl
 8008d26:	f7ff ff01 	bl	8008b2c <_free_r>
 8008d2a:	e7c8      	b.n	8008cbe <__ssputs_r+0x46>

08008d2c <_svfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	461d      	mov	r5, r3
 8008d32:	898b      	ldrh	r3, [r1, #12]
 8008d34:	b09d      	sub	sp, #116	; 0x74
 8008d36:	061f      	lsls	r7, r3, #24
 8008d38:	4680      	mov	r8, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	d50f      	bpl.n	8008d60 <_svfiprintf_r+0x34>
 8008d40:	690b      	ldr	r3, [r1, #16]
 8008d42:	b96b      	cbnz	r3, 8008d60 <_svfiprintf_r+0x34>
 8008d44:	2140      	movs	r1, #64	; 0x40
 8008d46:	f7ff ff3d 	bl	8008bc4 <_malloc_r>
 8008d4a:	6020      	str	r0, [r4, #0]
 8008d4c:	6120      	str	r0, [r4, #16]
 8008d4e:	b928      	cbnz	r0, 8008d5c <_svfiprintf_r+0x30>
 8008d50:	230c      	movs	r3, #12
 8008d52:	f8c8 3000 	str.w	r3, [r8]
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5a:	e0c8      	b.n	8008eee <_svfiprintf_r+0x1c2>
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	6163      	str	r3, [r4, #20]
 8008d60:	2300      	movs	r3, #0
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	2320      	movs	r3, #32
 8008d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6a:	2330      	movs	r3, #48	; 0x30
 8008d6c:	f04f 0b01 	mov.w	fp, #1
 8008d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d74:	9503      	str	r5, [sp, #12]
 8008d76:	4637      	mov	r7, r6
 8008d78:	463d      	mov	r5, r7
 8008d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d7e:	b10b      	cbz	r3, 8008d84 <_svfiprintf_r+0x58>
 8008d80:	2b25      	cmp	r3, #37	; 0x25
 8008d82:	d13e      	bne.n	8008e02 <_svfiprintf_r+0xd6>
 8008d84:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d88:	d00b      	beq.n	8008da2 <_svfiprintf_r+0x76>
 8008d8a:	4653      	mov	r3, sl
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4640      	mov	r0, r8
 8008d92:	f7ff ff71 	bl	8008c78 <__ssputs_r>
 8008d96:	3001      	adds	r0, #1
 8008d98:	f000 80a4 	beq.w	8008ee4 <_svfiprintf_r+0x1b8>
 8008d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9e:	4453      	add	r3, sl
 8008da0:	9309      	str	r3, [sp, #36]	; 0x24
 8008da2:	783b      	ldrb	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 809d 	beq.w	8008ee4 <_svfiprintf_r+0x1b8>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8008dbe:	462f      	mov	r7, r5
 8008dc0:	2205      	movs	r2, #5
 8008dc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008dc6:	4850      	ldr	r0, [pc, #320]	; (8008f08 <_svfiprintf_r+0x1dc>)
 8008dc8:	f7ff fbac 	bl	8008524 <memchr>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	b9d0      	cbnz	r0, 8008e06 <_svfiprintf_r+0xda>
 8008dd0:	06d9      	lsls	r1, r3, #27
 8008dd2:	bf44      	itt	mi
 8008dd4:	2220      	movmi	r2, #32
 8008dd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008dda:	071a      	lsls	r2, r3, #28
 8008ddc:	bf44      	itt	mi
 8008dde:	222b      	movmi	r2, #43	; 0x2b
 8008de0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008de4:	782a      	ldrb	r2, [r5, #0]
 8008de6:	2a2a      	cmp	r2, #42	; 0x2a
 8008de8:	d015      	beq.n	8008e16 <_svfiprintf_r+0xea>
 8008dea:	462f      	mov	r7, r5
 8008dec:	2000      	movs	r0, #0
 8008dee:	250a      	movs	r5, #10
 8008df0:	9a07      	ldr	r2, [sp, #28]
 8008df2:	4639      	mov	r1, r7
 8008df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df8:	3b30      	subs	r3, #48	; 0x30
 8008dfa:	2b09      	cmp	r3, #9
 8008dfc:	d94d      	bls.n	8008e9a <_svfiprintf_r+0x16e>
 8008dfe:	b1b8      	cbz	r0, 8008e30 <_svfiprintf_r+0x104>
 8008e00:	e00f      	b.n	8008e22 <_svfiprintf_r+0xf6>
 8008e02:	462f      	mov	r7, r5
 8008e04:	e7b8      	b.n	8008d78 <_svfiprintf_r+0x4c>
 8008e06:	4a40      	ldr	r2, [pc, #256]	; (8008f08 <_svfiprintf_r+0x1dc>)
 8008e08:	463d      	mov	r5, r7
 8008e0a:	1a80      	subs	r0, r0, r2
 8008e0c:	fa0b f000 	lsl.w	r0, fp, r0
 8008e10:	4318      	orrs	r0, r3
 8008e12:	9004      	str	r0, [sp, #16]
 8008e14:	e7d3      	b.n	8008dbe <_svfiprintf_r+0x92>
 8008e16:	9a03      	ldr	r2, [sp, #12]
 8008e18:	1d11      	adds	r1, r2, #4
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	9103      	str	r1, [sp, #12]
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	db01      	blt.n	8008e26 <_svfiprintf_r+0xfa>
 8008e22:	9207      	str	r2, [sp, #28]
 8008e24:	e004      	b.n	8008e30 <_svfiprintf_r+0x104>
 8008e26:	4252      	negs	r2, r2
 8008e28:	f043 0302 	orr.w	r3, r3, #2
 8008e2c:	9207      	str	r2, [sp, #28]
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	783b      	ldrb	r3, [r7, #0]
 8008e32:	2b2e      	cmp	r3, #46	; 0x2e
 8008e34:	d10c      	bne.n	8008e50 <_svfiprintf_r+0x124>
 8008e36:	787b      	ldrb	r3, [r7, #1]
 8008e38:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3a:	d133      	bne.n	8008ea4 <_svfiprintf_r+0x178>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	3702      	adds	r7, #2
 8008e40:	1d1a      	adds	r2, r3, #4
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	9203      	str	r2, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bfb8      	it	lt
 8008e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e4e:	9305      	str	r3, [sp, #20]
 8008e50:	4d2e      	ldr	r5, [pc, #184]	; (8008f0c <_svfiprintf_r+0x1e0>)
 8008e52:	2203      	movs	r2, #3
 8008e54:	7839      	ldrb	r1, [r7, #0]
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7ff fb64 	bl	8008524 <memchr>
 8008e5c:	b138      	cbz	r0, 8008e6e <_svfiprintf_r+0x142>
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	1b40      	subs	r0, r0, r5
 8008e62:	fa03 f000 	lsl.w	r0, r3, r0
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	3701      	adds	r7, #1
 8008e6a:	4303      	orrs	r3, r0
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	7839      	ldrb	r1, [r7, #0]
 8008e70:	2206      	movs	r2, #6
 8008e72:	4827      	ldr	r0, [pc, #156]	; (8008f10 <_svfiprintf_r+0x1e4>)
 8008e74:	1c7e      	adds	r6, r7, #1
 8008e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e7a:	f7ff fb53 	bl	8008524 <memchr>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d038      	beq.n	8008ef4 <_svfiprintf_r+0x1c8>
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <_svfiprintf_r+0x1e8>)
 8008e84:	bb13      	cbnz	r3, 8008ecc <_svfiprintf_r+0x1a0>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	3307      	adds	r3, #7
 8008e8a:	f023 0307 	bic.w	r3, r3, #7
 8008e8e:	3308      	adds	r3, #8
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	444b      	add	r3, r9
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	e76d      	b.n	8008d76 <_svfiprintf_r+0x4a>
 8008e9a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	e7a6      	b.n	8008df2 <_svfiprintf_r+0xc6>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	250a      	movs	r5, #10
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	3701      	adds	r7, #1
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb4:	3a30      	subs	r2, #48	; 0x30
 8008eb6:	2a09      	cmp	r2, #9
 8008eb8:	d903      	bls.n	8008ec2 <_svfiprintf_r+0x196>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0c8      	beq.n	8008e50 <_svfiprintf_r+0x124>
 8008ebe:	9105      	str	r1, [sp, #20]
 8008ec0:	e7c6      	b.n	8008e50 <_svfiprintf_r+0x124>
 8008ec2:	fb05 2101 	mla	r1, r5, r1, r2
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4607      	mov	r7, r0
 8008eca:	e7f0      	b.n	8008eae <_svfiprintf_r+0x182>
 8008ecc:	ab03      	add	r3, sp, #12
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <_svfiprintf_r+0x1ec>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7fe f8ec 	bl	80070b4 <_printf_float>
 8008edc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	d1d6      	bne.n	8008e92 <_svfiprintf_r+0x166>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	065b      	lsls	r3, r3, #25
 8008ee8:	f53f af35 	bmi.w	8008d56 <_svfiprintf_r+0x2a>
 8008eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eee:	b01d      	add	sp, #116	; 0x74
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4622      	mov	r2, r4
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <_svfiprintf_r+0x1ec>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4640      	mov	r0, r8
 8008f00:	f7fe fb84 	bl	800760c <_printf_i>
 8008f04:	e7ea      	b.n	8008edc <_svfiprintf_r+0x1b0>
 8008f06:	bf00      	nop
 8008f08:	0800a9e4 	.word	0x0800a9e4
 8008f0c:	0800a9ea 	.word	0x0800a9ea
 8008f10:	0800a9ee 	.word	0x0800a9ee
 8008f14:	080070b5 	.word	0x080070b5
 8008f18:	08008c79 	.word	0x08008c79

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4c05      	ldr	r4, [pc, #20]	; (8008f38 <_sbrk_r+0x1c>)
 8008f22:	4605      	mov	r5, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	f7fa f978 	bl	800321c <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000610 	.word	0x20000610

08008f3c <__ascii_mbtowc>:
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	b901      	cbnz	r1, 8008f42 <__ascii_mbtowc+0x6>
 8008f40:	a901      	add	r1, sp, #4
 8008f42:	b142      	cbz	r2, 8008f56 <__ascii_mbtowc+0x1a>
 8008f44:	b14b      	cbz	r3, 8008f5a <__ascii_mbtowc+0x1e>
 8008f46:	7813      	ldrb	r3, [r2, #0]
 8008f48:	600b      	str	r3, [r1, #0]
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	1c10      	adds	r0, r2, #0
 8008f4e:	bf18      	it	ne
 8008f50:	2001      	movne	r0, #1
 8008f52:	b002      	add	sp, #8
 8008f54:	4770      	bx	lr
 8008f56:	4610      	mov	r0, r2
 8008f58:	e7fb      	b.n	8008f52 <__ascii_mbtowc+0x16>
 8008f5a:	f06f 0001 	mvn.w	r0, #1
 8008f5e:	e7f8      	b.n	8008f52 <__ascii_mbtowc+0x16>

08008f60 <memmove>:
 8008f60:	4288      	cmp	r0, r1
 8008f62:	b510      	push	{r4, lr}
 8008f64:	eb01 0302 	add.w	r3, r1, r2
 8008f68:	d807      	bhi.n	8008f7a <memmove+0x1a>
 8008f6a:	1e42      	subs	r2, r0, #1
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	d00a      	beq.n	8008f86 <memmove+0x26>
 8008f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f78:	e7f8      	b.n	8008f6c <memmove+0xc>
 8008f7a:	4283      	cmp	r3, r0
 8008f7c:	d9f5      	bls.n	8008f6a <memmove+0xa>
 8008f7e:	1881      	adds	r1, r0, r2
 8008f80:	1ad2      	subs	r2, r2, r3
 8008f82:	42d3      	cmn	r3, r2
 8008f84:	d100      	bne.n	8008f88 <memmove+0x28>
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f90:	e7f7      	b.n	8008f82 <memmove+0x22>

08008f92 <__malloc_lock>:
 8008f92:	4770      	bx	lr

08008f94 <__malloc_unlock>:
 8008f94:	4770      	bx	lr

08008f96 <_realloc_r>:
 8008f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f98:	4607      	mov	r7, r0
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	b921      	cbnz	r1, 8008faa <_realloc_r+0x14>
 8008fa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	f7ff be0d 	b.w	8008bc4 <_malloc_r>
 8008faa:	b922      	cbnz	r2, 8008fb6 <_realloc_r+0x20>
 8008fac:	f7ff fdbe 	bl	8008b2c <_free_r>
 8008fb0:	4625      	mov	r5, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb6:	f000 f821 	bl	8008ffc <_malloc_usable_size_r>
 8008fba:	42a0      	cmp	r0, r4
 8008fbc:	d20f      	bcs.n	8008fde <_realloc_r+0x48>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff fdff 	bl	8008bc4 <_malloc_r>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d0f2      	beq.n	8008fb2 <_realloc_r+0x1c>
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4622      	mov	r2, r4
 8008fd0:	f7ff fab6 	bl	8008540 <memcpy>
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7ff fda8 	bl	8008b2c <_free_r>
 8008fdc:	e7e9      	b.n	8008fb2 <_realloc_r+0x1c>
 8008fde:	4635      	mov	r5, r6
 8008fe0:	e7e7      	b.n	8008fb2 <_realloc_r+0x1c>

08008fe2 <__ascii_wctomb>:
 8008fe2:	b149      	cbz	r1, 8008ff8 <__ascii_wctomb+0x16>
 8008fe4:	2aff      	cmp	r2, #255	; 0xff
 8008fe6:	bf8b      	itete	hi
 8008fe8:	238a      	movhi	r3, #138	; 0x8a
 8008fea:	700a      	strbls	r2, [r1, #0]
 8008fec:	6003      	strhi	r3, [r0, #0]
 8008fee:	2001      	movls	r0, #1
 8008ff0:	bf88      	it	hi
 8008ff2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008ff6:	4770      	bx	lr
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	4770      	bx	lr

08008ffc <_malloc_usable_size_r>:
 8008ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009000:	1f18      	subs	r0, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbc      	itt	lt
 8009006:	580b      	ldrlt	r3, [r1, r0]
 8009008:	18c0      	addlt	r0, r0, r3
 800900a:	4770      	bx	lr

0800900c <sin>:
 800900c:	b530      	push	{r4, r5, lr}
 800900e:	4a1a      	ldr	r2, [pc, #104]	; (8009078 <sin+0x6c>)
 8009010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009014:	4293      	cmp	r3, r2
 8009016:	b087      	sub	sp, #28
 8009018:	dc06      	bgt.n	8009028 <sin+0x1c>
 800901a:	2300      	movs	r3, #0
 800901c:	2200      	movs	r2, #0
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	2300      	movs	r3, #0
 8009022:	f001 f975 	bl	800a310 <__kernel_sin>
 8009026:	e006      	b.n	8009036 <sin+0x2a>
 8009028:	4a14      	ldr	r2, [pc, #80]	; (800907c <sin+0x70>)
 800902a:	4293      	cmp	r3, r2
 800902c:	dd05      	ble.n	800903a <sin+0x2e>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	f7f7 f899 	bl	8000168 <__aeabi_dsub>
 8009036:	b007      	add	sp, #28
 8009038:	bd30      	pop	{r4, r5, pc}
 800903a:	aa02      	add	r2, sp, #8
 800903c:	f000 fac4 	bl	80095c8 <__ieee754_rem_pio2>
 8009040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009044:	f000 0403 	and.w	r4, r0, #3
 8009048:	2c01      	cmp	r4, #1
 800904a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800904e:	d005      	beq.n	800905c <sin+0x50>
 8009050:	2c02      	cmp	r4, #2
 8009052:	d006      	beq.n	8009062 <sin+0x56>
 8009054:	b964      	cbnz	r4, 8009070 <sin+0x64>
 8009056:	2401      	movs	r4, #1
 8009058:	9400      	str	r4, [sp, #0]
 800905a:	e7e2      	b.n	8009022 <sin+0x16>
 800905c:	f000 fd50 	bl	8009b00 <__kernel_cos>
 8009060:	e7e9      	b.n	8009036 <sin+0x2a>
 8009062:	2401      	movs	r4, #1
 8009064:	9400      	str	r4, [sp, #0]
 8009066:	f001 f953 	bl	800a310 <__kernel_sin>
 800906a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800906e:	e7e2      	b.n	8009036 <sin+0x2a>
 8009070:	f000 fd46 	bl	8009b00 <__kernel_cos>
 8009074:	e7f9      	b.n	800906a <sin+0x5e>
 8009076:	bf00      	nop
 8009078:	3fe921fb 	.word	0x3fe921fb
 800907c:	7fefffff 	.word	0x7fefffff

08009080 <asin>:
 8009080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009084:	b08b      	sub	sp, #44	; 0x2c
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	f000 f8a1 	bl	80091d0 <__ieee754_asin>
 800908e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8009124 <asin+0xa4>
 8009092:	4606      	mov	r6, r0
 8009094:	f998 3000 	ldrsb.w	r3, [r8]
 8009098:	460f      	mov	r7, r1
 800909a:	3301      	adds	r3, #1
 800909c:	d036      	beq.n	800910c <asin+0x8c>
 800909e:	4622      	mov	r2, r4
 80090a0:	462b      	mov	r3, r5
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fcb1 	bl	8000a0c <__aeabi_dcmpun>
 80090aa:	4681      	mov	r9, r0
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d12d      	bne.n	800910c <asin+0x8c>
 80090b0:	4620      	mov	r0, r4
 80090b2:	4629      	mov	r1, r5
 80090b4:	f001 f9e2 	bl	800a47c <fabs>
 80090b8:	2200      	movs	r2, #0
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <asin+0x98>)
 80090bc:	f7f7 fc9c 	bl	80009f8 <__aeabi_dcmpgt>
 80090c0:	b320      	cbz	r0, 800910c <asin+0x8c>
 80090c2:	2301      	movs	r3, #1
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4b15      	ldr	r3, [pc, #84]	; (800911c <asin+0x9c>)
 80090c8:	4815      	ldr	r0, [pc, #84]	; (8009120 <asin+0xa0>)
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80090d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80090d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80090d8:	f001 fa5c 	bl	800a594 <nan>
 80090dc:	f998 3000 	ldrsb.w	r3, [r8]
 80090e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d104      	bne.n	80090f2 <asin+0x72>
 80090e8:	f7fd ff20 	bl	8006f2c <__errno>
 80090ec:	2321      	movs	r3, #33	; 0x21
 80090ee:	6003      	str	r3, [r0, #0]
 80090f0:	e004      	b.n	80090fc <asin+0x7c>
 80090f2:	4668      	mov	r0, sp
 80090f4:	f001 fa4c 	bl	800a590 <matherr>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d0f5      	beq.n	80090e8 <asin+0x68>
 80090fc:	9b08      	ldr	r3, [sp, #32]
 80090fe:	b11b      	cbz	r3, 8009108 <asin+0x88>
 8009100:	f7fd ff14 	bl	8006f2c <__errno>
 8009104:	9b08      	ldr	r3, [sp, #32]
 8009106:	6003      	str	r3, [r0, #0]
 8009108:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800910c:	4630      	mov	r0, r6
 800910e:	4639      	mov	r1, r7
 8009110:	b00b      	add	sp, #44	; 0x2c
 8009112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009116:	bf00      	nop
 8009118:	3ff00000 	.word	0x3ff00000
 800911c:	0800ab00 	.word	0x0800ab00
 8009120:	0800a9e9 	.word	0x0800a9e9
 8009124:	200001e0 	.word	0x200001e0

08009128 <sqrt>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b08b      	sub	sp, #44	; 0x2c
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	f000 fc39 	bl	80099a8 <__ieee754_sqrt>
 8009136:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <sqrt+0xa0>)
 8009138:	4680      	mov	r8, r0
 800913a:	f993 a000 	ldrsb.w	sl, [r3]
 800913e:	4689      	mov	r9, r1
 8009140:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009144:	d02b      	beq.n	800919e <sqrt+0x76>
 8009146:	4622      	mov	r2, r4
 8009148:	462b      	mov	r3, r5
 800914a:	4620      	mov	r0, r4
 800914c:	4629      	mov	r1, r5
 800914e:	f7f7 fc5d 	bl	8000a0c <__aeabi_dcmpun>
 8009152:	4683      	mov	fp, r0
 8009154:	bb18      	cbnz	r0, 800919e <sqrt+0x76>
 8009156:	2600      	movs	r6, #0
 8009158:	2700      	movs	r7, #0
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 fc2b 	bl	80009bc <__aeabi_dcmplt>
 8009166:	b1d0      	cbz	r0, 800919e <sqrt+0x76>
 8009168:	2301      	movs	r3, #1
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <sqrt+0xa4>)
 800916e:	f8cd b020 	str.w	fp, [sp, #32]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009178:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800917c:	f1ba 0f00 	cmp.w	sl, #0
 8009180:	d112      	bne.n	80091a8 <sqrt+0x80>
 8009182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009186:	4668      	mov	r0, sp
 8009188:	f001 fa02 	bl	800a590 <matherr>
 800918c:	b1b8      	cbz	r0, 80091be <sqrt+0x96>
 800918e:	9b08      	ldr	r3, [sp, #32]
 8009190:	b11b      	cbz	r3, 800919a <sqrt+0x72>
 8009192:	f7fd fecb 	bl	8006f2c <__errno>
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	b00b      	add	sp, #44	; 0x2c
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	4632      	mov	r2, r6
 80091aa:	463b      	mov	r3, r7
 80091ac:	4630      	mov	r0, r6
 80091ae:	4639      	mov	r1, r7
 80091b0:	f7f7 fabc 	bl	800072c <__aeabi_ddiv>
 80091b4:	f1ba 0f02 	cmp.w	sl, #2
 80091b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091bc:	d1e3      	bne.n	8009186 <sqrt+0x5e>
 80091be:	f7fd feb5 	bl	8006f2c <__errno>
 80091c2:	2321      	movs	r3, #33	; 0x21
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	e7e2      	b.n	800918e <sqrt+0x66>
 80091c8:	200001e0 	.word	0x200001e0
 80091cc:	0800ab05 	.word	0x0800ab05

080091d0 <__ieee754_asin>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4bc4      	ldr	r3, [pc, #784]	; (80094e8 <__ieee754_asin+0x318>)
 80091d6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80091da:	b087      	sub	sp, #28
 80091dc:	429f      	cmp	r7, r3
 80091de:	4604      	mov	r4, r0
 80091e0:	460d      	mov	r5, r1
 80091e2:	9103      	str	r1, [sp, #12]
 80091e4:	dd2a      	ble.n	800923c <__ieee754_asin+0x6c>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80091ec:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80091f0:	433b      	orrs	r3, r7
 80091f2:	d114      	bne.n	800921e <__ieee754_asin+0x4e>
 80091f4:	a3a2      	add	r3, pc, #648	; (adr r3, 8009480 <__ieee754_asin+0x2b0>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f96d 	bl	80004d8 <__aeabi_dmul>
 80091fe:	a3a2      	add	r3, pc, #648	; (adr r3, 8009488 <__ieee754_asin+0x2b8>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	4606      	mov	r6, r0
 8009206:	460f      	mov	r7, r1
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7f7 f964 	bl	80004d8 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f6 ffa8 	bl	800016c <__adddf3>
 800921c:	e007      	b.n	800922e <__ieee754_asin+0x5e>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	f7f6 ffa1 	bl	8000168 <__aeabi_dsub>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	f7f7 fa7f 	bl	800072c <__aeabi_ddiv>
 800922e:	4604      	mov	r4, r0
 8009230:	460d      	mov	r5, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	b007      	add	sp, #28
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	4bab      	ldr	r3, [pc, #684]	; (80094ec <__ieee754_asin+0x31c>)
 800923e:	429f      	cmp	r7, r3
 8009240:	dc0e      	bgt.n	8009260 <__ieee754_asin+0x90>
 8009242:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009246:	f280 80ab 	bge.w	80093a0 <__ieee754_asin+0x1d0>
 800924a:	a391      	add	r3, pc, #580	; (adr r3, 8009490 <__ieee754_asin+0x2c0>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f6 ff8c 	bl	800016c <__adddf3>
 8009254:	2200      	movs	r2, #0
 8009256:	4ba6      	ldr	r3, [pc, #664]	; (80094f0 <__ieee754_asin+0x320>)
 8009258:	f7f7 fbce 	bl	80009f8 <__aeabi_dcmpgt>
 800925c:	2800      	cmp	r0, #0
 800925e:	d1e8      	bne.n	8009232 <__ieee754_asin+0x62>
 8009260:	4620      	mov	r0, r4
 8009262:	4629      	mov	r1, r5
 8009264:	f001 f90a 	bl	800a47c <fabs>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	2000      	movs	r0, #0
 800926e:	49a0      	ldr	r1, [pc, #640]	; (80094f0 <__ieee754_asin+0x320>)
 8009270:	f7f6 ff7a 	bl	8000168 <__aeabi_dsub>
 8009274:	2200      	movs	r2, #0
 8009276:	4b9f      	ldr	r3, [pc, #636]	; (80094f4 <__ieee754_asin+0x324>)
 8009278:	f7f7 f92e 	bl	80004d8 <__aeabi_dmul>
 800927c:	a386      	add	r3, pc, #536	; (adr r3, 8009498 <__ieee754_asin+0x2c8>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
 8009286:	f7f7 f927 	bl	80004d8 <__aeabi_dmul>
 800928a:	a385      	add	r3, pc, #532	; (adr r3, 80094a0 <__ieee754_asin+0x2d0>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 ff6c 	bl	800016c <__adddf3>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 f91e 	bl	80004d8 <__aeabi_dmul>
 800929c:	a382      	add	r3, pc, #520	; (adr r3, 80094a8 <__ieee754_asin+0x2d8>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 ff61 	bl	8000168 <__aeabi_dsub>
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f915 	bl	80004d8 <__aeabi_dmul>
 80092ae:	a380      	add	r3, pc, #512	; (adr r3, 80094b0 <__ieee754_asin+0x2e0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ff5a 	bl	800016c <__adddf3>
 80092b8:	4622      	mov	r2, r4
 80092ba:	462b      	mov	r3, r5
 80092bc:	f7f7 f90c 	bl	80004d8 <__aeabi_dmul>
 80092c0:	a37d      	add	r3, pc, #500	; (adr r3, 80094b8 <__ieee754_asin+0x2e8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ff4f 	bl	8000168 <__aeabi_dsub>
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f7 f903 	bl	80004d8 <__aeabi_dmul>
 80092d2:	a37b      	add	r3, pc, #492	; (adr r3, 80094c0 <__ieee754_asin+0x2f0>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f6 ff48 	bl	800016c <__adddf3>
 80092dc:	4622      	mov	r2, r4
 80092de:	462b      	mov	r3, r5
 80092e0:	f7f7 f8fa 	bl	80004d8 <__aeabi_dmul>
 80092e4:	a378      	add	r3, pc, #480	; (adr r3, 80094c8 <__ieee754_asin+0x2f8>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	4680      	mov	r8, r0
 80092ec:	4689      	mov	r9, r1
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 f8f1 	bl	80004d8 <__aeabi_dmul>
 80092f6:	a376      	add	r3, pc, #472	; (adr r3, 80094d0 <__ieee754_asin+0x300>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f6 ff34 	bl	8000168 <__aeabi_dsub>
 8009300:	4622      	mov	r2, r4
 8009302:	462b      	mov	r3, r5
 8009304:	f7f7 f8e8 	bl	80004d8 <__aeabi_dmul>
 8009308:	a373      	add	r3, pc, #460	; (adr r3, 80094d8 <__ieee754_asin+0x308>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f6 ff2d 	bl	800016c <__adddf3>
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	f7f7 f8df 	bl	80004d8 <__aeabi_dmul>
 800931a:	a371      	add	r3, pc, #452	; (adr r3, 80094e0 <__ieee754_asin+0x310>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ff22 	bl	8000168 <__aeabi_dsub>
 8009324:	4622      	mov	r2, r4
 8009326:	462b      	mov	r3, r5
 8009328:	f7f7 f8d6 	bl	80004d8 <__aeabi_dmul>
 800932c:	4b70      	ldr	r3, [pc, #448]	; (80094f0 <__ieee754_asin+0x320>)
 800932e:	2200      	movs	r2, #0
 8009330:	f7f6 ff1c 	bl	800016c <__adddf3>
 8009334:	e9cd 0100 	strd	r0, r1, [sp]
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f000 fb34 	bl	80099a8 <__ieee754_sqrt>
 8009340:	4b6d      	ldr	r3, [pc, #436]	; (80094f8 <__ieee754_asin+0x328>)
 8009342:	4682      	mov	sl, r0
 8009344:	429f      	cmp	r7, r3
 8009346:	468b      	mov	fp, r1
 8009348:	f340 80d8 	ble.w	80094fc <__ieee754_asin+0x32c>
 800934c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 f9ea 	bl	800072c <__aeabi_ddiv>
 8009358:	4652      	mov	r2, sl
 800935a:	465b      	mov	r3, fp
 800935c:	f7f7 f8bc 	bl	80004d8 <__aeabi_dmul>
 8009360:	4652      	mov	r2, sl
 8009362:	465b      	mov	r3, fp
 8009364:	f7f6 ff02 	bl	800016c <__adddf3>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	f7f6 fefe 	bl	800016c <__adddf3>
 8009370:	a345      	add	r3, pc, #276	; (adr r3, 8009488 <__ieee754_asin+0x2b8>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 fef7 	bl	8000168 <__aeabi_dsub>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	a140      	add	r1, pc, #256	; (adr r1, 8009480 <__ieee754_asin+0x2b0>)
 8009380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009384:	f7f6 fef0 	bl	8000168 <__aeabi_dsub>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	4604      	mov	r4, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfdc      	itt	le
 8009390:	4602      	movle	r2, r0
 8009392:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009396:	460d      	mov	r5, r1
 8009398:	bfdc      	itt	le
 800939a:	4614      	movle	r4, r2
 800939c:	461d      	movle	r5, r3
 800939e:	e748      	b.n	8009232 <__ieee754_asin+0x62>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	f7f7 f898 	bl	80004d8 <__aeabi_dmul>
 80093a8:	a33b      	add	r3, pc, #236	; (adr r3, 8009498 <__ieee754_asin+0x2c8>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	4606      	mov	r6, r0
 80093b0:	460f      	mov	r7, r1
 80093b2:	f7f7 f891 	bl	80004d8 <__aeabi_dmul>
 80093b6:	a33a      	add	r3, pc, #232	; (adr r3, 80094a0 <__ieee754_asin+0x2d0>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 fed6 	bl	800016c <__adddf3>
 80093c0:	4632      	mov	r2, r6
 80093c2:	463b      	mov	r3, r7
 80093c4:	f7f7 f888 	bl	80004d8 <__aeabi_dmul>
 80093c8:	a337      	add	r3, pc, #220	; (adr r3, 80094a8 <__ieee754_asin+0x2d8>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 fecb 	bl	8000168 <__aeabi_dsub>
 80093d2:	4632      	mov	r2, r6
 80093d4:	463b      	mov	r3, r7
 80093d6:	f7f7 f87f 	bl	80004d8 <__aeabi_dmul>
 80093da:	a335      	add	r3, pc, #212	; (adr r3, 80094b0 <__ieee754_asin+0x2e0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f7f6 fec4 	bl	800016c <__adddf3>
 80093e4:	4632      	mov	r2, r6
 80093e6:	463b      	mov	r3, r7
 80093e8:	f7f7 f876 	bl	80004d8 <__aeabi_dmul>
 80093ec:	a332      	add	r3, pc, #200	; (adr r3, 80094b8 <__ieee754_asin+0x2e8>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7f6 feb9 	bl	8000168 <__aeabi_dsub>
 80093f6:	4632      	mov	r2, r6
 80093f8:	463b      	mov	r3, r7
 80093fa:	f7f7 f86d 	bl	80004d8 <__aeabi_dmul>
 80093fe:	a330      	add	r3, pc, #192	; (adr r3, 80094c0 <__ieee754_asin+0x2f0>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 feb2 	bl	800016c <__adddf3>
 8009408:	4632      	mov	r2, r6
 800940a:	463b      	mov	r3, r7
 800940c:	f7f7 f864 	bl	80004d8 <__aeabi_dmul>
 8009410:	a32d      	add	r3, pc, #180	; (adr r3, 80094c8 <__ieee754_asin+0x2f8>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	4680      	mov	r8, r0
 8009418:	4689      	mov	r9, r1
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 f85b 	bl	80004d8 <__aeabi_dmul>
 8009422:	a32b      	add	r3, pc, #172	; (adr r3, 80094d0 <__ieee754_asin+0x300>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f6 fe9e 	bl	8000168 <__aeabi_dsub>
 800942c:	4632      	mov	r2, r6
 800942e:	463b      	mov	r3, r7
 8009430:	f7f7 f852 	bl	80004d8 <__aeabi_dmul>
 8009434:	a328      	add	r3, pc, #160	; (adr r3, 80094d8 <__ieee754_asin+0x308>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f6 fe97 	bl	800016c <__adddf3>
 800943e:	4632      	mov	r2, r6
 8009440:	463b      	mov	r3, r7
 8009442:	f7f7 f849 	bl	80004d8 <__aeabi_dmul>
 8009446:	a326      	add	r3, pc, #152	; (adr r3, 80094e0 <__ieee754_asin+0x310>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 fe8c 	bl	8000168 <__aeabi_dsub>
 8009450:	4632      	mov	r2, r6
 8009452:	463b      	mov	r3, r7
 8009454:	f7f7 f840 	bl	80004d8 <__aeabi_dmul>
 8009458:	2200      	movs	r2, #0
 800945a:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <__ieee754_asin+0x320>)
 800945c:	f7f6 fe86 	bl	800016c <__adddf3>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	f7f7 f960 	bl	800072c <__aeabi_ddiv>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 f832 	bl	80004d8 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	e6cc      	b.n	8009218 <__ieee754_asin+0x48>
 800947e:	bf00      	nop
 8009480:	54442d18 	.word	0x54442d18
 8009484:	3ff921fb 	.word	0x3ff921fb
 8009488:	33145c07 	.word	0x33145c07
 800948c:	3c91a626 	.word	0x3c91a626
 8009490:	8800759c 	.word	0x8800759c
 8009494:	7e37e43c 	.word	0x7e37e43c
 8009498:	0dfdf709 	.word	0x0dfdf709
 800949c:	3f023de1 	.word	0x3f023de1
 80094a0:	7501b288 	.word	0x7501b288
 80094a4:	3f49efe0 	.word	0x3f49efe0
 80094a8:	b5688f3b 	.word	0xb5688f3b
 80094ac:	3fa48228 	.word	0x3fa48228
 80094b0:	0e884455 	.word	0x0e884455
 80094b4:	3fc9c155 	.word	0x3fc9c155
 80094b8:	03eb6f7d 	.word	0x03eb6f7d
 80094bc:	3fd4d612 	.word	0x3fd4d612
 80094c0:	55555555 	.word	0x55555555
 80094c4:	3fc55555 	.word	0x3fc55555
 80094c8:	b12e9282 	.word	0xb12e9282
 80094cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80094d0:	1b8d0159 	.word	0x1b8d0159
 80094d4:	3fe6066c 	.word	0x3fe6066c
 80094d8:	9c598ac8 	.word	0x9c598ac8
 80094dc:	40002ae5 	.word	0x40002ae5
 80094e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80094e4:	40033a27 	.word	0x40033a27
 80094e8:	3fefffff 	.word	0x3fefffff
 80094ec:	3fdfffff 	.word	0x3fdfffff
 80094f0:	3ff00000 	.word	0x3ff00000
 80094f4:	3fe00000 	.word	0x3fe00000
 80094f8:	3fef3332 	.word	0x3fef3332
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	460f      	mov	r7, r1
 8009502:	f7f6 fe33 	bl	800016c <__adddf3>
 8009506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f7 f90b 	bl	800072c <__aeabi_ddiv>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800951e:	f7f6 ffdb 	bl	80004d8 <__aeabi_dmul>
 8009522:	2600      	movs	r6, #0
 8009524:	4680      	mov	r8, r0
 8009526:	4689      	mov	r9, r1
 8009528:	4632      	mov	r2, r6
 800952a:	465b      	mov	r3, fp
 800952c:	4630      	mov	r0, r6
 800952e:	4659      	mov	r1, fp
 8009530:	f7f6 ffd2 	bl	80004d8 <__aeabi_dmul>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4620      	mov	r0, r4
 800953a:	4629      	mov	r1, r5
 800953c:	f7f6 fe14 	bl	8000168 <__aeabi_dsub>
 8009540:	4632      	mov	r2, r6
 8009542:	4604      	mov	r4, r0
 8009544:	460d      	mov	r5, r1
 8009546:	465b      	mov	r3, fp
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	f7f6 fe0e 	bl	800016c <__adddf3>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4620      	mov	r0, r4
 8009556:	4629      	mov	r1, r5
 8009558:	f7f7 f8e8 	bl	800072c <__aeabi_ddiv>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	f7f6 fe04 	bl	800016c <__adddf3>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	a113      	add	r1, pc, #76	; (adr r1, 80095b8 <__ieee754_asin+0x3e8>)
 800956a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956e:	f7f6 fdfb 	bl	8000168 <__aeabi_dsub>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	f7f6 fdf5 	bl	8000168 <__aeabi_dsub>
 800957e:	4632      	mov	r2, r6
 8009580:	4604      	mov	r4, r0
 8009582:	460d      	mov	r5, r1
 8009584:	465b      	mov	r3, fp
 8009586:	4630      	mov	r0, r6
 8009588:	4639      	mov	r1, r7
 800958a:	f7f6 fdef 	bl	800016c <__adddf3>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	a10b      	add	r1, pc, #44	; (adr r1, 80095c0 <__ieee754_asin+0x3f0>)
 8009594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009598:	f7f6 fde6 	bl	8000168 <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fde0 	bl	8000168 <__aeabi_dsub>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	a104      	add	r1, pc, #16	; (adr r1, 80095c0 <__ieee754_asin+0x3f0>)
 80095ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b2:	e6e7      	b.n	8009384 <__ieee754_asin+0x1b4>
 80095b4:	f3af 8000 	nop.w
 80095b8:	33145c07 	.word	0x33145c07
 80095bc:	3c91a626 	.word	0x3c91a626
 80095c0:	54442d18 	.word	0x54442d18
 80095c4:	3fe921fb 	.word	0x3fe921fb

080095c8 <__ieee754_rem_pio2>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	4614      	mov	r4, r2
 80095ce:	4ac2      	ldr	r2, [pc, #776]	; (80098d8 <__ieee754_rem_pio2+0x310>)
 80095d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80095d4:	4592      	cmp	sl, r2
 80095d6:	b08d      	sub	sp, #52	; 0x34
 80095d8:	468b      	mov	fp, r1
 80095da:	dc07      	bgt.n	80095ec <__ieee754_rem_pio2+0x24>
 80095dc:	2200      	movs	r2, #0
 80095de:	2300      	movs	r3, #0
 80095e0:	e9c4 0100 	strd	r0, r1, [r4]
 80095e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80095e8:	2500      	movs	r5, #0
 80095ea:	e023      	b.n	8009634 <__ieee754_rem_pio2+0x6c>
 80095ec:	4abb      	ldr	r2, [pc, #748]	; (80098dc <__ieee754_rem_pio2+0x314>)
 80095ee:	4592      	cmp	sl, r2
 80095f0:	dc71      	bgt.n	80096d6 <__ieee754_rem_pio2+0x10e>
 80095f2:	a3ab      	add	r3, pc, #684	; (adr r3, 80098a0 <__ieee754_rem_pio2+0x2d8>)
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	2900      	cmp	r1, #0
 80095fa:	4db9      	ldr	r5, [pc, #740]	; (80098e0 <__ieee754_rem_pio2+0x318>)
 80095fc:	dd36      	ble.n	800966c <__ieee754_rem_pio2+0xa4>
 80095fe:	f7f6 fdb3 	bl	8000168 <__aeabi_dsub>
 8009602:	45aa      	cmp	sl, r5
 8009604:	4606      	mov	r6, r0
 8009606:	460f      	mov	r7, r1
 8009608:	d018      	beq.n	800963c <__ieee754_rem_pio2+0x74>
 800960a:	a3a7      	add	r3, pc, #668	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2e0>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f7f6 fdaa 	bl	8000168 <__aeabi_dsub>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4630      	mov	r0, r6
 800961a:	e9c4 2300 	strd	r2, r3, [r4]
 800961e:	4639      	mov	r1, r7
 8009620:	f7f6 fda2 	bl	8000168 <__aeabi_dsub>
 8009624:	a3a0      	add	r3, pc, #640	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2e0>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fd9d 	bl	8000168 <__aeabi_dsub>
 800962e:	2501      	movs	r5, #1
 8009630:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009634:	4628      	mov	r0, r5
 8009636:	b00d      	add	sp, #52	; 0x34
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	a39c      	add	r3, pc, #624	; (adr r3, 80098b0 <__ieee754_rem_pio2+0x2e8>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f6 fd91 	bl	8000168 <__aeabi_dsub>
 8009646:	a39c      	add	r3, pc, #624	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x2f0>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f6 fd8a 	bl	8000168 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	e9c4 2300 	strd	r2, r3, [r4]
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fd82 	bl	8000168 <__aeabi_dsub>
 8009664:	a394      	add	r3, pc, #592	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x2f0>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	e7de      	b.n	800962a <__ieee754_rem_pio2+0x62>
 800966c:	f7f6 fd7e 	bl	800016c <__adddf3>
 8009670:	45aa      	cmp	sl, r5
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	d016      	beq.n	80096a6 <__ieee754_rem_pio2+0xde>
 8009678:	a38b      	add	r3, pc, #556	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2e0>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 fd75 	bl	800016c <__adddf3>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4630      	mov	r0, r6
 8009688:	e9c4 2300 	strd	r2, r3, [r4]
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fd6b 	bl	8000168 <__aeabi_dsub>
 8009692:	a385      	add	r3, pc, #532	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2e0>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fd68 	bl	800016c <__adddf3>
 800969c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80096a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096a4:	e7c6      	b.n	8009634 <__ieee754_rem_pio2+0x6c>
 80096a6:	a382      	add	r3, pc, #520	; (adr r3, 80098b0 <__ieee754_rem_pio2+0x2e8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fd5e 	bl	800016c <__adddf3>
 80096b0:	a381      	add	r3, pc, #516	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x2f0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	f7f6 fd57 	bl	800016c <__adddf3>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4630      	mov	r0, r6
 80096c4:	e9c4 2300 	strd	r2, r3, [r4]
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f6 fd4d 	bl	8000168 <__aeabi_dsub>
 80096ce:	a37a      	add	r3, pc, #488	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x2f0>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	e7e0      	b.n	8009698 <__ieee754_rem_pio2+0xd0>
 80096d6:	4a83      	ldr	r2, [pc, #524]	; (80098e4 <__ieee754_rem_pio2+0x31c>)
 80096d8:	4592      	cmp	sl, r2
 80096da:	f300 80d2 	bgt.w	8009882 <__ieee754_rem_pio2+0x2ba>
 80096de:	f000 fecd 	bl	800a47c <fabs>
 80096e2:	a377      	add	r3, pc, #476	; (adr r3, 80098c0 <__ieee754_rem_pio2+0x2f8>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	4606      	mov	r6, r0
 80096ea:	460f      	mov	r7, r1
 80096ec:	f7f6 fef4 	bl	80004d8 <__aeabi_dmul>
 80096f0:	2200      	movs	r2, #0
 80096f2:	4b7d      	ldr	r3, [pc, #500]	; (80098e8 <__ieee754_rem_pio2+0x320>)
 80096f4:	f7f6 fd3a 	bl	800016c <__adddf3>
 80096f8:	f7f7 f99e 	bl	8000a38 <__aeabi_d2iz>
 80096fc:	4605      	mov	r5, r0
 80096fe:	f7f6 fe81 	bl	8000404 <__aeabi_i2d>
 8009702:	a367      	add	r3, pc, #412	; (adr r3, 80098a0 <__ieee754_rem_pio2+0x2d8>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800970c:	f7f6 fee4 	bl	80004d8 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f6 fd26 	bl	8000168 <__aeabi_dsub>
 800971c:	a362      	add	r3, pc, #392	; (adr r3, 80098a8 <__ieee754_rem_pio2+0x2e0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	2d1f      	cmp	r5, #31
 8009730:	4680      	mov	r8, r0
 8009732:	4689      	mov	r9, r1
 8009734:	dc0e      	bgt.n	8009754 <__ieee754_rem_pio2+0x18c>
 8009736:	4b6d      	ldr	r3, [pc, #436]	; (80098ec <__ieee754_rem_pio2+0x324>)
 8009738:	1e6a      	subs	r2, r5, #1
 800973a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973e:	4553      	cmp	r3, sl
 8009740:	d008      	beq.n	8009754 <__ieee754_rem_pio2+0x18c>
 8009742:	4642      	mov	r2, r8
 8009744:	464b      	mov	r3, r9
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f6 fd0d 	bl	8000168 <__aeabi_dsub>
 800974e:	e9c4 0100 	strd	r0, r1, [r4]
 8009752:	e011      	b.n	8009778 <__ieee754_rem_pio2+0x1b0>
 8009754:	464b      	mov	r3, r9
 8009756:	4642      	mov	r2, r8
 8009758:	4630      	mov	r0, r6
 800975a:	4639      	mov	r1, r7
 800975c:	f7f6 fd04 	bl	8000168 <__aeabi_dsub>
 8009760:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009764:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009768:	ebaa 0303 	sub.w	r3, sl, r3
 800976c:	2b10      	cmp	r3, #16
 800976e:	dc1f      	bgt.n	80097b0 <__ieee754_rem_pio2+0x1e8>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	e9c4 2300 	strd	r2, r3, [r4]
 8009778:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800977c:	4630      	mov	r0, r6
 800977e:	4653      	mov	r3, sl
 8009780:	4639      	mov	r1, r7
 8009782:	f7f6 fcf1 	bl	8000168 <__aeabi_dsub>
 8009786:	4642      	mov	r2, r8
 8009788:	464b      	mov	r3, r9
 800978a:	f7f6 fced 	bl	8000168 <__aeabi_dsub>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	f1bb 0f00 	cmp.w	fp, #0
 8009796:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800979a:	f6bf af4b 	bge.w	8009634 <__ieee754_rem_pio2+0x6c>
 800979e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80097a2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 80097a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80097aa:	60e1      	str	r1, [r4, #12]
 80097ac:	426d      	negs	r5, r5
 80097ae:	e741      	b.n	8009634 <__ieee754_rem_pio2+0x6c>
 80097b0:	a33f      	add	r3, pc, #252	; (adr r3, 80098b0 <__ieee754_rem_pio2+0x2e8>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ba:	f7f6 fe8d 	bl	80004d8 <__aeabi_dmul>
 80097be:	4680      	mov	r8, r0
 80097c0:	4689      	mov	r9, r1
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	f7f6 fccd 	bl	8000168 <__aeabi_dsub>
 80097ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 fcc5 	bl	8000168 <__aeabi_dsub>
 80097de:	4642      	mov	r2, r8
 80097e0:	464b      	mov	r3, r9
 80097e2:	f7f6 fcc1 	bl	8000168 <__aeabi_dsub>
 80097e6:	a334      	add	r3, pc, #208	; (adr r3, 80098b8 <__ieee754_rem_pio2+0x2f0>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4606      	mov	r6, r0
 80097ee:	460f      	mov	r7, r1
 80097f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f4:	f7f6 fe70 	bl	80004d8 <__aeabi_dmul>
 80097f8:	4632      	mov	r2, r6
 80097fa:	463b      	mov	r3, r7
 80097fc:	f7f6 fcb4 	bl	8000168 <__aeabi_dsub>
 8009800:	460b      	mov	r3, r1
 8009802:	4602      	mov	r2, r0
 8009804:	4680      	mov	r8, r0
 8009806:	4689      	mov	r9, r1
 8009808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980c:	f7f6 fcac 	bl	8000168 <__aeabi_dsub>
 8009810:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009814:	ebaa 0a03 	sub.w	sl, sl, r3
 8009818:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800981c:	dc06      	bgt.n	800982c <__ieee754_rem_pio2+0x264>
 800981e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	e9c4 2300 	strd	r2, r3, [r4]
 800982a:	e7a5      	b.n	8009778 <__ieee754_rem_pio2+0x1b0>
 800982c:	a326      	add	r3, pc, #152	; (adr r3, 80098c8 <__ieee754_rem_pio2+0x300>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009836:	f7f6 fe4f 	bl	80004d8 <__aeabi_dmul>
 800983a:	4680      	mov	r8, r0
 800983c:	4689      	mov	r9, r1
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009846:	f7f6 fc8f 	bl	8000168 <__aeabi_dsub>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009856:	f7f6 fc87 	bl	8000168 <__aeabi_dsub>
 800985a:	4642      	mov	r2, r8
 800985c:	464b      	mov	r3, r9
 800985e:	f7f6 fc83 	bl	8000168 <__aeabi_dsub>
 8009862:	a31b      	add	r3, pc, #108	; (adr r3, 80098d0 <__ieee754_rem_pio2+0x308>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4680      	mov	r8, r0
 800986a:	4689      	mov	r9, r1
 800986c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009870:	f7f6 fe32 	bl	80004d8 <__aeabi_dmul>
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	f7f6 fc76 	bl	8000168 <__aeabi_dsub>
 800987c:	4680      	mov	r8, r0
 800987e:	4689      	mov	r9, r1
 8009880:	e75f      	b.n	8009742 <__ieee754_rem_pio2+0x17a>
 8009882:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <__ieee754_rem_pio2+0x328>)
 8009884:	4592      	cmp	sl, r2
 8009886:	dd35      	ble.n	80098f4 <__ieee754_rem_pio2+0x32c>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	f7f6 fc6c 	bl	8000168 <__aeabi_dsub>
 8009890:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009894:	e9c4 0100 	strd	r0, r1, [r4]
 8009898:	e6a6      	b.n	80095e8 <__ieee754_rem_pio2+0x20>
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w
 80098a0:	54400000 	.word	0x54400000
 80098a4:	3ff921fb 	.word	0x3ff921fb
 80098a8:	1a626331 	.word	0x1a626331
 80098ac:	3dd0b461 	.word	0x3dd0b461
 80098b0:	1a600000 	.word	0x1a600000
 80098b4:	3dd0b461 	.word	0x3dd0b461
 80098b8:	2e037073 	.word	0x2e037073
 80098bc:	3ba3198a 	.word	0x3ba3198a
 80098c0:	6dc9c883 	.word	0x6dc9c883
 80098c4:	3fe45f30 	.word	0x3fe45f30
 80098c8:	2e000000 	.word	0x2e000000
 80098cc:	3ba3198a 	.word	0x3ba3198a
 80098d0:	252049c1 	.word	0x252049c1
 80098d4:	397b839a 	.word	0x397b839a
 80098d8:	3fe921fb 	.word	0x3fe921fb
 80098dc:	4002d97b 	.word	0x4002d97b
 80098e0:	3ff921fb 	.word	0x3ff921fb
 80098e4:	413921fb 	.word	0x413921fb
 80098e8:	3fe00000 	.word	0x3fe00000
 80098ec:	0800ab0c 	.word	0x0800ab0c
 80098f0:	7fefffff 	.word	0x7fefffff
 80098f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80098f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80098fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009900:	460f      	mov	r7, r1
 8009902:	4606      	mov	r6, r0
 8009904:	f7f7 f898 	bl	8000a38 <__aeabi_d2iz>
 8009908:	f7f6 fd7c 	bl	8000404 <__aeabi_i2d>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4630      	mov	r0, r6
 8009912:	4639      	mov	r1, r7
 8009914:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009918:	f7f6 fc26 	bl	8000168 <__aeabi_dsub>
 800991c:	2200      	movs	r2, #0
 800991e:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <__ieee754_rem_pio2+0x3d8>)
 8009920:	f7f6 fdda 	bl	80004d8 <__aeabi_dmul>
 8009924:	460f      	mov	r7, r1
 8009926:	4606      	mov	r6, r0
 8009928:	f7f7 f886 	bl	8000a38 <__aeabi_d2iz>
 800992c:	f7f6 fd6a 	bl	8000404 <__aeabi_i2d>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800993c:	f7f6 fc14 	bl	8000168 <__aeabi_dsub>
 8009940:	2200      	movs	r2, #0
 8009942:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <__ieee754_rem_pio2+0x3d8>)
 8009944:	f7f6 fdc8 	bl	80004d8 <__aeabi_dmul>
 8009948:	f04f 0803 	mov.w	r8, #3
 800994c:	2600      	movs	r6, #0
 800994e:	2700      	movs	r7, #0
 8009950:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009954:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009958:	4632      	mov	r2, r6
 800995a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800995e:	463b      	mov	r3, r7
 8009960:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009964:	f7f7 f820 	bl	80009a8 <__aeabi_dcmpeq>
 8009968:	b9b8      	cbnz	r0, 800999a <__ieee754_rem_pio2+0x3d2>
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <__ieee754_rem_pio2+0x3dc>)
 800996c:	462a      	mov	r2, r5
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	2302      	movs	r3, #2
 8009972:	4621      	mov	r1, r4
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	a806      	add	r0, sp, #24
 8009978:	4643      	mov	r3, r8
 800997a:	f000 f97f 	bl	8009c7c <__kernel_rem_pio2>
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	4605      	mov	r5, r0
 8009984:	f6bf ae56 	bge.w	8009634 <__ieee754_rem_pio2+0x6c>
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800998e:	6063      	str	r3, [r4, #4]
 8009990:	68e3      	ldr	r3, [r4, #12]
 8009992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009996:	60e3      	str	r3, [r4, #12]
 8009998:	e708      	b.n	80097ac <__ieee754_rem_pio2+0x1e4>
 800999a:	46d0      	mov	r8, sl
 800999c:	e7dc      	b.n	8009958 <__ieee754_rem_pio2+0x390>
 800999e:	bf00      	nop
 80099a0:	41700000 	.word	0x41700000
 80099a4:	0800ab8c 	.word	0x0800ab8c

080099a8 <__ieee754_sqrt>:
 80099a8:	4b54      	ldr	r3, [pc, #336]	; (8009afc <__ieee754_sqrt+0x154>)
 80099aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ae:	438b      	bics	r3, r1
 80099b0:	4606      	mov	r6, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	460a      	mov	r2, r1
 80099b6:	460c      	mov	r4, r1
 80099b8:	d10f      	bne.n	80099da <__ieee754_sqrt+0x32>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	f7f6 fd8b 	bl	80004d8 <__aeabi_dmul>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4630      	mov	r0, r6
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f6 fbcf 	bl	800016c <__adddf3>
 80099ce:	4606      	mov	r6, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	4630      	mov	r0, r6
 80099d4:	4629      	mov	r1, r5
 80099d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099da:	2900      	cmp	r1, #0
 80099dc:	4607      	mov	r7, r0
 80099de:	4603      	mov	r3, r0
 80099e0:	dc0e      	bgt.n	8009a00 <__ieee754_sqrt+0x58>
 80099e2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80099e6:	ea5c 0707 	orrs.w	r7, ip, r7
 80099ea:	d0f2      	beq.n	80099d2 <__ieee754_sqrt+0x2a>
 80099ec:	b141      	cbz	r1, 8009a00 <__ieee754_sqrt+0x58>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	f7f6 fbb9 	bl	8000168 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	f7f6 fe97 	bl	800072c <__aeabi_ddiv>
 80099fe:	e7e6      	b.n	80099ce <__ieee754_sqrt+0x26>
 8009a00:	1512      	asrs	r2, r2, #20
 8009a02:	d074      	beq.n	8009aee <__ieee754_sqrt+0x146>
 8009a04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009a08:	07d5      	lsls	r5, r2, #31
 8009a0a:	f04f 0500 	mov.w	r5, #0
 8009a0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a12:	bf48      	it	mi
 8009a14:	0fd9      	lsrmi	r1, r3, #31
 8009a16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009a1a:	bf44      	itt	mi
 8009a1c:	005b      	lslmi	r3, r3, #1
 8009a1e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009a22:	1051      	asrs	r1, r2, #1
 8009a24:	0fda      	lsrs	r2, r3, #31
 8009a26:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	2216      	movs	r2, #22
 8009a2e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	1987      	adds	r7, r0, r6
 8009a36:	42a7      	cmp	r7, r4
 8009a38:	bfde      	ittt	le
 8009a3a:	19b8      	addle	r0, r7, r6
 8009a3c:	1be4      	suble	r4, r4, r7
 8009a3e:	19ad      	addle	r5, r5, r6
 8009a40:	0fdf      	lsrs	r7, r3, #31
 8009a42:	3a01      	subs	r2, #1
 8009a44:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a50:	d1f0      	bne.n	8009a34 <__ieee754_sqrt+0x8c>
 8009a52:	f04f 0c20 	mov.w	ip, #32
 8009a56:	4696      	mov	lr, r2
 8009a58:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a5c:	4284      	cmp	r4, r0
 8009a5e:	eb06 070e 	add.w	r7, r6, lr
 8009a62:	dc02      	bgt.n	8009a6a <__ieee754_sqrt+0xc2>
 8009a64:	d112      	bne.n	8009a8c <__ieee754_sqrt+0xe4>
 8009a66:	429f      	cmp	r7, r3
 8009a68:	d810      	bhi.n	8009a8c <__ieee754_sqrt+0xe4>
 8009a6a:	2f00      	cmp	r7, #0
 8009a6c:	eb07 0e06 	add.w	lr, r7, r6
 8009a70:	da42      	bge.n	8009af8 <__ieee754_sqrt+0x150>
 8009a72:	f1be 0f00 	cmp.w	lr, #0
 8009a76:	db3f      	blt.n	8009af8 <__ieee754_sqrt+0x150>
 8009a78:	f100 0801 	add.w	r8, r0, #1
 8009a7c:	1a24      	subs	r4, r4, r0
 8009a7e:	4640      	mov	r0, r8
 8009a80:	429f      	cmp	r7, r3
 8009a82:	bf88      	it	hi
 8009a84:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8009a88:	1bdb      	subs	r3, r3, r7
 8009a8a:	4432      	add	r2, r6
 8009a8c:	0064      	lsls	r4, r4, #1
 8009a8e:	f1bc 0c01 	subs.w	ip, ip, #1
 8009a92:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009a96:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a9e:	d1dd      	bne.n	8009a5c <__ieee754_sqrt+0xb4>
 8009aa0:	4323      	orrs	r3, r4
 8009aa2:	d006      	beq.n	8009ab2 <__ieee754_sqrt+0x10a>
 8009aa4:	1c54      	adds	r4, r2, #1
 8009aa6:	bf0b      	itete	eq
 8009aa8:	4662      	moveq	r2, ip
 8009aaa:	3201      	addne	r2, #1
 8009aac:	3501      	addeq	r5, #1
 8009aae:	f022 0201 	bicne.w	r2, r2, #1
 8009ab2:	106b      	asrs	r3, r5, #1
 8009ab4:	0852      	lsrs	r2, r2, #1
 8009ab6:	07e8      	lsls	r0, r5, #31
 8009ab8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009abc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ac0:	bf48      	it	mi
 8009ac2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009ac6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009aca:	4616      	mov	r6, r2
 8009acc:	e781      	b.n	80099d2 <__ieee754_sqrt+0x2a>
 8009ace:	0adc      	lsrs	r4, r3, #11
 8009ad0:	3915      	subs	r1, #21
 8009ad2:	055b      	lsls	r3, r3, #21
 8009ad4:	2c00      	cmp	r4, #0
 8009ad6:	d0fa      	beq.n	8009ace <__ieee754_sqrt+0x126>
 8009ad8:	02e6      	lsls	r6, r4, #11
 8009ada:	d50a      	bpl.n	8009af2 <__ieee754_sqrt+0x14a>
 8009adc:	f1c2 0020 	rsb	r0, r2, #32
 8009ae0:	fa23 f000 	lsr.w	r0, r3, r0
 8009ae4:	1e55      	subs	r5, r2, #1
 8009ae6:	4093      	lsls	r3, r2
 8009ae8:	4304      	orrs	r4, r0
 8009aea:	1b4a      	subs	r2, r1, r5
 8009aec:	e78a      	b.n	8009a04 <__ieee754_sqrt+0x5c>
 8009aee:	4611      	mov	r1, r2
 8009af0:	e7f0      	b.n	8009ad4 <__ieee754_sqrt+0x12c>
 8009af2:	0064      	lsls	r4, r4, #1
 8009af4:	3201      	adds	r2, #1
 8009af6:	e7ef      	b.n	8009ad8 <__ieee754_sqrt+0x130>
 8009af8:	4680      	mov	r8, r0
 8009afa:	e7bf      	b.n	8009a7c <__ieee754_sqrt+0xd4>
 8009afc:	7ff00000 	.word	0x7ff00000

08009b00 <__kernel_cos>:
 8009b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	e9cd 2300 	strd	r2, r3, [sp]
 8009b14:	da04      	bge.n	8009b20 <__kernel_cos+0x20>
 8009b16:	f7f6 ff8f 	bl	8000a38 <__aeabi_d2iz>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f000 8086 	beq.w	8009c2c <__kernel_cos+0x12c>
 8009b20:	4642      	mov	r2, r8
 8009b22:	463b      	mov	r3, r7
 8009b24:	4640      	mov	r0, r8
 8009b26:	4639      	mov	r1, r7
 8009b28:	f7f6 fcd6 	bl	80004d8 <__aeabi_dmul>
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4b4e      	ldr	r3, [pc, #312]	; (8009c68 <__kernel_cos+0x168>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	f7f6 fcd0 	bl	80004d8 <__aeabi_dmul>
 8009b38:	a33f      	add	r3, pc, #252	; (adr r3, 8009c38 <__kernel_cos+0x138>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	4620      	mov	r0, r4
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fcc7 	bl	80004d8 <__aeabi_dmul>
 8009b4a:	a33d      	add	r3, pc, #244	; (adr r3, 8009c40 <__kernel_cos+0x140>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fb0c 	bl	800016c <__adddf3>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	f7f6 fcbe 	bl	80004d8 <__aeabi_dmul>
 8009b5c:	a33a      	add	r3, pc, #232	; (adr r3, 8009c48 <__kernel_cos+0x148>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fb01 	bl	8000168 <__aeabi_dsub>
 8009b66:	4622      	mov	r2, r4
 8009b68:	462b      	mov	r3, r5
 8009b6a:	f7f6 fcb5 	bl	80004d8 <__aeabi_dmul>
 8009b6e:	a338      	add	r3, pc, #224	; (adr r3, 8009c50 <__kernel_cos+0x150>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fafa 	bl	800016c <__adddf3>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	f7f6 fcac 	bl	80004d8 <__aeabi_dmul>
 8009b80:	a335      	add	r3, pc, #212	; (adr r3, 8009c58 <__kernel_cos+0x158>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 faef 	bl	8000168 <__aeabi_dsub>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	f7f6 fca3 	bl	80004d8 <__aeabi_dmul>
 8009b92:	a333      	add	r3, pc, #204	; (adr r3, 8009c60 <__kernel_cos+0x160>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f7f6 fae8 	bl	800016c <__adddf3>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	462b      	mov	r3, r5
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	460d      	mov	r5, r1
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 fc8e 	bl	80004d8 <__aeabi_dmul>
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7f6 fad0 	bl	8000168 <__aeabi_dsub>
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <__kernel_cos+0x16c>)
 8009bca:	4680      	mov	r8, r0
 8009bcc:	429e      	cmp	r6, r3
 8009bce:	4689      	mov	r9, r1
 8009bd0:	dc0e      	bgt.n	8009bf0 <__kernel_cos+0xf0>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	f7f6 fac5 	bl	8000168 <__aeabi_dsub>
 8009bde:	4602      	mov	r2, r0
 8009be0:	2000      	movs	r0, #0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4922      	ldr	r1, [pc, #136]	; (8009c70 <__kernel_cos+0x170>)
 8009be6:	f7f6 fabf 	bl	8000168 <__aeabi_dsub>
 8009bea:	b003      	add	sp, #12
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	2400      	movs	r4, #0
 8009bf2:	4b20      	ldr	r3, [pc, #128]	; (8009c74 <__kernel_cos+0x174>)
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	429e      	cmp	r6, r3
 8009bf8:	bfcc      	ite	gt
 8009bfa:	4d1f      	ldrgt	r5, [pc, #124]	; (8009c78 <__kernel_cos+0x178>)
 8009bfc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009c00:	462b      	mov	r3, r5
 8009c02:	2000      	movs	r0, #0
 8009c04:	491a      	ldr	r1, [pc, #104]	; (8009c70 <__kernel_cos+0x170>)
 8009c06:	f7f6 faaf 	bl	8000168 <__aeabi_dsub>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	460f      	mov	r7, r1
 8009c10:	462b      	mov	r3, r5
 8009c12:	4650      	mov	r0, sl
 8009c14:	4659      	mov	r1, fp
 8009c16:	f7f6 faa7 	bl	8000168 <__aeabi_dsub>
 8009c1a:	4642      	mov	r2, r8
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	f7f6 faa3 	bl	8000168 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	e7dc      	b.n	8009be6 <__kernel_cos+0xe6>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	4910      	ldr	r1, [pc, #64]	; (8009c70 <__kernel_cos+0x170>)
 8009c30:	e7db      	b.n	8009bea <__kernel_cos+0xea>
 8009c32:	bf00      	nop
 8009c34:	f3af 8000 	nop.w
 8009c38:	be8838d4 	.word	0xbe8838d4
 8009c3c:	bda8fae9 	.word	0xbda8fae9
 8009c40:	bdb4b1c4 	.word	0xbdb4b1c4
 8009c44:	3e21ee9e 	.word	0x3e21ee9e
 8009c48:	809c52ad 	.word	0x809c52ad
 8009c4c:	3e927e4f 	.word	0x3e927e4f
 8009c50:	19cb1590 	.word	0x19cb1590
 8009c54:	3efa01a0 	.word	0x3efa01a0
 8009c58:	16c15177 	.word	0x16c15177
 8009c5c:	3f56c16c 	.word	0x3f56c16c
 8009c60:	5555554c 	.word	0x5555554c
 8009c64:	3fa55555 	.word	0x3fa55555
 8009c68:	3fe00000 	.word	0x3fe00000
 8009c6c:	3fd33332 	.word	0x3fd33332
 8009c70:	3ff00000 	.word	0x3ff00000
 8009c74:	3fe90000 	.word	0x3fe90000
 8009c78:	3fd20000 	.word	0x3fd20000

08009c7c <__kernel_rem_pio2>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009c84:	9307      	str	r3, [sp, #28]
 8009c86:	9104      	str	r1, [sp, #16]
 8009c88:	4bbf      	ldr	r3, [pc, #764]	; (8009f88 <__kernel_rem_pio2+0x30c>)
 8009c8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009c8c:	1ed4      	subs	r4, r2, #3
 8009c8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c92:	2500      	movs	r5, #0
 8009c94:	9302      	str	r3, [sp, #8]
 8009c96:	9b07      	ldr	r3, [sp, #28]
 8009c98:	9008      	str	r0, [sp, #32]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	9306      	str	r3, [sp, #24]
 8009c9e:	2318      	movs	r3, #24
 8009ca0:	fb94 f4f3 	sdiv	r4, r4, r3
 8009ca4:	f06f 0317 	mvn.w	r3, #23
 8009ca8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009cac:	fb04 3303 	mla	r3, r4, r3, r3
 8009cb0:	eb03 0a02 	add.w	sl, r3, r2
 8009cb4:	9a06      	ldr	r2, [sp, #24]
 8009cb6:	9b02      	ldr	r3, [sp, #8]
 8009cb8:	1aa7      	subs	r7, r4, r2
 8009cba:	eb03 0802 	add.w	r8, r3, r2
 8009cbe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	ae1e      	add	r6, sp, #120	; 0x78
 8009cca:	4545      	cmp	r5, r8
 8009ccc:	dd14      	ble.n	8009cf8 <__kernel_rem_pio2+0x7c>
 8009cce:	2600      	movs	r6, #0
 8009cd0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8009cd4:	9b02      	ldr	r3, [sp, #8]
 8009cd6:	429e      	cmp	r6, r3
 8009cd8:	dc39      	bgt.n	8009d4e <__kernel_rem_pio2+0xd2>
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	f04f 0800 	mov.w	r8, #0
 8009ce0:	3b08      	subs	r3, #8
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	9b07      	ldr	r3, [sp, #28]
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	199d      	adds	r5, r3, r6
 8009cec:	ab20      	add	r3, sp, #128	; 0x80
 8009cee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	2700      	movs	r7, #0
 8009cf6:	e023      	b.n	8009d40 <__kernel_rem_pio2+0xc4>
 8009cf8:	42ef      	cmn	r7, r5
 8009cfa:	d40b      	bmi.n	8009d14 <__kernel_rem_pio2+0x98>
 8009cfc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d00:	e9cd 2300 	strd	r2, r3, [sp]
 8009d04:	f7f6 fb7e 	bl	8000404 <__aeabi_i2d>
 8009d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d0c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8009d10:	3501      	adds	r5, #1
 8009d12:	e7da      	b.n	8009cca <__kernel_rem_pio2+0x4e>
 8009d14:	4610      	mov	r0, r2
 8009d16:	4619      	mov	r1, r3
 8009d18:	e7f8      	b.n	8009d0c <__kernel_rem_pio2+0x90>
 8009d1a:	9905      	ldr	r1, [sp, #20]
 8009d1c:	9d00      	ldr	r5, [sp, #0]
 8009d1e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009d22:	9105      	str	r1, [sp, #20]
 8009d24:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8009d28:	9500      	str	r5, [sp, #0]
 8009d2a:	f7f6 fbd5 	bl	80004d8 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4640      	mov	r0, r8
 8009d34:	4649      	mov	r1, r9
 8009d36:	f7f6 fa19 	bl	800016c <__adddf3>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4689      	mov	r9, r1
 8009d3e:	3701      	adds	r7, #1
 8009d40:	9b06      	ldr	r3, [sp, #24]
 8009d42:	429f      	cmp	r7, r3
 8009d44:	dde9      	ble.n	8009d1a <__kernel_rem_pio2+0x9e>
 8009d46:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	e7c2      	b.n	8009cd4 <__kernel_rem_pio2+0x58>
 8009d4e:	9b02      	ldr	r3, [sp, #8]
 8009d50:	aa0c      	add	r2, sp, #48	; 0x30
 8009d52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d58:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009d5a:	9f02      	ldr	r7, [sp, #8]
 8009d5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009d60:	930a      	str	r3, [sp, #40]	; 0x28
 8009d62:	2600      	movs	r6, #0
 8009d64:	ab98      	add	r3, sp, #608	; 0x260
 8009d66:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8009d6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d6e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d72:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009d76:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009d7a:	ab98      	add	r3, sp, #608	; 0x260
 8009d7c:	445b      	add	r3, fp
 8009d7e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8009d82:	1bbb      	subs	r3, r7, r6
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dc71      	bgt.n	8009e6c <__kernel_rem_pio2+0x1f0>
 8009d88:	4652      	mov	r2, sl
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f000 fc07 	bl	800a5a0 <scalbn>
 8009d92:	2200      	movs	r2, #0
 8009d94:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	f7f6 fb9c 	bl	80004d8 <__aeabi_dmul>
 8009da0:	f000 fb72 	bl	800a488 <floor>
 8009da4:	2200      	movs	r2, #0
 8009da6:	4b79      	ldr	r3, [pc, #484]	; (8009f8c <__kernel_rem_pio2+0x310>)
 8009da8:	f7f6 fb96 	bl	80004d8 <__aeabi_dmul>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	460d      	mov	r5, r1
 8009dba:	4604      	mov	r4, r0
 8009dbc:	f7f6 fe3c 	bl	8000a38 <__aeabi_d2iz>
 8009dc0:	9005      	str	r0, [sp, #20]
 8009dc2:	f7f6 fb1f 	bl	8000404 <__aeabi_i2d>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 f9cb 	bl	8000168 <__aeabi_dsub>
 8009dd2:	f1ba 0f00 	cmp.w	sl, #0
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	4689      	mov	r9, r1
 8009dda:	dd6c      	ble.n	8009eb6 <__kernel_rem_pio2+0x23a>
 8009ddc:	1e7a      	subs	r2, r7, #1
 8009dde:	ab0c      	add	r3, sp, #48	; 0x30
 8009de0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009de4:	f1ca 0118 	rsb	r1, sl, #24
 8009de8:	9c05      	ldr	r4, [sp, #20]
 8009dea:	fa40 f301 	asr.w	r3, r0, r1
 8009dee:	441c      	add	r4, r3
 8009df0:	408b      	lsls	r3, r1
 8009df2:	1ac0      	subs	r0, r0, r3
 8009df4:	ab0c      	add	r3, sp, #48	; 0x30
 8009df6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009dfa:	f1ca 0317 	rsb	r3, sl, #23
 8009dfe:	9405      	str	r4, [sp, #20]
 8009e00:	fa40 f303 	asr.w	r3, r0, r3
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	9b00      	ldr	r3, [sp, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dd62      	ble.n	8009ed2 <__kernel_rem_pio2+0x256>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009e12:	4614      	mov	r4, r2
 8009e14:	9b05      	ldr	r3, [sp, #20]
 8009e16:	3301      	adds	r3, #1
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	4297      	cmp	r7, r2
 8009e1c:	f300 809f 	bgt.w	8009f5e <__kernel_rem_pio2+0x2e2>
 8009e20:	f1ba 0f00 	cmp.w	sl, #0
 8009e24:	dd07      	ble.n	8009e36 <__kernel_rem_pio2+0x1ba>
 8009e26:	f1ba 0f01 	cmp.w	sl, #1
 8009e2a:	f000 80bb 	beq.w	8009fa4 <__kernel_rem_pio2+0x328>
 8009e2e:	f1ba 0f02 	cmp.w	sl, #2
 8009e32:	f000 80c1 	beq.w	8009fb8 <__kernel_rem_pio2+0x33c>
 8009e36:	9b00      	ldr	r3, [sp, #0]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d14a      	bne.n	8009ed2 <__kernel_rem_pio2+0x256>
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	2000      	movs	r0, #0
 8009e42:	4953      	ldr	r1, [pc, #332]	; (8009f90 <__kernel_rem_pio2+0x314>)
 8009e44:	f7f6 f990 	bl	8000168 <__aeabi_dsub>
 8009e48:	4680      	mov	r8, r0
 8009e4a:	4689      	mov	r9, r1
 8009e4c:	2c00      	cmp	r4, #0
 8009e4e:	d040      	beq.n	8009ed2 <__kernel_rem_pio2+0x256>
 8009e50:	4652      	mov	r2, sl
 8009e52:	2000      	movs	r0, #0
 8009e54:	494e      	ldr	r1, [pc, #312]	; (8009f90 <__kernel_rem_pio2+0x314>)
 8009e56:	f000 fba3 	bl	800a5a0 <scalbn>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4649      	mov	r1, r9
 8009e62:	f7f6 f981 	bl	8000168 <__aeabi_dsub>
 8009e66:	4680      	mov	r8, r0
 8009e68:	4689      	mov	r9, r1
 8009e6a:	e032      	b.n	8009ed2 <__kernel_rem_pio2+0x256>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4b49      	ldr	r3, [pc, #292]	; (8009f94 <__kernel_rem_pio2+0x318>)
 8009e70:	4640      	mov	r0, r8
 8009e72:	4649      	mov	r1, r9
 8009e74:	f7f6 fb30 	bl	80004d8 <__aeabi_dmul>
 8009e78:	f7f6 fdde 	bl	8000a38 <__aeabi_d2iz>
 8009e7c:	f7f6 fac2 	bl	8000404 <__aeabi_i2d>
 8009e80:	2200      	movs	r2, #0
 8009e82:	4b45      	ldr	r3, [pc, #276]	; (8009f98 <__kernel_rem_pio2+0x31c>)
 8009e84:	e9cd 0100 	strd	r0, r1, [sp]
 8009e88:	f7f6 fb26 	bl	80004d8 <__aeabi_dmul>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4640      	mov	r0, r8
 8009e92:	4649      	mov	r1, r9
 8009e94:	f7f6 f968 	bl	8000168 <__aeabi_dsub>
 8009e98:	f7f6 fdce 	bl	8000a38 <__aeabi_d2iz>
 8009e9c:	ab0c      	add	r3, sp, #48	; 0x30
 8009e9e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009ea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eaa:	f7f6 f95f 	bl	800016c <__adddf3>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	e765      	b.n	8009d82 <__kernel_rem_pio2+0x106>
 8009eb6:	d105      	bne.n	8009ec4 <__kernel_rem_pio2+0x248>
 8009eb8:	1e7b      	subs	r3, r7, #1
 8009eba:	aa0c      	add	r2, sp, #48	; 0x30
 8009ebc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ec0:	15c3      	asrs	r3, r0, #23
 8009ec2:	e79f      	b.n	8009e04 <__kernel_rem_pio2+0x188>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4b35      	ldr	r3, [pc, #212]	; (8009f9c <__kernel_rem_pio2+0x320>)
 8009ec8:	f7f6 fd8c 	bl	80009e4 <__aeabi_dcmpge>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d143      	bne.n	8009f58 <__kernel_rem_pio2+0x2dc>
 8009ed0:	9000      	str	r0, [sp, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f000 80c3 	beq.w	800a06a <__kernel_rem_pio2+0x3ee>
 8009ee4:	1e7c      	subs	r4, r7, #1
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	2200      	movs	r2, #0
 8009eea:	9902      	ldr	r1, [sp, #8]
 8009eec:	428b      	cmp	r3, r1
 8009eee:	da6a      	bge.n	8009fc6 <__kernel_rem_pio2+0x34a>
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	f000 8084 	beq.w	8009ffe <__kernel_rem_pio2+0x382>
 8009ef6:	ab0c      	add	r3, sp, #48	; 0x30
 8009ef8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009efc:	f1aa 0a18 	sub.w	sl, sl, #24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80b0 	beq.w	800a066 <__kernel_rem_pio2+0x3ea>
 8009f06:	4652      	mov	r2, sl
 8009f08:	2000      	movs	r0, #0
 8009f0a:	4921      	ldr	r1, [pc, #132]	; (8009f90 <__kernel_rem_pio2+0x314>)
 8009f0c:	f000 fb48 	bl	800a5a0 <scalbn>
 8009f10:	4625      	mov	r5, r4
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	f04f 0a00 	mov.w	sl, #0
 8009f1a:	00e3      	lsls	r3, r4, #3
 8009f1c:	aa98      	add	r2, sp, #608	; 0x260
 8009f1e:	eb02 0803 	add.w	r8, r2, r3
 8009f22:	f8df b070 	ldr.w	fp, [pc, #112]	; 8009f94 <__kernel_rem_pio2+0x318>
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	f280 80d2 	bge.w	800a0d6 <__kernel_rem_pio2+0x45a>
 8009f32:	2500      	movs	r5, #0
 8009f34:	9a06      	ldr	r2, [sp, #24]
 8009f36:	ab98      	add	r3, sp, #608	; 0x260
 8009f38:	189e      	adds	r6, r3, r2
 8009f3a:	3ea8      	subs	r6, #168	; 0xa8
 8009f3c:	1b63      	subs	r3, r4, r5
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f2c0 80f9 	blt.w	800a136 <__kernel_rem_pio2+0x4ba>
 8009f44:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009fa0 <__kernel_rem_pio2+0x324>
 8009f48:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8009f4c:	f04f 0a00 	mov.w	sl, #0
 8009f50:	f04f 0b00 	mov.w	fp, #0
 8009f54:	2700      	movs	r7, #0
 8009f56:	e0e2      	b.n	800a11e <__kernel_rem_pio2+0x4a2>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	e756      	b.n	8009e0c <__kernel_rem_pio2+0x190>
 8009f5e:	ab0c      	add	r3, sp, #48	; 0x30
 8009f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f64:	b94c      	cbnz	r4, 8009f7a <__kernel_rem_pio2+0x2fe>
 8009f66:	b12b      	cbz	r3, 8009f74 <__kernel_rem_pio2+0x2f8>
 8009f68:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009f6c:	a80c      	add	r0, sp, #48	; 0x30
 8009f6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f72:	2301      	movs	r3, #1
 8009f74:	3201      	adds	r2, #1
 8009f76:	461c      	mov	r4, r3
 8009f78:	e74f      	b.n	8009e1a <__kernel_rem_pio2+0x19e>
 8009f7a:	1acb      	subs	r3, r1, r3
 8009f7c:	a80c      	add	r0, sp, #48	; 0x30
 8009f7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f82:	4623      	mov	r3, r4
 8009f84:	e7f6      	b.n	8009f74 <__kernel_rem_pio2+0x2f8>
 8009f86:	bf00      	nop
 8009f88:	0800acd8 	.word	0x0800acd8
 8009f8c:	40200000 	.word	0x40200000
 8009f90:	3ff00000 	.word	0x3ff00000
 8009f94:	3e700000 	.word	0x3e700000
 8009f98:	41700000 	.word	0x41700000
 8009f9c:	3fe00000 	.word	0x3fe00000
 8009fa0:	0800ac90 	.word	0x0800ac90
 8009fa4:	1e7a      	subs	r2, r7, #1
 8009fa6:	ab0c      	add	r3, sp, #48	; 0x30
 8009fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009fb0:	a90c      	add	r1, sp, #48	; 0x30
 8009fb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009fb6:	e73e      	b.n	8009e36 <__kernel_rem_pio2+0x1ba>
 8009fb8:	1e7a      	subs	r2, r7, #1
 8009fba:	ab0c      	add	r3, sp, #48	; 0x30
 8009fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009fc4:	e7f4      	b.n	8009fb0 <__kernel_rem_pio2+0x334>
 8009fc6:	a90c      	add	r1, sp, #48	; 0x30
 8009fc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	e78b      	b.n	8009eea <__kernel_rem_pio2+0x26e>
 8009fd2:	3401      	adds	r4, #1
 8009fd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d0fa      	beq.n	8009fd2 <__kernel_rem_pio2+0x356>
 8009fdc:	ab98      	add	r3, sp, #608	; 0x260
 8009fde:	449b      	add	fp, r3
 8009fe0:	9b07      	ldr	r3, [sp, #28]
 8009fe2:	1c7e      	adds	r6, r7, #1
 8009fe4:	19dd      	adds	r5, r3, r7
 8009fe6:	ab98      	add	r3, sp, #608	; 0x260
 8009fe8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009fec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8009ff0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8009ff4:	443c      	add	r4, r7
 8009ff6:	42b4      	cmp	r4, r6
 8009ff8:	da04      	bge.n	800a004 <__kernel_rem_pio2+0x388>
 8009ffa:	4627      	mov	r7, r4
 8009ffc:	e6b1      	b.n	8009d62 <__kernel_rem_pio2+0xe6>
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a000:	2401      	movs	r4, #1
 800a002:	e7e7      	b.n	8009fd4 <__kernel_rem_pio2+0x358>
 800a004:	f105 0308 	add.w	r3, r5, #8
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00c:	2700      	movs	r7, #0
 800a00e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a012:	f7f6 f9f7 	bl	8000404 <__aeabi_i2d>
 800a016:	f04f 0800 	mov.w	r8, #0
 800a01a:	f04f 0900 	mov.w	r9, #0
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a024:	3b08      	subs	r3, #8
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	f105 0310 	add.w	r3, r5, #16
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	429f      	cmp	r7, r3
 800a032:	dd04      	ble.n	800a03e <__kernel_rem_pio2+0x3c2>
 800a034:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a038:	3601      	adds	r6, #1
 800a03a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a03c:	e7db      	b.n	8009ff6 <__kernel_rem_pio2+0x37a>
 800a03e:	9905      	ldr	r1, [sp, #20]
 800a040:	9d00      	ldr	r5, [sp, #0]
 800a042:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a046:	9105      	str	r1, [sp, #20]
 800a048:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a04c:	9500      	str	r5, [sp, #0]
 800a04e:	f7f6 fa43 	bl	80004d8 <__aeabi_dmul>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4640      	mov	r0, r8
 800a058:	4649      	mov	r1, r9
 800a05a:	f7f6 f887 	bl	800016c <__adddf3>
 800a05e:	3701      	adds	r7, #1
 800a060:	4680      	mov	r8, r0
 800a062:	4689      	mov	r9, r1
 800a064:	e7e3      	b.n	800a02e <__kernel_rem_pio2+0x3b2>
 800a066:	3c01      	subs	r4, #1
 800a068:	e745      	b.n	8009ef6 <__kernel_rem_pio2+0x27a>
 800a06a:	f1ca 0200 	rsb	r2, sl, #0
 800a06e:	4640      	mov	r0, r8
 800a070:	4649      	mov	r1, r9
 800a072:	f000 fa95 	bl	800a5a0 <scalbn>
 800a076:	2200      	movs	r2, #0
 800a078:	4ba3      	ldr	r3, [pc, #652]	; (800a308 <__kernel_rem_pio2+0x68c>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	f7f6 fcb1 	bl	80009e4 <__aeabi_dcmpge>
 800a082:	b1f8      	cbz	r0, 800a0c4 <__kernel_rem_pio2+0x448>
 800a084:	2200      	movs	r2, #0
 800a086:	4ba1      	ldr	r3, [pc, #644]	; (800a30c <__kernel_rem_pio2+0x690>)
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fa24 	bl	80004d8 <__aeabi_dmul>
 800a090:	f7f6 fcd2 	bl	8000a38 <__aeabi_d2iz>
 800a094:	4606      	mov	r6, r0
 800a096:	f7f6 f9b5 	bl	8000404 <__aeabi_i2d>
 800a09a:	2200      	movs	r2, #0
 800a09c:	4b9a      	ldr	r3, [pc, #616]	; (800a308 <__kernel_rem_pio2+0x68c>)
 800a09e:	f7f6 fa1b 	bl	80004d8 <__aeabi_dmul>
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	f7f6 fcc3 	bl	8000a38 <__aeabi_d2iz>
 800a0b2:	1c7c      	adds	r4, r7, #1
 800a0b4:	ab0c      	add	r3, sp, #48	; 0x30
 800a0b6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a0ba:	f10a 0a18 	add.w	sl, sl, #24
 800a0be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a0c2:	e720      	b.n	8009f06 <__kernel_rem_pio2+0x28a>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f7f6 fcb6 	bl	8000a38 <__aeabi_d2iz>
 800a0cc:	ab0c      	add	r3, sp, #48	; 0x30
 800a0ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a0d2:	463c      	mov	r4, r7
 800a0d4:	e717      	b.n	8009f06 <__kernel_rem_pio2+0x28a>
 800a0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800a0d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0dc:	f7f6 f992 	bl	8000404 <__aeabi_i2d>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a0ee:	465b      	mov	r3, fp
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	3d01      	subs	r5, #1
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	e715      	b.n	8009f2c <__kernel_rem_pio2+0x2b0>
 800a100:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a104:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a108:	f7f6 f9e6 	bl	80004d8 <__aeabi_dmul>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	f7f6 f82a 	bl	800016c <__adddf3>
 800a118:	4682      	mov	sl, r0
 800a11a:	468b      	mov	fp, r1
 800a11c:	3701      	adds	r7, #1
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	429f      	cmp	r7, r3
 800a122:	dc01      	bgt.n	800a128 <__kernel_rem_pio2+0x4ac>
 800a124:	42bd      	cmp	r5, r7
 800a126:	daeb      	bge.n	800a100 <__kernel_rem_pio2+0x484>
 800a128:	ab48      	add	r3, sp, #288	; 0x120
 800a12a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a12e:	e9c3 ab00 	strd	sl, fp, [r3]
 800a132:	3501      	adds	r5, #1
 800a134:	e702      	b.n	8009f3c <__kernel_rem_pio2+0x2c0>
 800a136:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d86c      	bhi.n	800a216 <__kernel_rem_pio2+0x59a>
 800a13c:	e8df f003 	tbb	[pc, r3]
 800a140:	022f2f59 	.word	0x022f2f59
 800a144:	9a06      	ldr	r2, [sp, #24]
 800a146:	ab48      	add	r3, sp, #288	; 0x120
 800a148:	189d      	adds	r5, r3, r2
 800a14a:	46aa      	mov	sl, r5
 800a14c:	46a3      	mov	fp, r4
 800a14e:	f1bb 0f00 	cmp.w	fp, #0
 800a152:	f300 8087 	bgt.w	800a264 <__kernel_rem_pio2+0x5e8>
 800a156:	46a2      	mov	sl, r4
 800a158:	f1ba 0f01 	cmp.w	sl, #1
 800a15c:	f300 809f 	bgt.w	800a29e <__kernel_rem_pio2+0x622>
 800a160:	2700      	movs	r7, #0
 800a162:	463e      	mov	r6, r7
 800a164:	9d06      	ldr	r5, [sp, #24]
 800a166:	ab48      	add	r3, sp, #288	; 0x120
 800a168:	3508      	adds	r5, #8
 800a16a:	441d      	add	r5, r3
 800a16c:	2c01      	cmp	r4, #1
 800a16e:	f300 80b3 	bgt.w	800a2d8 <__kernel_rem_pio2+0x65c>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800a176:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a178:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a17a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 80b5 	bne.w	800a2ec <__kernel_rem_pio2+0x670>
 800a182:	4603      	mov	r3, r0
 800a184:	462a      	mov	r2, r5
 800a186:	9804      	ldr	r0, [sp, #16]
 800a188:	e9c0 2300 	strd	r2, r3, [r0]
 800a18c:	4622      	mov	r2, r4
 800a18e:	460b      	mov	r3, r1
 800a190:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a194:	463a      	mov	r2, r7
 800a196:	4633      	mov	r3, r6
 800a198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a19c:	e03b      	b.n	800a216 <__kernel_rem_pio2+0x59a>
 800a19e:	f04f 0c00 	mov.w	ip, #0
 800a1a2:	4626      	mov	r6, r4
 800a1a4:	4667      	mov	r7, ip
 800a1a6:	9d06      	ldr	r5, [sp, #24]
 800a1a8:	ab48      	add	r3, sp, #288	; 0x120
 800a1aa:	3508      	adds	r5, #8
 800a1ac:	441d      	add	r5, r3
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	da42      	bge.n	800a238 <__kernel_rem_pio2+0x5bc>
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d049      	beq.n	800a24c <__kernel_rem_pio2+0x5d0>
 800a1b8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a1bc:	4662      	mov	r2, ip
 800a1be:	460b      	mov	r3, r1
 800a1c0:	9904      	ldr	r1, [sp, #16]
 800a1c2:	2601      	movs	r6, #1
 800a1c4:	e9c1 2300 	strd	r2, r3, [r1]
 800a1c8:	a948      	add	r1, sp, #288	; 0x120
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d0:	f7f5 ffca 	bl	8000168 <__aeabi_dsub>
 800a1d4:	4684      	mov	ip, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	ad48      	add	r5, sp, #288	; 0x120
 800a1da:	42b4      	cmp	r4, r6
 800a1dc:	da38      	bge.n	800a250 <__kernel_rem_pio2+0x5d4>
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	b10b      	cbz	r3, 800a1e6 <__kernel_rem_pio2+0x56a>
 800a1e2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a1e6:	4662      	mov	r2, ip
 800a1e8:	463b      	mov	r3, r7
 800a1ea:	9904      	ldr	r1, [sp, #16]
 800a1ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a1f0:	e011      	b.n	800a216 <__kernel_rem_pio2+0x59a>
 800a1f2:	2700      	movs	r7, #0
 800a1f4:	463d      	mov	r5, r7
 800a1f6:	9b06      	ldr	r3, [sp, #24]
 800a1f8:	aa98      	add	r2, sp, #608	; 0x260
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800a200:	2c00      	cmp	r4, #0
 800a202:	da0f      	bge.n	800a224 <__kernel_rem_pio2+0x5a8>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	b10b      	cbz	r3, 800a20c <__kernel_rem_pio2+0x590>
 800a208:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a20c:	463a      	mov	r2, r7
 800a20e:	462b      	mov	r3, r5
 800a210:	9904      	ldr	r1, [sp, #16]
 800a212:	e9c1 2300 	strd	r2, r3, [r1]
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	f003 0007 	and.w	r0, r3, #7
 800a21c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	4638      	mov	r0, r7
 800a226:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a22a:	4629      	mov	r1, r5
 800a22c:	f7f5 ff9e 	bl	800016c <__adddf3>
 800a230:	3c01      	subs	r4, #1
 800a232:	4607      	mov	r7, r0
 800a234:	460d      	mov	r5, r1
 800a236:	e7e3      	b.n	800a200 <__kernel_rem_pio2+0x584>
 800a238:	4660      	mov	r0, ip
 800a23a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a23e:	4639      	mov	r1, r7
 800a240:	f7f5 ff94 	bl	800016c <__adddf3>
 800a244:	3e01      	subs	r6, #1
 800a246:	4684      	mov	ip, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	e7b0      	b.n	800a1ae <__kernel_rem_pio2+0x532>
 800a24c:	4639      	mov	r1, r7
 800a24e:	e7b5      	b.n	800a1bc <__kernel_rem_pio2+0x540>
 800a250:	4660      	mov	r0, ip
 800a252:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a256:	4639      	mov	r1, r7
 800a258:	f7f5 ff88 	bl	800016c <__adddf3>
 800a25c:	3601      	adds	r6, #1
 800a25e:	4684      	mov	ip, r0
 800a260:	460f      	mov	r7, r1
 800a262:	e7ba      	b.n	800a1da <__kernel_rem_pio2+0x55e>
 800a264:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800a268:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a274:	f7f5 ff7a 	bl	800016c <__adddf3>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4606      	mov	r6, r0
 800a27e:	460f      	mov	r7, r1
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f5 ff70 	bl	8000168 <__aeabi_dsub>
 800a288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28c:	f7f5 ff6e 	bl	800016c <__adddf3>
 800a290:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a294:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a298:	e9ca 6700 	strd	r6, r7, [sl]
 800a29c:	e757      	b.n	800a14e <__kernel_rem_pio2+0x4d2>
 800a29e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800a2a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2ae:	f7f5 ff5d 	bl	800016c <__adddf3>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	4689      	mov	r9, r1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 ff53 	bl	8000168 <__aeabi_dsub>
 800a2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2c6:	f7f5 ff51 	bl	800016c <__adddf3>
 800a2ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a2ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a2d2:	e9c5 8900 	strd	r8, r9, [r5]
 800a2d6:	e73f      	b.n	800a158 <__kernel_rem_pio2+0x4dc>
 800a2d8:	4638      	mov	r0, r7
 800a2da:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a2de:	4631      	mov	r1, r6
 800a2e0:	f7f5 ff44 	bl	800016c <__adddf3>
 800a2e4:	3c01      	subs	r4, #1
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	460e      	mov	r6, r1
 800a2ea:	e73f      	b.n	800a16c <__kernel_rem_pio2+0x4f0>
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a2f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a2f6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a2fa:	601d      	str	r5, [r3, #0]
 800a2fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a300:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a304:	615e      	str	r6, [r3, #20]
 800a306:	e786      	b.n	800a216 <__kernel_rem_pio2+0x59a>
 800a308:	41700000 	.word	0x41700000
 800a30c:	3e700000 	.word	0x3e700000

0800a310 <__kernel_sin>:
 800a310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a314:	b086      	sub	sp, #24
 800a316:	e9cd 2300 	strd	r2, r3, [sp]
 800a31a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a31e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a322:	4682      	mov	sl, r0
 800a324:	460c      	mov	r4, r1
 800a326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a328:	da03      	bge.n	800a332 <__kernel_sin+0x22>
 800a32a:	f7f6 fb85 	bl	8000a38 <__aeabi_d2iz>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d050      	beq.n	800a3d4 <__kernel_sin+0xc4>
 800a332:	4652      	mov	r2, sl
 800a334:	4623      	mov	r3, r4
 800a336:	4650      	mov	r0, sl
 800a338:	4621      	mov	r1, r4
 800a33a:	f7f6 f8cd 	bl	80004d8 <__aeabi_dmul>
 800a33e:	4606      	mov	r6, r0
 800a340:	460f      	mov	r7, r1
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4650      	mov	r0, sl
 800a348:	4621      	mov	r1, r4
 800a34a:	f7f6 f8c5 	bl	80004d8 <__aeabi_dmul>
 800a34e:	a33e      	add	r3, pc, #248	; (adr r3, 800a448 <__kernel_sin+0x138>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4680      	mov	r8, r0
 800a356:	4689      	mov	r9, r1
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 f8bc 	bl	80004d8 <__aeabi_dmul>
 800a360:	a33b      	add	r3, pc, #236	; (adr r3, 800a450 <__kernel_sin+0x140>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 feff 	bl	8000168 <__aeabi_dsub>
 800a36a:	4632      	mov	r2, r6
 800a36c:	463b      	mov	r3, r7
 800a36e:	f7f6 f8b3 	bl	80004d8 <__aeabi_dmul>
 800a372:	a339      	add	r3, pc, #228	; (adr r3, 800a458 <__kernel_sin+0x148>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 fef8 	bl	800016c <__adddf3>
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	f7f6 f8aa 	bl	80004d8 <__aeabi_dmul>
 800a384:	a336      	add	r3, pc, #216	; (adr r3, 800a460 <__kernel_sin+0x150>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 feed 	bl	8000168 <__aeabi_dsub>
 800a38e:	4632      	mov	r2, r6
 800a390:	463b      	mov	r3, r7
 800a392:	f7f6 f8a1 	bl	80004d8 <__aeabi_dmul>
 800a396:	a334      	add	r3, pc, #208	; (adr r3, 800a468 <__kernel_sin+0x158>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 fee6 	bl	800016c <__adddf3>
 800a3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a4:	b9dd      	cbnz	r5, 800a3de <__kernel_sin+0xce>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f6 f893 	bl	80004d8 <__aeabi_dmul>
 800a3b2:	a32f      	add	r3, pc, #188	; (adr r3, 800a470 <__kernel_sin+0x160>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f5 fed6 	bl	8000168 <__aeabi_dsub>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	f7f6 f88a 	bl	80004d8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	f7f5 fece 	bl	800016c <__adddf3>
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	b006      	add	sp, #24
 800a3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3de:	2200      	movs	r2, #0
 800a3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3e4:	4b24      	ldr	r3, [pc, #144]	; (800a478 <__kernel_sin+0x168>)
 800a3e6:	f7f6 f877 	bl	80004d8 <__aeabi_dmul>
 800a3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f6 f86f 	bl	80004d8 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a402:	f7f5 feb1 	bl	8000168 <__aeabi_dsub>
 800a406:	4632      	mov	r2, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	f7f6 f865 	bl	80004d8 <__aeabi_dmul>
 800a40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a412:	f7f5 fea9 	bl	8000168 <__aeabi_dsub>
 800a416:	a316      	add	r3, pc, #88	; (adr r3, 800a470 <__kernel_sin+0x160>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 f858 	bl	80004d8 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4630      	mov	r0, r6
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f5 fe9c 	bl	800016c <__adddf3>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4650      	mov	r0, sl
 800a43a:	4621      	mov	r1, r4
 800a43c:	f7f5 fe94 	bl	8000168 <__aeabi_dsub>
 800a440:	e7c6      	b.n	800a3d0 <__kernel_sin+0xc0>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	5acfd57c 	.word	0x5acfd57c
 800a44c:	3de5d93a 	.word	0x3de5d93a
 800a450:	8a2b9ceb 	.word	0x8a2b9ceb
 800a454:	3e5ae5e6 	.word	0x3e5ae5e6
 800a458:	57b1fe7d 	.word	0x57b1fe7d
 800a45c:	3ec71de3 	.word	0x3ec71de3
 800a460:	19c161d5 	.word	0x19c161d5
 800a464:	3f2a01a0 	.word	0x3f2a01a0
 800a468:	1110f8a6 	.word	0x1110f8a6
 800a46c:	3f811111 	.word	0x3f811111
 800a470:	55555549 	.word	0x55555549
 800a474:	3fc55555 	.word	0x3fc55555
 800a478:	3fe00000 	.word	0x3fe00000

0800a47c <fabs>:
 800a47c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a480:	4619      	mov	r1, r3
 800a482:	4770      	bx	lr
 800a484:	0000      	movs	r0, r0
	...

0800a488 <floor>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a490:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a494:	2e13      	cmp	r6, #19
 800a496:	4607      	mov	r7, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	460c      	mov	r4, r1
 800a49c:	4605      	mov	r5, r0
 800a49e:	dc35      	bgt.n	800a50c <floor+0x84>
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	da16      	bge.n	800a4d2 <floor+0x4a>
 800a4a4:	a336      	add	r3, pc, #216	; (adr r3, 800a580 <floor+0xf8>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 fe5f 	bl	800016c <__adddf3>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f7f6 faa1 	bl	80009f8 <__aeabi_dcmpgt>
 800a4b6:	b148      	cbz	r0, 800a4cc <floor+0x44>
 800a4b8:	2c00      	cmp	r4, #0
 800a4ba:	da5b      	bge.n	800a574 <floor+0xec>
 800a4bc:	2500      	movs	r5, #0
 800a4be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4c2:	4a31      	ldr	r2, [pc, #196]	; (800a588 <floor+0x100>)
 800a4c4:	433b      	orrs	r3, r7
 800a4c6:	42ab      	cmp	r3, r5
 800a4c8:	bf18      	it	ne
 800a4ca:	4614      	movne	r4, r2
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	462f      	mov	r7, r5
 800a4d0:	e026      	b.n	800a520 <floor+0x98>
 800a4d2:	4a2e      	ldr	r2, [pc, #184]	; (800a58c <floor+0x104>)
 800a4d4:	fa42 f806 	asr.w	r8, r2, r6
 800a4d8:	ea01 0208 	and.w	r2, r1, r8
 800a4dc:	4302      	orrs	r2, r0
 800a4de:	d01f      	beq.n	800a520 <floor+0x98>
 800a4e0:	a327      	add	r3, pc, #156	; (adr r3, 800a580 <floor+0xf8>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f5 fe41 	bl	800016c <__adddf3>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f7f6 fa83 	bl	80009f8 <__aeabi_dcmpgt>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0ea      	beq.n	800a4cc <floor+0x44>
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	bfbe      	ittt	lt
 800a4fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800a502:	19a4      	addlt	r4, r4, r6
 800a504:	ea24 0408 	bic.w	r4, r4, r8
 800a508:	2500      	movs	r5, #0
 800a50a:	e7df      	b.n	800a4cc <floor+0x44>
 800a50c:	2e33      	cmp	r6, #51	; 0x33
 800a50e:	dd0b      	ble.n	800a528 <floor+0xa0>
 800a510:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a514:	d104      	bne.n	800a520 <floor+0x98>
 800a516:	4602      	mov	r2, r0
 800a518:	f7f5 fe28 	bl	800016c <__adddf3>
 800a51c:	4607      	mov	r7, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4638      	mov	r0, r7
 800a522:	4619      	mov	r1, r3
 800a524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a530:	fa22 f808 	lsr.w	r8, r2, r8
 800a534:	ea18 0f00 	tst.w	r8, r0
 800a538:	d0f2      	beq.n	800a520 <floor+0x98>
 800a53a:	a311      	add	r3, pc, #68	; (adr r3, 800a580 <floor+0xf8>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f5 fe14 	bl	800016c <__adddf3>
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	f7f6 fa56 	bl	80009f8 <__aeabi_dcmpgt>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d0bd      	beq.n	800a4cc <floor+0x44>
 800a550:	2c00      	cmp	r4, #0
 800a552:	da02      	bge.n	800a55a <floor+0xd2>
 800a554:	2e14      	cmp	r6, #20
 800a556:	d103      	bne.n	800a560 <floor+0xd8>
 800a558:	3401      	adds	r4, #1
 800a55a:	ea25 0508 	bic.w	r5, r5, r8
 800a55e:	e7b5      	b.n	800a4cc <floor+0x44>
 800a560:	2301      	movs	r3, #1
 800a562:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a566:	fa03 f606 	lsl.w	r6, r3, r6
 800a56a:	4435      	add	r5, r6
 800a56c:	42bd      	cmp	r5, r7
 800a56e:	bf38      	it	cc
 800a570:	18e4      	addcc	r4, r4, r3
 800a572:	e7f2      	b.n	800a55a <floor+0xd2>
 800a574:	2500      	movs	r5, #0
 800a576:	462c      	mov	r4, r5
 800a578:	e7a8      	b.n	800a4cc <floor+0x44>
 800a57a:	bf00      	nop
 800a57c:	f3af 8000 	nop.w
 800a580:	8800759c 	.word	0x8800759c
 800a584:	7e37e43c 	.word	0x7e37e43c
 800a588:	bff00000 	.word	0xbff00000
 800a58c:	000fffff 	.word	0x000fffff

0800a590 <matherr>:
 800a590:	2000      	movs	r0, #0
 800a592:	4770      	bx	lr

0800a594 <nan>:
 800a594:	2000      	movs	r0, #0
 800a596:	4901      	ldr	r1, [pc, #4]	; (800a59c <nan+0x8>)
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	7ff80000 	.word	0x7ff80000

0800a5a0 <scalbn>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	4616      	mov	r6, r2
 800a5a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	b982      	cbnz	r2, 800a5d2 <scalbn+0x32>
 800a5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5b4:	4303      	orrs	r3, r0
 800a5b6:	d034      	beq.n	800a622 <scalbn+0x82>
 800a5b8:	4b2d      	ldr	r3, [pc, #180]	; (800a670 <scalbn+0xd0>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7f5 ff8c 	bl	80004d8 <__aeabi_dmul>
 800a5c0:	4b2c      	ldr	r3, [pc, #176]	; (800a674 <scalbn+0xd4>)
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	429e      	cmp	r6, r3
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	da0d      	bge.n	800a5e6 <scalbn+0x46>
 800a5ca:	a325      	add	r3, pc, #148	; (adr r3, 800a660 <scalbn+0xc0>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	e01c      	b.n	800a60c <scalbn+0x6c>
 800a5d2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a5d6:	42ba      	cmp	r2, r7
 800a5d8:	d109      	bne.n	800a5ee <scalbn+0x4e>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	e01d      	b.n	800a622 <scalbn+0x82>
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5ec:	3a36      	subs	r2, #54	; 0x36
 800a5ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a5f2:	4432      	add	r2, r6
 800a5f4:	428a      	cmp	r2, r1
 800a5f6:	dd0c      	ble.n	800a612 <scalbn+0x72>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	a11a      	add	r1, pc, #104	; (adr r1, 800a668 <scalbn+0xc8>)
 800a5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a602:	f000 f83b 	bl	800a67c <copysign>
 800a606:	a318      	add	r3, pc, #96	; (adr r3, 800a668 <scalbn+0xc8>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 ff64 	bl	80004d8 <__aeabi_dmul>
 800a610:	e7e6      	b.n	800a5e0 <scalbn+0x40>
 800a612:	2a00      	cmp	r2, #0
 800a614:	dd08      	ble.n	800a628 <scalbn+0x88>
 800a616:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a61a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a61e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a622:	4620      	mov	r0, r4
 800a624:	4629      	mov	r1, r5
 800a626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a628:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a62c:	da0b      	bge.n	800a646 <scalbn+0xa6>
 800a62e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a632:	429e      	cmp	r6, r3
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	dce0      	bgt.n	800a5fc <scalbn+0x5c>
 800a63a:	a109      	add	r1, pc, #36	; (adr r1, 800a660 <scalbn+0xc0>)
 800a63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a640:	f000 f81c 	bl	800a67c <copysign>
 800a644:	e7c1      	b.n	800a5ca <scalbn+0x2a>
 800a646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a64a:	3236      	adds	r2, #54	; 0x36
 800a64c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a650:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	2200      	movs	r2, #0
 800a65a:	4b07      	ldr	r3, [pc, #28]	; (800a678 <scalbn+0xd8>)
 800a65c:	e7d6      	b.n	800a60c <scalbn+0x6c>
 800a65e:	bf00      	nop
 800a660:	c2f8f359 	.word	0xc2f8f359
 800a664:	01a56e1f 	.word	0x01a56e1f
 800a668:	8800759c 	.word	0x8800759c
 800a66c:	7e37e43c 	.word	0x7e37e43c
 800a670:	43500000 	.word	0x43500000
 800a674:	ffff3cb0 	.word	0xffff3cb0
 800a678:	3c900000 	.word	0x3c900000

0800a67c <copysign>:
 800a67c:	b530      	push	{r4, r5, lr}
 800a67e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a686:	ea42 0503 	orr.w	r5, r2, r3
 800a68a:	4629      	mov	r1, r5
 800a68c:	bd30      	pop	{r4, r5, pc}
	...

0800a690 <_init>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr

0800a69c <_fini>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr
