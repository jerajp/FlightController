
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800ad20  0800ad20  0001ad20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f8  0800b2f8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2f8  0800b2f8  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2f8  0800b2f8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000020c  0800b50c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  0800b50c  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d65  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002856  00000000  00000000  00033f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  000367f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165d1  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9de  00000000  00000000  0004f259  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d887  00000000  00000000  0005cc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da4be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  000da53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad08 	.word	0x0800ad08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800ad08 	.word	0x0800ad08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	2275      	movs	r2, #117	; 0x75
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f003 fe22 	bl	8004d78 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b68      	cmp	r3, #104	; 0x68
 8001138:	d101      	bne.n	800113e <MPU6050_check+0x2e>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 800113e:	2300      	movs	r3, #0

}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	226b      	movs	r2, #107	; 0x6b
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f003 fd0a 	bl	8004b84 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8001170:	2307      	movs	r3, #7
 8001172:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 030f 	add.w	r3, r7, #15
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2219      	movs	r2, #25
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f003 fcfa 	bl	8004b84 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001190:	2308      	movs	r3, #8
 8001192:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221b      	movs	r2, #27
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f003 fcea 	bl	8004b84 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 80011b0:	2310      	movs	r3, #16
 80011b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030f 	add.w	r3, r7, #15
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	221c      	movs	r2, #28
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f003 fcda 	bl	8004b84 <HAL_I2C_Mem_Write>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2306      	movs	r3, #6
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	223b      	movs	r2, #59	; 0x3b
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f003 fdbd 	bl	8004d78 <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7a7b      	ldrb	r3, [r7, #9]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001210:	7abb      	ldrb	r3, [r7, #10]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	809a      	strh	r2, [r3, #4]

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2243      	movs	r2, #67	; 0x43
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 fd8b 	bl	8004d78 <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001262:	7a3b      	ldrb	r3, [r7, #8]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	815a      	strh	r2, [r3, #10]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b598      	push	{r3, r4, r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <main+0x114>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a42      	ldr	r2, [pc, #264]	; (800141c <main+0x114>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <main+0x118>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <main+0x118>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <main+0x118>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f002 fb3b 	bl	80039a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 fae1 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fd19 	bl	8001d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001336:	f000 fb39 	bl	80019ac <MX_ADC1_Init>
  MX_I2C2_Init();
 800133a:	f000 fb75 	bl	8001a28 <MX_I2C2_Init>
  MX_SPI2_Init();
 800133e:	f000 fba1 	bl	8001a84 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001342:	f000 fbd5 	bl	8001af0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fce5 	bl	8001d14 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800134a:	f000 fc97 	bl	8001c7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 800134e:	4835      	ldr	r0, [pc, #212]	; (8001424 <main+0x11c>)
 8001350:	f002 ffbc 	bl	80042cc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001354:	4833      	ldr	r0, [pc, #204]	; (8001424 <main+0x11c>)
 8001356:	f002 fc81 	bl	8003c5c <HAL_ADC_Start>

  HAL_Delay(400);//wait for stable power
 800135a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800135e:	f002 fb83 	bl	8003a68 <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8001362:	4831      	ldr	r0, [pc, #196]	; (8001428 <main+0x120>)
 8001364:	f7ff fed4 	bl	8001110 <MPU6050_check>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <main+0x124>)
 800136e:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 8001370:	482d      	ldr	r0, [pc, #180]	; (8001428 <main+0x120>)
 8001372:	f7ff fee9 	bl	8001148 <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 8001376:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800137a:	f002 fb75 	bl	8003a68 <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <main+0x128>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <main+0x128>)
 8001384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001388:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001390:	4828      	ldr	r0, [pc, #160]	; (8001434 <main+0x12c>)
 8001392:	f003 fa9f 	bl	80048d4 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8001396:	f000 ff15 	bl	80021c4 <nRF24_Check>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <main+0x130>)
 80013a0:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80013a2:	f000 febd 	bl	8002120 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80013a6:	20ff      	movs	r0, #255	; 0xff
 80013a8:	f001 f89e 	bl	80024e8 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80013ac:	200f      	movs	r0, #15
 80013ae:	f000 ff98 	bl	80022e2 <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80013b2:	2020      	movs	r0, #32
 80013b4:	f001 f829 	bl	800240a <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80013b8:	2008      	movs	r0, #8
 80013ba:	f000 ff71 	bl	80022a0 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 ff9d 	bl	80022fe <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80013c4:	491d      	ldr	r1, [pc, #116]	; (800143c <main+0x134>)
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 ffaa 	bl	8002320 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 80013cc:	2207      	movs	r2, #7
 80013ce:	2100      	movs	r1, #0
 80013d0:	2001      	movs	r0, #1
 80013d2:	f001 f835 	bl	8002440 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80013d6:	4919      	ldr	r1, [pc, #100]	; (800143c <main+0x134>)
 80013d8:	2006      	movs	r0, #6
 80013da:	f000 ffa1 	bl	8002320 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 80013de:	2004      	movs	r0, #4
 80013e0:	f000 fff8 	bl	80023d4 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f000 ff3a 	bl	800225e <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80013ea:	f001 f8c7 	bl	800257c <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 ff16 	bl	8002220 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <main+0x12c>)
 80013fc:	f003 fa6a 	bl	80048d4 <HAL_GPIO_WritePin>

  //get GYRO offset
  SUMGyroX=0;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <main+0x138>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <main+0x13c>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <main+0x140>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
  for(i=0;i<1000;i++)
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <main+0x144>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e046      	b.n	80014a8 <main+0x1a0>
 800141a:	bf00      	nop
 800141c:	e000edf0 	.word	0xe000edf0
 8001420:	e0001000 	.word	0xe0001000
 8001424:	20000418 	.word	0x20000418
 8001428:	200002fc 	.word	0x200002fc
 800142c:	2000048e 	.word	0x2000048e
 8001430:	40003800 	.word	0x40003800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	20000380 	.word	0x20000380
 800143c:	0800ae84 	.word	0x0800ae84
 8001440:	20000564 	.word	0x20000564
 8001444:	2000049c 	.word	0x2000049c
 8001448:	200003f4 	.word	0x200003f4
 800144c:	2000022c 	.word	0x2000022c
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8001450:	49b1      	ldr	r1, [pc, #708]	; (8001718 <main+0x410>)
 8001452:	48b2      	ldr	r0, [pc, #712]	; (800171c <main+0x414>)
 8001454:	f7ff fef2 	bl	800123c <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001458:	4baf      	ldr	r3, [pc, #700]	; (8001718 <main+0x410>)
 800145a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800145e:	461a      	mov	r2, r3
 8001460:	4baf      	ldr	r3, [pc, #700]	; (8001720 <main+0x418>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4413      	add	r3, r2
 8001466:	4aae      	ldr	r2, [pc, #696]	; (8001720 <main+0x418>)
 8001468:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 800146a:	4bab      	ldr	r3, [pc, #684]	; (8001718 <main+0x410>)
 800146c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001470:	461a      	mov	r2, r3
 8001472:	4bac      	ldr	r3, [pc, #688]	; (8001724 <main+0x41c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4aaa      	ldr	r2, [pc, #680]	; (8001724 <main+0x41c>)
 800147a:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 800147c:	4ba6      	ldr	r3, [pc, #664]	; (8001718 <main+0x410>)
 800147e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001482:	461a      	mov	r2, r3
 8001484:	4ba8      	ldr	r3, [pc, #672]	; (8001728 <main+0x420>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4aa7      	ldr	r2, [pc, #668]	; (8001728 <main+0x420>)
 800148c:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f002 faea 	bl	8003a68 <HAL_Delay>
	  watch2++;
 8001494:	4ba5      	ldr	r3, [pc, #660]	; (800172c <main+0x424>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4aa4      	ldr	r2, [pc, #656]	; (800172c <main+0x424>)
 800149c:	6013      	str	r3, [r2, #0]
  for(i=0;i<1000;i++)
 800149e:	4ba4      	ldr	r3, [pc, #656]	; (8001730 <main+0x428>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4aa2      	ldr	r2, [pc, #648]	; (8001730 <main+0x428>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4ba1      	ldr	r3, [pc, #644]	; (8001730 <main+0x428>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b0:	d3ce      	bcc.n	8001450 <main+0x148>
  }
  GyroXOff=SUMGyroX/1000;
 80014b2:	4b9b      	ldr	r3, [pc, #620]	; (8001720 <main+0x418>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a9f      	ldr	r2, [pc, #636]	; (8001734 <main+0x42c>)
 80014b8:	fb82 1203 	smull	r1, r2, r2, r3
 80014bc:	1192      	asrs	r2, r2, #6
 80014be:	17db      	asrs	r3, r3, #31
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b9c      	ldr	r3, [pc, #624]	; (8001738 <main+0x430>)
 80014c6:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/1000;
 80014c8:	4b96      	ldr	r3, [pc, #600]	; (8001724 <main+0x41c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a99      	ldr	r2, [pc, #612]	; (8001734 <main+0x42c>)
 80014ce:	fb82 1203 	smull	r1, r2, r2, r3
 80014d2:	1192      	asrs	r2, r2, #6
 80014d4:	17db      	asrs	r3, r3, #31
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b21a      	sxth	r2, r3
 80014da:	4b98      	ldr	r3, [pc, #608]	; (800173c <main+0x434>)
 80014dc:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/1000;
 80014de:	4b92      	ldr	r3, [pc, #584]	; (8001728 <main+0x420>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a94      	ldr	r2, [pc, #592]	; (8001734 <main+0x42c>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1192      	asrs	r2, r2, #6
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b93      	ldr	r3, [pc, #588]	; (8001740 <main+0x438>)
 80014f2:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4893      	ldr	r0, [pc, #588]	; (8001744 <main+0x43c>)
 80014f8:	f005 f81c 	bl	8006534 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014fc:	2104      	movs	r1, #4
 80014fe:	4891      	ldr	r0, [pc, #580]	; (8001744 <main+0x43c>)
 8001500:	f005 f818 	bl	8006534 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001504:	2108      	movs	r1, #8
 8001506:	488f      	ldr	r0, [pc, #572]	; (8001744 <main+0x43c>)
 8001508:	f005 f814 	bl	8006534 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800150c:	210c      	movs	r1, #12
 800150e:	488d      	ldr	r0, [pc, #564]	; (8001744 <main+0x43c>)
 8001510:	f005 f810 	bl	8006534 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001514:	488c      	ldr	r0, [pc, #560]	; (8001748 <main+0x440>)
 8001516:	f004 ffb5 	bl	8006484 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 800151a:	2032      	movs	r0, #50	; 0x32
 800151c:	f002 faa4 	bl	8003a68 <HAL_Delay>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8001520:	4b8a      	ldr	r3, [pc, #552]	; (800174c <main+0x444>)
 8001522:	4a8b      	ldr	r2, [pc, #556]	; (8001750 <main+0x448>)
 8001524:	6810      	ldr	r0, [r2, #0]
 8001526:	6018      	str	r0, [r3, #0]
 8001528:	7912      	ldrb	r2, [r2, #4]
 800152a:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800152c:	4887      	ldr	r0, [pc, #540]	; (800174c <main+0x444>)
 800152e:	f7fe fe0f 	bl	8000150 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	2301      	movs	r3, #1
 8001538:	4984      	ldr	r1, [pc, #528]	; (800174c <main+0x444>)
 800153a:	4886      	ldr	r0, [pc, #536]	; (8001754 <main+0x44c>)
 800153c:	f005 fe76 	bl	800722c <HAL_UART_Transmit>
	 // HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 8001540:	4b85      	ldr	r3, [pc, #532]	; (8001758 <main+0x450>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4985      	ldr	r1, [pc, #532]	; (800175c <main+0x454>)
 8001548:	4880      	ldr	r0, [pc, #512]	; (800174c <main+0x444>)
 800154a:	f006 fcaf 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800154e:	487f      	ldr	r0, [pc, #508]	; (800174c <main+0x444>)
 8001550:	f7fe fdfe 	bl	8000150 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	2301      	movs	r3, #1
 800155a:	497c      	ldr	r1, [pc, #496]	; (800174c <main+0x444>)
 800155c:	487d      	ldr	r0, [pc, #500]	; (8001754 <main+0x44c>)
 800155e:	f005 fe65 	bl	800722c <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <main+0x458>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff5e 	bl	8000428 <__aeabi_f2d>
 800156c:	4603      	mov	r3, r0
 800156e:	460c      	mov	r4, r1
 8001570:	461a      	mov	r2, r3
 8001572:	4623      	mov	r3, r4
 8001574:	497b      	ldr	r1, [pc, #492]	; (8001764 <main+0x45c>)
 8001576:	4875      	ldr	r0, [pc, #468]	; (800174c <main+0x444>)
 8001578:	f006 fc98 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800157c:	4873      	ldr	r0, [pc, #460]	; (800174c <main+0x444>)
 800157e:	f7fe fde7 	bl	8000150 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	2301      	movs	r3, #1
 8001588:	4970      	ldr	r1, [pc, #448]	; (800174c <main+0x444>)
 800158a:	4872      	ldr	r0, [pc, #456]	; (8001754 <main+0x44c>)
 800158c:	f005 fe4e 	bl	800722c <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 8001590:	4b75      	ldr	r3, [pc, #468]	; (8001768 <main+0x460>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff47 	bl	8000428 <__aeabi_f2d>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	4972      	ldr	r1, [pc, #456]	; (800176c <main+0x464>)
 80015a4:	4869      	ldr	r0, [pc, #420]	; (800174c <main+0x444>)
 80015a6:	f006 fc81 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015aa:	4868      	ldr	r0, [pc, #416]	; (800174c <main+0x444>)
 80015ac:	f7fe fdd0 	bl	8000150 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	4965      	ldr	r1, [pc, #404]	; (800174c <main+0x444>)
 80015b8:	4866      	ldr	r0, [pc, #408]	; (8001754 <main+0x44c>)
 80015ba:	f005 fe37 	bl	800722c <HAL_UART_Transmit>


	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <main+0x468>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff30 	bl	8000428 <__aeabi_f2d>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	4968      	ldr	r1, [pc, #416]	; (8001774 <main+0x46c>)
 80015d2:	485e      	ldr	r0, [pc, #376]	; (800174c <main+0x444>)
 80015d4:	f006 fc6a 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015d8:	485c      	ldr	r0, [pc, #368]	; (800174c <main+0x444>)
 80015da:	f7fe fdb9 	bl	8000150 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	2301      	movs	r3, #1
 80015e4:	4959      	ldr	r1, [pc, #356]	; (800174c <main+0x444>)
 80015e6:	485b      	ldr	r0, [pc, #364]	; (8001754 <main+0x44c>)
 80015e8:	f005 fe20 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <main+0x470>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff19 	bl	8000428 <__aeabi_f2d>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	495f      	ldr	r1, [pc, #380]	; (800177c <main+0x474>)
 8001600:	4852      	ldr	r0, [pc, #328]	; (800174c <main+0x444>)
 8001602:	f006 fc53 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001606:	4851      	ldr	r0, [pc, #324]	; (800174c <main+0x444>)
 8001608:	f7fe fda2 	bl	8000150 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	2301      	movs	r3, #1
 8001612:	494e      	ldr	r1, [pc, #312]	; (800174c <main+0x444>)
 8001614:	484f      	ldr	r0, [pc, #316]	; (8001754 <main+0x44c>)
 8001616:	f005 fe09 	bl	800722c <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "wfl1=%.3f \n\r",wfl1);
 800161a:	4b59      	ldr	r3, [pc, #356]	; (8001780 <main+0x478>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff02 	bl	8000428 <__aeabi_f2d>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	4955      	ldr	r1, [pc, #340]	; (8001784 <main+0x47c>)
 800162e:	4847      	ldr	r0, [pc, #284]	; (800174c <main+0x444>)
 8001630:	f006 fc3c 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001634:	4845      	ldr	r0, [pc, #276]	; (800174c <main+0x444>)
 8001636:	f7fe fd8b 	bl	8000150 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	4942      	ldr	r1, [pc, #264]	; (800174c <main+0x444>)
 8001642:	4844      	ldr	r0, [pc, #272]	; (8001754 <main+0x44c>)
 8001644:	f005 fdf2 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "wfl2=%.3f \n\r",wfl2);
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <main+0x480>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe feeb 	bl	8000428 <__aeabi_f2d>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	494c      	ldr	r1, [pc, #304]	; (800178c <main+0x484>)
 800165c:	483b      	ldr	r0, [pc, #236]	; (800174c <main+0x444>)
 800165e:	f006 fc25 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001662:	483a      	ldr	r0, [pc, #232]	; (800174c <main+0x444>)
 8001664:	f7fe fd74 	bl	8000150 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	2301      	movs	r3, #1
 800166e:	4937      	ldr	r1, [pc, #220]	; (800174c <main+0x444>)
 8001670:	4838      	ldr	r0, [pc, #224]	; (8001754 <main+0x44c>)
 8001672:	f005 fddb 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "wfl3=%.3f \n\r",wfl3);
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <main+0x488>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fed4 	bl	8000428 <__aeabi_f2d>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	461a      	mov	r2, r3
 8001686:	4623      	mov	r3, r4
 8001688:	4942      	ldr	r1, [pc, #264]	; (8001794 <main+0x48c>)
 800168a:	4830      	ldr	r0, [pc, #192]	; (800174c <main+0x444>)
 800168c:	f006 fc0e 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <main+0x444>)
 8001692:	f7fe fd5d 	bl	8000150 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	492b      	ldr	r1, [pc, #172]	; (800174c <main+0x444>)
 800169e:	482d      	ldr	r0, [pc, #180]	; (8001754 <main+0x44c>)
 80016a0:	f005 fdc4 	bl	800722c <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "GYROZ=%d Off=%d\n\r",GyroZcal,GyroZOff);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "ACC X RAW=%d \n\r",mpu6050DataStr.Gyroscope_X);
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <main+0x410>)
 80016a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016aa:	461a      	mov	r2, r3
 80016ac:	493a      	ldr	r1, [pc, #232]	; (8001798 <main+0x490>)
 80016ae:	4827      	ldr	r0, [pc, #156]	; (800174c <main+0x444>)
 80016b0:	f006 fbfc 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016b4:	4825      	ldr	r0, [pc, #148]	; (800174c <main+0x444>)
 80016b6:	f7fe fd4b 	bl	8000150 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	4922      	ldr	r1, [pc, #136]	; (800174c <main+0x444>)
 80016c2:	4824      	ldr	r0, [pc, #144]	; (8001754 <main+0x44c>)
 80016c4:	f005 fdb2 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Y RAW=%d \n\r",mpu6050DataStr.Gyroscope_Y);
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <main+0x410>)
 80016ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4932      	ldr	r1, [pc, #200]	; (800179c <main+0x494>)
 80016d2:	481e      	ldr	r0, [pc, #120]	; (800174c <main+0x444>)
 80016d4:	f006 fbea 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <main+0x444>)
 80016da:	f7fe fd39 	bl	8000150 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	4919      	ldr	r1, [pc, #100]	; (800174c <main+0x444>)
 80016e6:	481b      	ldr	r0, [pc, #108]	; (8001754 <main+0x44c>)
 80016e8:	f005 fda0 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Z RAW=%d \n\r",mpu6050DataStr.Gyroscope_Z);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <main+0x410>)
 80016ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016f2:	461a      	mov	r2, r3
 80016f4:	492a      	ldr	r1, [pc, #168]	; (80017a0 <main+0x498>)
 80016f6:	4815      	ldr	r0, [pc, #84]	; (800174c <main+0x444>)
 80016f8:	f006 fbd8 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <main+0x444>)
 80016fe:	f7fe fd27 	bl	8000150 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	4910      	ldr	r1, [pc, #64]	; (800174c <main+0x444>)
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <main+0x44c>)
 800170c:	f005 fd8e 	bl	800722c <HAL_UART_Transmit>
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  //sprintf(UartTXbuff0, "RollGy=%.2f RollAcc=%.2f \n\r",AngleRollGyro,AngleRollAccel);
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0x49c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	e047      	b.n	80017a8 <main+0x4a0>
 8001718:	2000053c 	.word	0x2000053c
 800171c:	200002fc 	.word	0x200002fc
 8001720:	20000564 	.word	0x20000564
 8001724:	2000049c 	.word	0x2000049c
 8001728:	200003f4 	.word	0x200003f4
 800172c:	20000374 	.word	0x20000374
 8001730:	2000022c 	.word	0x2000022c
 8001734:	10624dd3 	.word	0x10624dd3
 8001738:	20000370 	.word	0x20000370
 800173c:	200003f0 	.word	0x200003f0
 8001740:	2000029e 	.word	0x2000029e
 8001744:	200004a0 	.word	0x200004a0
 8001748:	200004fc 	.word	0x200004fc
 800174c:	2000038c 	.word	0x2000038c
 8001750:	0800ad20 	.word	0x0800ad20
 8001754:	2000044c 	.word	0x2000044c
 8001758:	20000230 	.word	0x20000230
 800175c:	0800ad28 	.word	0x0800ad28
 8001760:	2000024c 	.word	0x2000024c
 8001764:	0800ad3c 	.word	0x0800ad3c
 8001768:	20000250 	.word	0x20000250
 800176c:	0800ad50 	.word	0x0800ad50
 8001770:	20000254 	.word	0x20000254
 8001774:	0800ad60 	.word	0x0800ad60
 8001778:	20000258 	.word	0x20000258
 800177c:	0800ad70 	.word	0x0800ad70
 8001780:	200004e8 	.word	0x200004e8
 8001784:	0800ad80 	.word	0x0800ad80
 8001788:	20000498 	.word	0x20000498
 800178c:	0800ad90 	.word	0x0800ad90
 8001790:	20000294 	.word	0x20000294
 8001794:	0800ada0 	.word	0x0800ada0
 8001798:	0800adb0 	.word	0x0800adb0
 800179c:	0800adc0 	.word	0x0800adc0
 80017a0:	0800add0 	.word	0x0800add0
 80017a4:	20000658 	.word	0x20000658
 80017a8:	f7fe fe3e 	bl	8000428 <__aeabi_f2d>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	4940      	ldr	r1, [pc, #256]	; (80018b8 <main+0x5b0>)
 80017b6:	4841      	ldr	r0, [pc, #260]	; (80018bc <main+0x5b4>)
 80017b8:	f006 fb78 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017bc:	483f      	ldr	r0, [pc, #252]	; (80018bc <main+0x5b4>)
 80017be:	f7fe fcc7 	bl	8000150 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	2301      	movs	r3, #1
 80017c8:	493c      	ldr	r1, [pc, #240]	; (80018bc <main+0x5b4>)
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <main+0x5b8>)
 80017cc:	f005 fd2e 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 80017d0:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <main+0x5bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe27 	bl	8000428 <__aeabi_f2d>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	4939      	ldr	r1, [pc, #228]	; (80018c8 <main+0x5c0>)
 80017e4:	4835      	ldr	r0, [pc, #212]	; (80018bc <main+0x5b4>)
 80017e6:	f006 fb61 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80017ea:	4834      	ldr	r0, [pc, #208]	; (80018bc <main+0x5b4>)
 80017ec:	f7fe fcb0 	bl	8000150 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2301      	movs	r3, #1
 80017f6:	4931      	ldr	r1, [pc, #196]	; (80018bc <main+0x5b4>)
 80017f8:	4831      	ldr	r0, [pc, #196]	; (80018c0 <main+0x5b8>)
 80017fa:	f005 fd17 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot1=%u \n\r",PWM_Mot1);
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <main+0x5c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4932      	ldr	r1, [pc, #200]	; (80018d0 <main+0x5c8>)
 8001806:	482d      	ldr	r0, [pc, #180]	; (80018bc <main+0x5b4>)
 8001808:	f006 fb50 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800180c:	482b      	ldr	r0, [pc, #172]	; (80018bc <main+0x5b4>)
 800180e:	f7fe fc9f 	bl	8000150 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	4928      	ldr	r1, [pc, #160]	; (80018bc <main+0x5b4>)
 800181a:	4829      	ldr	r0, [pc, #164]	; (80018c0 <main+0x5b8>)
 800181c:	f005 fd06 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot2=%u \n\r",PWM_Mot2);
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <main+0x5cc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	492c      	ldr	r1, [pc, #176]	; (80018d8 <main+0x5d0>)
 8001828:	4824      	ldr	r0, [pc, #144]	; (80018bc <main+0x5b4>)
 800182a:	f006 fb3f 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800182e:	4823      	ldr	r0, [pc, #140]	; (80018bc <main+0x5b4>)
 8001830:	f7fe fc8e 	bl	8000150 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	4920      	ldr	r1, [pc, #128]	; (80018bc <main+0x5b4>)
 800183c:	4820      	ldr	r0, [pc, #128]	; (80018c0 <main+0x5b8>)
 800183e:	f005 fcf5 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot3=%u \n\r",PWM_Mot3);
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <main+0x5d4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4925      	ldr	r1, [pc, #148]	; (80018e0 <main+0x5d8>)
 800184a:	481c      	ldr	r0, [pc, #112]	; (80018bc <main+0x5b4>)
 800184c:	f006 fb2e 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001850:	481a      	ldr	r0, [pc, #104]	; (80018bc <main+0x5b4>)
 8001852:	f7fe fc7d 	bl	8000150 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	2301      	movs	r3, #1
 800185c:	4917      	ldr	r1, [pc, #92]	; (80018bc <main+0x5b4>)
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <main+0x5b8>)
 8001860:	f005 fce4 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PWM Mot4=%u \n\r",PWM_Mot4);
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <main+0x5dc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <main+0x5e0>)
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <main+0x5b4>)
 800186e:	f006 fb1d 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001872:	4812      	ldr	r0, [pc, #72]	; (80018bc <main+0x5b4>)
 8001874:	f7fe fc6c 	bl	8000150 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	2301      	movs	r3, #1
 800187e:	490f      	ldr	r1, [pc, #60]	; (80018bc <main+0x5b4>)
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <main+0x5b8>)
 8001882:	f005 fcd3 	bl	800722c <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "PID roll=%.2f \n\r",pid_output_roll);
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <main+0x5e4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fdcc 	bl	8000428 <__aeabi_f2d>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	4915      	ldr	r1, [pc, #84]	; (80018f0 <main+0x5e8>)
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <main+0x5b4>)
 800189c:	f006 fb06 	bl	8007eac <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <main+0x5b4>)
 80018a2:	f7fe fc55 	bl	8000150 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	4903      	ldr	r1, [pc, #12]	; (80018bc <main+0x5b4>)
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <main+0x5b8>)
 80018b0:	f005 fcbc 	bl	800722c <HAL_UART_Transmit>
	  HAL_Delay(50);
 80018b4:	e631      	b.n	800151a <main+0x212>
 80018b6:	bf00      	nop
 80018b8:	0800ade0 	.word	0x0800ade0
 80018bc:	2000038c 	.word	0x2000038c
 80018c0:	2000044c 	.word	0x2000044c
 80018c4:	20000678 	.word	0x20000678
 80018c8:	0800adf0 	.word	0x0800adf0
 80018cc:	20000668 	.word	0x20000668
 80018d0:	0800ae00 	.word	0x0800ae00
 80018d4:	2000057c 	.word	0x2000057c
 80018d8:	0800ae10 	.word	0x0800ae10
 80018dc:	20000578 	.word	0x20000578
 80018e0:	0800ae20 	.word	0x0800ae20
 80018e4:	2000065c 	.word	0x2000065c
 80018e8:	0800ae30 	.word	0x0800ae30
 80018ec:	20000268 	.word	0x20000268
 80018f0:	0800ae40 	.word	0x0800ae40

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	2228      	movs	r2, #40	; 0x28
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fe7a 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001932:	2301      	movs	r3, #1
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001936:	2302      	movs	r3, #2
 8001938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001940:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	4618      	mov	r0, r3
 800194c:	f003 ff80 	bl	8005850 <HAL_RCC_OscConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001956:	f000 faa9 	bl	8001eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f004 f9ea 	bl	8005d50 <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001982:	f000 fa93 	bl	8001eac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001986:	2302      	movs	r3, #2
 8001988:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800198a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fb78 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800199e:	f000 fa85 	bl	8001eac <Error_Handler>
  }
}
 80019a2:	bf00      	nop
 80019a4:	3750      	adds	r7, #80	; 0x50
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019be:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <MX_ADC1_Init+0x78>)
 80019c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_ADC1_Init+0x74>)
 80019ea:	f002 f85f 	bl	8003aac <HAL_ADC_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019f4:	f000 fa5a 	bl	8001eac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_ADC1_Init+0x74>)
 8001a0a:	f002 fadb 	bl	8003fc4 <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a14:	f000 fa4a 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000418 	.word	0x20000418
 8001a24:	40012400 	.word	0x40012400

08001a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_I2C2_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_I2C2_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_I2C2_Init+0x50>)
 8001a66:	f002 ff65 	bl	8004934 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 fa1c 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200002fc 	.word	0x200002fc
 8001a7c:	40005800 	.word	0x40005800
 8001a80:	00061a80 	.word	0x00061a80

08001a84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <MX_SPI2_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_SPI2_Init+0x64>)
 8001ad6:	f004 fc49 	bl	800636c <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 f9e4 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002a0 	.word	0x200002a0
 8001aec:	40003800 	.word	0x40003800

08001af0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b096      	sub	sp, #88	; 0x58
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2220      	movs	r2, #32
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 fd67 	bl	80075fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b30:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <MX_TIM1_Init+0x188>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b36:	2247      	movs	r2, #71	; 0x47
 8001b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b42:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b5a:	4846      	ldr	r0, [pc, #280]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b5c:	f004 fc67 	bl	800642e <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b66:	f000 f9a1 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b74:	4619      	mov	r1, r3
 8001b76:	483f      	ldr	r0, [pc, #252]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b78:	f004 fedc 	bl	8006934 <HAL_TIM_ConfigClockSource>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b82:	f000 f993 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b86:	483b      	ldr	r0, [pc, #236]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001b88:	f004 fc9f 	bl	80064ca <HAL_TIM_PWM_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b92:	f000 f98b 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4833      	ldr	r0, [pc, #204]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001ba6:	f005 fa4d 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001bb0:	f000 f97c 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001bdc:	f004 fde4 	bl	80067a8 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001be6:	f000 f961 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	2204      	movs	r2, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4820      	ldr	r0, [pc, #128]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001bf4:	f004 fdd8 	bl	80067a8 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001bfe:	f000 f955 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	2208      	movs	r2, #8
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481a      	ldr	r0, [pc, #104]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001c0c:	f004 fdcc 	bl	80067a8 <HAL_TIM_PWM_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c16:	f000 f949 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1e:	220c      	movs	r2, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001c24:	f004 fdc0 	bl	80067a8 <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001c2e:	f000 f93d 	bl	8001eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001c56:	f005 fa39 	bl	80070cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001c60:	f000 f924 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <MX_TIM1_Init+0x184>)
 8001c66:	f000 fe13 	bl	8002890 <HAL_TIM_MspPostInit>

}
 8001c6a:	bf00      	nop
 8001c6c:	3758      	adds	r7, #88	; 0x58
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004a0 	.word	0x200004a0
 8001c78:	40012c00 	.word	0x40012c00

08001c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001ca2:	2247      	movs	r2, #71	; 0x47
 8001ca4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cc2:	f004 fbb4 	bl	800642e <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ccc:	f000 f8ee 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cde:	f004 fe29 	bl	8006934 <HAL_TIM_ConfigClockSource>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ce8:	f000 f8e0 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cfa:	f005 f9a3 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d04:	f000 f8d2 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200004fc 	.word	0x200004fc

08001d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART1_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d20:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	f005 fa21 	bl	8007192 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f000 f8a9 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000044c 	.word	0x2000044c
 8001d64:	40013800 	.word	0x40013800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <MX_GPIO_Init+0x134>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de2:	482f      	ldr	r0, [pc, #188]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001de4:	f002 fd76 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001dee:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001df0:	f002 fd70 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfa:	482b      	ldr	r0, [pc, #172]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001dfc:	f002 fd6a 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001e1a:	f002 fc01 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001e38:	f002 fbf2 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001e52:	f002 fbe5 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001e70:	f002 fbd6 	bl	8004620 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8001e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001e8e:	f002 fbc7 	bl	8004620 <HAL_GPIO_Init>

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40011000 	.word	0x40011000
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40010800 	.word	0x40010800

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <nRF24_TransmitPacket+0x98>)
 8001ec6:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ece:	4821      	ldr	r0, [pc, #132]	; (8001f54 <nRF24_TransmitPacket+0x9c>)
 8001ed0:	f002 fd00 	bl	80048d4 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fb64 	bl	80025a6 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	481b      	ldr	r0, [pc, #108]	; (8001f54 <nRF24_TransmitPacket+0x9c>)
 8001ee6:	f002 fcf5 	bl	80048d4 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001eea:	f000 fb24 	bl	8002536 <nRF24_GetStatus>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f1      	bne.n	8001eea <nRF24_TransmitPacket+0x32>
 8001f06:	e000      	b.n	8001f0a <nRF24_TransmitPacket+0x52>
			break;
 8001f08:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <nRF24_TransmitPacket+0x9c>)
 8001f12:	f002 fcdf 	bl	80048d4 <HAL_GPIO_WritePin>

	if (!wait) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e012      	b.n	8001f46 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001f20:	f000 fb2c 	bl	800257c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e009      	b.n	8001f46 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e002      	b.n	8001f46 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001f40:	f000 fb0c 	bl	800255c <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	000fffff 	.word	0x000fffff
 8001f54:	40010c00 	.word	0x40010c00

08001f58 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001f62:	bf00      	nop
 8001f64:	2102      	movs	r1, #2
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <nRF24_LL_RW+0x48>)
 8001f68:	f7ff f9b4 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f8      	beq.n	8001f64 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <nRF24_LL_RW+0x48>)
 8001f7a:	f7ff f991 	bl	80012a0 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001f7e:	bf00      	nop
 8001f80:	2101      	movs	r1, #1
 8001f82:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <nRF24_LL_RW+0x48>)
 8001f84:	f7ff f9a6 	bl	80012d4 <SPI_I2S_GetFlagStatus>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f8      	beq.n	8001f80 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001f8e:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <nRF24_LL_RW+0x48>)
 8001f90:	f7ff f994 	bl	80012bc <SPI_I2S_ReceiveData>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b2db      	uxtb	r3, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40003800 	.word	0x40003800

08001fa4 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <nRF24_ReadReg+0x44>)
 8001fb6:	f002 fc8d 	bl	80048d4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ffc8 	bl	8001f58 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001fc8:	20ff      	movs	r0, #255	; 0xff
 8001fca:	f7ff ffc5 	bl	8001f58 <nRF24_LL_RW>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <nRF24_ReadReg+0x44>)
 8001fda:	f002 fc7b 	bl	80048d4 <HAL_GPIO_WritePin>

	return value;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010800 	.word	0x40010800

08001fec <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002002:	481a      	ldr	r0, [pc, #104]	; (800206c <nRF24_WriteReg+0x80>)
 8002004:	f002 fc66 	bl	80048d4 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b1f      	cmp	r3, #31
 800200c:	d810      	bhi.n	8002030 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	b25b      	sxtb	r3, r3
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	b25b      	sxtb	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff99 	bl	8001f58 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff95 	bl	8001f58 <nRF24_LL_RW>
 800202e:	e013      	b.n	8002058 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff90 	bl	8001f58 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2be1      	cmp	r3, #225	; 0xe1
 800203c:	d00c      	beq.n	8002058 <nRF24_WriteReg+0x6c>
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2be2      	cmp	r3, #226	; 0xe2
 8002042:	d009      	beq.n	8002058 <nRF24_WriteReg+0x6c>
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	2be3      	cmp	r3, #227	; 0xe3
 8002048:	d006      	beq.n	8002058 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2bff      	cmp	r3, #255	; 0xff
 800204e:	d003      	beq.n	8002058 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff80 	bl	8001f58 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <nRF24_WriteReg+0x80>)
 8002060:	f002 fc38 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010800 	.word	0x40010800

08002070 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002086:	480f      	ldr	r0, [pc, #60]	; (80020c4 <nRF24_ReadMBReg+0x54>)
 8002088:	f002 fc24 	bl	80048d4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff62 	bl	8001f58 <nRF24_LL_RW>
	while (count--) {
 8002094:	e007      	b.n	80020a6 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002096:	683c      	ldr	r4, [r7, #0]
 8002098:	1c63      	adds	r3, r4, #1
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	20ff      	movs	r0, #255	; 0xff
 800209e:	f7ff ff5b 	bl	8001f58 <nRF24_LL_RW>
 80020a2:	4603      	mov	r3, r0
 80020a4:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	71ba      	strb	r2, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f2      	bne.n	8002096 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <nRF24_ReadMBReg+0x54>)
 80020b8:	f002 fc0c 	bl	80048d4 <HAL_GPIO_WritePin>
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	40010800 	.word	0x40010800

080020c8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80020d8:	2200      	movs	r2, #0
 80020da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020de:	480f      	ldr	r0, [pc, #60]	; (800211c <nRF24_WriteMBReg+0x54>)
 80020e0:	f002 fbf8 	bl	80048d4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff36 	bl	8001f58 <nRF24_LL_RW>
	while (count--) {
 80020ec:	e006      	b.n	80020fc <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	603a      	str	r2, [r7, #0]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff2e 	bl	8001f58 <nRF24_LL_RW>
	while (count--) {
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	1e5a      	subs	r2, r3, #1
 8002100:	71ba      	strb	r2, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f3      	bne.n	80020ee <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <nRF24_WriteMBReg+0x54>)
 800210e:	f002 fbe1 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40010800 	.word	0x40010800

08002120 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8002124:	2108      	movs	r1, #8
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff ff60 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800212c:	213f      	movs	r1, #63	; 0x3f
 800212e:	2001      	movs	r0, #1
 8002130:	f7ff ff5c 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8002134:	2103      	movs	r1, #3
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff ff58 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800213c:	2103      	movs	r1, #3
 800213e:	2003      	movs	r0, #3
 8002140:	f7ff ff54 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002144:	2103      	movs	r1, #3
 8002146:	2004      	movs	r0, #4
 8002148:	f7ff ff50 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800214c:	2102      	movs	r1, #2
 800214e:	2005      	movs	r0, #5
 8002150:	f7ff ff4c 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002154:	210e      	movs	r1, #14
 8002156:	2006      	movs	r0, #6
 8002158:	f7ff ff48 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800215c:	2100      	movs	r1, #0
 800215e:	2007      	movs	r0, #7
 8002160:	f7ff ff44 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002164:	2100      	movs	r1, #0
 8002166:	2011      	movs	r0, #17
 8002168:	f7ff ff40 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800216c:	2100      	movs	r1, #0
 800216e:	2012      	movs	r0, #18
 8002170:	f7ff ff3c 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002174:	2100      	movs	r1, #0
 8002176:	2013      	movs	r0, #19
 8002178:	f7ff ff38 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800217c:	2100      	movs	r1, #0
 800217e:	2014      	movs	r0, #20
 8002180:	f7ff ff34 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002184:	2100      	movs	r1, #0
 8002186:	2015      	movs	r0, #21
 8002188:	f7ff ff30 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800218c:	2100      	movs	r1, #0
 800218e:	2016      	movs	r0, #22
 8002190:	f7ff ff2c 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002194:	2100      	movs	r1, #0
 8002196:	201c      	movs	r0, #28
 8002198:	f7ff ff28 	bl	8001fec <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800219c:	2100      	movs	r1, #0
 800219e:	201d      	movs	r0, #29
 80021a0:	f7ff ff24 	bl	8001fec <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80021a4:	f000 f9e2 	bl	800256c <nRF24_FlushRX>
	nRF24_FlushTX();
 80021a8:	f000 f9d8 	bl	800255c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80021ac:	f000 f9e6 	bl	800257c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b6:	4802      	ldr	r0, [pc, #8]	; (80021c0 <nRF24_Init+0xa0>)
 80021b8:	f002 fb8c 	bl	80048d4 <HAL_GPIO_WritePin>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40010800 	.word	0x40010800

080021c4 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <nRF24_Check+0x58>)
 80021cc:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80021ce:	2205      	movs	r2, #5
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	2030      	movs	r0, #48	; 0x30
 80021d4:	f7ff ff78 	bl	80020c8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80021d8:	463b      	mov	r3, r7
 80021da:	2205      	movs	r2, #5
 80021dc:	4619      	mov	r1, r3
 80021de:	2010      	movs	r0, #16
 80021e0:	f7ff ff46 	bl	8002070 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e010      	b.n	800220c <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	f107 0210 	add.w	r2, r7, #16
 80021f0:	4413      	add	r3, r2
 80021f2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c59      	adds	r1, r3, #1
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <nRF24_Check+0x42>
 8002202:	2300      	movs	r3, #0
 8002204:	e006      	b.n	8002214 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d9eb      	bls.n	80021ea <nRF24_Check+0x26>
	}

	return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	0800ae54 	.word	0x0800ae54

08002220 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff feba 	bl	8001fa4 <nRF24_ReadReg>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d104      	bne.n	8002244 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e003      	b.n	800224c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	f023 0302 	bic.w	r3, r3, #2
 800224a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fecb 	bl	8001fec <nRF24_WriteReg>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff fe9b 	bl	8001fa4 <nRF24_ReadReg>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	b25a      	sxtb	r2, r3
 8002284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002288:	4313      	orrs	r3, r2
 800228a:	b25b      	sxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	4619      	mov	r1, r3
 8002292:	2000      	movs	r0, #0
 8002294:	f7ff feaa 	bl	8001fec <nRF24_WriteReg>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff fe7a 	bl	8001fa4 <nRF24_ReadReg>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	f023 030c 	bic.w	r3, r3, #12
 80022ba:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	4619      	mov	r1, r3
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fe89 	bl	8001fec <nRF24_WriteReg>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4619      	mov	r1, r3
 80022f0:	2005      	movs	r0, #5
 80022f2:	f7ff fe7b 	bl	8001fec <nRF24_WriteReg>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	3b02      	subs	r3, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	2003      	movs	r0, #3
 8002312:	f7ff fe6b 	bl	8001fec <nRF24_WriteReg>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d846      	bhi.n	80023c0 <nRF24_SetAddr+0xa0>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <nRF24_SetAddr+0x18>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002355 	.word	0x08002355
 800233c:	08002355 	.word	0x08002355
 8002340:	080023ad 	.word	0x080023ad
 8002344:	080023ad 	.word	0x080023ad
 8002348:	080023ad 	.word	0x080023ad
 800234c:	080023ad 	.word	0x080023ad
 8002350:	08002355 	.word	0x08002355
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002354:	2003      	movs	r0, #3
 8002356:	f7ff fe25 	bl	8001fa4 <nRF24_ReadReg>
 800235a:	4603      	mov	r3, r0
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002368:	2200      	movs	r2, #0
 800236a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236e:	4817      	ldr	r0, [pc, #92]	; (80023cc <nRF24_SetAddr+0xac>)
 8002370:	f002 fab0 	bl	80048d4 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <nRF24_SetAddr+0xb0>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fde9 	bl	8001f58 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	603a      	str	r2, [r7, #0]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fde2 	bl	8001f58 <nRF24_LL_RW>
			} while (addr_width--);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	73fa      	strb	r2, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f3      	bne.n	8002386 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <nRF24_SetAddr+0xac>)
 80023a6:	f002 fa95 	bl	80048d4 <HAL_GPIO_WritePin>
			break;
 80023aa:	e00a      	b.n	80023c2 <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <nRF24_SetAddr+0xb0>)
 80023b0:	5cd2      	ldrb	r2, [r2, r3]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fe17 	bl	8001fec <nRF24_WriteReg>
			break;
 80023be:	e000      	b.n	80023c2 <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 80023c0:	bf00      	nop
	}
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40010800 	.word	0x40010800
 80023d0:	0800ae90 	.word	0x0800ae90

080023d4 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80023de:	2006      	movs	r0, #6
 80023e0:	f7ff fde0 	bl	8001fa4 <nRF24_ReadReg>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	f023 0306 	bic.w	r3, r3, #6
 80023ee:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	4619      	mov	r1, r3
 80023fc:	2006      	movs	r0, #6
 80023fe:	f7ff fdf5 	bl	8001fec <nRF24_WriteReg>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002414:	2006      	movs	r0, #6
 8002416:	f7ff fdc5 	bl	8001fa4 <nRF24_ReadReg>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002424:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4313      	orrs	r3, r2
 800242c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	4619      	mov	r1, r3
 8002432:	2006      	movs	r0, #6
 8002434:	f7ff fdda 	bl	8001fec <nRF24_WriteReg>
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	460b      	mov	r3, r1
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	4613      	mov	r3, r2
 8002450:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002452:	2002      	movs	r0, #2
 8002454:	f7ff fda6 	bl	8001fa4 <nRF24_ReadReg>
 8002458:	4603      	mov	r3, r0
 800245a:	b25a      	sxtb	r2, r3
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b25b      	sxtb	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002470:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	4619      	mov	r1, r3
 8002476:	2002      	movs	r0, #2
 8002478:	f7ff fdb8 	bl	8001fec <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <nRF24_SetRXPipe+0xa4>)
 8002480:	5cd2      	ldrb	r2, [r2, r3]
 8002482:	797b      	ldrb	r3, [r7, #5]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f7ff fdad 	bl	8001fec <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002492:	2001      	movs	r0, #1
 8002494:	f7ff fd86 	bl	8001fa4 <nRF24_ReadReg>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10a      	bne.n	80024b8 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2201      	movs	r2, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	b25a      	sxtb	r2, r3
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e00b      	b.n	80024d0 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2201      	movs	r2, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	4619      	mov	r1, r3
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7ff fd89 	bl	8001fec <nRF24_WriteReg>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800ae88 	.word	0x0800ae88

080024e8 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d904      	bls.n	8002502 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80024f8:	2100      	movs	r1, #0
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff fd76 	bl	8001fec <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8002500:	e015      	b.n	800252e <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002502:	2001      	movs	r0, #1
 8002504:	f7ff fd4e 	bl	8001fa4 <nRF24_ReadReg>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	b25b      	sxtb	r3, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	b25a      	sxtb	r2, r3
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4013      	ands	r3, r2
 8002520:	b25b      	sxtb	r3, r3
 8002522:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	4619      	mov	r1, r3
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff fd5f 	bl	8001fec <nRF24_WriteReg>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 800253a:	2007      	movs	r0, #7
 800253c:	f7ff fd32 	bl	8001fa4 <nRF24_ReadReg>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}

08002546 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800254a:	2017      	movs	r0, #23
 800254c:	f7ff fd2a 	bl	8001fa4 <nRF24_ReadReg>
 8002550:	4603      	mov	r3, r0
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	b2db      	uxtb	r3, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}

0800255c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002560:	21ff      	movs	r1, #255	; 0xff
 8002562:	20e1      	movs	r0, #225	; 0xe1
 8002564:	f7ff fd42 	bl	8001fec <nRF24_WriteReg>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002570:	21ff      	movs	r1, #255	; 0xff
 8002572:	20e2      	movs	r0, #226	; 0xe2
 8002574:	f7ff fd3a 	bl	8001fec <nRF24_WriteReg>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002582:	2007      	movs	r0, #7
 8002584:	f7ff fd0e 	bl	8001fa4 <nRF24_ReadReg>
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002592:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4619      	mov	r1, r3
 8002598:	2007      	movs	r0, #7
 800259a:	f7ff fd27 	bl	8001fec <nRF24_WriteReg>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	461a      	mov	r2, r3
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	20a0      	movs	r0, #160	; 0xa0
 80025ba:	f7ff fd85 	bl	80020c8 <nRF24_WriteMBReg>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80025d2:	2007      	movs	r0, #7
 80025d4:	f7ff fce6 	bl	8001fa4 <nRF24_ReadReg>
 80025d8:	4603      	mov	r3, r0
 80025da:	105b      	asrs	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d816      	bhi.n	8002618 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <nRF24_ReadPayload+0x60>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fcd7 	bl	8001fa4 <nRF24_ReadReg>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	2061      	movs	r0, #97	; 0x61
 8002610:	f7ff fd2e 	bl	8002070 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	e003      	b.n	8002620 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800261e:	23ff      	movs	r3, #255	; 0xff
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	0800ae88 	.word	0x0800ae88

0800262c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_MspInit+0x5c>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_MspInit+0x5c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6193      	str	r3, [r2, #24]
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_MspInit+0x5c>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_MspInit+0x5c>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_MspInit+0x5c>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_MspInit+0x5c>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_MspInit+0x60>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_MspInit+0x60>)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000

08002690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_ADC_MspInit+0x6c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d121      	bne.n	80026f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_ADC_MspInit+0x70>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e4:	2303      	movs	r3, #3
 80026e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_ADC_MspInit+0x74>)
 80026f0:	f001 ff96 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40012400 	.word	0x40012400
 8002700:	40021000 	.word	0x40021000
 8002704:	40010800 	.word	0x40010800

08002708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_I2C_MspInit+0x74>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d124      	bne.n	8002772 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002746:	2312      	movs	r3, #18
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <HAL_I2C_MspInit+0x7c>)
 8002756:	f001 ff63 	bl	8004620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40005800 	.word	0x40005800
 8002780:	40021000 	.word	0x40021000
 8002784:	40010c00 	.word	0x40010c00

08002788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_SPI_MspInit+0x8c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d131      	bne.n	800280c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b2:	61d3      	str	r3, [r2, #28]
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_SPI_MspInit+0x90>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80027d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	480b      	ldr	r0, [pc, #44]	; (800281c <HAL_SPI_MspInit+0x94>)
 80027ee:	f001 ff17 	bl	8004620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4619      	mov	r1, r3
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <HAL_SPI_MspInit+0x94>)
 8002808:	f001 ff0a 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40003800 	.word	0x40003800
 8002818:	40021000 	.word	0x40021000
 800281c:	40010c00 	.word	0x40010c00

08002820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_TIM_Base_MspInit+0x68>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10c      	bne.n	800284c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800283c:	6193      	str	r3, [r2, #24]
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800284a:	e018      	b.n	800287e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d113      	bne.n	800287e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	61d3      	str	r3, [r2, #28]
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2101      	movs	r1, #1
 8002872:	201c      	movs	r0, #28
 8002874:	f001 fe9d 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002878:	201c      	movs	r0, #28
 800287a:	f001 feb6 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_MspPostInit+0x5c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d118      	bne.n	80028e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_TIM_MspPostInit+0x60>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_TIM_MspPostInit+0x60>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_TIM_MspPostInit+0x60>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80028c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	; (80028f4 <HAL_TIM_MspPostInit+0x64>)
 80028de:	f001 fe9f 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010800 	.word	0x40010800

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_UART_MspInit+0xa4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d13d      	bne.n	8002994 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 800291e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_UART_MspInit+0xa8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4812      	ldr	r0, [pc, #72]	; (80029a4 <HAL_UART_MspInit+0xac>)
 800295c:	f001 fe60 	bl	8004620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	480c      	ldr	r0, [pc, #48]	; (80029a4 <HAL_UART_MspInit+0xac>)
 8002974:	f001 fe54 	bl	8004620 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_UART_MspInit+0xb0>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <HAL_UART_MspInit+0xb0>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40013800 	.word	0x40013800
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	40010000 	.word	0x40010000

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <HardFault_Handler+0x4>

080029be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <MemManage_Handler+0x4>

080029c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <BusFault_Handler+0x4>

080029ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <UsageFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f8:	f001 f81a 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a08:	4893      	ldr	r0, [pc, #588]	; (8002c58 <TIM2_IRQHandler+0x258>)
 8002a0a:	f003 fdc5 	bl	8006598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky
  LEDcount++;
 8002a0e:	4b93      	ldr	r3, [pc, #588]	; (8002c5c <TIM2_IRQHandler+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a91      	ldr	r2, [pc, #580]	; (8002c5c <TIM2_IRQHandler+0x25c>)
 8002a16:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <TIM2_IRQHandler+0x25c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2bf9      	cmp	r3, #249	; 0xf9
 8002a1e:	d907      	bls.n	8002a30 <TIM2_IRQHandler+0x30>
  {
	  LEDcount=0;
 8002a20:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <TIM2_IRQHandler+0x25c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8002a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2a:	488d      	ldr	r0, [pc, #564]	; (8002c60 <TIM2_IRQHandler+0x260>)
 8002a2c:	f001 ff6a 	bl	8004904 <HAL_GPIO_TogglePin>
  }

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a36:	488b      	ldr	r0, [pc, #556]	; (8002c64 <TIM2_IRQHandler+0x264>)
 8002a38:	f001 ff4c 	bl	80048d4 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 8002a3c:	210a      	movs	r1, #10
 8002a3e:	488a      	ldr	r0, [pc, #552]	; (8002c68 <TIM2_IRQHandler+0x268>)
 8002a40:	f001 f9ba 	bl	8003db8 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8002a44:	4888      	ldr	r0, [pc, #544]	; (8002c68 <TIM2_IRQHandler+0x268>)
 8002a46:	f001 fab1 	bl	8003fac <HAL_ADC_GetValue>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f921 	bl	8000c94 <__aeabi_ui2f>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4985      	ldr	r1, [pc, #532]	; (8002c6c <TIM2_IRQHandler+0x26c>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f974 	bl	8000d44 <__aeabi_fmul>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fb36 	bl	80010d0 <__aeabi_f2uiz>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <TIM2_IRQHandler+0x270>)
 8002a68:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <TIM2_IRQHandler+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a80      	ldr	r2, [pc, #512]	; (8002c70 <TIM2_IRQHandler+0x270>)
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4981      	ldr	r1, [pc, #516]	; (8002c78 <TIM2_IRQHandler+0x278>)
 8002a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8002a78:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <TIM2_IRQHandler+0x274>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	4a7d      	ldr	r2, [pc, #500]	; (8002c74 <TIM2_IRQHandler+0x274>)
 8002a80:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8002a82:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <TIM2_IRQHandler+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b31      	cmp	r3, #49	; 0x31
 8002a88:	d902      	bls.n	8002a90 <TIM2_IRQHandler+0x90>
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <TIM2_IRQHandler+0x274>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8002a90:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <TIM2_IRQHandler+0x27c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8002a96:	4b7a      	ldr	r3, [pc, #488]	; (8002c80 <TIM2_IRQHandler+0x280>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e00e      	b.n	8002abc <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 8002a9e:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <TIM2_IRQHandler+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <TIM2_IRQHandler+0x278>)
 8002aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002aa8:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <TIM2_IRQHandler+0x27c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <TIM2_IRQHandler+0x27c>)
 8002ab0:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <TIM2_IRQHandler+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a71      	ldr	r2, [pc, #452]	; (8002c80 <TIM2_IRQHandler+0x280>)
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <TIM2_IRQHandler+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b31      	cmp	r3, #49	; 0x31
 8002ac2:	d9ec      	bls.n	8002a9e <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <TIM2_IRQHandler+0x27c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <TIM2_IRQHandler+0x284>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <TIM2_IRQHandler+0x288>)
 8002ad2:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------


  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8002ad4:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <TIM2_IRQHandler+0x28c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d07a      	beq.n	8002bd2 <TIM2_IRQHandler+0x1d2>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8002adc:	f7ff fd33 	bl	8002546 <nRF24_GetStatus_RXFIFO>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d075      	beq.n	8002bd2 <TIM2_IRQHandler+0x1d2>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8002ae6:	496a      	ldr	r1, [pc, #424]	; (8002c90 <TIM2_IRQHandler+0x290>)
 8002ae8:	486a      	ldr	r0, [pc, #424]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002aea:	f7ff fd6d 	bl	80025c8 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8002aee:	f7ff fd45 	bl	800257c <nRF24_ClearIRQFlags>

  			//Check if Data is in correct ranges
  			if(nRF24_payloadRX[0]<=100 && nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100)
 8002af2:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d860      	bhi.n	8002bbc <TIM2_IRQHandler+0x1bc>
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d85c      	bhi.n	8002bbc <TIM2_IRQHandler+0x1bc>
 8002b02:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b04:	789b      	ldrb	r3, [r3, #2]
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d858      	bhi.n	8002bbc <TIM2_IRQHandler+0x1bc>
 8002b0a:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b0c:	78db      	ldrb	r3, [r3, #3]
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d854      	bhi.n	8002bbc <TIM2_IRQHandler+0x1bc>
  			{
  				Ljoyupdown=nRF24_payloadRX[0];
 8002b12:	4b60      	ldr	r3, [pc, #384]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <TIM2_IRQHandler+0x298>)
 8002b1a:	601a      	str	r2, [r3, #0]
  				Ljoyleftright=nRF24_payloadRX[1];
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <TIM2_IRQHandler+0x29c>)
 8002b24:	601a      	str	r2, [r3, #0]
  				Djoyupdown=nRF24_payloadRX[2];
 8002b26:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b28:	789b      	ldrb	r3, [r3, #2]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <TIM2_IRQHandler+0x2a0>)
 8002b2e:	601a      	str	r2, [r3, #0]
  				Djoyleftright=nRF24_payloadRX[3];
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b32:	78db      	ldrb	r3, [r3, #3]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <TIM2_IRQHandler+0x2a4>)
 8002b38:	601a      	str	r2, [r3, #0]
  				potenc1=nRF24_payloadRX[4];
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <TIM2_IRQHandler+0x2a8>)
 8002b42:	601a      	str	r2, [r3, #0]
  				potenc2=nRF24_payloadRX[5];
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b46:	795b      	ldrb	r3, [r3, #5]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b58      	ldr	r3, [pc, #352]	; (8002cac <TIM2_IRQHandler+0x2ac>)
 8002b4c:	601a      	str	r2, [r3, #0]

  				togg1=nRF24_payloadRX[6]>>7;
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b50:	799b      	ldrb	r3, [r3, #6]
 8002b52:	09db      	lsrs	r3, r3, #7
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <TIM2_IRQHandler+0x2b0>)
 8002b5a:	601a      	str	r2, [r3, #0]
  				togg2=(nRF24_payloadRX[6] & 64 )>>6;
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b5e:	799b      	ldrb	r3, [r3, #6]
 8002b60:	119b      	asrs	r3, r3, #6
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <TIM2_IRQHandler+0x2b4>)
 8002b68:	6013      	str	r3, [r2, #0]
  				butt1=(nRF24_payloadRX[6] & 32 )>>5;
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	115b      	asrs	r3, r3, #5
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	4a50      	ldr	r2, [pc, #320]	; (8002cb8 <TIM2_IRQHandler+0x2b8>)
 8002b76:	6013      	str	r3, [r2, #0]
  				butt2=(nRF24_payloadRX[6] & 16 )>>4;
 8002b78:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	111b      	asrs	r3, r3, #4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <TIM2_IRQHandler+0x2bc>)
 8002b84:	6013      	str	r3, [r2, #0]
  				butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b88:	799b      	ldrb	r3, [r3, #6]
 8002b8a:	10db      	asrs	r3, r3, #3
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	4a4b      	ldr	r2, [pc, #300]	; (8002cc0 <TIM2_IRQHandler+0x2c0>)
 8002b92:	6013      	str	r3, [r2, #0]
  				butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002b96:	799b      	ldrb	r3, [r3, #6]
 8002b98:	109b      	asrs	r3, r3, #2
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <TIM2_IRQHandler+0x2c4>)
 8002ba0:	6013      	str	r3, [r2, #0]
  				buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002ba2:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002ba4:	799b      	ldrb	r3, [r3, #6]
 8002ba6:	105b      	asrs	r3, r3, #1
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <TIM2_IRQHandler+0x2c8>)
 8002bae:	6013      	str	r3, [r2, #0]
  				buttD=(nRF24_payloadRX[6] & 1 );
 8002bb0:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <TIM2_IRQHandler+0x294>)
 8002bb2:	799b      	ldrb	r3, [r3, #6]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <TIM2_IRQHandler+0x2cc>)
 8002bba:	6013      	str	r3, [r2, #0]
  			}
  			SendBackFlag=1;
 8002bbc:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <TIM2_IRQHandler+0x2d0>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8002bc2:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <TIM2_IRQHandler+0x28c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <TIM2_IRQHandler+0x2d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a41      	ldr	r2, [pc, #260]	; (8002cd4 <TIM2_IRQHandler+0x2d4>)
 8002bd0:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <TIM2_IRQHandler+0x2d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 808c 	beq.w	8002cf4 <TIM2_IRQHandler+0x2f4>
  {
    	BackTimer++;
 8002bdc:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <TIM2_IRQHandler+0x2d8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a3d      	ldr	r2, [pc, #244]	; (8002cd8 <TIM2_IRQHandler+0x2d8>)
 8002be4:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <TIM2_IRQHandler+0x2d8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	f200 8081 	bhi.w	8002cf4 <TIM2_IRQHandler+0x2f4>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <TIM2_IRQHandler+0x1f8>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c11 	.word	0x08002c11
 8002bfc:	08002cf5 	.word	0x08002cf5
 8002c00:	08002cf5 	.word	0x08002cf5
 8002c04:	08002c25 	.word	0x08002c25
 8002c08:	08002c45 	.word	0x08002c45
 8002c0c:	08002ce1 	.word	0x08002ce1
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c16:	4813      	ldr	r0, [pc, #76]	; (8002c64 <TIM2_IRQHandler+0x264>)
 8002c18:	f001 fe5c 	bl	80048d4 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7ff fb1e 	bl	800225e <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8002c22:	e067      	b.n	8002cf4 <TIM2_IRQHandler+0x2f4>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <TIM2_IRQHandler+0x288>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <TIM2_IRQHandler+0x2dc>)
 8002c2c:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <TIM2_IRQHandler+0x288>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <TIM2_IRQHandler+0x2dc>)
 8002c38:	705a      	strb	r2, [r3, #1]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 2);
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4827      	ldr	r0, [pc, #156]	; (8002cdc <TIM2_IRQHandler+0x2dc>)
 8002c3e:	f7ff f93b 	bl	8001eb8 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8002c42:	e057      	b.n	8002cf4 <TIM2_IRQHandler+0x2f4>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff fb0a 	bl	800225e <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <TIM2_IRQHandler+0x264>)
 8002c52:	f001 fe3f 	bl	80048d4 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8002c56:	e04d      	b.n	8002cf4 <TIM2_IRQHandler+0x2f4>
 8002c58:	200004fc 	.word	0x200004fc
 8002c5c:	20000670 	.word	0x20000670
 8002c60:	40011000 	.word	0x40011000
 8002c64:	40010c00 	.word	0x40010c00
 8002c68:	20000418 	.word	0x20000418
 8002c6c:	4090ac29 	.word	0x4090ac29
 8002c70:	20000674 	.word	0x20000674
 8002c74:	20000240 	.word	0x20000240
 8002c78:	20000584 	.word	0x20000584
 8002c7c:	20000238 	.word	0x20000238
 8002c80:	2000022c 	.word	0x2000022c
 8002c84:	51eb851f 	.word	0x51eb851f
 8002c88:	2000023c 	.word	0x2000023c
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000228 	.word	0x20000228
 8002c94:	20000350 	.word	0x20000350
 8002c98:	200004e0 	.word	0x200004e0
 8002c9c:	20000448 	.word	0x20000448
 8002ca0:	20000550 	.word	0x20000550
 8002ca4:	20000290 	.word	0x20000290
 8002ca8:	200004f8 	.word	0x200004f8
 8002cac:	20000554 	.word	0x20000554
 8002cb0:	20000494 	.word	0x20000494
 8002cb4:	20000560 	.word	0x20000560
 8002cb8:	200004f0 	.word	0x200004f0
 8002cbc:	2000055c 	.word	0x2000055c
 8002cc0:	20000490 	.word	0x20000490
 8002cc4:	20000298 	.word	0x20000298
 8002cc8:	200002f8 	.word	0x200002f8
 8002ccc:	200004f4 	.word	0x200004f4
 8002cd0:	20000244 	.word	0x20000244
 8002cd4:	20000580 	.word	0x20000580
 8002cd8:	20000248 	.word	0x20000248
 8002cdc:	200003f8 	.word	0x200003f8

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <TIM2_IRQHandler+0x32c>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <TIM2_IRQHandler+0x330>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <TIM2_IRQHandler+0x334>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

  				}break;
 8002cf2:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <TIM2_IRQHandler+0x338>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <TIM2_IRQHandler+0x338>)
 8002cfc:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <TIM2_IRQHandler+0x338>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d06:	d12a      	bne.n	8002d5e <TIM2_IRQHandler+0x35e>
  {
    		MSGprerSecond=MSGcount;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <TIM2_IRQHandler+0x33c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <TIM2_IRQHandler+0x340>)
 8002d0e:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <TIM2_IRQHandler+0x33c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d819      	bhi.n	8002d4c <TIM2_IRQHandler+0x34c>
    		{
    			MSGLowCount++;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <TIM2_IRQHandler+0x344>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <TIM2_IRQHandler+0x344>)
 8002d20:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <TIM2_IRQHandler+0x348>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e013      	b.n	8002d52 <TIM2_IRQHandler+0x352>
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000244 	.word	0x20000244
 8002d34:	20000248 	.word	0x20000248
 8002d38:	2000056c 	.word	0x2000056c
 8002d3c:	20000580 	.word	0x20000580
 8002d40:	20000650 	.word	0x20000650
 8002d44:	2000064c 	.word	0x2000064c
 8002d48:	2000066c 	.word	0x2000066c
    		}
    		 else  ConnectWeakFlag=0;
 8002d4c:	4bb8      	ldr	r3, [pc, #736]	; (8003030 <TIM2_IRQHandler+0x630>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002d52:	4bb8      	ldr	r3, [pc, #736]	; (8003034 <TIM2_IRQHandler+0x634>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8002d58:	4bb7      	ldr	r3, [pc, #732]	; (8003038 <TIM2_IRQHandler+0x638>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8002d5e:	49b7      	ldr	r1, [pc, #732]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002d60:	48b7      	ldr	r0, [pc, #732]	; (8003040 <TIM2_IRQHandler+0x640>)
 8002d62:	f7fe fa39 	bl	80011d8 <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8002d66:	49b5      	ldr	r1, [pc, #724]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002d68:	48b5      	ldr	r0, [pc, #724]	; (8003040 <TIM2_IRQHandler+0x640>)
 8002d6a:	f7fe fa67 	bl	800123c <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8002d6e:	4bb3      	ldr	r3, [pc, #716]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002d70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4bb3      	ldr	r3, [pc, #716]	; (8003044 <TIM2_IRQHandler+0x644>)
 8002d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	4bb0      	ldr	r3, [pc, #704]	; (8003048 <TIM2_IRQHandler+0x648>)
 8002d86:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8002d88:	4bac      	ldr	r3, [pc, #688]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4bae      	ldr	r3, [pc, #696]	; (800304c <TIM2_IRQHandler+0x64c>)
 8002d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	4bac      	ldr	r3, [pc, #688]	; (8003050 <TIM2_IRQHandler+0x650>)
 8002da0:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8002da2:	4ba6      	ldr	r3, [pc, #664]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002da4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4baa      	ldr	r3, [pc, #680]	; (8003054 <TIM2_IRQHandler+0x654>)
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	4ba7      	ldr	r3, [pc, #668]	; (8003058 <TIM2_IRQHandler+0x658>)
 8002dba:	801a      	strh	r2, [r3, #0]

  AnglePitchGyro+=GyroXcal*GYROFACTORANGLE;
 8002dbc:	4ba2      	ldr	r3, [pc, #648]	; (8003048 <TIM2_IRQHandler+0x648>)
 8002dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ff6a 	bl	8000c9c <__aeabi_i2f>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	49a4      	ldr	r1, [pc, #656]	; (800305c <TIM2_IRQHandler+0x65c>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd ffb9 	bl	8000d44 <__aeabi_fmul>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4ba2      	ldr	r3, [pc, #648]	; (8003060 <TIM2_IRQHandler+0x660>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f7fd fea9 	bl	8000b34 <__addsf3>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <TIM2_IRQHandler+0x660>)
 8002de8:	601a      	str	r2, [r3, #0]
  AngleRollGyro+=GyroYcal*GYROFACTORANGLE;
 8002dea:	4b99      	ldr	r3, [pc, #612]	; (8003050 <TIM2_IRQHandler+0x650>)
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ff53 	bl	8000c9c <__aeabi_i2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4998      	ldr	r1, [pc, #608]	; (800305c <TIM2_IRQHandler+0x65c>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd ffa2 	bl	8000d44 <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b97      	ldr	r3, [pc, #604]	; (8003064 <TIM2_IRQHandler+0x664>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fd fe92 	bl	8000b34 <__addsf3>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b93      	ldr	r3, [pc, #588]	; (8003064 <TIM2_IRQHandler+0x664>)
 8002e16:	601a      	str	r2, [r3, #0]

  //correct angles with jaw axis correction
  AnglePitchGyro+=AngleRollGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <TIM2_IRQHandler+0x660>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb03 	bl	8000428 <__aeabi_f2d>
 8002e22:	4680      	mov	r8, r0
 8002e24:	4689      	mov	r9, r1
 8002e26:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <TIM2_IRQHandler+0x664>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fafc 	bl	8000428 <__aeabi_f2d>
 8002e30:	4682      	mov	sl, r0
 8002e32:	468b      	mov	fp, r1
 8002e34:	4b88      	ldr	r3, [pc, #544]	; (8003058 <TIM2_IRQHandler+0x658>)
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd ff2e 	bl	8000c9c <__aeabi_i2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4989      	ldr	r1, [pc, #548]	; (8003068 <TIM2_IRQHandler+0x668>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff7d 	bl	8000d44 <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4983      	ldr	r1, [pc, #524]	; (800305c <TIM2_IRQHandler+0x65c>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd ff78 	bl	8000d44 <__aeabi_fmul>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fae6 	bl	8000428 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f006 fc0e 	bl	8009684 <sin>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4650      	mov	r0, sl
 8002e6e:	4659      	mov	r1, fp
 8002e70:	f7fd fb32 	bl	80004d8 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4640      	mov	r0, r8
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	f7fd f976 	bl	800016c <__adddf3>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fd fdfe 	bl	8000a88 <__aeabi_d2f>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <TIM2_IRQHandler+0x660>)
 8002e90:	601a      	str	r2, [r3, #0]
  AngleRollGyro-=AnglePitchGyro * sin(GyroZcal * DEGREESTORADIANS * GYROFACTORANGLE);
 8002e92:	4b74      	ldr	r3, [pc, #464]	; (8003064 <TIM2_IRQHandler+0x664>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fac6 	bl	8000428 <__aeabi_f2d>
 8002e9c:	4680      	mov	r8, r0
 8002e9e:	4689      	mov	r9, r1
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <TIM2_IRQHandler+0x660>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fabf 	bl	8000428 <__aeabi_f2d>
 8002eaa:	4682      	mov	sl, r0
 8002eac:	468b      	mov	fp, r1
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <TIM2_IRQHandler+0x658>)
 8002eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fef1 	bl	8000c9c <__aeabi_i2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	496a      	ldr	r1, [pc, #424]	; (8003068 <TIM2_IRQHandler+0x668>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ff40 	bl	8000d44 <__aeabi_fmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4965      	ldr	r1, [pc, #404]	; (800305c <TIM2_IRQHandler+0x65c>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ff3b 	bl	8000d44 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd faa9 	bl	8000428 <__aeabi_f2d>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f006 fbd1 	bl	8009684 <sin>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4650      	mov	r0, sl
 8002ee8:	4659      	mov	r1, fp
 8002eea:	f7fd faf5 	bl	80004d8 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	f7fd f937 	bl	8000168 <__aeabi_dsub>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fdc1 	bl	8000a88 <__aeabi_d2f>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <TIM2_IRQHandler+0x664>)
 8002f0a:	601a      	str	r2, [r3, #0]

  //Accelerometer angles
  Acc_vector=sqrt((mpu6050DataStr.Accelerometer_X * mpu6050DataStr.Accelerometer_X)+(mpu6050DataStr.Accelerometer_Y * mpu6050DataStr.Accelerometer_Y)+(mpu6050DataStr.Accelerometer_Z * mpu6050DataStr.Accelerometer_Z));
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b49      	ldr	r3, [pc, #292]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1a:	fb03 f202 	mul.w	r2, r3, r2
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b45      	ldr	r3, [pc, #276]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f2c:	fb03 f301 	mul.w	r3, r3, r1
 8002f30:	441a      	add	r2, r3
 8002f32:	4b42      	ldr	r3, [pc, #264]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f40:	fb03 f301 	mul.w	r3, r3, r1
 8002f44:	4413      	add	r3, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fa5c 	bl	8000404 <__aeabi_i2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f006 fc24 	bl	80097a0 <sqrt>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fd92 	bl	8000a88 <__aeabi_d2f>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <TIM2_IRQHandler+0x66c>)
 8002f68:	601a      	str	r2, [r3, #0]
  AnglePitchAccel=asin((float)mpu6050DataStr.Accelerometer_Y/Acc_vector)*READIANSTODEGREES;
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fe93 	bl	8000c9c <__aeabi_i2f>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b3c      	ldr	r3, [pc, #240]	; (800306c <TIM2_IRQHandler+0x66c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7fd ff94 	bl	8000eac <__aeabi_fdiv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fa4e 	bl	8000428 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f006 fbb0 	bl	80096f8 <asin>
 8002f98:	a323      	add	r3, pc, #140	; (adr r3, 8003028 <TIM2_IRQHandler+0x628>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fa9b 	bl	80004d8 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fd6d 	bl	8000a88 <__aeabi_d2f>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <TIM2_IRQHandler+0x670>)
 8002fb2:	601a      	str	r2, [r3, #0]
  AngleRollAccel=-asin((float)mpu6050DataStr.Accelerometer_X/Acc_vector)*READIANSTODEGREES;
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <TIM2_IRQHandler+0x63c>)
 8002fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fe6e 	bl	8000c9c <__aeabi_i2f>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <TIM2_IRQHandler+0x66c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fd ff6f 	bl	8000eac <__aeabi_fdiv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fa29 	bl	8000428 <__aeabi_f2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f006 fb8b 	bl	80096f8 <asin>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4614      	mov	r4, r2
 8002fe8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002fec:	a30e      	add	r3, pc, #56	; (adr r3, 8003028 <TIM2_IRQHandler+0x628>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	f7fd fa6f 	bl	80004d8 <__aeabi_dmul>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	4618      	mov	r0, r3
 8003000:	4621      	mov	r1, r4
 8003002:	f7fd fd41 	bl	8000a88 <__aeabi_d2f>
 8003006:	4602      	mov	r2, r0
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <TIM2_IRQHandler+0x674>)
 800300a:	601a      	str	r2, [r3, #0]

  AnglePitchAccel-=ACCELPITCHMANUALOFFSET;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <TIM2_IRQHandler+0x670>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4919      	ldr	r1, [pc, #100]	; (8003078 <TIM2_IRQHandler+0x678>)
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fd8c 	bl	8000b30 <__aeabi_fsub>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <TIM2_IRQHandler+0x670>)
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e02c      	b.n	800307c <TIM2_IRQHandler+0x67c>
 8003022:	bf00      	nop
 8003024:	f3af 8000 	nop.w
 8003028:	20000000 	.word	0x20000000
 800302c:	404ca5dc 	.word	0x404ca5dc
 8003030:	2000066c 	.word	0x2000066c
 8003034:	20000580 	.word	0x20000580
 8003038:	2000056c 	.word	0x2000056c
 800303c:	2000053c 	.word	0x2000053c
 8003040:	200002fc 	.word	0x200002fc
 8003044:	20000370 	.word	0x20000370
 8003048:	2000029c 	.word	0x2000029c
 800304c:	200003f0 	.word	0x200003f0
 8003050:	20000384 	.word	0x20000384
 8003054:	2000029e 	.word	0x2000029e
 8003058:	2000048c 	.word	0x2000048c
 800305c:	38001203 	.word	0x38001203
 8003060:	20000660 	.word	0x20000660
 8003064:	20000574 	.word	0x20000574
 8003068:	3c8efa35 	.word	0x3c8efa35
 800306c:	20000570 	.word	0x20000570
 8003070:	20000664 	.word	0x20000664
 8003074:	20000654 	.word	0x20000654
 8003078:	3e4ccccd 	.word	0x3e4ccccd
  AngleRollAccel-=ACCELROLLMANUALOFFSET;
 800307c:	4bb0      	ldr	r3, [pc, #704]	; (8003340 <TIM2_IRQHandler+0x940>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	49b0      	ldr	r1, [pc, #704]	; (8003344 <TIM2_IRQHandler+0x944>)
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fd54 	bl	8000b30 <__aeabi_fsub>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4bac      	ldr	r3, [pc, #688]	; (8003340 <TIM2_IRQHandler+0x940>)
 800308e:	601a      	str	r2, [r3, #0]

  AnglePitch=0.998*AnglePitchGyro + 0.002*AnglePitchAccel;
 8003090:	4bad      	ldr	r3, [pc, #692]	; (8003348 <TIM2_IRQHandler+0x948>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f9c7 	bl	8000428 <__aeabi_f2d>
 800309a:	a39f      	add	r3, pc, #636	; (adr r3, 8003318 <TIM2_IRQHandler+0x918>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fa1a 	bl	80004d8 <__aeabi_dmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	4625      	mov	r5, r4
 80030aa:	461c      	mov	r4, r3
 80030ac:	4ba7      	ldr	r3, [pc, #668]	; (800334c <TIM2_IRQHandler+0x94c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd f9b9 	bl	8000428 <__aeabi_f2d>
 80030b6:	a39a      	add	r3, pc, #616	; (adr r3, 8003320 <TIM2_IRQHandler+0x920>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fa0c 	bl	80004d8 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd f850 	bl	800016c <__adddf3>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	4618      	mov	r0, r3
 80030d2:	4621      	mov	r1, r4
 80030d4:	f7fd fcd8 	bl	8000a88 <__aeabi_d2f>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b9d      	ldr	r3, [pc, #628]	; (8003350 <TIM2_IRQHandler+0x950>)
 80030dc:	601a      	str	r2, [r3, #0]
  AngleRoll=0.998*AngleRollGyro + 0.002*AngleRollAccel;
 80030de:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <TIM2_IRQHandler+0x954>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd f9a0 	bl	8000428 <__aeabi_f2d>
 80030e8:	a38b      	add	r3, pc, #556	; (adr r3, 8003318 <TIM2_IRQHandler+0x918>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f7fd f9f3 	bl	80004d8 <__aeabi_dmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	4625      	mov	r5, r4
 80030f8:	461c      	mov	r4, r3
 80030fa:	4b91      	ldr	r3, [pc, #580]	; (8003340 <TIM2_IRQHandler+0x940>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd f992 	bl	8000428 <__aeabi_f2d>
 8003104:	a386      	add	r3, pc, #536	; (adr r3, 8003320 <TIM2_IRQHandler+0x920>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd f9e5 	bl	80004d8 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f7fd f829 	bl	800016c <__adddf3>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	4618      	mov	r0, r3
 8003120:	4621      	mov	r1, r4
 8003122:	f7fd fcb1 	bl	8000a88 <__aeabi_d2f>
 8003126:	4602      	mov	r2, r0
 8003128:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <TIM2_IRQHandler+0x958>)
 800312a:	601a      	str	r2, [r3, #0]

  //GYRO Data deg/s for 3 PID loops Filtered
  PitchGyroPIDin =  (PitchGyroPIDin * 0.7) + (AnglePitch * 0.3);
 800312c:	4b8b      	ldr	r3, [pc, #556]	; (800335c <TIM2_IRQHandler+0x95c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd f979 	bl	8000428 <__aeabi_f2d>
 8003136:	a37c      	add	r3, pc, #496	; (adr r3, 8003328 <TIM2_IRQHandler+0x928>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f9cc 	bl	80004d8 <__aeabi_dmul>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	4625      	mov	r5, r4
 8003146:	461c      	mov	r4, r3
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <TIM2_IRQHandler+0x950>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f96b 	bl	8000428 <__aeabi_f2d>
 8003152:	a377      	add	r3, pc, #476	; (adr r3, 8003330 <TIM2_IRQHandler+0x930>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd f9be 	bl	80004d8 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd f802 	bl	800016c <__adddf3>
 8003168:	4603      	mov	r3, r0
 800316a:	460c      	mov	r4, r1
 800316c:	4618      	mov	r0, r3
 800316e:	4621      	mov	r1, r4
 8003170:	f7fd fc8a 	bl	8000a88 <__aeabi_d2f>
 8003174:	4602      	mov	r2, r0
 8003176:	4b79      	ldr	r3, [pc, #484]	; (800335c <TIM2_IRQHandler+0x95c>)
 8003178:	601a      	str	r2, [r3, #0]
  RollGyroPIDin = (RollGyroPIDin * 0.7) + (AngleRoll * 0.3);
 800317a:	4b79      	ldr	r3, [pc, #484]	; (8003360 <TIM2_IRQHandler+0x960>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f952 	bl	8000428 <__aeabi_f2d>
 8003184:	a368      	add	r3, pc, #416	; (adr r3, 8003328 <TIM2_IRQHandler+0x928>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd f9a5 	bl	80004d8 <__aeabi_dmul>
 800318e:	4603      	mov	r3, r0
 8003190:	460c      	mov	r4, r1
 8003192:	4625      	mov	r5, r4
 8003194:	461c      	mov	r4, r3
 8003196:	4b70      	ldr	r3, [pc, #448]	; (8003358 <TIM2_IRQHandler+0x958>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f944 	bl	8000428 <__aeabi_f2d>
 80031a0:	a363      	add	r3, pc, #396	; (adr r3, 8003330 <TIM2_IRQHandler+0x930>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f997 	bl	80004d8 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fc ffdb 	bl	800016c <__adddf3>
 80031b6:	4603      	mov	r3, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	4618      	mov	r0, r3
 80031bc:	4621      	mov	r1, r4
 80031be:	f7fd fc63 	bl	8000a88 <__aeabi_d2f>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <TIM2_IRQHandler+0x960>)
 80031c6:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA

  //Input Controller Center to MAX 50 - >100  --->0-800 us
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,50,100,MINTRHOTTLE,THROTTLESCALE);//throttle limit to 80%
 80031c8:	4b66      	ldr	r3, [pc, #408]	; (8003364 <TIM2_IRQHandler+0x964>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd61 	bl	8000c94 <__aeabi_ui2f>
 80031d2:	4b65      	ldr	r3, [pc, #404]	; (8003368 <TIM2_IRQHandler+0x968>)
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <TIM2_IRQHandler+0x96c>)
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <TIM2_IRQHandler+0x970>)
 80031da:	4966      	ldr	r1, [pc, #408]	; (8003374 <TIM2_IRQHandler+0x974>)
 80031dc:	f000 faac 	bl	8003738 <ScaleDataFl>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b65      	ldr	r3, [pc, #404]	; (8003378 <TIM2_IRQHandler+0x978>)
 80031e4:	601a      	str	r2, [r3, #0]

  //TESTING potenciometer=throttle
  ThrottleINscaled=ScaleDataFl(potenc1,0,100,0,1000);//direct 10-100 -->0-1000 testing
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <TIM2_IRQHandler+0x97c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fd52 	bl	8000c94 <__aeabi_ui2f>
 80031f0:	4b63      	ldr	r3, [pc, #396]	; (8003380 <TIM2_IRQHandler+0x980>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	4a5d      	ldr	r2, [pc, #372]	; (8003370 <TIM2_IRQHandler+0x970>)
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f000 fa9b 	bl	8003738 <ScaleDataFl>
 8003202:	4602      	mov	r2, r0
 8003204:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <TIM2_IRQHandler+0x978>)
 8003206:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0 -> 100 -----> -45 ->45 deg/s
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-MAXPITCHSCALE,MAXPITCHSCALE);
 8003208:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <TIM2_IRQHandler+0x984>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fd41 	bl	8000c94 <__aeabi_ui2f>
 8003212:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <TIM2_IRQHandler+0x988>)
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4b5d      	ldr	r3, [pc, #372]	; (800338c <TIM2_IRQHandler+0x98c>)
 8003218:	4a55      	ldr	r2, [pc, #340]	; (8003370 <TIM2_IRQHandler+0x970>)
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	f000 fa8b 	bl	8003738 <ScaleDataFl>
 8003222:	4602      	mov	r2, r0
 8003224:	4b5a      	ldr	r3, [pc, #360]	; (8003390 <TIM2_IRQHandler+0x990>)
 8003226:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 -----> -45 ->45 deg/s
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-MAXROLLSCALE,MAXROLLSCALE);
 8003228:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <TIM2_IRQHandler+0x994>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fd31 	bl	8000c94 <__aeabi_ui2f>
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <TIM2_IRQHandler+0x988>)
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4b55      	ldr	r3, [pc, #340]	; (800338c <TIM2_IRQHandler+0x98c>)
 8003238:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <TIM2_IRQHandler+0x970>)
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	f000 fa7b 	bl	8003738 <ScaleDataFl>
 8003242:	4602      	mov	r2, r0
 8003244:	4b54      	ldr	r3, [pc, #336]	; (8003398 <TIM2_IRQHandler+0x998>)
 8003246:	601a      	str	r2, [r3, #0]

  //Roll LEFT->RIGHT 0 -> 100 -----> -180 ->180 deg/s
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-MAXYAWSCALE,MAXYAWSCALE);
 8003248:	4b54      	ldr	r3, [pc, #336]	; (800339c <TIM2_IRQHandler+0x99c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fd21 	bl	8000c94 <__aeabi_ui2f>
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <TIM2_IRQHandler+0x9a0>)
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <TIM2_IRQHandler+0x9a4>)
 8003258:	4a45      	ldr	r2, [pc, #276]	; (8003370 <TIM2_IRQHandler+0x970>)
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	f000 fa6b 	bl	8003738 <ScaleDataFl>
 8003262:	4602      	mov	r2, r0
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <TIM2_IRQHandler+0x9a8>)
 8003266:	601a      	str	r2, [r3, #0]

  //TESTING
  pid_p_gain_roll=potenc2*0.1;
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <TIM2_IRQHandler+0x9ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f8b9 	bl	80003e4 <__aeabi_ui2d>
 8003272:	a331      	add	r3, pc, #196	; (adr r3, 8003338 <TIM2_IRQHandler+0x938>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd f92e 	bl	80004d8 <__aeabi_dmul>
 800327c:	4603      	mov	r3, r0
 800327e:	460c      	mov	r4, r1
 8003280:	4618      	mov	r0, r3
 8003282:	4621      	mov	r1, r4
 8003284:	f7fd fc00 	bl	8000a88 <__aeabi_d2f>
 8003288:	4602      	mov	r2, r0
 800328a:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <TIM2_IRQHandler+0x9b0>)
 800328c:	601a      	str	r2, [r3, #0]
  //pid_d_gain_roll=potenc1*8;
  //pid_i_gain_roll=potenc2*0.0001;
  wfl1=pid_p_gain_roll;
 800328e:	4b48      	ldr	r3, [pc, #288]	; (80033b0 <TIM2_IRQHandler+0x9b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a48      	ldr	r2, [pc, #288]	; (80033b4 <TIM2_IRQHandler+0x9b4>)
 8003294:	6013      	str	r3, [r2, #0]
  wfl2=pid_d_gain_roll;
 8003296:	4b48      	ldr	r3, [pc, #288]	; (80033b8 <TIM2_IRQHandler+0x9b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a48      	ldr	r2, [pc, #288]	; (80033bc <TIM2_IRQHandler+0x9bc>)
 800329c:	6013      	str	r3, [r2, #0]
  wfl3=pid_i_gain_roll;
 800329e:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <TIM2_IRQHandler+0x9c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <TIM2_IRQHandler+0x9c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  //test
  //ThrottleINscaled=500;

  //PID
  pid_output_pitch = pid(PitchINscaled, PitchGyroPIDin, pid_p_gain_pitch, pid_i_gain_pitch, pid_d_gain_pitch,&pitch_integral, &pitch_diffErrHist, pid_i_max_pitch, pid_max_pitch);
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <TIM2_IRQHandler+0x990>)
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <TIM2_IRQHandler+0x95c>)
 80032ac:	681e      	ldr	r6, [r3, #0]
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <TIM2_IRQHandler+0x9c8>)
 80032b0:	f8d3 8000 	ldr.w	r8, [r3]
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <TIM2_IRQHandler+0x9cc>)
 80032b6:	f8d3 9000 	ldr.w	r9, [r3]
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <TIM2_IRQHandler+0x9d0>)
 80032bc:	681c      	ldr	r4, [r3, #0]
 80032be:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <TIM2_IRQHandler+0x9d4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fcea 	bl	8000c9c <__aeabi_i2f>
 80032c8:	4682      	mov	sl, r0
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <TIM2_IRQHandler+0x9d8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fce4 	bl	8000c9c <__aeabi_i2f>
 80032d4:	4603      	mov	r3, r0
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	f8cd a00c 	str.w	sl, [sp, #12]
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <TIM2_IRQHandler+0x9dc>)
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <TIM2_IRQHandler+0x9e0>)
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	9400      	str	r4, [sp, #0]
 80032e6:	464b      	mov	r3, r9
 80032e8:	4642      	mov	r2, r8
 80032ea:	4631      	mov	r1, r6
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 fa59 	bl	80037a4 <pid>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <TIM2_IRQHandler+0x9e4>)
 80032f6:	601a      	str	r2, [r3, #0]
  pid_output_roll = pid(RollINscaled, RollGyroPIDin, pid_p_gain_roll, pid_i_gain_roll, pid_d_gain_roll,&roll_integral,&roll_diffErrHist,pid_i_max_roll, pid_max_roll );
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <TIM2_IRQHandler+0x998>)
 80032fa:	681d      	ldr	r5, [r3, #0]
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <TIM2_IRQHandler+0x960>)
 80032fe:	681e      	ldr	r6, [r3, #0]
 8003300:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <TIM2_IRQHandler+0x9b0>)
 8003302:	f8d3 8000 	ldr.w	r8, [r3]
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <TIM2_IRQHandler+0x9c0>)
 8003308:	f8d3 9000 	ldr.w	r9, [r3]
 800330c:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <TIM2_IRQHandler+0x9b8>)
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <TIM2_IRQHandler+0x9e8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	e069      	b.n	80033ec <TIM2_IRQHandler+0x9ec>
 8003318:	b22d0e56 	.word	0xb22d0e56
 800331c:	3fefef9d 	.word	0x3fefef9d
 8003320:	d2f1a9fc 	.word	0xd2f1a9fc
 8003324:	3f60624d 	.word	0x3f60624d
 8003328:	66666666 	.word	0x66666666
 800332c:	3fe66666 	.word	0x3fe66666
 8003330:	33333333 	.word	0x33333333
 8003334:	3fd33333 	.word	0x3fd33333
 8003338:	9999999a 	.word	0x9999999a
 800333c:	3fb99999 	.word	0x3fb99999
 8003340:	20000654 	.word	0x20000654
 8003344:	400ccccd 	.word	0x400ccccd
 8003348:	20000660 	.word	0x20000660
 800334c:	20000664 	.word	0x20000664
 8003350:	20000658 	.word	0x20000658
 8003354:	20000574 	.word	0x20000574
 8003358:	20000678 	.word	0x20000678
 800335c:	2000025c 	.word	0x2000025c
 8003360:	20000260 	.word	0x20000260
 8003364:	200004e0 	.word	0x200004e0
 8003368:	44480000 	.word	0x44480000
 800336c:	42a00000 	.word	0x42a00000
 8003370:	42c80000 	.word	0x42c80000
 8003374:	42480000 	.word	0x42480000
 8003378:	2000024c 	.word	0x2000024c
 800337c:	200004f8 	.word	0x200004f8
 8003380:	447a0000 	.word	0x447a0000
 8003384:	20000550 	.word	0x20000550
 8003388:	42340000 	.word	0x42340000
 800338c:	c2340000 	.word	0xc2340000
 8003390:	20000250 	.word	0x20000250
 8003394:	20000290 	.word	0x20000290
 8003398:	20000254 	.word	0x20000254
 800339c:	20000448 	.word	0x20000448
 80033a0:	43340000 	.word	0x43340000
 80033a4:	c3340000 	.word	0xc3340000
 80033a8:	20000258 	.word	0x20000258
 80033ac:	20000554 	.word	0x20000554
 80033b0:	20000018 	.word	0x20000018
 80033b4:	200004e8 	.word	0x200004e8
 80033b8:	20000020 	.word	0x20000020
 80033bc:	20000498 	.word	0x20000498
 80033c0:	2000001c 	.word	0x2000001c
 80033c4:	20000294 	.word	0x20000294
 80033c8:	20000004 	.word	0x20000004
 80033cc:	20000008 	.word	0x20000008
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	20000014 	.word	0x20000014
 80033d8:	20000010 	.word	0x20000010
 80033dc:	20000270 	.word	0x20000270
 80033e0:	2000026c 	.word	0x2000026c
 80033e4:	20000264 	.word	0x20000264
 80033e8:	20000028 	.word	0x20000028
 80033ec:	f7fd fc56 	bl	8000c9c <__aeabi_i2f>
 80033f0:	4682      	mov	sl, r0
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <TIM2_IRQHandler+0xc20>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fc50 	bl	8000c9c <__aeabi_i2f>
 80033fc:	4603      	mov	r3, r0
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	f8cd a00c 	str.w	sl, [sp, #12]
 8003404:	4b87      	ldr	r3, [pc, #540]	; (8003624 <TIM2_IRQHandler+0xc24>)
 8003406:	9302      	str	r3, [sp, #8]
 8003408:	4b87      	ldr	r3, [pc, #540]	; (8003628 <TIM2_IRQHandler+0xc28>)
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	9400      	str	r4, [sp, #0]
 800340e:	464b      	mov	r3, r9
 8003410:	4642      	mov	r2, r8
 8003412:	4631      	mov	r1, r6
 8003414:	4628      	mov	r0, r5
 8003416:	f000 f9c5 	bl	80037a4 <pid>
 800341a:	4602      	mov	r2, r0
 800341c:	4b83      	ldr	r3, [pc, #524]	; (800362c <TIM2_IRQHandler+0xc2c>)
 800341e:	601a      	str	r2, [r3, #0]
  //pid_output_yaw = pid(YawINscaled, YawGyroPIDin, pid_p_gain_yaw, pid_i_gain_yaw, pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,pid_i_max_roll, pid_max_yaw );

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=0;//if connection is lost!
 8003420:	4b83      	ldr	r3, [pc, #524]	; (8003630 <TIM2_IRQHandler+0xc30>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d102      	bne.n	800342e <TIM2_IRQHandler+0xa2e>
 8003428:	4b82      	ldr	r3, [pc, #520]	; (8003634 <TIM2_IRQHandler+0xc34>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]


  //AutoLevel ON/OFF (TOGGLE 2)
  if(togg2==1)AutoLevel=1;
 800342e:	4b82      	ldr	r3, [pc, #520]	; (8003638 <TIM2_IRQHandler+0xc38>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d103      	bne.n	800343e <TIM2_IRQHandler+0xa3e>
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <TIM2_IRQHandler+0xc3c>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e002      	b.n	8003444 <TIM2_IRQHandler+0xa44>
  else AutoLevel=0;
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <TIM2_IRQHandler+0xc3c>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1)MotorStatus=1;
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <TIM2_IRQHandler+0xc40>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <TIM2_IRQHandler+0xc44>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d006      	beq.n	800345e <TIM2_IRQHandler+0xa5e>
 8003450:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <TIM2_IRQHandler+0xc44>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <TIM2_IRQHandler+0xa5e>
 8003458:	4b76      	ldr	r3, [pc, #472]	; (8003634 <TIM2_IRQHandler+0xc34>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
  togg1hist=togg1;
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <TIM2_IRQHandler+0xc44>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a77      	ldr	r2, [pc, #476]	; (8003640 <TIM2_IRQHandler+0xc40>)
 8003464:	6013      	str	r3, [r2, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=0;
 8003466:	4b77      	ldr	r3, [pc, #476]	; (8003644 <TIM2_IRQHandler+0xc44>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <TIM2_IRQHandler+0xa74>
 800346e:	4b71      	ldr	r3, [pc, #452]	; (8003634 <TIM2_IRQHandler+0xc34>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

  if(MotorStatus==1)
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <TIM2_IRQHandler+0xc34>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10a      	bne.n	8003492 <TIM2_IRQHandler+0xa92>
  {
	  //startup angles Accel to Gyro transfer
	  AnglePitchGyro=AnglePitchAccel;
 800347c:	4b72      	ldr	r3, [pc, #456]	; (8003648 <TIM2_IRQHandler+0xc48>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a72      	ldr	r2, [pc, #456]	; (800364c <TIM2_IRQHandler+0xc4c>)
 8003482:	6013      	str	r3, [r2, #0]
	  AngleRollGyro=AngleRollAccel;
 8003484:	4b72      	ldr	r3, [pc, #456]	; (8003650 <TIM2_IRQHandler+0xc50>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a72      	ldr	r2, [pc, #456]	; (8003654 <TIM2_IRQHandler+0xc54>)
 800348a:	6013      	str	r3, [r2, #0]

	  MotorStatus=2;
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <TIM2_IRQHandler+0xc34>)
 800348e:	2202      	movs	r2, #2
 8003490:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 8003492:	4b68      	ldr	r3, [pc, #416]	; (8003634 <TIM2_IRQHandler+0xc34>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	f040 80ec 	bne.w	8003674 <TIM2_IRQHandler+0xc74>
  {
  	  case 2:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  + pid_output_pitch - pid_output_roll /*+ pid_output_yaw*/;
 800349c:	4b6e      	ldr	r3, [pc, #440]	; (8003658 <TIM2_IRQHandler+0xc58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	496e      	ldr	r1, [pc, #440]	; (800365c <TIM2_IRQHandler+0xc5c>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fb46 	bl	8000b34 <__addsf3>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <TIM2_IRQHandler+0xc60>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7fd fb3e 	bl	8000b34 <__addsf3>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b5b      	ldr	r3, [pc, #364]	; (800362c <TIM2_IRQHandler+0xc2c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7fd fb34 	bl	8000b30 <__aeabi_fsub>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe00 	bl	80010d0 <__aeabi_f2uiz>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b64      	ldr	r3, [pc, #400]	; (8003664 <TIM2_IRQHandler+0xc64>)
 80034d4:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  + pid_output_pitch + pid_output_roll /*- pid_output_yaw*/;
 80034d6:	4b60      	ldr	r3, [pc, #384]	; (8003658 <TIM2_IRQHandler+0xc58>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4960      	ldr	r1, [pc, #384]	; (800365c <TIM2_IRQHandler+0xc5c>)
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fb29 	bl	8000b34 <__addsf3>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <TIM2_IRQHandler+0xc60>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f7fd fb21 	bl	8000b34 <__addsf3>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b4d      	ldr	r3, [pc, #308]	; (800362c <TIM2_IRQHandler+0xc2c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7fd fb19 	bl	8000b34 <__addsf3>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fde3 	bl	80010d0 <__aeabi_f2uiz>
 800350a:	4602      	mov	r2, r0
 800350c:	4b56      	ldr	r3, [pc, #344]	; (8003668 <TIM2_IRQHandler+0xc68>)
 800350e:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  - pid_output_pitch + pid_output_roll /*+ pid_output_yaw*/;
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <TIM2_IRQHandler+0xc58>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4951      	ldr	r1, [pc, #324]	; (800365c <TIM2_IRQHandler+0xc5c>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fb0c 	bl	8000b34 <__addsf3>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <TIM2_IRQHandler+0xc60>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7fd fb02 	bl	8000b30 <__aeabi_fsub>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <TIM2_IRQHandler+0xc2c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7fd fafc 	bl	8000b34 <__addsf3>
 800353c:	4603      	mov	r3, r0
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fdc6 	bl	80010d0 <__aeabi_f2uiz>
 8003544:	4602      	mov	r2, r0
 8003546:	4b49      	ldr	r3, [pc, #292]	; (800366c <TIM2_IRQHandler+0xc6c>)
 8003548:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  - pid_output_pitch - pid_output_roll /*- pid_output_yaw*/;
 800354a:	4b43      	ldr	r3, [pc, #268]	; (8003658 <TIM2_IRQHandler+0xc58>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4943      	ldr	r1, [pc, #268]	; (800365c <TIM2_IRQHandler+0xc5c>)
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd faef 	bl	8000b34 <__addsf3>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <TIM2_IRQHandler+0xc60>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fd fae5 	bl	8000b30 <__aeabi_fsub>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <TIM2_IRQHandler+0xc2c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f7fd fadd 	bl	8000b30 <__aeabi_fsub>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fda9 	bl	80010d0 <__aeabi_f2uiz>
 800357e:	4602      	mov	r2, r0
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <TIM2_IRQHandler+0xc70>)
 8003582:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ MINTRHOTTLE))PWM_Mot1=(1000+ MINTRHOTTLE);
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <TIM2_IRQHandler+0xc64>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 800358c:	d203      	bcs.n	8003596 <TIM2_IRQHandler+0xb96>
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <TIM2_IRQHandler+0xc64>)
 8003590:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003594:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ MINTRHOTTLE))PWM_Mot2=(1000+ MINTRHOTTLE);
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <TIM2_IRQHandler+0xc68>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 800359e:	d203      	bcs.n	80035a8 <TIM2_IRQHandler+0xba8>
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <TIM2_IRQHandler+0xc68>)
 80035a2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80035a6:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ MINTRHOTTLE))PWM_Mot3=(1000+ MINTRHOTTLE);
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <TIM2_IRQHandler+0xc6c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 80035b0:	d203      	bcs.n	80035ba <TIM2_IRQHandler+0xbba>
 80035b2:	4b2e      	ldr	r3, [pc, #184]	; (800366c <TIM2_IRQHandler+0xc6c>)
 80035b4:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80035b8:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ MINTRHOTTLE))PWM_Mot4=(1000+ MINTRHOTTLE);
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <TIM2_IRQHandler+0xc70>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 80035c2:	d203      	bcs.n	80035cc <TIM2_IRQHandler+0xbcc>
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <TIM2_IRQHandler+0xc70>)
 80035c6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80035ca:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <TIM2_IRQHandler+0xc64>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f240 729e 	movw	r2, #1950	; 0x79e
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d903      	bls.n	80035e0 <TIM2_IRQHandler+0xbe0>
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <TIM2_IRQHandler+0xc64>)
 80035da:	f240 729e 	movw	r2, #1950	; 0x79e
 80035de:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <TIM2_IRQHandler+0xc68>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f240 729e 	movw	r2, #1950	; 0x79e
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d903      	bls.n	80035f4 <TIM2_IRQHandler+0xbf4>
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <TIM2_IRQHandler+0xc68>)
 80035ee:	f240 729e 	movw	r2, #1950	; 0x79e
 80035f2:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <TIM2_IRQHandler+0xc6c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f240 729e 	movw	r2, #1950	; 0x79e
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d903      	bls.n	8003608 <TIM2_IRQHandler+0xc08>
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <TIM2_IRQHandler+0xc6c>)
 8003602:	f240 729e 	movw	r2, #1950	; 0x79e
 8003606:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <TIM2_IRQHandler+0xc70>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f240 729e 	movw	r2, #1950	; 0x79e
 8003610:	4293      	cmp	r3, r2
 8003612:	d958      	bls.n	80036c6 <TIM2_IRQHandler+0xcc6>
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <TIM2_IRQHandler+0xc70>)
 8003616:	f240 729e 	movw	r2, #1950	; 0x79e
 800361a:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 800361c:	e053      	b.n	80036c6 <TIM2_IRQHandler+0xcc6>
 800361e:	bf00      	nop
 8003620:	20000024 	.word	0x20000024
 8003624:	20000278 	.word	0x20000278
 8003628:	20000274 	.word	0x20000274
 800362c:	20000268 	.word	0x20000268
 8003630:	2000066c 	.word	0x2000066c
 8003634:	20000230 	.word	0x20000230
 8003638:	20000560 	.word	0x20000560
 800363c:	20000234 	.word	0x20000234
 8003640:	2000067c 	.word	0x2000067c
 8003644:	20000494 	.word	0x20000494
 8003648:	20000664 	.word	0x20000664
 800364c:	20000660 	.word	0x20000660
 8003650:	20000654 	.word	0x20000654
 8003654:	20000574 	.word	0x20000574
 8003658:	2000024c 	.word	0x2000024c
 800365c:	447a0000 	.word	0x447a0000
 8003660:	20000264 	.word	0x20000264
 8003664:	20000668 	.word	0x20000668
 8003668:	2000057c 	.word	0x2000057c
 800366c:	20000578 	.word	0x20000578
 8003670:	2000065c 	.word	0x2000065c

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 8003674:	4b24      	ldr	r3, [pc, #144]	; (8003708 <TIM2_IRQHandler+0xd08>)
 8003676:	f44f 7261 	mov.w	r2, #900	; 0x384
 800367a:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <TIM2_IRQHandler+0xd0c>)
 800367e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003682:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <TIM2_IRQHandler+0xd10>)
 8003686:	f44f 7261 	mov.w	r2, #900	; 0x384
 800368a:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <TIM2_IRQHandler+0xd14>)
 800368e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003692:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <TIM2_IRQHandler+0xd18>)
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <TIM2_IRQHandler+0xd1c>)
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <TIM2_IRQHandler+0xd20>)
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <TIM2_IRQHandler+0xd24>)
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <TIM2_IRQHandler+0xd28>)
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <TIM2_IRQHandler+0xd2c>)
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 80036c4:	e000      	b.n	80036c8 <TIM2_IRQHandler+0xcc8>
  	  	  	  }break;
 80036c6:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <TIM2_IRQHandler+0xd30>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <TIM2_IRQHandler+0xd08>)
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <TIM2_IRQHandler+0xd30>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a0d      	ldr	r2, [pc, #52]	; (800370c <TIM2_IRQHandler+0xd0c>)
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <TIM2_IRQHandler+0xd30>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <TIM2_IRQHandler+0xd10>)
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <TIM2_IRQHandler+0xd30>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <TIM2_IRQHandler+0xd14>)
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f6:	480f      	ldr	r0, [pc, #60]	; (8003734 <TIM2_IRQHandler+0xd34>)
 80036f8:	f001 f8ec 	bl	80048d4 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	3704      	adds	r7, #4
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003706:	bf00      	nop
 8003708:	20000668 	.word	0x20000668
 800370c:	2000057c 	.word	0x2000057c
 8003710:	20000578 	.word	0x20000578
 8003714:	2000065c 	.word	0x2000065c
 8003718:	2000026c 	.word	0x2000026c
 800371c:	20000270 	.word	0x20000270
 8003720:	20000274 	.word	0x20000274
 8003724:	20000278 	.word	0x20000278
 8003728:	2000027c 	.word	0x2000027c
 800372c:	20000280 	.word	0x20000280
 8003730:	200004a0 	.word	0x200004a0
 8003734:	40010c00 	.word	0x40010c00

08003738 <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374a:	f7fd f9f1 	bl	8000b30 <__aeabi_fsub>
 800374e:	4603      	mov	r3, r0
 8003750:	461c      	mov	r4, r3
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd f9eb 	bl	8000b30 <__aeabi_fsub>
 800375a:	4603      	mov	r3, r0
 800375c:	4619      	mov	r1, r3
 800375e:	4620      	mov	r0, r4
 8003760:	f7fd fba4 	bl	8000eac <__aeabi_fdiv>
 8003764:	4603      	mov	r3, r0
 8003766:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7fd f9e0 	bl	8000b30 <__aeabi_fsub>
 8003770:	4603      	mov	r3, r0
 8003772:	6939      	ldr	r1, [r7, #16]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fae5 	bl	8000d44 <__aeabi_fmul>
 800377a:	4603      	mov	r3, r0
 800377c:	4619      	mov	r1, r3
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f7fd f9d8 	bl	8000b34 <__addsf3>
 8003784:	4603      	mov	r3, r0
 8003786:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7fd fc78 	bl	8001080 <__aeabi_fcmplt>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <ScaleDataFl+0x62>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	617b      	str	r3, [r7, #20]

	return out;
 800379a:	697b      	ldr	r3, [r7, #20]

}
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}

080037a4 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	68b8      	ldr	r0, [r7, #8]
 80037b6:	f7fd f9bb 	bl	8000b30 <__aeabi_fsub>
 80037ba:	4603      	mov	r3, r0
 80037bc:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	681c      	ldr	r4, [r3, #0]
 80037c2:	6939      	ldr	r1, [r7, #16]
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f7fd fabd 	bl	8000d44 <__aeabi_fmul>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4619      	mov	r1, r3
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7fd f9b0 	bl	8000b34 <__addsf3>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037e4:	f7fd fc4c 	bl	8001080 <__aeabi_fcmplt>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <pid+0x52>
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e010      	b.n	8003818 <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7fd fc3c 	bl	8001080 <__aeabi_fcmplt>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <pid+0x74>
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 8003818:	6939      	ldr	r1, [r7, #16]
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fa92 	bl	8000d44 <__aeabi_fmul>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fd f982 	bl	8000b34 <__addsf3>
 8003830:	4603      	mov	r3, r0
 8003832:	461c      	mov	r4, r3
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	6938      	ldr	r0, [r7, #16]
 800383c:	f7fd f978 	bl	8000b30 <__aeabi_fsub>
 8003840:	4603      	mov	r3, r0
 8003842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fa7d 	bl	8000d44 <__aeabi_fmul>
 800384a:	4603      	mov	r3, r0
 800384c:	4619      	mov	r1, r3
 800384e:	4620      	mov	r0, r4
 8003850:	f7fd f970 	bl	8000b34 <__addsf3>
 8003854:	4603      	mov	r3, r0
 8003856:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 8003858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7fd fc2e 	bl	80010bc <__aeabi_fcmpgt>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <pid+0xc8>
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e00d      	b.n	8003888 <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003872:	4619      	mov	r1, r3
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f7fd fc03 	bl	8001080 <__aeabi_fcmplt>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <pid+0xe4>
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003886:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	601a      	str	r2, [r3, #0]


	return out;
 800388e:	697b      	ldr	r3, [r7, #20]
}
 8003890:	4618      	mov	r0, r3
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <_sbrk+0x50>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <_sbrk+0x16>
		heap_end = &end;
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <_sbrk+0x50>)
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <_sbrk+0x54>)
 80038ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <_sbrk+0x50>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <_sbrk+0x50>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	466a      	mov	r2, sp
 80038be:	4293      	cmp	r3, r2
 80038c0:	d907      	bls.n	80038d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80038c2:	f003 fe71 	bl	80075a8 <__errno>
 80038c6:	4602      	mov	r2, r0
 80038c8:	230c      	movs	r3, #12
 80038ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d0:	e006      	b.n	80038e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <_sbrk+0x50>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <_sbrk+0x50>)
 80038dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000284 	.word	0x20000284
 80038ec:	20000688 	.word	0x20000688

080038f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <SystemInit+0x5c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <SystemInit+0x5c>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <SystemInit+0x5c>)
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4911      	ldr	r1, [pc, #68]	; (800394c <SystemInit+0x5c>)
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <SystemInit+0x60>)
 8003908:	4013      	ands	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <SystemInit+0x5c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0e      	ldr	r2, [pc, #56]	; (800394c <SystemInit+0x5c>)
 8003912:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <SystemInit+0x5c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0a      	ldr	r2, [pc, #40]	; (800394c <SystemInit+0x5c>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003926:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <SystemInit+0x5c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a07      	ldr	r2, [pc, #28]	; (800394c <SystemInit+0x5c>)
 800392e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003932:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <SystemInit+0x5c>)
 8003936:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800393a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SystemInit+0x64>)
 800393e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003942:	609a      	str	r2, [r3, #8]
#endif 
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	f8ff0000 	.word	0xf8ff0000
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003958:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800395a:	e003      	b.n	8003964 <LoopCopyDataInit>

0800395c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800395e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003960:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003962:	3104      	adds	r1, #4

08003964 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003964:	480a      	ldr	r0, [pc, #40]	; (8003990 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003968:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800396a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800396c:	d3f6      	bcc.n	800395c <CopyDataInit>
  ldr r2, =_sbss
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003970:	e002      	b.n	8003978 <LoopFillZerobss>

08003972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003974:	f842 3b04 	str.w	r3, [r2], #4

08003978 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800397a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800397c:	d3f9      	bcc.n	8003972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800397e:	f7ff ffb7 	bl	80038f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003982:	f003 fe17 	bl	80075b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003986:	f7fd fcbf 	bl	8001308 <main>
  bx lr
 800398a:	4770      	bx	lr
  ldr r3, =_sidata
 800398c:	0800b300 	.word	0x0800b300
  ldr r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003994:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 8003998:	2000020c 	.word	0x2000020c
  ldr r3, = _ebss
 800399c:	20000688 	.word	0x20000688

080039a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039a0:	e7fe      	b.n	80039a0 <ADC1_2_IRQHandler>
	...

080039a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_Init+0x28>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_Init+0x28>)
 80039ae:	f043 0310 	orr.w	r3, r3, #16
 80039b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f000 fdf1 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ba:	2002      	movs	r0, #2
 80039bc:	f000 f808 	bl	80039d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7fe fe34 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40022000 	.word	0x40022000

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_InitTick+0x54>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_InitTick+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fe09 	bl	8004606 <HAL_SYSTICK_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d80a      	bhi.n	8003a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0c:	f000 fdd1 	bl	80045b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a10:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <HAL_InitTick+0x5c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	2000002c 	.word	0x2000002c
 8003a28:	20000034 	.word	0x20000034
 8003a2c:	20000030 	.word	0x20000030

08003a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_IncTick+0x1c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_IncTick+0x20>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_IncTick+0x20>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000034 	.word	0x20000034
 8003a50:	20000680 	.word	0x20000680

08003a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return uwTick;
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <HAL_GetTick+0x10>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	20000680 	.word	0x20000680

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_Delay+0x40>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffe0 	bl	8003a54 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000034 	.word	0x20000034

08003aac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0be      	b.n	8003c4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe fdd0 	bl	8002690 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fbb1 	bl	8004258 <ADC_ConversionStop_Disable>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 8099 	bne.w	8003c3a <HAL_ADC_Init+0x18e>
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 8095 	bne.w	8003c3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7b1b      	ldrb	r3, [r3, #12]
 8003b32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d003      	beq.n	8003b4e <HAL_ADC_Init+0xa2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_ADC_Init+0xa8>
 8003b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_Init+0xaa>
 8003b54:	2300      	movs	r3, #0
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7d1b      	ldrb	r3, [r3, #20]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d119      	bne.n	8003b98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7b1b      	ldrb	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	035a      	lsls	r2, r3, #13
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e00b      	b.n	8003b98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_ADC_Init+0x1a8>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc8:	d003      	beq.n	8003bd2 <HAL_ADC_Init+0x126>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d104      	bne.n	8003bdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_ADC_Init+0x1ac>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10b      	bne.n	8003c18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c16:	e018      	b.n	8003c4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	f023 0312 	bic.w	r3, r3, #18
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c38:	e007      	b.n	8003c4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f043 0210 	orr.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	ffe1f7fd 	.word	0xffe1f7fd
 8003c58:	ff1f0efe 	.word	0xff1f0efe

08003c5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Start+0x1a>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e098      	b.n	8003da8 <HAL_ADC_Start+0x14c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa98 	bl	80041b4 <ADC_Enable>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 8087 	bne.w	8003d9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a41      	ldr	r2, [pc, #260]	; (8003db0 <HAL_ADC_Start+0x154>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d105      	bne.n	8003cba <HAL_ADC_Start+0x5e>
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_ADC_Start+0x158>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d115      	bne.n	8003ce6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d026      	beq.n	8003d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ce4:	e01d      	b.n	8003d22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <HAL_ADC_Start+0x158>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_ADC_Start+0xaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_ADC_Start+0x154>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10d      	bne.n	8003d22 <HAL_ADC_Start+0xc6>
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_ADC_Start+0x158>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f023 0206 	bic.w	r2, r3, #6
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d3a:	e002      	b.n	8003d42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0202 	mvn.w	r2, #2
 8003d52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d62:	d113      	bne.n	8003d8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d68:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <HAL_ADC_Start+0x154>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d105      	bne.n	8003d7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_ADC_Start+0x158>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	e00c      	b.n	8003da6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	e003      	b.n	8003da6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40012800 	.word	0x40012800
 8003db4:	40012400 	.word	0x40012400

08003db8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003dce:	f7ff fe41 	bl	8003a54 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0c8      	b.n	8003f8c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d12a      	bne.n	8003e5e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d123      	bne.n	8003e5e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003e16:	e01a      	b.n	8003e4e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1e:	d016      	beq.n	8003e4e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_ADC_PollForConversion+0x7e>
 8003e26:	f7ff fe15 	bl	8003a54 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d20b      	bcs.n	8003e4e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	f043 0204 	orr.w	r2, r3, #4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e09e      	b.n	8003f8c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0dd      	beq.n	8003e18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e5c:	e06c      	b.n	8003f38 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <HAL_ADC_PollForConversion+0x1dc>)
 8003e60:	681c      	ldr	r4, [r3, #0]
 8003e62:	2002      	movs	r0, #2
 8003e64:	f002 f9c6 	bl	80061f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	4b48      	ldr	r3, [pc, #288]	; (8003f98 <HAL_ADC_PollForConversion+0x1e0>)
 8003e76:	400b      	ands	r3, r1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d118      	bne.n	8003eae <HAL_ADC_PollForConversion+0xf6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_ADC_PollForConversion+0x1e4>)
 8003e84:	400b      	ands	r3, r1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d111      	bne.n	8003eae <HAL_ADC_PollForConversion+0xf6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6919      	ldr	r1, [r3, #16]
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_ADC_PollForConversion+0x1e8>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <HAL_ADC_PollForConversion+0xf2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68d9      	ldr	r1, [r3, #12]
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_ADC_PollForConversion+0x1ec>)
 8003ea0:	400b      	ands	r3, r1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_PollForConversion+0xf2>
 8003ea6:	2314      	movs	r3, #20
 8003ea8:	e020      	b.n	8003eec <HAL_ADC_PollForConversion+0x134>
 8003eaa:	2329      	movs	r3, #41	; 0x29
 8003eac:	e01e      	b.n	8003eec <HAL_ADC_PollForConversion+0x134>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6919      	ldr	r1, [r3, #16]
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_ADC_PollForConversion+0x1e8>)
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_ADC_PollForConversion+0x112>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <HAL_ADC_PollForConversion+0x1ec>)
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_ADC_PollForConversion+0x12e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_ADC_PollForConversion+0x1f0>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_ADC_PollForConversion+0x132>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_ADC_PollForConversion+0x1f0>)
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_PollForConversion+0x132>
 8003ee6:	2354      	movs	r3, #84	; 0x54
 8003ee8:	e000      	b.n	8003eec <HAL_ADC_PollForConversion+0x134>
 8003eea:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003ef2:	e01d      	b.n	8003f30 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efa:	d016      	beq.n	8003f2a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_ADC_PollForConversion+0x15a>
 8003f02:	f7ff fda7 	bl	8003a54 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20b      	bcs.n	8003f2a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	f043 0204 	orr.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e030      	b.n	8003f8c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d8dd      	bhi.n	8003ef4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0212 	mvn.w	r2, #18
 8003f40:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f5c:	d115      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d111      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}
 8003f94:	2000002c 	.word	0x2000002c
 8003f98:	24924924 	.word	0x24924924
 8003f9c:	00924924 	.word	0x00924924
 8003fa0:	12492492 	.word	0x12492492
 8003fa4:	00492492 	.word	0x00492492
 8003fa8:	00249249 	.word	0x00249249

08003fac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x20>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0dc      	b.n	800419e <HAL_ADC_ConfigChannel+0x1da>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d81c      	bhi.n	800402e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	3b05      	subs	r3, #5
 8004006:	221f      	movs	r2, #31
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	4019      	ands	r1, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	3b05      	subs	r3, #5
 8004020:	fa00 f203 	lsl.w	r2, r0, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	635a      	str	r2, [r3, #52]	; 0x34
 800402c:	e03c      	b.n	80040a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d81c      	bhi.n	8004070 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	3b23      	subs	r3, #35	; 0x23
 8004048:	221f      	movs	r2, #31
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	4019      	ands	r1, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	3b23      	subs	r3, #35	; 0x23
 8004062:	fa00 f203 	lsl.w	r2, r0, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
 800406e:	e01b      	b.n	80040a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	3b41      	subs	r3, #65	; 0x41
 8004082:	221f      	movs	r2, #31
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	4019      	ands	r1, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	3b41      	subs	r3, #65	; 0x41
 800409c:	fa00 f203 	lsl.w	r2, r0, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	d91c      	bls.n	80040ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68d9      	ldr	r1, [r3, #12]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	3b1e      	subs	r3, #30
 80040c2:	2207      	movs	r2, #7
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	4019      	ands	r1, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6898      	ldr	r0, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	3b1e      	subs	r3, #30
 80040dc:	fa00 f203 	lsl.w	r2, r0, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	e019      	b.n	800411e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	2207      	movs	r2, #7
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	4019      	ands	r1, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6898      	ldr	r0, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	fa00 f203 	lsl.w	r2, r0, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d003      	beq.n	800412e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800412a:	2b11      	cmp	r3, #17
 800412c:	d132      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d125      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004154:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d11a      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_ADC_ConfigChannel+0x1e8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	0c9a      	lsrs	r2, r3, #18
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004174:	e002      	b.n	800417c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3b01      	subs	r3, #1
 800417a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f9      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x1b2>
 8004182:	e007      	b.n	8004194 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40012400 	.word	0x40012400
 80041ac:	2000002c 	.word	0x2000002c
 80041b0:	431bde83 	.word	0x431bde83

080041b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d039      	beq.n	8004246 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <ADC_Enable+0x9c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <ADC_Enable+0xa0>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0c9b      	lsrs	r3, r3, #18
 80041ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041f0:	e002      	b.n	80041f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f9      	bne.n	80041f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041fe:	f7ff fc29 	bl	8003a54 <HAL_GetTick>
 8004202:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004204:	e018      	b.n	8004238 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004206:	f7ff fc25 	bl	8003a54 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d911      	bls.n	8004238 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f043 0210 	orr.w	r2, r3, #16
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e007      	b.n	8004248 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b01      	cmp	r3, #1
 8004244:	d1df      	bne.n	8004206 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2000002c 	.word	0x2000002c
 8004254:	431bde83 	.word	0x431bde83

08004258 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d127      	bne.n	80042c2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004282:	f7ff fbe7 	bl	8003a54 <HAL_GetTick>
 8004286:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004288:	e014      	b.n	80042b4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428a:	f7ff fbe3 	bl	8003a54 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d90d      	bls.n	80042b4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f043 0210 	orr.w	r2, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e007      	b.n	80042c4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d0e3      	beq.n	800428a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_ADCEx_Calibration_Start+0x1e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e086      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0x12c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ffb0 	bl	8004258 <ADC_ConversionStop_Disable>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d175      	bne.n	80043ee <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800430a:	f023 0302 	bic.w	r3, r3, #2
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_ADCEx_Calibration_Start+0x134>)
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	2002      	movs	r0, #2
 800431c:	f001 ff6a 	bl	80061f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004320:	4603      	mov	r3, r0
 8004322:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004326:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004328:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800432a:	e002      	b.n	8004332 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f9      	bne.n	800432c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff3b 	bl	80041b4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0208 	orr.w	r2, r2, #8
 800434c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800434e:	f7ff fb81 	bl	8003a54 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004354:	e014      	b.n	8004380 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004356:	f7ff fb7d 	bl	8003a54 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b0a      	cmp	r3, #10
 8004362:	d90d      	bls.n	8004380 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	f023 0312 	bic.w	r3, r3, #18
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e03b      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e3      	bne.n	8004356 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0204 	orr.w	r2, r2, #4
 800439c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800439e:	f7ff fb59 	bl	8003a54 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043a4:	e014      	b.n	80043d0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80043a6:	f7ff fb55 	bl	8003a54 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b0a      	cmp	r3, #10
 80043b2:	d90d      	bls.n	80043d0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f023 0312 	bic.w	r3, r3, #18
 80043bc:	f043 0210 	orr.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e013      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e3      	bne.n	80043a6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	2000002c 	.word	0x2000002c

08004404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800442c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <__NVIC_SetPriorityGrouping+0x44>)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	60d3      	str	r3, [r2, #12]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <__NVIC_GetPriorityGrouping+0x18>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	f003 0307 	and.w	r3, r3, #7
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0b      	blt.n	8004492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <__NVIC_EnableIRQ+0x34>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	2001      	movs	r0, #1
 800448a:	fa00 f202 	lsl.w	r2, r0, r2
 800448e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	e000e100 	.word	0xe000e100

080044a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db0a      	blt.n	80044ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	490c      	ldr	r1, [pc, #48]	; (80044ec <__NVIC_SetPriority+0x4c>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	0112      	lsls	r2, r2, #4
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	440b      	add	r3, r1
 80044c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c8:	e00a      	b.n	80044e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <__NVIC_SetPriority+0x50>)
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	3b04      	subs	r3, #4
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	440b      	add	r3, r1
 80044de:	761a      	strb	r2, [r3, #24]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f1c3 0307 	rsb	r3, r3, #7
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf28      	it	cs
 8004512:	2304      	movcs	r3, #4
 8004514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3304      	adds	r3, #4
 800451a:	2b06      	cmp	r3, #6
 800451c:	d902      	bls.n	8004524 <NVIC_EncodePriority+0x30>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3b03      	subs	r3, #3
 8004522:	e000      	b.n	8004526 <NVIC_EncodePriority+0x32>
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	401a      	ands	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43d9      	mvns	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800454c:	4313      	orrs	r3, r2
         );
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457c:	f7ff ff90 	bl	80044a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff2d 	bl	8004404 <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff42 	bl	800444c <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff90 	bl	80044f4 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff5f 	bl	80044a0 <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff35 	bl	8004468 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa2 	bl	8004558 <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004620:	b480      	push	{r7}
 8004622:	b08b      	sub	sp, #44	; 0x2c
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004632:	e127      	b.n	8004884 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004634:	2201      	movs	r2, #1
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	429a      	cmp	r2, r3
 800464e:	f040 8116 	bne.w	800487e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b12      	cmp	r3, #18
 8004658:	d034      	beq.n	80046c4 <HAL_GPIO_Init+0xa4>
 800465a:	2b12      	cmp	r3, #18
 800465c:	d80d      	bhi.n	800467a <HAL_GPIO_Init+0x5a>
 800465e:	2b02      	cmp	r3, #2
 8004660:	d02b      	beq.n	80046ba <HAL_GPIO_Init+0x9a>
 8004662:	2b02      	cmp	r3, #2
 8004664:	d804      	bhi.n	8004670 <HAL_GPIO_Init+0x50>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d031      	beq.n	80046ce <HAL_GPIO_Init+0xae>
 800466a:	2b01      	cmp	r3, #1
 800466c:	d01c      	beq.n	80046a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800466e:	e048      	b.n	8004702 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004670:	2b03      	cmp	r3, #3
 8004672:	d043      	beq.n	80046fc <HAL_GPIO_Init+0xdc>
 8004674:	2b11      	cmp	r3, #17
 8004676:	d01b      	beq.n	80046b0 <HAL_GPIO_Init+0x90>
          break;
 8004678:	e043      	b.n	8004702 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800467a:	4a89      	ldr	r2, [pc, #548]	; (80048a0 <HAL_GPIO_Init+0x280>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d026      	beq.n	80046ce <HAL_GPIO_Init+0xae>
 8004680:	4a87      	ldr	r2, [pc, #540]	; (80048a0 <HAL_GPIO_Init+0x280>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d806      	bhi.n	8004694 <HAL_GPIO_Init+0x74>
 8004686:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <HAL_GPIO_Init+0x284>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d020      	beq.n	80046ce <HAL_GPIO_Init+0xae>
 800468c:	4a86      	ldr	r2, [pc, #536]	; (80048a8 <HAL_GPIO_Init+0x288>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_GPIO_Init+0xae>
          break;
 8004692:	e036      	b.n	8004702 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004694:	4a85      	ldr	r2, [pc, #532]	; (80048ac <HAL_GPIO_Init+0x28c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d019      	beq.n	80046ce <HAL_GPIO_Init+0xae>
 800469a:	4a85      	ldr	r2, [pc, #532]	; (80048b0 <HAL_GPIO_Init+0x290>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d016      	beq.n	80046ce <HAL_GPIO_Init+0xae>
 80046a0:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <HAL_GPIO_Init+0x294>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_GPIO_Init+0xae>
          break;
 80046a6:	e02c      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	623b      	str	r3, [r7, #32]
          break;
 80046ae:	e028      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	623b      	str	r3, [r7, #32]
          break;
 80046b8:	e023      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	3308      	adds	r3, #8
 80046c0:	623b      	str	r3, [r7, #32]
          break;
 80046c2:	e01e      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	330c      	adds	r3, #12
 80046ca:	623b      	str	r3, [r7, #32]
          break;
 80046cc:	e019      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046d6:	2304      	movs	r3, #4
 80046d8:	623b      	str	r3, [r7, #32]
          break;
 80046da:	e012      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046e4:	2308      	movs	r3, #8
 80046e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	611a      	str	r2, [r3, #16]
          break;
 80046ee:	e008      	b.n	8004702 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046f0:	2308      	movs	r3, #8
 80046f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	615a      	str	r2, [r3, #20]
          break;
 80046fa:	e002      	b.n	8004702 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046fc:	2300      	movs	r3, #0
 80046fe:	623b      	str	r3, [r7, #32]
          break;
 8004700:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2bff      	cmp	r3, #255	; 0xff
 8004706:	d801      	bhi.n	800470c <HAL_GPIO_Init+0xec>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	e001      	b.n	8004710 <HAL_GPIO_Init+0xf0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2bff      	cmp	r3, #255	; 0xff
 8004716:	d802      	bhi.n	800471e <HAL_GPIO_Init+0xfe>
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	e002      	b.n	8004724 <HAL_GPIO_Init+0x104>
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	3b08      	subs	r3, #8
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	210f      	movs	r1, #15
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	401a      	ands	r2, r3
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	431a      	orrs	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8096 	beq.w	800487e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004752:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_GPIO_Init+0x298>)
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_GPIO_Init+0x298>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6193      	str	r3, [r2, #24]
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_GPIO_Init+0x298>)
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800476a:	4a54      	ldr	r2, [pc, #336]	; (80048bc <HAL_GPIO_Init+0x29c>)
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4b      	ldr	r2, [pc, #300]	; (80048c0 <HAL_GPIO_Init+0x2a0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_GPIO_Init+0x19e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_GPIO_Init+0x2a4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00d      	beq.n	80047ba <HAL_GPIO_Init+0x19a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a49      	ldr	r2, [pc, #292]	; (80048c8 <HAL_GPIO_Init+0x2a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <HAL_GPIO_Init+0x196>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a48      	ldr	r2, [pc, #288]	; (80048cc <HAL_GPIO_Init+0x2ac>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d101      	bne.n	80047b2 <HAL_GPIO_Init+0x192>
 80047ae:	2303      	movs	r3, #3
 80047b0:	e006      	b.n	80047c0 <HAL_GPIO_Init+0x1a0>
 80047b2:	2304      	movs	r3, #4
 80047b4:	e004      	b.n	80047c0 <HAL_GPIO_Init+0x1a0>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e002      	b.n	80047c0 <HAL_GPIO_Init+0x1a0>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_GPIO_Init+0x1a0>
 80047be:	2300      	movs	r3, #0
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	f002 0203 	and.w	r2, r2, #3
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	4093      	lsls	r3, r2
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047d0:	493a      	ldr	r1, [pc, #232]	; (80048bc <HAL_GPIO_Init+0x29c>)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	3302      	adds	r3, #2
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047ea:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4938      	ldr	r1, [pc, #224]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
 80047f6:	e006      	b.n	8004806 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	43db      	mvns	r3, r3
 8004800:	4933      	ldr	r1, [pc, #204]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004802:	4013      	ands	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	492e      	ldr	r1, [pc, #184]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	604b      	str	r3, [r1, #4]
 800481e:	e006      	b.n	800482e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	43db      	mvns	r3, r3
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 800482a:	4013      	ands	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800483a:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	4924      	ldr	r1, [pc, #144]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
 8004846:	e006      	b.n	8004856 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004848:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	43db      	mvns	r3, r3
 8004850:	491f      	ldr	r1, [pc, #124]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004852:	4013      	ands	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004862:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	491a      	ldr	r1, [pc, #104]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	60cb      	str	r3, [r1, #12]
 800486e:	e006      	b.n	800487e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004870:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	43db      	mvns	r3, r3
 8004878:	4915      	ldr	r1, [pc, #84]	; (80048d0 <HAL_GPIO_Init+0x2b0>)
 800487a:	4013      	ands	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	f47f aed0 	bne.w	8004634 <HAL_GPIO_Init+0x14>
  }
}
 8004894:	bf00      	nop
 8004896:	372c      	adds	r7, #44	; 0x2c
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	10210000 	.word	0x10210000
 80048a4:	10110000 	.word	0x10110000
 80048a8:	10120000 	.word	0x10120000
 80048ac:	10310000 	.word	0x10310000
 80048b0:	10320000 	.word	0x10320000
 80048b4:	10220000 	.word	0x10220000
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40010800 	.word	0x40010800
 80048c4:	40010c00 	.word	0x40010c00
 80048c8:	40011000 	.word	0x40011000
 80048cc:	40011400 	.word	0x40011400
 80048d0:	40010400 	.word	0x40010400

080048d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
 80048e0:	4613      	mov	r3, r2
 80048e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048e4:	787b      	ldrb	r3, [r7, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ea:	887a      	ldrh	r2, [r7, #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048f0:	e003      	b.n	80048fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	041a      	lsls	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004922:	e002      	b.n	800492a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004924:	887a      	ldrh	r2, [r7, #2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e10f      	b.n	8004b66 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd fed4 	bl	8002708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004978:	f001 fb40 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 800497c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4a7b      	ldr	r2, [pc, #492]	; (8004b70 <HAL_I2C_Init+0x23c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d807      	bhi.n	8004998 <HAL_I2C_Init+0x64>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a7a      	ldr	r2, [pc, #488]	; (8004b74 <HAL_I2C_Init+0x240>)
 800498c:	4293      	cmp	r3, r2
 800498e:	bf94      	ite	ls
 8004990:	2301      	movls	r3, #1
 8004992:	2300      	movhi	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e006      	b.n	80049a6 <HAL_I2C_Init+0x72>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a77      	ldr	r2, [pc, #476]	; (8004b78 <HAL_I2C_Init+0x244>)
 800499c:	4293      	cmp	r3, r2
 800499e:	bf94      	ite	ls
 80049a0:	2301      	movls	r3, #1
 80049a2:	2300      	movhi	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0db      	b.n	8004b66 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a72      	ldr	r2, [pc, #456]	; (8004b7c <HAL_I2C_Init+0x248>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a64      	ldr	r2, [pc, #400]	; (8004b70 <HAL_I2C_Init+0x23c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d802      	bhi.n	80049e8 <HAL_I2C_Init+0xb4>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3301      	adds	r3, #1
 80049e6:	e009      	b.n	80049fc <HAL_I2C_Init+0xc8>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	4a63      	ldr	r2, [pc, #396]	; (8004b80 <HAL_I2C_Init+0x24c>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	3301      	adds	r3, #1
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4956      	ldr	r1, [pc, #344]	; (8004b70 <HAL_I2C_Init+0x23c>)
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	d80d      	bhi.n	8004a38 <HAL_I2C_Init+0x104>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1e59      	subs	r1, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	bf38      	it	cc
 8004a34:	2304      	movcc	r3, #4
 8004a36:	e04f      	b.n	8004ad8 <HAL_I2C_Init+0x1a4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <HAL_I2C_Init+0x130>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e012      	b.n	8004a8a <HAL_I2C_Init+0x156>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	0099      	lsls	r1, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x15e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e022      	b.n	8004ad8 <HAL_I2C_Init+0x1a4>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10e      	bne.n	8004ab8 <HAL_I2C_Init+0x184>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e58      	subs	r0, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	440b      	add	r3, r1
 8004aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	e00f      	b.n	8004ad8 <HAL_I2C_Init+0x1a4>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	0099      	lsls	r1, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6809      	ldr	r1, [r1, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6911      	ldr	r1, [r2, #16]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	000186a0 	.word	0x000186a0
 8004b74:	001e847f 	.word	0x001e847f
 8004b78:	003d08ff 	.word	0x003d08ff
 8004b7c:	431bde83 	.word	0x431bde83
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	460b      	mov	r3, r1
 8004b98:	813b      	strh	r3, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b9e:	f7fe ff59 	bl	8003a54 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	f040 80d9 	bne.w	8004d64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2319      	movs	r3, #25
 8004bb8:	2201      	movs	r2, #1
 8004bba:	496d      	ldr	r1, [pc, #436]	; (8004d70 <HAL_I2C_Mem_Write+0x1ec>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fc6b 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e0cc      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Mem_Write+0x56>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0c5      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d007      	beq.n	8004c00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2221      	movs	r2, #33	; 0x21
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2240      	movs	r2, #64	; 0x40
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a4d      	ldr	r2, [pc, #308]	; (8004d74 <HAL_I2C_Mem_Write+0x1f0>)
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c42:	88f8      	ldrh	r0, [r7, #6]
 8004c44:	893a      	ldrh	r2, [r7, #8]
 8004c46:	8979      	ldrh	r1, [r7, #10]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4603      	mov	r3, r0
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fac6 	bl	80051e4 <I2C_RequestMemoryWrite>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d052      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e081      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fcec 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d107      	bne.n	8004c8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06b      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d11b      	bne.n	8004d04 <HAL_I2C_Mem_Write+0x180>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1aa      	bne.n	8004c62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fcd8 	bl	80056c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d107      	bne.n	8004d34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e016      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	00100002 	.word	0x00100002
 8004d74:	ffff0000 	.word	0xffff0000

08004d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	813b      	strh	r3, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d92:	f7fe fe5f 	bl	8003a54 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	f040 8218 	bne.w	80051d6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2319      	movs	r3, #25
 8004dac:	2201      	movs	r2, #1
 8004dae:	4981      	ldr	r1, [pc, #516]	; (8004fb4 <HAL_I2C_Mem_Read+0x23c>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb71 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e20b      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2C_Mem_Read+0x56>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e204      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d007      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2222      	movs	r2, #34	; 0x22
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a61      	ldr	r2, [pc, #388]	; (8004fb8 <HAL_I2C_Mem_Read+0x240>)
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e36:	88f8      	ldrh	r0, [r7, #6]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa56 	bl	80052f8 <I2C_RequestMemoryRead>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e1c0      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	623b      	str	r3, [r7, #32]
 8004e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e194      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d11d      	bne.n	8004eca <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e9e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec6:	b662      	cpsie	i
 8004ec8:	e172      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d11d      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ee2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f0a:	b662      	cpsie	i
 8004f0c:	e150      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f34:	e13c      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	f200 80f5 	bhi.w	800512a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d123      	bne.n	8004f90 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fbfb 	bl	8005748 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e13d      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f8e:	e10f      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d150      	bne.n	800503a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4906      	ldr	r1, [pc, #24]	; (8004fbc <HAL_I2C_Mem_Read+0x244>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa78 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e112      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
 8004fb2:	bf00      	nop
 8004fb4:	00100002 	.word	0x00100002
 8004fb8:	ffff0000 	.word	0xffff0000
 8004fbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004fc0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005004:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005038:	e0ba      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2200      	movs	r2, #0
 8005042:	4967      	ldr	r1, [pc, #412]	; (80051e0 <HAL_I2C_Mem_Read+0x468>)
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa27 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0c1      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005064:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	2200      	movs	r2, #0
 80050a0:	494f      	ldr	r1, [pc, #316]	; (80051e0 <HAL_I2C_Mem_Read+0x468>)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f9f8 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e092      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050f4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005128:	e042      	b.n	80051b0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fb0a 	bl	8005748 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e04c      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d118      	bne.n	80051b0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f aebe 	bne.w	8004f36 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	00010004 	.word	0x00010004

080051e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2200      	movs	r2, #0
 8005216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f93c 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e05f      	b.n	80052ea <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	492d      	ldr	r1, [pc, #180]	; (80052f4 <I2C_RequestMemoryWrite+0x110>)
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f980 	bl	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e04c      	b.n	80052ea <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f9ea 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b04      	cmp	r3, #4
 800527c:	d107      	bne.n	800528e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e02b      	b.n	80052ea <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
 80052a2:	e021      	b.n	80052e8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	6a39      	ldr	r1, [r7, #32]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f9c4 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d107      	bne.n	80052da <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e005      	b.n	80052ea <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052de:	893b      	ldrh	r3, [r7, #8]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	00010002 	.word	0x00010002

080052f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005320:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	2200      	movs	r2, #0
 800533a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f8aa 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e09e      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800534e:	897b      	ldrh	r3, [r7, #10]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800535c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	494c      	ldr	r1, [pc, #304]	; (8005494 <I2C_RequestMemoryRead+0x19c>)
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f8ee 	bl	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e08b      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	6a39      	ldr	r1, [r7, #32]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f958 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d107      	bne.n	80053b2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e06a      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]
 80053c6:	e021      	b.n	800540c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	6a39      	ldr	r1, [r7, #32]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f932 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d107      	bne.n	80053fe <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e044      	b.n	800548c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005402:	893b      	ldrh	r3, [r7, #8]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	6a39      	ldr	r1, [r7, #32]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f917 	bl	8005644 <I2C_WaitOnTXEFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	2b04      	cmp	r3, #4
 8005422:	d107      	bne.n	8005434 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005432:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e029      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005446:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2200      	movs	r2, #0
 8005450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f81f 	bl	8005498 <I2C_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e013      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	6a3a      	ldr	r2, [r7, #32]
 8005478:	4906      	ldr	r1, [pc, #24]	; (8005494 <I2C_RequestMemoryRead+0x19c>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f863 	bl	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	00010002 	.word	0x00010002

08005498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a8:	e025      	b.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d021      	beq.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe facf 	bl	8003a54 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e023      	b.n	800553e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10d      	bne.n	800551c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	e00c      	b.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	43da      	mvns	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d0b6      	beq.n	80054aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005554:	e051      	b.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d123      	bne.n	80055ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800557e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0204 	orr.w	r2, r3, #4
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e046      	b.n	800563c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b4:	d021      	beq.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fe fa4d 	bl	8003a54 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d116      	bne.n	80055fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e020      	b.n	800563c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d10c      	bne.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	43da      	mvns	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e00b      	b.n	8005636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d18d      	bne.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005650:	e02d      	b.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f8ce 	bl	80057f4 <I2C_IsAcknowledgeFailed>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e02d      	b.n	80056be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005668:	d021      	beq.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fe f9f3 	bl	8003a54 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d116      	bne.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e007      	b.n	80056be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d1ca      	bne.n	8005652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d2:	e02d      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f88d 	bl	80057f4 <I2C_IsAcknowledgeFailed>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e02d      	b.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ea:	d021      	beq.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7fe f9b2 	bl	8003a54 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d116      	bne.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e007      	b.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b04      	cmp	r3, #4
 800573c:	d1ca      	bne.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005754:	e042      	b.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b10      	cmp	r3, #16
 8005762:	d119      	bne.n	8005798 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e029      	b.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005798:	f7fe f95c 	bl	8003a54 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d116      	bne.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f043 0220 	orr.w	r2, r3, #32
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e007      	b.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d1b5      	bne.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d11b      	bne.n	8005844 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005814:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f043 0204 	orr.w	r2, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e26c      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8087 	beq.w	800597e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005870:	4b92      	ldr	r3, [pc, #584]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b04      	cmp	r3, #4
 800587a:	d00c      	beq.n	8005896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800587c:	4b8f      	ldr	r3, [pc, #572]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d112      	bne.n	80058ae <HAL_RCC_OscConfig+0x5e>
 8005888:	4b8c      	ldr	r3, [pc, #560]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005894:	d10b      	bne.n	80058ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005896:	4b89      	ldr	r3, [pc, #548]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d06c      	beq.n	800597c <HAL_RCC_OscConfig+0x12c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d168      	bne.n	800597c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e246      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b6:	d106      	bne.n	80058c6 <HAL_RCC_OscConfig+0x76>
 80058b8:	4b80      	ldr	r3, [pc, #512]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7f      	ldr	r2, [pc, #508]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	e02e      	b.n	8005924 <HAL_RCC_OscConfig+0xd4>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x98>
 80058ce:	4b7b      	ldr	r3, [pc, #492]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a7a      	ldr	r2, [pc, #488]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	4b78      	ldr	r3, [pc, #480]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a77      	ldr	r2, [pc, #476]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e01d      	b.n	8005924 <HAL_RCC_OscConfig+0xd4>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f0:	d10c      	bne.n	800590c <HAL_RCC_OscConfig+0xbc>
 80058f2:	4b72      	ldr	r3, [pc, #456]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a71      	ldr	r2, [pc, #452]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6e      	ldr	r2, [pc, #440]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e00b      	b.n	8005924 <HAL_RCC_OscConfig+0xd4>
 800590c:	4b6b      	ldr	r3, [pc, #428]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a6a      	ldr	r2, [pc, #424]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a67      	ldr	r2, [pc, #412]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800591e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fe f892 	bl	8003a54 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fe f88e 	bl	8003a54 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1fa      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b5d      	ldr	r3, [pc, #372]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0xe4>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fe f87e 	bl	8003a54 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800595c:	f7fe f87a 	bl	8003a54 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1e6      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800596e:	4b53      	ldr	r3, [pc, #332]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x10c>
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d063      	beq.n	8005a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800598a:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005996:	4b49      	ldr	r3, [pc, #292]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d11c      	bne.n	80059dc <HAL_RCC_OscConfig+0x18c>
 80059a2:	4b46      	ldr	r3, [pc, #280]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d116      	bne.n	80059dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	4b43      	ldr	r3, [pc, #268]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_RCC_OscConfig+0x176>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e1ba      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4939      	ldr	r1, [pc, #228]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	e03a      	b.n	8005a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e4:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <HAL_RCC_OscConfig+0x270>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ea:	f7fe f833 	bl	8003a54 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fe f82f 	bl	8003a54 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e19b      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a04:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a10:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4927      	ldr	r1, [pc, #156]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
 8005a24:	e015      	b.n	8005a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <HAL_RCC_OscConfig+0x270>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe f812 	bl	8003a54 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a34:	f7fe f80e 	bl	8003a54 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e17a      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d03a      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d019      	beq.n	8005a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <HAL_RCC_OscConfig+0x274>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6c:	f7fd fff2 	bl	8003a54 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fd ffee 	bl	8003a54 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e15a      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_RCC_OscConfig+0x26c>)
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a92:	2001      	movs	r0, #1
 8005a94:	f000 fada 	bl	800604c <RCC_Delay>
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa0:	f7fd ffd8 	bl	8003a54 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa6:	e00f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fd ffd4 	bl	8003a54 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d908      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e140      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	42420000 	.word	0x42420000
 8005ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac8:	4b9e      	ldr	r3, [pc, #632]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e9      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80a6 	beq.w	8005c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ae6:	4b97      	ldr	r3, [pc, #604]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af2:	4b94      	ldr	r3, [pc, #592]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	4a93      	ldr	r2, [pc, #588]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	61d3      	str	r3, [r2, #28]
 8005afe:	4b91      	ldr	r3, [pc, #580]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0e:	4b8e      	ldr	r3, [pc, #568]	; (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d118      	bne.n	8005b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b1a:	4b8b      	ldr	r3, [pc, #556]	; (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a8a      	ldr	r2, [pc, #552]	; (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b26:	f7fd ff95 	bl	8003a54 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2e:	f7fd ff91 	bl	8003a54 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b64      	cmp	r3, #100	; 0x64
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0fd      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b40:	4b81      	ldr	r3, [pc, #516]	; (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <HAL_RCC_OscConfig+0x312>
 8005b54:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	4a7a      	ldr	r2, [pc, #488]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6213      	str	r3, [r2, #32]
 8005b60:	e02d      	b.n	8005bbe <HAL_RCC_OscConfig+0x36e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x334>
 8005b6a:	4b76      	ldr	r3, [pc, #472]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4a75      	ldr	r2, [pc, #468]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6213      	str	r3, [r2, #32]
 8005b76:	4b73      	ldr	r3, [pc, #460]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	4a72      	ldr	r2, [pc, #456]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6213      	str	r3, [r2, #32]
 8005b82:	e01c      	b.n	8005bbe <HAL_RCC_OscConfig+0x36e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x356>
 8005b8c:	4b6d      	ldr	r3, [pc, #436]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4a6c      	ldr	r2, [pc, #432]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	6213      	str	r3, [r2, #32]
 8005b98:	4b6a      	ldr	r3, [pc, #424]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	4a69      	ldr	r2, [pc, #420]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	6213      	str	r3, [r2, #32]
 8005ba4:	e00b      	b.n	8005bbe <HAL_RCC_OscConfig+0x36e>
 8005ba6:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4a66      	ldr	r2, [pc, #408]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6213      	str	r3, [r2, #32]
 8005bb2:	4b64      	ldr	r3, [pc, #400]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	4a63      	ldr	r2, [pc, #396]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d015      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fd ff45 	bl	8003a54 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fd ff41 	bl	8003a54 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0ab      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be4:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ee      	beq.n	8005bce <HAL_RCC_OscConfig+0x37e>
 8005bf0:	e014      	b.n	8005c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf2:	f7fd ff2f 	bl	8003a54 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfa:	f7fd ff2b 	bl	8003a54 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e095      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c10:	4b4c      	ldr	r3, [pc, #304]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ee      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c22:	4b48      	ldr	r3, [pc, #288]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4a47      	ldr	r2, [pc, #284]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8081 	beq.w	8005d3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c38:	4b42      	ldr	r3, [pc, #264]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d061      	beq.n	8005d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d146      	bne.n	8005cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4c:	4b3f      	ldr	r3, [pc, #252]	; (8005d4c <HAL_RCC_OscConfig+0x4fc>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c52:	f7fd feff 	bl	8003a54 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5a:	f7fd fefb 	bl	8003a54 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e067      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c6c:	4b35      	ldr	r3, [pc, #212]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c80:	d108      	bne.n	8005c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c82:	4b30      	ldr	r3, [pc, #192]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	492d      	ldr	r1, [pc, #180]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c94:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a19      	ldr	r1, [r3, #32]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	4927      	ldr	r1, [pc, #156]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cac:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <HAL_RCC_OscConfig+0x4fc>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb2:	f7fd fecf 	bl	8003a54 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cba:	f7fd fecb 	bl	8003a54 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e037      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ccc:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x46a>
 8005cd8:	e02f      	b.n	8005d3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <HAL_RCC_OscConfig+0x4fc>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fd feb8 	bl	8003a54 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd feb4 	bl	8003a54 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e020      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x498>
 8005d06:	e018      	b.n	8005d3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e013      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_RCC_OscConfig+0x4f4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d001      	beq.n	8005d3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	42420060 	.word	0x42420060

08005d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0d0      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d910      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 0207 	bic.w	r2, r3, #7
 8005d7a:	4965      	ldr	r1, [pc, #404]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b63      	ldr	r3, [pc, #396]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0b8      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dac:	4b59      	ldr	r3, [pc, #356]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4a58      	ldr	r2, [pc, #352]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc4:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005dca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd0:	4b50      	ldr	r3, [pc, #320]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	494d      	ldr	r1, [pc, #308]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d040      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d115      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e07f      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d107      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0e:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e073      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1e:	4b3d      	ldr	r3, [pc, #244]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e06b      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f023 0203 	bic.w	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4936      	ldr	r1, [pc, #216]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e40:	f7fd fe08 	bl	8003a54 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e48:	f7fd fe04 	bl	8003a54 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e053      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 020c 	and.w	r2, r3, #12
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d1eb      	bne.n	8005e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d210      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 0207 	bic.w	r2, r3, #7
 8005e86:	4922      	ldr	r1, [pc, #136]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e032      	b.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4916      	ldr	r1, [pc, #88]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	490e      	ldr	r1, [pc, #56]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ede:	f000 f821 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a0a      	ldr	r2, [pc, #40]	; (8005f18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <HAL_RCC_ClockConfig+0x1cc>)
 8005ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <HAL_RCC_ClockConfig+0x1d0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd fd66 	bl	80039d0 <HAL_InitTick>

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40022000 	.word	0x40022000
 8005f14:	40021000 	.word	0x40021000
 8005f18:	0800ae98 	.word	0x0800ae98
 8005f1c:	2000002c 	.word	0x2000002c
 8005f20:	20000030 	.word	0x20000030

08005f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f24:	b490      	push	{r4, r7}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f2c:	1d3c      	adds	r4, r7, #4
 8005f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f34:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	2300      	movs	r3, #0
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x40>
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d003      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0x46>
 8005f62:	e02d      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f66:	623b      	str	r3, [r7, #32]
      break;
 8005f68:	e02d      	b.n	8005fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	0c9b      	lsrs	r3, r3, #18
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f76:	4413      	add	r3, r2
 8005f78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	0c5b      	lsrs	r3, r3, #17
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f96:	4413      	add	r3, r2
 8005f98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4a0f      	ldr	r2, [pc, #60]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fa2:	fb02 f203 	mul.w	r2, r2, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	e004      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	623b      	str	r3, [r7, #32]
      break;
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fc2:	623b      	str	r3, [r7, #32]
      break;
 8005fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc90      	pop	{r4, r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	0800ae5c 	.word	0x0800ae5c
 8005fd8:	0800ae6c 	.word	0x0800ae6c
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	007a1200 	.word	0x007a1200
 8005fe4:	003d0900 	.word	0x003d0900

08005fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fec:	4b02      	ldr	r3, [pc, #8]	; (8005ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	2000002c 	.word	0x2000002c

08005ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006000:	f7ff fff2 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006004:	4601      	mov	r1, r0
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	4a03      	ldr	r2, [pc, #12]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006012:	5cd3      	ldrb	r3, [r2, r3]
 8006014:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40021000 	.word	0x40021000
 8006020:	0800aea8 	.word	0x0800aea8

08006024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006028:	f7ff ffde 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 800602c:	4601      	mov	r1, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0adb      	lsrs	r3, r3, #11
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4a03      	ldr	r2, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40021000 	.word	0x40021000
 8006048:	0800aea8 	.word	0x0800aea8

0800604c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <RCC_Delay+0x34>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <RCC_Delay+0x38>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	0a5b      	lsrs	r3, r3, #9
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006068:	bf00      	nop
  }
  while (Delay --);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	60fa      	str	r2, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f9      	bne.n	8006068 <RCC_Delay+0x1c>
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000002c 	.word	0x2000002c
 8006084:	10624dd3 	.word	0x10624dd3

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d07d      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060a8:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060b4:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4a4b      	ldr	r2, [pc, #300]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060be:	61d3      	str	r3, [r2, #28]
 80060c0:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	4b46      	ldr	r3, [pc, #280]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d118      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060dc:	4b43      	ldr	r3, [pc, #268]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a42      	ldr	r2, [pc, #264]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060e8:	f7fd fcb4 	bl	8003a54 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ee:	e008      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f0:	f7fd fcb0 	bl	8003a54 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b64      	cmp	r3, #100	; 0x64
 80060fc:	d901      	bls.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e06d      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006102:	4b3a      	ldr	r3, [pc, #232]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800610e:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02e      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d027      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800612c:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006134:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d014      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006152:	f7fd fc7f 	bl	8003a54 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006158:	e00a      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fd fc7b 	bl	8003a54 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	; 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e036      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006170:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0ee      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800617c:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4917      	ldr	r1, [pc, #92]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618a:	4313      	orrs	r3, r2
 800618c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006194:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	490b      	ldr	r1, [pc, #44]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	4904      	ldr	r1, [pc, #16]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40007000 	.word	0x40007000
 80061f0:	42420440 	.word	0x42420440

080061f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b08d      	sub	sp, #52	; 0x34
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061fc:	4b55      	ldr	r3, [pc, #340]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061fe:	f107 040c 	add.w	r4, r7, #12
 8006202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006208:	4b53      	ldr	r3, [pc, #332]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	2300      	movs	r3, #0
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006216:	2300      	movs	r3, #0
 8006218:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	2300      	movs	r3, #0
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d07f      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006228:	2b10      	cmp	r3, #16
 800622a:	d002      	beq.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800622c:	2b01      	cmp	r3, #1
 800622e:	d048      	beq.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006230:	e08b      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006232:	4b4a      	ldr	r3, [pc, #296]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006238:	4b48      	ldr	r3, [pc, #288]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d07f      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	0c9b      	lsrs	r3, r3, #18
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006250:	4413      	add	r3, r2
 8006252:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006256:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006262:	4b3e      	ldr	r3, [pc, #248]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	0c5b      	lsrs	r3, r3, #17
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006270:	4413      	add	r3, r2
 8006272:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006282:	4a37      	ldr	r2, [pc, #220]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	fbb2 f2f3 	udiv	r2, r2, r3
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006292:	e004      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	4a33      	ldr	r2, [pc, #204]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006298:	fb02 f303 	mul.w	r3, r2, r3
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800629e:	4b2f      	ldr	r3, [pc, #188]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062aa:	d102      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062b0:	e048      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4a2c      	ldr	r2, [pc, #176]	; (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062c0:	e040      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80062c2:	4b26      	ldr	r3, [pc, #152]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d2:	d108      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80062de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e4:	e01f      	b.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f0:	d109      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80062f2:	4b1a      	ldr	r3, [pc, #104]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80062fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
 8006304:	e00f      	b.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006310:	d11a      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d014      	beq.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800631e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006324:	e010      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006326:	e00f      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006328:	f7ff fe7c 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	0b9b      	lsrs	r3, r3, #14
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	3301      	adds	r3, #1
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006342:	e002      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006348:	bf00      	nop
    }
  }
  return (frequency);
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800634c:	4618      	mov	r0, r3
 800634e:	3734      	adds	r7, #52	; 0x34
 8006350:	46bd      	mov	sp, r7
 8006352:	bd90      	pop	{r4, r7, pc}
 8006354:	0800ae70 	.word	0x0800ae70
 8006358:	0800ae80 	.word	0x0800ae80
 800635c:	40021000 	.word	0x40021000
 8006360:	007a1200 	.word	0x007a1200
 8006364:	003d0900 	.word	0x003d0900
 8006368:	aaaaaaab 	.word	0xaaaaaaab

0800636c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e053      	b.n	8006426 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fc f9f5 	bl	8002788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	ea42 0103 	orr.w	r1, r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	0c1a      	lsrs	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f002 0204 	and.w	r2, r2, #4
 8006404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e01d      	b.n	800647c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7fc f9e3 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f000 fb45 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d007      	beq.n	80064be <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0201 	orr.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e01d      	b.n	8006518 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f815 	bl	8006520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 faf7 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
	...

08006534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2201      	movs	r2, #1
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fd58 	bl	8006ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a10      	ldr	r2, [pc, #64]	; (8006594 <HAL_TIM_PWM_Start+0x60>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d107      	bne.n	8006566 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b06      	cmp	r3, #6
 8006576:	d007      	beq.n	8006588 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00

08006598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d122      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d11b      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0202 	mvn.w	r2, #2
 80065c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa73 	bl	8006ac6 <HAL_TIM_IC_CaptureCallback>
 80065e0:	e005      	b.n	80065ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa66 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa75 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d122      	bne.n	8006648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b04      	cmp	r3, #4
 800660e:	d11b      	bne.n	8006648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0204 	mvn.w	r2, #4
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa49 	bl	8006ac6 <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa3c 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa4b 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b08      	cmp	r3, #8
 8006654:	d122      	bne.n	800669c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b08      	cmp	r3, #8
 8006662:	d11b      	bne.n	800669c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0208 	mvn.w	r2, #8
 800666c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2204      	movs	r2, #4
 8006672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa1f 	bl	8006ac6 <HAL_TIM_IC_CaptureCallback>
 8006688:	e005      	b.n	8006696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa12 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa21 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0210 	mvn.w	r2, #16
 80066c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2208      	movs	r2, #8
 80066c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9f5 	bl	8006ac6 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f9e8 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f9f7 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d10e      	bne.n	800671c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	d107      	bne.n	800671c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0201 	mvn.w	r2, #1
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9c3 	bl	8006aa2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d10e      	bne.n	8006748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b80      	cmp	r3, #128	; 0x80
 8006736:	d107      	bne.n	8006748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fd1c 	bl	8007180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d10e      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d107      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9bb 	bl	8006aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	d10e      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b20      	cmp	r3, #32
 800678e:	d107      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0220 	mvn.w	r2, #32
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fce7 	bl	800716e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067be:	2302      	movs	r3, #2
 80067c0:	e0b4      	b.n	800692c <HAL_TIM_PWM_ConfigChannel+0x184>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	f200 809f 	bhi.w	8006918 <HAL_TIM_PWM_ConfigChannel+0x170>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006815 	.word	0x08006815
 80067e4:	08006919 	.word	0x08006919
 80067e8:	08006919 	.word	0x08006919
 80067ec:	08006919 	.word	0x08006919
 80067f0:	08006855 	.word	0x08006855
 80067f4:	08006919 	.word	0x08006919
 80067f8:	08006919 	.word	0x08006919
 80067fc:	08006919 	.word	0x08006919
 8006800:	08006897 	.word	0x08006897
 8006804:	08006919 	.word	0x08006919
 8006808:	08006919 	.word	0x08006919
 800680c:	08006919 	.word	0x08006919
 8006810:	080068d7 	.word	0x080068d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f9d0 	bl	8006bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0208 	orr.w	r2, r2, #8
 800682e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6999      	ldr	r1, [r3, #24]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	619a      	str	r2, [r3, #24]
      break;
 8006852:	e062      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fa16 	bl	8006c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	021a      	lsls	r2, r3, #8
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	619a      	str	r2, [r3, #24]
      break;
 8006894:	e041      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fa5f 	bl	8006d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0208 	orr.w	r2, r2, #8
 80068b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0204 	bic.w	r2, r2, #4
 80068c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69d9      	ldr	r1, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	61da      	str	r2, [r3, #28]
      break;
 80068d4:	e021      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 faa9 	bl	8006e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	021a      	lsls	r2, r3, #8
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	61da      	str	r2, [r3, #28]
      break;
 8006916:	e000      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006918:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_TIM_ConfigClockSource+0x18>
 8006948:	2302      	movs	r3, #2
 800694a:	e0a6      	b.n	8006a9a <HAL_TIM_ConfigClockSource+0x166>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800696a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d067      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0x120>
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d80b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x6c>
 8006988:	2b10      	cmp	r3, #16
 800698a:	d073      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x140>
 800698c:	2b10      	cmp	r3, #16
 800698e:	d802      	bhi.n	8006996 <HAL_TIM_ConfigClockSource+0x62>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d06f      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006994:	e078      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006996:	2b20      	cmp	r3, #32
 8006998:	d06c      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x140>
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d06a      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800699e:	e073      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80069a0:	2b70      	cmp	r3, #112	; 0x70
 80069a2:	d00d      	beq.n	80069c0 <HAL_TIM_ConfigClockSource+0x8c>
 80069a4:	2b70      	cmp	r3, #112	; 0x70
 80069a6:	d804      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x7e>
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d033      	beq.n	8006a14 <HAL_TIM_ConfigClockSource+0xe0>
 80069ac:	2b60      	cmp	r3, #96	; 0x60
 80069ae:	d041      	beq.n	8006a34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80069b0:	e06a      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d066      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x152>
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069bc:	d017      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80069be:	e063      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f000 faf5 	bl	8006fbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
      break;
 80069ec:	e04c      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6899      	ldr	r1, [r3, #8]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f000 fade 	bl	8006fbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a10:	609a      	str	r2, [r3, #8]
      break;
 8006a12:	e039      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6859      	ldr	r1, [r3, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	461a      	mov	r2, r3
 8006a22:	f000 fa55 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2150      	movs	r1, #80	; 0x50
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 faac 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006a32:	e029      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	461a      	mov	r2, r3
 8006a42:	f000 fa73 	bl	8006f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2160      	movs	r1, #96	; 0x60
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fa9c 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006a52:	e019      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	461a      	mov	r2, r3
 8006a62:	f000 fa35 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fa8c 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006a72:	e009      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f000 fa83 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006a84:	e000      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <TIM_Base_SetConfig+0xbc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <TIM_Base_SetConfig+0xc0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <TIM_Base_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <TIM_Base_SetConfig+0xc0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800

08006bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0201 	bic.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0302 	bic.w	r3, r3, #2
 8006c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <TIM_OC1_SetConfig+0xc8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10c      	bne.n	8006c36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0308 	bic.w	r3, r3, #8
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 0304 	bic.w	r3, r3, #4
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <TIM_OC1_SetConfig+0xc8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d111      	bne.n	8006c62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00

08006c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0210 	bic.w	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0320 	bic.w	r3, r3, #32
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a1d      	ldr	r2, [pc, #116]	; (8006d5c <TIM_OC2_SetConfig+0xd0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10d      	bne.n	8006d08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a14      	ldr	r2, [pc, #80]	; (8006d5c <TIM_OC2_SetConfig+0xd0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d113      	bne.n	8006d38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	40012c00 	.word	0x40012c00

08006d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d10d      	bne.n	8006dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d113      	bne.n	8006e0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	621a      	str	r2, [r3, #32]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00

08006e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ecc <TIM_OC4_SetConfig+0x98>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	019b      	lsls	r3, r3, #6
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	40012c00 	.word	0x40012c00

08006ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f023 030a 	bic.w	r3, r3, #10
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f023 0210 	bic.w	r2, r3, #16
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	031b      	lsls	r3, r3, #12
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	621a      	str	r2, [r3, #32]
}
 8006f80:	bf00      	nop
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f043 0307 	orr.w	r3, r3, #7
 8006fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	609a      	str	r2, [r3, #8]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	021a      	lsls	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	609a      	str	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2201      	movs	r2, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	43db      	mvns	r3, r3
 800701e:	401a      	ands	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	fa01 f303 	lsl.w	r3, r1, r3
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e032      	b.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007094:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4313      	orrs	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e03d      	b.n	8007164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e03f      	b.n	8007224 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fb fb9d 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f90c 	bl	80073f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b20      	cmp	r3, #32
 800724a:	f040 8083 	bne.w	8007354 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_UART_Transmit+0x2e>
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e07b      	b.n	8007356 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UART_Transmit+0x40>
 8007268:	2302      	movs	r3, #2
 800726a:	e074      	b.n	8007356 <HAL_UART_Transmit+0x12a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2221      	movs	r2, #33	; 0x21
 800727e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007282:	f7fc fbe7 	bl	8003a54 <HAL_GetTick>
 8007286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007294:	e042      	b.n	800731c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ac:	d122      	bne.n	80072f4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f850 	bl	800735e <UART_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e046      	b.n	8007356 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072da:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3302      	adds	r3, #2
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	e017      	b.n	800731c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	e013      	b.n	800731c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	2180      	movs	r1, #128	; 0x80
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f82d 	bl	800735e <UART_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e023      	b.n	8007356 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	60ba      	str	r2, [r7, #8]
 8007314:	781a      	ldrb	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1b7      	bne.n	8007296 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	2140      	movs	r1, #64	; 0x40
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f814 	bl	800735e <UART_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e00a      	b.n	8007356 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800736e:	e02c      	b.n	80073ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007376:	d028      	beq.n	80073ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0x30>
 800737e:	f7fc fb69 	bl	8003a54 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	429a      	cmp	r2, r3
 800738c:	d21d      	bcs.n	80073ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800739c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e00f      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4013      	ands	r3, r2
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	bf0c      	ite	eq
 80073da:	2301      	moveq	r3, #1
 80073dc:	2300      	movne	r3, #0
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d0c3      	beq.n	8007370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800742e:	f023 030c 	bic.w	r3, r3, #12
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	430b      	orrs	r3, r1
 800743a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a52      	ldr	r2, [pc, #328]	; (80075a0 <UART_SetConfig+0x1ac>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d14e      	bne.n	80074fa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fe fde2 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8007460:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009a      	lsls	r2, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	fbb2 f3f3 	udiv	r3, r2, r3
 8007478:	4a4a      	ldr	r2, [pc, #296]	; (80075a4 <UART_SetConfig+0x1b0>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	0119      	lsls	r1, r3, #4
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009a      	lsls	r2, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	fbb2 f2f3 	udiv	r2, r2, r3
 8007498:	4b42      	ldr	r3, [pc, #264]	; (80075a4 <UART_SetConfig+0x1b0>)
 800749a:	fba3 0302 	umull	r0, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	2064      	movs	r0, #100	; 0x64
 80074a2:	fb00 f303 	mul.w	r3, r0, r3
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	3332      	adds	r3, #50	; 0x32
 80074ac:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <UART_SetConfig+0x1b0>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074b8:	4419      	add	r1, r3
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009a      	lsls	r2, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80074d0:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <UART_SetConfig+0x1b0>)
 80074d2:	fba3 0302 	umull	r0, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	2064      	movs	r0, #100	; 0x64
 80074da:	fb00 f303 	mul.w	r3, r0, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	3332      	adds	r3, #50	; 0x32
 80074e4:	4a2f      	ldr	r2, [pc, #188]	; (80075a4 <UART_SetConfig+0x1b0>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	f003 020f 	and.w	r2, r3, #15
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	440a      	add	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80074f8:	e04d      	b.n	8007596 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80074fa:	f7fe fd7f 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 80074fe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009a      	lsls	r2, r3, #2
 800750a:	441a      	add	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	fbb2 f3f3 	udiv	r3, r2, r3
 8007516:	4a23      	ldr	r2, [pc, #140]	; (80075a4 <UART_SetConfig+0x1b0>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	0119      	lsls	r1, r3, #4
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009a      	lsls	r2, r3, #2
 800752a:	441a      	add	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	fbb2 f2f3 	udiv	r2, r2, r3
 8007536:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <UART_SetConfig+0x1b0>)
 8007538:	fba3 0302 	umull	r0, r3, r3, r2
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	2064      	movs	r0, #100	; 0x64
 8007540:	fb00 f303 	mul.w	r3, r0, r3
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	3332      	adds	r3, #50	; 0x32
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <UART_SetConfig+0x1b0>)
 800754c:	fba2 2303 	umull	r2, r3, r2, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007556:	4419      	add	r1, r3
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009a      	lsls	r2, r3, #2
 8007562:	441a      	add	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	fbb2 f2f3 	udiv	r2, r2, r3
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <UART_SetConfig+0x1b0>)
 8007570:	fba3 0302 	umull	r0, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2064      	movs	r0, #100	; 0x64
 8007578:	fb00 f303 	mul.w	r3, r0, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a08      	ldr	r2, [pc, #32]	; (80075a4 <UART_SetConfig+0x1b0>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	440a      	add	r2, r1
 8007594:	609a      	str	r2, [r3, #8]
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40013800 	.word	0x40013800
 80075a4:	51eb851f 	.word	0x51eb851f

080075a8 <__errno>:
 80075a8:	4b01      	ldr	r3, [pc, #4]	; (80075b0 <__errno+0x8>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000038 	.word	0x20000038

080075b4 <__libc_init_array>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	2500      	movs	r5, #0
 80075b8:	4e0c      	ldr	r6, [pc, #48]	; (80075ec <__libc_init_array+0x38>)
 80075ba:	4c0d      	ldr	r4, [pc, #52]	; (80075f0 <__libc_init_array+0x3c>)
 80075bc:	1ba4      	subs	r4, r4, r6
 80075be:	10a4      	asrs	r4, r4, #2
 80075c0:	42a5      	cmp	r5, r4
 80075c2:	d109      	bne.n	80075d8 <__libc_init_array+0x24>
 80075c4:	f003 fba0 	bl	800ad08 <_init>
 80075c8:	2500      	movs	r5, #0
 80075ca:	4e0a      	ldr	r6, [pc, #40]	; (80075f4 <__libc_init_array+0x40>)
 80075cc:	4c0a      	ldr	r4, [pc, #40]	; (80075f8 <__libc_init_array+0x44>)
 80075ce:	1ba4      	subs	r4, r4, r6
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	42a5      	cmp	r5, r4
 80075d4:	d105      	bne.n	80075e2 <__libc_init_array+0x2e>
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075dc:	4798      	blx	r3
 80075de:	3501      	adds	r5, #1
 80075e0:	e7ee      	b.n	80075c0 <__libc_init_array+0xc>
 80075e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e6:	4798      	blx	r3
 80075e8:	3501      	adds	r5, #1
 80075ea:	e7f2      	b.n	80075d2 <__libc_init_array+0x1e>
 80075ec:	0800b2f8 	.word	0x0800b2f8
 80075f0:	0800b2f8 	.word	0x0800b2f8
 80075f4:	0800b2f8 	.word	0x0800b2f8
 80075f8:	0800b2fc 	.word	0x0800b2fc

080075fc <memset>:
 80075fc:	4603      	mov	r3, r0
 80075fe:	4402      	add	r2, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <__cvt>:
 800760c:	2b00      	cmp	r3, #0
 800760e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007612:	461e      	mov	r6, r3
 8007614:	bfbb      	ittet	lt
 8007616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800761a:	461e      	movlt	r6, r3
 800761c:	2300      	movge	r3, #0
 800761e:	232d      	movlt	r3, #45	; 0x2d
 8007620:	b088      	sub	sp, #32
 8007622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007624:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007628:	f027 0720 	bic.w	r7, r7, #32
 800762c:	2f46      	cmp	r7, #70	; 0x46
 800762e:	4614      	mov	r4, r2
 8007630:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007632:	700b      	strb	r3, [r1, #0]
 8007634:	d004      	beq.n	8007640 <__cvt+0x34>
 8007636:	2f45      	cmp	r7, #69	; 0x45
 8007638:	d100      	bne.n	800763c <__cvt+0x30>
 800763a:	3501      	adds	r5, #1
 800763c:	2302      	movs	r3, #2
 800763e:	e000      	b.n	8007642 <__cvt+0x36>
 8007640:	2303      	movs	r3, #3
 8007642:	aa07      	add	r2, sp, #28
 8007644:	9204      	str	r2, [sp, #16]
 8007646:	aa06      	add	r2, sp, #24
 8007648:	e9cd a202 	strd	sl, r2, [sp, #8]
 800764c:	e9cd 3500 	strd	r3, r5, [sp]
 8007650:	4622      	mov	r2, r4
 8007652:	4633      	mov	r3, r6
 8007654:	f000 fcd8 	bl	8008008 <_dtoa_r>
 8007658:	2f47      	cmp	r7, #71	; 0x47
 800765a:	4680      	mov	r8, r0
 800765c:	d102      	bne.n	8007664 <__cvt+0x58>
 800765e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007660:	07db      	lsls	r3, r3, #31
 8007662:	d526      	bpl.n	80076b2 <__cvt+0xa6>
 8007664:	2f46      	cmp	r7, #70	; 0x46
 8007666:	eb08 0905 	add.w	r9, r8, r5
 800766a:	d111      	bne.n	8007690 <__cvt+0x84>
 800766c:	f898 3000 	ldrb.w	r3, [r8]
 8007670:	2b30      	cmp	r3, #48	; 0x30
 8007672:	d10a      	bne.n	800768a <__cvt+0x7e>
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4620      	mov	r0, r4
 800767a:	4631      	mov	r1, r6
 800767c:	f7f9 f994 	bl	80009a8 <__aeabi_dcmpeq>
 8007680:	b918      	cbnz	r0, 800768a <__cvt+0x7e>
 8007682:	f1c5 0501 	rsb	r5, r5, #1
 8007686:	f8ca 5000 	str.w	r5, [sl]
 800768a:	f8da 3000 	ldr.w	r3, [sl]
 800768e:	4499      	add	r9, r3
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	4620      	mov	r0, r4
 8007696:	4631      	mov	r1, r6
 8007698:	f7f9 f986 	bl	80009a8 <__aeabi_dcmpeq>
 800769c:	b938      	cbnz	r0, 80076ae <__cvt+0xa2>
 800769e:	2230      	movs	r2, #48	; 0x30
 80076a0:	9b07      	ldr	r3, [sp, #28]
 80076a2:	454b      	cmp	r3, r9
 80076a4:	d205      	bcs.n	80076b2 <__cvt+0xa6>
 80076a6:	1c59      	adds	r1, r3, #1
 80076a8:	9107      	str	r1, [sp, #28]
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e7f8      	b.n	80076a0 <__cvt+0x94>
 80076ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80076b2:	4640      	mov	r0, r8
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076b8:	eba3 0308 	sub.w	r3, r3, r8
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	b008      	add	sp, #32
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080076c4 <__exponent>:
 80076c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076c6:	2900      	cmp	r1, #0
 80076c8:	bfb4      	ite	lt
 80076ca:	232d      	movlt	r3, #45	; 0x2d
 80076cc:	232b      	movge	r3, #43	; 0x2b
 80076ce:	4604      	mov	r4, r0
 80076d0:	bfb8      	it	lt
 80076d2:	4249      	neglt	r1, r1
 80076d4:	2909      	cmp	r1, #9
 80076d6:	f804 2b02 	strb.w	r2, [r4], #2
 80076da:	7043      	strb	r3, [r0, #1]
 80076dc:	dd21      	ble.n	8007722 <__exponent+0x5e>
 80076de:	f10d 0307 	add.w	r3, sp, #7
 80076e2:	461f      	mov	r7, r3
 80076e4:	260a      	movs	r6, #10
 80076e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80076ea:	fb06 1115 	mls	r1, r6, r5, r1
 80076ee:	2d09      	cmp	r5, #9
 80076f0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80076f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076f8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80076fc:	4629      	mov	r1, r5
 80076fe:	dc09      	bgt.n	8007714 <__exponent+0x50>
 8007700:	3130      	adds	r1, #48	; 0x30
 8007702:	3b02      	subs	r3, #2
 8007704:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007708:	42bb      	cmp	r3, r7
 800770a:	4622      	mov	r2, r4
 800770c:	d304      	bcc.n	8007718 <__exponent+0x54>
 800770e:	1a10      	subs	r0, r2, r0
 8007710:	b003      	add	sp, #12
 8007712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007714:	4613      	mov	r3, r2
 8007716:	e7e6      	b.n	80076e6 <__exponent+0x22>
 8007718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771c:	f804 2b01 	strb.w	r2, [r4], #1
 8007720:	e7f2      	b.n	8007708 <__exponent+0x44>
 8007722:	2330      	movs	r3, #48	; 0x30
 8007724:	4419      	add	r1, r3
 8007726:	7083      	strb	r3, [r0, #2]
 8007728:	1d02      	adds	r2, r0, #4
 800772a:	70c1      	strb	r1, [r0, #3]
 800772c:	e7ef      	b.n	800770e <__exponent+0x4a>
	...

08007730 <_printf_float>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	b091      	sub	sp, #68	; 0x44
 8007736:	460c      	mov	r4, r1
 8007738:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800773a:	4693      	mov	fp, r2
 800773c:	461e      	mov	r6, r3
 800773e:	4605      	mov	r5, r0
 8007740:	f001 fa16 	bl	8008b70 <_localeconv_r>
 8007744:	6803      	ldr	r3, [r0, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	f7f8 fd01 	bl	8000150 <strlen>
 800774e:	2300      	movs	r3, #0
 8007750:	930e      	str	r3, [sp, #56]	; 0x38
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	900a      	str	r0, [sp, #40]	; 0x28
 8007756:	3307      	adds	r3, #7
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	f103 0208 	add.w	r2, r3, #8
 8007760:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007764:	f8d4 a000 	ldr.w	sl, [r4]
 8007768:	603a      	str	r2, [r7, #0]
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007772:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800777a:	930b      	str	r3, [sp, #44]	; 0x2c
 800777c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007780:	4ba6      	ldr	r3, [pc, #664]	; (8007a1c <_printf_float+0x2ec>)
 8007782:	4638      	mov	r0, r7
 8007784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007786:	f7f9 f941 	bl	8000a0c <__aeabi_dcmpun>
 800778a:	bb68      	cbnz	r0, 80077e8 <_printf_float+0xb8>
 800778c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007790:	4ba2      	ldr	r3, [pc, #648]	; (8007a1c <_printf_float+0x2ec>)
 8007792:	4638      	mov	r0, r7
 8007794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007796:	f7f9 f91b 	bl	80009d0 <__aeabi_dcmple>
 800779a:	bb28      	cbnz	r0, 80077e8 <_printf_float+0xb8>
 800779c:	2200      	movs	r2, #0
 800779e:	2300      	movs	r3, #0
 80077a0:	4638      	mov	r0, r7
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f9 f90a 	bl	80009bc <__aeabi_dcmplt>
 80077a8:	b110      	cbz	r0, 80077b0 <_printf_float+0x80>
 80077aa:	232d      	movs	r3, #45	; 0x2d
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b0:	4f9b      	ldr	r7, [pc, #620]	; (8007a20 <_printf_float+0x2f0>)
 80077b2:	4b9c      	ldr	r3, [pc, #624]	; (8007a24 <_printf_float+0x2f4>)
 80077b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077b8:	bf98      	it	ls
 80077ba:	461f      	movls	r7, r3
 80077bc:	2303      	movs	r3, #3
 80077be:	f04f 0900 	mov.w	r9, #0
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	f02a 0304 	bic.w	r3, sl, #4
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	9600      	str	r6, [sp, #0]
 80077cc:	465b      	mov	r3, fp
 80077ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f9e2 	bl	8007b9c <_printf_common>
 80077d8:	3001      	adds	r0, #1
 80077da:	f040 8090 	bne.w	80078fe <_printf_float+0x1ce>
 80077de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e2:	b011      	add	sp, #68	; 0x44
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	463a      	mov	r2, r7
 80077ea:	464b      	mov	r3, r9
 80077ec:	4638      	mov	r0, r7
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f9 f90c 	bl	8000a0c <__aeabi_dcmpun>
 80077f4:	b110      	cbz	r0, 80077fc <_printf_float+0xcc>
 80077f6:	4f8c      	ldr	r7, [pc, #560]	; (8007a28 <_printf_float+0x2f8>)
 80077f8:	4b8c      	ldr	r3, [pc, #560]	; (8007a2c <_printf_float+0x2fc>)
 80077fa:	e7db      	b.n	80077b4 <_printf_float+0x84>
 80077fc:	6863      	ldr	r3, [r4, #4]
 80077fe:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	a80d      	add	r0, sp, #52	; 0x34
 8007806:	a90e      	add	r1, sp, #56	; 0x38
 8007808:	d140      	bne.n	800788c <_printf_float+0x15c>
 800780a:	2306      	movs	r3, #6
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007816:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	463a      	mov	r2, r7
 8007826:	464b      	mov	r3, r9
 8007828:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800782c:	4628      	mov	r0, r5
 800782e:	f7ff feed 	bl	800760c <__cvt>
 8007832:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007836:	2b47      	cmp	r3, #71	; 0x47
 8007838:	4607      	mov	r7, r0
 800783a:	d109      	bne.n	8007850 <_printf_float+0x120>
 800783c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783e:	1cd8      	adds	r0, r3, #3
 8007840:	db02      	blt.n	8007848 <_printf_float+0x118>
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	4293      	cmp	r3, r2
 8007846:	dd47      	ble.n	80078d8 <_printf_float+0x1a8>
 8007848:	f1a8 0802 	sub.w	r8, r8, #2
 800784c:	fa5f f888 	uxtb.w	r8, r8
 8007850:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007854:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007856:	d824      	bhi.n	80078a2 <_printf_float+0x172>
 8007858:	3901      	subs	r1, #1
 800785a:	4642      	mov	r2, r8
 800785c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007860:	910d      	str	r1, [sp, #52]	; 0x34
 8007862:	f7ff ff2f 	bl	80076c4 <__exponent>
 8007866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007868:	4681      	mov	r9, r0
 800786a:	1813      	adds	r3, r2, r0
 800786c:	2a01      	cmp	r2, #1
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	dc02      	bgt.n	8007878 <_printf_float+0x148>
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	07d1      	lsls	r1, r2, #31
 8007876:	d501      	bpl.n	800787c <_printf_float+0x14c>
 8007878:	3301      	adds	r3, #1
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0a2      	beq.n	80077ca <_printf_float+0x9a>
 8007884:	232d      	movs	r3, #45	; 0x2d
 8007886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800788a:	e79e      	b.n	80077ca <_printf_float+0x9a>
 800788c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007890:	f000 816e 	beq.w	8007b70 <_printf_float+0x440>
 8007894:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007898:	d1b9      	bne.n	800780e <_printf_float+0xde>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1b7      	bne.n	800780e <_printf_float+0xde>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7b4      	b.n	800780c <_printf_float+0xdc>
 80078a2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80078a6:	d119      	bne.n	80078dc <_printf_float+0x1ac>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	dd0c      	ble.n	80078c8 <_printf_float+0x198>
 80078ae:	6121      	str	r1, [r4, #16]
 80078b0:	b913      	cbnz	r3, 80078b8 <_printf_float+0x188>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	07d2      	lsls	r2, r2, #31
 80078b6:	d502      	bpl.n	80078be <_printf_float+0x18e>
 80078b8:	3301      	adds	r3, #1
 80078ba:	440b      	add	r3, r1
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c0:	f04f 0900 	mov.w	r9, #0
 80078c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80078c6:	e7d9      	b.n	800787c <_printf_float+0x14c>
 80078c8:	b913      	cbnz	r3, 80078d0 <_printf_float+0x1a0>
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	07d0      	lsls	r0, r2, #31
 80078ce:	d501      	bpl.n	80078d4 <_printf_float+0x1a4>
 80078d0:	3302      	adds	r3, #2
 80078d2:	e7f3      	b.n	80078bc <_printf_float+0x18c>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e7f1      	b.n	80078bc <_printf_float+0x18c>
 80078d8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80078dc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80078e0:	4293      	cmp	r3, r2
 80078e2:	db05      	blt.n	80078f0 <_printf_float+0x1c0>
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	07d1      	lsls	r1, r2, #31
 80078ea:	d5e8      	bpl.n	80078be <_printf_float+0x18e>
 80078ec:	3301      	adds	r3, #1
 80078ee:	e7e5      	b.n	80078bc <_printf_float+0x18c>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfcc      	ite	gt
 80078f4:	2301      	movgt	r3, #1
 80078f6:	f1c3 0302 	rsble	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	e7de      	b.n	80078bc <_printf_float+0x18c>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	055a      	lsls	r2, r3, #21
 8007902:	d407      	bmi.n	8007914 <_printf_float+0x1e4>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	463a      	mov	r2, r7
 8007908:	4659      	mov	r1, fp
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	3001      	adds	r0, #1
 8007910:	d129      	bne.n	8007966 <_printf_float+0x236>
 8007912:	e764      	b.n	80077de <_printf_float+0xae>
 8007914:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007918:	f240 80d7 	bls.w	8007aca <_printf_float+0x39a>
 800791c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007920:	2200      	movs	r2, #0
 8007922:	2300      	movs	r3, #0
 8007924:	f7f9 f840 	bl	80009a8 <__aeabi_dcmpeq>
 8007928:	b388      	cbz	r0, 800798e <_printf_float+0x25e>
 800792a:	2301      	movs	r3, #1
 800792c:	4a40      	ldr	r2, [pc, #256]	; (8007a30 <_printf_float+0x300>)
 800792e:	4659      	mov	r1, fp
 8007930:	4628      	mov	r0, r5
 8007932:	47b0      	blx	r6
 8007934:	3001      	adds	r0, #1
 8007936:	f43f af52 	beq.w	80077de <_printf_float+0xae>
 800793a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800793e:	429a      	cmp	r2, r3
 8007940:	db02      	blt.n	8007948 <_printf_float+0x218>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	07d8      	lsls	r0, r3, #31
 8007946:	d50e      	bpl.n	8007966 <_printf_float+0x236>
 8007948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800794c:	4659      	mov	r1, fp
 800794e:	4628      	mov	r0, r5
 8007950:	47b0      	blx	r6
 8007952:	3001      	adds	r0, #1
 8007954:	f43f af43 	beq.w	80077de <_printf_float+0xae>
 8007958:	2700      	movs	r7, #0
 800795a:	f104 081a 	add.w	r8, r4, #26
 800795e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007960:	3b01      	subs	r3, #1
 8007962:	42bb      	cmp	r3, r7
 8007964:	dc09      	bgt.n	800797a <_printf_float+0x24a>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	079f      	lsls	r7, r3, #30
 800796a:	f100 80fd 	bmi.w	8007b68 <_printf_float+0x438>
 800796e:	68e0      	ldr	r0, [r4, #12]
 8007970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007972:	4298      	cmp	r0, r3
 8007974:	bfb8      	it	lt
 8007976:	4618      	movlt	r0, r3
 8007978:	e733      	b.n	80077e2 <_printf_float+0xb2>
 800797a:	2301      	movs	r3, #1
 800797c:	4642      	mov	r2, r8
 800797e:	4659      	mov	r1, fp
 8007980:	4628      	mov	r0, r5
 8007982:	47b0      	blx	r6
 8007984:	3001      	adds	r0, #1
 8007986:	f43f af2a 	beq.w	80077de <_printf_float+0xae>
 800798a:	3701      	adds	r7, #1
 800798c:	e7e7      	b.n	800795e <_printf_float+0x22e>
 800798e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007990:	2b00      	cmp	r3, #0
 8007992:	dc2b      	bgt.n	80079ec <_printf_float+0x2bc>
 8007994:	2301      	movs	r3, #1
 8007996:	4a26      	ldr	r2, [pc, #152]	; (8007a30 <_printf_float+0x300>)
 8007998:	4659      	mov	r1, fp
 800799a:	4628      	mov	r0, r5
 800799c:	47b0      	blx	r6
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af1d 	beq.w	80077de <_printf_float+0xae>
 80079a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a6:	b923      	cbnz	r3, 80079b2 <_printf_float+0x282>
 80079a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079aa:	b913      	cbnz	r3, 80079b2 <_printf_float+0x282>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	07d9      	lsls	r1, r3, #31
 80079b0:	d5d9      	bpl.n	8007966 <_printf_float+0x236>
 80079b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b6:	4659      	mov	r1, fp
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b0      	blx	r6
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f af0e 	beq.w	80077de <_printf_float+0xae>
 80079c2:	f04f 0800 	mov.w	r8, #0
 80079c6:	f104 091a 	add.w	r9, r4, #26
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	425b      	negs	r3, r3
 80079ce:	4543      	cmp	r3, r8
 80079d0:	dc01      	bgt.n	80079d6 <_printf_float+0x2a6>
 80079d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d4:	e797      	b.n	8007906 <_printf_float+0x1d6>
 80079d6:	2301      	movs	r3, #1
 80079d8:	464a      	mov	r2, r9
 80079da:	4659      	mov	r1, fp
 80079dc:	4628      	mov	r0, r5
 80079de:	47b0      	blx	r6
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f aefc 	beq.w	80077de <_printf_float+0xae>
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	e7ee      	b.n	80079ca <_printf_float+0x29a>
 80079ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f0:	429a      	cmp	r2, r3
 80079f2:	bfa8      	it	ge
 80079f4:	461a      	movge	r2, r3
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	4690      	mov	r8, r2
 80079fa:	dd07      	ble.n	8007a0c <_printf_float+0x2dc>
 80079fc:	4613      	mov	r3, r2
 80079fe:	4659      	mov	r1, fp
 8007a00:	463a      	mov	r2, r7
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b0      	blx	r6
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f aee9 	beq.w	80077de <_printf_float+0xae>
 8007a0c:	f104 031a 	add.w	r3, r4, #26
 8007a10:	f04f 0a00 	mov.w	sl, #0
 8007a14:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a1a:	e015      	b.n	8007a48 <_printf_float+0x318>
 8007a1c:	7fefffff 	.word	0x7fefffff
 8007a20:	0800aeb4 	.word	0x0800aeb4
 8007a24:	0800aeb0 	.word	0x0800aeb0
 8007a28:	0800aebc 	.word	0x0800aebc
 8007a2c:	0800aeb8 	.word	0x0800aeb8
 8007a30:	0800aec0 	.word	0x0800aec0
 8007a34:	2301      	movs	r3, #1
 8007a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a38:	4659      	mov	r1, fp
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b0      	blx	r6
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f aecd 	beq.w	80077de <_printf_float+0xae>
 8007a44:	f10a 0a01 	add.w	sl, sl, #1
 8007a48:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007a4c:	eba9 0308 	sub.w	r3, r9, r8
 8007a50:	4553      	cmp	r3, sl
 8007a52:	dcef      	bgt.n	8007a34 <_printf_float+0x304>
 8007a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	444f      	add	r7, r9
 8007a5c:	db14      	blt.n	8007a88 <_printf_float+0x358>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	d411      	bmi.n	8007a88 <_printf_float+0x358>
 8007a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a68:	eba3 0209 	sub.w	r2, r3, r9
 8007a6c:	eba3 0901 	sub.w	r9, r3, r1
 8007a70:	4591      	cmp	r9, r2
 8007a72:	bfa8      	it	ge
 8007a74:	4691      	movge	r9, r2
 8007a76:	f1b9 0f00 	cmp.w	r9, #0
 8007a7a:	dc0d      	bgt.n	8007a98 <_printf_float+0x368>
 8007a7c:	2700      	movs	r7, #0
 8007a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a82:	f104 081a 	add.w	r8, r4, #26
 8007a86:	e018      	b.n	8007aba <_printf_float+0x38a>
 8007a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b0      	blx	r6
 8007a92:	3001      	adds	r0, #1
 8007a94:	d1e6      	bne.n	8007a64 <_printf_float+0x334>
 8007a96:	e6a2      	b.n	80077de <_printf_float+0xae>
 8007a98:	464b      	mov	r3, r9
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	4659      	mov	r1, fp
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b0      	blx	r6
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d1ea      	bne.n	8007a7c <_printf_float+0x34c>
 8007aa6:	e69a      	b.n	80077de <_printf_float+0xae>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4642      	mov	r2, r8
 8007aac:	4659      	mov	r1, fp
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f ae93 	beq.w	80077de <_printf_float+0xae>
 8007ab8:	3701      	adds	r7, #1
 8007aba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	eba3 0309 	sub.w	r3, r3, r9
 8007ac4:	42bb      	cmp	r3, r7
 8007ac6:	dcef      	bgt.n	8007aa8 <_printf_float+0x378>
 8007ac8:	e74d      	b.n	8007966 <_printf_float+0x236>
 8007aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007acc:	2a01      	cmp	r2, #1
 8007ace:	dc01      	bgt.n	8007ad4 <_printf_float+0x3a4>
 8007ad0:	07db      	lsls	r3, r3, #31
 8007ad2:	d538      	bpl.n	8007b46 <_printf_float+0x416>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4659      	mov	r1, fp
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b0      	blx	r6
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f ae7d 	beq.w	80077de <_printf_float+0xae>
 8007ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae8:	4659      	mov	r1, fp
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b0      	blx	r6
 8007aee:	3001      	adds	r0, #1
 8007af0:	f107 0701 	add.w	r7, r7, #1
 8007af4:	f43f ae73 	beq.w	80077de <_printf_float+0xae>
 8007af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afe:	2200      	movs	r2, #0
 8007b00:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007b04:	2300      	movs	r3, #0
 8007b06:	f7f8 ff4f 	bl	80009a8 <__aeabi_dcmpeq>
 8007b0a:	b9c0      	cbnz	r0, 8007b3e <_printf_float+0x40e>
 8007b0c:	4643      	mov	r3, r8
 8007b0e:	463a      	mov	r2, r7
 8007b10:	4659      	mov	r1, fp
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b0      	blx	r6
 8007b16:	3001      	adds	r0, #1
 8007b18:	d10d      	bne.n	8007b36 <_printf_float+0x406>
 8007b1a:	e660      	b.n	80077de <_printf_float+0xae>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4642      	mov	r2, r8
 8007b20:	4659      	mov	r1, fp
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f ae59 	beq.w	80077de <_printf_float+0xae>
 8007b2c:	3701      	adds	r7, #1
 8007b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b30:	3b01      	subs	r3, #1
 8007b32:	42bb      	cmp	r3, r7
 8007b34:	dcf2      	bgt.n	8007b1c <_printf_float+0x3ec>
 8007b36:	464b      	mov	r3, r9
 8007b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b3c:	e6e4      	b.n	8007908 <_printf_float+0x1d8>
 8007b3e:	2700      	movs	r7, #0
 8007b40:	f104 081a 	add.w	r8, r4, #26
 8007b44:	e7f3      	b.n	8007b2e <_printf_float+0x3fe>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7e1      	b.n	8007b0e <_printf_float+0x3de>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4659      	mov	r1, fp
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b0      	blx	r6
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f ae42 	beq.w	80077de <_printf_float+0xae>
 8007b5a:	3701      	adds	r7, #1
 8007b5c:	68e3      	ldr	r3, [r4, #12]
 8007b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	42bb      	cmp	r3, r7
 8007b64:	dcf1      	bgt.n	8007b4a <_printf_float+0x41a>
 8007b66:	e702      	b.n	800796e <_printf_float+0x23e>
 8007b68:	2700      	movs	r7, #0
 8007b6a:	f104 0819 	add.w	r8, r4, #25
 8007b6e:	e7f5      	b.n	8007b5c <_printf_float+0x42c>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f43f ae94 	beq.w	800789e <_printf_float+0x16e>
 8007b76:	f04f 0c00 	mov.w	ip, #0
 8007b7a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007b7e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007b88:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	463a      	mov	r2, r7
 8007b90:	464b      	mov	r3, r9
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7ff fd3a 	bl	800760c <__cvt>
 8007b98:	4607      	mov	r7, r0
 8007b9a:	e64f      	b.n	800783c <_printf_float+0x10c>

08007b9c <_printf_common>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	4691      	mov	r9, r2
 8007ba2:	461f      	mov	r7, r3
 8007ba4:	688a      	ldr	r2, [r1, #8]
 8007ba6:	690b      	ldr	r3, [r1, #16]
 8007ba8:	4606      	mov	r6, r0
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bfb8      	it	lt
 8007bae:	4613      	movlt	r3, r2
 8007bb0:	f8c9 3000 	str.w	r3, [r9]
 8007bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bb8:	460c      	mov	r4, r1
 8007bba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bbe:	b112      	cbz	r2, 8007bc6 <_printf_common+0x2a>
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	f8c9 3000 	str.w	r3, [r9]
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	0699      	lsls	r1, r3, #26
 8007bca:	bf42      	ittt	mi
 8007bcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bd0:	3302      	addmi	r3, #2
 8007bd2:	f8c9 3000 	strmi.w	r3, [r9]
 8007bd6:	6825      	ldr	r5, [r4, #0]
 8007bd8:	f015 0506 	ands.w	r5, r5, #6
 8007bdc:	d107      	bne.n	8007bee <_printf_common+0x52>
 8007bde:	f104 0a19 	add.w	sl, r4, #25
 8007be2:	68e3      	ldr	r3, [r4, #12]
 8007be4:	f8d9 2000 	ldr.w	r2, [r9]
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	42ab      	cmp	r3, r5
 8007bec:	dc29      	bgt.n	8007c42 <_printf_common+0xa6>
 8007bee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	3300      	adds	r3, #0
 8007bf6:	bf18      	it	ne
 8007bf8:	2301      	movne	r3, #1
 8007bfa:	0692      	lsls	r2, r2, #26
 8007bfc:	d42e      	bmi.n	8007c5c <_printf_common+0xc0>
 8007bfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c02:	4639      	mov	r1, r7
 8007c04:	4630      	mov	r0, r6
 8007c06:	47c0      	blx	r8
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d021      	beq.n	8007c50 <_printf_common+0xb4>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	68e5      	ldr	r5, [r4, #12]
 8007c10:	f003 0306 	and.w	r3, r3, #6
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	bf18      	it	ne
 8007c18:	2500      	movne	r5, #0
 8007c1a:	f8d9 2000 	ldr.w	r2, [r9]
 8007c1e:	f04f 0900 	mov.w	r9, #0
 8007c22:	bf08      	it	eq
 8007c24:	1aad      	subeq	r5, r5, r2
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	bf08      	it	eq
 8007c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c30:	4293      	cmp	r3, r2
 8007c32:	bfc4      	itt	gt
 8007c34:	1a9b      	subgt	r3, r3, r2
 8007c36:	18ed      	addgt	r5, r5, r3
 8007c38:	341a      	adds	r4, #26
 8007c3a:	454d      	cmp	r5, r9
 8007c3c:	d11a      	bne.n	8007c74 <_printf_common+0xd8>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e008      	b.n	8007c54 <_printf_common+0xb8>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4652      	mov	r2, sl
 8007c46:	4639      	mov	r1, r7
 8007c48:	4630      	mov	r0, r6
 8007c4a:	47c0      	blx	r8
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d103      	bne.n	8007c58 <_printf_common+0xbc>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c58:	3501      	adds	r5, #1
 8007c5a:	e7c2      	b.n	8007be2 <_printf_common+0x46>
 8007c5c:	2030      	movs	r0, #48	; 0x30
 8007c5e:	18e1      	adds	r1, r4, r3
 8007c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c6a:	4422      	add	r2, r4
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c72:	e7c4      	b.n	8007bfe <_printf_common+0x62>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4622      	mov	r2, r4
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	47c0      	blx	r8
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0e6      	beq.n	8007c50 <_printf_common+0xb4>
 8007c82:	f109 0901 	add.w	r9, r9, #1
 8007c86:	e7d8      	b.n	8007c3a <_printf_common+0x9e>

08007c88 <_printf_i>:
 8007c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c90:	460c      	mov	r4, r1
 8007c92:	7e09      	ldrb	r1, [r1, #24]
 8007c94:	b085      	sub	sp, #20
 8007c96:	296e      	cmp	r1, #110	; 0x6e
 8007c98:	4617      	mov	r7, r2
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	4698      	mov	r8, r3
 8007c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ca0:	f000 80b3 	beq.w	8007e0a <_printf_i+0x182>
 8007ca4:	d822      	bhi.n	8007cec <_printf_i+0x64>
 8007ca6:	2963      	cmp	r1, #99	; 0x63
 8007ca8:	d036      	beq.n	8007d18 <_printf_i+0x90>
 8007caa:	d80a      	bhi.n	8007cc2 <_printf_i+0x3a>
 8007cac:	2900      	cmp	r1, #0
 8007cae:	f000 80b9 	beq.w	8007e24 <_printf_i+0x19c>
 8007cb2:	2958      	cmp	r1, #88	; 0x58
 8007cb4:	f000 8083 	beq.w	8007dbe <_printf_i+0x136>
 8007cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007cc0:	e032      	b.n	8007d28 <_printf_i+0xa0>
 8007cc2:	2964      	cmp	r1, #100	; 0x64
 8007cc4:	d001      	beq.n	8007cca <_printf_i+0x42>
 8007cc6:	2969      	cmp	r1, #105	; 0x69
 8007cc8:	d1f6      	bne.n	8007cb8 <_printf_i+0x30>
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	0605      	lsls	r5, r0, #24
 8007cd0:	f103 0104 	add.w	r1, r3, #4
 8007cd4:	d52a      	bpl.n	8007d2c <_printf_i+0xa4>
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6011      	str	r1, [r2, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da03      	bge.n	8007ce6 <_printf_i+0x5e>
 8007cde:	222d      	movs	r2, #45	; 0x2d
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ce6:	486f      	ldr	r0, [pc, #444]	; (8007ea4 <_printf_i+0x21c>)
 8007ce8:	220a      	movs	r2, #10
 8007cea:	e039      	b.n	8007d60 <_printf_i+0xd8>
 8007cec:	2973      	cmp	r1, #115	; 0x73
 8007cee:	f000 809d 	beq.w	8007e2c <_printf_i+0x1a4>
 8007cf2:	d808      	bhi.n	8007d06 <_printf_i+0x7e>
 8007cf4:	296f      	cmp	r1, #111	; 0x6f
 8007cf6:	d020      	beq.n	8007d3a <_printf_i+0xb2>
 8007cf8:	2970      	cmp	r1, #112	; 0x70
 8007cfa:	d1dd      	bne.n	8007cb8 <_printf_i+0x30>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	f043 0320 	orr.w	r3, r3, #32
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	e003      	b.n	8007d0e <_printf_i+0x86>
 8007d06:	2975      	cmp	r1, #117	; 0x75
 8007d08:	d017      	beq.n	8007d3a <_printf_i+0xb2>
 8007d0a:	2978      	cmp	r1, #120	; 0x78
 8007d0c:	d1d4      	bne.n	8007cb8 <_printf_i+0x30>
 8007d0e:	2378      	movs	r3, #120	; 0x78
 8007d10:	4865      	ldr	r0, [pc, #404]	; (8007ea8 <_printf_i+0x220>)
 8007d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d16:	e055      	b.n	8007dc4 <_printf_i+0x13c>
 8007d18:	6813      	ldr	r3, [r2, #0]
 8007d1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d1e:	1d19      	adds	r1, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6011      	str	r1, [r2, #0]
 8007d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e08c      	b.n	8007e46 <_printf_i+0x1be>
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d32:	6011      	str	r1, [r2, #0]
 8007d34:	bf18      	it	ne
 8007d36:	b21b      	sxthne	r3, r3
 8007d38:	e7cf      	b.n	8007cda <_printf_i+0x52>
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	1d18      	adds	r0, r3, #4
 8007d40:	6010      	str	r0, [r2, #0]
 8007d42:	0628      	lsls	r0, r5, #24
 8007d44:	d501      	bpl.n	8007d4a <_printf_i+0xc2>
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	e002      	b.n	8007d50 <_printf_i+0xc8>
 8007d4a:	0668      	lsls	r0, r5, #25
 8007d4c:	d5fb      	bpl.n	8007d46 <_printf_i+0xbe>
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	296f      	cmp	r1, #111	; 0x6f
 8007d52:	bf14      	ite	ne
 8007d54:	220a      	movne	r2, #10
 8007d56:	2208      	moveq	r2, #8
 8007d58:	4852      	ldr	r0, [pc, #328]	; (8007ea4 <_printf_i+0x21c>)
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d60:	6865      	ldr	r5, [r4, #4]
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	60a5      	str	r5, [r4, #8]
 8007d66:	f2c0 8095 	blt.w	8007e94 <_printf_i+0x20c>
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	f021 0104 	bic.w	r1, r1, #4
 8007d70:	6021      	str	r1, [r4, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d13d      	bne.n	8007df2 <_printf_i+0x16a>
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	f040 808e 	bne.w	8007e98 <_printf_i+0x210>
 8007d7c:	4665      	mov	r5, ip
 8007d7e:	2a08      	cmp	r2, #8
 8007d80:	d10b      	bne.n	8007d9a <_printf_i+0x112>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	07db      	lsls	r3, r3, #31
 8007d86:	d508      	bpl.n	8007d9a <_printf_i+0x112>
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	6862      	ldr	r2, [r4, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	bfde      	ittt	le
 8007d90:	2330      	movle	r3, #48	; 0x30
 8007d92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d9a:	ebac 0305 	sub.w	r3, ip, r5
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	f8cd 8000 	str.w	r8, [sp]
 8007da4:	463b      	mov	r3, r7
 8007da6:	aa03      	add	r2, sp, #12
 8007da8:	4621      	mov	r1, r4
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff fef6 	bl	8007b9c <_printf_common>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d14d      	bne.n	8007e50 <_printf_i+0x1c8>
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db8:	b005      	add	sp, #20
 8007dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	4839      	ldr	r0, [pc, #228]	; (8007ea4 <_printf_i+0x21c>)
 8007dc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007dc4:	6813      	ldr	r3, [r2, #0]
 8007dc6:	6821      	ldr	r1, [r4, #0]
 8007dc8:	1d1d      	adds	r5, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6015      	str	r5, [r2, #0]
 8007dce:	060a      	lsls	r2, r1, #24
 8007dd0:	d50b      	bpl.n	8007dea <_printf_i+0x162>
 8007dd2:	07ca      	lsls	r2, r1, #31
 8007dd4:	bf44      	itt	mi
 8007dd6:	f041 0120 	orrmi.w	r1, r1, #32
 8007dda:	6021      	strmi	r1, [r4, #0]
 8007ddc:	b91b      	cbnz	r3, 8007de6 <_printf_i+0x15e>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	f022 0220 	bic.w	r2, r2, #32
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	2210      	movs	r2, #16
 8007de8:	e7b7      	b.n	8007d5a <_printf_i+0xd2>
 8007dea:	064d      	lsls	r5, r1, #25
 8007dec:	bf48      	it	mi
 8007dee:	b29b      	uxthmi	r3, r3
 8007df0:	e7ef      	b.n	8007dd2 <_printf_i+0x14a>
 8007df2:	4665      	mov	r5, ip
 8007df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007df8:	fb02 3311 	mls	r3, r2, r1, r3
 8007dfc:	5cc3      	ldrb	r3, [r0, r3]
 8007dfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e02:	460b      	mov	r3, r1
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d1f5      	bne.n	8007df4 <_printf_i+0x16c>
 8007e08:	e7b9      	b.n	8007d7e <_printf_i+0xf6>
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	6825      	ldr	r5, [r4, #0]
 8007e0e:	1d18      	adds	r0, r3, #4
 8007e10:	6961      	ldr	r1, [r4, #20]
 8007e12:	6010      	str	r0, [r2, #0]
 8007e14:	0628      	lsls	r0, r5, #24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	d501      	bpl.n	8007e1e <_printf_i+0x196>
 8007e1a:	6019      	str	r1, [r3, #0]
 8007e1c:	e002      	b.n	8007e24 <_printf_i+0x19c>
 8007e1e:	066a      	lsls	r2, r5, #25
 8007e20:	d5fb      	bpl.n	8007e1a <_printf_i+0x192>
 8007e22:	8019      	strh	r1, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	4665      	mov	r5, ip
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	e7b9      	b.n	8007da0 <_printf_i+0x118>
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	1d19      	adds	r1, r3, #4
 8007e30:	6011      	str	r1, [r2, #0]
 8007e32:	681d      	ldr	r5, [r3, #0]
 8007e34:	6862      	ldr	r2, [r4, #4]
 8007e36:	2100      	movs	r1, #0
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 feaf 	bl	8008b9c <memchr>
 8007e3e:	b108      	cbz	r0, 8007e44 <_printf_i+0x1bc>
 8007e40:	1b40      	subs	r0, r0, r5
 8007e42:	6060      	str	r0, [r4, #4]
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4e:	e7a7      	b.n	8007da0 <_printf_i+0x118>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	462a      	mov	r2, r5
 8007e54:	4639      	mov	r1, r7
 8007e56:	4630      	mov	r0, r6
 8007e58:	47c0      	blx	r8
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d0aa      	beq.n	8007db4 <_printf_i+0x12c>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	079b      	lsls	r3, r3, #30
 8007e62:	d413      	bmi.n	8007e8c <_printf_i+0x204>
 8007e64:	68e0      	ldr	r0, [r4, #12]
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	4298      	cmp	r0, r3
 8007e6a:	bfb8      	it	lt
 8007e6c:	4618      	movlt	r0, r3
 8007e6e:	e7a3      	b.n	8007db8 <_printf_i+0x130>
 8007e70:	2301      	movs	r3, #1
 8007e72:	464a      	mov	r2, r9
 8007e74:	4639      	mov	r1, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	47c0      	blx	r8
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d09a      	beq.n	8007db4 <_printf_i+0x12c>
 8007e7e:	3501      	adds	r5, #1
 8007e80:	68e3      	ldr	r3, [r4, #12]
 8007e82:	9a03      	ldr	r2, [sp, #12]
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	42ab      	cmp	r3, r5
 8007e88:	dcf2      	bgt.n	8007e70 <_printf_i+0x1e8>
 8007e8a:	e7eb      	b.n	8007e64 <_printf_i+0x1dc>
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	f104 0919 	add.w	r9, r4, #25
 8007e92:	e7f5      	b.n	8007e80 <_printf_i+0x1f8>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1ac      	bne.n	8007df2 <_printf_i+0x16a>
 8007e98:	7803      	ldrb	r3, [r0, #0]
 8007e9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea2:	e76c      	b.n	8007d7e <_printf_i+0xf6>
 8007ea4:	0800aec2 	.word	0x0800aec2
 8007ea8:	0800aed3 	.word	0x0800aed3

08007eac <siprintf>:
 8007eac:	b40e      	push	{r1, r2, r3}
 8007eae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb2:	b500      	push	{lr}
 8007eb4:	b09c      	sub	sp, #112	; 0x70
 8007eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007eb8:	9002      	str	r0, [sp, #8]
 8007eba:	9006      	str	r0, [sp, #24]
 8007ebc:	9107      	str	r1, [sp, #28]
 8007ebe:	9104      	str	r1, [sp, #16]
 8007ec0:	4808      	ldr	r0, [pc, #32]	; (8007ee4 <siprintf+0x38>)
 8007ec2:	4909      	ldr	r1, [pc, #36]	; (8007ee8 <siprintf+0x3c>)
 8007ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	a902      	add	r1, sp, #8
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	f001 fa68 	bl	80093a4 <_svfiprintf_r>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	b01c      	add	sp, #112	; 0x70
 8007edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee0:	b003      	add	sp, #12
 8007ee2:	4770      	bx	lr
 8007ee4:	20000038 	.word	0x20000038
 8007ee8:	ffff0208 	.word	0xffff0208

08007eec <quorem>:
 8007eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	6903      	ldr	r3, [r0, #16]
 8007ef2:	690c      	ldr	r4, [r1, #16]
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	f2c0 8084 	blt.w	8008004 <quorem+0x118>
 8007efc:	3c01      	subs	r4, #1
 8007efe:	f101 0714 	add.w	r7, r1, #20
 8007f02:	f100 0614 	add.w	r6, r0, #20
 8007f06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007f0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007f0e:	3501      	adds	r5, #1
 8007f10:	fbb0 f5f5 	udiv	r5, r0, r5
 8007f14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007f18:	eb06 030c 	add.w	r3, r6, ip
 8007f1c:	eb07 090c 	add.w	r9, r7, ip
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	b39d      	cbz	r5, 8007f8c <quorem+0xa0>
 8007f24:	f04f 0a00 	mov.w	sl, #0
 8007f28:	4638      	mov	r0, r7
 8007f2a:	46b6      	mov	lr, r6
 8007f2c:	46d3      	mov	fp, sl
 8007f2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f32:	b293      	uxth	r3, r2
 8007f34:	fb05 a303 	mla	r3, r5, r3, sl
 8007f38:	0c12      	lsrs	r2, r2, #16
 8007f3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f3e:	fb05 a202 	mla	r2, r5, r2, sl
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	ebab 0303 	sub.w	r3, fp, r3
 8007f48:	f8de b000 	ldr.w	fp, [lr]
 8007f4c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f50:	fa1f fb8b 	uxth.w	fp, fp
 8007f54:	445b      	add	r3, fp
 8007f56:	fa1f fb82 	uxth.w	fp, r2
 8007f5a:	f8de 2000 	ldr.w	r2, [lr]
 8007f5e:	4581      	cmp	r9, r0
 8007f60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f6e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f72:	f84e 3b04 	str.w	r3, [lr], #4
 8007f76:	d2da      	bcs.n	8007f2e <quorem+0x42>
 8007f78:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f7c:	b933      	cbnz	r3, 8007f8c <quorem+0xa0>
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	3b04      	subs	r3, #4
 8007f82:	429e      	cmp	r6, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	d331      	bcc.n	8007fec <quorem+0x100>
 8007f88:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	f001 f833 	bl	8008ff8 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	db26      	blt.n	8007fe4 <quorem+0xf8>
 8007f96:	4630      	mov	r0, r6
 8007f98:	f04f 0c00 	mov.w	ip, #0
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007fa2:	f8d0 e000 	ldr.w	lr, [r0]
 8007fa6:	b28b      	uxth	r3, r1
 8007fa8:	ebac 0303 	sub.w	r3, ip, r3
 8007fac:	fa1f f28e 	uxth.w	r2, lr
 8007fb0:	4413      	add	r3, r2
 8007fb2:	0c0a      	lsrs	r2, r1, #16
 8007fb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fc2:	45b9      	cmp	r9, r7
 8007fc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fc8:	f840 3b04 	str.w	r3, [r0], #4
 8007fcc:	d2e7      	bcs.n	8007f9e <quorem+0xb2>
 8007fce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007fd2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007fd6:	b92a      	cbnz	r2, 8007fe4 <quorem+0xf8>
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	429e      	cmp	r6, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	d30b      	bcc.n	8007ff8 <quorem+0x10c>
 8007fe0:	f8c8 4010 	str.w	r4, [r8, #16]
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	b003      	add	sp, #12
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	3b04      	subs	r3, #4
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d1c9      	bne.n	8007f88 <quorem+0x9c>
 8007ff4:	3c01      	subs	r4, #1
 8007ff6:	e7c4      	b.n	8007f82 <quorem+0x96>
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	3b04      	subs	r3, #4
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d1ef      	bne.n	8007fe0 <quorem+0xf4>
 8008000:	3c01      	subs	r4, #1
 8008002:	e7ea      	b.n	8007fda <quorem+0xee>
 8008004:	2000      	movs	r0, #0
 8008006:	e7ee      	b.n	8007fe6 <quorem+0xfa>

08008008 <_dtoa_r>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	4616      	mov	r6, r2
 800800e:	461f      	mov	r7, r3
 8008010:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008012:	b095      	sub	sp, #84	; 0x54
 8008014:	4604      	mov	r4, r0
 8008016:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800801a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800801e:	b93d      	cbnz	r5, 8008030 <_dtoa_r+0x28>
 8008020:	2010      	movs	r0, #16
 8008022:	f000 fdb3 	bl	8008b8c <malloc>
 8008026:	6260      	str	r0, [r4, #36]	; 0x24
 8008028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800802c:	6005      	str	r5, [r0, #0]
 800802e:	60c5      	str	r5, [r0, #12]
 8008030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008032:	6819      	ldr	r1, [r3, #0]
 8008034:	b151      	cbz	r1, 800804c <_dtoa_r+0x44>
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	2301      	movs	r3, #1
 800803a:	4093      	lsls	r3, r2
 800803c:	604a      	str	r2, [r1, #4]
 800803e:	608b      	str	r3, [r1, #8]
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fdf8 	bl	8008c36 <_Bfree>
 8008046:	2200      	movs	r2, #0
 8008048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	1e3b      	subs	r3, r7, #0
 800804e:	bfaf      	iteee	ge
 8008050:	2300      	movge	r3, #0
 8008052:	2201      	movlt	r2, #1
 8008054:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008058:	9303      	strlt	r3, [sp, #12]
 800805a:	bfac      	ite	ge
 800805c:	f8c8 3000 	strge.w	r3, [r8]
 8008060:	f8c8 2000 	strlt.w	r2, [r8]
 8008064:	4bae      	ldr	r3, [pc, #696]	; (8008320 <_dtoa_r+0x318>)
 8008066:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800806a:	ea33 0308 	bics.w	r3, r3, r8
 800806e:	d11b      	bne.n	80080a8 <_dtoa_r+0xa0>
 8008070:	f242 730f 	movw	r3, #9999	; 0x270f
 8008074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	b923      	cbnz	r3, 8008086 <_dtoa_r+0x7e>
 800807c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008080:	2800      	cmp	r0, #0
 8008082:	f000 8545 	beq.w	8008b10 <_dtoa_r+0xb08>
 8008086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008088:	b953      	cbnz	r3, 80080a0 <_dtoa_r+0x98>
 800808a:	4ba6      	ldr	r3, [pc, #664]	; (8008324 <_dtoa_r+0x31c>)
 800808c:	e021      	b.n	80080d2 <_dtoa_r+0xca>
 800808e:	4ba6      	ldr	r3, [pc, #664]	; (8008328 <_dtoa_r+0x320>)
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	3308      	adds	r3, #8
 8008094:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	9806      	ldr	r0, [sp, #24]
 800809a:	b015      	add	sp, #84	; 0x54
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	4ba0      	ldr	r3, [pc, #640]	; (8008324 <_dtoa_r+0x31c>)
 80080a2:	9306      	str	r3, [sp, #24]
 80080a4:	3303      	adds	r3, #3
 80080a6:	e7f5      	b.n	8008094 <_dtoa_r+0x8c>
 80080a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2300      	movs	r3, #0
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fc78 	bl	80009a8 <__aeabi_dcmpeq>
 80080b8:	4682      	mov	sl, r0
 80080ba:	b160      	cbz	r0, 80080d6 <_dtoa_r+0xce>
 80080bc:	2301      	movs	r3, #1
 80080be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8520 	beq.w	8008b0a <_dtoa_r+0xb02>
 80080ca:	4b98      	ldr	r3, [pc, #608]	; (800832c <_dtoa_r+0x324>)
 80080cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	e7e0      	b.n	8008098 <_dtoa_r+0x90>
 80080d6:	ab12      	add	r3, sp, #72	; 0x48
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	ab13      	add	r3, sp, #76	; 0x4c
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	4632      	mov	r2, r6
 80080e0:	463b      	mov	r3, r7
 80080e2:	4620      	mov	r0, r4
 80080e4:	f001 f800 	bl	80090e8 <__d2b>
 80080e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80080ec:	4683      	mov	fp, r0
 80080ee:	2d00      	cmp	r5, #0
 80080f0:	d07d      	beq.n	80081ee <_dtoa_r+0x1e6>
 80080f2:	46b0      	mov	r8, r6
 80080f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80080fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008100:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008104:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008108:	2200      	movs	r2, #0
 800810a:	4b89      	ldr	r3, [pc, #548]	; (8008330 <_dtoa_r+0x328>)
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 f82a 	bl	8000168 <__aeabi_dsub>
 8008114:	a37c      	add	r3, pc, #496	; (adr r3, 8008308 <_dtoa_r+0x300>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f9dd 	bl	80004d8 <__aeabi_dmul>
 800811e:	a37c      	add	r3, pc, #496	; (adr r3, 8008310 <_dtoa_r+0x308>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f7f8 f822 	bl	800016c <__adddf3>
 8008128:	4606      	mov	r6, r0
 800812a:	4628      	mov	r0, r5
 800812c:	460f      	mov	r7, r1
 800812e:	f7f8 f969 	bl	8000404 <__aeabi_i2d>
 8008132:	a379      	add	r3, pc, #484	; (adr r3, 8008318 <_dtoa_r+0x310>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 f9ce 	bl	80004d8 <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 f812 	bl	800016c <__adddf3>
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	f7f8 fc74 	bl	8000a38 <__aeabi_d2iz>
 8008150:	2200      	movs	r2, #0
 8008152:	4682      	mov	sl, r0
 8008154:	2300      	movs	r3, #0
 8008156:	4630      	mov	r0, r6
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fc2f 	bl	80009bc <__aeabi_dcmplt>
 800815e:	b148      	cbz	r0, 8008174 <_dtoa_r+0x16c>
 8008160:	4650      	mov	r0, sl
 8008162:	f7f8 f94f 	bl	8000404 <__aeabi_i2d>
 8008166:	4632      	mov	r2, r6
 8008168:	463b      	mov	r3, r7
 800816a:	f7f8 fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800816e:	b908      	cbnz	r0, 8008174 <_dtoa_r+0x16c>
 8008170:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008174:	f1ba 0f16 	cmp.w	sl, #22
 8008178:	d85a      	bhi.n	8008230 <_dtoa_r+0x228>
 800817a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800817e:	496d      	ldr	r1, [pc, #436]	; (8008334 <_dtoa_r+0x32c>)
 8008180:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008188:	f7f8 fc36 	bl	80009f8 <__aeabi_dcmpgt>
 800818c:	2800      	cmp	r0, #0
 800818e:	d051      	beq.n	8008234 <_dtoa_r+0x22c>
 8008190:	2300      	movs	r3, #0
 8008192:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008196:	930d      	str	r3, [sp, #52]	; 0x34
 8008198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800819a:	1b5d      	subs	r5, r3, r5
 800819c:	1e6b      	subs	r3, r5, #1
 800819e:	9307      	str	r3, [sp, #28]
 80081a0:	bf43      	ittte	mi
 80081a2:	2300      	movmi	r3, #0
 80081a4:	f1c5 0901 	rsbmi	r9, r5, #1
 80081a8:	9307      	strmi	r3, [sp, #28]
 80081aa:	f04f 0900 	movpl.w	r9, #0
 80081ae:	f1ba 0f00 	cmp.w	sl, #0
 80081b2:	db41      	blt.n	8008238 <_dtoa_r+0x230>
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80081ba:	4453      	add	r3, sl
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	2300      	movs	r3, #0
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	f200 808f 	bhi.w	80082e8 <_dtoa_r+0x2e0>
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	bfc4      	itt	gt
 80081ce:	3b04      	subgt	r3, #4
 80081d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80081d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081d4:	bfc8      	it	gt
 80081d6:	2500      	movgt	r5, #0
 80081d8:	f1a3 0302 	sub.w	r3, r3, #2
 80081dc:	bfd8      	it	le
 80081de:	2501      	movle	r5, #1
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	f200 808d 	bhi.w	8008300 <_dtoa_r+0x2f8>
 80081e6:	e8df f003 	tbb	[pc, r3]
 80081ea:	7d7b      	.short	0x7d7b
 80081ec:	6f2f      	.short	0x6f2f
 80081ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80081f2:	441d      	add	r5, r3
 80081f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80081f8:	2820      	cmp	r0, #32
 80081fa:	dd13      	ble.n	8008224 <_dtoa_r+0x21c>
 80081fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	fa08 f800 	lsl.w	r8, r8, r0
 8008206:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800820a:	fa23 f000 	lsr.w	r0, r3, r0
 800820e:	ea48 0000 	orr.w	r0, r8, r0
 8008212:	f7f8 f8e7 	bl	80003e4 <__aeabi_ui2d>
 8008216:	2301      	movs	r3, #1
 8008218:	4680      	mov	r8, r0
 800821a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800821e:	3d01      	subs	r5, #1
 8008220:	9310      	str	r3, [sp, #64]	; 0x40
 8008222:	e771      	b.n	8008108 <_dtoa_r+0x100>
 8008224:	9b02      	ldr	r3, [sp, #8]
 8008226:	f1c0 0020 	rsb	r0, r0, #32
 800822a:	fa03 f000 	lsl.w	r0, r3, r0
 800822e:	e7f0      	b.n	8008212 <_dtoa_r+0x20a>
 8008230:	2301      	movs	r3, #1
 8008232:	e7b0      	b.n	8008196 <_dtoa_r+0x18e>
 8008234:	900d      	str	r0, [sp, #52]	; 0x34
 8008236:	e7af      	b.n	8008198 <_dtoa_r+0x190>
 8008238:	f1ca 0300 	rsb	r3, sl, #0
 800823c:	9308      	str	r3, [sp, #32]
 800823e:	2300      	movs	r3, #0
 8008240:	eba9 090a 	sub.w	r9, r9, sl
 8008244:	930c      	str	r3, [sp, #48]	; 0x30
 8008246:	e7bc      	b.n	80081c2 <_dtoa_r+0x1ba>
 8008248:	2301      	movs	r3, #1
 800824a:	9309      	str	r3, [sp, #36]	; 0x24
 800824c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd74      	ble.n	800833c <_dtoa_r+0x334>
 8008252:	4698      	mov	r8, r3
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	2200      	movs	r2, #0
 8008258:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800825a:	6072      	str	r2, [r6, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	f102 0014 	add.w	r0, r2, #20
 8008262:	4298      	cmp	r0, r3
 8008264:	6871      	ldr	r1, [r6, #4]
 8008266:	d96e      	bls.n	8008346 <_dtoa_r+0x33e>
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fcb0 	bl	8008bce <_Balloc>
 800826e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008270:	6030      	str	r0, [r6, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f1b8 0f0e 	cmp.w	r8, #14
 8008278:	9306      	str	r3, [sp, #24]
 800827a:	f200 80ed 	bhi.w	8008458 <_dtoa_r+0x450>
 800827e:	2d00      	cmp	r5, #0
 8008280:	f000 80ea 	beq.w	8008458 <_dtoa_r+0x450>
 8008284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008288:	f1ba 0f00 	cmp.w	sl, #0
 800828c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008290:	dd77      	ble.n	8008382 <_dtoa_r+0x37a>
 8008292:	4a28      	ldr	r2, [pc, #160]	; (8008334 <_dtoa_r+0x32c>)
 8008294:	f00a 030f 	and.w	r3, sl, #15
 8008298:	ea4f 162a 	mov.w	r6, sl, asr #4
 800829c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082a0:	06f0      	lsls	r0, r6, #27
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082aa:	d568      	bpl.n	800837e <_dtoa_r+0x376>
 80082ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082b0:	4b21      	ldr	r3, [pc, #132]	; (8008338 <_dtoa_r+0x330>)
 80082b2:	2503      	movs	r5, #3
 80082b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b8:	f7f8 fa38 	bl	800072c <__aeabi_ddiv>
 80082bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c0:	f006 060f 	and.w	r6, r6, #15
 80082c4:	4f1c      	ldr	r7, [pc, #112]	; (8008338 <_dtoa_r+0x330>)
 80082c6:	e04f      	b.n	8008368 <_dtoa_r+0x360>
 80082c8:	2301      	movs	r3, #1
 80082ca:	9309      	str	r3, [sp, #36]	; 0x24
 80082cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082ce:	4453      	add	r3, sl
 80082d0:	f103 0801 	add.w	r8, r3, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	4643      	mov	r3, r8
 80082d8:	2b01      	cmp	r3, #1
 80082da:	bfb8      	it	lt
 80082dc:	2301      	movlt	r3, #1
 80082de:	e7ba      	b.n	8008256 <_dtoa_r+0x24e>
 80082e0:	2300      	movs	r3, #0
 80082e2:	e7b2      	b.n	800824a <_dtoa_r+0x242>
 80082e4:	2300      	movs	r3, #0
 80082e6:	e7f0      	b.n	80082ca <_dtoa_r+0x2c2>
 80082e8:	2501      	movs	r5, #1
 80082ea:	2300      	movs	r3, #0
 80082ec:	9509      	str	r5, [sp, #36]	; 0x24
 80082ee:	931e      	str	r3, [sp, #120]	; 0x78
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f4:	2200      	movs	r2, #0
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	4698      	mov	r8, r3
 80082fa:	2312      	movs	r3, #18
 80082fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80082fe:	e7aa      	b.n	8008256 <_dtoa_r+0x24e>
 8008300:	2301      	movs	r3, #1
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	e7f4      	b.n	80082f0 <_dtoa_r+0x2e8>
 8008306:	bf00      	nop
 8008308:	636f4361 	.word	0x636f4361
 800830c:	3fd287a7 	.word	0x3fd287a7
 8008310:	8b60c8b3 	.word	0x8b60c8b3
 8008314:	3fc68a28 	.word	0x3fc68a28
 8008318:	509f79fb 	.word	0x509f79fb
 800831c:	3fd34413 	.word	0x3fd34413
 8008320:	7ff00000 	.word	0x7ff00000
 8008324:	0800aeed 	.word	0x0800aeed
 8008328:	0800aee4 	.word	0x0800aee4
 800832c:	0800aec1 	.word	0x0800aec1
 8008330:	3ff80000 	.word	0x3ff80000
 8008334:	0800af20 	.word	0x0800af20
 8008338:	0800aef8 	.word	0x0800aef8
 800833c:	2301      	movs	r3, #1
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	4698      	mov	r8, r3
 8008342:	461a      	mov	r2, r3
 8008344:	e7da      	b.n	80082fc <_dtoa_r+0x2f4>
 8008346:	3101      	adds	r1, #1
 8008348:	6071      	str	r1, [r6, #4]
 800834a:	0052      	lsls	r2, r2, #1
 800834c:	e787      	b.n	800825e <_dtoa_r+0x256>
 800834e:	07f1      	lsls	r1, r6, #31
 8008350:	d508      	bpl.n	8008364 <_dtoa_r+0x35c>
 8008352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800835a:	f7f8 f8bd 	bl	80004d8 <__aeabi_dmul>
 800835e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008362:	3501      	adds	r5, #1
 8008364:	1076      	asrs	r6, r6, #1
 8008366:	3708      	adds	r7, #8
 8008368:	2e00      	cmp	r6, #0
 800836a:	d1f0      	bne.n	800834e <_dtoa_r+0x346>
 800836c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008374:	f7f8 f9da 	bl	800072c <__aeabi_ddiv>
 8008378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800837c:	e01b      	b.n	80083b6 <_dtoa_r+0x3ae>
 800837e:	2502      	movs	r5, #2
 8008380:	e7a0      	b.n	80082c4 <_dtoa_r+0x2bc>
 8008382:	f000 80a4 	beq.w	80084ce <_dtoa_r+0x4c6>
 8008386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800838a:	f1ca 0600 	rsb	r6, sl, #0
 800838e:	4ba0      	ldr	r3, [pc, #640]	; (8008610 <_dtoa_r+0x608>)
 8008390:	f006 020f 	and.w	r2, r6, #15
 8008394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f7f8 f89c 	bl	80004d8 <__aeabi_dmul>
 80083a0:	2502      	movs	r5, #2
 80083a2:	2300      	movs	r3, #0
 80083a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a8:	4f9a      	ldr	r7, [pc, #616]	; (8008614 <_dtoa_r+0x60c>)
 80083aa:	1136      	asrs	r6, r6, #4
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	f040 8083 	bne.w	80084b8 <_dtoa_r+0x4b0>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e0      	bne.n	8008378 <_dtoa_r+0x370>
 80083b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 808a 	beq.w	80084d2 <_dtoa_r+0x4ca>
 80083be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80083c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083ca:	2200      	movs	r2, #0
 80083cc:	4b92      	ldr	r3, [pc, #584]	; (8008618 <_dtoa_r+0x610>)
 80083ce:	f7f8 faf5 	bl	80009bc <__aeabi_dcmplt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d07d      	beq.n	80084d2 <_dtoa_r+0x4ca>
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	d07a      	beq.n	80084d2 <_dtoa_r+0x4ca>
 80083dc:	9b04      	ldr	r3, [sp, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd36      	ble.n	8008450 <_dtoa_r+0x448>
 80083e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083e6:	2200      	movs	r2, #0
 80083e8:	4b8c      	ldr	r3, [pc, #560]	; (800861c <_dtoa_r+0x614>)
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f2:	9e04      	ldr	r6, [sp, #16]
 80083f4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80083f8:	3501      	adds	r5, #1
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7f8 f802 	bl	8000404 <__aeabi_i2d>
 8008400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	2200      	movs	r2, #0
 800840a:	4b85      	ldr	r3, [pc, #532]	; (8008620 <_dtoa_r+0x618>)
 800840c:	f7f7 feae 	bl	800016c <__adddf3>
 8008410:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008418:	950b      	str	r5, [sp, #44]	; 0x2c
 800841a:	2e00      	cmp	r6, #0
 800841c:	d15c      	bne.n	80084d8 <_dtoa_r+0x4d0>
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	4b7f      	ldr	r3, [pc, #508]	; (8008624 <_dtoa_r+0x61c>)
 8008426:	f7f7 fe9f 	bl	8000168 <__aeabi_dsub>
 800842a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842c:	462b      	mov	r3, r5
 800842e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008432:	f7f8 fae1 	bl	80009f8 <__aeabi_dcmpgt>
 8008436:	2800      	cmp	r0, #0
 8008438:	f040 8281 	bne.w	800893e <_dtoa_r+0x936>
 800843c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008442:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008446:	f7f8 fab9 	bl	80009bc <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	f040 8275 	bne.w	800893a <_dtoa_r+0x932>
 8008450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800845a:	2b00      	cmp	r3, #0
 800845c:	f2c0 814b 	blt.w	80086f6 <_dtoa_r+0x6ee>
 8008460:	f1ba 0f0e 	cmp.w	sl, #14
 8008464:	f300 8147 	bgt.w	80086f6 <_dtoa_r+0x6ee>
 8008468:	4b69      	ldr	r3, [pc, #420]	; (8008610 <_dtoa_r+0x608>)
 800846a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008476:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008478:	2b00      	cmp	r3, #0
 800847a:	f280 80d7 	bge.w	800862c <_dtoa_r+0x624>
 800847e:	f1b8 0f00 	cmp.w	r8, #0
 8008482:	f300 80d3 	bgt.w	800862c <_dtoa_r+0x624>
 8008486:	f040 8257 	bne.w	8008938 <_dtoa_r+0x930>
 800848a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800848e:	2200      	movs	r2, #0
 8008490:	4b64      	ldr	r3, [pc, #400]	; (8008624 <_dtoa_r+0x61c>)
 8008492:	f7f8 f821 	bl	80004d8 <__aeabi_dmul>
 8008496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800849a:	f7f8 faa3 	bl	80009e4 <__aeabi_dcmpge>
 800849e:	4646      	mov	r6, r8
 80084a0:	4647      	mov	r7, r8
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f040 822d 	bne.w	8008902 <_dtoa_r+0x8fa>
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	9a06      	ldr	r2, [sp, #24]
 80084ac:	1c5d      	adds	r5, r3, #1
 80084ae:	2331      	movs	r3, #49	; 0x31
 80084b0:	f10a 0a01 	add.w	sl, sl, #1
 80084b4:	7013      	strb	r3, [r2, #0]
 80084b6:	e228      	b.n	800890a <_dtoa_r+0x902>
 80084b8:	07f2      	lsls	r2, r6, #31
 80084ba:	d505      	bpl.n	80084c8 <_dtoa_r+0x4c0>
 80084bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c0:	f7f8 f80a 	bl	80004d8 <__aeabi_dmul>
 80084c4:	2301      	movs	r3, #1
 80084c6:	3501      	adds	r5, #1
 80084c8:	1076      	asrs	r6, r6, #1
 80084ca:	3708      	adds	r7, #8
 80084cc:	e76e      	b.n	80083ac <_dtoa_r+0x3a4>
 80084ce:	2502      	movs	r5, #2
 80084d0:	e771      	b.n	80083b6 <_dtoa_r+0x3ae>
 80084d2:	4657      	mov	r7, sl
 80084d4:	4646      	mov	r6, r8
 80084d6:	e790      	b.n	80083fa <_dtoa_r+0x3f2>
 80084d8:	4b4d      	ldr	r3, [pc, #308]	; (8008610 <_dtoa_r+0x608>)
 80084da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d048      	beq.n	800857a <_dtoa_r+0x572>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	2000      	movs	r0, #0
 80084ee:	494e      	ldr	r1, [pc, #312]	; (8008628 <_dtoa_r+0x620>)
 80084f0:	f7f8 f91c 	bl	800072c <__aeabi_ddiv>
 80084f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084f8:	f7f7 fe36 	bl	8000168 <__aeabi_dsub>
 80084fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008500:	9d06      	ldr	r5, [sp, #24]
 8008502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008506:	f7f8 fa97 	bl	8000a38 <__aeabi_d2iz>
 800850a:	9011      	str	r0, [sp, #68]	; 0x44
 800850c:	f7f7 ff7a 	bl	8000404 <__aeabi_i2d>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008518:	f7f7 fe26 	bl	8000168 <__aeabi_dsub>
 800851c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800851e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008522:	3330      	adds	r3, #48	; 0x30
 8008524:	f805 3b01 	strb.w	r3, [r5], #1
 8008528:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800852c:	f7f8 fa46 	bl	80009bc <__aeabi_dcmplt>
 8008530:	2800      	cmp	r0, #0
 8008532:	d163      	bne.n	80085fc <_dtoa_r+0x5f4>
 8008534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008538:	2000      	movs	r0, #0
 800853a:	4937      	ldr	r1, [pc, #220]	; (8008618 <_dtoa_r+0x610>)
 800853c:	f7f7 fe14 	bl	8000168 <__aeabi_dsub>
 8008540:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008544:	f7f8 fa3a 	bl	80009bc <__aeabi_dcmplt>
 8008548:	2800      	cmp	r0, #0
 800854a:	f040 80b5 	bne.w	80086b8 <_dtoa_r+0x6b0>
 800854e:	9b06      	ldr	r3, [sp, #24]
 8008550:	1aeb      	subs	r3, r5, r3
 8008552:	429e      	cmp	r6, r3
 8008554:	f77f af7c 	ble.w	8008450 <_dtoa_r+0x448>
 8008558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800855c:	2200      	movs	r2, #0
 800855e:	4b2f      	ldr	r3, [pc, #188]	; (800861c <_dtoa_r+0x614>)
 8008560:	f7f7 ffba 	bl	80004d8 <__aeabi_dmul>
 8008564:	2200      	movs	r2, #0
 8008566:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800856a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856e:	4b2b      	ldr	r3, [pc, #172]	; (800861c <_dtoa_r+0x614>)
 8008570:	f7f7 ffb2 	bl	80004d8 <__aeabi_dmul>
 8008574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008578:	e7c3      	b.n	8008502 <_dtoa_r+0x4fa>
 800857a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800857e:	f7f7 ffab 	bl	80004d8 <__aeabi_dmul>
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008588:	199d      	adds	r5, r3, r6
 800858a:	461e      	mov	r6, r3
 800858c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008590:	f7f8 fa52 	bl	8000a38 <__aeabi_d2iz>
 8008594:	9011      	str	r0, [sp, #68]	; 0x44
 8008596:	f7f7 ff35 	bl	8000404 <__aeabi_i2d>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a2:	f7f7 fde1 	bl	8000168 <__aeabi_dsub>
 80085a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ac:	3330      	adds	r3, #48	; 0x30
 80085ae:	f806 3b01 	strb.w	r3, [r6], #1
 80085b2:	42ae      	cmp	r6, r5
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	d124      	bne.n	8008604 <_dtoa_r+0x5fc>
 80085ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085be:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <_dtoa_r+0x620>)
 80085c0:	f7f7 fdd4 	bl	800016c <__adddf3>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085cc:	f7f8 fa14 	bl	80009f8 <__aeabi_dcmpgt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d171      	bne.n	80086b8 <_dtoa_r+0x6b0>
 80085d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085d8:	2000      	movs	r0, #0
 80085da:	4913      	ldr	r1, [pc, #76]	; (8008628 <_dtoa_r+0x620>)
 80085dc:	f7f7 fdc4 	bl	8000168 <__aeabi_dsub>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e8:	f7f8 f9e8 	bl	80009bc <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f43f af2f 	beq.w	8008450 <_dtoa_r+0x448>
 80085f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085f6:	1e6a      	subs	r2, r5, #1
 80085f8:	2b30      	cmp	r3, #48	; 0x30
 80085fa:	d001      	beq.n	8008600 <_dtoa_r+0x5f8>
 80085fc:	46ba      	mov	sl, r7
 80085fe:	e04a      	b.n	8008696 <_dtoa_r+0x68e>
 8008600:	4615      	mov	r5, r2
 8008602:	e7f6      	b.n	80085f2 <_dtoa_r+0x5ea>
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <_dtoa_r+0x614>)
 8008606:	f7f7 ff67 	bl	80004d8 <__aeabi_dmul>
 800860a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860e:	e7bd      	b.n	800858c <_dtoa_r+0x584>
 8008610:	0800af20 	.word	0x0800af20
 8008614:	0800aef8 	.word	0x0800aef8
 8008618:	3ff00000 	.word	0x3ff00000
 800861c:	40240000 	.word	0x40240000
 8008620:	401c0000 	.word	0x401c0000
 8008624:	40140000 	.word	0x40140000
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	9d06      	ldr	r5, [sp, #24]
 800862e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008636:	4630      	mov	r0, r6
 8008638:	4639      	mov	r1, r7
 800863a:	f7f8 f877 	bl	800072c <__aeabi_ddiv>
 800863e:	f7f8 f9fb 	bl	8000a38 <__aeabi_d2iz>
 8008642:	4681      	mov	r9, r0
 8008644:	f7f7 fede 	bl	8000404 <__aeabi_i2d>
 8008648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800864c:	f7f7 ff44 	bl	80004d8 <__aeabi_dmul>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f7 fd86 	bl	8000168 <__aeabi_dsub>
 800865c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008660:	f805 6b01 	strb.w	r6, [r5], #1
 8008664:	9e06      	ldr	r6, [sp, #24]
 8008666:	4602      	mov	r2, r0
 8008668:	1bae      	subs	r6, r5, r6
 800866a:	45b0      	cmp	r8, r6
 800866c:	460b      	mov	r3, r1
 800866e:	d135      	bne.n	80086dc <_dtoa_r+0x6d4>
 8008670:	f7f7 fd7c 	bl	800016c <__adddf3>
 8008674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008678:	4606      	mov	r6, r0
 800867a:	460f      	mov	r7, r1
 800867c:	f7f8 f9bc 	bl	80009f8 <__aeabi_dcmpgt>
 8008680:	b9c8      	cbnz	r0, 80086b6 <_dtoa_r+0x6ae>
 8008682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f8 f98d 	bl	80009a8 <__aeabi_dcmpeq>
 800868e:	b110      	cbz	r0, 8008696 <_dtoa_r+0x68e>
 8008690:	f019 0f01 	tst.w	r9, #1
 8008694:	d10f      	bne.n	80086b6 <_dtoa_r+0x6ae>
 8008696:	4659      	mov	r1, fp
 8008698:	4620      	mov	r0, r4
 800869a:	f000 facc 	bl	8008c36 <_Bfree>
 800869e:	2300      	movs	r3, #0
 80086a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086a2:	702b      	strb	r3, [r5, #0]
 80086a4:	f10a 0301 	add.w	r3, sl, #1
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f43f acf3 	beq.w	8008098 <_dtoa_r+0x90>
 80086b2:	601d      	str	r5, [r3, #0]
 80086b4:	e4f0      	b.n	8008098 <_dtoa_r+0x90>
 80086b6:	4657      	mov	r7, sl
 80086b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086bc:	1e6b      	subs	r3, r5, #1
 80086be:	2a39      	cmp	r2, #57	; 0x39
 80086c0:	d106      	bne.n	80086d0 <_dtoa_r+0x6c8>
 80086c2:	9a06      	ldr	r2, [sp, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d107      	bne.n	80086d8 <_dtoa_r+0x6d0>
 80086c8:	2330      	movs	r3, #48	; 0x30
 80086ca:	7013      	strb	r3, [r2, #0]
 80086cc:	4613      	mov	r3, r2
 80086ce:	3701      	adds	r7, #1
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	3201      	adds	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	e791      	b.n	80085fc <_dtoa_r+0x5f4>
 80086d8:	461d      	mov	r5, r3
 80086da:	e7ed      	b.n	80086b8 <_dtoa_r+0x6b0>
 80086dc:	2200      	movs	r2, #0
 80086de:	4b99      	ldr	r3, [pc, #612]	; (8008944 <_dtoa_r+0x93c>)
 80086e0:	f7f7 fefa 	bl	80004d8 <__aeabi_dmul>
 80086e4:	2200      	movs	r2, #0
 80086e6:	2300      	movs	r3, #0
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	f7f8 f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d09e      	beq.n	8008632 <_dtoa_r+0x62a>
 80086f4:	e7cf      	b.n	8008696 <_dtoa_r+0x68e>
 80086f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	f000 8088 	beq.w	800880e <_dtoa_r+0x806>
 80086fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008700:	2a01      	cmp	r2, #1
 8008702:	dc6d      	bgt.n	80087e0 <_dtoa_r+0x7d8>
 8008704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008706:	2a00      	cmp	r2, #0
 8008708:	d066      	beq.n	80087d8 <_dtoa_r+0x7d0>
 800870a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800870e:	464d      	mov	r5, r9
 8008710:	9e08      	ldr	r6, [sp, #32]
 8008712:	9a07      	ldr	r2, [sp, #28]
 8008714:	2101      	movs	r1, #1
 8008716:	441a      	add	r2, r3
 8008718:	4620      	mov	r0, r4
 800871a:	4499      	add	r9, r3
 800871c:	9207      	str	r2, [sp, #28]
 800871e:	f000 fb2a 	bl	8008d76 <__i2b>
 8008722:	4607      	mov	r7, r0
 8008724:	2d00      	cmp	r5, #0
 8008726:	dd0b      	ble.n	8008740 <_dtoa_r+0x738>
 8008728:	9b07      	ldr	r3, [sp, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd08      	ble.n	8008740 <_dtoa_r+0x738>
 800872e:	42ab      	cmp	r3, r5
 8008730:	bfa8      	it	ge
 8008732:	462b      	movge	r3, r5
 8008734:	9a07      	ldr	r2, [sp, #28]
 8008736:	eba9 0903 	sub.w	r9, r9, r3
 800873a:	1aed      	subs	r5, r5, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	b1eb      	cbz	r3, 8008780 <_dtoa_r+0x778>
 8008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d065      	beq.n	8008816 <_dtoa_r+0x80e>
 800874a:	b18e      	cbz	r6, 8008770 <_dtoa_r+0x768>
 800874c:	4639      	mov	r1, r7
 800874e:	4632      	mov	r2, r6
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fbaf 	bl	8008eb4 <__pow5mult>
 8008756:	465a      	mov	r2, fp
 8008758:	4601      	mov	r1, r0
 800875a:	4607      	mov	r7, r0
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fb13 	bl	8008d88 <__multiply>
 8008762:	4659      	mov	r1, fp
 8008764:	900a      	str	r0, [sp, #40]	; 0x28
 8008766:	4620      	mov	r0, r4
 8008768:	f000 fa65 	bl	8008c36 <_Bfree>
 800876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876e:	469b      	mov	fp, r3
 8008770:	9b08      	ldr	r3, [sp, #32]
 8008772:	1b9a      	subs	r2, r3, r6
 8008774:	d004      	beq.n	8008780 <_dtoa_r+0x778>
 8008776:	4659      	mov	r1, fp
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fb9b 	bl	8008eb4 <__pow5mult>
 800877e:	4683      	mov	fp, r0
 8008780:	2101      	movs	r1, #1
 8008782:	4620      	mov	r0, r4
 8008784:	f000 faf7 	bl	8008d76 <__i2b>
 8008788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800878a:	4606      	mov	r6, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 81c6 	beq.w	8008b1e <_dtoa_r+0xb16>
 8008792:	461a      	mov	r2, r3
 8008794:	4601      	mov	r1, r0
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fb8c 	bl	8008eb4 <__pow5mult>
 800879c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800879e:	4606      	mov	r6, r0
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	dc3e      	bgt.n	8008822 <_dtoa_r+0x81a>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d137      	bne.n	800881a <_dtoa_r+0x812>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d134      	bne.n	800881e <_dtoa_r+0x816>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ba:	0d1b      	lsrs	r3, r3, #20
 80087bc:	051b      	lsls	r3, r3, #20
 80087be:	b12b      	cbz	r3, 80087cc <_dtoa_r+0x7c4>
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	f109 0901 	add.w	r9, r9, #1
 80087c6:	3301      	adds	r3, #1
 80087c8:	9307      	str	r3, [sp, #28]
 80087ca:	2301      	movs	r3, #1
 80087cc:	9308      	str	r3, [sp, #32]
 80087ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d128      	bne.n	8008826 <_dtoa_r+0x81e>
 80087d4:	2001      	movs	r0, #1
 80087d6:	e02e      	b.n	8008836 <_dtoa_r+0x82e>
 80087d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087de:	e796      	b.n	800870e <_dtoa_r+0x706>
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80087e6:	42b3      	cmp	r3, r6
 80087e8:	bfb7      	itett	lt
 80087ea:	9b08      	ldrlt	r3, [sp, #32]
 80087ec:	1b9e      	subge	r6, r3, r6
 80087ee:	1af2      	sublt	r2, r6, r3
 80087f0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80087f2:	bfbf      	itttt	lt
 80087f4:	9608      	strlt	r6, [sp, #32]
 80087f6:	189b      	addlt	r3, r3, r2
 80087f8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80087fa:	2600      	movlt	r6, #0
 80087fc:	f1b8 0f00 	cmp.w	r8, #0
 8008800:	bfb9      	ittee	lt
 8008802:	eba9 0508 	sublt.w	r5, r9, r8
 8008806:	2300      	movlt	r3, #0
 8008808:	464d      	movge	r5, r9
 800880a:	4643      	movge	r3, r8
 800880c:	e781      	b.n	8008712 <_dtoa_r+0x70a>
 800880e:	9e08      	ldr	r6, [sp, #32]
 8008810:	464d      	mov	r5, r9
 8008812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008814:	e786      	b.n	8008724 <_dtoa_r+0x71c>
 8008816:	9a08      	ldr	r2, [sp, #32]
 8008818:	e7ad      	b.n	8008776 <_dtoa_r+0x76e>
 800881a:	2300      	movs	r3, #0
 800881c:	e7d6      	b.n	80087cc <_dtoa_r+0x7c4>
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	e7d4      	b.n	80087cc <_dtoa_r+0x7c4>
 8008822:	2300      	movs	r3, #0
 8008824:	9308      	str	r3, [sp, #32]
 8008826:	6933      	ldr	r3, [r6, #16]
 8008828:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800882c:	6918      	ldr	r0, [r3, #16]
 800882e:	f000 fa54 	bl	8008cda <__hi0bits>
 8008832:	f1c0 0020 	rsb	r0, r0, #32
 8008836:	9b07      	ldr	r3, [sp, #28]
 8008838:	4418      	add	r0, r3
 800883a:	f010 001f 	ands.w	r0, r0, #31
 800883e:	d047      	beq.n	80088d0 <_dtoa_r+0x8c8>
 8008840:	f1c0 0320 	rsb	r3, r0, #32
 8008844:	2b04      	cmp	r3, #4
 8008846:	dd3b      	ble.n	80088c0 <_dtoa_r+0x8b8>
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	f1c0 001c 	rsb	r0, r0, #28
 800884e:	4481      	add	r9, r0
 8008850:	4405      	add	r5, r0
 8008852:	4403      	add	r3, r0
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	f1b9 0f00 	cmp.w	r9, #0
 800885a:	dd05      	ble.n	8008868 <_dtoa_r+0x860>
 800885c:	4659      	mov	r1, fp
 800885e:	464a      	mov	r2, r9
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fb75 	bl	8008f50 <__lshift>
 8008866:	4683      	mov	fp, r0
 8008868:	9b07      	ldr	r3, [sp, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	dd05      	ble.n	800887a <_dtoa_r+0x872>
 800886e:	4631      	mov	r1, r6
 8008870:	461a      	mov	r2, r3
 8008872:	4620      	mov	r0, r4
 8008874:	f000 fb6c 	bl	8008f50 <__lshift>
 8008878:	4606      	mov	r6, r0
 800887a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887c:	b353      	cbz	r3, 80088d4 <_dtoa_r+0x8cc>
 800887e:	4631      	mov	r1, r6
 8008880:	4658      	mov	r0, fp
 8008882:	f000 fbb9 	bl	8008ff8 <__mcmp>
 8008886:	2800      	cmp	r0, #0
 8008888:	da24      	bge.n	80088d4 <_dtoa_r+0x8cc>
 800888a:	2300      	movs	r3, #0
 800888c:	4659      	mov	r1, fp
 800888e:	220a      	movs	r2, #10
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f9e7 	bl	8008c64 <__multadd>
 8008896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008898:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800889c:	4683      	mov	fp, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8144 	beq.w	8008b2c <_dtoa_r+0xb24>
 80088a4:	2300      	movs	r3, #0
 80088a6:	4639      	mov	r1, r7
 80088a8:	220a      	movs	r2, #10
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 f9da 	bl	8008c64 <__multadd>
 80088b0:	9b04      	ldr	r3, [sp, #16]
 80088b2:	4607      	mov	r7, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc4d      	bgt.n	8008954 <_dtoa_r+0x94c>
 80088b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	dd4a      	ble.n	8008954 <_dtoa_r+0x94c>
 80088be:	e011      	b.n	80088e4 <_dtoa_r+0x8dc>
 80088c0:	d0c9      	beq.n	8008856 <_dtoa_r+0x84e>
 80088c2:	9a07      	ldr	r2, [sp, #28]
 80088c4:	331c      	adds	r3, #28
 80088c6:	441a      	add	r2, r3
 80088c8:	4499      	add	r9, r3
 80088ca:	441d      	add	r5, r3
 80088cc:	4613      	mov	r3, r2
 80088ce:	e7c1      	b.n	8008854 <_dtoa_r+0x84c>
 80088d0:	4603      	mov	r3, r0
 80088d2:	e7f6      	b.n	80088c2 <_dtoa_r+0x8ba>
 80088d4:	f1b8 0f00 	cmp.w	r8, #0
 80088d8:	dc36      	bgt.n	8008948 <_dtoa_r+0x940>
 80088da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088dc:	2b02      	cmp	r3, #2
 80088de:	dd33      	ble.n	8008948 <_dtoa_r+0x940>
 80088e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	b963      	cbnz	r3, 8008902 <_dtoa_r+0x8fa>
 80088e8:	4631      	mov	r1, r6
 80088ea:	2205      	movs	r2, #5
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 f9b9 	bl	8008c64 <__multadd>
 80088f2:	4601      	mov	r1, r0
 80088f4:	4606      	mov	r6, r0
 80088f6:	4658      	mov	r0, fp
 80088f8:	f000 fb7e 	bl	8008ff8 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	f73f add3 	bgt.w	80084a8 <_dtoa_r+0x4a0>
 8008902:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008904:	9d06      	ldr	r5, [sp, #24]
 8008906:	ea6f 0a03 	mvn.w	sl, r3
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	4631      	mov	r1, r6
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f990 	bl	8008c36 <_Bfree>
 8008916:	2f00      	cmp	r7, #0
 8008918:	f43f aebd 	beq.w	8008696 <_dtoa_r+0x68e>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d005      	beq.n	800892e <_dtoa_r+0x926>
 8008922:	45b9      	cmp	r9, r7
 8008924:	d003      	beq.n	800892e <_dtoa_r+0x926>
 8008926:	4649      	mov	r1, r9
 8008928:	4620      	mov	r0, r4
 800892a:	f000 f984 	bl	8008c36 <_Bfree>
 800892e:	4639      	mov	r1, r7
 8008930:	4620      	mov	r0, r4
 8008932:	f000 f980 	bl	8008c36 <_Bfree>
 8008936:	e6ae      	b.n	8008696 <_dtoa_r+0x68e>
 8008938:	2600      	movs	r6, #0
 800893a:	4637      	mov	r7, r6
 800893c:	e7e1      	b.n	8008902 <_dtoa_r+0x8fa>
 800893e:	46ba      	mov	sl, r7
 8008940:	4637      	mov	r7, r6
 8008942:	e5b1      	b.n	80084a8 <_dtoa_r+0x4a0>
 8008944:	40240000 	.word	0x40240000
 8008948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894a:	f8cd 8010 	str.w	r8, [sp, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80f3 	beq.w	8008b3a <_dtoa_r+0xb32>
 8008954:	2d00      	cmp	r5, #0
 8008956:	dd05      	ble.n	8008964 <_dtoa_r+0x95c>
 8008958:	4639      	mov	r1, r7
 800895a:	462a      	mov	r2, r5
 800895c:	4620      	mov	r0, r4
 800895e:	f000 faf7 	bl	8008f50 <__lshift>
 8008962:	4607      	mov	r7, r0
 8008964:	9b08      	ldr	r3, [sp, #32]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04c      	beq.n	8008a04 <_dtoa_r+0x9fc>
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4620      	mov	r0, r4
 800896e:	f000 f92e 	bl	8008bce <_Balloc>
 8008972:	4605      	mov	r5, r0
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	f107 010c 	add.w	r1, r7, #12
 800897a:	3202      	adds	r2, #2
 800897c:	0092      	lsls	r2, r2, #2
 800897e:	300c      	adds	r0, #12
 8008980:	f000 f91a 	bl	8008bb8 <memcpy>
 8008984:	2201      	movs	r2, #1
 8008986:	4629      	mov	r1, r5
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fae1 	bl	8008f50 <__lshift>
 800898e:	46b9      	mov	r9, r7
 8008990:	4607      	mov	r7, r0
 8008992:	9b06      	ldr	r3, [sp, #24]
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	9b02      	ldr	r3, [sp, #8]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	4631      	mov	r1, r6
 80089a0:	4658      	mov	r0, fp
 80089a2:	f7ff faa3 	bl	8007eec <quorem>
 80089a6:	4649      	mov	r1, r9
 80089a8:	4605      	mov	r5, r0
 80089aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089ae:	4658      	mov	r0, fp
 80089b0:	f000 fb22 	bl	8008ff8 <__mcmp>
 80089b4:	463a      	mov	r2, r7
 80089b6:	9002      	str	r0, [sp, #8]
 80089b8:	4631      	mov	r1, r6
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fb36 	bl	800902c <__mdiff>
 80089c0:	68c3      	ldr	r3, [r0, #12]
 80089c2:	4602      	mov	r2, r0
 80089c4:	bb03      	cbnz	r3, 8008a08 <_dtoa_r+0xa00>
 80089c6:	4601      	mov	r1, r0
 80089c8:	9009      	str	r0, [sp, #36]	; 0x24
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fb14 	bl	8008ff8 <__mcmp>
 80089d0:	4603      	mov	r3, r0
 80089d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d4:	4611      	mov	r1, r2
 80089d6:	4620      	mov	r0, r4
 80089d8:	9309      	str	r3, [sp, #36]	; 0x24
 80089da:	f000 f92c 	bl	8008c36 <_Bfree>
 80089de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e0:	b9a3      	cbnz	r3, 8008a0c <_dtoa_r+0xa04>
 80089e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089e4:	b992      	cbnz	r2, 8008a0c <_dtoa_r+0xa04>
 80089e6:	9a08      	ldr	r2, [sp, #32]
 80089e8:	b982      	cbnz	r2, 8008a0c <_dtoa_r+0xa04>
 80089ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ee:	d029      	beq.n	8008a44 <_dtoa_r+0xa3c>
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dd01      	ble.n	80089fa <_dtoa_r+0x9f2>
 80089f6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089fa:	9b07      	ldr	r3, [sp, #28]
 80089fc:	1c5d      	adds	r5, r3, #1
 80089fe:	f883 8000 	strb.w	r8, [r3]
 8008a02:	e784      	b.n	800890e <_dtoa_r+0x906>
 8008a04:	4638      	mov	r0, r7
 8008a06:	e7c2      	b.n	800898e <_dtoa_r+0x986>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7e3      	b.n	80089d4 <_dtoa_r+0x9cc>
 8008a0c:	9a02      	ldr	r2, [sp, #8]
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	db04      	blt.n	8008a1c <_dtoa_r+0xa14>
 8008a12:	d123      	bne.n	8008a5c <_dtoa_r+0xa54>
 8008a14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a16:	bb0a      	cbnz	r2, 8008a5c <_dtoa_r+0xa54>
 8008a18:	9a08      	ldr	r2, [sp, #32]
 8008a1a:	b9fa      	cbnz	r2, 8008a5c <_dtoa_r+0xa54>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	ddec      	ble.n	80089fa <_dtoa_r+0x9f2>
 8008a20:	4659      	mov	r1, fp
 8008a22:	2201      	movs	r2, #1
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fa93 	bl	8008f50 <__lshift>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4683      	mov	fp, r0
 8008a2e:	f000 fae3 	bl	8008ff8 <__mcmp>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	dc03      	bgt.n	8008a3e <_dtoa_r+0xa36>
 8008a36:	d1e0      	bne.n	80089fa <_dtoa_r+0x9f2>
 8008a38:	f018 0f01 	tst.w	r8, #1
 8008a3c:	d0dd      	beq.n	80089fa <_dtoa_r+0x9f2>
 8008a3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a42:	d1d8      	bne.n	80089f6 <_dtoa_r+0x9ee>
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	9a07      	ldr	r2, [sp, #28]
 8008a48:	1c5d      	adds	r5, r3, #1
 8008a4a:	2339      	movs	r3, #57	; 0x39
 8008a4c:	7013      	strb	r3, [r2, #0]
 8008a4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a52:	1e6a      	subs	r2, r5, #1
 8008a54:	2b39      	cmp	r3, #57	; 0x39
 8008a56:	d04d      	beq.n	8008af4 <_dtoa_r+0xaec>
 8008a58:	3301      	adds	r3, #1
 8008a5a:	e052      	b.n	8008b02 <_dtoa_r+0xafa>
 8008a5c:	9a07      	ldr	r2, [sp, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f102 0501 	add.w	r5, r2, #1
 8008a64:	dd06      	ble.n	8008a74 <_dtoa_r+0xa6c>
 8008a66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a6a:	d0eb      	beq.n	8008a44 <_dtoa_r+0xa3c>
 8008a6c:	f108 0801 	add.w	r8, r8, #1
 8008a70:	9b07      	ldr	r3, [sp, #28]
 8008a72:	e7c4      	b.n	80089fe <_dtoa_r+0x9f6>
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	1aeb      	subs	r3, r5, r3
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a80:	d021      	beq.n	8008ac6 <_dtoa_r+0xabe>
 8008a82:	4659      	mov	r1, fp
 8008a84:	2300      	movs	r3, #0
 8008a86:	220a      	movs	r2, #10
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f8eb 	bl	8008c64 <__multadd>
 8008a8e:	45b9      	cmp	r9, r7
 8008a90:	4683      	mov	fp, r0
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	f04f 020a 	mov.w	r2, #10
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	d105      	bne.n	8008aac <_dtoa_r+0xaa4>
 8008aa0:	f000 f8e0 	bl	8008c64 <__multadd>
 8008aa4:	4681      	mov	r9, r0
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	9507      	str	r5, [sp, #28]
 8008aaa:	e778      	b.n	800899e <_dtoa_r+0x996>
 8008aac:	f000 f8da 	bl	8008c64 <__multadd>
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	4681      	mov	r9, r0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	220a      	movs	r2, #10
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 f8d3 	bl	8008c64 <__multadd>
 8008abe:	4607      	mov	r7, r0
 8008ac0:	e7f2      	b.n	8008aa8 <_dtoa_r+0xaa0>
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	2201      	movs	r2, #1
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fa40 	bl	8008f50 <__lshift>
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4683      	mov	fp, r0
 8008ad4:	f000 fa90 	bl	8008ff8 <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dcb8      	bgt.n	8008a4e <_dtoa_r+0xa46>
 8008adc:	d102      	bne.n	8008ae4 <_dtoa_r+0xadc>
 8008ade:	f018 0f01 	tst.w	r8, #1
 8008ae2:	d1b4      	bne.n	8008a4e <_dtoa_r+0xa46>
 8008ae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ae8:	1e6a      	subs	r2, r5, #1
 8008aea:	2b30      	cmp	r3, #48	; 0x30
 8008aec:	f47f af0f 	bne.w	800890e <_dtoa_r+0x906>
 8008af0:	4615      	mov	r5, r2
 8008af2:	e7f7      	b.n	8008ae4 <_dtoa_r+0xadc>
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d105      	bne.n	8008b06 <_dtoa_r+0xafe>
 8008afa:	2331      	movs	r3, #49	; 0x31
 8008afc:	9a06      	ldr	r2, [sp, #24]
 8008afe:	f10a 0a01 	add.w	sl, sl, #1
 8008b02:	7013      	strb	r3, [r2, #0]
 8008b04:	e703      	b.n	800890e <_dtoa_r+0x906>
 8008b06:	4615      	mov	r5, r2
 8008b08:	e7a1      	b.n	8008a4e <_dtoa_r+0xa46>
 8008b0a:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <_dtoa_r+0xb60>)
 8008b0c:	f7ff bae1 	b.w	80080d2 <_dtoa_r+0xca>
 8008b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f47f aabb 	bne.w	800808e <_dtoa_r+0x86>
 8008b18:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <_dtoa_r+0xb64>)
 8008b1a:	f7ff bada 	b.w	80080d2 <_dtoa_r+0xca>
 8008b1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	f77f ae3f 	ble.w	80087a4 <_dtoa_r+0x79c>
 8008b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b28:	9308      	str	r3, [sp, #32]
 8008b2a:	e653      	b.n	80087d4 <_dtoa_r+0x7cc>
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dc03      	bgt.n	8008b3a <_dtoa_r+0xb32>
 8008b32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	f73f aed5 	bgt.w	80088e4 <_dtoa_r+0x8dc>
 8008b3a:	9d06      	ldr	r5, [sp, #24]
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4658      	mov	r0, fp
 8008b40:	f7ff f9d4 	bl	8007eec <quorem>
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b4a:	f805 8b01 	strb.w	r8, [r5], #1
 8008b4e:	9a04      	ldr	r2, [sp, #16]
 8008b50:	1aeb      	subs	r3, r5, r3
 8008b52:	429a      	cmp	r2, r3
 8008b54:	ddb5      	ble.n	8008ac2 <_dtoa_r+0xaba>
 8008b56:	4659      	mov	r1, fp
 8008b58:	2300      	movs	r3, #0
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f881 	bl	8008c64 <__multadd>
 8008b62:	4683      	mov	fp, r0
 8008b64:	e7ea      	b.n	8008b3c <_dtoa_r+0xb34>
 8008b66:	bf00      	nop
 8008b68:	0800aec0 	.word	0x0800aec0
 8008b6c:	0800aee4 	.word	0x0800aee4

08008b70 <_localeconv_r>:
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <_localeconv_r+0x14>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a18      	ldr	r0, [r3, #32]
 8008b76:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <_localeconv_r+0x18>)
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	bf08      	it	eq
 8008b7c:	4618      	moveq	r0, r3
 8008b7e:	30f0      	adds	r0, #240	; 0xf0
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000038 	.word	0x20000038
 8008b88:	2000009c 	.word	0x2000009c

08008b8c <malloc>:
 8008b8c:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <malloc+0xc>)
 8008b8e:	4601      	mov	r1, r0
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	f000 bb53 	b.w	800923c <_malloc_r>
 8008b96:	bf00      	nop
 8008b98:	20000038 	.word	0x20000038

08008b9c <memchr>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	b2c9      	uxtb	r1, r1
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4290      	cmp	r0, r2
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	d101      	bne.n	8008bac <memchr+0x10>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e003      	b.n	8008bb4 <memchr+0x18>
 8008bac:	781c      	ldrb	r4, [r3, #0]
 8008bae:	3001      	adds	r0, #1
 8008bb0:	428c      	cmp	r4, r1
 8008bb2:	d1f6      	bne.n	8008ba2 <memchr+0x6>
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	bd10      	pop	{r4, pc}

08008bb8 <memcpy>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	1e43      	subs	r3, r0, #1
 8008bbc:	440a      	add	r2, r1
 8008bbe:	4291      	cmp	r1, r2
 8008bc0:	d100      	bne.n	8008bc4 <memcpy+0xc>
 8008bc2:	bd10      	pop	{r4, pc}
 8008bc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bcc:	e7f7      	b.n	8008bbe <memcpy+0x6>

08008bce <_Balloc>:
 8008bce:	b570      	push	{r4, r5, r6, lr}
 8008bd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460e      	mov	r6, r1
 8008bd6:	b93d      	cbnz	r5, 8008be8 <_Balloc+0x1a>
 8008bd8:	2010      	movs	r0, #16
 8008bda:	f7ff ffd7 	bl	8008b8c <malloc>
 8008bde:	6260      	str	r0, [r4, #36]	; 0x24
 8008be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008be4:	6005      	str	r5, [r0, #0]
 8008be6:	60c5      	str	r5, [r0, #12]
 8008be8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008bea:	68eb      	ldr	r3, [r5, #12]
 8008bec:	b183      	cbz	r3, 8008c10 <_Balloc+0x42>
 8008bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008bf6:	b9b8      	cbnz	r0, 8008c28 <_Balloc+0x5a>
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	fa01 f506 	lsl.w	r5, r1, r6
 8008bfe:	1d6a      	adds	r2, r5, #5
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 fabf 	bl	8009186 <_calloc_r>
 8008c08:	b160      	cbz	r0, 8008c24 <_Balloc+0x56>
 8008c0a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008c0e:	e00e      	b.n	8008c2e <_Balloc+0x60>
 8008c10:	2221      	movs	r2, #33	; 0x21
 8008c12:	2104      	movs	r1, #4
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fab6 	bl	8009186 <_calloc_r>
 8008c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1c:	60e8      	str	r0, [r5, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e4      	bne.n	8008bee <_Balloc+0x20>
 8008c24:	2000      	movs	r0, #0
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	6802      	ldr	r2, [r0, #0]
 8008c2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c34:	e7f7      	b.n	8008c26 <_Balloc+0x58>

08008c36 <_Bfree>:
 8008c36:	b570      	push	{r4, r5, r6, lr}
 8008c38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	b93c      	cbnz	r4, 8008c50 <_Bfree+0x1a>
 8008c40:	2010      	movs	r0, #16
 8008c42:	f7ff ffa3 	bl	8008b8c <malloc>
 8008c46:	6270      	str	r0, [r6, #36]	; 0x24
 8008c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c4c:	6004      	str	r4, [r0, #0]
 8008c4e:	60c4      	str	r4, [r0, #12]
 8008c50:	b13d      	cbz	r5, 8008c62 <_Bfree+0x2c>
 8008c52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c54:	686a      	ldr	r2, [r5, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c5c:	6029      	str	r1, [r5, #0]
 8008c5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008c62:	bd70      	pop	{r4, r5, r6, pc}

08008c64 <__multadd>:
 8008c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	461f      	mov	r7, r3
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	2300      	movs	r3, #0
 8008c70:	690d      	ldr	r5, [r1, #16]
 8008c72:	f101 0c14 	add.w	ip, r1, #20
 8008c76:	f8dc 0000 	ldr.w	r0, [ip]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	b281      	uxth	r1, r0
 8008c7e:	fb02 7101 	mla	r1, r2, r1, r7
 8008c82:	0c00      	lsrs	r0, r0, #16
 8008c84:	0c0f      	lsrs	r7, r1, #16
 8008c86:	fb02 7000 	mla	r0, r2, r0, r7
 8008c8a:	b289      	uxth	r1, r1
 8008c8c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c90:	429d      	cmp	r5, r3
 8008c92:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c96:	f84c 1b04 	str.w	r1, [ip], #4
 8008c9a:	dcec      	bgt.n	8008c76 <__multadd+0x12>
 8008c9c:	b1d7      	cbz	r7, 8008cd4 <__multadd+0x70>
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	dc12      	bgt.n	8008cca <__multadd+0x66>
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	3101      	adds	r1, #1
 8008caa:	f7ff ff90 	bl	8008bce <_Balloc>
 8008cae:	4680      	mov	r8, r0
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	f104 010c 	add.w	r1, r4, #12
 8008cb6:	3202      	adds	r2, #2
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	300c      	adds	r0, #12
 8008cbc:	f7ff ff7c 	bl	8008bb8 <memcpy>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ffb7 	bl	8008c36 <_Bfree>
 8008cc8:	4644      	mov	r4, r8
 8008cca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cce:	3501      	adds	r5, #1
 8008cd0:	615f      	str	r7, [r3, #20]
 8008cd2:	6125      	str	r5, [r4, #16]
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cda <__hi0bits>:
 8008cda:	0c02      	lsrs	r2, r0, #16
 8008cdc:	0412      	lsls	r2, r2, #16
 8008cde:	4603      	mov	r3, r0
 8008ce0:	b9b2      	cbnz	r2, 8008d10 <__hi0bits+0x36>
 8008ce2:	0403      	lsls	r3, r0, #16
 8008ce4:	2010      	movs	r0, #16
 8008ce6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008cea:	bf04      	itt	eq
 8008cec:	021b      	lsleq	r3, r3, #8
 8008cee:	3008      	addeq	r0, #8
 8008cf0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008cf4:	bf04      	itt	eq
 8008cf6:	011b      	lsleq	r3, r3, #4
 8008cf8:	3004      	addeq	r0, #4
 8008cfa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008cfe:	bf04      	itt	eq
 8008d00:	009b      	lsleq	r3, r3, #2
 8008d02:	3002      	addeq	r0, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	db06      	blt.n	8008d16 <__hi0bits+0x3c>
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	d503      	bpl.n	8008d14 <__hi0bits+0x3a>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	4770      	bx	lr
 8008d10:	2000      	movs	r0, #0
 8008d12:	e7e8      	b.n	8008ce6 <__hi0bits+0xc>
 8008d14:	2020      	movs	r0, #32
 8008d16:	4770      	bx	lr

08008d18 <__lo0bits>:
 8008d18:	6803      	ldr	r3, [r0, #0]
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	f013 0207 	ands.w	r2, r3, #7
 8008d20:	d00b      	beq.n	8008d3a <__lo0bits+0x22>
 8008d22:	07da      	lsls	r2, r3, #31
 8008d24:	d423      	bmi.n	8008d6e <__lo0bits+0x56>
 8008d26:	0798      	lsls	r0, r3, #30
 8008d28:	bf49      	itett	mi
 8008d2a:	085b      	lsrmi	r3, r3, #1
 8008d2c:	089b      	lsrpl	r3, r3, #2
 8008d2e:	2001      	movmi	r0, #1
 8008d30:	600b      	strmi	r3, [r1, #0]
 8008d32:	bf5c      	itt	pl
 8008d34:	600b      	strpl	r3, [r1, #0]
 8008d36:	2002      	movpl	r0, #2
 8008d38:	4770      	bx	lr
 8008d3a:	b298      	uxth	r0, r3
 8008d3c:	b9a8      	cbnz	r0, 8008d6a <__lo0bits+0x52>
 8008d3e:	2010      	movs	r0, #16
 8008d40:	0c1b      	lsrs	r3, r3, #16
 8008d42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d46:	bf04      	itt	eq
 8008d48:	0a1b      	lsreq	r3, r3, #8
 8008d4a:	3008      	addeq	r0, #8
 8008d4c:	071a      	lsls	r2, r3, #28
 8008d4e:	bf04      	itt	eq
 8008d50:	091b      	lsreq	r3, r3, #4
 8008d52:	3004      	addeq	r0, #4
 8008d54:	079a      	lsls	r2, r3, #30
 8008d56:	bf04      	itt	eq
 8008d58:	089b      	lsreq	r3, r3, #2
 8008d5a:	3002      	addeq	r0, #2
 8008d5c:	07da      	lsls	r2, r3, #31
 8008d5e:	d402      	bmi.n	8008d66 <__lo0bits+0x4e>
 8008d60:	085b      	lsrs	r3, r3, #1
 8008d62:	d006      	beq.n	8008d72 <__lo0bits+0x5a>
 8008d64:	3001      	adds	r0, #1
 8008d66:	600b      	str	r3, [r1, #0]
 8008d68:	4770      	bx	lr
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	e7e9      	b.n	8008d42 <__lo0bits+0x2a>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	4770      	bx	lr
 8008d72:	2020      	movs	r0, #32
 8008d74:	4770      	bx	lr

08008d76 <__i2b>:
 8008d76:	b510      	push	{r4, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	f7ff ff27 	bl	8008bce <_Balloc>
 8008d80:	2201      	movs	r2, #1
 8008d82:	6144      	str	r4, [r0, #20]
 8008d84:	6102      	str	r2, [r0, #16]
 8008d86:	bd10      	pop	{r4, pc}

08008d88 <__multiply>:
 8008d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	690a      	ldr	r2, [r1, #16]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	4688      	mov	r8, r1
 8008d94:	429a      	cmp	r2, r3
 8008d96:	bfbe      	ittt	lt
 8008d98:	460b      	movlt	r3, r1
 8008d9a:	46a0      	movlt	r8, r4
 8008d9c:	461c      	movlt	r4, r3
 8008d9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008da2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008daa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dae:	eb07 0609 	add.w	r6, r7, r9
 8008db2:	42b3      	cmp	r3, r6
 8008db4:	bfb8      	it	lt
 8008db6:	3101      	addlt	r1, #1
 8008db8:	f7ff ff09 	bl	8008bce <_Balloc>
 8008dbc:	f100 0514 	add.w	r5, r0, #20
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008dc8:	4573      	cmp	r3, lr
 8008dca:	d316      	bcc.n	8008dfa <__multiply+0x72>
 8008dcc:	f104 0214 	add.w	r2, r4, #20
 8008dd0:	f108 0114 	add.w	r1, r8, #20
 8008dd4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008dd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	9201      	str	r2, [sp, #4]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d80c      	bhi.n	8008e00 <__multiply+0x78>
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	dd03      	ble.n	8008df2 <__multiply+0x6a>
 8008dea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d05d      	beq.n	8008eae <__multiply+0x126>
 8008df2:	6106      	str	r6, [r0, #16]
 8008df4:	b003      	add	sp, #12
 8008df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfa:	f843 2b04 	str.w	r2, [r3], #4
 8008dfe:	e7e3      	b.n	8008dc8 <__multiply+0x40>
 8008e00:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e04:	f1bb 0f00 	cmp.w	fp, #0
 8008e08:	d023      	beq.n	8008e52 <__multiply+0xca>
 8008e0a:	4689      	mov	r9, r1
 8008e0c:	46ac      	mov	ip, r5
 8008e0e:	f04f 0800 	mov.w	r8, #0
 8008e12:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e16:	f8dc a000 	ldr.w	sl, [ip]
 8008e1a:	b2a3      	uxth	r3, r4
 8008e1c:	fa1f fa8a 	uxth.w	sl, sl
 8008e20:	fb0b a303 	mla	r3, fp, r3, sl
 8008e24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e28:	f8dc 4000 	ldr.w	r4, [ip]
 8008e2c:	4443      	add	r3, r8
 8008e2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e32:	fb0b 840a 	mla	r4, fp, sl, r8
 8008e36:	46e2      	mov	sl, ip
 8008e38:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e42:	454f      	cmp	r7, r9
 8008e44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e48:	f84a 3b04 	str.w	r3, [sl], #4
 8008e4c:	d82b      	bhi.n	8008ea6 <__multiply+0x11e>
 8008e4e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	3204      	adds	r2, #4
 8008e56:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e5a:	f1ba 0f00 	cmp.w	sl, #0
 8008e5e:	d020      	beq.n	8008ea2 <__multiply+0x11a>
 8008e60:	4689      	mov	r9, r1
 8008e62:	46a8      	mov	r8, r5
 8008e64:	f04f 0b00 	mov.w	fp, #0
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e6e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e78:	46c4      	mov	ip, r8
 8008e7a:	445c      	add	r4, fp
 8008e7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e80:	f84c 3b04 	str.w	r3, [ip], #4
 8008e84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e88:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e8c:	0c1b      	lsrs	r3, r3, #16
 8008e8e:	fb0a b303 	mla	r3, sl, r3, fp
 8008e92:	454f      	cmp	r7, r9
 8008e94:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e98:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e9c:	d805      	bhi.n	8008eaa <__multiply+0x122>
 8008e9e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ea2:	3504      	adds	r5, #4
 8008ea4:	e79b      	b.n	8008dde <__multiply+0x56>
 8008ea6:	46d4      	mov	ip, sl
 8008ea8:	e7b3      	b.n	8008e12 <__multiply+0x8a>
 8008eaa:	46e0      	mov	r8, ip
 8008eac:	e7dd      	b.n	8008e6a <__multiply+0xe2>
 8008eae:	3e01      	subs	r6, #1
 8008eb0:	e799      	b.n	8008de6 <__multiply+0x5e>
	...

08008eb4 <__pow5mult>:
 8008eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	4615      	mov	r5, r2
 8008eba:	f012 0203 	ands.w	r2, r2, #3
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	d007      	beq.n	8008ed4 <__pow5mult+0x20>
 8008ec4:	4c21      	ldr	r4, [pc, #132]	; (8008f4c <__pow5mult+0x98>)
 8008ec6:	3a01      	subs	r2, #1
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ece:	f7ff fec9 	bl	8008c64 <__multadd>
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	10ad      	asrs	r5, r5, #2
 8008ed6:	d035      	beq.n	8008f44 <__pow5mult+0x90>
 8008ed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008eda:	b93c      	cbnz	r4, 8008eec <__pow5mult+0x38>
 8008edc:	2010      	movs	r0, #16
 8008ede:	f7ff fe55 	bl	8008b8c <malloc>
 8008ee2:	6270      	str	r0, [r6, #36]	; 0x24
 8008ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ee8:	6004      	str	r4, [r0, #0]
 8008eea:	60c4      	str	r4, [r0, #12]
 8008eec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ef4:	b94c      	cbnz	r4, 8008f0a <__pow5mult+0x56>
 8008ef6:	f240 2171 	movw	r1, #625	; 0x271
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ff3b 	bl	8008d76 <__i2b>
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	f04f 0800 	mov.w	r8, #0
 8008f0e:	07eb      	lsls	r3, r5, #31
 8008f10:	d50a      	bpl.n	8008f28 <__pow5mult+0x74>
 8008f12:	4639      	mov	r1, r7
 8008f14:	4622      	mov	r2, r4
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff ff36 	bl	8008d88 <__multiply>
 8008f1c:	4681      	mov	r9, r0
 8008f1e:	4639      	mov	r1, r7
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff fe88 	bl	8008c36 <_Bfree>
 8008f26:	464f      	mov	r7, r9
 8008f28:	106d      	asrs	r5, r5, #1
 8008f2a:	d00b      	beq.n	8008f44 <__pow5mult+0x90>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	b938      	cbnz	r0, 8008f40 <__pow5mult+0x8c>
 8008f30:	4622      	mov	r2, r4
 8008f32:	4621      	mov	r1, r4
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff ff27 	bl	8008d88 <__multiply>
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	f8c0 8000 	str.w	r8, [r0]
 8008f40:	4604      	mov	r4, r0
 8008f42:	e7e4      	b.n	8008f0e <__pow5mult+0x5a>
 8008f44:	4638      	mov	r0, r7
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800afe8 	.word	0x0800afe8

08008f50 <__lshift>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	460c      	mov	r4, r1
 8008f56:	4607      	mov	r7, r0
 8008f58:	4616      	mov	r6, r2
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f60:	eb0a 0903 	add.w	r9, sl, r3
 8008f64:	6849      	ldr	r1, [r1, #4]
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	f109 0501 	add.w	r5, r9, #1
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	db32      	blt.n	8008fd6 <__lshift+0x86>
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7ff fe2c 	bl	8008bce <_Balloc>
 8008f76:	2300      	movs	r3, #0
 8008f78:	4680      	mov	r8, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f100 0114 	add.w	r1, r0, #20
 8008f80:	4553      	cmp	r3, sl
 8008f82:	db2b      	blt.n	8008fdc <__lshift+0x8c>
 8008f84:	6920      	ldr	r0, [r4, #16]
 8008f86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f8a:	f104 0314 	add.w	r3, r4, #20
 8008f8e:	f016 021f 	ands.w	r2, r6, #31
 8008f92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f9a:	d025      	beq.n	8008fe8 <__lshift+0x98>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f1c2 0e20 	rsb	lr, r2, #32
 8008fa2:	468a      	mov	sl, r1
 8008fa4:	681e      	ldr	r6, [r3, #0]
 8008fa6:	4096      	lsls	r6, r2
 8008fa8:	4330      	orrs	r0, r6
 8008faa:	f84a 0b04 	str.w	r0, [sl], #4
 8008fae:	f853 0b04 	ldr.w	r0, [r3], #4
 8008fb2:	459c      	cmp	ip, r3
 8008fb4:	fa20 f00e 	lsr.w	r0, r0, lr
 8008fb8:	d814      	bhi.n	8008fe4 <__lshift+0x94>
 8008fba:	6048      	str	r0, [r1, #4]
 8008fbc:	b108      	cbz	r0, 8008fc2 <__lshift+0x72>
 8008fbe:	f109 0502 	add.w	r5, r9, #2
 8008fc2:	3d01      	subs	r5, #1
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008fca:	4621      	mov	r1, r4
 8008fcc:	f7ff fe33 	bl	8008c36 <_Bfree>
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd6:	3101      	adds	r1, #1
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	e7c7      	b.n	8008f6c <__lshift+0x1c>
 8008fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	e7cd      	b.n	8008f80 <__lshift+0x30>
 8008fe4:	4651      	mov	r1, sl
 8008fe6:	e7dc      	b.n	8008fa2 <__lshift+0x52>
 8008fe8:	3904      	subs	r1, #4
 8008fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fee:	459c      	cmp	ip, r3
 8008ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ff4:	d8f9      	bhi.n	8008fea <__lshift+0x9a>
 8008ff6:	e7e4      	b.n	8008fc2 <__lshift+0x72>

08008ff8 <__mcmp>:
 8008ff8:	6903      	ldr	r3, [r0, #16]
 8008ffa:	690a      	ldr	r2, [r1, #16]
 8008ffc:	b530      	push	{r4, r5, lr}
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	d10c      	bne.n	800901c <__mcmp+0x24>
 8009002:	0092      	lsls	r2, r2, #2
 8009004:	3014      	adds	r0, #20
 8009006:	3114      	adds	r1, #20
 8009008:	1884      	adds	r4, r0, r2
 800900a:	4411      	add	r1, r2
 800900c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009014:	4295      	cmp	r5, r2
 8009016:	d003      	beq.n	8009020 <__mcmp+0x28>
 8009018:	d305      	bcc.n	8009026 <__mcmp+0x2e>
 800901a:	2301      	movs	r3, #1
 800901c:	4618      	mov	r0, r3
 800901e:	bd30      	pop	{r4, r5, pc}
 8009020:	42a0      	cmp	r0, r4
 8009022:	d3f3      	bcc.n	800900c <__mcmp+0x14>
 8009024:	e7fa      	b.n	800901c <__mcmp+0x24>
 8009026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902a:	e7f7      	b.n	800901c <__mcmp+0x24>

0800902c <__mdiff>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460d      	mov	r5, r1
 8009032:	4607      	mov	r7, r0
 8009034:	4611      	mov	r1, r2
 8009036:	4628      	mov	r0, r5
 8009038:	4614      	mov	r4, r2
 800903a:	f7ff ffdd 	bl	8008ff8 <__mcmp>
 800903e:	1e06      	subs	r6, r0, #0
 8009040:	d108      	bne.n	8009054 <__mdiff+0x28>
 8009042:	4631      	mov	r1, r6
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fdc2 	bl	8008bce <_Balloc>
 800904a:	2301      	movs	r3, #1
 800904c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	bfa4      	itt	ge
 8009056:	4623      	movge	r3, r4
 8009058:	462c      	movge	r4, r5
 800905a:	4638      	mov	r0, r7
 800905c:	6861      	ldr	r1, [r4, #4]
 800905e:	bfa6      	itte	ge
 8009060:	461d      	movge	r5, r3
 8009062:	2600      	movge	r6, #0
 8009064:	2601      	movlt	r6, #1
 8009066:	f7ff fdb2 	bl	8008bce <_Balloc>
 800906a:	f04f 0e00 	mov.w	lr, #0
 800906e:	60c6      	str	r6, [r0, #12]
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	6926      	ldr	r6, [r4, #16]
 8009074:	f104 0214 	add.w	r2, r4, #20
 8009078:	f105 0914 	add.w	r9, r5, #20
 800907c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009080:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009084:	f100 0114 	add.w	r1, r0, #20
 8009088:	f852 ab04 	ldr.w	sl, [r2], #4
 800908c:	f859 5b04 	ldr.w	r5, [r9], #4
 8009090:	fa1f f38a 	uxth.w	r3, sl
 8009094:	4473      	add	r3, lr
 8009096:	b2ac      	uxth	r4, r5
 8009098:	1b1b      	subs	r3, r3, r4
 800909a:	0c2c      	lsrs	r4, r5, #16
 800909c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80090a0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80090aa:	45c8      	cmp	r8, r9
 80090ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80090b0:	4694      	mov	ip, r2
 80090b2:	f841 4b04 	str.w	r4, [r1], #4
 80090b6:	d8e7      	bhi.n	8009088 <__mdiff+0x5c>
 80090b8:	45bc      	cmp	ip, r7
 80090ba:	d304      	bcc.n	80090c6 <__mdiff+0x9a>
 80090bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80090c0:	b183      	cbz	r3, 80090e4 <__mdiff+0xb8>
 80090c2:	6106      	str	r6, [r0, #16]
 80090c4:	e7c4      	b.n	8009050 <__mdiff+0x24>
 80090c6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80090ca:	b2a2      	uxth	r2, r4
 80090cc:	4472      	add	r2, lr
 80090ce:	1413      	asrs	r3, r2, #16
 80090d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80090d4:	b292      	uxth	r2, r2
 80090d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090da:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80090de:	f841 2b04 	str.w	r2, [r1], #4
 80090e2:	e7e9      	b.n	80090b8 <__mdiff+0x8c>
 80090e4:	3e01      	subs	r6, #1
 80090e6:	e7e9      	b.n	80090bc <__mdiff+0x90>

080090e8 <__d2b>:
 80090e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090ec:	461c      	mov	r4, r3
 80090ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80090f2:	2101      	movs	r1, #1
 80090f4:	4690      	mov	r8, r2
 80090f6:	f7ff fd6a 	bl	8008bce <_Balloc>
 80090fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80090fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009102:	4607      	mov	r7, r0
 8009104:	bb34      	cbnz	r4, 8009154 <__d2b+0x6c>
 8009106:	9201      	str	r2, [sp, #4]
 8009108:	f1b8 0200 	subs.w	r2, r8, #0
 800910c:	d027      	beq.n	800915e <__d2b+0x76>
 800910e:	a802      	add	r0, sp, #8
 8009110:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009114:	f7ff fe00 	bl	8008d18 <__lo0bits>
 8009118:	9900      	ldr	r1, [sp, #0]
 800911a:	b1f0      	cbz	r0, 800915a <__d2b+0x72>
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	f1c0 0320 	rsb	r3, r0, #32
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	430b      	orrs	r3, r1
 8009128:	40c2      	lsrs	r2, r0
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	9201      	str	r2, [sp, #4]
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bf14      	ite	ne
 8009134:	2102      	movne	r1, #2
 8009136:	2101      	moveq	r1, #1
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	6139      	str	r1, [r7, #16]
 800913c:	b1c4      	cbz	r4, 8009170 <__d2b+0x88>
 800913e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009142:	4404      	add	r4, r0
 8009144:	6034      	str	r4, [r6, #0]
 8009146:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	4638      	mov	r0, r7
 800914e:	b002      	add	sp, #8
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009158:	e7d5      	b.n	8009106 <__d2b+0x1e>
 800915a:	6179      	str	r1, [r7, #20]
 800915c:	e7e7      	b.n	800912e <__d2b+0x46>
 800915e:	a801      	add	r0, sp, #4
 8009160:	f7ff fdda 	bl	8008d18 <__lo0bits>
 8009164:	2101      	movs	r1, #1
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	6139      	str	r1, [r7, #16]
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	3020      	adds	r0, #32
 800916e:	e7e5      	b.n	800913c <__d2b+0x54>
 8009170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009174:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009178:	6030      	str	r0, [r6, #0]
 800917a:	6918      	ldr	r0, [r3, #16]
 800917c:	f7ff fdad 	bl	8008cda <__hi0bits>
 8009180:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009184:	e7e1      	b.n	800914a <__d2b+0x62>

08009186 <_calloc_r>:
 8009186:	b538      	push	{r3, r4, r5, lr}
 8009188:	fb02 f401 	mul.w	r4, r2, r1
 800918c:	4621      	mov	r1, r4
 800918e:	f000 f855 	bl	800923c <_malloc_r>
 8009192:	4605      	mov	r5, r0
 8009194:	b118      	cbz	r0, 800919e <_calloc_r+0x18>
 8009196:	4622      	mov	r2, r4
 8009198:	2100      	movs	r1, #0
 800919a:	f7fe fa2f 	bl	80075fc <memset>
 800919e:	4628      	mov	r0, r5
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080091a4 <_free_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4605      	mov	r5, r0
 80091a8:	2900      	cmp	r1, #0
 80091aa:	d043      	beq.n	8009234 <_free_r+0x90>
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f0c      	subs	r4, r1, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfb8      	it	lt
 80091b6:	18e4      	addlt	r4, r4, r3
 80091b8:	f000 fa27 	bl	800960a <__malloc_lock>
 80091bc:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <_free_r+0x94>)
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	4610      	mov	r0, r2
 80091c2:	b933      	cbnz	r3, 80091d2 <_free_r+0x2e>
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	6014      	str	r4, [r2, #0]
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f000 ba1d 	b.w	800960c <__malloc_unlock>
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	d90b      	bls.n	80091ee <_free_r+0x4a>
 80091d6:	6821      	ldr	r1, [r4, #0]
 80091d8:	1862      	adds	r2, r4, r1
 80091da:	4293      	cmp	r3, r2
 80091dc:	bf01      	itttt	eq
 80091de:	681a      	ldreq	r2, [r3, #0]
 80091e0:	685b      	ldreq	r3, [r3, #4]
 80091e2:	1852      	addeq	r2, r2, r1
 80091e4:	6022      	streq	r2, [r4, #0]
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	6004      	str	r4, [r0, #0]
 80091ea:	e7ed      	b.n	80091c8 <_free_r+0x24>
 80091ec:	4613      	mov	r3, r2
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	b10a      	cbz	r2, 80091f6 <_free_r+0x52>
 80091f2:	42a2      	cmp	r2, r4
 80091f4:	d9fa      	bls.n	80091ec <_free_r+0x48>
 80091f6:	6819      	ldr	r1, [r3, #0]
 80091f8:	1858      	adds	r0, r3, r1
 80091fa:	42a0      	cmp	r0, r4
 80091fc:	d10b      	bne.n	8009216 <_free_r+0x72>
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	4401      	add	r1, r0
 8009202:	1858      	adds	r0, r3, r1
 8009204:	4282      	cmp	r2, r0
 8009206:	6019      	str	r1, [r3, #0]
 8009208:	d1de      	bne.n	80091c8 <_free_r+0x24>
 800920a:	6810      	ldr	r0, [r2, #0]
 800920c:	6852      	ldr	r2, [r2, #4]
 800920e:	4401      	add	r1, r0
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	605a      	str	r2, [r3, #4]
 8009214:	e7d8      	b.n	80091c8 <_free_r+0x24>
 8009216:	d902      	bls.n	800921e <_free_r+0x7a>
 8009218:	230c      	movs	r3, #12
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	e7d4      	b.n	80091c8 <_free_r+0x24>
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1821      	adds	r1, r4, r0
 8009222:	428a      	cmp	r2, r1
 8009224:	bf01      	itttt	eq
 8009226:	6811      	ldreq	r1, [r2, #0]
 8009228:	6852      	ldreq	r2, [r2, #4]
 800922a:	1809      	addeq	r1, r1, r0
 800922c:	6021      	streq	r1, [r4, #0]
 800922e:	6062      	str	r2, [r4, #4]
 8009230:	605c      	str	r4, [r3, #4]
 8009232:	e7c9      	b.n	80091c8 <_free_r+0x24>
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	20000288 	.word	0x20000288

0800923c <_malloc_r>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	1ccd      	adds	r5, r1, #3
 8009240:	f025 0503 	bic.w	r5, r5, #3
 8009244:	3508      	adds	r5, #8
 8009246:	2d0c      	cmp	r5, #12
 8009248:	bf38      	it	cc
 800924a:	250c      	movcc	r5, #12
 800924c:	2d00      	cmp	r5, #0
 800924e:	4606      	mov	r6, r0
 8009250:	db01      	blt.n	8009256 <_malloc_r+0x1a>
 8009252:	42a9      	cmp	r1, r5
 8009254:	d903      	bls.n	800925e <_malloc_r+0x22>
 8009256:	230c      	movs	r3, #12
 8009258:	6033      	str	r3, [r6, #0]
 800925a:	2000      	movs	r0, #0
 800925c:	bd70      	pop	{r4, r5, r6, pc}
 800925e:	f000 f9d4 	bl	800960a <__malloc_lock>
 8009262:	4a21      	ldr	r2, [pc, #132]	; (80092e8 <_malloc_r+0xac>)
 8009264:	6814      	ldr	r4, [r2, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	b991      	cbnz	r1, 8009290 <_malloc_r+0x54>
 800926a:	4c20      	ldr	r4, [pc, #128]	; (80092ec <_malloc_r+0xb0>)
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	b91b      	cbnz	r3, 8009278 <_malloc_r+0x3c>
 8009270:	4630      	mov	r0, r6
 8009272:	f000 f98f 	bl	8009594 <_sbrk_r>
 8009276:	6020      	str	r0, [r4, #0]
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f000 f98a 	bl	8009594 <_sbrk_r>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d124      	bne.n	80092ce <_malloc_r+0x92>
 8009284:	230c      	movs	r3, #12
 8009286:	4630      	mov	r0, r6
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	f000 f9bf 	bl	800960c <__malloc_unlock>
 800928e:	e7e4      	b.n	800925a <_malloc_r+0x1e>
 8009290:	680b      	ldr	r3, [r1, #0]
 8009292:	1b5b      	subs	r3, r3, r5
 8009294:	d418      	bmi.n	80092c8 <_malloc_r+0x8c>
 8009296:	2b0b      	cmp	r3, #11
 8009298:	d90f      	bls.n	80092ba <_malloc_r+0x7e>
 800929a:	600b      	str	r3, [r1, #0]
 800929c:	18cc      	adds	r4, r1, r3
 800929e:	50cd      	str	r5, [r1, r3]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f9b3 	bl	800960c <__malloc_unlock>
 80092a6:	f104 000b 	add.w	r0, r4, #11
 80092aa:	1d23      	adds	r3, r4, #4
 80092ac:	f020 0007 	bic.w	r0, r0, #7
 80092b0:	1ac3      	subs	r3, r0, r3
 80092b2:	d0d3      	beq.n	800925c <_malloc_r+0x20>
 80092b4:	425a      	negs	r2, r3
 80092b6:	50e2      	str	r2, [r4, r3]
 80092b8:	e7d0      	b.n	800925c <_malloc_r+0x20>
 80092ba:	684b      	ldr	r3, [r1, #4]
 80092bc:	428c      	cmp	r4, r1
 80092be:	bf16      	itet	ne
 80092c0:	6063      	strne	r3, [r4, #4]
 80092c2:	6013      	streq	r3, [r2, #0]
 80092c4:	460c      	movne	r4, r1
 80092c6:	e7eb      	b.n	80092a0 <_malloc_r+0x64>
 80092c8:	460c      	mov	r4, r1
 80092ca:	6849      	ldr	r1, [r1, #4]
 80092cc:	e7cc      	b.n	8009268 <_malloc_r+0x2c>
 80092ce:	1cc4      	adds	r4, r0, #3
 80092d0:	f024 0403 	bic.w	r4, r4, #3
 80092d4:	42a0      	cmp	r0, r4
 80092d6:	d005      	beq.n	80092e4 <_malloc_r+0xa8>
 80092d8:	1a21      	subs	r1, r4, r0
 80092da:	4630      	mov	r0, r6
 80092dc:	f000 f95a 	bl	8009594 <_sbrk_r>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d0cf      	beq.n	8009284 <_malloc_r+0x48>
 80092e4:	6025      	str	r5, [r4, #0]
 80092e6:	e7db      	b.n	80092a0 <_malloc_r+0x64>
 80092e8:	20000288 	.word	0x20000288
 80092ec:	2000028c 	.word	0x2000028c

080092f0 <__ssputs_r>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	688e      	ldr	r6, [r1, #8]
 80092f6:	4682      	mov	sl, r0
 80092f8:	429e      	cmp	r6, r3
 80092fa:	460c      	mov	r4, r1
 80092fc:	4690      	mov	r8, r2
 80092fe:	4699      	mov	r9, r3
 8009300:	d837      	bhi.n	8009372 <__ssputs_r+0x82>
 8009302:	898a      	ldrh	r2, [r1, #12]
 8009304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009308:	d031      	beq.n	800936e <__ssputs_r+0x7e>
 800930a:	2302      	movs	r3, #2
 800930c:	6825      	ldr	r5, [r4, #0]
 800930e:	6909      	ldr	r1, [r1, #16]
 8009310:	1a6f      	subs	r7, r5, r1
 8009312:	6965      	ldr	r5, [r4, #20]
 8009314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009318:	fb95 f5f3 	sdiv	r5, r5, r3
 800931c:	f109 0301 	add.w	r3, r9, #1
 8009320:	443b      	add	r3, r7
 8009322:	429d      	cmp	r5, r3
 8009324:	bf38      	it	cc
 8009326:	461d      	movcc	r5, r3
 8009328:	0553      	lsls	r3, r2, #21
 800932a:	d530      	bpl.n	800938e <__ssputs_r+0x9e>
 800932c:	4629      	mov	r1, r5
 800932e:	f7ff ff85 	bl	800923c <_malloc_r>
 8009332:	4606      	mov	r6, r0
 8009334:	b950      	cbnz	r0, 800934c <__ssputs_r+0x5c>
 8009336:	230c      	movs	r3, #12
 8009338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800933c:	f8ca 3000 	str.w	r3, [sl]
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934c:	463a      	mov	r2, r7
 800934e:	6921      	ldr	r1, [r4, #16]
 8009350:	f7ff fc32 	bl	8008bb8 <memcpy>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	6126      	str	r6, [r4, #16]
 8009362:	443e      	add	r6, r7
 8009364:	6026      	str	r6, [r4, #0]
 8009366:	464e      	mov	r6, r9
 8009368:	6165      	str	r5, [r4, #20]
 800936a:	1bed      	subs	r5, r5, r7
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	454e      	cmp	r6, r9
 8009370:	d900      	bls.n	8009374 <__ssputs_r+0x84>
 8009372:	464e      	mov	r6, r9
 8009374:	4632      	mov	r2, r6
 8009376:	4641      	mov	r1, r8
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	f000 f92d 	bl	80095d8 <memmove>
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	2000      	movs	r0, #0
 8009382:	1b9b      	subs	r3, r3, r6
 8009384:	60a3      	str	r3, [r4, #8]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	441e      	add	r6, r3
 800938a:	6026      	str	r6, [r4, #0]
 800938c:	e7dc      	b.n	8009348 <__ssputs_r+0x58>
 800938e:	462a      	mov	r2, r5
 8009390:	f000 f93d 	bl	800960e <_realloc_r>
 8009394:	4606      	mov	r6, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d1e2      	bne.n	8009360 <__ssputs_r+0x70>
 800939a:	6921      	ldr	r1, [r4, #16]
 800939c:	4650      	mov	r0, sl
 800939e:	f7ff ff01 	bl	80091a4 <_free_r>
 80093a2:	e7c8      	b.n	8009336 <__ssputs_r+0x46>

080093a4 <_svfiprintf_r>:
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	461d      	mov	r5, r3
 80093aa:	898b      	ldrh	r3, [r1, #12]
 80093ac:	b09d      	sub	sp, #116	; 0x74
 80093ae:	061f      	lsls	r7, r3, #24
 80093b0:	4680      	mov	r8, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d50f      	bpl.n	80093d8 <_svfiprintf_r+0x34>
 80093b8:	690b      	ldr	r3, [r1, #16]
 80093ba:	b96b      	cbnz	r3, 80093d8 <_svfiprintf_r+0x34>
 80093bc:	2140      	movs	r1, #64	; 0x40
 80093be:	f7ff ff3d 	bl	800923c <_malloc_r>
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	6120      	str	r0, [r4, #16]
 80093c6:	b928      	cbnz	r0, 80093d4 <_svfiprintf_r+0x30>
 80093c8:	230c      	movs	r3, #12
 80093ca:	f8c8 3000 	str.w	r3, [r8]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d2:	e0c8      	b.n	8009566 <_svfiprintf_r+0x1c2>
 80093d4:	2340      	movs	r3, #64	; 0x40
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	2300      	movs	r3, #0
 80093da:	9309      	str	r3, [sp, #36]	; 0x24
 80093dc:	2320      	movs	r3, #32
 80093de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e2:	2330      	movs	r3, #48	; 0x30
 80093e4:	f04f 0b01 	mov.w	fp, #1
 80093e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ec:	9503      	str	r5, [sp, #12]
 80093ee:	4637      	mov	r7, r6
 80093f0:	463d      	mov	r5, r7
 80093f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093f6:	b10b      	cbz	r3, 80093fc <_svfiprintf_r+0x58>
 80093f8:	2b25      	cmp	r3, #37	; 0x25
 80093fa:	d13e      	bne.n	800947a <_svfiprintf_r+0xd6>
 80093fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009400:	d00b      	beq.n	800941a <_svfiprintf_r+0x76>
 8009402:	4653      	mov	r3, sl
 8009404:	4632      	mov	r2, r6
 8009406:	4621      	mov	r1, r4
 8009408:	4640      	mov	r0, r8
 800940a:	f7ff ff71 	bl	80092f0 <__ssputs_r>
 800940e:	3001      	adds	r0, #1
 8009410:	f000 80a4 	beq.w	800955c <_svfiprintf_r+0x1b8>
 8009414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009416:	4453      	add	r3, sl
 8009418:	9309      	str	r3, [sp, #36]	; 0x24
 800941a:	783b      	ldrb	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 809d 	beq.w	800955c <_svfiprintf_r+0x1b8>
 8009422:	2300      	movs	r3, #0
 8009424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009434:	931a      	str	r3, [sp, #104]	; 0x68
 8009436:	462f      	mov	r7, r5
 8009438:	2205      	movs	r2, #5
 800943a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800943e:	4850      	ldr	r0, [pc, #320]	; (8009580 <_svfiprintf_r+0x1dc>)
 8009440:	f7ff fbac 	bl	8008b9c <memchr>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	b9d0      	cbnz	r0, 800947e <_svfiprintf_r+0xda>
 8009448:	06d9      	lsls	r1, r3, #27
 800944a:	bf44      	itt	mi
 800944c:	2220      	movmi	r2, #32
 800944e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009452:	071a      	lsls	r2, r3, #28
 8009454:	bf44      	itt	mi
 8009456:	222b      	movmi	r2, #43	; 0x2b
 8009458:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800945c:	782a      	ldrb	r2, [r5, #0]
 800945e:	2a2a      	cmp	r2, #42	; 0x2a
 8009460:	d015      	beq.n	800948e <_svfiprintf_r+0xea>
 8009462:	462f      	mov	r7, r5
 8009464:	2000      	movs	r0, #0
 8009466:	250a      	movs	r5, #10
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	4639      	mov	r1, r7
 800946c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009470:	3b30      	subs	r3, #48	; 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d94d      	bls.n	8009512 <_svfiprintf_r+0x16e>
 8009476:	b1b8      	cbz	r0, 80094a8 <_svfiprintf_r+0x104>
 8009478:	e00f      	b.n	800949a <_svfiprintf_r+0xf6>
 800947a:	462f      	mov	r7, r5
 800947c:	e7b8      	b.n	80093f0 <_svfiprintf_r+0x4c>
 800947e:	4a40      	ldr	r2, [pc, #256]	; (8009580 <_svfiprintf_r+0x1dc>)
 8009480:	463d      	mov	r5, r7
 8009482:	1a80      	subs	r0, r0, r2
 8009484:	fa0b f000 	lsl.w	r0, fp, r0
 8009488:	4318      	orrs	r0, r3
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	e7d3      	b.n	8009436 <_svfiprintf_r+0x92>
 800948e:	9a03      	ldr	r2, [sp, #12]
 8009490:	1d11      	adds	r1, r2, #4
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	9103      	str	r1, [sp, #12]
 8009496:	2a00      	cmp	r2, #0
 8009498:	db01      	blt.n	800949e <_svfiprintf_r+0xfa>
 800949a:	9207      	str	r2, [sp, #28]
 800949c:	e004      	b.n	80094a8 <_svfiprintf_r+0x104>
 800949e:	4252      	negs	r2, r2
 80094a0:	f043 0302 	orr.w	r3, r3, #2
 80094a4:	9207      	str	r2, [sp, #28]
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	783b      	ldrb	r3, [r7, #0]
 80094aa:	2b2e      	cmp	r3, #46	; 0x2e
 80094ac:	d10c      	bne.n	80094c8 <_svfiprintf_r+0x124>
 80094ae:	787b      	ldrb	r3, [r7, #1]
 80094b0:	2b2a      	cmp	r3, #42	; 0x2a
 80094b2:	d133      	bne.n	800951c <_svfiprintf_r+0x178>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	3702      	adds	r7, #2
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9203      	str	r2, [sp, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfb8      	it	lt
 80094c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	4d2e      	ldr	r5, [pc, #184]	; (8009584 <_svfiprintf_r+0x1e0>)
 80094ca:	2203      	movs	r2, #3
 80094cc:	7839      	ldrb	r1, [r7, #0]
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7ff fb64 	bl	8008b9c <memchr>
 80094d4:	b138      	cbz	r0, 80094e6 <_svfiprintf_r+0x142>
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	1b40      	subs	r0, r0, r5
 80094da:	fa03 f000 	lsl.w	r0, r3, r0
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3701      	adds	r7, #1
 80094e2:	4303      	orrs	r3, r0
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	7839      	ldrb	r1, [r7, #0]
 80094e8:	2206      	movs	r2, #6
 80094ea:	4827      	ldr	r0, [pc, #156]	; (8009588 <_svfiprintf_r+0x1e4>)
 80094ec:	1c7e      	adds	r6, r7, #1
 80094ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f2:	f7ff fb53 	bl	8008b9c <memchr>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d038      	beq.n	800956c <_svfiprintf_r+0x1c8>
 80094fa:	4b24      	ldr	r3, [pc, #144]	; (800958c <_svfiprintf_r+0x1e8>)
 80094fc:	bb13      	cbnz	r3, 8009544 <_svfiprintf_r+0x1a0>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	f023 0307 	bic.w	r3, r3, #7
 8009506:	3308      	adds	r3, #8
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950c:	444b      	add	r3, r9
 800950e:	9309      	str	r3, [sp, #36]	; 0x24
 8009510:	e76d      	b.n	80093ee <_svfiprintf_r+0x4a>
 8009512:	fb05 3202 	mla	r2, r5, r2, r3
 8009516:	2001      	movs	r0, #1
 8009518:	460f      	mov	r7, r1
 800951a:	e7a6      	b.n	800946a <_svfiprintf_r+0xc6>
 800951c:	2300      	movs	r3, #0
 800951e:	250a      	movs	r5, #10
 8009520:	4619      	mov	r1, r3
 8009522:	3701      	adds	r7, #1
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4638      	mov	r0, r7
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	3a30      	subs	r2, #48	; 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d903      	bls.n	800953a <_svfiprintf_r+0x196>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c8      	beq.n	80094c8 <_svfiprintf_r+0x124>
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	e7c6      	b.n	80094c8 <_svfiprintf_r+0x124>
 800953a:	fb05 2101 	mla	r1, r5, r1, r2
 800953e:	2301      	movs	r3, #1
 8009540:	4607      	mov	r7, r0
 8009542:	e7f0      	b.n	8009526 <_svfiprintf_r+0x182>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4622      	mov	r2, r4
 800954a:	4b11      	ldr	r3, [pc, #68]	; (8009590 <_svfiprintf_r+0x1ec>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	4640      	mov	r0, r8
 8009550:	f7fe f8ee 	bl	8007730 <_printf_float>
 8009554:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009558:	4681      	mov	r9, r0
 800955a:	d1d6      	bne.n	800950a <_svfiprintf_r+0x166>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	065b      	lsls	r3, r3, #25
 8009560:	f53f af35 	bmi.w	80093ce <_svfiprintf_r+0x2a>
 8009564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009566:	b01d      	add	sp, #116	; 0x74
 8009568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956c:	ab03      	add	r3, sp, #12
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	4622      	mov	r2, r4
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <_svfiprintf_r+0x1ec>)
 8009574:	a904      	add	r1, sp, #16
 8009576:	4640      	mov	r0, r8
 8009578:	f7fe fb86 	bl	8007c88 <_printf_i>
 800957c:	e7ea      	b.n	8009554 <_svfiprintf_r+0x1b0>
 800957e:	bf00      	nop
 8009580:	0800aff4 	.word	0x0800aff4
 8009584:	0800affa 	.word	0x0800affa
 8009588:	0800affe 	.word	0x0800affe
 800958c:	08007731 	.word	0x08007731
 8009590:	080092f1 	.word	0x080092f1

08009594 <_sbrk_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	2300      	movs	r3, #0
 8009598:	4c05      	ldr	r4, [pc, #20]	; (80095b0 <_sbrk_r+0x1c>)
 800959a:	4605      	mov	r5, r0
 800959c:	4608      	mov	r0, r1
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	f7fa f97a 	bl	8003898 <_sbrk>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_sbrk_r+0x1a>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_sbrk_r+0x1a>
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000684 	.word	0x20000684

080095b4 <__ascii_mbtowc>:
 80095b4:	b082      	sub	sp, #8
 80095b6:	b901      	cbnz	r1, 80095ba <__ascii_mbtowc+0x6>
 80095b8:	a901      	add	r1, sp, #4
 80095ba:	b142      	cbz	r2, 80095ce <__ascii_mbtowc+0x1a>
 80095bc:	b14b      	cbz	r3, 80095d2 <__ascii_mbtowc+0x1e>
 80095be:	7813      	ldrb	r3, [r2, #0]
 80095c0:	600b      	str	r3, [r1, #0]
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	1c10      	adds	r0, r2, #0
 80095c6:	bf18      	it	ne
 80095c8:	2001      	movne	r0, #1
 80095ca:	b002      	add	sp, #8
 80095cc:	4770      	bx	lr
 80095ce:	4610      	mov	r0, r2
 80095d0:	e7fb      	b.n	80095ca <__ascii_mbtowc+0x16>
 80095d2:	f06f 0001 	mvn.w	r0, #1
 80095d6:	e7f8      	b.n	80095ca <__ascii_mbtowc+0x16>

080095d8 <memmove>:
 80095d8:	4288      	cmp	r0, r1
 80095da:	b510      	push	{r4, lr}
 80095dc:	eb01 0302 	add.w	r3, r1, r2
 80095e0:	d807      	bhi.n	80095f2 <memmove+0x1a>
 80095e2:	1e42      	subs	r2, r0, #1
 80095e4:	4299      	cmp	r1, r3
 80095e6:	d00a      	beq.n	80095fe <memmove+0x26>
 80095e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095f0:	e7f8      	b.n	80095e4 <memmove+0xc>
 80095f2:	4283      	cmp	r3, r0
 80095f4:	d9f5      	bls.n	80095e2 <memmove+0xa>
 80095f6:	1881      	adds	r1, r0, r2
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	42d3      	cmn	r3, r2
 80095fc:	d100      	bne.n	8009600 <memmove+0x28>
 80095fe:	bd10      	pop	{r4, pc}
 8009600:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009604:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009608:	e7f7      	b.n	80095fa <memmove+0x22>

0800960a <__malloc_lock>:
 800960a:	4770      	bx	lr

0800960c <__malloc_unlock>:
 800960c:	4770      	bx	lr

0800960e <_realloc_r>:
 800960e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009610:	4607      	mov	r7, r0
 8009612:	4614      	mov	r4, r2
 8009614:	460e      	mov	r6, r1
 8009616:	b921      	cbnz	r1, 8009622 <_realloc_r+0x14>
 8009618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800961c:	4611      	mov	r1, r2
 800961e:	f7ff be0d 	b.w	800923c <_malloc_r>
 8009622:	b922      	cbnz	r2, 800962e <_realloc_r+0x20>
 8009624:	f7ff fdbe 	bl	80091a4 <_free_r>
 8009628:	4625      	mov	r5, r4
 800962a:	4628      	mov	r0, r5
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962e:	f000 f821 	bl	8009674 <_malloc_usable_size_r>
 8009632:	42a0      	cmp	r0, r4
 8009634:	d20f      	bcs.n	8009656 <_realloc_r+0x48>
 8009636:	4621      	mov	r1, r4
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff fdff 	bl	800923c <_malloc_r>
 800963e:	4605      	mov	r5, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	d0f2      	beq.n	800962a <_realloc_r+0x1c>
 8009644:	4631      	mov	r1, r6
 8009646:	4622      	mov	r2, r4
 8009648:	f7ff fab6 	bl	8008bb8 <memcpy>
 800964c:	4631      	mov	r1, r6
 800964e:	4638      	mov	r0, r7
 8009650:	f7ff fda8 	bl	80091a4 <_free_r>
 8009654:	e7e9      	b.n	800962a <_realloc_r+0x1c>
 8009656:	4635      	mov	r5, r6
 8009658:	e7e7      	b.n	800962a <_realloc_r+0x1c>

0800965a <__ascii_wctomb>:
 800965a:	b149      	cbz	r1, 8009670 <__ascii_wctomb+0x16>
 800965c:	2aff      	cmp	r2, #255	; 0xff
 800965e:	bf8b      	itete	hi
 8009660:	238a      	movhi	r3, #138	; 0x8a
 8009662:	700a      	strbls	r2, [r1, #0]
 8009664:	6003      	strhi	r3, [r0, #0]
 8009666:	2001      	movls	r0, #1
 8009668:	bf88      	it	hi
 800966a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800966e:	4770      	bx	lr
 8009670:	4608      	mov	r0, r1
 8009672:	4770      	bx	lr

08009674 <_malloc_usable_size_r>:
 8009674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009678:	1f18      	subs	r0, r3, #4
 800967a:	2b00      	cmp	r3, #0
 800967c:	bfbc      	itt	lt
 800967e:	580b      	ldrlt	r3, [r1, r0]
 8009680:	18c0      	addlt	r0, r0, r3
 8009682:	4770      	bx	lr

08009684 <sin>:
 8009684:	b530      	push	{r4, r5, lr}
 8009686:	4a1a      	ldr	r2, [pc, #104]	; (80096f0 <sin+0x6c>)
 8009688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800968c:	4293      	cmp	r3, r2
 800968e:	b087      	sub	sp, #28
 8009690:	dc06      	bgt.n	80096a0 <sin+0x1c>
 8009692:	2300      	movs	r3, #0
 8009694:	2200      	movs	r2, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	f001 f975 	bl	800a988 <__kernel_sin>
 800969e:	e006      	b.n	80096ae <sin+0x2a>
 80096a0:	4a14      	ldr	r2, [pc, #80]	; (80096f4 <sin+0x70>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	dd05      	ble.n	80096b2 <sin+0x2e>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	f7f6 fd5d 	bl	8000168 <__aeabi_dsub>
 80096ae:	b007      	add	sp, #28
 80096b0:	bd30      	pop	{r4, r5, pc}
 80096b2:	aa02      	add	r2, sp, #8
 80096b4:	f000 fac4 	bl	8009c40 <__ieee754_rem_pio2>
 80096b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096bc:	f000 0403 	and.w	r4, r0, #3
 80096c0:	2c01      	cmp	r4, #1
 80096c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c6:	d005      	beq.n	80096d4 <sin+0x50>
 80096c8:	2c02      	cmp	r4, #2
 80096ca:	d006      	beq.n	80096da <sin+0x56>
 80096cc:	b964      	cbnz	r4, 80096e8 <sin+0x64>
 80096ce:	2401      	movs	r4, #1
 80096d0:	9400      	str	r4, [sp, #0]
 80096d2:	e7e2      	b.n	800969a <sin+0x16>
 80096d4:	f000 fd50 	bl	800a178 <__kernel_cos>
 80096d8:	e7e9      	b.n	80096ae <sin+0x2a>
 80096da:	2401      	movs	r4, #1
 80096dc:	9400      	str	r4, [sp, #0]
 80096de:	f001 f953 	bl	800a988 <__kernel_sin>
 80096e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80096e6:	e7e2      	b.n	80096ae <sin+0x2a>
 80096e8:	f000 fd46 	bl	800a178 <__kernel_cos>
 80096ec:	e7f9      	b.n	80096e2 <sin+0x5e>
 80096ee:	bf00      	nop
 80096f0:	3fe921fb 	.word	0x3fe921fb
 80096f4:	7fefffff 	.word	0x7fefffff

080096f8 <asin>:
 80096f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096fc:	b08b      	sub	sp, #44	; 0x2c
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	f000 f8a1 	bl	8009848 <__ieee754_asin>
 8009706:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800979c <asin+0xa4>
 800970a:	4606      	mov	r6, r0
 800970c:	f998 3000 	ldrsb.w	r3, [r8]
 8009710:	460f      	mov	r7, r1
 8009712:	3301      	adds	r3, #1
 8009714:	d036      	beq.n	8009784 <asin+0x8c>
 8009716:	4622      	mov	r2, r4
 8009718:	462b      	mov	r3, r5
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f7 f975 	bl	8000a0c <__aeabi_dcmpun>
 8009722:	4681      	mov	r9, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	d12d      	bne.n	8009784 <asin+0x8c>
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f001 f9e2 	bl	800aaf4 <fabs>
 8009730:	2200      	movs	r2, #0
 8009732:	4b17      	ldr	r3, [pc, #92]	; (8009790 <asin+0x98>)
 8009734:	f7f7 f960 	bl	80009f8 <__aeabi_dcmpgt>
 8009738:	b320      	cbz	r0, 8009784 <asin+0x8c>
 800973a:	2301      	movs	r3, #1
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4b15      	ldr	r3, [pc, #84]	; (8009794 <asin+0x9c>)
 8009740:	4815      	ldr	r0, [pc, #84]	; (8009798 <asin+0xa0>)
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	f8cd 9020 	str.w	r9, [sp, #32]
 8009748:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800974c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009750:	f001 fa5c 	bl	800ac0c <nan>
 8009754:	f998 3000 	ldrsb.w	r3, [r8]
 8009758:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d104      	bne.n	800976a <asin+0x72>
 8009760:	f7fd ff22 	bl	80075a8 <__errno>
 8009764:	2321      	movs	r3, #33	; 0x21
 8009766:	6003      	str	r3, [r0, #0]
 8009768:	e004      	b.n	8009774 <asin+0x7c>
 800976a:	4668      	mov	r0, sp
 800976c:	f001 fa4c 	bl	800ac08 <matherr>
 8009770:	2800      	cmp	r0, #0
 8009772:	d0f5      	beq.n	8009760 <asin+0x68>
 8009774:	9b08      	ldr	r3, [sp, #32]
 8009776:	b11b      	cbz	r3, 8009780 <asin+0x88>
 8009778:	f7fd ff16 	bl	80075a8 <__errno>
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8009784:	4630      	mov	r0, r6
 8009786:	4639      	mov	r1, r7
 8009788:	b00b      	add	sp, #44	; 0x2c
 800978a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978e:	bf00      	nop
 8009790:	3ff00000 	.word	0x3ff00000
 8009794:	0800b110 	.word	0x0800b110
 8009798:	0800aff9 	.word	0x0800aff9
 800979c:	20000208 	.word	0x20000208

080097a0 <sqrt>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	b08b      	sub	sp, #44	; 0x2c
 80097a6:	4604      	mov	r4, r0
 80097a8:	460d      	mov	r5, r1
 80097aa:	f000 fc39 	bl	800a020 <__ieee754_sqrt>
 80097ae:	4b24      	ldr	r3, [pc, #144]	; (8009840 <sqrt+0xa0>)
 80097b0:	4680      	mov	r8, r0
 80097b2:	f993 a000 	ldrsb.w	sl, [r3]
 80097b6:	4689      	mov	r9, r1
 80097b8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80097bc:	d02b      	beq.n	8009816 <sqrt+0x76>
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	4620      	mov	r0, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7f7 f921 	bl	8000a0c <__aeabi_dcmpun>
 80097ca:	4683      	mov	fp, r0
 80097cc:	bb18      	cbnz	r0, 8009816 <sqrt+0x76>
 80097ce:	2600      	movs	r6, #0
 80097d0:	2700      	movs	r7, #0
 80097d2:	4632      	mov	r2, r6
 80097d4:	463b      	mov	r3, r7
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f8ef 	bl	80009bc <__aeabi_dcmplt>
 80097de:	b1d0      	cbz	r0, 8009816 <sqrt+0x76>
 80097e0:	2301      	movs	r3, #1
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <sqrt+0xa4>)
 80097e6:	f8cd b020 	str.w	fp, [sp, #32]
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80097f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80097f4:	f1ba 0f00 	cmp.w	sl, #0
 80097f8:	d112      	bne.n	8009820 <sqrt+0x80>
 80097fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097fe:	4668      	mov	r0, sp
 8009800:	f001 fa02 	bl	800ac08 <matherr>
 8009804:	b1b8      	cbz	r0, 8009836 <sqrt+0x96>
 8009806:	9b08      	ldr	r3, [sp, #32]
 8009808:	b11b      	cbz	r3, 8009812 <sqrt+0x72>
 800980a:	f7fd fecd 	bl	80075a8 <__errno>
 800980e:	9b08      	ldr	r3, [sp, #32]
 8009810:	6003      	str	r3, [r0, #0]
 8009812:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009816:	4640      	mov	r0, r8
 8009818:	4649      	mov	r1, r9
 800981a:	b00b      	add	sp, #44	; 0x2c
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	4632      	mov	r2, r6
 8009822:	463b      	mov	r3, r7
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f6 ff80 	bl	800072c <__aeabi_ddiv>
 800982c:	f1ba 0f02 	cmp.w	sl, #2
 8009830:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009834:	d1e3      	bne.n	80097fe <sqrt+0x5e>
 8009836:	f7fd feb7 	bl	80075a8 <__errno>
 800983a:	2321      	movs	r3, #33	; 0x21
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	e7e2      	b.n	8009806 <sqrt+0x66>
 8009840:	20000208 	.word	0x20000208
 8009844:	0800b115 	.word	0x0800b115

08009848 <__ieee754_asin>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	4bc4      	ldr	r3, [pc, #784]	; (8009b60 <__ieee754_asin+0x318>)
 800984e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009852:	b087      	sub	sp, #28
 8009854:	429f      	cmp	r7, r3
 8009856:	4604      	mov	r4, r0
 8009858:	460d      	mov	r5, r1
 800985a:	9103      	str	r1, [sp, #12]
 800985c:	dd2a      	ble.n	80098b4 <__ieee754_asin+0x6c>
 800985e:	4603      	mov	r3, r0
 8009860:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009864:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009868:	433b      	orrs	r3, r7
 800986a:	d114      	bne.n	8009896 <__ieee754_asin+0x4e>
 800986c:	a3a2      	add	r3, pc, #648	; (adr r3, 8009af8 <__ieee754_asin+0x2b0>)
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f7f6 fe31 	bl	80004d8 <__aeabi_dmul>
 8009876:	a3a2      	add	r3, pc, #648	; (adr r3, 8009b00 <__ieee754_asin+0x2b8>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 fe28 	bl	80004d8 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4630      	mov	r0, r6
 800988e:	4639      	mov	r1, r7
 8009890:	f7f6 fc6c 	bl	800016c <__adddf3>
 8009894:	e007      	b.n	80098a6 <__ieee754_asin+0x5e>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	f7f6 fc65 	bl	8000168 <__aeabi_dsub>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	f7f6 ff43 	bl	800072c <__aeabi_ddiv>
 80098a6:	4604      	mov	r4, r0
 80098a8:	460d      	mov	r5, r1
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	b007      	add	sp, #28
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	4bab      	ldr	r3, [pc, #684]	; (8009b64 <__ieee754_asin+0x31c>)
 80098b6:	429f      	cmp	r7, r3
 80098b8:	dc0e      	bgt.n	80098d8 <__ieee754_asin+0x90>
 80098ba:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80098be:	f280 80ab 	bge.w	8009a18 <__ieee754_asin+0x1d0>
 80098c2:	a391      	add	r3, pc, #580	; (adr r3, 8009b08 <__ieee754_asin+0x2c0>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fc50 	bl	800016c <__adddf3>
 80098cc:	2200      	movs	r2, #0
 80098ce:	4ba6      	ldr	r3, [pc, #664]	; (8009b68 <__ieee754_asin+0x320>)
 80098d0:	f7f7 f892 	bl	80009f8 <__aeabi_dcmpgt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d1e8      	bne.n	80098aa <__ieee754_asin+0x62>
 80098d8:	4620      	mov	r0, r4
 80098da:	4629      	mov	r1, r5
 80098dc:	f001 f90a 	bl	800aaf4 <fabs>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	2000      	movs	r0, #0
 80098e6:	49a0      	ldr	r1, [pc, #640]	; (8009b68 <__ieee754_asin+0x320>)
 80098e8:	f7f6 fc3e 	bl	8000168 <__aeabi_dsub>
 80098ec:	2200      	movs	r2, #0
 80098ee:	4b9f      	ldr	r3, [pc, #636]	; (8009b6c <__ieee754_asin+0x324>)
 80098f0:	f7f6 fdf2 	bl	80004d8 <__aeabi_dmul>
 80098f4:	a386      	add	r3, pc, #536	; (adr r3, 8009b10 <__ieee754_asin+0x2c8>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	4604      	mov	r4, r0
 80098fc:	460d      	mov	r5, r1
 80098fe:	f7f6 fdeb 	bl	80004d8 <__aeabi_dmul>
 8009902:	a385      	add	r3, pc, #532	; (adr r3, 8009b18 <__ieee754_asin+0x2d0>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fc30 	bl	800016c <__adddf3>
 800990c:	4622      	mov	r2, r4
 800990e:	462b      	mov	r3, r5
 8009910:	f7f6 fde2 	bl	80004d8 <__aeabi_dmul>
 8009914:	a382      	add	r3, pc, #520	; (adr r3, 8009b20 <__ieee754_asin+0x2d8>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fc25 	bl	8000168 <__aeabi_dsub>
 800991e:	4622      	mov	r2, r4
 8009920:	462b      	mov	r3, r5
 8009922:	f7f6 fdd9 	bl	80004d8 <__aeabi_dmul>
 8009926:	a380      	add	r3, pc, #512	; (adr r3, 8009b28 <__ieee754_asin+0x2e0>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fc1e 	bl	800016c <__adddf3>
 8009930:	4622      	mov	r2, r4
 8009932:	462b      	mov	r3, r5
 8009934:	f7f6 fdd0 	bl	80004d8 <__aeabi_dmul>
 8009938:	a37d      	add	r3, pc, #500	; (adr r3, 8009b30 <__ieee754_asin+0x2e8>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fc13 	bl	8000168 <__aeabi_dsub>
 8009942:	4622      	mov	r2, r4
 8009944:	462b      	mov	r3, r5
 8009946:	f7f6 fdc7 	bl	80004d8 <__aeabi_dmul>
 800994a:	a37b      	add	r3, pc, #492	; (adr r3, 8009b38 <__ieee754_asin+0x2f0>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc0c 	bl	800016c <__adddf3>
 8009954:	4622      	mov	r2, r4
 8009956:	462b      	mov	r3, r5
 8009958:	f7f6 fdbe 	bl	80004d8 <__aeabi_dmul>
 800995c:	a378      	add	r3, pc, #480	; (adr r3, 8009b40 <__ieee754_asin+0x2f8>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	4680      	mov	r8, r0
 8009964:	4689      	mov	r9, r1
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f6 fdb5 	bl	80004d8 <__aeabi_dmul>
 800996e:	a376      	add	r3, pc, #472	; (adr r3, 8009b48 <__ieee754_asin+0x300>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f7f6 fbf8 	bl	8000168 <__aeabi_dsub>
 8009978:	4622      	mov	r2, r4
 800997a:	462b      	mov	r3, r5
 800997c:	f7f6 fdac 	bl	80004d8 <__aeabi_dmul>
 8009980:	a373      	add	r3, pc, #460	; (adr r3, 8009b50 <__ieee754_asin+0x308>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fbf1 	bl	800016c <__adddf3>
 800998a:	4622      	mov	r2, r4
 800998c:	462b      	mov	r3, r5
 800998e:	f7f6 fda3 	bl	80004d8 <__aeabi_dmul>
 8009992:	a371      	add	r3, pc, #452	; (adr r3, 8009b58 <__ieee754_asin+0x310>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fbe6 	bl	8000168 <__aeabi_dsub>
 800999c:	4622      	mov	r2, r4
 800999e:	462b      	mov	r3, r5
 80099a0:	f7f6 fd9a 	bl	80004d8 <__aeabi_dmul>
 80099a4:	4b70      	ldr	r3, [pc, #448]	; (8009b68 <__ieee754_asin+0x320>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	f7f6 fbe0 	bl	800016c <__adddf3>
 80099ac:	e9cd 0100 	strd	r0, r1, [sp]
 80099b0:	4620      	mov	r0, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	f000 fb34 	bl	800a020 <__ieee754_sqrt>
 80099b8:	4b6d      	ldr	r3, [pc, #436]	; (8009b70 <__ieee754_asin+0x328>)
 80099ba:	4682      	mov	sl, r0
 80099bc:	429f      	cmp	r7, r3
 80099be:	468b      	mov	fp, r1
 80099c0:	f340 80d8 	ble.w	8009b74 <__ieee754_asin+0x32c>
 80099c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c8:	4640      	mov	r0, r8
 80099ca:	4649      	mov	r1, r9
 80099cc:	f7f6 feae 	bl	800072c <__aeabi_ddiv>
 80099d0:	4652      	mov	r2, sl
 80099d2:	465b      	mov	r3, fp
 80099d4:	f7f6 fd80 	bl	80004d8 <__aeabi_dmul>
 80099d8:	4652      	mov	r2, sl
 80099da:	465b      	mov	r3, fp
 80099dc:	f7f6 fbc6 	bl	800016c <__adddf3>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	f7f6 fbc2 	bl	800016c <__adddf3>
 80099e8:	a345      	add	r3, pc, #276	; (adr r3, 8009b00 <__ieee754_asin+0x2b8>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fbbb 	bl	8000168 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	a140      	add	r1, pc, #256	; (adr r1, 8009af8 <__ieee754_asin+0x2b0>)
 80099f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099fc:	f7f6 fbb4 	bl	8000168 <__aeabi_dsub>
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	4604      	mov	r4, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfdc      	itt	le
 8009a08:	4602      	movle	r2, r0
 8009a0a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009a0e:	460d      	mov	r5, r1
 8009a10:	bfdc      	itt	le
 8009a12:	4614      	movle	r4, r2
 8009a14:	461d      	movle	r5, r3
 8009a16:	e748      	b.n	80098aa <__ieee754_asin+0x62>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	f7f6 fd5c 	bl	80004d8 <__aeabi_dmul>
 8009a20:	a33b      	add	r3, pc, #236	; (adr r3, 8009b10 <__ieee754_asin+0x2c8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	4606      	mov	r6, r0
 8009a28:	460f      	mov	r7, r1
 8009a2a:	f7f6 fd55 	bl	80004d8 <__aeabi_dmul>
 8009a2e:	a33a      	add	r3, pc, #232	; (adr r3, 8009b18 <__ieee754_asin+0x2d0>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fb9a 	bl	800016c <__adddf3>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	f7f6 fd4c 	bl	80004d8 <__aeabi_dmul>
 8009a40:	a337      	add	r3, pc, #220	; (adr r3, 8009b20 <__ieee754_asin+0x2d8>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fb8f 	bl	8000168 <__aeabi_dsub>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fd43 	bl	80004d8 <__aeabi_dmul>
 8009a52:	a335      	add	r3, pc, #212	; (adr r3, 8009b28 <__ieee754_asin+0x2e0>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fb88 	bl	800016c <__adddf3>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f6 fd3a 	bl	80004d8 <__aeabi_dmul>
 8009a64:	a332      	add	r3, pc, #200	; (adr r3, 8009b30 <__ieee754_asin+0x2e8>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fb7d 	bl	8000168 <__aeabi_dsub>
 8009a6e:	4632      	mov	r2, r6
 8009a70:	463b      	mov	r3, r7
 8009a72:	f7f6 fd31 	bl	80004d8 <__aeabi_dmul>
 8009a76:	a330      	add	r3, pc, #192	; (adr r3, 8009b38 <__ieee754_asin+0x2f0>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fb76 	bl	800016c <__adddf3>
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	f7f6 fd28 	bl	80004d8 <__aeabi_dmul>
 8009a88:	a32d      	add	r3, pc, #180	; (adr r3, 8009b40 <__ieee754_asin+0x2f8>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	4680      	mov	r8, r0
 8009a90:	4689      	mov	r9, r1
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f6 fd1f 	bl	80004d8 <__aeabi_dmul>
 8009a9a:	a32b      	add	r3, pc, #172	; (adr r3, 8009b48 <__ieee754_asin+0x300>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fb62 	bl	8000168 <__aeabi_dsub>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	f7f6 fd16 	bl	80004d8 <__aeabi_dmul>
 8009aac:	a328      	add	r3, pc, #160	; (adr r3, 8009b50 <__ieee754_asin+0x308>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fb5b 	bl	800016c <__adddf3>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	f7f6 fd0d 	bl	80004d8 <__aeabi_dmul>
 8009abe:	a326      	add	r3, pc, #152	; (adr r3, 8009b58 <__ieee754_asin+0x310>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fb50 	bl	8000168 <__aeabi_dsub>
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	f7f6 fd04 	bl	80004d8 <__aeabi_dmul>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4b25      	ldr	r3, [pc, #148]	; (8009b68 <__ieee754_asin+0x320>)
 8009ad4:	f7f6 fb4a 	bl	800016c <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4640      	mov	r0, r8
 8009ade:	4649      	mov	r1, r9
 8009ae0:	f7f6 fe24 	bl	800072c <__aeabi_ddiv>
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	462b      	mov	r3, r5
 8009ae8:	f7f6 fcf6 	bl	80004d8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4620      	mov	r0, r4
 8009af2:	4629      	mov	r1, r5
 8009af4:	e6cc      	b.n	8009890 <__ieee754_asin+0x48>
 8009af6:	bf00      	nop
 8009af8:	54442d18 	.word	0x54442d18
 8009afc:	3ff921fb 	.word	0x3ff921fb
 8009b00:	33145c07 	.word	0x33145c07
 8009b04:	3c91a626 	.word	0x3c91a626
 8009b08:	8800759c 	.word	0x8800759c
 8009b0c:	7e37e43c 	.word	0x7e37e43c
 8009b10:	0dfdf709 	.word	0x0dfdf709
 8009b14:	3f023de1 	.word	0x3f023de1
 8009b18:	7501b288 	.word	0x7501b288
 8009b1c:	3f49efe0 	.word	0x3f49efe0
 8009b20:	b5688f3b 	.word	0xb5688f3b
 8009b24:	3fa48228 	.word	0x3fa48228
 8009b28:	0e884455 	.word	0x0e884455
 8009b2c:	3fc9c155 	.word	0x3fc9c155
 8009b30:	03eb6f7d 	.word	0x03eb6f7d
 8009b34:	3fd4d612 	.word	0x3fd4d612
 8009b38:	55555555 	.word	0x55555555
 8009b3c:	3fc55555 	.word	0x3fc55555
 8009b40:	b12e9282 	.word	0xb12e9282
 8009b44:	3fb3b8c5 	.word	0x3fb3b8c5
 8009b48:	1b8d0159 	.word	0x1b8d0159
 8009b4c:	3fe6066c 	.word	0x3fe6066c
 8009b50:	9c598ac8 	.word	0x9c598ac8
 8009b54:	40002ae5 	.word	0x40002ae5
 8009b58:	1c8a2d4b 	.word	0x1c8a2d4b
 8009b5c:	40033a27 	.word	0x40033a27
 8009b60:	3fefffff 	.word	0x3fefffff
 8009b64:	3fdfffff 	.word	0x3fdfffff
 8009b68:	3ff00000 	.word	0x3ff00000
 8009b6c:	3fe00000 	.word	0x3fe00000
 8009b70:	3fef3332 	.word	0x3fef3332
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	460f      	mov	r7, r1
 8009b7a:	f7f6 faf7 	bl	800016c <__adddf3>
 8009b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b86:	4640      	mov	r0, r8
 8009b88:	4649      	mov	r1, r9
 8009b8a:	f7f6 fdcf 	bl	800072c <__aeabi_ddiv>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b96:	f7f6 fc9f 	bl	80004d8 <__aeabi_dmul>
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4689      	mov	r9, r1
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4659      	mov	r1, fp
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 fad8 	bl	8000168 <__aeabi_dsub>
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	465b      	mov	r3, fp
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	f7f6 fad2 	bl	800016c <__adddf3>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fdac 	bl	800072c <__aeabi_ddiv>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	f7f6 fac8 	bl	800016c <__adddf3>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	a113      	add	r1, pc, #76	; (adr r1, 8009c30 <__ieee754_asin+0x3e8>)
 8009be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be6:	f7f6 fabf 	bl	8000168 <__aeabi_dsub>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 fab9 	bl	8000168 <__aeabi_dsub>
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 fab3 	bl	800016c <__adddf3>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	a10b      	add	r1, pc, #44	; (adr r1, 8009c38 <__ieee754_asin+0x3f0>)
 8009c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c10:	f7f6 faaa 	bl	8000168 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4620      	mov	r0, r4
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f7f6 faa4 	bl	8000168 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	a104      	add	r1, pc, #16	; (adr r1, 8009c38 <__ieee754_asin+0x3f0>)
 8009c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2a:	e6e7      	b.n	80099fc <__ieee754_asin+0x1b4>
 8009c2c:	f3af 8000 	nop.w
 8009c30:	33145c07 	.word	0x33145c07
 8009c34:	3c91a626 	.word	0x3c91a626
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	3fe921fb 	.word	0x3fe921fb

08009c40 <__ieee754_rem_pio2>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	4614      	mov	r4, r2
 8009c46:	4ac2      	ldr	r2, [pc, #776]	; (8009f50 <__ieee754_rem_pio2+0x310>)
 8009c48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009c4c:	4592      	cmp	sl, r2
 8009c4e:	b08d      	sub	sp, #52	; 0x34
 8009c50:	468b      	mov	fp, r1
 8009c52:	dc07      	bgt.n	8009c64 <__ieee754_rem_pio2+0x24>
 8009c54:	2200      	movs	r2, #0
 8009c56:	2300      	movs	r3, #0
 8009c58:	e9c4 0100 	strd	r0, r1, [r4]
 8009c5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009c60:	2500      	movs	r5, #0
 8009c62:	e023      	b.n	8009cac <__ieee754_rem_pio2+0x6c>
 8009c64:	4abb      	ldr	r2, [pc, #748]	; (8009f54 <__ieee754_rem_pio2+0x314>)
 8009c66:	4592      	cmp	sl, r2
 8009c68:	dc71      	bgt.n	8009d4e <__ieee754_rem_pio2+0x10e>
 8009c6a:	a3ab      	add	r3, pc, #684	; (adr r3, 8009f18 <__ieee754_rem_pio2+0x2d8>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	2900      	cmp	r1, #0
 8009c72:	4db9      	ldr	r5, [pc, #740]	; (8009f58 <__ieee754_rem_pio2+0x318>)
 8009c74:	dd36      	ble.n	8009ce4 <__ieee754_rem_pio2+0xa4>
 8009c76:	f7f6 fa77 	bl	8000168 <__aeabi_dsub>
 8009c7a:	45aa      	cmp	sl, r5
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	460f      	mov	r7, r1
 8009c80:	d018      	beq.n	8009cb4 <__ieee754_rem_pio2+0x74>
 8009c82:	a3a7      	add	r3, pc, #668	; (adr r3, 8009f20 <__ieee754_rem_pio2+0x2e0>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fa6e 	bl	8000168 <__aeabi_dsub>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4630      	mov	r0, r6
 8009c92:	e9c4 2300 	strd	r2, r3, [r4]
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 fa66 	bl	8000168 <__aeabi_dsub>
 8009c9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f20 <__ieee754_rem_pio2+0x2e0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 fa61 	bl	8000168 <__aeabi_dsub>
 8009ca6:	2501      	movs	r5, #1
 8009ca8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cac:	4628      	mov	r0, r5
 8009cae:	b00d      	add	sp, #52	; 0x34
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb4:	a39c      	add	r3, pc, #624	; (adr r3, 8009f28 <__ieee754_rem_pio2+0x2e8>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fa55 	bl	8000168 <__aeabi_dsub>
 8009cbe:	a39c      	add	r3, pc, #624	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x2f0>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	f7f6 fa4e 	bl	8000168 <__aeabi_dsub>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	e9c4 2300 	strd	r2, r3, [r4]
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7f6 fa46 	bl	8000168 <__aeabi_dsub>
 8009cdc:	a394      	add	r3, pc, #592	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x2f0>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	e7de      	b.n	8009ca2 <__ieee754_rem_pio2+0x62>
 8009ce4:	f7f6 fa42 	bl	800016c <__adddf3>
 8009ce8:	45aa      	cmp	sl, r5
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	d016      	beq.n	8009d1e <__ieee754_rem_pio2+0xde>
 8009cf0:	a38b      	add	r3, pc, #556	; (adr r3, 8009f20 <__ieee754_rem_pio2+0x2e0>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fa39 	bl	800016c <__adddf3>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4630      	mov	r0, r6
 8009d00:	e9c4 2300 	strd	r2, r3, [r4]
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 fa2f 	bl	8000168 <__aeabi_dsub>
 8009d0a:	a385      	add	r3, pc, #532	; (adr r3, 8009f20 <__ieee754_rem_pio2+0x2e0>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fa2c 	bl	800016c <__adddf3>
 8009d14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009d18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d1c:	e7c6      	b.n	8009cac <__ieee754_rem_pio2+0x6c>
 8009d1e:	a382      	add	r3, pc, #520	; (adr r3, 8009f28 <__ieee754_rem_pio2+0x2e8>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fa22 	bl	800016c <__adddf3>
 8009d28:	a381      	add	r3, pc, #516	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x2f0>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	f7f6 fa1b 	bl	800016c <__adddf3>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 fa11 	bl	8000168 <__aeabi_dsub>
 8009d46:	a37a      	add	r3, pc, #488	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x2f0>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	e7e0      	b.n	8009d10 <__ieee754_rem_pio2+0xd0>
 8009d4e:	4a83      	ldr	r2, [pc, #524]	; (8009f5c <__ieee754_rem_pio2+0x31c>)
 8009d50:	4592      	cmp	sl, r2
 8009d52:	f300 80d2 	bgt.w	8009efa <__ieee754_rem_pio2+0x2ba>
 8009d56:	f000 fecd 	bl	800aaf4 <fabs>
 8009d5a:	a377      	add	r3, pc, #476	; (adr r3, 8009f38 <__ieee754_rem_pio2+0x2f8>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	4606      	mov	r6, r0
 8009d62:	460f      	mov	r7, r1
 8009d64:	f7f6 fbb8 	bl	80004d8 <__aeabi_dmul>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4b7d      	ldr	r3, [pc, #500]	; (8009f60 <__ieee754_rem_pio2+0x320>)
 8009d6c:	f7f6 f9fe 	bl	800016c <__adddf3>
 8009d70:	f7f6 fe62 	bl	8000a38 <__aeabi_d2iz>
 8009d74:	4605      	mov	r5, r0
 8009d76:	f7f6 fb45 	bl	8000404 <__aeabi_i2d>
 8009d7a:	a367      	add	r3, pc, #412	; (adr r3, 8009f18 <__ieee754_rem_pio2+0x2d8>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d84:	f7f6 fba8 	bl	80004d8 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f7f6 f9ea 	bl	8000168 <__aeabi_dsub>
 8009d94:	a362      	add	r3, pc, #392	; (adr r3, 8009f20 <__ieee754_rem_pio2+0x2e0>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da2:	f7f6 fb99 	bl	80004d8 <__aeabi_dmul>
 8009da6:	2d1f      	cmp	r5, #31
 8009da8:	4680      	mov	r8, r0
 8009daa:	4689      	mov	r9, r1
 8009dac:	dc0e      	bgt.n	8009dcc <__ieee754_rem_pio2+0x18c>
 8009dae:	4b6d      	ldr	r3, [pc, #436]	; (8009f64 <__ieee754_rem_pio2+0x324>)
 8009db0:	1e6a      	subs	r2, r5, #1
 8009db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db6:	4553      	cmp	r3, sl
 8009db8:	d008      	beq.n	8009dcc <__ieee754_rem_pio2+0x18c>
 8009dba:	4642      	mov	r2, r8
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 f9d1 	bl	8000168 <__aeabi_dsub>
 8009dc6:	e9c4 0100 	strd	r0, r1, [r4]
 8009dca:	e011      	b.n	8009df0 <__ieee754_rem_pio2+0x1b0>
 8009dcc:	464b      	mov	r3, r9
 8009dce:	4642      	mov	r2, r8
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 f9c8 	bl	8000168 <__aeabi_dsub>
 8009dd8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009ddc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009de0:	ebaa 0303 	sub.w	r3, sl, r3
 8009de4:	2b10      	cmp	r3, #16
 8009de6:	dc1f      	bgt.n	8009e28 <__ieee754_rem_pio2+0x1e8>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	e9c4 2300 	strd	r2, r3, [r4]
 8009df0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009df4:	4630      	mov	r0, r6
 8009df6:	4653      	mov	r3, sl
 8009df8:	4639      	mov	r1, r7
 8009dfa:	f7f6 f9b5 	bl	8000168 <__aeabi_dsub>
 8009dfe:	4642      	mov	r2, r8
 8009e00:	464b      	mov	r3, r9
 8009e02:	f7f6 f9b1 	bl	8000168 <__aeabi_dsub>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	f1bb 0f00 	cmp.w	fp, #0
 8009e0e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009e12:	f6bf af4b 	bge.w	8009cac <__ieee754_rem_pio2+0x6c>
 8009e16:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009e1a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8009e1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009e22:	60e1      	str	r1, [r4, #12]
 8009e24:	426d      	negs	r5, r5
 8009e26:	e741      	b.n	8009cac <__ieee754_rem_pio2+0x6c>
 8009e28:	a33f      	add	r3, pc, #252	; (adr r3, 8009f28 <__ieee754_rem_pio2+0x2e8>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e32:	f7f6 fb51 	bl	80004d8 <__aeabi_dmul>
 8009e36:	4680      	mov	r8, r0
 8009e38:	4689      	mov	r9, r1
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 f989 	bl	8000168 <__aeabi_dsub>
 8009e56:	4642      	mov	r2, r8
 8009e58:	464b      	mov	r3, r9
 8009e5a:	f7f6 f985 	bl	8000168 <__aeabi_dsub>
 8009e5e:	a334      	add	r3, pc, #208	; (adr r3, 8009f30 <__ieee754_rem_pio2+0x2f0>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e6c:	f7f6 fb34 	bl	80004d8 <__aeabi_dmul>
 8009e70:	4632      	mov	r2, r6
 8009e72:	463b      	mov	r3, r7
 8009e74:	f7f6 f978 	bl	8000168 <__aeabi_dsub>
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	4689      	mov	r9, r1
 8009e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e84:	f7f6 f970 	bl	8000168 <__aeabi_dsub>
 8009e88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e8c:	ebaa 0a03 	sub.w	sl, sl, r3
 8009e90:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8009e94:	dc06      	bgt.n	8009ea4 <__ieee754_rem_pio2+0x264>
 8009e96:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8009ea2:	e7a5      	b.n	8009df0 <__ieee754_rem_pio2+0x1b0>
 8009ea4:	a326      	add	r3, pc, #152	; (adr r3, 8009f40 <__ieee754_rem_pio2+0x300>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eae:	f7f6 fb13 	bl	80004d8 <__aeabi_dmul>
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ebe:	f7f6 f953 	bl	8000168 <__aeabi_dsub>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ece:	f7f6 f94b 	bl	8000168 <__aeabi_dsub>
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	f7f6 f947 	bl	8000168 <__aeabi_dsub>
 8009eda:	a31b      	add	r3, pc, #108	; (adr r3, 8009f48 <__ieee754_rem_pio2+0x308>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4689      	mov	r9, r1
 8009ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ee8:	f7f6 faf6 	bl	80004d8 <__aeabi_dmul>
 8009eec:	4642      	mov	r2, r8
 8009eee:	464b      	mov	r3, r9
 8009ef0:	f7f6 f93a 	bl	8000168 <__aeabi_dsub>
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	4689      	mov	r9, r1
 8009ef8:	e75f      	b.n	8009dba <__ieee754_rem_pio2+0x17a>
 8009efa:	4a1b      	ldr	r2, [pc, #108]	; (8009f68 <__ieee754_rem_pio2+0x328>)
 8009efc:	4592      	cmp	sl, r2
 8009efe:	dd35      	ble.n	8009f6c <__ieee754_rem_pio2+0x32c>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	f7f6 f930 	bl	8000168 <__aeabi_dsub>
 8009f08:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f0c:	e9c4 0100 	strd	r0, r1, [r4]
 8009f10:	e6a6      	b.n	8009c60 <__ieee754_rem_pio2+0x20>
 8009f12:	bf00      	nop
 8009f14:	f3af 8000 	nop.w
 8009f18:	54400000 	.word	0x54400000
 8009f1c:	3ff921fb 	.word	0x3ff921fb
 8009f20:	1a626331 	.word	0x1a626331
 8009f24:	3dd0b461 	.word	0x3dd0b461
 8009f28:	1a600000 	.word	0x1a600000
 8009f2c:	3dd0b461 	.word	0x3dd0b461
 8009f30:	2e037073 	.word	0x2e037073
 8009f34:	3ba3198a 	.word	0x3ba3198a
 8009f38:	6dc9c883 	.word	0x6dc9c883
 8009f3c:	3fe45f30 	.word	0x3fe45f30
 8009f40:	2e000000 	.word	0x2e000000
 8009f44:	3ba3198a 	.word	0x3ba3198a
 8009f48:	252049c1 	.word	0x252049c1
 8009f4c:	397b839a 	.word	0x397b839a
 8009f50:	3fe921fb 	.word	0x3fe921fb
 8009f54:	4002d97b 	.word	0x4002d97b
 8009f58:	3ff921fb 	.word	0x3ff921fb
 8009f5c:	413921fb 	.word	0x413921fb
 8009f60:	3fe00000 	.word	0x3fe00000
 8009f64:	0800b11c 	.word	0x0800b11c
 8009f68:	7fefffff 	.word	0x7fefffff
 8009f6c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009f70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009f74:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	f7f6 fd5c 	bl	8000a38 <__aeabi_d2iz>
 8009f80:	f7f6 fa40 	bl	8000404 <__aeabi_i2d>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f90:	f7f6 f8ea 	bl	8000168 <__aeabi_dsub>
 8009f94:	2200      	movs	r2, #0
 8009f96:	4b20      	ldr	r3, [pc, #128]	; (800a018 <__ieee754_rem_pio2+0x3d8>)
 8009f98:	f7f6 fa9e 	bl	80004d8 <__aeabi_dmul>
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	f7f6 fd4a 	bl	8000a38 <__aeabi_d2iz>
 8009fa4:	f7f6 fa2e 	bl	8000404 <__aeabi_i2d>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fb4:	f7f6 f8d8 	bl	8000168 <__aeabi_dsub>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4b17      	ldr	r3, [pc, #92]	; (800a018 <__ieee754_rem_pio2+0x3d8>)
 8009fbc:	f7f6 fa8c 	bl	80004d8 <__aeabi_dmul>
 8009fc0:	f04f 0803 	mov.w	r8, #3
 8009fc4:	2600      	movs	r6, #0
 8009fc6:	2700      	movs	r7, #0
 8009fc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009fcc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009fdc:	f7f6 fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8009fe0:	b9b8      	cbnz	r0, 800a012 <__ieee754_rem_pio2+0x3d2>
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <__ieee754_rem_pio2+0x3dc>)
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	2302      	movs	r3, #2
 8009fea:	4621      	mov	r1, r4
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	a806      	add	r0, sp, #24
 8009ff0:	4643      	mov	r3, r8
 8009ff2:	f000 f97f 	bl	800a2f4 <__kernel_rem_pio2>
 8009ff6:	f1bb 0f00 	cmp.w	fp, #0
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	f6bf ae56 	bge.w	8009cac <__ieee754_rem_pio2+0x6c>
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a006:	6063      	str	r3, [r4, #4]
 800a008:	68e3      	ldr	r3, [r4, #12]
 800a00a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a00e:	60e3      	str	r3, [r4, #12]
 800a010:	e708      	b.n	8009e24 <__ieee754_rem_pio2+0x1e4>
 800a012:	46d0      	mov	r8, sl
 800a014:	e7dc      	b.n	8009fd0 <__ieee754_rem_pio2+0x390>
 800a016:	bf00      	nop
 800a018:	41700000 	.word	0x41700000
 800a01c:	0800b19c 	.word	0x0800b19c

0800a020 <__ieee754_sqrt>:
 800a020:	4b54      	ldr	r3, [pc, #336]	; (800a174 <__ieee754_sqrt+0x154>)
 800a022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a026:	438b      	bics	r3, r1
 800a028:	4606      	mov	r6, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	460a      	mov	r2, r1
 800a02e:	460c      	mov	r4, r1
 800a030:	d10f      	bne.n	800a052 <__ieee754_sqrt+0x32>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	f7f6 fa4f 	bl	80004d8 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4630      	mov	r0, r6
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 f893 	bl	800016c <__adddf3>
 800a046:	4606      	mov	r6, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	4630      	mov	r0, r6
 800a04c:	4629      	mov	r1, r5
 800a04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a052:	2900      	cmp	r1, #0
 800a054:	4607      	mov	r7, r0
 800a056:	4603      	mov	r3, r0
 800a058:	dc0e      	bgt.n	800a078 <__ieee754_sqrt+0x58>
 800a05a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a05e:	ea5c 0707 	orrs.w	r7, ip, r7
 800a062:	d0f2      	beq.n	800a04a <__ieee754_sqrt+0x2a>
 800a064:	b141      	cbz	r1, 800a078 <__ieee754_sqrt+0x58>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	f7f6 f87d 	bl	8000168 <__aeabi_dsub>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	f7f6 fb5b 	bl	800072c <__aeabi_ddiv>
 800a076:	e7e6      	b.n	800a046 <__ieee754_sqrt+0x26>
 800a078:	1512      	asrs	r2, r2, #20
 800a07a:	d074      	beq.n	800a166 <__ieee754_sqrt+0x146>
 800a07c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a080:	07d5      	lsls	r5, r2, #31
 800a082:	f04f 0500 	mov.w	r5, #0
 800a086:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a08a:	bf48      	it	mi
 800a08c:	0fd9      	lsrmi	r1, r3, #31
 800a08e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a092:	bf44      	itt	mi
 800a094:	005b      	lslmi	r3, r3, #1
 800a096:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a09a:	1051      	asrs	r1, r2, #1
 800a09c:	0fda      	lsrs	r2, r3, #31
 800a09e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	2216      	movs	r2, #22
 800a0a6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	1987      	adds	r7, r0, r6
 800a0ae:	42a7      	cmp	r7, r4
 800a0b0:	bfde      	ittt	le
 800a0b2:	19b8      	addle	r0, r7, r6
 800a0b4:	1be4      	suble	r4, r4, r7
 800a0b6:	19ad      	addle	r5, r5, r6
 800a0b8:	0fdf      	lsrs	r7, r3, #31
 800a0ba:	3a01      	subs	r2, #1
 800a0bc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a0c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0c8:	d1f0      	bne.n	800a0ac <__ieee754_sqrt+0x8c>
 800a0ca:	f04f 0c20 	mov.w	ip, #32
 800a0ce:	4696      	mov	lr, r2
 800a0d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0d4:	4284      	cmp	r4, r0
 800a0d6:	eb06 070e 	add.w	r7, r6, lr
 800a0da:	dc02      	bgt.n	800a0e2 <__ieee754_sqrt+0xc2>
 800a0dc:	d112      	bne.n	800a104 <__ieee754_sqrt+0xe4>
 800a0de:	429f      	cmp	r7, r3
 800a0e0:	d810      	bhi.n	800a104 <__ieee754_sqrt+0xe4>
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	eb07 0e06 	add.w	lr, r7, r6
 800a0e8:	da42      	bge.n	800a170 <__ieee754_sqrt+0x150>
 800a0ea:	f1be 0f00 	cmp.w	lr, #0
 800a0ee:	db3f      	blt.n	800a170 <__ieee754_sqrt+0x150>
 800a0f0:	f100 0801 	add.w	r8, r0, #1
 800a0f4:	1a24      	subs	r4, r4, r0
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	429f      	cmp	r7, r3
 800a0fa:	bf88      	it	hi
 800a0fc:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800a100:	1bdb      	subs	r3, r3, r7
 800a102:	4432      	add	r2, r6
 800a104:	0064      	lsls	r4, r4, #1
 800a106:	f1bc 0c01 	subs.w	ip, ip, #1
 800a10a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a10e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a112:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a116:	d1dd      	bne.n	800a0d4 <__ieee754_sqrt+0xb4>
 800a118:	4323      	orrs	r3, r4
 800a11a:	d006      	beq.n	800a12a <__ieee754_sqrt+0x10a>
 800a11c:	1c54      	adds	r4, r2, #1
 800a11e:	bf0b      	itete	eq
 800a120:	4662      	moveq	r2, ip
 800a122:	3201      	addne	r2, #1
 800a124:	3501      	addeq	r5, #1
 800a126:	f022 0201 	bicne.w	r2, r2, #1
 800a12a:	106b      	asrs	r3, r5, #1
 800a12c:	0852      	lsrs	r2, r2, #1
 800a12e:	07e8      	lsls	r0, r5, #31
 800a130:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a134:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a138:	bf48      	it	mi
 800a13a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a13e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a142:	4616      	mov	r6, r2
 800a144:	e781      	b.n	800a04a <__ieee754_sqrt+0x2a>
 800a146:	0adc      	lsrs	r4, r3, #11
 800a148:	3915      	subs	r1, #21
 800a14a:	055b      	lsls	r3, r3, #21
 800a14c:	2c00      	cmp	r4, #0
 800a14e:	d0fa      	beq.n	800a146 <__ieee754_sqrt+0x126>
 800a150:	02e6      	lsls	r6, r4, #11
 800a152:	d50a      	bpl.n	800a16a <__ieee754_sqrt+0x14a>
 800a154:	f1c2 0020 	rsb	r0, r2, #32
 800a158:	fa23 f000 	lsr.w	r0, r3, r0
 800a15c:	1e55      	subs	r5, r2, #1
 800a15e:	4093      	lsls	r3, r2
 800a160:	4304      	orrs	r4, r0
 800a162:	1b4a      	subs	r2, r1, r5
 800a164:	e78a      	b.n	800a07c <__ieee754_sqrt+0x5c>
 800a166:	4611      	mov	r1, r2
 800a168:	e7f0      	b.n	800a14c <__ieee754_sqrt+0x12c>
 800a16a:	0064      	lsls	r4, r4, #1
 800a16c:	3201      	adds	r2, #1
 800a16e:	e7ef      	b.n	800a150 <__ieee754_sqrt+0x130>
 800a170:	4680      	mov	r8, r0
 800a172:	e7bf      	b.n	800a0f4 <__ieee754_sqrt+0xd4>
 800a174:	7ff00000 	.word	0x7ff00000

0800a178 <__kernel_cos>:
 800a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a180:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a184:	4680      	mov	r8, r0
 800a186:	460f      	mov	r7, r1
 800a188:	e9cd 2300 	strd	r2, r3, [sp]
 800a18c:	da04      	bge.n	800a198 <__kernel_cos+0x20>
 800a18e:	f7f6 fc53 	bl	8000a38 <__aeabi_d2iz>
 800a192:	2800      	cmp	r0, #0
 800a194:	f000 8086 	beq.w	800a2a4 <__kernel_cos+0x12c>
 800a198:	4642      	mov	r2, r8
 800a19a:	463b      	mov	r3, r7
 800a19c:	4640      	mov	r0, r8
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 f99a 	bl	80004d8 <__aeabi_dmul>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4b4e      	ldr	r3, [pc, #312]	; (800a2e0 <__kernel_cos+0x168>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	f7f6 f994 	bl	80004d8 <__aeabi_dmul>
 800a1b0:	a33f      	add	r3, pc, #252	; (adr r3, 800a2b0 <__kernel_cos+0x138>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	4682      	mov	sl, r0
 800a1b8:	468b      	mov	fp, r1
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f7f6 f98b 	bl	80004d8 <__aeabi_dmul>
 800a1c2:	a33d      	add	r3, pc, #244	; (adr r3, 800a2b8 <__kernel_cos+0x140>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f5 ffd0 	bl	800016c <__adddf3>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	462b      	mov	r3, r5
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	a33a      	add	r3, pc, #232	; (adr r3, 800a2c0 <__kernel_cos+0x148>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	f7f5 ffc5 	bl	8000168 <__aeabi_dsub>
 800a1de:	4622      	mov	r2, r4
 800a1e0:	462b      	mov	r3, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	a338      	add	r3, pc, #224	; (adr r3, 800a2c8 <__kernel_cos+0x150>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f5 ffbe 	bl	800016c <__adddf3>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	f7f6 f970 	bl	80004d8 <__aeabi_dmul>
 800a1f8:	a335      	add	r3, pc, #212	; (adr r3, 800a2d0 <__kernel_cos+0x158>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f5 ffb3 	bl	8000168 <__aeabi_dsub>
 800a202:	4622      	mov	r2, r4
 800a204:	462b      	mov	r3, r5
 800a206:	f7f6 f967 	bl	80004d8 <__aeabi_dmul>
 800a20a:	a333      	add	r3, pc, #204	; (adr r3, 800a2d8 <__kernel_cos+0x160>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f5 ffac 	bl	800016c <__adddf3>
 800a214:	4622      	mov	r2, r4
 800a216:	462b      	mov	r3, r5
 800a218:	f7f6 f95e 	bl	80004d8 <__aeabi_dmul>
 800a21c:	4622      	mov	r2, r4
 800a21e:	462b      	mov	r3, r5
 800a220:	f7f6 f95a 	bl	80004d8 <__aeabi_dmul>
 800a224:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	4640      	mov	r0, r8
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f6 f952 	bl	80004d8 <__aeabi_dmul>
 800a234:	460b      	mov	r3, r1
 800a236:	4602      	mov	r2, r0
 800a238:	4629      	mov	r1, r5
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7f5 ff94 	bl	8000168 <__aeabi_dsub>
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <__kernel_cos+0x16c>)
 800a242:	4680      	mov	r8, r0
 800a244:	429e      	cmp	r6, r3
 800a246:	4689      	mov	r9, r1
 800a248:	dc0e      	bgt.n	800a268 <__kernel_cos+0xf0>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4650      	mov	r0, sl
 800a250:	4659      	mov	r1, fp
 800a252:	f7f5 ff89 	bl	8000168 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	2000      	movs	r0, #0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4922      	ldr	r1, [pc, #136]	; (800a2e8 <__kernel_cos+0x170>)
 800a25e:	f7f5 ff83 	bl	8000168 <__aeabi_dsub>
 800a262:	b003      	add	sp, #12
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	2400      	movs	r4, #0
 800a26a:	4b20      	ldr	r3, [pc, #128]	; (800a2ec <__kernel_cos+0x174>)
 800a26c:	4622      	mov	r2, r4
 800a26e:	429e      	cmp	r6, r3
 800a270:	bfcc      	ite	gt
 800a272:	4d1f      	ldrgt	r5, [pc, #124]	; (800a2f0 <__kernel_cos+0x178>)
 800a274:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a278:	462b      	mov	r3, r5
 800a27a:	2000      	movs	r0, #0
 800a27c:	491a      	ldr	r1, [pc, #104]	; (800a2e8 <__kernel_cos+0x170>)
 800a27e:	f7f5 ff73 	bl	8000168 <__aeabi_dsub>
 800a282:	4622      	mov	r2, r4
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	462b      	mov	r3, r5
 800a28a:	4650      	mov	r0, sl
 800a28c:	4659      	mov	r1, fp
 800a28e:	f7f5 ff6b 	bl	8000168 <__aeabi_dsub>
 800a292:	4642      	mov	r2, r8
 800a294:	464b      	mov	r3, r9
 800a296:	f7f5 ff67 	bl	8000168 <__aeabi_dsub>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4630      	mov	r0, r6
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	e7dc      	b.n	800a25e <__kernel_cos+0xe6>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4910      	ldr	r1, [pc, #64]	; (800a2e8 <__kernel_cos+0x170>)
 800a2a8:	e7db      	b.n	800a262 <__kernel_cos+0xea>
 800a2aa:	bf00      	nop
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	be8838d4 	.word	0xbe8838d4
 800a2b4:	bda8fae9 	.word	0xbda8fae9
 800a2b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a2bc:	3e21ee9e 	.word	0x3e21ee9e
 800a2c0:	809c52ad 	.word	0x809c52ad
 800a2c4:	3e927e4f 	.word	0x3e927e4f
 800a2c8:	19cb1590 	.word	0x19cb1590
 800a2cc:	3efa01a0 	.word	0x3efa01a0
 800a2d0:	16c15177 	.word	0x16c15177
 800a2d4:	3f56c16c 	.word	0x3f56c16c
 800a2d8:	5555554c 	.word	0x5555554c
 800a2dc:	3fa55555 	.word	0x3fa55555
 800a2e0:	3fe00000 	.word	0x3fe00000
 800a2e4:	3fd33332 	.word	0x3fd33332
 800a2e8:	3ff00000 	.word	0x3ff00000
 800a2ec:	3fe90000 	.word	0x3fe90000
 800a2f0:	3fd20000 	.word	0x3fd20000

0800a2f4 <__kernel_rem_pio2>:
 800a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a2fc:	9307      	str	r3, [sp, #28]
 800a2fe:	9104      	str	r1, [sp, #16]
 800a300:	4bbf      	ldr	r3, [pc, #764]	; (800a600 <__kernel_rem_pio2+0x30c>)
 800a302:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a304:	1ed4      	subs	r4, r2, #3
 800a306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a30a:	2500      	movs	r5, #0
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	9008      	str	r0, [sp, #32]
 800a312:	3b01      	subs	r3, #1
 800a314:	9306      	str	r3, [sp, #24]
 800a316:	2318      	movs	r3, #24
 800a318:	fb94 f4f3 	sdiv	r4, r4, r3
 800a31c:	f06f 0317 	mvn.w	r3, #23
 800a320:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a324:	fb04 3303 	mla	r3, r4, r3, r3
 800a328:	eb03 0a02 	add.w	sl, r3, r2
 800a32c:	9a06      	ldr	r2, [sp, #24]
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	1aa7      	subs	r7, r4, r2
 800a332:	eb03 0802 	add.w	r8, r3, r2
 800a336:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a338:	2200      	movs	r2, #0
 800a33a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a33e:	2300      	movs	r3, #0
 800a340:	ae1e      	add	r6, sp, #120	; 0x78
 800a342:	4545      	cmp	r5, r8
 800a344:	dd14      	ble.n	800a370 <__kernel_rem_pio2+0x7c>
 800a346:	2600      	movs	r6, #0
 800a348:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800a34c:	9b02      	ldr	r3, [sp, #8]
 800a34e:	429e      	cmp	r6, r3
 800a350:	dc39      	bgt.n	800a3c6 <__kernel_rem_pio2+0xd2>
 800a352:	9b08      	ldr	r3, [sp, #32]
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	3b08      	subs	r3, #8
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	199d      	adds	r5, r3, r6
 800a364:	ab20      	add	r3, sp, #128	; 0x80
 800a366:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	2700      	movs	r7, #0
 800a36e:	e023      	b.n	800a3b8 <__kernel_rem_pio2+0xc4>
 800a370:	42ef      	cmn	r7, r5
 800a372:	d40b      	bmi.n	800a38c <__kernel_rem_pio2+0x98>
 800a374:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a378:	e9cd 2300 	strd	r2, r3, [sp]
 800a37c:	f7f6 f842 	bl	8000404 <__aeabi_i2d>
 800a380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a384:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800a388:	3501      	adds	r5, #1
 800a38a:	e7da      	b.n	800a342 <__kernel_rem_pio2+0x4e>
 800a38c:	4610      	mov	r0, r2
 800a38e:	4619      	mov	r1, r3
 800a390:	e7f8      	b.n	800a384 <__kernel_rem_pio2+0x90>
 800a392:	9905      	ldr	r1, [sp, #20]
 800a394:	9d00      	ldr	r5, [sp, #0]
 800a396:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a39a:	9105      	str	r1, [sp, #20]
 800a39c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a3a0:	9500      	str	r5, [sp, #0]
 800a3a2:	f7f6 f899 	bl	80004d8 <__aeabi_dmul>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f5 fedd 	bl	800016c <__adddf3>
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	4689      	mov	r9, r1
 800a3b6:	3701      	adds	r7, #1
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	429f      	cmp	r7, r3
 800a3bc:	dde9      	ble.n	800a392 <__kernel_rem_pio2+0x9e>
 800a3be:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	e7c2      	b.n	800a34c <__kernel_rem_pio2+0x58>
 800a3c6:	9b02      	ldr	r3, [sp, #8]
 800a3c8:	aa0c      	add	r2, sp, #48	; 0x30
 800a3ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a3d2:	9f02      	ldr	r7, [sp, #8]
 800a3d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a3da:	2600      	movs	r6, #0
 800a3dc:	ab98      	add	r3, sp, #608	; 0x260
 800a3de:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a3e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a3ea:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a3ee:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a3f2:	ab98      	add	r3, sp, #608	; 0x260
 800a3f4:	445b      	add	r3, fp
 800a3f6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800a3fa:	1bbb      	subs	r3, r7, r6
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dc71      	bgt.n	800a4e4 <__kernel_rem_pio2+0x1f0>
 800a400:	4652      	mov	r2, sl
 800a402:	4640      	mov	r0, r8
 800a404:	4649      	mov	r1, r9
 800a406:	f000 fc07 	bl	800ac18 <scalbn>
 800a40a:	2200      	movs	r2, #0
 800a40c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	f7f6 f860 	bl	80004d8 <__aeabi_dmul>
 800a418:	f000 fb72 	bl	800ab00 <floor>
 800a41c:	2200      	movs	r2, #0
 800a41e:	4b79      	ldr	r3, [pc, #484]	; (800a604 <__kernel_rem_pio2+0x310>)
 800a420:	f7f6 f85a 	bl	80004d8 <__aeabi_dmul>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4620      	mov	r0, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	f7f5 fe9c 	bl	8000168 <__aeabi_dsub>
 800a430:	460d      	mov	r5, r1
 800a432:	4604      	mov	r4, r0
 800a434:	f7f6 fb00 	bl	8000a38 <__aeabi_d2iz>
 800a438:	9005      	str	r0, [sp, #20]
 800a43a:	f7f5 ffe3 	bl	8000404 <__aeabi_i2d>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f5 fe8f 	bl	8000168 <__aeabi_dsub>
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	dd6c      	ble.n	800a52e <__kernel_rem_pio2+0x23a>
 800a454:	1e7a      	subs	r2, r7, #1
 800a456:	ab0c      	add	r3, sp, #48	; 0x30
 800a458:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a45c:	f1ca 0118 	rsb	r1, sl, #24
 800a460:	9c05      	ldr	r4, [sp, #20]
 800a462:	fa40 f301 	asr.w	r3, r0, r1
 800a466:	441c      	add	r4, r3
 800a468:	408b      	lsls	r3, r1
 800a46a:	1ac0      	subs	r0, r0, r3
 800a46c:	ab0c      	add	r3, sp, #48	; 0x30
 800a46e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a472:	f1ca 0317 	rsb	r3, sl, #23
 800a476:	9405      	str	r4, [sp, #20]
 800a478:	fa40 f303 	asr.w	r3, r0, r3
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd62      	ble.n	800a54a <__kernel_rem_pio2+0x256>
 800a484:	2200      	movs	r2, #0
 800a486:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a48a:	4614      	mov	r4, r2
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	3301      	adds	r3, #1
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	4297      	cmp	r7, r2
 800a494:	f300 809f 	bgt.w	800a5d6 <__kernel_rem_pio2+0x2e2>
 800a498:	f1ba 0f00 	cmp.w	sl, #0
 800a49c:	dd07      	ble.n	800a4ae <__kernel_rem_pio2+0x1ba>
 800a49e:	f1ba 0f01 	cmp.w	sl, #1
 800a4a2:	f000 80bb 	beq.w	800a61c <__kernel_rem_pio2+0x328>
 800a4a6:	f1ba 0f02 	cmp.w	sl, #2
 800a4aa:	f000 80c1 	beq.w	800a630 <__kernel_rem_pio2+0x33c>
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d14a      	bne.n	800a54a <__kernel_rem_pio2+0x256>
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4953      	ldr	r1, [pc, #332]	; (800a608 <__kernel_rem_pio2+0x314>)
 800a4bc:	f7f5 fe54 	bl	8000168 <__aeabi_dsub>
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4689      	mov	r9, r1
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	d040      	beq.n	800a54a <__kernel_rem_pio2+0x256>
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	494e      	ldr	r1, [pc, #312]	; (800a608 <__kernel_rem_pio2+0x314>)
 800a4ce:	f000 fba3 	bl	800ac18 <scalbn>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 fe45 	bl	8000168 <__aeabi_dsub>
 800a4de:	4680      	mov	r8, r0
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	e032      	b.n	800a54a <__kernel_rem_pio2+0x256>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4b49      	ldr	r3, [pc, #292]	; (800a60c <__kernel_rem_pio2+0x318>)
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	f7f5 fff4 	bl	80004d8 <__aeabi_dmul>
 800a4f0:	f7f6 faa2 	bl	8000a38 <__aeabi_d2iz>
 800a4f4:	f7f5 ff86 	bl	8000404 <__aeabi_i2d>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4b45      	ldr	r3, [pc, #276]	; (800a610 <__kernel_rem_pio2+0x31c>)
 800a4fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a500:	f7f5 ffea 	bl	80004d8 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f5 fe2c 	bl	8000168 <__aeabi_dsub>
 800a510:	f7f6 fa92 	bl	8000a38 <__aeabi_d2iz>
 800a514:	ab0c      	add	r3, sp, #48	; 0x30
 800a516:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a51a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a522:	f7f5 fe23 	bl	800016c <__adddf3>
 800a526:	3601      	adds	r6, #1
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	e765      	b.n	800a3fa <__kernel_rem_pio2+0x106>
 800a52e:	d105      	bne.n	800a53c <__kernel_rem_pio2+0x248>
 800a530:	1e7b      	subs	r3, r7, #1
 800a532:	aa0c      	add	r2, sp, #48	; 0x30
 800a534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a538:	15c3      	asrs	r3, r0, #23
 800a53a:	e79f      	b.n	800a47c <__kernel_rem_pio2+0x188>
 800a53c:	2200      	movs	r2, #0
 800a53e:	4b35      	ldr	r3, [pc, #212]	; (800a614 <__kernel_rem_pio2+0x320>)
 800a540:	f7f6 fa50 	bl	80009e4 <__aeabi_dcmpge>
 800a544:	2800      	cmp	r0, #0
 800a546:	d143      	bne.n	800a5d0 <__kernel_rem_pio2+0x2dc>
 800a548:	9000      	str	r0, [sp, #0]
 800a54a:	2200      	movs	r2, #0
 800a54c:	2300      	movs	r3, #0
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f6 fa29 	bl	80009a8 <__aeabi_dcmpeq>
 800a556:	2800      	cmp	r0, #0
 800a558:	f000 80c3 	beq.w	800a6e2 <__kernel_rem_pio2+0x3ee>
 800a55c:	1e7c      	subs	r4, r7, #1
 800a55e:	4623      	mov	r3, r4
 800a560:	2200      	movs	r2, #0
 800a562:	9902      	ldr	r1, [sp, #8]
 800a564:	428b      	cmp	r3, r1
 800a566:	da6a      	bge.n	800a63e <__kernel_rem_pio2+0x34a>
 800a568:	2a00      	cmp	r2, #0
 800a56a:	f000 8084 	beq.w	800a676 <__kernel_rem_pio2+0x382>
 800a56e:	ab0c      	add	r3, sp, #48	; 0x30
 800a570:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a574:	f1aa 0a18 	sub.w	sl, sl, #24
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 80b0 	beq.w	800a6de <__kernel_rem_pio2+0x3ea>
 800a57e:	4652      	mov	r2, sl
 800a580:	2000      	movs	r0, #0
 800a582:	4921      	ldr	r1, [pc, #132]	; (800a608 <__kernel_rem_pio2+0x314>)
 800a584:	f000 fb48 	bl	800ac18 <scalbn>
 800a588:	4625      	mov	r5, r4
 800a58a:	4606      	mov	r6, r0
 800a58c:	460f      	mov	r7, r1
 800a58e:	f04f 0a00 	mov.w	sl, #0
 800a592:	00e3      	lsls	r3, r4, #3
 800a594:	aa98      	add	r2, sp, #608	; 0x260
 800a596:	eb02 0803 	add.w	r8, r2, r3
 800a59a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800a60c <__kernel_rem_pio2+0x318>
 800a59e:	9306      	str	r3, [sp, #24]
 800a5a0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	f280 80d2 	bge.w	800a74e <__kernel_rem_pio2+0x45a>
 800a5aa:	2500      	movs	r5, #0
 800a5ac:	9a06      	ldr	r2, [sp, #24]
 800a5ae:	ab98      	add	r3, sp, #608	; 0x260
 800a5b0:	189e      	adds	r6, r3, r2
 800a5b2:	3ea8      	subs	r6, #168	; 0xa8
 800a5b4:	1b63      	subs	r3, r4, r5
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f2c0 80f9 	blt.w	800a7ae <__kernel_rem_pio2+0x4ba>
 800a5bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a618 <__kernel_rem_pio2+0x324>
 800a5c0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800a5c4:	f04f 0a00 	mov.w	sl, #0
 800a5c8:	f04f 0b00 	mov.w	fp, #0
 800a5cc:	2700      	movs	r7, #0
 800a5ce:	e0e2      	b.n	800a796 <__kernel_rem_pio2+0x4a2>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	e756      	b.n	800a484 <__kernel_rem_pio2+0x190>
 800a5d6:	ab0c      	add	r3, sp, #48	; 0x30
 800a5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5dc:	b94c      	cbnz	r4, 800a5f2 <__kernel_rem_pio2+0x2fe>
 800a5de:	b12b      	cbz	r3, 800a5ec <__kernel_rem_pio2+0x2f8>
 800a5e0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a5e4:	a80c      	add	r0, sp, #48	; 0x30
 800a5e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	3201      	adds	r2, #1
 800a5ee:	461c      	mov	r4, r3
 800a5f0:	e74f      	b.n	800a492 <__kernel_rem_pio2+0x19e>
 800a5f2:	1acb      	subs	r3, r1, r3
 800a5f4:	a80c      	add	r0, sp, #48	; 0x30
 800a5f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	e7f6      	b.n	800a5ec <__kernel_rem_pio2+0x2f8>
 800a5fe:	bf00      	nop
 800a600:	0800b2e8 	.word	0x0800b2e8
 800a604:	40200000 	.word	0x40200000
 800a608:	3ff00000 	.word	0x3ff00000
 800a60c:	3e700000 	.word	0x3e700000
 800a610:	41700000 	.word	0x41700000
 800a614:	3fe00000 	.word	0x3fe00000
 800a618:	0800b2a0 	.word	0x0800b2a0
 800a61c:	1e7a      	subs	r2, r7, #1
 800a61e:	ab0c      	add	r3, sp, #48	; 0x30
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a628:	a90c      	add	r1, sp, #48	; 0x30
 800a62a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a62e:	e73e      	b.n	800a4ae <__kernel_rem_pio2+0x1ba>
 800a630:	1e7a      	subs	r2, r7, #1
 800a632:	ab0c      	add	r3, sp, #48	; 0x30
 800a634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a638:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a63c:	e7f4      	b.n	800a628 <__kernel_rem_pio2+0x334>
 800a63e:	a90c      	add	r1, sp, #48	; 0x30
 800a640:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a644:	3b01      	subs	r3, #1
 800a646:	430a      	orrs	r2, r1
 800a648:	e78b      	b.n	800a562 <__kernel_rem_pio2+0x26e>
 800a64a:	3401      	adds	r4, #1
 800a64c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a650:	2a00      	cmp	r2, #0
 800a652:	d0fa      	beq.n	800a64a <__kernel_rem_pio2+0x356>
 800a654:	ab98      	add	r3, sp, #608	; 0x260
 800a656:	449b      	add	fp, r3
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	1c7e      	adds	r6, r7, #1
 800a65c:	19dd      	adds	r5, r3, r7
 800a65e:	ab98      	add	r3, sp, #608	; 0x260
 800a660:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a664:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800a668:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800a66c:	443c      	add	r4, r7
 800a66e:	42b4      	cmp	r4, r6
 800a670:	da04      	bge.n	800a67c <__kernel_rem_pio2+0x388>
 800a672:	4627      	mov	r7, r4
 800a674:	e6b1      	b.n	800a3da <__kernel_rem_pio2+0xe6>
 800a676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a678:	2401      	movs	r4, #1
 800a67a:	e7e7      	b.n	800a64c <__kernel_rem_pio2+0x358>
 800a67c:	f105 0308 	add.w	r3, r5, #8
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a684:	2700      	movs	r7, #0
 800a686:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a68a:	f7f5 febb 	bl	8000404 <__aeabi_i2d>
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	f04f 0900 	mov.w	r9, #0
 800a696:	9b08      	ldr	r3, [sp, #32]
 800a698:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a69c:	3b08      	subs	r3, #8
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	f105 0310 	add.w	r3, r5, #16
 800a6a4:	9305      	str	r3, [sp, #20]
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	429f      	cmp	r7, r3
 800a6aa:	dd04      	ble.n	800a6b6 <__kernel_rem_pio2+0x3c2>
 800a6ac:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800a6b0:	3601      	adds	r6, #1
 800a6b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a6b4:	e7db      	b.n	800a66e <__kernel_rem_pio2+0x37a>
 800a6b6:	9905      	ldr	r1, [sp, #20]
 800a6b8:	9d00      	ldr	r5, [sp, #0]
 800a6ba:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a6be:	9105      	str	r1, [sp, #20]
 800a6c0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800a6c4:	9500      	str	r5, [sp, #0]
 800a6c6:	f7f5 ff07 	bl	80004d8 <__aeabi_dmul>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f5 fd4b 	bl	800016c <__adddf3>
 800a6d6:	3701      	adds	r7, #1
 800a6d8:	4680      	mov	r8, r0
 800a6da:	4689      	mov	r9, r1
 800a6dc:	e7e3      	b.n	800a6a6 <__kernel_rem_pio2+0x3b2>
 800a6de:	3c01      	subs	r4, #1
 800a6e0:	e745      	b.n	800a56e <__kernel_rem_pio2+0x27a>
 800a6e2:	f1ca 0200 	rsb	r2, sl, #0
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f000 fa95 	bl	800ac18 <scalbn>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4ba3      	ldr	r3, [pc, #652]	; (800a980 <__kernel_rem_pio2+0x68c>)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	f7f6 f975 	bl	80009e4 <__aeabi_dcmpge>
 800a6fa:	b1f8      	cbz	r0, 800a73c <__kernel_rem_pio2+0x448>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4ba1      	ldr	r3, [pc, #644]	; (800a984 <__kernel_rem_pio2+0x690>)
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fee8 	bl	80004d8 <__aeabi_dmul>
 800a708:	f7f6 f996 	bl	8000a38 <__aeabi_d2iz>
 800a70c:	4606      	mov	r6, r0
 800a70e:	f7f5 fe79 	bl	8000404 <__aeabi_i2d>
 800a712:	2200      	movs	r2, #0
 800a714:	4b9a      	ldr	r3, [pc, #616]	; (800a980 <__kernel_rem_pio2+0x68c>)
 800a716:	f7f5 fedf 	bl	80004d8 <__aeabi_dmul>
 800a71a:	460b      	mov	r3, r1
 800a71c:	4602      	mov	r2, r0
 800a71e:	4629      	mov	r1, r5
 800a720:	4620      	mov	r0, r4
 800a722:	f7f5 fd21 	bl	8000168 <__aeabi_dsub>
 800a726:	f7f6 f987 	bl	8000a38 <__aeabi_d2iz>
 800a72a:	1c7c      	adds	r4, r7, #1
 800a72c:	ab0c      	add	r3, sp, #48	; 0x30
 800a72e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a732:	f10a 0a18 	add.w	sl, sl, #24
 800a736:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a73a:	e720      	b.n	800a57e <__kernel_rem_pio2+0x28a>
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f6 f97a 	bl	8000a38 <__aeabi_d2iz>
 800a744:	ab0c      	add	r3, sp, #48	; 0x30
 800a746:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a74a:	463c      	mov	r4, r7
 800a74c:	e717      	b.n	800a57e <__kernel_rem_pio2+0x28a>
 800a74e:	ab0c      	add	r3, sp, #48	; 0x30
 800a750:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a754:	f7f5 fe56 	bl	8000404 <__aeabi_i2d>
 800a758:	4632      	mov	r2, r6
 800a75a:	463b      	mov	r3, r7
 800a75c:	f7f5 febc 	bl	80004d8 <__aeabi_dmul>
 800a760:	4652      	mov	r2, sl
 800a762:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a766:	465b      	mov	r3, fp
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 feb4 	bl	80004d8 <__aeabi_dmul>
 800a770:	3d01      	subs	r5, #1
 800a772:	4606      	mov	r6, r0
 800a774:	460f      	mov	r7, r1
 800a776:	e715      	b.n	800a5a4 <__kernel_rem_pio2+0x2b0>
 800a778:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800a77c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a780:	f7f5 feaa 	bl	80004d8 <__aeabi_dmul>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4650      	mov	r0, sl
 800a78a:	4659      	mov	r1, fp
 800a78c:	f7f5 fcee 	bl	800016c <__adddf3>
 800a790:	4682      	mov	sl, r0
 800a792:	468b      	mov	fp, r1
 800a794:	3701      	adds	r7, #1
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	429f      	cmp	r7, r3
 800a79a:	dc01      	bgt.n	800a7a0 <__kernel_rem_pio2+0x4ac>
 800a79c:	42bd      	cmp	r5, r7
 800a79e:	daeb      	bge.n	800a778 <__kernel_rem_pio2+0x484>
 800a7a0:	ab48      	add	r3, sp, #288	; 0x120
 800a7a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7a6:	e9c3 ab00 	strd	sl, fp, [r3]
 800a7aa:	3501      	adds	r5, #1
 800a7ac:	e702      	b.n	800a5b4 <__kernel_rem_pio2+0x2c0>
 800a7ae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d86c      	bhi.n	800a88e <__kernel_rem_pio2+0x59a>
 800a7b4:	e8df f003 	tbb	[pc, r3]
 800a7b8:	022f2f59 	.word	0x022f2f59
 800a7bc:	9a06      	ldr	r2, [sp, #24]
 800a7be:	ab48      	add	r3, sp, #288	; 0x120
 800a7c0:	189d      	adds	r5, r3, r2
 800a7c2:	46aa      	mov	sl, r5
 800a7c4:	46a3      	mov	fp, r4
 800a7c6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ca:	f300 8087 	bgt.w	800a8dc <__kernel_rem_pio2+0x5e8>
 800a7ce:	46a2      	mov	sl, r4
 800a7d0:	f1ba 0f01 	cmp.w	sl, #1
 800a7d4:	f300 809f 	bgt.w	800a916 <__kernel_rem_pio2+0x622>
 800a7d8:	2700      	movs	r7, #0
 800a7da:	463e      	mov	r6, r7
 800a7dc:	9d06      	ldr	r5, [sp, #24]
 800a7de:	ab48      	add	r3, sp, #288	; 0x120
 800a7e0:	3508      	adds	r5, #8
 800a7e2:	441d      	add	r5, r3
 800a7e4:	2c01      	cmp	r4, #1
 800a7e6:	f300 80b3 	bgt.w	800a950 <__kernel_rem_pio2+0x65c>
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800a7ee:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a7f0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800a7f2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f040 80b5 	bne.w	800a964 <__kernel_rem_pio2+0x670>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	9804      	ldr	r0, [sp, #16]
 800a800:	e9c0 2300 	strd	r2, r3, [r0]
 800a804:	4622      	mov	r2, r4
 800a806:	460b      	mov	r3, r1
 800a808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a80c:	463a      	mov	r2, r7
 800a80e:	4633      	mov	r3, r6
 800a810:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a814:	e03b      	b.n	800a88e <__kernel_rem_pio2+0x59a>
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	4626      	mov	r6, r4
 800a81c:	4667      	mov	r7, ip
 800a81e:	9d06      	ldr	r5, [sp, #24]
 800a820:	ab48      	add	r3, sp, #288	; 0x120
 800a822:	3508      	adds	r5, #8
 800a824:	441d      	add	r5, r3
 800a826:	2e00      	cmp	r6, #0
 800a828:	da42      	bge.n	800a8b0 <__kernel_rem_pio2+0x5bc>
 800a82a:	9b00      	ldr	r3, [sp, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d049      	beq.n	800a8c4 <__kernel_rem_pio2+0x5d0>
 800a830:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a834:	4662      	mov	r2, ip
 800a836:	460b      	mov	r3, r1
 800a838:	9904      	ldr	r1, [sp, #16]
 800a83a:	2601      	movs	r6, #1
 800a83c:	e9c1 2300 	strd	r2, r3, [r1]
 800a840:	a948      	add	r1, sp, #288	; 0x120
 800a842:	463b      	mov	r3, r7
 800a844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a848:	f7f5 fc8e 	bl	8000168 <__aeabi_dsub>
 800a84c:	4684      	mov	ip, r0
 800a84e:	460f      	mov	r7, r1
 800a850:	ad48      	add	r5, sp, #288	; 0x120
 800a852:	42b4      	cmp	r4, r6
 800a854:	da38      	bge.n	800a8c8 <__kernel_rem_pio2+0x5d4>
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	b10b      	cbz	r3, 800a85e <__kernel_rem_pio2+0x56a>
 800a85a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a85e:	4662      	mov	r2, ip
 800a860:	463b      	mov	r3, r7
 800a862:	9904      	ldr	r1, [sp, #16]
 800a864:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a868:	e011      	b.n	800a88e <__kernel_rem_pio2+0x59a>
 800a86a:	2700      	movs	r7, #0
 800a86c:	463d      	mov	r5, r7
 800a86e:	9b06      	ldr	r3, [sp, #24]
 800a870:	aa98      	add	r2, sp, #608	; 0x260
 800a872:	4413      	add	r3, r2
 800a874:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800a878:	2c00      	cmp	r4, #0
 800a87a:	da0f      	bge.n	800a89c <__kernel_rem_pio2+0x5a8>
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	b10b      	cbz	r3, 800a884 <__kernel_rem_pio2+0x590>
 800a880:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a884:	463a      	mov	r2, r7
 800a886:	462b      	mov	r3, r5
 800a888:	9904      	ldr	r1, [sp, #16]
 800a88a:	e9c1 2300 	strd	r2, r3, [r1]
 800a88e:	9b05      	ldr	r3, [sp, #20]
 800a890:	f003 0007 	and.w	r0, r3, #7
 800a894:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89c:	4638      	mov	r0, r7
 800a89e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f5 fc62 	bl	800016c <__adddf3>
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	e7e3      	b.n	800a878 <__kernel_rem_pio2+0x584>
 800a8b0:	4660      	mov	r0, ip
 800a8b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f5 fc58 	bl	800016c <__adddf3>
 800a8bc:	3e01      	subs	r6, #1
 800a8be:	4684      	mov	ip, r0
 800a8c0:	460f      	mov	r7, r1
 800a8c2:	e7b0      	b.n	800a826 <__kernel_rem_pio2+0x532>
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	e7b5      	b.n	800a834 <__kernel_rem_pio2+0x540>
 800a8c8:	4660      	mov	r0, ip
 800a8ca:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fc4c 	bl	800016c <__adddf3>
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	4684      	mov	ip, r0
 800a8d8:	460f      	mov	r7, r1
 800a8da:	e7ba      	b.n	800a852 <__kernel_rem_pio2+0x55e>
 800a8dc:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800a8e0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8ec:	f7f5 fc3e 	bl	800016c <__adddf3>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f5 fc34 	bl	8000168 <__aeabi_dsub>
 800a900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a904:	f7f5 fc32 	bl	800016c <__adddf3>
 800a908:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a90c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a910:	e9ca 6700 	strd	r6, r7, [sl]
 800a914:	e757      	b.n	800a7c6 <__kernel_rem_pio2+0x4d2>
 800a916:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800a91a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800a91e:	4630      	mov	r0, r6
 800a920:	4639      	mov	r1, r7
 800a922:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a926:	f7f5 fc21 	bl	800016c <__adddf3>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4680      	mov	r8, r0
 800a930:	4689      	mov	r9, r1
 800a932:	4630      	mov	r0, r6
 800a934:	4639      	mov	r1, r7
 800a936:	f7f5 fc17 	bl	8000168 <__aeabi_dsub>
 800a93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a93e:	f7f5 fc15 	bl	800016c <__adddf3>
 800a942:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a946:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a94a:	e9c5 8900 	strd	r8, r9, [r5]
 800a94e:	e73f      	b.n	800a7d0 <__kernel_rem_pio2+0x4dc>
 800a950:	4638      	mov	r0, r7
 800a952:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a956:	4631      	mov	r1, r6
 800a958:	f7f5 fc08 	bl	800016c <__adddf3>
 800a95c:	3c01      	subs	r4, #1
 800a95e:	4607      	mov	r7, r0
 800a960:	460e      	mov	r6, r1
 800a962:	e73f      	b.n	800a7e4 <__kernel_rem_pio2+0x4f0>
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a96a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a96e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a972:	601d      	str	r5, [r3, #0]
 800a974:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a978:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a97c:	615e      	str	r6, [r3, #20]
 800a97e:	e786      	b.n	800a88e <__kernel_rem_pio2+0x59a>
 800a980:	41700000 	.word	0x41700000
 800a984:	3e700000 	.word	0x3e700000

0800a988 <__kernel_sin>:
 800a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	e9cd 2300 	strd	r2, r3, [sp]
 800a992:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a996:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a99a:	4682      	mov	sl, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a9a0:	da03      	bge.n	800a9aa <__kernel_sin+0x22>
 800a9a2:	f7f6 f849 	bl	8000a38 <__aeabi_d2iz>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d050      	beq.n	800aa4c <__kernel_sin+0xc4>
 800a9aa:	4652      	mov	r2, sl
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7f5 fd91 	bl	80004d8 <__aeabi_dmul>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4650      	mov	r0, sl
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7f5 fd89 	bl	80004d8 <__aeabi_dmul>
 800a9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800aac0 <__kernel_sin+0x138>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f5 fd80 	bl	80004d8 <__aeabi_dmul>
 800a9d8:	a33b      	add	r3, pc, #236	; (adr r3, 800aac8 <__kernel_sin+0x140>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fbc3 	bl	8000168 <__aeabi_dsub>
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	f7f5 fd77 	bl	80004d8 <__aeabi_dmul>
 800a9ea:	a339      	add	r3, pc, #228	; (adr r3, 800aad0 <__kernel_sin+0x148>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fbbc 	bl	800016c <__adddf3>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	f7f5 fd6e 	bl	80004d8 <__aeabi_dmul>
 800a9fc:	a336      	add	r3, pc, #216	; (adr r3, 800aad8 <__kernel_sin+0x150>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	f7f5 fbb1 	bl	8000168 <__aeabi_dsub>
 800aa06:	4632      	mov	r2, r6
 800aa08:	463b      	mov	r3, r7
 800aa0a:	f7f5 fd65 	bl	80004d8 <__aeabi_dmul>
 800aa0e:	a334      	add	r3, pc, #208	; (adr r3, 800aae0 <__kernel_sin+0x158>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fbaa 	bl	800016c <__adddf3>
 800aa18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa1c:	b9dd      	cbnz	r5, 800aa56 <__kernel_sin+0xce>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	a32f      	add	r3, pc, #188	; (adr r3, 800aae8 <__kernel_sin+0x160>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fb9a 	bl	8000168 <__aeabi_dsub>
 800aa34:	4642      	mov	r2, r8
 800aa36:	464b      	mov	r3, r9
 800aa38:	f7f5 fd4e 	bl	80004d8 <__aeabi_dmul>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4650      	mov	r0, sl
 800aa42:	4621      	mov	r1, r4
 800aa44:	f7f5 fb92 	bl	800016c <__adddf3>
 800aa48:	4682      	mov	sl, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	4621      	mov	r1, r4
 800aa50:	b006      	add	sp, #24
 800aa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa56:	2200      	movs	r2, #0
 800aa58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5c:	4b24      	ldr	r3, [pc, #144]	; (800aaf0 <__kernel_sin+0x168>)
 800aa5e:	f7f5 fd3b 	bl	80004d8 <__aeabi_dmul>
 800aa62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f5 fd33 	bl	80004d8 <__aeabi_dmul>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa7a:	f7f5 fb75 	bl	8000168 <__aeabi_dsub>
 800aa7e:	4632      	mov	r2, r6
 800aa80:	463b      	mov	r3, r7
 800aa82:	f7f5 fd29 	bl	80004d8 <__aeabi_dmul>
 800aa86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa8a:	f7f5 fb6d 	bl	8000168 <__aeabi_dsub>
 800aa8e:	a316      	add	r3, pc, #88	; (adr r3, 800aae8 <__kernel_sin+0x160>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	4606      	mov	r6, r0
 800aa96:	460f      	mov	r7, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	f7f5 fb60 	bl	800016c <__adddf3>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4650      	mov	r0, sl
 800aab2:	4621      	mov	r1, r4
 800aab4:	f7f5 fb58 	bl	8000168 <__aeabi_dsub>
 800aab8:	e7c6      	b.n	800aa48 <__kernel_sin+0xc0>
 800aaba:	bf00      	nop
 800aabc:	f3af 8000 	nop.w
 800aac0:	5acfd57c 	.word	0x5acfd57c
 800aac4:	3de5d93a 	.word	0x3de5d93a
 800aac8:	8a2b9ceb 	.word	0x8a2b9ceb
 800aacc:	3e5ae5e6 	.word	0x3e5ae5e6
 800aad0:	57b1fe7d 	.word	0x57b1fe7d
 800aad4:	3ec71de3 	.word	0x3ec71de3
 800aad8:	19c161d5 	.word	0x19c161d5
 800aadc:	3f2a01a0 	.word	0x3f2a01a0
 800aae0:	1110f8a6 	.word	0x1110f8a6
 800aae4:	3f811111 	.word	0x3f811111
 800aae8:	55555549 	.word	0x55555549
 800aaec:	3fc55555 	.word	0x3fc55555
 800aaf0:	3fe00000 	.word	0x3fe00000

0800aaf4 <fabs>:
 800aaf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4770      	bx	lr
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <floor>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ab08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ab0c:	2e13      	cmp	r6, #19
 800ab0e:	4607      	mov	r7, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	460c      	mov	r4, r1
 800ab14:	4605      	mov	r5, r0
 800ab16:	dc35      	bgt.n	800ab84 <floor+0x84>
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	da16      	bge.n	800ab4a <floor+0x4a>
 800ab1c:	a336      	add	r3, pc, #216	; (adr r3, 800abf8 <floor+0xf8>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 fb23 	bl	800016c <__adddf3>
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f7f5 ff65 	bl	80009f8 <__aeabi_dcmpgt>
 800ab2e:	b148      	cbz	r0, 800ab44 <floor+0x44>
 800ab30:	2c00      	cmp	r4, #0
 800ab32:	da5b      	bge.n	800abec <floor+0xec>
 800ab34:	2500      	movs	r5, #0
 800ab36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab3a:	4a31      	ldr	r2, [pc, #196]	; (800ac00 <floor+0x100>)
 800ab3c:	433b      	orrs	r3, r7
 800ab3e:	42ab      	cmp	r3, r5
 800ab40:	bf18      	it	ne
 800ab42:	4614      	movne	r4, r2
 800ab44:	4623      	mov	r3, r4
 800ab46:	462f      	mov	r7, r5
 800ab48:	e026      	b.n	800ab98 <floor+0x98>
 800ab4a:	4a2e      	ldr	r2, [pc, #184]	; (800ac04 <floor+0x104>)
 800ab4c:	fa42 f806 	asr.w	r8, r2, r6
 800ab50:	ea01 0208 	and.w	r2, r1, r8
 800ab54:	4302      	orrs	r2, r0
 800ab56:	d01f      	beq.n	800ab98 <floor+0x98>
 800ab58:	a327      	add	r3, pc, #156	; (adr r3, 800abf8 <floor+0xf8>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fb05 	bl	800016c <__adddf3>
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	f7f5 ff47 	bl	80009f8 <__aeabi_dcmpgt>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0ea      	beq.n	800ab44 <floor+0x44>
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	bfbe      	ittt	lt
 800ab72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ab76:	fa43 f606 	asrlt.w	r6, r3, r6
 800ab7a:	19a4      	addlt	r4, r4, r6
 800ab7c:	ea24 0408 	bic.w	r4, r4, r8
 800ab80:	2500      	movs	r5, #0
 800ab82:	e7df      	b.n	800ab44 <floor+0x44>
 800ab84:	2e33      	cmp	r6, #51	; 0x33
 800ab86:	dd0b      	ble.n	800aba0 <floor+0xa0>
 800ab88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ab8c:	d104      	bne.n	800ab98 <floor+0x98>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f7f5 faec 	bl	800016c <__adddf3>
 800ab94:	4607      	mov	r7, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4638      	mov	r0, r7
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aba4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800aba8:	fa22 f808 	lsr.w	r8, r2, r8
 800abac:	ea18 0f00 	tst.w	r8, r0
 800abb0:	d0f2      	beq.n	800ab98 <floor+0x98>
 800abb2:	a311      	add	r3, pc, #68	; (adr r3, 800abf8 <floor+0xf8>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fad8 	bl	800016c <__adddf3>
 800abbc:	2200      	movs	r2, #0
 800abbe:	2300      	movs	r3, #0
 800abc0:	f7f5 ff1a 	bl	80009f8 <__aeabi_dcmpgt>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d0bd      	beq.n	800ab44 <floor+0x44>
 800abc8:	2c00      	cmp	r4, #0
 800abca:	da02      	bge.n	800abd2 <floor+0xd2>
 800abcc:	2e14      	cmp	r6, #20
 800abce:	d103      	bne.n	800abd8 <floor+0xd8>
 800abd0:	3401      	adds	r4, #1
 800abd2:	ea25 0508 	bic.w	r5, r5, r8
 800abd6:	e7b5      	b.n	800ab44 <floor+0x44>
 800abd8:	2301      	movs	r3, #1
 800abda:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800abde:	fa03 f606 	lsl.w	r6, r3, r6
 800abe2:	4435      	add	r5, r6
 800abe4:	42bd      	cmp	r5, r7
 800abe6:	bf38      	it	cc
 800abe8:	18e4      	addcc	r4, r4, r3
 800abea:	e7f2      	b.n	800abd2 <floor+0xd2>
 800abec:	2500      	movs	r5, #0
 800abee:	462c      	mov	r4, r5
 800abf0:	e7a8      	b.n	800ab44 <floor+0x44>
 800abf2:	bf00      	nop
 800abf4:	f3af 8000 	nop.w
 800abf8:	8800759c 	.word	0x8800759c
 800abfc:	7e37e43c 	.word	0x7e37e43c
 800ac00:	bff00000 	.word	0xbff00000
 800ac04:	000fffff 	.word	0x000fffff

0800ac08 <matherr>:
 800ac08:	2000      	movs	r0, #0
 800ac0a:	4770      	bx	lr

0800ac0c <nan>:
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	4901      	ldr	r1, [pc, #4]	; (800ac14 <nan+0x8>)
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	7ff80000 	.word	0x7ff80000

0800ac18 <scalbn>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	4616      	mov	r6, r2
 800ac1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac20:	4604      	mov	r4, r0
 800ac22:	460d      	mov	r5, r1
 800ac24:	460b      	mov	r3, r1
 800ac26:	b982      	cbnz	r2, 800ac4a <scalbn+0x32>
 800ac28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac2c:	4303      	orrs	r3, r0
 800ac2e:	d034      	beq.n	800ac9a <scalbn+0x82>
 800ac30:	4b2d      	ldr	r3, [pc, #180]	; (800ace8 <scalbn+0xd0>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	f7f5 fc50 	bl	80004d8 <__aeabi_dmul>
 800ac38:	4b2c      	ldr	r3, [pc, #176]	; (800acec <scalbn+0xd4>)
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	429e      	cmp	r6, r3
 800ac3e:	460d      	mov	r5, r1
 800ac40:	da0d      	bge.n	800ac5e <scalbn+0x46>
 800ac42:	a325      	add	r3, pc, #148	; (adr r3, 800acd8 <scalbn+0xc0>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	e01c      	b.n	800ac84 <scalbn+0x6c>
 800ac4a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ac4e:	42ba      	cmp	r2, r7
 800ac50:	d109      	bne.n	800ac66 <scalbn+0x4e>
 800ac52:	4602      	mov	r2, r0
 800ac54:	f7f5 fa8a 	bl	800016c <__adddf3>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	e01d      	b.n	800ac9a <scalbn+0x82>
 800ac5e:	460b      	mov	r3, r1
 800ac60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac64:	3a36      	subs	r2, #54	; 0x36
 800ac66:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac6a:	4432      	add	r2, r6
 800ac6c:	428a      	cmp	r2, r1
 800ac6e:	dd0c      	ble.n	800ac8a <scalbn+0x72>
 800ac70:	4622      	mov	r2, r4
 800ac72:	462b      	mov	r3, r5
 800ac74:	a11a      	add	r1, pc, #104	; (adr r1, 800ace0 <scalbn+0xc8>)
 800ac76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac7a:	f000 f83b 	bl	800acf4 <copysign>
 800ac7e:	a318      	add	r3, pc, #96	; (adr r3, 800ace0 <scalbn+0xc8>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fc28 	bl	80004d8 <__aeabi_dmul>
 800ac88:	e7e6      	b.n	800ac58 <scalbn+0x40>
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	dd08      	ble.n	800aca0 <scalbn+0x88>
 800ac8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac96:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aca4:	da0b      	bge.n	800acbe <scalbn+0xa6>
 800aca6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800acaa:	429e      	cmp	r6, r3
 800acac:	4622      	mov	r2, r4
 800acae:	462b      	mov	r3, r5
 800acb0:	dce0      	bgt.n	800ac74 <scalbn+0x5c>
 800acb2:	a109      	add	r1, pc, #36	; (adr r1, 800acd8 <scalbn+0xc0>)
 800acb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb8:	f000 f81c 	bl	800acf4 <copysign>
 800acbc:	e7c1      	b.n	800ac42 <scalbn+0x2a>
 800acbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800acc2:	3236      	adds	r2, #54	; 0x36
 800acc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	2200      	movs	r2, #0
 800acd2:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <scalbn+0xd8>)
 800acd4:	e7d6      	b.n	800ac84 <scalbn+0x6c>
 800acd6:	bf00      	nop
 800acd8:	c2f8f359 	.word	0xc2f8f359
 800acdc:	01a56e1f 	.word	0x01a56e1f
 800ace0:	8800759c 	.word	0x8800759c
 800ace4:	7e37e43c 	.word	0x7e37e43c
 800ace8:	43500000 	.word	0x43500000
 800acec:	ffff3cb0 	.word	0xffff3cb0
 800acf0:	3c900000 	.word	0x3c900000

0800acf4 <copysign>:
 800acf4:	b530      	push	{r4, r5, lr}
 800acf6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800acfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acfe:	ea42 0503 	orr.w	r5, r2, r3
 800ad02:	4629      	mov	r1, r5
 800ad04:	bd30      	pop	{r4, r5, pc}
	...

0800ad08 <_init>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr

0800ad14 <_fini>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	bf00      	nop
 800ad18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1a:	bc08      	pop	{r3}
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	4770      	bx	lr
