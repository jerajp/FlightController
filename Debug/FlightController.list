
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008ba0  08008ba0  00018ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008fd0  08008fd0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fd0  08008fd0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001e0  080091b8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  080091b8  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e7f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000275b  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  00036ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001630c  00000000  00000000  00037c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d718  00000000  00000000  0004df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cbf4  00000000  00000000  0005b684  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059fc  00000000  00000000  000d82f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b84 	.word	0x08008b84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008b84 	.word	0x08008b84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MPU6050_check>:
#define MPU6050_ACCEL_XOUT_H_REG		0x3B



MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I_REG,1, &data, 1, 1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030f 	add.w	r3, r7, #15
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2275      	movs	r2, #117	; 0x75
 8000fa0:	21d0      	movs	r1, #208	; 0xd0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f003 f966 	bl	8004274 <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM) return MPU6050_DETECTED;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b68      	cmp	r3, #104	; 0x68
 8000fac:	d101      	bne.n	8000fb2 <MPU6050_check+0x2e>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 8000fb2:	2300      	movs	r3, #0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MPU6050_init>:

void MPU6050_init(I2C_HandleTypeDef* I2Cx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t data=0; //wake sensor, clk=8Mhz(internal)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1_REG, 1,&data, 1, 1000);
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030f 	add.w	r3, r7, #15
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	226b      	movs	r2, #107	; 0x6b
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f003 f84e 	bl	8004080 <HAL_I2C_Mem_Write>

	//Set sample rate
	data=7;//set to 1khz sample rate
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV_REG, 1,&data, 1, 1000);
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f107 030f 	add.w	r3, r7, #15
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2219      	movs	r2, #25
 8000ffc:	21d0      	movs	r1, #208	; 0xd0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f003 f83e 	bl	8004080 <HAL_I2C_Mem_Write>

	//Gyro config
	data=1<<3;//Set ± 500 °/s
 8001004:	2308      	movs	r3, #8
 8001006:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG_REG, 1,&data, 1, 1000);
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 030f 	add.w	r3, r7, #15
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	221b      	movs	r2, #27
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f003 f82e 	bl	8004080 <HAL_I2C_Mem_Write>

	//Accel config
	data=2<<3;//Set +-8g
 8001024:	2310      	movs	r3, #16
 8001026:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG_REG, 1,&data, 1, 1000);
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	f107 030f 	add.w	r3, r7, #15
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	221c      	movs	r2, #28
 800103c:	21d0      	movs	r1, #208	; 0xd0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f003 f81e 	bl	8004080 <HAL_I2C_Mem_Write>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <MPU6050_accread>:

void MPU6050_accread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2306      	movs	r3, #6
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	223b      	movs	r2, #59	; 0x3b
 800106a:	21d0      	movs	r1, #208	; 0xd0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f003 f901 	bl	8004274 <HAL_I2C_Mem_Read>

	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data [1]);
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7a7b      	ldrb	r3, [r7, #9]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data [3]);
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);
 8001096:	7b3b      	ldrb	r3, [r7, #12]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	809a      	strh	r2, [r3, #4]

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MPU6050_gyroread>:

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H_REG, 1, data, 6, 1000);
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2306      	movs	r3, #6
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2243      	movs	r2, #67	; 0x43
 80010ce:	21d0      	movs	r1, #208	; 0xd0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f003 f8cf 	bl	8004274 <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7a7b      	ldrb	r3, [r7, #9]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 80010fa:	7b3b      	ldrb	r3, [r7, #12]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	815a      	strh	r2, [r3, #10]
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001120:	887a      	ldrh	r2, [r7, #2]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60da      	str	r2, [r3, #12]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	b29b      	uxth	r3, r3
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4013      	ands	r3, r2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e001      	b.n	800116e <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b083      	sub	sp, #12
 8001180:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001182:	4b8a      	ldr	r3, [pc, #552]	; (80013ac <main+0x230>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	4a89      	ldr	r2, [pc, #548]	; (80013ac <main+0x230>)
 8001188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800118c:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <main+0x234>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 8001194:	4b86      	ldr	r3, [pc, #536]	; (80013b0 <main+0x234>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a85      	ldr	r2, [pc, #532]	; (80013b0 <main+0x234>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f001 fe96 	bl	8002ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 fb06 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 fd3e 	bl	8001c28 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011ac:	f000 fb5e 	bl	800186c <MX_ADC1_Init>
  MX_I2C2_Init();
 80011b0:	f000 fb9a 	bl	80018e8 <MX_I2C2_Init>
  MX_SPI2_Init();
 80011b4:	f000 fbc6 	bl	8001944 <MX_SPI2_Init>
  MX_TIM1_Init();
 80011b8:	f000 fbfa 	bl	80019b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011bc:	f000 fd0a 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011c0:	f000 fcbc 	bl	8001b3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80011c4:	487b      	ldr	r0, [pc, #492]	; (80013b4 <main+0x238>)
 80011c6:	f002 fb17 	bl	80037f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80011ca:	487a      	ldr	r0, [pc, #488]	; (80013b4 <main+0x238>)
 80011cc:	f001 ffdc 	bl	8003188 <HAL_ADC_Start>


  HAL_Delay(100);//wait for stable power
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f001 fedf 	bl	8002f94 <HAL_Delay>

  MPU6050rezulatat=MPU6050_check(&hi2c2);
 80011d6:	4878      	ldr	r0, [pc, #480]	; (80013b8 <main+0x23c>)
 80011d8:	f7ff fed4 	bl	8000f84 <MPU6050_check>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b76      	ldr	r3, [pc, #472]	; (80013bc <main+0x240>)
 80011e2:	701a      	strb	r2, [r3, #0]
  MPU6050_init(&hi2c2);
 80011e4:	4874      	ldr	r0, [pc, #464]	; (80013b8 <main+0x23c>)
 80011e6:	f7ff fee9 	bl	8000fbc <MPU6050_init>

  HAL_Delay(400);//for stable MPU6050 readings after init
 80011ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011ee:	f001 fed1 	bl	8002f94 <HAL_Delay>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 80011f2:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <main+0x244>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a72      	ldr	r2, [pc, #456]	; (80013c0 <main+0x244>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001204:	486f      	ldr	r0, [pc, #444]	; (80013c4 <main+0x248>)
 8001206:	f002 fdfb 	bl	8003e00 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 800120a:	f000 ff3b 	bl	8002084 <nRF24_Check>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <main+0x24c>)
 8001214:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8001216:	f000 fee3 	bl	8001fe0 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 800121a:	20ff      	movs	r0, #255	; 0xff
 800121c:	f001 f8c4 	bl	80023a8 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 8001220:	200f      	movs	r0, #15
 8001222:	f000 ffbe 	bl	80021a2 <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8001226:	2020      	movs	r0, #32
 8001228:	f001 f84f 	bl	80022ca <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 800122c:	2008      	movs	r0, #8
 800122e:	f000 ff97 	bl	8002160 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 ffc3 	bl	80021be <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8001238:	4964      	ldr	r1, [pc, #400]	; (80013cc <main+0x250>)
 800123a:	2001      	movs	r0, #1
 800123c:	f000 ffd0 	bl	80021e0 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 8001240:	2207      	movs	r2, #7
 8001242:	2100      	movs	r1, #0
 8001244:	2001      	movs	r0, #1
 8001246:	f001 f85b 	bl	8002300 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 800124a:	4960      	ldr	r1, [pc, #384]	; (80013cc <main+0x250>)
 800124c:	2006      	movs	r0, #6
 800124e:	f000 ffc7 	bl	80021e0 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 8001252:	2004      	movs	r0, #4
 8001254:	f001 f81e 	bl	8002294 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001258:	2001      	movs	r0, #1
 800125a:	f000 ff60 	bl	800211e <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 800125e:	f001 f8ed 	bl	800243c <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8001262:	2002      	movs	r0, #2
 8001264:	f000 ff3c 	bl	80020e0 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4855      	ldr	r0, [pc, #340]	; (80013c4 <main+0x248>)
 8001270:	f002 fdc6 	bl	8003e00 <HAL_GPIO_WritePin>

  //get GYRO offset
  SUMGyroX=0;
 8001274:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <main+0x254>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  SUMGyroY=0;
 800127a:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <main+0x258>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
  SUMGyroZ=0;
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <main+0x25c>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
  for(i=0;i<500;i++)
 8001286:	4b55      	ldr	r3, [pc, #340]	; (80013dc <main+0x260>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e026      	b.n	80012dc <main+0x160>
  {
	  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 800128e:	4954      	ldr	r1, [pc, #336]	; (80013e0 <main+0x264>)
 8001290:	4849      	ldr	r0, [pc, #292]	; (80013b8 <main+0x23c>)
 8001292:	f7ff ff0d 	bl	80010b0 <MPU6050_gyroread>
	  SUMGyroX+=mpu6050DataStr.Gyroscope_X;
 8001296:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <main+0x264>)
 8001298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800129c:	461a      	mov	r2, r3
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <main+0x254>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <main+0x254>)
 80012a6:	6013      	str	r3, [r2, #0]
	  SUMGyroY+=mpu6050DataStr.Gyroscope_Y;
 80012a8:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <main+0x264>)
 80012aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <main+0x258>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <main+0x258>)
 80012b8:	6013      	str	r3, [r2, #0]
	  SUMGyroZ+=mpu6050DataStr.Gyroscope_Z;
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <main+0x264>)
 80012bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <main+0x25c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a43      	ldr	r2, [pc, #268]	; (80013d8 <main+0x25c>)
 80012ca:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 fe61 	bl	8002f94 <HAL_Delay>
  for(i=0;i<500;i++)
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <main+0x260>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a40      	ldr	r2, [pc, #256]	; (80013dc <main+0x260>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x260>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e4:	d3d3      	bcc.n	800128e <main+0x112>
  }
  GyroXOff=SUMGyroX/500;
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <main+0x254>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3e      	ldr	r2, [pc, #248]	; (80013e4 <main+0x268>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1152      	asrs	r2, r2, #5
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <main+0x26c>)
 80012fa:	801a      	strh	r2, [r3, #0]
  GyroYOff=SUMGyroY/500;
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <main+0x258>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <main+0x268>)
 8001302:	fb82 1203 	smull	r1, r2, r2, r3
 8001306:	1152      	asrs	r2, r2, #5
 8001308:	17db      	asrs	r3, r3, #31
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <main+0x270>)
 8001310:	801a      	strh	r2, [r3, #0]
  GyroZOff=SUMGyroZ/500;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <main+0x25c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <main+0x268>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1152      	asrs	r2, r2, #5
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <main+0x274>)
 8001326:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001328:	2100      	movs	r1, #0
 800132a:	4832      	ldr	r0, [pc, #200]	; (80013f4 <main+0x278>)
 800132c:	f004 fb80 	bl	8005a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001330:	2104      	movs	r1, #4
 8001332:	4830      	ldr	r0, [pc, #192]	; (80013f4 <main+0x278>)
 8001334:	f004 fb7c 	bl	8005a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001338:	2108      	movs	r1, #8
 800133a:	482e      	ldr	r0, [pc, #184]	; (80013f4 <main+0x278>)
 800133c:	f004 fb78 	bl	8005a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001340:	210c      	movs	r1, #12
 8001342:	482c      	ldr	r0, [pc, #176]	; (80013f4 <main+0x278>)
 8001344:	f004 fb74 	bl	8005a30 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001348:	482b      	ldr	r0, [pc, #172]	; (80013f8 <main+0x27c>)
 800134a:	f004 fb19 	bl	8005980 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f001 fe20 	bl	8002f94 <HAL_Delay>

	  if(wifiOK)LED1_ON;
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <main+0x24c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <main+0x1ea>
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <main+0x280>)
 800135e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	e003      	b.n	800136e <main+0x1f2>
	  else LED1_OFF;
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <main+0x280>)
 8001368:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136c:	611a      	str	r2, [r3, #16]

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <main+0x284>)
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <main+0x288>)
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	6018      	str	r0, [r3, #0]
 8001376:	7912      	ldrb	r2, [r2, #4]
 8001378:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800137a:	4821      	ldr	r0, [pc, #132]	; (8001400 <main+0x284>)
 800137c:	f7fe fee8 	bl	8000150 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	2301      	movs	r3, #1
 8001386:	491e      	ldr	r1, [pc, #120]	; (8001400 <main+0x284>)
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <main+0x28c>)
 800138a:	f005 f9cd 	bl	8006728 <HAL_UART_Transmit>

	  if(wifiOK)
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <main+0x24c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03c      	beq.n	8001410 <main+0x294>
	  {
		  sprintf(UartTXbuff0, "Wifi OK \n\r");
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <main+0x284>)
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <main+0x290>)
 800139a:	cb03      	ldmia	r3!, {r0, r1}
 800139c:	6010      	str	r0, [r2, #0]
 800139e:	6051      	str	r1, [r2, #4]
 80013a0:	8819      	ldrh	r1, [r3, #0]
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	8111      	strh	r1, [r2, #8]
 80013a6:	7293      	strb	r3, [r2, #10]
 80013a8:	e03b      	b.n	8001422 <main+0x2a6>
 80013aa:	bf00      	nop
 80013ac:	e000edf0 	.word	0xe000edf0
 80013b0:	e0001000 	.word	0xe0001000
 80013b4:	200003ac 	.word	0x200003ac
 80013b8:	20000290 	.word	0x20000290
 80013bc:	20000422 	.word	0x20000422
 80013c0:	40003800 	.word	0x40003800
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	20000314 	.word	0x20000314
 80013cc:	08008d48 	.word	0x08008d48
 80013d0:	200004ec 	.word	0x200004ec
 80013d4:	2000042c 	.word	0x2000042c
 80013d8:	20000388 	.word	0x20000388
 80013dc:	20000200 	.word	0x20000200
 80013e0:	200004c8 	.word	0x200004c8
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	20000304 	.word	0x20000304
 80013ec:	20000384 	.word	0x20000384
 80013f0:	20000232 	.word	0x20000232
 80013f4:	20000430 	.word	0x20000430
 80013f8:	20000488 	.word	0x20000488
 80013fc:	40011000 	.word	0x40011000
 8001400:	20000320 	.word	0x20000320
 8001404:	08008ba0 	.word	0x08008ba0
 8001408:	200003e0 	.word	0x200003e0
 800140c:	08008ba8 	.word	0x08008ba8
	  }
	  else sprintf(UartTXbuff0, "Wifi Fail \n\r");
 8001410:	4aae      	ldr	r2, [pc, #696]	; (80016cc <main+0x550>)
 8001412:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <main+0x554>)
 8001414:	4614      	mov	r4, r2
 8001416:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001418:	6020      	str	r0, [r4, #0]
 800141a:	6061      	str	r1, [r4, #4]
 800141c:	60a2      	str	r2, [r4, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001422:	48aa      	ldr	r0, [pc, #680]	; (80016cc <main+0x550>)
 8001424:	f7fe fe94 	bl	8000150 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	2301      	movs	r3, #1
 800142e:	49a7      	ldr	r1, [pc, #668]	; (80016cc <main+0x550>)
 8001430:	48a8      	ldr	r0, [pc, #672]	; (80016d4 <main+0x558>)
 8001432:	f005 f979 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "L-UD=%u L-LR=%u \n\r",Ljoyupdown,Ljoyleftright);
 8001436:	4ba8      	ldr	r3, [pc, #672]	; (80016d8 <main+0x55c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4ba8      	ldr	r3, [pc, #672]	; (80016dc <main+0x560>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	49a8      	ldr	r1, [pc, #672]	; (80016e0 <main+0x564>)
 8001440:	48a2      	ldr	r0, [pc, #648]	; (80016cc <main+0x550>)
 8001442:	f005 ffb1 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001446:	48a1      	ldr	r0, [pc, #644]	; (80016cc <main+0x550>)
 8001448:	f7fe fe82 	bl	8000150 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	2301      	movs	r3, #1
 8001452:	499e      	ldr	r1, [pc, #632]	; (80016cc <main+0x550>)
 8001454:	489f      	ldr	r0, [pc, #636]	; (80016d4 <main+0x558>)
 8001456:	f005 f967 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
 800145a:	4ba2      	ldr	r3, [pc, #648]	; (80016e4 <main+0x568>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4ba2      	ldr	r3, [pc, #648]	; (80016e8 <main+0x56c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	49a2      	ldr	r1, [pc, #648]	; (80016ec <main+0x570>)
 8001464:	4899      	ldr	r0, [pc, #612]	; (80016cc <main+0x550>)
 8001466:	f005 ff9f 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800146a:	4898      	ldr	r0, [pc, #608]	; (80016cc <main+0x550>)
 800146c:	f7fe fe70 	bl	8000150 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	4995      	ldr	r1, [pc, #596]	; (80016cc <main+0x550>)
 8001478:	4896      	ldr	r0, [pc, #600]	; (80016d4 <main+0x558>)
 800147a:	f005 f955 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Pot1=%u Pot2=%u \n\r",potenc1,potenc2);
 800147e:	4b9c      	ldr	r3, [pc, #624]	; (80016f0 <main+0x574>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <main+0x578>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	499c      	ldr	r1, [pc, #624]	; (80016f8 <main+0x57c>)
 8001488:	4890      	ldr	r0, [pc, #576]	; (80016cc <main+0x550>)
 800148a:	f005 ff8d 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800148e:	488f      	ldr	r0, [pc, #572]	; (80016cc <main+0x550>)
 8001490:	f7fe fe5e 	bl	8000150 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	2301      	movs	r3, #1
 800149a:	498c      	ldr	r1, [pc, #560]	; (80016cc <main+0x550>)
 800149c:	488d      	ldr	r0, [pc, #564]	; (80016d4 <main+0x558>)
 800149e:	f005 f943 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Togg1=%u Togg2=%u \n\r",togg1,togg2);
 80014a2:	4b96      	ldr	r3, [pc, #600]	; (80016fc <main+0x580>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b96      	ldr	r3, [pc, #600]	; (8001700 <main+0x584>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4996      	ldr	r1, [pc, #600]	; (8001704 <main+0x588>)
 80014ac:	4887      	ldr	r0, [pc, #540]	; (80016cc <main+0x550>)
 80014ae:	f005 ff7b 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80014b2:	4886      	ldr	r0, [pc, #536]	; (80016cc <main+0x550>)
 80014b4:	f7fe fe4c 	bl	8000150 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	2301      	movs	r3, #1
 80014be:	4983      	ldr	r1, [pc, #524]	; (80016cc <main+0x550>)
 80014c0:	4884      	ldr	r0, [pc, #528]	; (80016d4 <main+0x558>)
 80014c2:	f005 f931 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Butt1=%u Butt2=%u Butt3=%u Butt4=%u \n\r",butt1,butt2,butt3,butt4);
 80014c6:	4b90      	ldr	r3, [pc, #576]	; (8001708 <main+0x58c>)
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	4b90      	ldr	r3, [pc, #576]	; (800170c <main+0x590>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	4b90      	ldr	r3, [pc, #576]	; (8001710 <main+0x594>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a90      	ldr	r2, [pc, #576]	; (8001714 <main+0x598>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	498e      	ldr	r1, [pc, #568]	; (8001718 <main+0x59c>)
 80014e0:	487a      	ldr	r0, [pc, #488]	; (80016cc <main+0x550>)
 80014e2:	f005 ff61 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80014e6:	4879      	ldr	r0, [pc, #484]	; (80016cc <main+0x550>)
 80014e8:	f7fe fe32 	bl	8000150 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	2301      	movs	r3, #1
 80014f2:	4976      	ldr	r1, [pc, #472]	; (80016cc <main+0x550>)
 80014f4:	4877      	ldr	r0, [pc, #476]	; (80016d4 <main+0x558>)
 80014f6:	f005 f917 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <main+0x5a0>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <main+0x5a4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4988      	ldr	r1, [pc, #544]	; (8001724 <main+0x5a8>)
 8001504:	4871      	ldr	r0, [pc, #452]	; (80016cc <main+0x550>)
 8001506:	f005 ff4f 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800150a:	4870      	ldr	r0, [pc, #448]	; (80016cc <main+0x550>)
 800150c:	f7fe fe20 	bl	8000150 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	496d      	ldr	r1, [pc, #436]	; (80016cc <main+0x550>)
 8001518:	486e      	ldr	r0, [pc, #440]	; (80016d4 <main+0x558>)
 800151a:	f005 f905 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG RECV=%u \n\r",watch1);
 800151e:	4b82      	ldr	r3, [pc, #520]	; (8001728 <main+0x5ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4981      	ldr	r1, [pc, #516]	; (800172c <main+0x5b0>)
 8001526:	4869      	ldr	r0, [pc, #420]	; (80016cc <main+0x550>)
 8001528:	f005 ff3e 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800152c:	4867      	ldr	r0, [pc, #412]	; (80016cc <main+0x550>)
 800152e:	f7fe fe0f 	bl	8000150 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	2301      	movs	r3, #1
 8001538:	4964      	ldr	r1, [pc, #400]	; (80016cc <main+0x550>)
 800153a:	4866      	ldr	r0, [pc, #408]	; (80016d4 <main+0x558>)
 800153c:	f005 f8f4 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG SEND=%u \n\r",watch2);
 8001540:	4b7b      	ldr	r3, [pc, #492]	; (8001730 <main+0x5b4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	497b      	ldr	r1, [pc, #492]	; (8001734 <main+0x5b8>)
 8001548:	4860      	ldr	r0, [pc, #384]	; (80016cc <main+0x550>)
 800154a:	f005 ff2d 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800154e:	485f      	ldr	r0, [pc, #380]	; (80016cc <main+0x550>)
 8001550:	f7fe fdfe 	bl	8000150 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	2301      	movs	r3, #1
 800155a:	495c      	ldr	r1, [pc, #368]	; (80016cc <main+0x550>)
 800155c:	485d      	ldr	r0, [pc, #372]	; (80016d4 <main+0x558>)
 800155e:	f005 f8e3 	bl	8006728 <HAL_UART_Transmit>

	  //MPU 6050
	  sprintf(UartTXbuff0, "GYROX=%d Off=%d\n\r",GyroXcal,GyroXOff);
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <main+0x5bc>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	461a      	mov	r2, r3
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <main+0x5c0>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	4973      	ldr	r1, [pc, #460]	; (8001740 <main+0x5c4>)
 8001572:	4856      	ldr	r0, [pc, #344]	; (80016cc <main+0x550>)
 8001574:	f005 ff18 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001578:	4854      	ldr	r0, [pc, #336]	; (80016cc <main+0x550>)
 800157a:	f7fe fde9 	bl	8000150 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	2301      	movs	r3, #1
 8001584:	4951      	ldr	r1, [pc, #324]	; (80016cc <main+0x550>)
 8001586:	4853      	ldr	r0, [pc, #332]	; (80016d4 <main+0x558>)
 8001588:	f005 f8ce 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYROY=%d Off=%d\n\r",GyroYcal,GyroYOff);
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <main+0x5c8>)
 800158e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001592:	461a      	mov	r2, r3
 8001594:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <main+0x5cc>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	496c      	ldr	r1, [pc, #432]	; (800174c <main+0x5d0>)
 800159c:	484b      	ldr	r0, [pc, #300]	; (80016cc <main+0x550>)
 800159e:	f005 ff03 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015a2:	484a      	ldr	r0, [pc, #296]	; (80016cc <main+0x550>)
 80015a4:	f7fe fdd4 	bl	8000150 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	2301      	movs	r3, #1
 80015ae:	4947      	ldr	r1, [pc, #284]	; (80016cc <main+0x550>)
 80015b0:	4848      	ldr	r0, [pc, #288]	; (80016d4 <main+0x558>)
 80015b2:	f005 f8b9 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYROZ=%d Off=%d\n\r",GyroZcal,GyroZOff);
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <main+0x5d4>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <main+0x5d8>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	4964      	ldr	r1, [pc, #400]	; (8001758 <main+0x5dc>)
 80015c6:	4841      	ldr	r0, [pc, #260]	; (80016cc <main+0x550>)
 80015c8:	f005 feee 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015cc:	483f      	ldr	r0, [pc, #252]	; (80016cc <main+0x550>)
 80015ce:	f7fe fdbf 	bl	8000150 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	493c      	ldr	r1, [pc, #240]	; (80016cc <main+0x550>)
 80015da:	483e      	ldr	r0, [pc, #248]	; (80016d4 <main+0x558>)
 80015dc:	f005 f8a4 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC X RAW=%d \n\r",mpu6050DataStr.Accelerometer_X);
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <main+0x5e0>)
 80015e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e6:	461a      	mov	r2, r3
 80015e8:	495d      	ldr	r1, [pc, #372]	; (8001760 <main+0x5e4>)
 80015ea:	4838      	ldr	r0, [pc, #224]	; (80016cc <main+0x550>)
 80015ec:	f005 fedc 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80015f0:	4836      	ldr	r0, [pc, #216]	; (80016cc <main+0x550>)
 80015f2:	f7fe fdad 	bl	8000150 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	4933      	ldr	r1, [pc, #204]	; (80016cc <main+0x550>)
 80015fe:	4835      	ldr	r0, [pc, #212]	; (80016d4 <main+0x558>)
 8001600:	f005 f892 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Y RAW=%d \n\r",mpu6050DataStr.Accelerometer_Y);
 8001604:	4b55      	ldr	r3, [pc, #340]	; (800175c <main+0x5e0>)
 8001606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800160a:	461a      	mov	r2, r3
 800160c:	4955      	ldr	r1, [pc, #340]	; (8001764 <main+0x5e8>)
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <main+0x550>)
 8001610:	f005 feca 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001614:	482d      	ldr	r0, [pc, #180]	; (80016cc <main+0x550>)
 8001616:	f7fe fd9b 	bl	8000150 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	2301      	movs	r3, #1
 8001620:	492a      	ldr	r1, [pc, #168]	; (80016cc <main+0x550>)
 8001622:	482c      	ldr	r0, [pc, #176]	; (80016d4 <main+0x558>)
 8001624:	f005 f880 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Z RAW=%d \n\r",mpu6050DataStr.Accelerometer_Z);
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <main+0x5e0>)
 800162a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	494d      	ldr	r1, [pc, #308]	; (8001768 <main+0x5ec>)
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <main+0x550>)
 8001634:	f005 feb8 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001638:	4824      	ldr	r0, [pc, #144]	; (80016cc <main+0x550>)
 800163a:	f7fe fd89 	bl	8000150 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	2301      	movs	r3, #1
 8001644:	4921      	ldr	r1, [pc, #132]	; (80016cc <main+0x550>)
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <main+0x558>)
 8001648:	f005 f86e 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Factor=%.10f \n\r",GYROFACTOR);
 800164c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <main+0x5f0>)
 8001652:	4947      	ldr	r1, [pc, #284]	; (8001770 <main+0x5f4>)
 8001654:	481d      	ldr	r0, [pc, #116]	; (80016cc <main+0x550>)
 8001656:	f005 fea7 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800165a:	481c      	ldr	r0, [pc, #112]	; (80016cc <main+0x550>)
 800165c:	f7fe fd78 	bl	8000150 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	2301      	movs	r3, #1
 8001666:	4919      	ldr	r1, [pc, #100]	; (80016cc <main+0x550>)
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <main+0x558>)
 800166a:	f005 f85d 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Pitch=%.2f \n\r",AnglePitch);
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <main+0x5f8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fed8 	bl	8000428 <__aeabi_f2d>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	493d      	ldr	r1, [pc, #244]	; (8001778 <main+0x5fc>)
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <main+0x550>)
 8001684:	f005 fe90 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <main+0x550>)
 800168a:	f7fe fd61 	bl	8000150 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	2301      	movs	r3, #1
 8001694:	490d      	ldr	r1, [pc, #52]	; (80016cc <main+0x550>)
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <main+0x558>)
 8001698:	f005 f846 	bl	8006728 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Roll=%.2f \n\r",AngleRoll);
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <main+0x600>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fec1 	bl	8000428 <__aeabi_f2d>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <main+0x604>)
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <main+0x550>)
 80016b2:	f005 fe79 	bl	80073a8 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <main+0x550>)
 80016b8:	f7fe fd4a 	bl	8000150 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	2301      	movs	r3, #1
 80016c2:	4902      	ldr	r1, [pc, #8]	; (80016cc <main+0x550>)
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <main+0x558>)
 80016c6:	f005 f82f 	bl	8006728 <HAL_UART_Transmit>
 80016ca:	e05b      	b.n	8001784 <main+0x608>
 80016cc:	20000320 	.word	0x20000320
 80016d0:	08008bb4 	.word	0x08008bb4
 80016d4:	200003e0 	.word	0x200003e0
 80016d8:	20000470 	.word	0x20000470
 80016dc:	200003dc 	.word	0x200003dc
 80016e0:	08008bc4 	.word	0x08008bc4
 80016e4:	200004dc 	.word	0x200004dc
 80016e8:	20000228 	.word	0x20000228
 80016ec:	08008bd8 	.word	0x08008bd8
 80016f0:	20000484 	.word	0x20000484
 80016f4:	200004e0 	.word	0x200004e0
 80016f8:	08008bec 	.word	0x08008bec
 80016fc:	20000428 	.word	0x20000428
 8001700:	200004e8 	.word	0x200004e8
 8001704:	08008c00 	.word	0x08008c00
 8001708:	2000047c 	.word	0x2000047c
 800170c:	200004e4 	.word	0x200004e4
 8001710:	20000424 	.word	0x20000424
 8001714:	2000022c 	.word	0x2000022c
 8001718:	08008c18 	.word	0x08008c18
 800171c:	2000028c 	.word	0x2000028c
 8001720:	20000480 	.word	0x20000480
 8001724:	08008c40 	.word	0x08008c40
 8001728:	2000031c 	.word	0x2000031c
 800172c:	08008c58 	.word	0x08008c58
 8001730:	20000308 	.word	0x20000308
 8001734:	08008c68 	.word	0x08008c68
 8001738:	20000230 	.word	0x20000230
 800173c:	20000304 	.word	0x20000304
 8001740:	08008c78 	.word	0x08008c78
 8001744:	20000318 	.word	0x20000318
 8001748:	20000384 	.word	0x20000384
 800174c:	08008c8c 	.word	0x08008c8c
 8001750:	20000420 	.word	0x20000420
 8001754:	20000232 	.word	0x20000232
 8001758:	08008ca0 	.word	0x08008ca0
 800175c:	200004c8 	.word	0x200004c8
 8001760:	08008cb4 	.word	0x08008cb4
 8001764:	08008cc4 	.word	0x08008cc4
 8001768:	08008cd4 	.word	0x08008cd4
 800176c:	3f000240 	.word	0x3f000240
 8001770:	08008ce4 	.word	0x08008ce4
 8001774:	200005d4 	.word	0x200005d4
 8001778:	08008cf4 	.word	0x08008cf4
 800177c:	200005e8 	.word	0x200005e8
 8001780:	08008d04 	.word	0x08008d04

	  sprintf(UartTXbuff0, "\n\r" );
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <main+0x62c>)
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <main+0x630>)
 8001788:	8811      	ldrh	r1, [r2, #0]
 800178a:	7892      	ldrb	r2, [r2, #2]
 800178c:	8019      	strh	r1, [r3, #0]
 800178e:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <main+0x62c>)
 8001792:	f7fe fcdd 	bl	8000150 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	2301      	movs	r3, #1
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <main+0x62c>)
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <main+0x634>)
 80017a0:	f004 ffc2 	bl	8006728 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80017a4:	e5d3      	b.n	800134e <main+0x1d2>
 80017a6:	bf00      	nop
 80017a8:	20000320 	.word	0x20000320
 80017ac:	08008d14 	.word	0x08008d14
 80017b0:	200003e0 	.word	0x200003e0

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 f998 	bl	8006af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f2:	2301      	movs	r3, #1
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001800:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fa9e 	bl	8004d4c <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001816:	f000 faa9 	bl	8001d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fd08 	bl	800524c <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001842:	f000 fa93 	bl	8001d6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001846:	2302      	movs	r3, #2
 8001848:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800184a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fe96 	bl	8005584 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800185e:	f000 fa85 	bl	8001d6c <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_ADC1_Init+0x74>)
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <MX_ADC1_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_ADC1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_ADC1_Init+0x74>)
 800188a:	2201      	movs	r2, #1
 800188c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_ADC1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_ADC1_Init+0x74>)
 8001896:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800189a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_ADC1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_ADC1_Init+0x74>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_ADC1_Init+0x74>)
 80018aa:	f001 fb95 	bl	8002fd8 <HAL_ADC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 fa5a 	bl	8001d6c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018bc:	2301      	movs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80018c0:	2302      	movs	r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_ADC1_Init+0x74>)
 80018ca:	f001 fe11 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018d4:	f000 fa4a 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200003ac 	.word	0x200003ac
 80018e4:	40012400 	.word	0x40012400

080018e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_I2C2_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <MX_I2C2_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_I2C2_Init+0x50>)
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <MX_I2C2_Init+0x58>)
 80018f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_I2C2_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_I2C2_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_I2C2_Init+0x50>)
 8001906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_I2C2_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_I2C2_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_I2C2_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_I2C2_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_I2C2_Init+0x50>)
 8001926:	f002 fa83 	bl	8003e30 <HAL_I2C_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001930:	f000 fa1c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000290 	.word	0x20000290
 800193c:	40005800 	.word	0x40005800
 8001940:	00061a80 	.word	0x00061a80

08001944 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_SPI2_Init+0x64>)
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <MX_SPI2_Init+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_SPI2_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_SPI2_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001974:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001978:	2208      	movs	r2, #8
 800197a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_SPI2_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_SPI2_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001990:	220a      	movs	r2, #10
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_SPI2_Init+0x64>)
 8001996:	f003 ff67 	bl	8005868 <HAL_SPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019a0:	f000 f9e4 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000234 	.word	0x20000234
 80019ac:	40003800 	.word	0x40003800

080019b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b096      	sub	sp, #88	; 0x58
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2220      	movs	r2, #32
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 f885 	bl	8006af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ee:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <MX_TIM1_Init+0x184>)
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <MX_TIM1_Init+0x188>)
 80019f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <MX_TIM1_Init+0x184>)
 80019f6:	2247      	movs	r2, #71	; 0x47
 80019f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <MX_TIM1_Init+0x184>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a02:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a1a:	4846      	ldr	r0, [pc, #280]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a1c:	f003 ff85 	bl	800592a <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a26:	f000 f9a1 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a34:	4619      	mov	r1, r3
 8001a36:	483f      	ldr	r0, [pc, #252]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a38:	f004 f9fa 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a42:	f000 f993 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a48:	f003 ffbd 	bl	80059c6 <HAL_TIM_PWM_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a52:	f000 f98b 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a62:	4619      	mov	r1, r3
 8001a64:	4833      	ldr	r0, [pc, #204]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a66:	f004 fd6b 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a70:	f000 f97c 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a74:	2360      	movs	r3, #96	; 0x60
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a86:	2304      	movs	r3, #4
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4826      	ldr	r0, [pc, #152]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001a9c:	f004 f902 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001aa6:	f000 f961 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4820      	ldr	r0, [pc, #128]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001ab4:	f004 f8f6 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001abe:	f000 f955 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481a      	ldr	r0, [pc, #104]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001acc:	f004 f8ea 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ad6:	f000 f949 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	220c      	movs	r2, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001ae4:	f004 f8de 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001aee:	f000 f93d 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001b16:	f004 fd57 	bl	80065c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001b20:	f000 f924 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <MX_TIM1_Init+0x184>)
 8001b26:	f000 fe13 	bl	8002750 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3758      	adds	r7, #88	; 0x58
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000430 	.word	0x20000430
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b62:	2247      	movs	r2, #71	; 0x47
 8001b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b82:	f003 fed2 	bl	800592a <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b8c:	f000 f8ee 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001b9e:	f004 f947 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ba8:	f000 f8e0 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM2_Init+0x94>)
 8001bba:	f004 fcc1 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bc4:	f000 f8d2 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000488 	.word	0x20000488

08001bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART1_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f004 fd3f 	bl	800668e <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f8a9 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003e0 	.word	0x200003e0
 8001c24:	40013800 	.word	0x40013800

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <MX_GPIO_Init+0x134>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca2:	482f      	ldr	r0, [pc, #188]	; (8001d60 <MX_GPIO_Init+0x138>)
 8001ca4:	f002 f8ac 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001cae:	482d      	ldr	r0, [pc, #180]	; (8001d64 <MX_GPIO_Init+0x13c>)
 8001cb0:	f002 f8a6 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cba:	482b      	ldr	r0, [pc, #172]	; (8001d68 <MX_GPIO_Init+0x140>)
 8001cbc:	f002 f8a0 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4821      	ldr	r0, [pc, #132]	; (8001d60 <MX_GPIO_Init+0x138>)
 8001cda:	f001 ff37 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481b      	ldr	r0, [pc, #108]	; (8001d64 <MX_GPIO_Init+0x13c>)
 8001cf8:	f001 ff28 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <MX_GPIO_Init+0x140>)
 8001d12:	f001 ff1b 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <MX_GPIO_Init+0x140>)
 8001d30:	f001 ff0c 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8001d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_GPIO_Init+0x13c>)
 8001d4e:	f001 fefd 	bl	8003b4c <HAL_GPIO_Init>

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40011000 	.word	0x40011000
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40010800 	.word	0x40010800

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <nRF24_TransmitPacket+0x98>)
 8001d86:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8e:	4821      	ldr	r0, [pc, #132]	; (8001e14 <nRF24_TransmitPacket+0x9c>)
 8001d90:	f002 f836 	bl	8003e00 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	4619      	mov	r1, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fb64 	bl	8002466 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	481b      	ldr	r0, [pc, #108]	; (8001e14 <nRF24_TransmitPacket+0x9c>)
 8001da6:	f002 f82b 	bl	8003e00 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001daa:	f000 fb24 	bl	80023f6 <nRF24_GetStatus>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f1      	bne.n	8001daa <nRF24_TransmitPacket+0x32>
 8001dc6:	e000      	b.n	8001dca <nRF24_TransmitPacket+0x52>
			break;
 8001dc8:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <nRF24_TransmitPacket+0x9c>)
 8001dd2:	f002 f815 	bl	8003e00 <HAL_GPIO_WritePin>

	if (!wait) {
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e012      	b.n	8001e06 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8001de0:	f000 fb2c 	bl	800243c <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e009      	b.n	8001e06 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e002      	b.n	8001e06 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8001e00:	f000 fb0c 	bl	800241c <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	000fffff 	.word	0x000fffff
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001e22:	bf00      	nop
 8001e24:	2102      	movs	r1, #2
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <nRF24_LL_RW+0x48>)
 8001e28:	f7ff f98e 	bl	8001148 <SPI_I2S_GetFlagStatus>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f8      	beq.n	8001e24 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <nRF24_LL_RW+0x48>)
 8001e3a:	f7ff f96b 	bl	8001114 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001e3e:	bf00      	nop
 8001e40:	2101      	movs	r1, #1
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <nRF24_LL_RW+0x48>)
 8001e44:	f7ff f980 	bl	8001148 <SPI_I2S_GetFlagStatus>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f8      	beq.n	8001e40 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001e4e:	4804      	ldr	r0, [pc, #16]	; (8001e60 <nRF24_LL_RW+0x48>)
 8001e50:	f7ff f96e 	bl	8001130 <SPI_I2S_ReceiveData>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b2db      	uxtb	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40003800 	.word	0x40003800

08001e64 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <nRF24_ReadReg+0x44>)
 8001e76:	f001 ffc3 	bl	8003e00 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffc8 	bl	8001e18 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001e88:	20ff      	movs	r0, #255	; 0xff
 8001e8a:	f7ff ffc5 	bl	8001e18 <nRF24_LL_RW>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <nRF24_ReadReg+0x44>)
 8001e9a:	f001 ffb1 	bl	8003e00 <HAL_GPIO_WritePin>

	return value;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40010800 	.word	0x40010800

08001eac <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <nRF24_WriteReg+0x80>)
 8001ec4:	f001 ff9c 	bl	8003e00 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b1f      	cmp	r3, #31
 8001ecc:	d810      	bhi.n	8001ef0 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff99 	bl	8001e18 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff95 	bl	8001e18 <nRF24_LL_RW>
 8001eee:	e013      	b.n	8001f18 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff90 	bl	8001e18 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2be1      	cmp	r3, #225	; 0xe1
 8001efc:	d00c      	beq.n	8001f18 <nRF24_WriteReg+0x6c>
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2be2      	cmp	r3, #226	; 0xe2
 8001f02:	d009      	beq.n	8001f18 <nRF24_WriteReg+0x6c>
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2be3      	cmp	r3, #227	; 0xe3
 8001f08:	d006      	beq.n	8001f18 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2bff      	cmp	r3, #255	; 0xff
 8001f0e:	d003      	beq.n	8001f18 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff80 	bl	8001e18 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <nRF24_WriteReg+0x80>)
 8001f20:	f001 ff6e 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40010800 	.word	0x40010800

08001f30 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f46:	480f      	ldr	r0, [pc, #60]	; (8001f84 <nRF24_ReadMBReg+0x54>)
 8001f48:	f001 ff5a 	bl	8003e00 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff62 	bl	8001e18 <nRF24_LL_RW>
	while (count--) {
 8001f54:	e007      	b.n	8001f66 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001f56:	683c      	ldr	r4, [r7, #0]
 8001f58:	1c63      	adds	r3, r4, #1
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	20ff      	movs	r0, #255	; 0xff
 8001f5e:	f7ff ff5b 	bl	8001e18 <nRF24_LL_RW>
 8001f62:	4603      	mov	r3, r0
 8001f64:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	71ba      	strb	r2, [r7, #6]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f2      	bne.n	8001f56 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <nRF24_ReadMBReg+0x54>)
 8001f78:	f001 ff42 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	40010800 	.word	0x40010800

08001f88 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	4613      	mov	r3, r2
 8001f96:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f9e:	480f      	ldr	r0, [pc, #60]	; (8001fdc <nRF24_WriteMBReg+0x54>)
 8001fa0:	f001 ff2e 	bl	8003e00 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff36 	bl	8001e18 <nRF24_LL_RW>
	while (count--) {
 8001fac:	e006      	b.n	8001fbc <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	603a      	str	r2, [r7, #0]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff2e 	bl	8001e18 <nRF24_LL_RW>
	while (count--) {
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	71ba      	strb	r2, [r7, #6]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f3      	bne.n	8001fae <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <nRF24_WriteMBReg+0x54>)
 8001fce:	f001 ff17 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff ff60 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001fec:	213f      	movs	r1, #63	; 0x3f
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff ff5c 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f7ff ff58 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	2003      	movs	r0, #3
 8002000:	f7ff ff54 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002004:	2103      	movs	r1, #3
 8002006:	2004      	movs	r0, #4
 8002008:	f7ff ff50 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800200c:	2102      	movs	r1, #2
 800200e:	2005      	movs	r0, #5
 8002010:	f7ff ff4c 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002014:	210e      	movs	r1, #14
 8002016:	2006      	movs	r0, #6
 8002018:	f7ff ff48 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800201c:	2100      	movs	r1, #0
 800201e:	2007      	movs	r0, #7
 8002020:	f7ff ff44 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002024:	2100      	movs	r1, #0
 8002026:	2011      	movs	r0, #17
 8002028:	f7ff ff40 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800202c:	2100      	movs	r1, #0
 800202e:	2012      	movs	r0, #18
 8002030:	f7ff ff3c 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002034:	2100      	movs	r1, #0
 8002036:	2013      	movs	r0, #19
 8002038:	f7ff ff38 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800203c:	2100      	movs	r1, #0
 800203e:	2014      	movs	r0, #20
 8002040:	f7ff ff34 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002044:	2100      	movs	r1, #0
 8002046:	2015      	movs	r0, #21
 8002048:	f7ff ff30 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800204c:	2100      	movs	r1, #0
 800204e:	2016      	movs	r0, #22
 8002050:	f7ff ff2c 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002054:	2100      	movs	r1, #0
 8002056:	201c      	movs	r0, #28
 8002058:	f7ff ff28 	bl	8001eac <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800205c:	2100      	movs	r1, #0
 800205e:	201d      	movs	r0, #29
 8002060:	f7ff ff24 	bl	8001eac <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8002064:	f000 f9e2 	bl	800242c <nRF24_FlushRX>
	nRF24_FlushTX();
 8002068:	f000 f9d8 	bl	800241c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800206c:	f000 f9e6 	bl	800243c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002076:	4802      	ldr	r0, [pc, #8]	; (8002080 <nRF24_Init+0xa0>)
 8002078:	f001 fec2 	bl	8003e00 <HAL_GPIO_WritePin>
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40010800 	.word	0x40010800

08002084 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <nRF24_Check+0x58>)
 800208c:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800208e:	2205      	movs	r2, #5
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	2030      	movs	r0, #48	; 0x30
 8002094:	f7ff ff78 	bl	8001f88 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002098:	463b      	mov	r3, r7
 800209a:	2205      	movs	r2, #5
 800209c:	4619      	mov	r1, r3
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff ff46 	bl	8001f30 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e010      	b.n	80020cc <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	f107 0210 	add.w	r2, r7, #16
 80020b0:	4413      	add	r3, r2
 80020b2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1c59      	adds	r1, r3, #1
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <nRF24_Check+0x42>
 80020c2:	2300      	movs	r3, #0
 80020c4:	e006      	b.n	80020d4 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	3301      	adds	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d9eb      	bls.n	80020aa <nRF24_Check+0x26>
	}

	return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	08008d18 	.word	0x08008d18

080020e0 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff feba 	bl	8001e64 <nRF24_ReadReg>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d104      	bne.n	8002104 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e003      	b.n	800210c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	4619      	mov	r1, r3
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fecb 	bl	8001eac <nRF24_WriteReg>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff fe9b 	bl	8001e64 <nRF24_ReadReg>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	b25a      	sxtb	r2, r3
 8002144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4619      	mov	r1, r3
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff feaa 	bl	8001eac <nRF24_WriteReg>
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff fe7a 	bl	8001e64 <nRF24_ReadReg>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	f023 030c 	bic.w	r3, r3, #12
 800217a:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	b25a      	sxtb	r2, r3
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4313      	orrs	r3, r2
 800218c:	b25b      	sxtb	r3, r3
 800218e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	4619      	mov	r1, r3
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fe89 	bl	8001eac <nRF24_WriteReg>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4619      	mov	r1, r3
 80021b0:	2005      	movs	r0, #5
 80021b2:	f7ff fe7b 	bl	8001eac <nRF24_WriteReg>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	3b02      	subs	r3, #2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	2003      	movs	r0, #3
 80021d2:	f7ff fe6b 	bl	8001eac <nRF24_WriteReg>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d846      	bhi.n	8002280 <nRF24_SetAddr+0xa0>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <nRF24_SetAddr+0x18>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002215 	.word	0x08002215
 80021fc:	08002215 	.word	0x08002215
 8002200:	0800226d 	.word	0x0800226d
 8002204:	0800226d 	.word	0x0800226d
 8002208:	0800226d 	.word	0x0800226d
 800220c:	0800226d 	.word	0x0800226d
 8002210:	08002215 	.word	0x08002215
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002214:	2003      	movs	r0, #3
 8002216:	f7ff fe25 	bl	8001e64 <nRF24_ReadReg>
 800221a:	4603      	mov	r3, r0
 800221c:	3301      	adds	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4413      	add	r3, r2
 8002226:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800222e:	4817      	ldr	r0, [pc, #92]	; (800228c <nRF24_SetAddr+0xac>)
 8002230:	f001 fde6 	bl	8003e00 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <nRF24_SetAddr+0xb0>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	f043 0320 	orr.w	r3, r3, #32
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fde9 	bl	8001e18 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	603a      	str	r2, [r7, #0]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fde2 	bl	8001e18 <nRF24_LL_RW>
			} while (addr_width--);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	73fa      	strb	r2, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f3      	bne.n	8002246 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <nRF24_SetAddr+0xac>)
 8002266:	f001 fdcb 	bl	8003e00 <HAL_GPIO_WritePin>
			break;
 800226a:	e00a      	b.n	8002282 <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <nRF24_SetAddr+0xb0>)
 8002270:	5cd2      	ldrb	r2, [r2, r3]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f7ff fe17 	bl	8001eac <nRF24_WriteReg>
			break;
 800227e:	e000      	b.n	8002282 <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002280:	bf00      	nop
	}
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40010800 	.word	0x40010800
 8002290:	08008d54 	.word	0x08008d54

08002294 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800229e:	2006      	movs	r0, #6
 80022a0:	f7ff fde0 	bl	8001e64 <nRF24_ReadReg>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	f023 0306 	bic.w	r3, r3, #6
 80022ae:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4619      	mov	r1, r3
 80022bc:	2006      	movs	r0, #6
 80022be:	f7ff fdf5 	bl	8001eac <nRF24_WriteReg>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80022d4:	2006      	movs	r0, #6
 80022d6:	f7ff fdc5 	bl	8001e64 <nRF24_ReadReg>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80022e4:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	4619      	mov	r1, r3
 80022f2:	2006      	movs	r0, #6
 80022f4:	f7ff fdda 	bl	8001eac <nRF24_WriteReg>
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
 800230a:	460b      	mov	r3, r1
 800230c:	71bb      	strb	r3, [r7, #6]
 800230e:	4613      	mov	r3, r2
 8002310:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff fda6 	bl	8001e64 <nRF24_ReadReg>
 8002318:	4603      	mov	r3, r0
 800231a:	b25a      	sxtb	r2, r3
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	b25b      	sxtb	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b25b      	sxtb	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002330:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4619      	mov	r1, r3
 8002336:	2002      	movs	r0, #2
 8002338:	f7ff fdb8 	bl	8001eac <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <nRF24_SetRXPipe+0xa4>)
 8002340:	5cd2      	ldrb	r2, [r2, r3]
 8002342:	797b      	ldrb	r3, [r7, #5]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f7ff fdad 	bl	8001eac <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff fd86 	bl	8001e64 <nRF24_ReadReg>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10a      	bne.n	8002378 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2201      	movs	r2, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	b25a      	sxtb	r2, r3
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4313      	orrs	r3, r2
 8002372:	b25b      	sxtb	r3, r3
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e00b      	b.n	8002390 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2201      	movs	r2, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	b25b      	sxtb	r3, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	b25a      	sxtb	r2, r3
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4013      	ands	r3, r2
 800238c:	b25b      	sxtb	r3, r3
 800238e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	4619      	mov	r1, r3
 8002394:	2001      	movs	r0, #1
 8002396:	f7ff fd89 	bl	8001eac <nRF24_WriteReg>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	08008d4c 	.word	0x08008d4c

080023a8 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d904      	bls.n	80023c2 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80023b8:	2100      	movs	r1, #0
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fd76 	bl	8001eac <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80023c0:	e015      	b.n	80023ee <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff fd4e 	bl	8001e64 <nRF24_ReadReg>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2201      	movs	r2, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	b25a      	sxtb	r2, r3
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4013      	ands	r3, r2
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff fd5f 	bl	8001eac <nRF24_WriteReg>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80023fa:	2007      	movs	r0, #7
 80023fc:	f7ff fd32 	bl	8001e64 <nRF24_ReadReg>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}

08002406 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800240a:	2017      	movs	r0, #23
 800240c:	f7ff fd2a 	bl	8001e64 <nRF24_ReadReg>
 8002410:	4603      	mov	r3, r0
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	b2db      	uxtb	r3, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}

0800241c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002420:	21ff      	movs	r1, #255	; 0xff
 8002422:	20e1      	movs	r0, #225	; 0xe1
 8002424:	f7ff fd42 	bl	8001eac <nRF24_WriteReg>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002430:	21ff      	movs	r1, #255	; 0xff
 8002432:	20e2      	movs	r0, #226	; 0xe2
 8002434:	f7ff fd3a 	bl	8001eac <nRF24_WriteReg>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002442:	2007      	movs	r0, #7
 8002444:	f7ff fd0e 	bl	8001e64 <nRF24_ReadReg>
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002452:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4619      	mov	r1, r3
 8002458:	2007      	movs	r0, #7
 800245a:	f7ff fd27 	bl	8001eac <nRF24_WriteReg>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	461a      	mov	r2, r3
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	20a0      	movs	r0, #160	; 0xa0
 800247a:	f7ff fd85 	bl	8001f88 <nRF24_WriteMBReg>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8002492:	2007      	movs	r0, #7
 8002494:	f7ff fce6 	bl	8001e64 <nRF24_ReadReg>
 8002498:	4603      	mov	r3, r0
 800249a:	105b      	asrs	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d816      	bhi.n	80024d8 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <nRF24_ReadPayload+0x60>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fcd7 	bl	8001e64 <nRF24_ReadReg>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	2061      	movs	r0, #97	; 0x61
 80024d0:	f7ff fd2e 	bl	8001f30 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	e003      	b.n	80024e0 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80024de:	23ff      	movs	r3, #255	; 0xff
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	08008d4c 	.word	0x08008d4c

080024ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_MspInit+0x5c>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_MspInit+0x5c>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6193      	str	r3, [r2, #24]
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_MspInit+0x5c>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_MspInit+0x5c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_MspInit+0x5c>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_MspInit+0x5c>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_MspInit+0x60>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_MspInit+0x60>)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000

08002550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_ADC_MspInit+0x6c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d121      	bne.n	80025b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_ADC_MspInit+0x70>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a4:	2303      	movs	r3, #3
 80025a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_ADC_MspInit+0x74>)
 80025b0:	f001 facc 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40012400 	.word	0x40012400
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800

080025c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <HAL_I2C_MspInit+0x74>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d124      	bne.n	8002632 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_I2C_MspInit+0x78>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_I2C_MspInit+0x78>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_I2C_MspInit+0x78>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002600:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002606:	2312      	movs	r3, #18
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4619      	mov	r1, r3
 8002614:	480b      	ldr	r0, [pc, #44]	; (8002644 <HAL_I2C_MspInit+0x7c>)
 8002616:	f001 fa99 	bl	8003b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_I2C_MspInit+0x78>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_I2C_MspInit+0x78>)
 8002620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_I2C_MspInit+0x78>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40005800 	.word	0x40005800
 8002640:	40021000 	.word	0x40021000
 8002644:	40010c00 	.word	0x40010c00

08002648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_SPI_MspInit+0x8c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d131      	bne.n	80026cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 800266e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_SPI_MspInit+0x90>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002698:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800269c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	4619      	mov	r1, r3
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <HAL_SPI_MspInit+0x94>)
 80026ae:	f001 fa4d 	bl	8003b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	4619      	mov	r1, r3
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_SPI_MspInit+0x94>)
 80026c8:	f001 fa40 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026cc:	bf00      	nop
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40003800 	.word	0x40003800
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010c00 	.word	0x40010c00

080026e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_Base_MspInit+0x68>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10c      	bne.n	800270c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800270a:	e018      	b.n	800273e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d113      	bne.n	800273e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_TIM_Base_MspInit+0x6c>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2101      	movs	r1, #1
 8002732:	201c      	movs	r0, #28
 8002734:	f001 f9d3 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002738:	201c      	movs	r0, #28
 800273a:	f001 f9ec 	bl	8003b16 <HAL_NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_TIM_MspPostInit+0x5c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d118      	bne.n	80027a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_TIM_MspPostInit+0x60>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_TIM_MspPostInit+0x60>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_TIM_MspPostInit+0x60>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002788:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800278c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2302      	movs	r3, #2
 8002794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_TIM_MspPostInit+0x64>)
 800279e:	f001 f9d5 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010800 	.word	0x40010800

080027b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <HAL_UART_MspInit+0xa4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d13d      	bne.n	8002854 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_UART_MspInit+0xa8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002808:	2340      	movs	r3, #64	; 0x40
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4812      	ldr	r0, [pc, #72]	; (8002864 <HAL_UART_MspInit+0xac>)
 800281c:	f001 f996 	bl	8003b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	480c      	ldr	r0, [pc, #48]	; (8002864 <HAL_UART_MspInit+0xac>)
 8002834:	f001 f98a 	bl	8003b4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_UART_MspInit+0xb0>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	4a06      	ldr	r2, [pc, #24]	; (8002868 <HAL_UART_MspInit+0xb0>)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40013800 	.word	0x40013800
 8002860:	40021000 	.word	0x40021000
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40010000 	.word	0x40010000

0800286c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <HardFault_Handler+0x4>

0800287e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <MemManage_Handler+0x4>

08002884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <BusFault_Handler+0x4>

0800288a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <UsageFault_Handler+0x4>

08002890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b8:	f000 fb50 	bl	8002f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028c4:	4899      	ldr	r0, [pc, #612]	; (8002b2c <TIM2_IRQHandler+0x26c>)
 80028c6:	f003 f8e5 	bl	8005a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d0:	4897      	ldr	r0, [pc, #604]	; (8002b30 <TIM2_IRQHandler+0x270>)
 80028d2:	f001 fa95 	bl	8003e00 <HAL_GPIO_WritePin>

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 80028d6:	210a      	movs	r1, #10
 80028d8:	4896      	ldr	r0, [pc, #600]	; (8002b34 <TIM2_IRQHandler+0x274>)
 80028da:	f000 fd03 	bl	80032e4 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 80028de:	4895      	ldr	r0, [pc, #596]	; (8002b34 <TIM2_IRQHandler+0x274>)
 80028e0:	f000 fdfa 	bl	80034d8 <HAL_ADC_GetValue>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f984 	bl	8000bf4 <__aeabi_ui2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4992      	ldr	r1, [pc, #584]	; (8002b38 <TIM2_IRQHandler+0x278>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f9d7 	bl	8000ca4 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fb23 	bl	8000f44 <__aeabi_f2uiz>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b8e      	ldr	r3, [pc, #568]	; (8002b3c <TIM2_IRQHandler+0x27c>)
 8002902:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8002904:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <TIM2_IRQHandler+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8c      	ldr	r2, [pc, #560]	; (8002b3c <TIM2_IRQHandler+0x27c>)
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	498d      	ldr	r1, [pc, #564]	; (8002b44 <TIM2_IRQHandler+0x284>)
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <TIM2_IRQHandler+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4a89      	ldr	r2, [pc, #548]	; (8002b40 <TIM2_IRQHandler+0x280>)
 800291a:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 800291c:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <TIM2_IRQHandler+0x280>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b31      	cmp	r3, #49	; 0x31
 8002922:	d902      	bls.n	800292a <TIM2_IRQHandler+0x6a>
 8002924:	4b86      	ldr	r3, [pc, #536]	; (8002b40 <TIM2_IRQHandler+0x280>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 800292a:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <TIM2_IRQHandler+0x288>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8002930:	4b86      	ldr	r3, [pc, #536]	; (8002b4c <TIM2_IRQHandler+0x28c>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e00e      	b.n	8002956 <TIM2_IRQHandler+0x96>
  {
	  BattmVSUM+=BAttmVhist[i];
 8002938:	4b84      	ldr	r3, [pc, #528]	; (8002b4c <TIM2_IRQHandler+0x28c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a81      	ldr	r2, [pc, #516]	; (8002b44 <TIM2_IRQHandler+0x284>)
 800293e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002942:	4b81      	ldr	r3, [pc, #516]	; (8002b48 <TIM2_IRQHandler+0x288>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a7f      	ldr	r2, [pc, #508]	; (8002b48 <TIM2_IRQHandler+0x288>)
 800294a:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 800294c:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <TIM2_IRQHandler+0x28c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	4a7e      	ldr	r2, [pc, #504]	; (8002b4c <TIM2_IRQHandler+0x28c>)
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <TIM2_IRQHandler+0x28c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b31      	cmp	r3, #49	; 0x31
 800295c:	d9ec      	bls.n	8002938 <TIM2_IRQHandler+0x78>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 800295e:	4b7a      	ldr	r3, [pc, #488]	; (8002b48 <TIM2_IRQHandler+0x288>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <TIM2_IRQHandler+0x290>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	4a7a      	ldr	r2, [pc, #488]	; (8002b54 <TIM2_IRQHandler+0x294>)
 800296c:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------


  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 800296e:	4b7a      	ldr	r3, [pc, #488]	; (8002b58 <TIM2_IRQHandler+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06f      	beq.n	8002a56 <TIM2_IRQHandler+0x196>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8002976:	f7ff fd46 	bl	8002406 <nRF24_GetStatus_RXFIFO>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d06a      	beq.n	8002a56 <TIM2_IRQHandler+0x196>
  		{
  			watch1++;
 8002980:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <TIM2_IRQHandler+0x29c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	4a75      	ldr	r2, [pc, #468]	; (8002b5c <TIM2_IRQHandler+0x29c>)
 8002988:	6013      	str	r3, [r2, #0]

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 800298a:	4975      	ldr	r1, [pc, #468]	; (8002b60 <TIM2_IRQHandler+0x2a0>)
 800298c:	4875      	ldr	r0, [pc, #468]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 800298e:	f7ff fd7b 	bl	8002488 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8002992:	f7ff fd53 	bl	800243c <nRF24_ClearIRQFlags>

  			Ljoyupdown=nRF24_payloadRX[0];
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b72      	ldr	r3, [pc, #456]	; (8002b68 <TIM2_IRQHandler+0x2a8>)
 800299e:	601a      	str	r2, [r3, #0]
  			Ljoyleftright=nRF24_payloadRX[1];
 80029a0:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <TIM2_IRQHandler+0x2ac>)
 80029a8:	601a      	str	r2, [r3, #0]
  			Djoyupdown=nRF24_payloadRX[2];
 80029aa:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029ac:	789b      	ldrb	r3, [r3, #2]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <TIM2_IRQHandler+0x2b0>)
 80029b2:	601a      	str	r2, [r3, #0]
  			Djoyleftright=nRF24_payloadRX[3];
 80029b4:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029b6:	78db      	ldrb	r3, [r3, #3]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <TIM2_IRQHandler+0x2b4>)
 80029bc:	601a      	str	r2, [r3, #0]
  			potenc1=nRF24_payloadRX[4];
 80029be:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <TIM2_IRQHandler+0x2b8>)
 80029c6:	601a      	str	r2, [r3, #0]
  			potenc2=nRF24_payloadRX[5];
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <TIM2_IRQHandler+0x2bc>)
 80029d0:	601a      	str	r2, [r3, #0]

  			togg1=nRF24_payloadRX[6]>>7;
 80029d2:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029d4:	799b      	ldrb	r3, [r3, #6]
 80029d6:	09db      	lsrs	r3, r3, #7
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <TIM2_IRQHandler+0x2c0>)
 80029de:	601a      	str	r2, [r3, #0]
  			togg2=(nRF24_payloadRX[6] & 64 )>>6;
 80029e0:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029e2:	799b      	ldrb	r3, [r3, #6]
 80029e4:	119b      	asrs	r3, r3, #6
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <TIM2_IRQHandler+0x2c4>)
 80029ec:	6013      	str	r3, [r2, #0]
  			butt1=(nRF24_payloadRX[6] & 32 )>>5;
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029f0:	799b      	ldrb	r3, [r3, #6]
 80029f2:	115b      	asrs	r3, r3, #5
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <TIM2_IRQHandler+0x2c8>)
 80029fa:	6013      	str	r3, [r2, #0]
  			butt2=(nRF24_payloadRX[6] & 16 )>>4;
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 80029fe:	799b      	ldrb	r3, [r3, #6]
 8002a00:	111b      	asrs	r3, r3, #4
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	4a61      	ldr	r2, [pc, #388]	; (8002b8c <TIM2_IRQHandler+0x2cc>)
 8002a08:	6013      	str	r3, [r2, #0]
  			butt3=(nRF24_payloadRX[6] & 8 )>>3;
 8002a0a:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 8002a0c:	799b      	ldrb	r3, [r3, #6]
 8002a0e:	10db      	asrs	r3, r3, #3
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <TIM2_IRQHandler+0x2d0>)
 8002a16:	6013      	str	r3, [r2, #0]
  			butt4=(nRF24_payloadRX[6] & 4 )>>2;
 8002a18:	4b52      	ldr	r3, [pc, #328]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 8002a1a:	799b      	ldrb	r3, [r3, #6]
 8002a1c:	109b      	asrs	r3, r3, #2
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <TIM2_IRQHandler+0x2d4>)
 8002a24:	6013      	str	r3, [r2, #0]
  			buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 8002a28:	799b      	ldrb	r3, [r3, #6]
 8002a2a:	105b      	asrs	r3, r3, #1
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	4a59      	ldr	r2, [pc, #356]	; (8002b98 <TIM2_IRQHandler+0x2d8>)
 8002a32:	6013      	str	r3, [r2, #0]
  			buttD=(nRF24_payloadRX[6] & 1 );
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <TIM2_IRQHandler+0x2a4>)
 8002a36:	799b      	ldrb	r3, [r3, #6]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <TIM2_IRQHandler+0x2dc>)
 8002a3e:	6013      	str	r3, [r2, #0]

  			SendBackFlag=1;
 8002a40:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <TIM2_IRQHandler+0x2e0>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8002a46:	4b44      	ldr	r3, [pc, #272]	; (8002b58 <TIM2_IRQHandler+0x298>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8002a4c:	4b55      	ldr	r3, [pc, #340]	; (8002ba4 <TIM2_IRQHandler+0x2e4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a54      	ldr	r2, [pc, #336]	; (8002ba4 <TIM2_IRQHandler+0x2e4>)
 8002a54:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8002a56:	4b52      	ldr	r3, [pc, #328]	; (8002ba0 <TIM2_IRQHandler+0x2e0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d04b      	beq.n	8002af6 <TIM2_IRQHandler+0x236>
  {
    	BackTimer++;
 8002a5e:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <TIM2_IRQHandler+0x2e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a50      	ldr	r2, [pc, #320]	; (8002ba8 <TIM2_IRQHandler+0x2e8>)
 8002a66:	6013      	str	r3, [r2, #0]

      	switch(BackTimer)
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <TIM2_IRQHandler+0x2e8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d841      	bhi.n	8002af6 <TIM2_IRQHandler+0x236>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <TIM2_IRQHandler+0x1b8>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002af7 	.word	0x08002af7
 8002a80:	08002af7 	.word	0x08002af7
 8002a84:	08002aa5 	.word	0x08002aa5
 8002a88:	08002acf 	.word	0x08002acf
 8002a8c:	08002ae3 	.word	0x08002ae3
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8002a90:	2200      	movs	r2, #0
 8002a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a96:	4826      	ldr	r0, [pc, #152]	; (8002b30 <TIM2_IRQHandler+0x270>)
 8002a98:	f001 f9b2 	bl	8003e00 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff fb3e 	bl	800211e <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8002aa2:	e028      	b.n	8002af6 <TIM2_IRQHandler+0x236>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <TIM2_IRQHandler+0x294>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b40      	ldr	r3, [pc, #256]	; (8002bac <TIM2_IRQHandler+0x2ec>)
 8002aac:	701a      	strb	r2, [r3, #0]
  	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <TIM2_IRQHandler+0x294>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <TIM2_IRQHandler+0x2ec>)
 8002ab8:	705a      	strb	r2, [r3, #1]

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 2);
 8002aba:	2102      	movs	r1, #2
 8002abc:	483b      	ldr	r0, [pc, #236]	; (8002bac <TIM2_IRQHandler+0x2ec>)
 8002abe:	f7ff f95b 	bl	8001d78 <nRF24_TransmitPacket>
  	 	 			watch2++;
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <TIM2_IRQHandler+0x2f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <TIM2_IRQHandler+0x2f0>)
 8002aca:	6013      	str	r3, [r2, #0]
  	 	 	 	 }break;
 8002acc:	e013      	b.n	8002af6 <TIM2_IRQHandler+0x236>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff fb25 	bl	800211e <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ada:	4815      	ldr	r0, [pc, #84]	; (8002b30 <TIM2_IRQHandler+0x270>)
 8002adc:	f001 f990 	bl	8003e00 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8002ae0:	e009      	b.n	8002af6 <TIM2_IRQHandler+0x236>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <TIM2_IRQHandler+0x298>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <TIM2_IRQHandler+0x2e0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <TIM2_IRQHandler+0x2e8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

  				}break;
 8002af4:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <TIM2_IRQHandler+0x2f4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <TIM2_IRQHandler+0x2f4>)
 8002afe:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <TIM2_IRQHandler+0x2f4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b08:	d165      	bne.n	8002bd6 <TIM2_IRQHandler+0x316>
  {
    		MSGprerSecond=MSGcount;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <TIM2_IRQHandler+0x2e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <TIM2_IRQHandler+0x2f8>)
 8002b10:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <TIM2_IRQHandler+0x2e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d854      	bhi.n	8002bc4 <TIM2_IRQHandler+0x304>
    		{
    			MSGLowCount++;
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <TIM2_IRQHandler+0x2fc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <TIM2_IRQHandler+0x2fc>)
 8002b22:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <TIM2_IRQHandler+0x300>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e04e      	b.n	8002bca <TIM2_IRQHandler+0x30a>
 8002b2c:	20000488 	.word	0x20000488
 8002b30:	40010c00 	.word	0x40010c00
 8002b34:	200003ac 	.word	0x200003ac
 8002b38:	4090ac29 	.word	0x4090ac29
 8002b3c:	200005e4 	.word	0x200005e4
 8002b40:	20000210 	.word	0x20000210
 8002b44:	20000504 	.word	0x20000504
 8002b48:	20000208 	.word	0x20000208
 8002b4c:	20000200 	.word	0x20000200
 8002b50:	51eb851f 	.word	0x51eb851f
 8002b54:	2000020c 	.word	0x2000020c
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	2000031c 	.word	0x2000031c
 8002b60:	200001fc 	.word	0x200001fc
 8002b64:	200002e4 	.word	0x200002e4
 8002b68:	20000470 	.word	0x20000470
 8002b6c:	200003dc 	.word	0x200003dc
 8002b70:	200004dc 	.word	0x200004dc
 8002b74:	20000228 	.word	0x20000228
 8002b78:	20000484 	.word	0x20000484
 8002b7c:	200004e0 	.word	0x200004e0
 8002b80:	20000428 	.word	0x20000428
 8002b84:	200004e8 	.word	0x200004e8
 8002b88:	2000047c 	.word	0x2000047c
 8002b8c:	200004e4 	.word	0x200004e4
 8002b90:	20000424 	.word	0x20000424
 8002b94:	2000022c 	.word	0x2000022c
 8002b98:	2000028c 	.word	0x2000028c
 8002b9c:	20000480 	.word	0x20000480
 8002ba0:	20000214 	.word	0x20000214
 8002ba4:	20000500 	.word	0x20000500
 8002ba8:	20000218 	.word	0x20000218
 8002bac:	2000038c 	.word	0x2000038c
 8002bb0:	20000308 	.word	0x20000308
 8002bb4:	200004f4 	.word	0x200004f4
 8002bb8:	200005d0 	.word	0x200005d0
 8002bbc:	200005cc 	.word	0x200005cc
 8002bc0:	200005e0 	.word	0x200005e0
    		}
    		 else  ConnectWeakFlag=0;
 8002bc4:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <TIM2_IRQHandler+0x4a8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002bca:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <TIM2_IRQHandler+0x4ac>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8002bd0:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <TIM2_IRQHandler+0x4b0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------

  MPU6050_accread(&hi2c2,&mpu6050DataStr);
 8002bd6:	4967      	ldr	r1, [pc, #412]	; (8002d74 <TIM2_IRQHandler+0x4b4>)
 8002bd8:	4867      	ldr	r0, [pc, #412]	; (8002d78 <TIM2_IRQHandler+0x4b8>)
 8002bda:	f7fe fa37 	bl	800104c <MPU6050_accread>
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8002bde:	4965      	ldr	r1, [pc, #404]	; (8002d74 <TIM2_IRQHandler+0x4b4>)
 8002be0:	4865      	ldr	r0, [pc, #404]	; (8002d78 <TIM2_IRQHandler+0x4b8>)
 8002be2:	f7fe fa65 	bl	80010b0 <MPU6050_gyroread>

  GyroXcal=mpu6050DataStr.Gyroscope_X - GyroXOff;
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <TIM2_IRQHandler+0x4b4>)
 8002be8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <TIM2_IRQHandler+0x4bc>)
 8002bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	b21a      	sxth	r2, r3
 8002bfc:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <TIM2_IRQHandler+0x4c0>)
 8002bfe:	801a      	strh	r2, [r3, #0]
  GyroYcal=mpu6050DataStr.Gyroscope_Y - GyroYOff;
 8002c00:	4b5c      	ldr	r3, [pc, #368]	; (8002d74 <TIM2_IRQHandler+0x4b4>)
 8002c02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <TIM2_IRQHandler+0x4c4>)
 8002c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	4b5c      	ldr	r3, [pc, #368]	; (8002d88 <TIM2_IRQHandler+0x4c8>)
 8002c18:	801a      	strh	r2, [r3, #0]
  GyroZcal=mpu6050DataStr.Gyroscope_Z - GyroZOff;
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <TIM2_IRQHandler+0x4b4>)
 8002c1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b5a      	ldr	r3, [pc, #360]	; (8002d8c <TIM2_IRQHandler+0x4cc>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <TIM2_IRQHandler+0x4d0>)
 8002c32:	801a      	strh	r2, [r3, #0]

  AnglePitch+=GyroXcal*GYROFACTOR;
 8002c34:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <TIM2_IRQHandler+0x4c0>)
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd ffde 	bl	8000bfc <__aeabi_i2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4954      	ldr	r1, [pc, #336]	; (8002d94 <TIM2_IRQHandler+0x4d4>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe f82d 	bl	8000ca4 <__aeabi_fmul>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b52      	ldr	r3, [pc, #328]	; (8002d98 <TIM2_IRQHandler+0x4d8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f7fd ff1d 	bl	8000a94 <__addsf3>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <TIM2_IRQHandler+0x4d8>)
 8002c60:	601a      	str	r2, [r3, #0]
  AngleRoll+=GyroYcal*GYROFACTOR;
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <TIM2_IRQHandler+0x4c8>)
 8002c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd ffc7 	bl	8000bfc <__aeabi_i2f>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4948      	ldr	r1, [pc, #288]	; (8002d94 <TIM2_IRQHandler+0x4d4>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f816 	bl	8000ca4 <__aeabi_fmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <TIM2_IRQHandler+0x4dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f7fd ff06 	bl	8000a94 <__addsf3>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <TIM2_IRQHandler+0x4dc>)
 8002c8e:	601a      	str	r2, [r3, #0]

  //-------------------------------------------------------------------

  //testing------------------------------------------------------------
  if(togg1==1 && ConnectWeakFlag==0)MotorStatus=1;
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <TIM2_IRQHandler+0x4e0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <TIM2_IRQHandler+0x3e8>
 8002c98:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <TIM2_IRQHandler+0x4a8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <TIM2_IRQHandler+0x3e8>
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <TIM2_IRQHandler+0x4e4>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <TIM2_IRQHandler+0x3ee>
  else MotorStatus=0;
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <TIM2_IRQHandler+0x4e4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

  if(MotorStatus==0)
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <TIM2_IRQHandler+0x4e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d110      	bne.n	8002cd8 <TIM2_IRQHandler+0x418>
  {
	  PWM_Mot1=1000;
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <TIM2_IRQHandler+0x4e8>)
 8002cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cbc:	601a      	str	r2, [r3, #0]
	  PWM_Mot2=1000;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <TIM2_IRQHandler+0x4ec>)
 8002cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cc4:	601a      	str	r2, [r3, #0]
	  PWM_Mot3=1000;
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <TIM2_IRQHandler+0x4f0>)
 8002cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ccc:	601a      	str	r2, [r3, #0]
	  PWM_Mot4=1000;
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <TIM2_IRQHandler+0x4f4>)
 8002cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e02b      	b.n	8002d30 <TIM2_IRQHandler+0x470>
  }
  else if(MotorStatus==1)
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <TIM2_IRQHandler+0x4e4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d127      	bne.n	8002d30 <TIM2_IRQHandler+0x470>
  {
	  PWM_Mot1=1000 + potenc1*10;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <TIM2_IRQHandler+0x4f8>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <TIM2_IRQHandler+0x4e8>)
 8002cf2:	6013      	str	r3, [r2, #0]
	  PWM_Mot2=1000 + potenc1*10;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <TIM2_IRQHandler+0x4f8>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM2_IRQHandler+0x4ec>)
 8002d06:	6013      	str	r3, [r2, #0]
	  PWM_Mot3=1000 + potenc1*10;
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <TIM2_IRQHandler+0x4f8>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <TIM2_IRQHandler+0x4f0>)
 8002d1a:	6013      	str	r3, [r2, #0]
	  PWM_Mot4=1000 + potenc1*10;
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <TIM2_IRQHandler+0x4f8>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM2_IRQHandler+0x4f4>)
 8002d2e:	6013      	str	r3, [r2, #0]
  }//-------------------------------------------------------------------

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <TIM2_IRQHandler+0x4fc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <TIM2_IRQHandler+0x4e8>)
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <TIM2_IRQHandler+0x4fc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <TIM2_IRQHandler+0x4ec>)
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <TIM2_IRQHandler+0x4fc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <TIM2_IRQHandler+0x4f0>)
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <TIM2_IRQHandler+0x4fc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <TIM2_IRQHandler+0x4f4>)
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d5e:	4818      	ldr	r0, [pc, #96]	; (8002dc0 <TIM2_IRQHandler+0x500>)
 8002d60:	f001 f84e 	bl	8003e00 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200005e0 	.word	0x200005e0
 8002d6c:	20000500 	.word	0x20000500
 8002d70:	200004f4 	.word	0x200004f4
 8002d74:	200004c8 	.word	0x200004c8
 8002d78:	20000290 	.word	0x20000290
 8002d7c:	20000304 	.word	0x20000304
 8002d80:	20000230 	.word	0x20000230
 8002d84:	20000384 	.word	0x20000384
 8002d88:	20000318 	.word	0x20000318
 8002d8c:	20000232 	.word	0x20000232
 8002d90:	20000420 	.word	0x20000420
 8002d94:	38001203 	.word	0x38001203
 8002d98:	200005d4 	.word	0x200005d4
 8002d9c:	200005e8 	.word	0x200005e8
 8002da0:	20000428 	.word	0x20000428
 8002da4:	20000204 	.word	0x20000204
 8002da8:	200005dc 	.word	0x200005dc
 8002dac:	200004fc 	.word	0x200004fc
 8002db0:	200004f8 	.word	0x200004f8
 8002db4:	200005d8 	.word	0x200005d8
 8002db8:	20000484 	.word	0x20000484
 8002dbc:	20000430 	.word	0x20000430
 8002dc0:	40010c00 	.word	0x40010c00

08002dc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <_sbrk+0x50>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x16>
		heap_end = &end;
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <_sbrk+0x50>)
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <_sbrk+0x54>)
 8002dd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <_sbrk+0x50>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <_sbrk+0x50>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	466a      	mov	r2, sp
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d907      	bls.n	8002dfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dee:	f003 fe59 	bl	8006aa4 <__errno>
 8002df2:	4602      	mov	r2, r0
 8002df4:	230c      	movs	r3, #12
 8002df6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfc:	e006      	b.n	8002e0c <_sbrk+0x48>
	}

	heap_end += incr;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <_sbrk+0x50>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <_sbrk+0x50>)
 8002e08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000021c 	.word	0x2000021c
 8002e18:	200005f8 	.word	0x200005f8

08002e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <SystemInit+0x5c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <SystemInit+0x5c>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <SystemInit+0x5c>)
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4911      	ldr	r1, [pc, #68]	; (8002e78 <SystemInit+0x5c>)
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <SystemInit+0x60>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <SystemInit+0x5c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <SystemInit+0x5c>)
 8002e3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <SystemInit+0x5c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SystemInit+0x5c>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <SystemInit+0x5c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <SystemInit+0x5c>)
 8002e5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SystemInit+0x5c>)
 8002e62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SystemInit+0x64>)
 8002e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	f8ff0000 	.word	0xf8ff0000
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e86:	e003      	b.n	8002e90 <LoopCopyDataInit>

08002e88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e8e:	3104      	adds	r1, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e90:	480a      	ldr	r0, [pc, #40]	; (8002ebc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e98:	d3f6      	bcc.n	8002e88 <CopyDataInit>
  ldr r2, =_sbss
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e9c:	e002      	b.n	8002ea4 <LoopFillZerobss>

08002e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ea0:	f842 3b04 	str.w	r3, [r2], #4

08002ea4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ea6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ea8:	d3f9      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eaa:	f7ff ffb7 	bl	8002e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eae:	f003 fdff 	bl	8006ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eb2:	f7fe f963 	bl	800117c <main>
  bx lr
 8002eb6:	4770      	bx	lr
  ldr r3, =_sidata
 8002eb8:	08008fd8 	.word	0x08008fd8
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ec0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002ec4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002ec8:	200005f4 	.word	0x200005f4

08002ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC1_2_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_Init+0x28>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <HAL_Init+0x28>)
 8002eda:	f043 0310 	orr.w	r3, r3, #16
 8002ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee0:	2003      	movs	r0, #3
 8002ee2:	f000 fdf1 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f000 f808 	bl	8002efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eec:	f7ff fafe 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000

08002efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_InitTick+0x54>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x58>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fe09 	bl	8003b32 <HAL_SYSTICK_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00e      	b.n	8002f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d80a      	bhi.n	8002f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f30:	2200      	movs	r2, #0
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f38:	f000 fdd1 	bl	8003ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f3c:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <HAL_InitTick+0x5c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000004 	.word	0x20000004
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	20000008 	.word	0x20000008

08002f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_IncTick+0x1c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_IncTick+0x20>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <HAL_IncTick+0x20>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	200005ec 	.word	0x200005ec

08002f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <HAL_GetTick+0x10>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	200005ec 	.word	0x200005ec

08002f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff fff0 	bl	8002f80 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fac:	d005      	beq.n	8002fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_Delay+0x40>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fba:	bf00      	nop
 8002fbc:	f7ff ffe0 	bl	8002f80 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d8f7      	bhi.n	8002fbc <HAL_Delay+0x28>
  {
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0be      	b.n	8003178 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fa9a 	bl	8002550 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fbb1 	bl	8003784 <ADC_ConversionStop_Disable>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 8099 	bne.w	8003166 <HAL_ADC_Init+0x18e>
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 8095 	bne.w	8003166 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003044:	f023 0302 	bic.w	r3, r3, #2
 8003048:	f043 0202 	orr.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003058:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7b1b      	ldrb	r3, [r3, #12]
 800305e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003060:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003070:	d003      	beq.n	800307a <HAL_ADC_Init+0xa2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_ADC_Init+0xa8>
 800307a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307e:	e000      	b.n	8003082 <HAL_ADC_Init+0xaa>
 8003080:	2300      	movs	r3, #0
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7d1b      	ldrb	r3, [r3, #20]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d119      	bne.n	80030c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	3b01      	subs	r3, #1
 800309e:	035a      	lsls	r2, r3, #13
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e00b      	b.n	80030c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_ADC_Init+0x1a8>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f4:	d003      	beq.n	80030fe <HAL_ADC_Init+0x126>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d104      	bne.n	8003108 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	3b01      	subs	r3, #1
 8003104:	051b      	lsls	r3, r3, #20
 8003106:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	430a      	orrs	r2, r1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_ADC_Init+0x1ac>)
 8003124:	4013      	ands	r3, r2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d10b      	bne.n	8003144 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003142:	e018      	b.n	8003176 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f023 0312 	bic.w	r3, r3, #18
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003164:	e007      	b.n	8003176 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	ffe1f7fd 	.word	0xffe1f7fd
 8003184:	ff1f0efe 	.word	0xff1f0efe

08003188 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Start+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e098      	b.n	80032d4 <HAL_ADC_Start+0x14c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa98 	bl	80036e0 <ADC_Enable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8087 	bne.w	80032ca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a41      	ldr	r2, [pc, #260]	; (80032dc <HAL_ADC_Start+0x154>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d105      	bne.n	80031e6 <HAL_ADC_Start+0x5e>
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_ADC_Start+0x158>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d115      	bne.n	8003212 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d026      	beq.n	800324e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003210:	e01d      	b.n	800324e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_ADC_Start+0x158>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Start+0xaa>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_ADC_Start+0x154>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10d      	bne.n	800324e <HAL_ADC_Start+0xc6>
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_ADC_Start+0x158>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003246:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f023 0206 	bic.w	r2, r3, #6
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
 8003266:	e002      	b.n	800326e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0202 	mvn.w	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800328a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800328e:	d113      	bne.n	80032b8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003294:	4a11      	ldr	r2, [pc, #68]	; (80032dc <HAL_ADC_Start+0x154>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_ADC_Start+0x158>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	e00c      	b.n	80032d2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	e003      	b.n	80032d2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40012800 	.word	0x40012800
 80032e0:	40012400 	.word	0x40012400

080032e4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80032fa:	f7ff fe41 	bl	8002f80 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0c8      	b.n	80034b8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d12a      	bne.n	800338a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d123      	bne.n	800338a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003342:	e01a      	b.n	800337a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334a:	d016      	beq.n	800337a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_ADC_PollForConversion+0x7e>
 8003352:	f7ff fe15 	bl	8002f80 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d20b      	bcs.n	800337a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e09e      	b.n	80034b8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0dd      	beq.n	8003344 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003388:	e06c      	b.n	8003464 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_ADC_PollForConversion+0x1dc>)
 800338c:	681c      	ldr	r4, [r3, #0]
 800338e:	2002      	movs	r0, #2
 8003390:	f002 f9ae 	bl	80056f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003394:	4603      	mov	r3, r0
 8003396:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6919      	ldr	r1, [r3, #16]
 80033a0:	4b48      	ldr	r3, [pc, #288]	; (80034c4 <HAL_ADC_PollForConversion+0x1e0>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d118      	bne.n	80033da <HAL_ADC_PollForConversion+0xf6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_ADC_PollForConversion+0x1e4>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d111      	bne.n	80033da <HAL_ADC_PollForConversion+0xf6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6919      	ldr	r1, [r3, #16]
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_ADC_PollForConversion+0x1e8>)
 80033be:	400b      	ands	r3, r1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d108      	bne.n	80033d6 <HAL_ADC_PollForConversion+0xf2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_ADC_PollForConversion+0x1ec>)
 80033cc:	400b      	ands	r3, r1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_PollForConversion+0xf2>
 80033d2:	2314      	movs	r3, #20
 80033d4:	e020      	b.n	8003418 <HAL_ADC_PollForConversion+0x134>
 80033d6:	2329      	movs	r3, #41	; 0x29
 80033d8:	e01e      	b.n	8003418 <HAL_ADC_PollForConversion+0x134>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6919      	ldr	r1, [r3, #16]
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <HAL_ADC_PollForConversion+0x1e8>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_ADC_PollForConversion+0x112>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68d9      	ldr	r1, [r3, #12]
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_ADC_PollForConversion+0x1ec>)
 80033f0:	400b      	ands	r3, r1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_ADC_PollForConversion+0x12e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6919      	ldr	r1, [r3, #16]
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_ADC_PollForConversion+0x1f0>)
 80033fe:	400b      	ands	r3, r1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <HAL_ADC_PollForConversion+0x132>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_ADC_PollForConversion+0x1f0>)
 800340c:	400b      	ands	r3, r1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_PollForConversion+0x132>
 8003412:	2354      	movs	r3, #84	; 0x54
 8003414:	e000      	b.n	8003418 <HAL_ADC_PollForConversion+0x134>
 8003416:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800341e:	e01d      	b.n	800345c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003426:	d016      	beq.n	8003456 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_ADC_PollForConversion+0x15a>
 800342e:	f7ff fda7 	bl	8002f80 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20b      	bcs.n	8003456 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e030      	b.n	80034b8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8dd      	bhi.n	8003420 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0212 	mvn.w	r2, #18
 800346c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003484:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003488:	d115      	bne.n	80034b6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800348e:	2b00      	cmp	r3, #0
 8003490:	d111      	bne.n	80034b6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	20000004 	.word	0x20000004
 80034c4:	24924924 	.word	0x24924924
 80034c8:	00924924 	.word	0x00924924
 80034cc:	12492492 	.word	0x12492492
 80034d0:	00492492 	.word	0x00492492
 80034d4:	00249249 	.word	0x00249249

080034d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x20>
 800350c:	2302      	movs	r3, #2
 800350e:	e0dc      	b.n	80036ca <HAL_ADC_ConfigChannel+0x1da>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d81c      	bhi.n	800355a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b05      	subs	r3, #5
 8003532:	221f      	movs	r2, #31
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	4019      	ands	r1, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	3b05      	subs	r3, #5
 800354c:	fa00 f203 	lsl.w	r2, r0, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	; 0x34
 8003558:	e03c      	b.n	80035d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d81c      	bhi.n	800359c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	3b23      	subs	r3, #35	; 0x23
 8003574:	221f      	movs	r2, #31
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	4019      	ands	r1, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	3b23      	subs	r3, #35	; 0x23
 800358e:	fa00 f203 	lsl.w	r2, r0, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
 800359a:	e01b      	b.n	80035d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	3b41      	subs	r3, #65	; 0x41
 80035ae:	221f      	movs	r2, #31
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4019      	ands	r1, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b41      	subs	r3, #65	; 0x41
 80035c8:	fa00 f203 	lsl.w	r2, r0, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d91c      	bls.n	8003616 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68d9      	ldr	r1, [r3, #12]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	3b1e      	subs	r3, #30
 80035ee:	2207      	movs	r2, #7
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	4019      	ands	r1, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6898      	ldr	r0, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	3b1e      	subs	r3, #30
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e019      	b.n	800364a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	2207      	movs	r2, #7
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	4019      	ands	r1, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6898      	ldr	r0, [r3, #8]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	fa00 f203 	lsl.w	r2, r0, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b10      	cmp	r3, #16
 8003650:	d003      	beq.n	800365a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003656:	2b11      	cmp	r3, #17
 8003658:	d132      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d125      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d126      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003680:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b10      	cmp	r3, #16
 8003688:	d11a      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_ADC_ConfigChannel+0x1ec>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9a      	lsrs	r2, r3, #18
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a0:	e002      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x1b2>
 80036ae:	e007      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40012400 	.word	0x40012400
 80036d8:	20000004 	.word	0x20000004
 80036dc:	431bde83 	.word	0x431bde83

080036e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d039      	beq.n	8003772 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <ADC_Enable+0x9c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <ADC_Enable+0xa0>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800371c:	e002      	b.n	8003724 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3b01      	subs	r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f9      	bne.n	800371e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800372a:	f7ff fc29 	bl	8002f80 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003730:	e018      	b.n	8003764 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003732:	f7ff fc25 	bl	8002f80 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d911      	bls.n	8003764 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e007      	b.n	8003774 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d1df      	bne.n	8003732 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000004 	.word	0x20000004
 8003780:	431bde83 	.word	0x431bde83

08003784 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d127      	bne.n	80037ee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ae:	f7ff fbe7 	bl	8002f80 <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037b4:	e014      	b.n	80037e0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037b6:	f7ff fbe3 	bl	8002f80 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d90d      	bls.n	80037e0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f043 0210 	orr.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e007      	b.n	80037f0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d0e3      	beq.n	80037b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_ADCEx_Calibration_Start+0x1e>
 8003812:	2302      	movs	r3, #2
 8003814:	e086      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffb0 	bl	8003784 <ADC_ConversionStop_Disable>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d175      	bne.n	800391a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003836:	f023 0302 	bic.w	r3, r3, #2
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_ADCEx_Calibration_Start+0x134>)
 8003844:	681c      	ldr	r4, [r3, #0]
 8003846:	2002      	movs	r0, #2
 8003848:	f001 ff52 	bl	80056f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800384c:	4603      	mov	r3, r0
 800384e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003852:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003854:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003856:	e002      	b.n	800385e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3b01      	subs	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff3b 	bl	80036e0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0208 	orr.w	r2, r2, #8
 8003878:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800387a:	f7ff fb81 	bl	8002f80 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003880:	e014      	b.n	80038ac <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003882:	f7ff fb7d 	bl	8002f80 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b0a      	cmp	r3, #10
 800388e:	d90d      	bls.n	80038ac <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f023 0312 	bic.w	r3, r3, #18
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e03b      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e3      	bne.n	8003882 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0204 	orr.w	r2, r2, #4
 80038c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80038ca:	f7ff fb59 	bl	8002f80 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80038d0:	e014      	b.n	80038fc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80038d2:	f7ff fb55 	bl	8002f80 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b0a      	cmp	r3, #10
 80038de:	d90d      	bls.n	80038fc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f023 0312 	bic.w	r3, r3, #18
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e013      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e3      	bne.n	80038d2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	20000004 	.word	0x20000004

08003930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800395c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	60d3      	str	r3, [r2, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <__NVIC_GetPriorityGrouping+0x18>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 0307 	and.w	r3, r3, #7
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db0b      	blt.n	80039be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4906      	ldr	r1, [pc, #24]	; (80039c8 <__NVIC_EnableIRQ+0x34>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2001      	movs	r0, #1
 80039b6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100

080039cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	db0a      	blt.n	80039f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	490c      	ldr	r1, [pc, #48]	; (8003a18 <__NVIC_SetPriority+0x4c>)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	440b      	add	r3, r1
 80039f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f4:	e00a      	b.n	8003a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	4908      	ldr	r1, [pc, #32]	; (8003a1c <__NVIC_SetPriority+0x50>)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	3b04      	subs	r3, #4
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	440b      	add	r3, r1
 8003a0a:	761a      	strb	r2, [r3, #24]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f1c3 0307 	rsb	r3, r3, #7
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	bf28      	it	cs
 8003a3e:	2304      	movcs	r3, #4
 8003a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d902      	bls.n	8003a50 <NVIC_EncodePriority+0x30>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3b03      	subs	r3, #3
 8003a4e:	e000      	b.n	8003a52 <NVIC_EncodePriority+0x32>
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	401a      	ands	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	43d9      	mvns	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	4313      	orrs	r3, r2
         );
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d301      	bcc.n	8003a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <SysTick_Config+0x40>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aa8:	f7ff ff90 	bl	80039cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <SysTick_Config+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <SysTick_Config+0x40>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff2d 	bl	8003930 <__NVIC_SetPriorityGrouping>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af0:	f7ff ff42 	bl	8003978 <__NVIC_GetPriorityGrouping>
 8003af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7ff ff90 	bl	8003a20 <NVIC_EncodePriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff5f 	bl	80039cc <__NVIC_SetPriority>
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff35 	bl	8003994 <__NVIC_EnableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffa2 	bl	8003a84 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b08b      	sub	sp, #44	; 0x2c
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5e:	e127      	b.n	8003db0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b60:	2201      	movs	r2, #1
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f040 8116 	bne.w	8003daa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d034      	beq.n	8003bf0 <HAL_GPIO_Init+0xa4>
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d80d      	bhi.n	8003ba6 <HAL_GPIO_Init+0x5a>
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d02b      	beq.n	8003be6 <HAL_GPIO_Init+0x9a>
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d804      	bhi.n	8003b9c <HAL_GPIO_Init+0x50>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d031      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d01c      	beq.n	8003bd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b9a:	e048      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d043      	beq.n	8003c28 <HAL_GPIO_Init+0xdc>
 8003ba0:	2b11      	cmp	r3, #17
 8003ba2:	d01b      	beq.n	8003bdc <HAL_GPIO_Init+0x90>
          break;
 8003ba4:	e043      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ba6:	4a89      	ldr	r2, [pc, #548]	; (8003dcc <HAL_GPIO_Init+0x280>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d026      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
 8003bac:	4a87      	ldr	r2, [pc, #540]	; (8003dcc <HAL_GPIO_Init+0x280>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d806      	bhi.n	8003bc0 <HAL_GPIO_Init+0x74>
 8003bb2:	4a87      	ldr	r2, [pc, #540]	; (8003dd0 <HAL_GPIO_Init+0x284>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d020      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
 8003bb8:	4a86      	ldr	r2, [pc, #536]	; (8003dd4 <HAL_GPIO_Init+0x288>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01d      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
          break;
 8003bbe:	e036      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bc0:	4a85      	ldr	r2, [pc, #532]	; (8003dd8 <HAL_GPIO_Init+0x28c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d019      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
 8003bc6:	4a85      	ldr	r2, [pc, #532]	; (8003ddc <HAL_GPIO_Init+0x290>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d016      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
 8003bcc:	4a84      	ldr	r2, [pc, #528]	; (8003de0 <HAL_GPIO_Init+0x294>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_Init+0xae>
          break;
 8003bd2:	e02c      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	623b      	str	r3, [r7, #32]
          break;
 8003bda:	e028      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	623b      	str	r3, [r7, #32]
          break;
 8003be4:	e023      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	3308      	adds	r3, #8
 8003bec:	623b      	str	r3, [r7, #32]
          break;
 8003bee:	e01e      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	623b      	str	r3, [r7, #32]
          break;
 8003bf8:	e019      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c02:	2304      	movs	r3, #4
 8003c04:	623b      	str	r3, [r7, #32]
          break;
 8003c06:	e012      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c10:	2308      	movs	r3, #8
 8003c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	611a      	str	r2, [r3, #16]
          break;
 8003c1a:	e008      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	615a      	str	r2, [r3, #20]
          break;
 8003c26:	e002      	b.n	8003c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	623b      	str	r3, [r7, #32]
          break;
 8003c2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2bff      	cmp	r3, #255	; 0xff
 8003c32:	d801      	bhi.n	8003c38 <HAL_GPIO_Init+0xec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	e001      	b.n	8003c3c <HAL_GPIO_Init+0xf0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2bff      	cmp	r3, #255	; 0xff
 8003c42:	d802      	bhi.n	8003c4a <HAL_GPIO_Init+0xfe>
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	e002      	b.n	8003c50 <HAL_GPIO_Init+0x104>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	3b08      	subs	r3, #8
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	210f      	movs	r1, #15
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	401a      	ands	r2, r3
 8003c62:	6a39      	ldr	r1, [r7, #32]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8096 	beq.w	8003daa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c7e:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_GPIO_Init+0x298>)
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_GPIO_Init+0x298>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6193      	str	r3, [r2, #24]
 8003c8a:	4b56      	ldr	r3, [pc, #344]	; (8003de4 <HAL_GPIO_Init+0x298>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c96:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <HAL_GPIO_Init+0x29c>)
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4b      	ldr	r2, [pc, #300]	; (8003dec <HAL_GPIO_Init+0x2a0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x19e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_GPIO_Init+0x2a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x19a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a49      	ldr	r2, [pc, #292]	; (8003df4 <HAL_GPIO_Init+0x2a8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x196>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a48      	ldr	r2, [pc, #288]	; (8003df8 <HAL_GPIO_Init+0x2ac>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x192>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x1a0>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x1a0>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x1a0>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x1a0>
 8003cea:	2300      	movs	r3, #0
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cfc:	493a      	ldr	r1, [pc, #232]	; (8003de8 <HAL_GPIO_Init+0x29c>)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4938      	ldr	r1, [pc, #224]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
 8003d22:	e006      	b.n	8003d32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d24:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	4933      	ldr	r1, [pc, #204]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	492e      	ldr	r1, [pc, #184]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
 8003d4a:	e006      	b.n	8003d5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	4929      	ldr	r1, [pc, #164]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4924      	ldr	r1, [pc, #144]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
 8003d72:	e006      	b.n	8003d82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	491f      	ldr	r1, [pc, #124]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d8e:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	491a      	ldr	r1, [pc, #104]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60cb      	str	r3, [r1, #12]
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	4915      	ldr	r1, [pc, #84]	; (8003dfc <HAL_GPIO_Init+0x2b0>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f aed0 	bne.w	8003b60 <HAL_GPIO_Init+0x14>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	372c      	adds	r7, #44	; 0x2c
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	10210000 	.word	0x10210000
 8003dd0:	10110000 	.word	0x10110000
 8003dd4:	10120000 	.word	0x10120000
 8003dd8:	10310000 	.word	0x10310000
 8003ddc:	10320000 	.word	0x10320000
 8003de0:	10220000 	.word	0x10220000
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40010800 	.word	0x40010800
 8003df0:	40010c00 	.word	0x40010c00
 8003df4:	40011000 	.word	0x40011000
 8003df8:	40011400 	.word	0x40011400
 8003dfc:	40010400 	.word	0x40010400

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e10f      	b.n	8004062 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe fbb6 	bl	80025c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e74:	f001 fb40 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8003e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4a7b      	ldr	r2, [pc, #492]	; (800406c <HAL_I2C_Init+0x23c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d807      	bhi.n	8003e94 <HAL_I2C_Init+0x64>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a7a      	ldr	r2, [pc, #488]	; (8004070 <HAL_I2C_Init+0x240>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf94      	ite	ls
 8003e8c:	2301      	movls	r3, #1
 8003e8e:	2300      	movhi	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e006      	b.n	8003ea2 <HAL_I2C_Init+0x72>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a77      	ldr	r2, [pc, #476]	; (8004074 <HAL_I2C_Init+0x244>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bf94      	ite	ls
 8003e9c:	2301      	movls	r3, #1
 8003e9e:	2300      	movhi	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0db      	b.n	8004062 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_I2C_Init+0x248>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0c9b      	lsrs	r3, r3, #18
 8003eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a64      	ldr	r2, [pc, #400]	; (800406c <HAL_I2C_Init+0x23c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d802      	bhi.n	8003ee4 <HAL_I2C_Init+0xb4>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e009      	b.n	8003ef8 <HAL_I2C_Init+0xc8>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	4a63      	ldr	r2, [pc, #396]	; (800407c <HAL_I2C_Init+0x24c>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4956      	ldr	r1, [pc, #344]	; (800406c <HAL_I2C_Init+0x23c>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d80d      	bhi.n	8003f34 <HAL_I2C_Init+0x104>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1e59      	subs	r1, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	bf38      	it	cc
 8003f30:	2304      	movcc	r3, #4
 8003f32:	e04f      	b.n	8003fd4 <HAL_I2C_Init+0x1a4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d111      	bne.n	8003f60 <HAL_I2C_Init+0x130>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e012      	b.n	8003f86 <HAL_I2C_Init+0x156>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1e58      	subs	r0, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	0099      	lsls	r1, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Init+0x15e>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e022      	b.n	8003fd4 <HAL_I2C_Init+0x1a4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10e      	bne.n	8003fb4 <HAL_I2C_Init+0x184>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1e58      	subs	r0, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	440b      	add	r3, r1
 8003fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	e00f      	b.n	8003fd4 <HAL_I2C_Init+0x1a4>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1e58      	subs	r0, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	0099      	lsls	r1, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	6809      	ldr	r1, [r1, #0]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6911      	ldr	r1, [r2, #16]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68d2      	ldr	r2, [r2, #12]
 800400e:	4311      	orrs	r1, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	430b      	orrs	r3, r1
 8004016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	000186a0 	.word	0x000186a0
 8004070:	001e847f 	.word	0x001e847f
 8004074:	003d08ff 	.word	0x003d08ff
 8004078:	431bde83 	.word	0x431bde83
 800407c:	10624dd3 	.word	0x10624dd3

08004080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800409a:	f7fe ff71 	bl	8002f80 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	f040 80d9 	bne.w	8004260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2319      	movs	r3, #25
 80040b4:	2201      	movs	r2, #1
 80040b6:	496d      	ldr	r1, [pc, #436]	; (800426c <HAL_I2C_Mem_Write+0x1ec>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fc6b 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	e0cc      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_I2C_Mem_Write+0x56>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0c5      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d007      	beq.n	80040fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2221      	movs	r2, #33	; 0x21
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a4d      	ldr	r2, [pc, #308]	; (8004270 <HAL_I2C_Mem_Write+0x1f0>)
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413e:	88f8      	ldrh	r0, [r7, #6]
 8004140:	893a      	ldrh	r2, [r7, #8]
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4603      	mov	r3, r0
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fac6 	bl	80046e0 <I2C_RequestMemoryWrite>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d052      	beq.n	8004200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e081      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fcec 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b04      	cmp	r3, #4
 8004174:	d107      	bne.n	8004186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e06b      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d11b      	bne.n	8004200 <HAL_I2C_Mem_Write+0x180>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d017      	beq.n	8004200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1aa      	bne.n	800415e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fcd8 	bl	8004bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2b04      	cmp	r3, #4
 800421e:	d107      	bne.n	8004230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e016      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	00100002 	.word	0x00100002
 8004270:	ffff0000 	.word	0xffff0000

08004274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	; 0x30
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	4608      	mov	r0, r1
 800427e:	4611      	mov	r1, r2
 8004280:	461a      	mov	r2, r3
 8004282:	4603      	mov	r3, r0
 8004284:	817b      	strh	r3, [r7, #10]
 8004286:	460b      	mov	r3, r1
 8004288:	813b      	strh	r3, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800428e:	f7fe fe77 	bl	8002f80 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	f040 8218 	bne.w	80046d2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2319      	movs	r3, #25
 80042a8:	2201      	movs	r2, #1
 80042aa:	4981      	ldr	r1, [pc, #516]	; (80044b0 <HAL_I2C_Mem_Read+0x23c>)
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fb71 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
 80042ba:	e20b      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Mem_Read+0x56>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e204      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d007      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2222      	movs	r2, #34	; 0x22
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a61      	ldr	r2, [pc, #388]	; (80044b4 <HAL_I2C_Mem_Read+0x240>)
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004332:	88f8      	ldrh	r0, [r7, #6]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4603      	mov	r3, r0
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fa56 	bl	80047f4 <I2C_RequestMemoryRead>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1c0      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d113      	bne.n	8004382 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e194      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	2b01      	cmp	r3, #1
 8004388:	d11d      	bne.n	80043c6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800439a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043c2:	b662      	cpsie	i
 80043c4:	e172      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d11d      	bne.n	800440a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043de:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004406:	b662      	cpsie	i
 8004408:	e150      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004430:	e13c      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	2b03      	cmp	r3, #3
 8004438:	f200 80f5 	bhi.w	8004626 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b01      	cmp	r3, #1
 8004442:	d123      	bne.n	800448c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fbfb 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e13d      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800448a:	e10f      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	2b02      	cmp	r3, #2
 8004492:	d150      	bne.n	8004536 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2200      	movs	r2, #0
 800449c:	4906      	ldr	r1, [pc, #24]	; (80044b8 <HAL_I2C_Mem_Read+0x244>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fa78 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e112      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
 80044ae:	bf00      	nop
 80044b0:	00100002 	.word	0x00100002
 80044b4:	ffff0000 	.word	0xffff0000
 80044b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044bc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004500:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004534:	e0ba      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2200      	movs	r2, #0
 800453e:	4967      	ldr	r1, [pc, #412]	; (80046dc <HAL_I2C_Mem_Read+0x468>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fa27 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0c1      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004560:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	2200      	movs	r2, #0
 800459c:	494f      	ldr	r1, [pc, #316]	; (80046dc <HAL_I2C_Mem_Read+0x468>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f9f8 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e092      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045f0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004624:	e042      	b.n	80046ac <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fb0a 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e04c      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d118      	bne.n	80046ac <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f aebe 	bne.w	8004432 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3728      	adds	r7, #40	; 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	00010004 	.word	0x00010004

080046e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	817b      	strh	r3, [r7, #10]
 80046f2:	460b      	mov	r3, r1
 80046f4:	813b      	strh	r3, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2200      	movs	r2, #0
 8004712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f93c 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e05f      	b.n	80047e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	492d      	ldr	r1, [pc, #180]	; (80047f0 <I2C_RequestMemoryWrite+0x110>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f980 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f9ea 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02b      	b.n	80047e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e021      	b.n	80047e4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f9c4 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8aa 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09e      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	494c      	ldr	r1, [pc, #304]	; (8004990 <I2C_RequestMemoryRead+0x19c>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8ee 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e08b      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f958 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06a      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e021      	b.n	8004908 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f932 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d107      	bne.n	80048fa <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e044      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	893b      	ldrh	r3, [r7, #8]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490a:	6a39      	ldr	r1, [r7, #32]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f917 	bl	8004b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e029      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2200      	movs	r2, #0
 800494c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f81f 	bl	8004994 <I2C_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e013      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <I2C_RequestMemoryRead+0x19c>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f863 	bl	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	00010002 	.word	0x00010002

08004994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a4:	e025      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fae7 	bl	8002f80 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e023      	b.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10d      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	e00c      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0b6      	beq.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a50:	e051      	b.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d123      	bne.n	8004aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0204 	orr.w	r2, r3, #4
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e046      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe fa65 	bl	8002f80 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e020      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10c      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e00b      	b.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	43da      	mvns	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d18d      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f8ce 	bl	8004cf0 <I2C_IsAcknowledgeFailed>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e02d      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b64:	d021      	beq.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fe fa0b 	bl	8002f80 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e007      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d1ca      	bne.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f88d 	bl	8004cf0 <I2C_IsAcknowledgeFailed>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be6:	d021      	beq.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fe f9ca 	bl	8002f80 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d1ca      	bne.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c50:	e042      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d119      	bne.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0210 	mvn.w	r2, #16
 8004c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e029      	b.n	8004ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fe f974 	bl	8002f80 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d116      	bne.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e007      	b.n	8004ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d1b5      	bne.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d11b      	bne.n	8004d40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f043 0204 	orr.w	r2, r3, #4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e26c      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8087 	beq.w	8004e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d6c:	4b92      	ldr	r3, [pc, #584]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d00c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d78:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_OscConfig+0x5e>
 8004d84:	4b8c      	ldr	r3, [pc, #560]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d10b      	bne.n	8004daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d92:	4b89      	ldr	r3, [pc, #548]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d06c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x12c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d168      	bne.n	8004e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e246      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x76>
 8004db4:	4b80      	ldr	r3, [pc, #512]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a7f      	ldr	r2, [pc, #508]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e02e      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dca:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7a      	ldr	r2, [pc, #488]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e01d      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0xbc>
 8004dee:	4b72      	ldr	r3, [pc, #456]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a71      	ldr	r2, [pc, #452]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b6f      	ldr	r3, [pc, #444]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6e      	ldr	r2, [pc, #440]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0xd4>
 8004e08:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6a      	ldr	r2, [pc, #424]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a67      	ldr	r2, [pc, #412]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fe f8aa 	bl	8002f80 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fe f8a6 	bl	8002f80 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e1fa      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b5d      	ldr	r3, [pc, #372]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0xe4>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe f896 	bl	8002f80 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fe f892 	bl	8002f80 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1e6      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x10c>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d063      	beq.n	8004f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e86:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e92:	4b49      	ldr	r3, [pc, #292]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x18c>
 8004e9e:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d116      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x176>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e1ba      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	e03a      	b.n	8004f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee6:	f7fe f84b 	bl	8002f80 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fe f847 	bl	8002f80 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e19b      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4927      	ldr	r1, [pc, #156]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <HAL_RCC_OscConfig+0x270>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fe f82a 	bl	8002f80 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fe f826 	bl	8002f80 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e17a      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03a      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d019      	beq.n	8004f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f68:	f7fe f80a 	bl	8002f80 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fe f806 	bl	8002f80 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e15a      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f000 fada 	bl	8005548 <RCC_Delay>
 8004f94:	e01c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fff0 	bl	8002f80 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa2:	e00f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa4:	f7fd ffec 	bl	8002f80 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d908      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e140      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	42420000 	.word	0x42420000
 8004fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	4b9e      	ldr	r3, [pc, #632]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e9      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80a6 	beq.w	800512a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b97      	ldr	r3, [pc, #604]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b94      	ldr	r3, [pc, #592]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	4a93      	ldr	r2, [pc, #588]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	61d3      	str	r3, [r2, #28]
 8004ffa:	4b91      	ldr	r3, [pc, #580]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b8e      	ldr	r3, [pc, #568]	; (8005244 <HAL_RCC_OscConfig+0x4f8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <HAL_RCC_OscConfig+0x4f8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a8a      	ldr	r2, [pc, #552]	; (8005244 <HAL_RCC_OscConfig+0x4f8>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fd ffad 	bl	8002f80 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fd ffa9 	bl	8002f80 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0fd      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b81      	ldr	r3, [pc, #516]	; (8005244 <HAL_RCC_OscConfig+0x4f8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x312>
 8005050:	4b7b      	ldr	r3, [pc, #492]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a7a      	ldr	r2, [pc, #488]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e02d      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x334>
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	4a75      	ldr	r2, [pc, #468]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6213      	str	r3, [r2, #32]
 8005072:	4b73      	ldr	r3, [pc, #460]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4a72      	ldr	r2, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	6213      	str	r3, [r2, #32]
 800507e:	e01c      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b05      	cmp	r3, #5
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_OscConfig+0x356>
 8005088:	4b6d      	ldr	r3, [pc, #436]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4a6c      	ldr	r2, [pc, #432]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800508e:	f043 0304 	orr.w	r3, r3, #4
 8005092:	6213      	str	r3, [r2, #32]
 8005094:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a69      	ldr	r2, [pc, #420]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6213      	str	r3, [r2, #32]
 80050a0:	e00b      	b.n	80050ba <HAL_RCC_OscConfig+0x36e>
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a66      	ldr	r2, [pc, #408]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b64      	ldr	r3, [pc, #400]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a63      	ldr	r2, [pc, #396]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fd ff5d 	bl	8002f80 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd ff59 	bl	8002f80 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0ab      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e0:	4b57      	ldr	r3, [pc, #348]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ee      	beq.n	80050ca <HAL_RCC_OscConfig+0x37e>
 80050ec:	e014      	b.n	8005118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ee:	f7fd ff47 	bl	8002f80 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f4:	e00a      	b.n	800510c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fd ff43 	bl	8002f80 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e095      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510c:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ee      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511e:	4b48      	ldr	r3, [pc, #288]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8081 	beq.w	8005236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b08      	cmp	r3, #8
 800513e:	d061      	beq.n	8005204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d146      	bne.n	80051d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005148:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <HAL_RCC_OscConfig+0x4fc>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fd ff17 	bl	8002f80 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fd ff13 	bl	8002f80 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e067      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d108      	bne.n	8005190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	492d      	ldr	r1, [pc, #180]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a19      	ldr	r1, [r3, #32]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	430b      	orrs	r3, r1
 80051a2:	4927      	ldr	r1, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b27      	ldr	r3, [pc, #156]	; (8005248 <HAL_RCC_OscConfig+0x4fc>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fd fee7 	bl	8002f80 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fd fee3 	bl	8002f80 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e037      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x46a>
 80051d4:	e02f      	b.n	8005236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <HAL_RCC_OscConfig+0x4fc>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd fed0 	bl	8002f80 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fecc 	bl	8002f80 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e020      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x498>
 8005202:	e018      	b.n	8005236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e013      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCC_OscConfig+0x4f4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	429a      	cmp	r2, r3
 8005222:	d106      	bne.n	8005232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	40007000 	.word	0x40007000
 8005248:	42420060 	.word	0x42420060

0800524c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0d0      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b67      	ldr	r3, [pc, #412]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	4965      	ldr	r1, [pc, #404]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b63      	ldr	r3, [pc, #396]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0b8      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a8:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a58      	ldr	r2, [pc, #352]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a52      	ldr	r2, [pc, #328]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b50      	ldr	r3, [pc, #320]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	494d      	ldr	r1, [pc, #308]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d040      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f2:	4b47      	ldr	r3, [pc, #284]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d115      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07f      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b41      	ldr	r3, [pc, #260]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e073      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e06b      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4936      	ldr	r1, [pc, #216]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fd fe20 	bl	8002f80 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fd fe1c 	bl	8002f80 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e053      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d210      	bcs.n	800539c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	4922      	ldr	r1, [pc, #136]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e032      	b.n	8005402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4916      	ldr	r1, [pc, #88]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	490e      	ldr	r1, [pc, #56]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053da:	f000 f821 	bl	8005420 <HAL_RCC_GetSysClockFreq>
 80053de:	4601      	mov	r1, r0
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053ec:	5cd3      	ldrb	r3, [r2, r3]
 80053ee:	fa21 f303 	lsr.w	r3, r1, r3
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_RCC_ClockConfig+0x1cc>)
 80053f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_RCC_ClockConfig+0x1d0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fd fd7e 	bl	8002efc <HAL_InitTick>

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40022000 	.word	0x40022000
 8005410:	40021000 	.word	0x40021000
 8005414:	08008d5c 	.word	0x08008d5c
 8005418:	20000004 	.word	0x20000004
 800541c:	20000008 	.word	0x20000008

08005420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005420:	b490      	push	{r4, r7}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005428:	1d3c      	adds	r4, r7, #4
 800542a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800542c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005430:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b04      	cmp	r3, #4
 8005458:	d002      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x40>
 800545a:	2b08      	cmp	r3, #8
 800545c:	d003      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x46>
 800545e:	e02d      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005460:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005462:	623b      	str	r3, [r7, #32]
      break;
 8005464:	e02d      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	0c9b      	lsrs	r3, r3, #18
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005472:	4413      	add	r3, r2
 8005474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	0c5b      	lsrs	r3, r3, #17
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005492:	4413      	add	r3, r2
 8005494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800549e:	fb02 f203 	mul.w	r2, r2, r3
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
 80054aa:	e004      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	623b      	str	r3, [r7, #32]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80054be:	623b      	str	r3, [r7, #32]
      break;
 80054c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	; 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc90      	pop	{r4, r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	08008d20 	.word	0x08008d20
 80054d4:	08008d30 	.word	0x08008d30
 80054d8:	40021000 	.word	0x40021000
 80054dc:	007a1200 	.word	0x007a1200
 80054e0:	003d0900 	.word	0x003d0900

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b02      	ldr	r3, [pc, #8]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	20000004 	.word	0x20000004

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff2 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005500:	4601      	mov	r1, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	08008d6c 	.word	0x08008d6c

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffde 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005528:	4601      	mov	r1, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	0adb      	lsrs	r3, r3, #11
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	08008d6c 	.word	0x08008d6c

08005548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <RCC_Delay+0x34>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <RCC_Delay+0x38>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005564:	bf00      	nop
  }
  while (Delay --);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f9      	bne.n	8005564 <RCC_Delay+0x1c>
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000004 	.word	0x20000004
 8005580:	10624dd3 	.word	0x10624dd3

08005584 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d07d      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4a4b      	ldr	r2, [pc, #300]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	61d3      	str	r3, [r2, #28]
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d118      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d8:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a42      	ldr	r2, [pc, #264]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e4:	f7fd fccc 	bl	8002f80 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fd fcc8 	bl	8002f80 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e06d      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fe:	4b3a      	ldr	r3, [pc, #232]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02e      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	429a      	cmp	r2, r3
 8005626:	d027      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005628:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005638:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d014      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fd fc97 	bl	8002f80 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fc93 	bl	8002f80 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e036      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	4313      	orrs	r3, r2
 8005688:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	490b      	ldr	r1, [pc, #44]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4904      	ldr	r1, [pc, #16]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40007000 	.word	0x40007000
 80056ec:	42420440 	.word	0x42420440

080056f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b08d      	sub	sp, #52	; 0x34
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056f8:	4b55      	ldr	r3, [pc, #340]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80056fa:	f107 040c 	add.w	r4, r7, #12
 80056fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	2300      	movs	r3, #0
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	2300      	movs	r3, #0
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d07f      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005724:	2b10      	cmp	r3, #16
 8005726:	d002      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005728:	2b01      	cmp	r3, #1
 800572a:	d048      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800572c:	e08b      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800572e:	4b4a      	ldr	r3, [pc, #296]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005734:	4b48      	ldr	r3, [pc, #288]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d07f      	beq.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800574c:	4413      	add	r3, r2
 800574e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005752:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800575e:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	0c5b      	lsrs	r3, r3, #17
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800576c:	4413      	add	r3, r2
 800576e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800577e:	4a37      	ldr	r2, [pc, #220]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	fbb2 f2f3 	udiv	r2, r2, r3
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578e:	e004      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	4a33      	ldr	r2, [pc, #204]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a6:	d102      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057ac:	e048      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057bc:	e040      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80057be:	4b26      	ldr	r3, [pc, #152]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d108      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e0:	e01f      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ec:	d109      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80057fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005800:	e00f      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800580c:	d11a      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800581a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005820:	e010      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005822:	e00f      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005824:	f7ff fe7c 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	0b9b      	lsrs	r3, r3, #14
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	3301      	adds	r3, #1
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800583e:	e002      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005844:	bf00      	nop
    }
  }
  return (frequency);
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005848:	4618      	mov	r0, r3
 800584a:	3734      	adds	r7, #52	; 0x34
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}
 8005850:	08008d34 	.word	0x08008d34
 8005854:	08008d44 	.word	0x08008d44
 8005858:	40021000 	.word	0x40021000
 800585c:	007a1200 	.word	0x007a1200
 8005860:	003d0900 	.word	0x003d0900
 8005864:	aaaaaaab 	.word	0xaaaaaaab

08005868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e053      	b.n	8005922 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc fed7 	bl	8002648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	ea42 0103 	orr.w	r1, r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	0c1a      	lsrs	r2, r3, #16
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 0204 	and.w	r2, r2, #4
 8005900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e01d      	b.n	8005978 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fc fec5 	bl	80026e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f000 fb45 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d007      	beq.n	80059ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e01d      	b.n	8005a14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f815 	bl	8005a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f000 faf7 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
	...

08005a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fd58 	bl	80064f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <HAL_TIM_PWM_Start+0x60>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d107      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	d007      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40012c00 	.word	0x40012c00

08005a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0202 	mvn.w	r2, #2
 8005ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa73 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa66 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fa75 	bl	8005fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0204 	mvn.w	r2, #4
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa49 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa3c 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fa4b 	bl	8005fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0208 	mvn.w	r2, #8
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa1f 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa12 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa21 	bl	8005fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0210 	mvn.w	r2, #16
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9f5 	bl	8005fc2 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9e8 	bl	8005fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9f7 	bl	8005fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0201 	mvn.w	r2, #1
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9c3 	bl	8005f9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d10e      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fd1c 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d10e      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d107      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9bb 	bl	8005fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d10e      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0220 	mvn.w	r2, #32
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fce7 	bl	800666a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0b4      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f200 809f 	bhi.w	8005e14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005e15 	.word	0x08005e15
 8005ce4:	08005e15 	.word	0x08005e15
 8005ce8:	08005e15 	.word	0x08005e15
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005e15 	.word	0x08005e15
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e15 	.word	0x08005e15
 8005cfc:	08005d93 	.word	0x08005d93
 8005d00:	08005e15 	.word	0x08005e15
 8005d04:	08005e15 	.word	0x08005e15
 8005d08:	08005e15 	.word	0x08005e15
 8005d0c:	08005dd3 	.word	0x08005dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f9d0 	bl	80060bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
      break;
 8005d4e:	e062      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fa16 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
      break;
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa5f 	bl	800625c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0204 	bic.w	r2, r2, #4
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
      break;
 8005dd0:	e021      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 faa9 	bl	8006330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0a6      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x166>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d067      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0x120>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d80b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x6c>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d073      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d802      	bhi.n	8005e92 <HAL_TIM_ConfigClockSource+0x62>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d06f      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e90:	e078      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d06c      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d06a      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e9a:	e073      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d00d      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x8c>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d804      	bhi.n	8005eae <HAL_TIM_ConfigClockSource+0x7e>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d033      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xe0>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d041      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005eac:	e06a      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d066      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x152>
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d017      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eba:	e063      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f000 faf5 	bl	80064ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ede:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e04c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6899      	ldr	r1, [r3, #8]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f000 fade 	bl	80064ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e039      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f000 fa55 	bl	80063cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2150      	movs	r1, #80	; 0x50
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 faac 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e029      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f000 fa73 	bl	8006428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2160      	movs	r1, #96	; 0x60
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fa9c 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005f4e:	e019      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6859      	ldr	r1, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f000 fa35 	bl	80063cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fa8c 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005f6e:	e009      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 fa83 	bl	8006486 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <TIM_Base_SetConfig+0xb8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0x30>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0x30>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <TIM_Base_SetConfig+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0x30>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <TIM_Base_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <TIM_Base_SetConfig+0xb8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0x62>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0x62>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <TIM_Base_SetConfig+0xbc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0x62>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <TIM_Base_SetConfig+0xc0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <TIM_Base_SetConfig+0xb8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800

080060bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0302 	bic.w	r3, r3, #2
 8006104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <TIM_OC1_SetConfig+0xc8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d10c      	bne.n	8006132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0308 	bic.w	r3, r3, #8
 800611e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a13      	ldr	r2, [pc, #76]	; (8006184 <TIM_OC1_SetConfig+0xc8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0210 	bic.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <TIM_OC2_SetConfig+0xd0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10d      	bne.n	8006204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a14      	ldr	r2, [pc, #80]	; (8006258 <TIM_OC2_SetConfig+0xd0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d113      	bne.n	8006234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	40012c00 	.word	0x40012c00

0800625c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <TIM_OC3_SetConfig+0xd0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10d      	bne.n	80062d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <TIM_OC3_SetConfig+0xd0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d113      	bne.n	8006306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	621a      	str	r2, [r3, #32]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40012c00 	.word	0x40012c00

08006330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	031b      	lsls	r3, r3, #12
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a0f      	ldr	r2, [pc, #60]	; (80063c8 <TIM_OC4_SetConfig+0x98>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d109      	bne.n	80063a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	019b      	lsls	r3, r3, #6
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr
 80063c8:	40012c00 	.word	0x40012c00

080063cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 030a 	bic.w	r3, r3, #10
 8006408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f023 0210 	bic.w	r2, r3, #16
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006452:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	031b      	lsls	r3, r3, #12
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	621a      	str	r2, [r3, #32]
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b087      	sub	sp, #28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	431a      	orrs	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	609a      	str	r2, [r3, #8]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e032      	b.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006590:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	4313      	orrs	r3, r2
 800659a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e03d      	b.n	8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e03f      	b.n	8006720 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fc f87f 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	; 0x24
 80066be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f90c 	bl	80068f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	f040 8083 	bne.w	8006850 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Transmit+0x2e>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e07b      	b.n	8006852 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit+0x40>
 8006764:	2302      	movs	r3, #2
 8006766:	e074      	b.n	8006852 <HAL_UART_Transmit+0x12a>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2221      	movs	r2, #33	; 0x21
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800677e:	f7fc fbff 	bl	8002f80 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006790:	e042      	b.n	8006818 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a8:	d122      	bne.n	80067f0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f850 	bl	800685a <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e046      	b.n	8006852 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d103      	bne.n	80067e8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	3302      	adds	r3, #2
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	e017      	b.n	8006818 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	e013      	b.n	8006818 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f82d 	bl	800685a <UART_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e023      	b.n	8006852 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	60ba      	str	r2, [r7, #8]
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1b7      	bne.n	8006792 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	2140      	movs	r1, #64	; 0x40
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f814 	bl	800685a <UART_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e00a      	b.n	8006852 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	e000      	b.n	8006852 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	603b      	str	r3, [r7, #0]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686a:	e02c      	b.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006872:	d028      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x30>
 800687a:	f7fc fb81 	bl	8002f80 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	429a      	cmp	r2, r3
 8006888:	d21d      	bcs.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006898:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00f      	b.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d0c3      	beq.n	800686c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800692a:	f023 030c 	bic.w	r3, r3, #12
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	430b      	orrs	r3, r1
 8006936:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a52      	ldr	r2, [pc, #328]	; (8006a9c <UART_SetConfig+0x1ac>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d14e      	bne.n	80069f6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fe fde2 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 800695c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009a      	lsls	r2, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	4a4a      	ldr	r2, [pc, #296]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	0119      	lsls	r1, r3, #4
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009a      	lsls	r2, r3, #2
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	fbb2 f2f3 	udiv	r2, r2, r3
 8006994:	4b42      	ldr	r3, [pc, #264]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006996:	fba3 0302 	umull	r0, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2064      	movs	r0, #100	; 0x64
 800699e:	fb00 f303 	mul.w	r3, r0, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	3332      	adds	r3, #50	; 0x32
 80069a8:	4a3d      	ldr	r2, [pc, #244]	; (8006aa0 <UART_SetConfig+0x1b0>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b4:	4419      	add	r1, r3
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009a      	lsls	r2, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069cc:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <UART_SetConfig+0x1b0>)
 80069ce:	fba3 0302 	umull	r0, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2064      	movs	r0, #100	; 0x64
 80069d6:	fb00 f303 	mul.w	r3, r0, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	3332      	adds	r3, #50	; 0x32
 80069e0:	4a2f      	ldr	r2, [pc, #188]	; (8006aa0 <UART_SetConfig+0x1b0>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	440a      	add	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80069f4:	e04d      	b.n	8006a92 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80069f6:	f7fe fd7f 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80069fa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009a      	lsls	r2, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	0119      	lsls	r1, r3, #4
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009a      	lsls	r2, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006a34:	fba3 0302 	umull	r0, r3, r3, r2
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	2064      	movs	r0, #100	; 0x64
 8006a3c:	fb00 f303 	mul.w	r3, r0, r3
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	3332      	adds	r3, #50	; 0x32
 8006a46:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006a48:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a52:	4419      	add	r1, r3
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009a      	lsls	r2, r3, #2
 8006a5e:	441a      	add	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006a6c:	fba3 0302 	umull	r0, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	2064      	movs	r0, #100	; 0x64
 8006a74:	fb00 f303 	mul.w	r3, r0, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	3332      	adds	r3, #50	; 0x32
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <UART_SetConfig+0x1b0>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	f003 020f 	and.w	r2, r3, #15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	440a      	add	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40013800 	.word	0x40013800
 8006aa0:	51eb851f 	.word	0x51eb851f

08006aa4 <__errno>:
 8006aa4:	4b01      	ldr	r3, [pc, #4]	; (8006aac <__errno+0x8>)
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000010 	.word	0x20000010

08006ab0 <__libc_init_array>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	4e0c      	ldr	r6, [pc, #48]	; (8006ae8 <__libc_init_array+0x38>)
 8006ab6:	4c0d      	ldr	r4, [pc, #52]	; (8006aec <__libc_init_array+0x3c>)
 8006ab8:	1ba4      	subs	r4, r4, r6
 8006aba:	10a4      	asrs	r4, r4, #2
 8006abc:	42a5      	cmp	r5, r4
 8006abe:	d109      	bne.n	8006ad4 <__libc_init_array+0x24>
 8006ac0:	f002 f860 	bl	8008b84 <_init>
 8006ac4:	2500      	movs	r5, #0
 8006ac6:	4e0a      	ldr	r6, [pc, #40]	; (8006af0 <__libc_init_array+0x40>)
 8006ac8:	4c0a      	ldr	r4, [pc, #40]	; (8006af4 <__libc_init_array+0x44>)
 8006aca:	1ba4      	subs	r4, r4, r6
 8006acc:	10a4      	asrs	r4, r4, #2
 8006ace:	42a5      	cmp	r5, r4
 8006ad0:	d105      	bne.n	8006ade <__libc_init_array+0x2e>
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ad8:	4798      	blx	r3
 8006ada:	3501      	adds	r5, #1
 8006adc:	e7ee      	b.n	8006abc <__libc_init_array+0xc>
 8006ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ae2:	4798      	blx	r3
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	e7f2      	b.n	8006ace <__libc_init_array+0x1e>
 8006ae8:	08008fd0 	.word	0x08008fd0
 8006aec:	08008fd0 	.word	0x08008fd0
 8006af0:	08008fd0 	.word	0x08008fd0
 8006af4:	08008fd4 	.word	0x08008fd4

08006af8 <memset>:
 8006af8:	4603      	mov	r3, r0
 8006afa:	4402      	add	r2, r0
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d100      	bne.n	8006b02 <memset+0xa>
 8006b00:	4770      	bx	lr
 8006b02:	f803 1b01 	strb.w	r1, [r3], #1
 8006b06:	e7f9      	b.n	8006afc <memset+0x4>

08006b08 <__cvt>:
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0e:	461e      	mov	r6, r3
 8006b10:	bfbb      	ittet	lt
 8006b12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b16:	461e      	movlt	r6, r3
 8006b18:	2300      	movge	r3, #0
 8006b1a:	232d      	movlt	r3, #45	; 0x2d
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b20:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006b24:	f027 0720 	bic.w	r7, r7, #32
 8006b28:	2f46      	cmp	r7, #70	; 0x46
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b2e:	700b      	strb	r3, [r1, #0]
 8006b30:	d004      	beq.n	8006b3c <__cvt+0x34>
 8006b32:	2f45      	cmp	r7, #69	; 0x45
 8006b34:	d100      	bne.n	8006b38 <__cvt+0x30>
 8006b36:	3501      	adds	r5, #1
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e000      	b.n	8006b3e <__cvt+0x36>
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	aa07      	add	r2, sp, #28
 8006b40:	9204      	str	r2, [sp, #16]
 8006b42:	aa06      	add	r2, sp, #24
 8006b44:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b48:	e9cd 3500 	strd	r3, r5, [sp]
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4633      	mov	r3, r6
 8006b50:	f000 fcda 	bl	8007508 <_dtoa_r>
 8006b54:	2f47      	cmp	r7, #71	; 0x47
 8006b56:	4680      	mov	r8, r0
 8006b58:	d102      	bne.n	8006b60 <__cvt+0x58>
 8006b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b5c:	07db      	lsls	r3, r3, #31
 8006b5e:	d526      	bpl.n	8006bae <__cvt+0xa6>
 8006b60:	2f46      	cmp	r7, #70	; 0x46
 8006b62:	eb08 0905 	add.w	r9, r8, r5
 8006b66:	d111      	bne.n	8006b8c <__cvt+0x84>
 8006b68:	f898 3000 	ldrb.w	r3, [r8]
 8006b6c:	2b30      	cmp	r3, #48	; 0x30
 8006b6e:	d10a      	bne.n	8006b86 <__cvt+0x7e>
 8006b70:	2200      	movs	r2, #0
 8006b72:	2300      	movs	r3, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	4631      	mov	r1, r6
 8006b78:	f7f9 ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8006b7c:	b918      	cbnz	r0, 8006b86 <__cvt+0x7e>
 8006b7e:	f1c5 0501 	rsb	r5, r5, #1
 8006b82:	f8ca 5000 	str.w	r5, [sl]
 8006b86:	f8da 3000 	ldr.w	r3, [sl]
 8006b8a:	4499      	add	r9, r3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4620      	mov	r0, r4
 8006b92:	4631      	mov	r1, r6
 8006b94:	f7f9 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8006b98:	b938      	cbnz	r0, 8006baa <__cvt+0xa2>
 8006b9a:	2230      	movs	r2, #48	; 0x30
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	454b      	cmp	r3, r9
 8006ba0:	d205      	bcs.n	8006bae <__cvt+0xa6>
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	9107      	str	r1, [sp, #28]
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	e7f8      	b.n	8006b9c <__cvt+0x94>
 8006baa:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bae:	4640      	mov	r0, r8
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bb4:	eba3 0308 	sub.w	r3, r3, r8
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	b008      	add	sp, #32
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006bc0 <__exponent>:
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	bfb4      	ite	lt
 8006bc6:	232d      	movlt	r3, #45	; 0x2d
 8006bc8:	232b      	movge	r3, #43	; 0x2b
 8006bca:	4604      	mov	r4, r0
 8006bcc:	bfb8      	it	lt
 8006bce:	4249      	neglt	r1, r1
 8006bd0:	2909      	cmp	r1, #9
 8006bd2:	f804 2b02 	strb.w	r2, [r4], #2
 8006bd6:	7043      	strb	r3, [r0, #1]
 8006bd8:	dd21      	ble.n	8006c1e <__exponent+0x5e>
 8006bda:	f10d 0307 	add.w	r3, sp, #7
 8006bde:	461f      	mov	r7, r3
 8006be0:	260a      	movs	r6, #10
 8006be2:	fb91 f5f6 	sdiv	r5, r1, r6
 8006be6:	fb06 1115 	mls	r1, r6, r5, r1
 8006bea:	2d09      	cmp	r5, #9
 8006bec:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006bf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bf4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	dc09      	bgt.n	8006c10 <__exponent+0x50>
 8006bfc:	3130      	adds	r1, #48	; 0x30
 8006bfe:	3b02      	subs	r3, #2
 8006c00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c04:	42bb      	cmp	r3, r7
 8006c06:	4622      	mov	r2, r4
 8006c08:	d304      	bcc.n	8006c14 <__exponent+0x54>
 8006c0a:	1a10      	subs	r0, r2, r0
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c10:	4613      	mov	r3, r2
 8006c12:	e7e6      	b.n	8006be2 <__exponent+0x22>
 8006c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c18:	f804 2b01 	strb.w	r2, [r4], #1
 8006c1c:	e7f2      	b.n	8006c04 <__exponent+0x44>
 8006c1e:	2330      	movs	r3, #48	; 0x30
 8006c20:	4419      	add	r1, r3
 8006c22:	7083      	strb	r3, [r0, #2]
 8006c24:	1d02      	adds	r2, r0, #4
 8006c26:	70c1      	strb	r1, [r0, #3]
 8006c28:	e7ef      	b.n	8006c0a <__exponent+0x4a>
	...

08006c2c <_printf_float>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	b091      	sub	sp, #68	; 0x44
 8006c32:	460c      	mov	r4, r1
 8006c34:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006c36:	4693      	mov	fp, r2
 8006c38:	461e      	mov	r6, r3
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	f001 fa18 	bl	8008070 <_localeconv_r>
 8006c40:	6803      	ldr	r3, [r0, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	f7f9 fa83 	bl	8000150 <strlen>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	900a      	str	r0, [sp, #40]	; 0x28
 8006c52:	3307      	adds	r3, #7
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	f103 0208 	add.w	r2, r3, #8
 8006c5c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006c60:	f8d4 a000 	ldr.w	sl, [r4]
 8006c64:	603a      	str	r2, [r7, #0]
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c6e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7c:	4ba6      	ldr	r3, [pc, #664]	; (8006f18 <_printf_float+0x2ec>)
 8006c7e:	4638      	mov	r0, r7
 8006c80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c82:	f7f9 fec3 	bl	8000a0c <__aeabi_dcmpun>
 8006c86:	bb68      	cbnz	r0, 8006ce4 <_printf_float+0xb8>
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c8c:	4ba2      	ldr	r3, [pc, #648]	; (8006f18 <_printf_float+0x2ec>)
 8006c8e:	4638      	mov	r0, r7
 8006c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c92:	f7f9 fe9d 	bl	80009d0 <__aeabi_dcmple>
 8006c96:	bb28      	cbnz	r0, 8006ce4 <_printf_float+0xb8>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	f7f9 fe8c 	bl	80009bc <__aeabi_dcmplt>
 8006ca4:	b110      	cbz	r0, 8006cac <_printf_float+0x80>
 8006ca6:	232d      	movs	r3, #45	; 0x2d
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cac:	4f9b      	ldr	r7, [pc, #620]	; (8006f1c <_printf_float+0x2f0>)
 8006cae:	4b9c      	ldr	r3, [pc, #624]	; (8006f20 <_printf_float+0x2f4>)
 8006cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cb4:	bf98      	it	ls
 8006cb6:	461f      	movls	r7, r3
 8006cb8:	2303      	movs	r3, #3
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	f02a 0304 	bic.w	r3, sl, #4
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	9600      	str	r6, [sp, #0]
 8006cc8:	465b      	mov	r3, fp
 8006cca:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f9e2 	bl	8007098 <_printf_common>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f040 8090 	bne.w	8006dfa <_printf_float+0x1ce>
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cde:	b011      	add	sp, #68	; 0x44
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	463a      	mov	r2, r7
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	4638      	mov	r0, r7
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 fe8e 	bl	8000a0c <__aeabi_dcmpun>
 8006cf0:	b110      	cbz	r0, 8006cf8 <_printf_float+0xcc>
 8006cf2:	4f8c      	ldr	r7, [pc, #560]	; (8006f24 <_printf_float+0x2f8>)
 8006cf4:	4b8c      	ldr	r3, [pc, #560]	; (8006f28 <_printf_float+0x2fc>)
 8006cf6:	e7db      	b.n	8006cb0 <_printf_float+0x84>
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	a80d      	add	r0, sp, #52	; 0x34
 8006d02:	a90e      	add	r1, sp, #56	; 0x38
 8006d04:	d140      	bne.n	8006d88 <_printf_float+0x15c>
 8006d06:	2306      	movs	r3, #6
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	f04f 0c00 	mov.w	ip, #0
 8006d0e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006d12:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	463a      	mov	r2, r7
 8006d22:	464b      	mov	r3, r9
 8006d24:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f7ff feed 	bl	8006b08 <__cvt>
 8006d2e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006d32:	2b47      	cmp	r3, #71	; 0x47
 8006d34:	4607      	mov	r7, r0
 8006d36:	d109      	bne.n	8006d4c <_printf_float+0x120>
 8006d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d3a:	1cd8      	adds	r0, r3, #3
 8006d3c:	db02      	blt.n	8006d44 <_printf_float+0x118>
 8006d3e:	6862      	ldr	r2, [r4, #4]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	dd47      	ble.n	8006dd4 <_printf_float+0x1a8>
 8006d44:	f1a8 0802 	sub.w	r8, r8, #2
 8006d48:	fa5f f888 	uxtb.w	r8, r8
 8006d4c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d52:	d824      	bhi.n	8006d9e <_printf_float+0x172>
 8006d54:	3901      	subs	r1, #1
 8006d56:	4642      	mov	r2, r8
 8006d58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d5c:	910d      	str	r1, [sp, #52]	; 0x34
 8006d5e:	f7ff ff2f 	bl	8006bc0 <__exponent>
 8006d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d64:	4681      	mov	r9, r0
 8006d66:	1813      	adds	r3, r2, r0
 8006d68:	2a01      	cmp	r2, #1
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	dc02      	bgt.n	8006d74 <_printf_float+0x148>
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	07d1      	lsls	r1, r2, #31
 8006d72:	d501      	bpl.n	8006d78 <_printf_float+0x14c>
 8006d74:	3301      	adds	r3, #1
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0a2      	beq.n	8006cc6 <_printf_float+0x9a>
 8006d80:	232d      	movs	r3, #45	; 0x2d
 8006d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d86:	e79e      	b.n	8006cc6 <_printf_float+0x9a>
 8006d88:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006d8c:	f000 816e 	beq.w	800706c <_printf_float+0x440>
 8006d90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d94:	d1b9      	bne.n	8006d0a <_printf_float+0xde>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1b7      	bne.n	8006d0a <_printf_float+0xde>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7b4      	b.n	8006d08 <_printf_float+0xdc>
 8006d9e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006da2:	d119      	bne.n	8006dd8 <_printf_float+0x1ac>
 8006da4:	2900      	cmp	r1, #0
 8006da6:	6863      	ldr	r3, [r4, #4]
 8006da8:	dd0c      	ble.n	8006dc4 <_printf_float+0x198>
 8006daa:	6121      	str	r1, [r4, #16]
 8006dac:	b913      	cbnz	r3, 8006db4 <_printf_float+0x188>
 8006dae:	6822      	ldr	r2, [r4, #0]
 8006db0:	07d2      	lsls	r2, r2, #31
 8006db2:	d502      	bpl.n	8006dba <_printf_float+0x18e>
 8006db4:	3301      	adds	r3, #1
 8006db6:	440b      	add	r3, r1
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dbc:	f04f 0900 	mov.w	r9, #0
 8006dc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8006dc2:	e7d9      	b.n	8006d78 <_printf_float+0x14c>
 8006dc4:	b913      	cbnz	r3, 8006dcc <_printf_float+0x1a0>
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	07d0      	lsls	r0, r2, #31
 8006dca:	d501      	bpl.n	8006dd0 <_printf_float+0x1a4>
 8006dcc:	3302      	adds	r3, #2
 8006dce:	e7f3      	b.n	8006db8 <_printf_float+0x18c>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e7f1      	b.n	8006db8 <_printf_float+0x18c>
 8006dd4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006dd8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	db05      	blt.n	8006dec <_printf_float+0x1c0>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	07d1      	lsls	r1, r2, #31
 8006de6:	d5e8      	bpl.n	8006dba <_printf_float+0x18e>
 8006de8:	3301      	adds	r3, #1
 8006dea:	e7e5      	b.n	8006db8 <_printf_float+0x18c>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bfcc      	ite	gt
 8006df0:	2301      	movgt	r3, #1
 8006df2:	f1c3 0302 	rsble	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	e7de      	b.n	8006db8 <_printf_float+0x18c>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	055a      	lsls	r2, r3, #21
 8006dfe:	d407      	bmi.n	8006e10 <_printf_float+0x1e4>
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	463a      	mov	r2, r7
 8006e04:	4659      	mov	r1, fp
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d129      	bne.n	8006e62 <_printf_float+0x236>
 8006e0e:	e764      	b.n	8006cda <_printf_float+0xae>
 8006e10:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006e14:	f240 80d7 	bls.w	8006fc6 <_printf_float+0x39a>
 8006e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f7f9 fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e24:	b388      	cbz	r0, 8006e8a <_printf_float+0x25e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4a40      	ldr	r2, [pc, #256]	; (8006f2c <_printf_float+0x300>)
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b0      	blx	r6
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f af52 	beq.w	8006cda <_printf_float+0xae>
 8006e36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	db02      	blt.n	8006e44 <_printf_float+0x218>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	07d8      	lsls	r0, r3, #31
 8006e42:	d50e      	bpl.n	8006e62 <_printf_float+0x236>
 8006e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e48:	4659      	mov	r1, fp
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b0      	blx	r6
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af43 	beq.w	8006cda <_printf_float+0xae>
 8006e54:	2700      	movs	r7, #0
 8006e56:	f104 081a 	add.w	r8, r4, #26
 8006e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	dc09      	bgt.n	8006e76 <_printf_float+0x24a>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	079f      	lsls	r7, r3, #30
 8006e66:	f100 80fd 	bmi.w	8007064 <_printf_float+0x438>
 8006e6a:	68e0      	ldr	r0, [r4, #12]
 8006e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	bfb8      	it	lt
 8006e72:	4618      	movlt	r0, r3
 8006e74:	e733      	b.n	8006cde <_printf_float+0xb2>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4642      	mov	r2, r8
 8006e7a:	4659      	mov	r1, fp
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b0      	blx	r6
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f af2a 	beq.w	8006cda <_printf_float+0xae>
 8006e86:	3701      	adds	r7, #1
 8006e88:	e7e7      	b.n	8006e5a <_printf_float+0x22e>
 8006e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dc2b      	bgt.n	8006ee8 <_printf_float+0x2bc>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <_printf_float+0x300>)
 8006e94:	4659      	mov	r1, fp
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b0      	blx	r6
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f af1d 	beq.w	8006cda <_printf_float+0xae>
 8006ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea2:	b923      	cbnz	r3, 8006eae <_printf_float+0x282>
 8006ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ea6:	b913      	cbnz	r3, 8006eae <_printf_float+0x282>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	07d9      	lsls	r1, r3, #31
 8006eac:	d5d9      	bpl.n	8006e62 <_printf_float+0x236>
 8006eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb2:	4659      	mov	r1, fp
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b0      	blx	r6
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f af0e 	beq.w	8006cda <_printf_float+0xae>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f104 091a 	add.w	r9, r4, #26
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec8:	425b      	negs	r3, r3
 8006eca:	4543      	cmp	r3, r8
 8006ecc:	dc01      	bgt.n	8006ed2 <_printf_float+0x2a6>
 8006ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ed0:	e797      	b.n	8006e02 <_printf_float+0x1d6>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	464a      	mov	r2, r9
 8006ed6:	4659      	mov	r1, fp
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b0      	blx	r6
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f aefc 	beq.w	8006cda <_printf_float+0xae>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7ee      	b.n	8006ec6 <_printf_float+0x29a>
 8006ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eec:	429a      	cmp	r2, r3
 8006eee:	bfa8      	it	ge
 8006ef0:	461a      	movge	r2, r3
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	4690      	mov	r8, r2
 8006ef6:	dd07      	ble.n	8006f08 <_printf_float+0x2dc>
 8006ef8:	4613      	mov	r3, r2
 8006efa:	4659      	mov	r1, fp
 8006efc:	463a      	mov	r2, r7
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b0      	blx	r6
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f aee9 	beq.w	8006cda <_printf_float+0xae>
 8006f08:	f104 031a 	add.w	r3, r4, #26
 8006f0c:	f04f 0a00 	mov.w	sl, #0
 8006f10:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f16:	e015      	b.n	8006f44 <_printf_float+0x318>
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	08008d78 	.word	0x08008d78
 8006f20:	08008d74 	.word	0x08008d74
 8006f24:	08008d80 	.word	0x08008d80
 8006f28:	08008d7c 	.word	0x08008d7c
 8006f2c:	08008d84 	.word	0x08008d84
 8006f30:	2301      	movs	r3, #1
 8006f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f34:	4659      	mov	r1, fp
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b0      	blx	r6
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f aecd 	beq.w	8006cda <_printf_float+0xae>
 8006f40:	f10a 0a01 	add.w	sl, sl, #1
 8006f44:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006f48:	eba9 0308 	sub.w	r3, r9, r8
 8006f4c:	4553      	cmp	r3, sl
 8006f4e:	dcef      	bgt.n	8006f30 <_printf_float+0x304>
 8006f50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f54:	429a      	cmp	r2, r3
 8006f56:	444f      	add	r7, r9
 8006f58:	db14      	blt.n	8006f84 <_printf_float+0x358>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	d411      	bmi.n	8006f84 <_printf_float+0x358>
 8006f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f64:	eba3 0209 	sub.w	r2, r3, r9
 8006f68:	eba3 0901 	sub.w	r9, r3, r1
 8006f6c:	4591      	cmp	r9, r2
 8006f6e:	bfa8      	it	ge
 8006f70:	4691      	movge	r9, r2
 8006f72:	f1b9 0f00 	cmp.w	r9, #0
 8006f76:	dc0d      	bgt.n	8006f94 <_printf_float+0x368>
 8006f78:	2700      	movs	r7, #0
 8006f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7e:	f104 081a 	add.w	r8, r4, #26
 8006f82:	e018      	b.n	8006fb6 <_printf_float+0x38a>
 8006f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f88:	4659      	mov	r1, fp
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b0      	blx	r6
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d1e6      	bne.n	8006f60 <_printf_float+0x334>
 8006f92:	e6a2      	b.n	8006cda <_printf_float+0xae>
 8006f94:	464b      	mov	r3, r9
 8006f96:	463a      	mov	r2, r7
 8006f98:	4659      	mov	r1, fp
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b0      	blx	r6
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d1ea      	bne.n	8006f78 <_printf_float+0x34c>
 8006fa2:	e69a      	b.n	8006cda <_printf_float+0xae>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	4659      	mov	r1, fp
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b0      	blx	r6
 8006fae:	3001      	adds	r0, #1
 8006fb0:	f43f ae93 	beq.w	8006cda <_printf_float+0xae>
 8006fb4:	3701      	adds	r7, #1
 8006fb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	eba3 0309 	sub.w	r3, r3, r9
 8006fc0:	42bb      	cmp	r3, r7
 8006fc2:	dcef      	bgt.n	8006fa4 <_printf_float+0x378>
 8006fc4:	e74d      	b.n	8006e62 <_printf_float+0x236>
 8006fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fc8:	2a01      	cmp	r2, #1
 8006fca:	dc01      	bgt.n	8006fd0 <_printf_float+0x3a4>
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d538      	bpl.n	8007042 <_printf_float+0x416>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b0      	blx	r6
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f ae7d 	beq.w	8006cda <_printf_float+0xae>
 8006fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	3001      	adds	r0, #1
 8006fec:	f107 0701 	add.w	r7, r7, #1
 8006ff0:	f43f ae73 	beq.w	8006cda <_printf_float+0xae>
 8006ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007000:	2300      	movs	r3, #0
 8007002:	f7f9 fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8007006:	b9c0      	cbnz	r0, 800703a <_printf_float+0x40e>
 8007008:	4643      	mov	r3, r8
 800700a:	463a      	mov	r2, r7
 800700c:	4659      	mov	r1, fp
 800700e:	4628      	mov	r0, r5
 8007010:	47b0      	blx	r6
 8007012:	3001      	adds	r0, #1
 8007014:	d10d      	bne.n	8007032 <_printf_float+0x406>
 8007016:	e660      	b.n	8006cda <_printf_float+0xae>
 8007018:	2301      	movs	r3, #1
 800701a:	4642      	mov	r2, r8
 800701c:	4659      	mov	r1, fp
 800701e:	4628      	mov	r0, r5
 8007020:	47b0      	blx	r6
 8007022:	3001      	adds	r0, #1
 8007024:	f43f ae59 	beq.w	8006cda <_printf_float+0xae>
 8007028:	3701      	adds	r7, #1
 800702a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800702c:	3b01      	subs	r3, #1
 800702e:	42bb      	cmp	r3, r7
 8007030:	dcf2      	bgt.n	8007018 <_printf_float+0x3ec>
 8007032:	464b      	mov	r3, r9
 8007034:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007038:	e6e4      	b.n	8006e04 <_printf_float+0x1d8>
 800703a:	2700      	movs	r7, #0
 800703c:	f104 081a 	add.w	r8, r4, #26
 8007040:	e7f3      	b.n	800702a <_printf_float+0x3fe>
 8007042:	2301      	movs	r3, #1
 8007044:	e7e1      	b.n	800700a <_printf_float+0x3de>
 8007046:	2301      	movs	r3, #1
 8007048:	4642      	mov	r2, r8
 800704a:	4659      	mov	r1, fp
 800704c:	4628      	mov	r0, r5
 800704e:	47b0      	blx	r6
 8007050:	3001      	adds	r0, #1
 8007052:	f43f ae42 	beq.w	8006cda <_printf_float+0xae>
 8007056:	3701      	adds	r7, #1
 8007058:	68e3      	ldr	r3, [r4, #12]
 800705a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	42bb      	cmp	r3, r7
 8007060:	dcf1      	bgt.n	8007046 <_printf_float+0x41a>
 8007062:	e702      	b.n	8006e6a <_printf_float+0x23e>
 8007064:	2700      	movs	r7, #0
 8007066:	f104 0819 	add.w	r8, r4, #25
 800706a:	e7f5      	b.n	8007058 <_printf_float+0x42c>
 800706c:	2b00      	cmp	r3, #0
 800706e:	f43f ae94 	beq.w	8006d9a <_printf_float+0x16e>
 8007072:	f04f 0c00 	mov.w	ip, #0
 8007076:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800707a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800707e:	6022      	str	r2, [r4, #0]
 8007080:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007084:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	463a      	mov	r2, r7
 800708c:	464b      	mov	r3, r9
 800708e:	4628      	mov	r0, r5
 8007090:	f7ff fd3a 	bl	8006b08 <__cvt>
 8007094:	4607      	mov	r7, r0
 8007096:	e64f      	b.n	8006d38 <_printf_float+0x10c>

08007098 <_printf_common>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	4691      	mov	r9, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	688a      	ldr	r2, [r1, #8]
 80070a2:	690b      	ldr	r3, [r1, #16]
 80070a4:	4606      	mov	r6, r0
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bfb8      	it	lt
 80070aa:	4613      	movlt	r3, r2
 80070ac:	f8c9 3000 	str.w	r3, [r9]
 80070b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070b4:	460c      	mov	r4, r1
 80070b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ba:	b112      	cbz	r2, 80070c2 <_printf_common+0x2a>
 80070bc:	3301      	adds	r3, #1
 80070be:	f8c9 3000 	str.w	r3, [r9]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070cc:	3302      	addmi	r3, #2
 80070ce:	f8c9 3000 	strmi.w	r3, [r9]
 80070d2:	6825      	ldr	r5, [r4, #0]
 80070d4:	f015 0506 	ands.w	r5, r5, #6
 80070d8:	d107      	bne.n	80070ea <_printf_common+0x52>
 80070da:	f104 0a19 	add.w	sl, r4, #25
 80070de:	68e3      	ldr	r3, [r4, #12]
 80070e0:	f8d9 2000 	ldr.w	r2, [r9]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	42ab      	cmp	r3, r5
 80070e8:	dc29      	bgt.n	800713e <_printf_common+0xa6>
 80070ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	3300      	adds	r3, #0
 80070f2:	bf18      	it	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	0692      	lsls	r2, r2, #26
 80070f8:	d42e      	bmi.n	8007158 <_printf_common+0xc0>
 80070fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070fe:	4639      	mov	r1, r7
 8007100:	4630      	mov	r0, r6
 8007102:	47c0      	blx	r8
 8007104:	3001      	adds	r0, #1
 8007106:	d021      	beq.n	800714c <_printf_common+0xb4>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	68e5      	ldr	r5, [r4, #12]
 800710c:	f003 0306 	and.w	r3, r3, #6
 8007110:	2b04      	cmp	r3, #4
 8007112:	bf18      	it	ne
 8007114:	2500      	movne	r5, #0
 8007116:	f8d9 2000 	ldr.w	r2, [r9]
 800711a:	f04f 0900 	mov.w	r9, #0
 800711e:	bf08      	it	eq
 8007120:	1aad      	subeq	r5, r5, r2
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	bf08      	it	eq
 8007128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800712c:	4293      	cmp	r3, r2
 800712e:	bfc4      	itt	gt
 8007130:	1a9b      	subgt	r3, r3, r2
 8007132:	18ed      	addgt	r5, r5, r3
 8007134:	341a      	adds	r4, #26
 8007136:	454d      	cmp	r5, r9
 8007138:	d11a      	bne.n	8007170 <_printf_common+0xd8>
 800713a:	2000      	movs	r0, #0
 800713c:	e008      	b.n	8007150 <_printf_common+0xb8>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4639      	mov	r1, r7
 8007144:	4630      	mov	r0, r6
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d103      	bne.n	8007154 <_printf_common+0xbc>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e7c2      	b.n	80070de <_printf_common+0x46>
 8007158:	2030      	movs	r0, #48	; 0x30
 800715a:	18e1      	adds	r1, r4, r3
 800715c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007166:	4422      	add	r2, r4
 8007168:	3302      	adds	r3, #2
 800716a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716e:	e7c4      	b.n	80070fa <_printf_common+0x62>
 8007170:	2301      	movs	r3, #1
 8007172:	4622      	mov	r2, r4
 8007174:	4639      	mov	r1, r7
 8007176:	4630      	mov	r0, r6
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d0e6      	beq.n	800714c <_printf_common+0xb4>
 800717e:	f109 0901 	add.w	r9, r9, #1
 8007182:	e7d8      	b.n	8007136 <_printf_common+0x9e>

08007184 <_printf_i>:
 8007184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007188:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800718c:	460c      	mov	r4, r1
 800718e:	7e09      	ldrb	r1, [r1, #24]
 8007190:	b085      	sub	sp, #20
 8007192:	296e      	cmp	r1, #110	; 0x6e
 8007194:	4617      	mov	r7, r2
 8007196:	4606      	mov	r6, r0
 8007198:	4698      	mov	r8, r3
 800719a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800719c:	f000 80b3 	beq.w	8007306 <_printf_i+0x182>
 80071a0:	d822      	bhi.n	80071e8 <_printf_i+0x64>
 80071a2:	2963      	cmp	r1, #99	; 0x63
 80071a4:	d036      	beq.n	8007214 <_printf_i+0x90>
 80071a6:	d80a      	bhi.n	80071be <_printf_i+0x3a>
 80071a8:	2900      	cmp	r1, #0
 80071aa:	f000 80b9 	beq.w	8007320 <_printf_i+0x19c>
 80071ae:	2958      	cmp	r1, #88	; 0x58
 80071b0:	f000 8083 	beq.w	80072ba <_printf_i+0x136>
 80071b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071bc:	e032      	b.n	8007224 <_printf_i+0xa0>
 80071be:	2964      	cmp	r1, #100	; 0x64
 80071c0:	d001      	beq.n	80071c6 <_printf_i+0x42>
 80071c2:	2969      	cmp	r1, #105	; 0x69
 80071c4:	d1f6      	bne.n	80071b4 <_printf_i+0x30>
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	6813      	ldr	r3, [r2, #0]
 80071ca:	0605      	lsls	r5, r0, #24
 80071cc:	f103 0104 	add.w	r1, r3, #4
 80071d0:	d52a      	bpl.n	8007228 <_printf_i+0xa4>
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da03      	bge.n	80071e2 <_printf_i+0x5e>
 80071da:	222d      	movs	r2, #45	; 0x2d
 80071dc:	425b      	negs	r3, r3
 80071de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071e2:	486f      	ldr	r0, [pc, #444]	; (80073a0 <_printf_i+0x21c>)
 80071e4:	220a      	movs	r2, #10
 80071e6:	e039      	b.n	800725c <_printf_i+0xd8>
 80071e8:	2973      	cmp	r1, #115	; 0x73
 80071ea:	f000 809d 	beq.w	8007328 <_printf_i+0x1a4>
 80071ee:	d808      	bhi.n	8007202 <_printf_i+0x7e>
 80071f0:	296f      	cmp	r1, #111	; 0x6f
 80071f2:	d020      	beq.n	8007236 <_printf_i+0xb2>
 80071f4:	2970      	cmp	r1, #112	; 0x70
 80071f6:	d1dd      	bne.n	80071b4 <_printf_i+0x30>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	f043 0320 	orr.w	r3, r3, #32
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	e003      	b.n	800720a <_printf_i+0x86>
 8007202:	2975      	cmp	r1, #117	; 0x75
 8007204:	d017      	beq.n	8007236 <_printf_i+0xb2>
 8007206:	2978      	cmp	r1, #120	; 0x78
 8007208:	d1d4      	bne.n	80071b4 <_printf_i+0x30>
 800720a:	2378      	movs	r3, #120	; 0x78
 800720c:	4865      	ldr	r0, [pc, #404]	; (80073a4 <_printf_i+0x220>)
 800720e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007212:	e055      	b.n	80072c0 <_printf_i+0x13c>
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800721a:	1d19      	adds	r1, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6011      	str	r1, [r2, #0]
 8007220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007224:	2301      	movs	r3, #1
 8007226:	e08c      	b.n	8007342 <_printf_i+0x1be>
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800722e:	6011      	str	r1, [r2, #0]
 8007230:	bf18      	it	ne
 8007232:	b21b      	sxthne	r3, r3
 8007234:	e7cf      	b.n	80071d6 <_printf_i+0x52>
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	6825      	ldr	r5, [r4, #0]
 800723a:	1d18      	adds	r0, r3, #4
 800723c:	6010      	str	r0, [r2, #0]
 800723e:	0628      	lsls	r0, r5, #24
 8007240:	d501      	bpl.n	8007246 <_printf_i+0xc2>
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	e002      	b.n	800724c <_printf_i+0xc8>
 8007246:	0668      	lsls	r0, r5, #25
 8007248:	d5fb      	bpl.n	8007242 <_printf_i+0xbe>
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	296f      	cmp	r1, #111	; 0x6f
 800724e:	bf14      	ite	ne
 8007250:	220a      	movne	r2, #10
 8007252:	2208      	moveq	r2, #8
 8007254:	4852      	ldr	r0, [pc, #328]	; (80073a0 <_printf_i+0x21c>)
 8007256:	2100      	movs	r1, #0
 8007258:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800725c:	6865      	ldr	r5, [r4, #4]
 800725e:	2d00      	cmp	r5, #0
 8007260:	60a5      	str	r5, [r4, #8]
 8007262:	f2c0 8095 	blt.w	8007390 <_printf_i+0x20c>
 8007266:	6821      	ldr	r1, [r4, #0]
 8007268:	f021 0104 	bic.w	r1, r1, #4
 800726c:	6021      	str	r1, [r4, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d13d      	bne.n	80072ee <_printf_i+0x16a>
 8007272:	2d00      	cmp	r5, #0
 8007274:	f040 808e 	bne.w	8007394 <_printf_i+0x210>
 8007278:	4665      	mov	r5, ip
 800727a:	2a08      	cmp	r2, #8
 800727c:	d10b      	bne.n	8007296 <_printf_i+0x112>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	07db      	lsls	r3, r3, #31
 8007282:	d508      	bpl.n	8007296 <_printf_i+0x112>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	bfde      	ittt	le
 800728c:	2330      	movle	r3, #48	; 0x30
 800728e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007292:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007296:	ebac 0305 	sub.w	r3, ip, r5
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f8cd 8000 	str.w	r8, [sp]
 80072a0:	463b      	mov	r3, r7
 80072a2:	aa03      	add	r2, sp, #12
 80072a4:	4621      	mov	r1, r4
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff fef6 	bl	8007098 <_printf_common>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d14d      	bne.n	800734c <_printf_i+0x1c8>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b4:	b005      	add	sp, #20
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	4839      	ldr	r0, [pc, #228]	; (80073a0 <_printf_i+0x21c>)
 80072bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072c0:	6813      	ldr	r3, [r2, #0]
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	1d1d      	adds	r5, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6015      	str	r5, [r2, #0]
 80072ca:	060a      	lsls	r2, r1, #24
 80072cc:	d50b      	bpl.n	80072e6 <_printf_i+0x162>
 80072ce:	07ca      	lsls	r2, r1, #31
 80072d0:	bf44      	itt	mi
 80072d2:	f041 0120 	orrmi.w	r1, r1, #32
 80072d6:	6021      	strmi	r1, [r4, #0]
 80072d8:	b91b      	cbnz	r3, 80072e2 <_printf_i+0x15e>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	f022 0220 	bic.w	r2, r2, #32
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	2210      	movs	r2, #16
 80072e4:	e7b7      	b.n	8007256 <_printf_i+0xd2>
 80072e6:	064d      	lsls	r5, r1, #25
 80072e8:	bf48      	it	mi
 80072ea:	b29b      	uxthmi	r3, r3
 80072ec:	e7ef      	b.n	80072ce <_printf_i+0x14a>
 80072ee:	4665      	mov	r5, ip
 80072f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80072f4:	fb02 3311 	mls	r3, r2, r1, r3
 80072f8:	5cc3      	ldrb	r3, [r0, r3]
 80072fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072fe:	460b      	mov	r3, r1
 8007300:	2900      	cmp	r1, #0
 8007302:	d1f5      	bne.n	80072f0 <_printf_i+0x16c>
 8007304:	e7b9      	b.n	800727a <_printf_i+0xf6>
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	6825      	ldr	r5, [r4, #0]
 800730a:	1d18      	adds	r0, r3, #4
 800730c:	6961      	ldr	r1, [r4, #20]
 800730e:	6010      	str	r0, [r2, #0]
 8007310:	0628      	lsls	r0, r5, #24
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	d501      	bpl.n	800731a <_printf_i+0x196>
 8007316:	6019      	str	r1, [r3, #0]
 8007318:	e002      	b.n	8007320 <_printf_i+0x19c>
 800731a:	066a      	lsls	r2, r5, #25
 800731c:	d5fb      	bpl.n	8007316 <_printf_i+0x192>
 800731e:	8019      	strh	r1, [r3, #0]
 8007320:	2300      	movs	r3, #0
 8007322:	4665      	mov	r5, ip
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	e7b9      	b.n	800729c <_printf_i+0x118>
 8007328:	6813      	ldr	r3, [r2, #0]
 800732a:	1d19      	adds	r1, r3, #4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	681d      	ldr	r5, [r3, #0]
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	2100      	movs	r1, #0
 8007334:	4628      	mov	r0, r5
 8007336:	f000 feb1 	bl	800809c <memchr>
 800733a:	b108      	cbz	r0, 8007340 <_printf_i+0x1bc>
 800733c:	1b40      	subs	r0, r0, r5
 800733e:	6060      	str	r0, [r4, #4]
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	2300      	movs	r3, #0
 8007346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734a:	e7a7      	b.n	800729c <_printf_i+0x118>
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	462a      	mov	r2, r5
 8007350:	4639      	mov	r1, r7
 8007352:	4630      	mov	r0, r6
 8007354:	47c0      	blx	r8
 8007356:	3001      	adds	r0, #1
 8007358:	d0aa      	beq.n	80072b0 <_printf_i+0x12c>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	079b      	lsls	r3, r3, #30
 800735e:	d413      	bmi.n	8007388 <_printf_i+0x204>
 8007360:	68e0      	ldr	r0, [r4, #12]
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	4298      	cmp	r0, r3
 8007366:	bfb8      	it	lt
 8007368:	4618      	movlt	r0, r3
 800736a:	e7a3      	b.n	80072b4 <_printf_i+0x130>
 800736c:	2301      	movs	r3, #1
 800736e:	464a      	mov	r2, r9
 8007370:	4639      	mov	r1, r7
 8007372:	4630      	mov	r0, r6
 8007374:	47c0      	blx	r8
 8007376:	3001      	adds	r0, #1
 8007378:	d09a      	beq.n	80072b0 <_printf_i+0x12c>
 800737a:	3501      	adds	r5, #1
 800737c:	68e3      	ldr	r3, [r4, #12]
 800737e:	9a03      	ldr	r2, [sp, #12]
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	42ab      	cmp	r3, r5
 8007384:	dcf2      	bgt.n	800736c <_printf_i+0x1e8>
 8007386:	e7eb      	b.n	8007360 <_printf_i+0x1dc>
 8007388:	2500      	movs	r5, #0
 800738a:	f104 0919 	add.w	r9, r4, #25
 800738e:	e7f5      	b.n	800737c <_printf_i+0x1f8>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ac      	bne.n	80072ee <_printf_i+0x16a>
 8007394:	7803      	ldrb	r3, [r0, #0]
 8007396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800739e:	e76c      	b.n	800727a <_printf_i+0xf6>
 80073a0:	08008d86 	.word	0x08008d86
 80073a4:	08008d97 	.word	0x08008d97

080073a8 <siprintf>:
 80073a8:	b40e      	push	{r1, r2, r3}
 80073aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073ae:	b500      	push	{lr}
 80073b0:	b09c      	sub	sp, #112	; 0x70
 80073b2:	ab1d      	add	r3, sp, #116	; 0x74
 80073b4:	9002      	str	r0, [sp, #8]
 80073b6:	9006      	str	r0, [sp, #24]
 80073b8:	9107      	str	r1, [sp, #28]
 80073ba:	9104      	str	r1, [sp, #16]
 80073bc:	4808      	ldr	r0, [pc, #32]	; (80073e0 <siprintf+0x38>)
 80073be:	4909      	ldr	r1, [pc, #36]	; (80073e4 <siprintf+0x3c>)
 80073c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c4:	9105      	str	r1, [sp, #20]
 80073c6:	6800      	ldr	r0, [r0, #0]
 80073c8:	a902      	add	r1, sp, #8
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f001 fa6a 	bl	80088a4 <_svfiprintf_r>
 80073d0:	2200      	movs	r2, #0
 80073d2:	9b02      	ldr	r3, [sp, #8]
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	b01c      	add	sp, #112	; 0x70
 80073d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073dc:	b003      	add	sp, #12
 80073de:	4770      	bx	lr
 80073e0:	20000010 	.word	0x20000010
 80073e4:	ffff0208 	.word	0xffff0208

080073e8 <quorem>:
 80073e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	6903      	ldr	r3, [r0, #16]
 80073ee:	690c      	ldr	r4, [r1, #16]
 80073f0:	4680      	mov	r8, r0
 80073f2:	42a3      	cmp	r3, r4
 80073f4:	f2c0 8084 	blt.w	8007500 <quorem+0x118>
 80073f8:	3c01      	subs	r4, #1
 80073fa:	f101 0714 	add.w	r7, r1, #20
 80073fe:	f100 0614 	add.w	r6, r0, #20
 8007402:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800740a:	3501      	adds	r5, #1
 800740c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007410:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007414:	eb06 030c 	add.w	r3, r6, ip
 8007418:	eb07 090c 	add.w	r9, r7, ip
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	b39d      	cbz	r5, 8007488 <quorem+0xa0>
 8007420:	f04f 0a00 	mov.w	sl, #0
 8007424:	4638      	mov	r0, r7
 8007426:	46b6      	mov	lr, r6
 8007428:	46d3      	mov	fp, sl
 800742a:	f850 2b04 	ldr.w	r2, [r0], #4
 800742e:	b293      	uxth	r3, r2
 8007430:	fb05 a303 	mla	r3, r5, r3, sl
 8007434:	0c12      	lsrs	r2, r2, #16
 8007436:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800743a:	fb05 a202 	mla	r2, r5, r2, sl
 800743e:	b29b      	uxth	r3, r3
 8007440:	ebab 0303 	sub.w	r3, fp, r3
 8007444:	f8de b000 	ldr.w	fp, [lr]
 8007448:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800744c:	fa1f fb8b 	uxth.w	fp, fp
 8007450:	445b      	add	r3, fp
 8007452:	fa1f fb82 	uxth.w	fp, r2
 8007456:	f8de 2000 	ldr.w	r2, [lr]
 800745a:	4581      	cmp	r9, r0
 800745c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800746e:	f84e 3b04 	str.w	r3, [lr], #4
 8007472:	d2da      	bcs.n	800742a <quorem+0x42>
 8007474:	f856 300c 	ldr.w	r3, [r6, ip]
 8007478:	b933      	cbnz	r3, 8007488 <quorem+0xa0>
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	3b04      	subs	r3, #4
 800747e:	429e      	cmp	r6, r3
 8007480:	461a      	mov	r2, r3
 8007482:	d331      	bcc.n	80074e8 <quorem+0x100>
 8007484:	f8c8 4010 	str.w	r4, [r8, #16]
 8007488:	4640      	mov	r0, r8
 800748a:	f001 f835 	bl	80084f8 <__mcmp>
 800748e:	2800      	cmp	r0, #0
 8007490:	db26      	blt.n	80074e0 <quorem+0xf8>
 8007492:	4630      	mov	r0, r6
 8007494:	f04f 0c00 	mov.w	ip, #0
 8007498:	3501      	adds	r5, #1
 800749a:	f857 1b04 	ldr.w	r1, [r7], #4
 800749e:	f8d0 e000 	ldr.w	lr, [r0]
 80074a2:	b28b      	uxth	r3, r1
 80074a4:	ebac 0303 	sub.w	r3, ip, r3
 80074a8:	fa1f f28e 	uxth.w	r2, lr
 80074ac:	4413      	add	r3, r2
 80074ae:	0c0a      	lsrs	r2, r1, #16
 80074b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074be:	45b9      	cmp	r9, r7
 80074c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074c4:	f840 3b04 	str.w	r3, [r0], #4
 80074c8:	d2e7      	bcs.n	800749a <quorem+0xb2>
 80074ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074d2:	b92a      	cbnz	r2, 80074e0 <quorem+0xf8>
 80074d4:	3b04      	subs	r3, #4
 80074d6:	429e      	cmp	r6, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	d30b      	bcc.n	80074f4 <quorem+0x10c>
 80074dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80074e0:	4628      	mov	r0, r5
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	3b04      	subs	r3, #4
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	d1c9      	bne.n	8007484 <quorem+0x9c>
 80074f0:	3c01      	subs	r4, #1
 80074f2:	e7c4      	b.n	800747e <quorem+0x96>
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	3b04      	subs	r3, #4
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d1ef      	bne.n	80074dc <quorem+0xf4>
 80074fc:	3c01      	subs	r4, #1
 80074fe:	e7ea      	b.n	80074d6 <quorem+0xee>
 8007500:	2000      	movs	r0, #0
 8007502:	e7ee      	b.n	80074e2 <quorem+0xfa>
 8007504:	0000      	movs	r0, r0
	...

08007508 <_dtoa_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	4616      	mov	r6, r2
 800750e:	461f      	mov	r7, r3
 8007510:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007512:	b095      	sub	sp, #84	; 0x54
 8007514:	4604      	mov	r4, r0
 8007516:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800751a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800751e:	b93d      	cbnz	r5, 8007530 <_dtoa_r+0x28>
 8007520:	2010      	movs	r0, #16
 8007522:	f000 fdb3 	bl	800808c <malloc>
 8007526:	6260      	str	r0, [r4, #36]	; 0x24
 8007528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800752c:	6005      	str	r5, [r0, #0]
 800752e:	60c5      	str	r5, [r0, #12]
 8007530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	b151      	cbz	r1, 800754c <_dtoa_r+0x44>
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	2301      	movs	r3, #1
 800753a:	4093      	lsls	r3, r2
 800753c:	604a      	str	r2, [r1, #4]
 800753e:	608b      	str	r3, [r1, #8]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fdf8 	bl	8008136 <_Bfree>
 8007546:	2200      	movs	r2, #0
 8007548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	1e3b      	subs	r3, r7, #0
 800754e:	bfaf      	iteee	ge
 8007550:	2300      	movge	r3, #0
 8007552:	2201      	movlt	r2, #1
 8007554:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007558:	9303      	strlt	r3, [sp, #12]
 800755a:	bfac      	ite	ge
 800755c:	f8c8 3000 	strge.w	r3, [r8]
 8007560:	f8c8 2000 	strlt.w	r2, [r8]
 8007564:	4bae      	ldr	r3, [pc, #696]	; (8007820 <_dtoa_r+0x318>)
 8007566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800756a:	ea33 0308 	bics.w	r3, r3, r8
 800756e:	d11b      	bne.n	80075a8 <_dtoa_r+0xa0>
 8007570:	f242 730f 	movw	r3, #9999	; 0x270f
 8007574:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	b923      	cbnz	r3, 8007586 <_dtoa_r+0x7e>
 800757c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007580:	2800      	cmp	r0, #0
 8007582:	f000 8545 	beq.w	8008010 <_dtoa_r+0xb08>
 8007586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007588:	b953      	cbnz	r3, 80075a0 <_dtoa_r+0x98>
 800758a:	4ba6      	ldr	r3, [pc, #664]	; (8007824 <_dtoa_r+0x31c>)
 800758c:	e021      	b.n	80075d2 <_dtoa_r+0xca>
 800758e:	4ba6      	ldr	r3, [pc, #664]	; (8007828 <_dtoa_r+0x320>)
 8007590:	9306      	str	r3, [sp, #24]
 8007592:	3308      	adds	r3, #8
 8007594:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	9806      	ldr	r0, [sp, #24]
 800759a:	b015      	add	sp, #84	; 0x54
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	4ba0      	ldr	r3, [pc, #640]	; (8007824 <_dtoa_r+0x31c>)
 80075a2:	9306      	str	r3, [sp, #24]
 80075a4:	3303      	adds	r3, #3
 80075a6:	e7f5      	b.n	8007594 <_dtoa_r+0x8c>
 80075a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2300      	movs	r3, #0
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f9 f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80075b8:	4682      	mov	sl, r0
 80075ba:	b160      	cbz	r0, 80075d6 <_dtoa_r+0xce>
 80075bc:	2301      	movs	r3, #1
 80075be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8520 	beq.w	800800a <_dtoa_r+0xb02>
 80075ca:	4b98      	ldr	r3, [pc, #608]	; (800782c <_dtoa_r+0x324>)
 80075cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	e7e0      	b.n	8007598 <_dtoa_r+0x90>
 80075d6:	ab12      	add	r3, sp, #72	; 0x48
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	ab13      	add	r3, sp, #76	; 0x4c
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4632      	mov	r2, r6
 80075e0:	463b      	mov	r3, r7
 80075e2:	4620      	mov	r0, r4
 80075e4:	f001 f800 	bl	80085e8 <__d2b>
 80075e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075ec:	4683      	mov	fp, r0
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d07d      	beq.n	80076ee <_dtoa_r+0x1e6>
 80075f2:	46b0      	mov	r8, r6
 80075f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80075fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007600:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007604:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007608:	2200      	movs	r2, #0
 800760a:	4b89      	ldr	r3, [pc, #548]	; (8007830 <_dtoa_r+0x328>)
 800760c:	4640      	mov	r0, r8
 800760e:	4649      	mov	r1, r9
 8007610:	f7f8 fdaa 	bl	8000168 <__aeabi_dsub>
 8007614:	a37c      	add	r3, pc, #496	; (adr r3, 8007808 <_dtoa_r+0x300>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f8 ff5d 	bl	80004d8 <__aeabi_dmul>
 800761e:	a37c      	add	r3, pc, #496	; (adr r3, 8007810 <_dtoa_r+0x308>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f7f8 fda2 	bl	800016c <__adddf3>
 8007628:	4606      	mov	r6, r0
 800762a:	4628      	mov	r0, r5
 800762c:	460f      	mov	r7, r1
 800762e:	f7f8 fee9 	bl	8000404 <__aeabi_i2d>
 8007632:	a379      	add	r3, pc, #484	; (adr r3, 8007818 <_dtoa_r+0x310>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f8 ff4e 	bl	80004d8 <__aeabi_dmul>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4630      	mov	r0, r6
 8007642:	4639      	mov	r1, r7
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	4606      	mov	r6, r0
 800764a:	460f      	mov	r7, r1
 800764c:	f7f9 f9f4 	bl	8000a38 <__aeabi_d2iz>
 8007650:	2200      	movs	r2, #0
 8007652:	4682      	mov	sl, r0
 8007654:	2300      	movs	r3, #0
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f9 f9af 	bl	80009bc <__aeabi_dcmplt>
 800765e:	b148      	cbz	r0, 8007674 <_dtoa_r+0x16c>
 8007660:	4650      	mov	r0, sl
 8007662:	f7f8 fecf 	bl	8000404 <__aeabi_i2d>
 8007666:	4632      	mov	r2, r6
 8007668:	463b      	mov	r3, r7
 800766a:	f7f9 f99d 	bl	80009a8 <__aeabi_dcmpeq>
 800766e:	b908      	cbnz	r0, 8007674 <_dtoa_r+0x16c>
 8007670:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007674:	f1ba 0f16 	cmp.w	sl, #22
 8007678:	d85a      	bhi.n	8007730 <_dtoa_r+0x228>
 800767a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767e:	496d      	ldr	r1, [pc, #436]	; (8007834 <_dtoa_r+0x32c>)
 8007680:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007688:	f7f9 f9b6 	bl	80009f8 <__aeabi_dcmpgt>
 800768c:	2800      	cmp	r0, #0
 800768e:	d051      	beq.n	8007734 <_dtoa_r+0x22c>
 8007690:	2300      	movs	r3, #0
 8007692:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007696:	930d      	str	r3, [sp, #52]	; 0x34
 8007698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800769a:	1b5d      	subs	r5, r3, r5
 800769c:	1e6b      	subs	r3, r5, #1
 800769e:	9307      	str	r3, [sp, #28]
 80076a0:	bf43      	ittte	mi
 80076a2:	2300      	movmi	r3, #0
 80076a4:	f1c5 0901 	rsbmi	r9, r5, #1
 80076a8:	9307      	strmi	r3, [sp, #28]
 80076aa:	f04f 0900 	movpl.w	r9, #0
 80076ae:	f1ba 0f00 	cmp.w	sl, #0
 80076b2:	db41      	blt.n	8007738 <_dtoa_r+0x230>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80076ba:	4453      	add	r3, sl
 80076bc:	9307      	str	r3, [sp, #28]
 80076be:	2300      	movs	r3, #0
 80076c0:	9308      	str	r3, [sp, #32]
 80076c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076c4:	2b09      	cmp	r3, #9
 80076c6:	f200 808f 	bhi.w	80077e8 <_dtoa_r+0x2e0>
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	bfc4      	itt	gt
 80076ce:	3b04      	subgt	r3, #4
 80076d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80076d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80076d4:	bfc8      	it	gt
 80076d6:	2500      	movgt	r5, #0
 80076d8:	f1a3 0302 	sub.w	r3, r3, #2
 80076dc:	bfd8      	it	le
 80076de:	2501      	movle	r5, #1
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	f200 808d 	bhi.w	8007800 <_dtoa_r+0x2f8>
 80076e6:	e8df f003 	tbb	[pc, r3]
 80076ea:	7d7b      	.short	0x7d7b
 80076ec:	6f2f      	.short	0x6f2f
 80076ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80076f2:	441d      	add	r5, r3
 80076f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076f8:	2820      	cmp	r0, #32
 80076fa:	dd13      	ble.n	8007724 <_dtoa_r+0x21c>
 80076fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007700:	9b02      	ldr	r3, [sp, #8]
 8007702:	fa08 f800 	lsl.w	r8, r8, r0
 8007706:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800770a:	fa23 f000 	lsr.w	r0, r3, r0
 800770e:	ea48 0000 	orr.w	r0, r8, r0
 8007712:	f7f8 fe67 	bl	80003e4 <__aeabi_ui2d>
 8007716:	2301      	movs	r3, #1
 8007718:	4680      	mov	r8, r0
 800771a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800771e:	3d01      	subs	r5, #1
 8007720:	9310      	str	r3, [sp, #64]	; 0x40
 8007722:	e771      	b.n	8007608 <_dtoa_r+0x100>
 8007724:	9b02      	ldr	r3, [sp, #8]
 8007726:	f1c0 0020 	rsb	r0, r0, #32
 800772a:	fa03 f000 	lsl.w	r0, r3, r0
 800772e:	e7f0      	b.n	8007712 <_dtoa_r+0x20a>
 8007730:	2301      	movs	r3, #1
 8007732:	e7b0      	b.n	8007696 <_dtoa_r+0x18e>
 8007734:	900d      	str	r0, [sp, #52]	; 0x34
 8007736:	e7af      	b.n	8007698 <_dtoa_r+0x190>
 8007738:	f1ca 0300 	rsb	r3, sl, #0
 800773c:	9308      	str	r3, [sp, #32]
 800773e:	2300      	movs	r3, #0
 8007740:	eba9 090a 	sub.w	r9, r9, sl
 8007744:	930c      	str	r3, [sp, #48]	; 0x30
 8007746:	e7bc      	b.n	80076c2 <_dtoa_r+0x1ba>
 8007748:	2301      	movs	r3, #1
 800774a:	9309      	str	r3, [sp, #36]	; 0x24
 800774c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800774e:	2b00      	cmp	r3, #0
 8007750:	dd74      	ble.n	800783c <_dtoa_r+0x334>
 8007752:	4698      	mov	r8, r3
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	2200      	movs	r2, #0
 8007758:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800775a:	6072      	str	r2, [r6, #4]
 800775c:	2204      	movs	r2, #4
 800775e:	f102 0014 	add.w	r0, r2, #20
 8007762:	4298      	cmp	r0, r3
 8007764:	6871      	ldr	r1, [r6, #4]
 8007766:	d96e      	bls.n	8007846 <_dtoa_r+0x33e>
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fcb0 	bl	80080ce <_Balloc>
 800776e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f1b8 0f0e 	cmp.w	r8, #14
 8007778:	9306      	str	r3, [sp, #24]
 800777a:	f200 80ed 	bhi.w	8007958 <_dtoa_r+0x450>
 800777e:	2d00      	cmp	r5, #0
 8007780:	f000 80ea 	beq.w	8007958 <_dtoa_r+0x450>
 8007784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007790:	dd77      	ble.n	8007882 <_dtoa_r+0x37a>
 8007792:	4a28      	ldr	r2, [pc, #160]	; (8007834 <_dtoa_r+0x32c>)
 8007794:	f00a 030f 	and.w	r3, sl, #15
 8007798:	ea4f 162a 	mov.w	r6, sl, asr #4
 800779c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077a0:	06f0      	lsls	r0, r6, #27
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80077aa:	d568      	bpl.n	800787e <_dtoa_r+0x376>
 80077ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80077b0:	4b21      	ldr	r3, [pc, #132]	; (8007838 <_dtoa_r+0x330>)
 80077b2:	2503      	movs	r5, #3
 80077b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077b8:	f7f8 ffb8 	bl	800072c <__aeabi_ddiv>
 80077bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077c0:	f006 060f 	and.w	r6, r6, #15
 80077c4:	4f1c      	ldr	r7, [pc, #112]	; (8007838 <_dtoa_r+0x330>)
 80077c6:	e04f      	b.n	8007868 <_dtoa_r+0x360>
 80077c8:	2301      	movs	r3, #1
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077ce:	4453      	add	r3, sl
 80077d0:	f103 0801 	add.w	r8, r3, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	4643      	mov	r3, r8
 80077d8:	2b01      	cmp	r3, #1
 80077da:	bfb8      	it	lt
 80077dc:	2301      	movlt	r3, #1
 80077de:	e7ba      	b.n	8007756 <_dtoa_r+0x24e>
 80077e0:	2300      	movs	r3, #0
 80077e2:	e7b2      	b.n	800774a <_dtoa_r+0x242>
 80077e4:	2300      	movs	r3, #0
 80077e6:	e7f0      	b.n	80077ca <_dtoa_r+0x2c2>
 80077e8:	2501      	movs	r5, #1
 80077ea:	2300      	movs	r3, #0
 80077ec:	9509      	str	r5, [sp, #36]	; 0x24
 80077ee:	931e      	str	r3, [sp, #120]	; 0x78
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077f4:	2200      	movs	r2, #0
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	4698      	mov	r8, r3
 80077fa:	2312      	movs	r3, #18
 80077fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80077fe:	e7aa      	b.n	8007756 <_dtoa_r+0x24e>
 8007800:	2301      	movs	r3, #1
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
 8007804:	e7f4      	b.n	80077f0 <_dtoa_r+0x2e8>
 8007806:	bf00      	nop
 8007808:	636f4361 	.word	0x636f4361
 800780c:	3fd287a7 	.word	0x3fd287a7
 8007810:	8b60c8b3 	.word	0x8b60c8b3
 8007814:	3fc68a28 	.word	0x3fc68a28
 8007818:	509f79fb 	.word	0x509f79fb
 800781c:	3fd34413 	.word	0x3fd34413
 8007820:	7ff00000 	.word	0x7ff00000
 8007824:	08008db1 	.word	0x08008db1
 8007828:	08008da8 	.word	0x08008da8
 800782c:	08008d85 	.word	0x08008d85
 8007830:	3ff80000 	.word	0x3ff80000
 8007834:	08008de0 	.word	0x08008de0
 8007838:	08008db8 	.word	0x08008db8
 800783c:	2301      	movs	r3, #1
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	4698      	mov	r8, r3
 8007842:	461a      	mov	r2, r3
 8007844:	e7da      	b.n	80077fc <_dtoa_r+0x2f4>
 8007846:	3101      	adds	r1, #1
 8007848:	6071      	str	r1, [r6, #4]
 800784a:	0052      	lsls	r2, r2, #1
 800784c:	e787      	b.n	800775e <_dtoa_r+0x256>
 800784e:	07f1      	lsls	r1, r6, #31
 8007850:	d508      	bpl.n	8007864 <_dtoa_r+0x35c>
 8007852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800785a:	f7f8 fe3d 	bl	80004d8 <__aeabi_dmul>
 800785e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007862:	3501      	adds	r5, #1
 8007864:	1076      	asrs	r6, r6, #1
 8007866:	3708      	adds	r7, #8
 8007868:	2e00      	cmp	r6, #0
 800786a:	d1f0      	bne.n	800784e <_dtoa_r+0x346>
 800786c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007874:	f7f8 ff5a 	bl	800072c <__aeabi_ddiv>
 8007878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800787c:	e01b      	b.n	80078b6 <_dtoa_r+0x3ae>
 800787e:	2502      	movs	r5, #2
 8007880:	e7a0      	b.n	80077c4 <_dtoa_r+0x2bc>
 8007882:	f000 80a4 	beq.w	80079ce <_dtoa_r+0x4c6>
 8007886:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800788a:	f1ca 0600 	rsb	r6, sl, #0
 800788e:	4ba0      	ldr	r3, [pc, #640]	; (8007b10 <_dtoa_r+0x608>)
 8007890:	f006 020f 	and.w	r2, r6, #15
 8007894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f8 fe1c 	bl	80004d8 <__aeabi_dmul>
 80078a0:	2502      	movs	r5, #2
 80078a2:	2300      	movs	r3, #0
 80078a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a8:	4f9a      	ldr	r7, [pc, #616]	; (8007b14 <_dtoa_r+0x60c>)
 80078aa:	1136      	asrs	r6, r6, #4
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	f040 8083 	bne.w	80079b8 <_dtoa_r+0x4b0>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e0      	bne.n	8007878 <_dtoa_r+0x370>
 80078b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 808a 	beq.w	80079d2 <_dtoa_r+0x4ca>
 80078be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80078c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ca:	2200      	movs	r2, #0
 80078cc:	4b92      	ldr	r3, [pc, #584]	; (8007b18 <_dtoa_r+0x610>)
 80078ce:	f7f9 f875 	bl	80009bc <__aeabi_dcmplt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d07d      	beq.n	80079d2 <_dtoa_r+0x4ca>
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	d07a      	beq.n	80079d2 <_dtoa_r+0x4ca>
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd36      	ble.n	8007950 <_dtoa_r+0x448>
 80078e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078e6:	2200      	movs	r2, #0
 80078e8:	4b8c      	ldr	r3, [pc, #560]	; (8007b1c <_dtoa_r+0x614>)
 80078ea:	f7f8 fdf5 	bl	80004d8 <__aeabi_dmul>
 80078ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f2:	9e04      	ldr	r6, [sp, #16]
 80078f4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80078f8:	3501      	adds	r5, #1
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7f8 fd82 	bl	8000404 <__aeabi_i2d>
 8007900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	2200      	movs	r2, #0
 800790a:	4b85      	ldr	r3, [pc, #532]	; (8007b20 <_dtoa_r+0x618>)
 800790c:	f7f8 fc2e 	bl	800016c <__adddf3>
 8007910:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007914:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007918:	950b      	str	r5, [sp, #44]	; 0x2c
 800791a:	2e00      	cmp	r6, #0
 800791c:	d15c      	bne.n	80079d8 <_dtoa_r+0x4d0>
 800791e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	4b7f      	ldr	r3, [pc, #508]	; (8007b24 <_dtoa_r+0x61c>)
 8007926:	f7f8 fc1f 	bl	8000168 <__aeabi_dsub>
 800792a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792c:	462b      	mov	r3, r5
 800792e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007932:	f7f9 f861 	bl	80009f8 <__aeabi_dcmpgt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f040 8281 	bne.w	8007e3e <_dtoa_r+0x936>
 800793c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007942:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007946:	f7f9 f839 	bl	80009bc <__aeabi_dcmplt>
 800794a:	2800      	cmp	r0, #0
 800794c:	f040 8275 	bne.w	8007e3a <_dtoa_r+0x932>
 8007950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800795a:	2b00      	cmp	r3, #0
 800795c:	f2c0 814b 	blt.w	8007bf6 <_dtoa_r+0x6ee>
 8007960:	f1ba 0f0e 	cmp.w	sl, #14
 8007964:	f300 8147 	bgt.w	8007bf6 <_dtoa_r+0x6ee>
 8007968:	4b69      	ldr	r3, [pc, #420]	; (8007b10 <_dtoa_r+0x608>)
 800796a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007978:	2b00      	cmp	r3, #0
 800797a:	f280 80d7 	bge.w	8007b2c <_dtoa_r+0x624>
 800797e:	f1b8 0f00 	cmp.w	r8, #0
 8007982:	f300 80d3 	bgt.w	8007b2c <_dtoa_r+0x624>
 8007986:	f040 8257 	bne.w	8007e38 <_dtoa_r+0x930>
 800798a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800798e:	2200      	movs	r2, #0
 8007990:	4b64      	ldr	r3, [pc, #400]	; (8007b24 <_dtoa_r+0x61c>)
 8007992:	f7f8 fda1 	bl	80004d8 <__aeabi_dmul>
 8007996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800799a:	f7f9 f823 	bl	80009e4 <__aeabi_dcmpge>
 800799e:	4646      	mov	r6, r8
 80079a0:	4647      	mov	r7, r8
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f040 822d 	bne.w	8007e02 <_dtoa_r+0x8fa>
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	9a06      	ldr	r2, [sp, #24]
 80079ac:	1c5d      	adds	r5, r3, #1
 80079ae:	2331      	movs	r3, #49	; 0x31
 80079b0:	f10a 0a01 	add.w	sl, sl, #1
 80079b4:	7013      	strb	r3, [r2, #0]
 80079b6:	e228      	b.n	8007e0a <_dtoa_r+0x902>
 80079b8:	07f2      	lsls	r2, r6, #31
 80079ba:	d505      	bpl.n	80079c8 <_dtoa_r+0x4c0>
 80079bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c0:	f7f8 fd8a 	bl	80004d8 <__aeabi_dmul>
 80079c4:	2301      	movs	r3, #1
 80079c6:	3501      	adds	r5, #1
 80079c8:	1076      	asrs	r6, r6, #1
 80079ca:	3708      	adds	r7, #8
 80079cc:	e76e      	b.n	80078ac <_dtoa_r+0x3a4>
 80079ce:	2502      	movs	r5, #2
 80079d0:	e771      	b.n	80078b6 <_dtoa_r+0x3ae>
 80079d2:	4657      	mov	r7, sl
 80079d4:	4646      	mov	r6, r8
 80079d6:	e790      	b.n	80078fa <_dtoa_r+0x3f2>
 80079d8:	4b4d      	ldr	r3, [pc, #308]	; (8007b10 <_dtoa_r+0x608>)
 80079da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80079e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d048      	beq.n	8007a7a <_dtoa_r+0x572>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	2000      	movs	r0, #0
 80079ee:	494e      	ldr	r1, [pc, #312]	; (8007b28 <_dtoa_r+0x620>)
 80079f0:	f7f8 fe9c 	bl	800072c <__aeabi_ddiv>
 80079f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079f8:	f7f8 fbb6 	bl	8000168 <__aeabi_dsub>
 80079fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a00:	9d06      	ldr	r5, [sp, #24]
 8007a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a06:	f7f9 f817 	bl	8000a38 <__aeabi_d2iz>
 8007a0a:	9011      	str	r0, [sp, #68]	; 0x44
 8007a0c:	f7f8 fcfa 	bl	8000404 <__aeabi_i2d>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a18:	f7f8 fba6 	bl	8000168 <__aeabi_dsub>
 8007a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a22:	3330      	adds	r3, #48	; 0x30
 8007a24:	f805 3b01 	strb.w	r3, [r5], #1
 8007a28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a2c:	f7f8 ffc6 	bl	80009bc <__aeabi_dcmplt>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d163      	bne.n	8007afc <_dtoa_r+0x5f4>
 8007a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	4937      	ldr	r1, [pc, #220]	; (8007b18 <_dtoa_r+0x610>)
 8007a3c:	f7f8 fb94 	bl	8000168 <__aeabi_dsub>
 8007a40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a44:	f7f8 ffba 	bl	80009bc <__aeabi_dcmplt>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f040 80b5 	bne.w	8007bb8 <_dtoa_r+0x6b0>
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	1aeb      	subs	r3, r5, r3
 8007a52:	429e      	cmp	r6, r3
 8007a54:	f77f af7c 	ble.w	8007950 <_dtoa_r+0x448>
 8007a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <_dtoa_r+0x614>)
 8007a60:	f7f8 fd3a 	bl	80004d8 <__aeabi_dmul>
 8007a64:	2200      	movs	r2, #0
 8007a66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6e:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <_dtoa_r+0x614>)
 8007a70:	f7f8 fd32 	bl	80004d8 <__aeabi_dmul>
 8007a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a78:	e7c3      	b.n	8007a02 <_dtoa_r+0x4fa>
 8007a7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a7e:	f7f8 fd2b 	bl	80004d8 <__aeabi_dmul>
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a88:	199d      	adds	r5, r3, r6
 8007a8a:	461e      	mov	r6, r3
 8007a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a90:	f7f8 ffd2 	bl	8000a38 <__aeabi_d2iz>
 8007a94:	9011      	str	r0, [sp, #68]	; 0x44
 8007a96:	f7f8 fcb5 	bl	8000404 <__aeabi_i2d>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa2:	f7f8 fb61 	bl	8000168 <__aeabi_dsub>
 8007aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aac:	3330      	adds	r3, #48	; 0x30
 8007aae:	f806 3b01 	strb.w	r3, [r6], #1
 8007ab2:	42ae      	cmp	r6, r5
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	d124      	bne.n	8007b04 <_dtoa_r+0x5fc>
 8007aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <_dtoa_r+0x620>)
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007acc:	f7f8 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d171      	bne.n	8007bb8 <_dtoa_r+0x6b0>
 8007ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4913      	ldr	r1, [pc, #76]	; (8007b28 <_dtoa_r+0x620>)
 8007adc:	f7f8 fb44 	bl	8000168 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae8:	f7f8 ff68 	bl	80009bc <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f af2f 	beq.w	8007950 <_dtoa_r+0x448>
 8007af2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007af6:	1e6a      	subs	r2, r5, #1
 8007af8:	2b30      	cmp	r3, #48	; 0x30
 8007afa:	d001      	beq.n	8007b00 <_dtoa_r+0x5f8>
 8007afc:	46ba      	mov	sl, r7
 8007afe:	e04a      	b.n	8007b96 <_dtoa_r+0x68e>
 8007b00:	4615      	mov	r5, r2
 8007b02:	e7f6      	b.n	8007af2 <_dtoa_r+0x5ea>
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <_dtoa_r+0x614>)
 8007b06:	f7f8 fce7 	bl	80004d8 <__aeabi_dmul>
 8007b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b0e:	e7bd      	b.n	8007a8c <_dtoa_r+0x584>
 8007b10:	08008de0 	.word	0x08008de0
 8007b14:	08008db8 	.word	0x08008db8
 8007b18:	3ff00000 	.word	0x3ff00000
 8007b1c:	40240000 	.word	0x40240000
 8007b20:	401c0000 	.word	0x401c0000
 8007b24:	40140000 	.word	0x40140000
 8007b28:	3fe00000 	.word	0x3fe00000
 8007b2c:	9d06      	ldr	r5, [sp, #24]
 8007b2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fdf7 	bl	800072c <__aeabi_ddiv>
 8007b3e:	f7f8 ff7b 	bl	8000a38 <__aeabi_d2iz>
 8007b42:	4681      	mov	r9, r0
 8007b44:	f7f8 fc5e 	bl	8000404 <__aeabi_i2d>
 8007b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4c:	f7f8 fcc4 	bl	80004d8 <__aeabi_dmul>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f8 fb06 	bl	8000168 <__aeabi_dsub>
 8007b5c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007b60:	f805 6b01 	strb.w	r6, [r5], #1
 8007b64:	9e06      	ldr	r6, [sp, #24]
 8007b66:	4602      	mov	r2, r0
 8007b68:	1bae      	subs	r6, r5, r6
 8007b6a:	45b0      	cmp	r8, r6
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	d135      	bne.n	8007bdc <_dtoa_r+0x6d4>
 8007b70:	f7f8 fafc 	bl	800016c <__adddf3>
 8007b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 ff3c 	bl	80009f8 <__aeabi_dcmpgt>
 8007b80:	b9c8      	cbnz	r0, 8007bb6 <_dtoa_r+0x6ae>
 8007b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b86:	4630      	mov	r0, r6
 8007b88:	4639      	mov	r1, r7
 8007b8a:	f7f8 ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 8007b8e:	b110      	cbz	r0, 8007b96 <_dtoa_r+0x68e>
 8007b90:	f019 0f01 	tst.w	r9, #1
 8007b94:	d10f      	bne.n	8007bb6 <_dtoa_r+0x6ae>
 8007b96:	4659      	mov	r1, fp
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 facc 	bl	8008136 <_Bfree>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ba2:	702b      	strb	r3, [r5, #0]
 8007ba4:	f10a 0301 	add.w	r3, sl, #1
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f43f acf3 	beq.w	8007598 <_dtoa_r+0x90>
 8007bb2:	601d      	str	r5, [r3, #0]
 8007bb4:	e4f0      	b.n	8007598 <_dtoa_r+0x90>
 8007bb6:	4657      	mov	r7, sl
 8007bb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bbc:	1e6b      	subs	r3, r5, #1
 8007bbe:	2a39      	cmp	r2, #57	; 0x39
 8007bc0:	d106      	bne.n	8007bd0 <_dtoa_r+0x6c8>
 8007bc2:	9a06      	ldr	r2, [sp, #24]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d107      	bne.n	8007bd8 <_dtoa_r+0x6d0>
 8007bc8:	2330      	movs	r3, #48	; 0x30
 8007bca:	7013      	strb	r3, [r2, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	3701      	adds	r7, #1
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e791      	b.n	8007afc <_dtoa_r+0x5f4>
 8007bd8:	461d      	mov	r5, r3
 8007bda:	e7ed      	b.n	8007bb8 <_dtoa_r+0x6b0>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4b99      	ldr	r3, [pc, #612]	; (8007e44 <_dtoa_r+0x93c>)
 8007be0:	f7f8 fc7a 	bl	80004d8 <__aeabi_dmul>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	f7f8 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d09e      	beq.n	8007b32 <_dtoa_r+0x62a>
 8007bf4:	e7cf      	b.n	8007b96 <_dtoa_r+0x68e>
 8007bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	f000 8088 	beq.w	8007d0e <_dtoa_r+0x806>
 8007bfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c00:	2a01      	cmp	r2, #1
 8007c02:	dc6d      	bgt.n	8007ce0 <_dtoa_r+0x7d8>
 8007c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d066      	beq.n	8007cd8 <_dtoa_r+0x7d0>
 8007c0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c0e:	464d      	mov	r5, r9
 8007c10:	9e08      	ldr	r6, [sp, #32]
 8007c12:	9a07      	ldr	r2, [sp, #28]
 8007c14:	2101      	movs	r1, #1
 8007c16:	441a      	add	r2, r3
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4499      	add	r9, r3
 8007c1c:	9207      	str	r2, [sp, #28]
 8007c1e:	f000 fb2a 	bl	8008276 <__i2b>
 8007c22:	4607      	mov	r7, r0
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	dd0b      	ble.n	8007c40 <_dtoa_r+0x738>
 8007c28:	9b07      	ldr	r3, [sp, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	dd08      	ble.n	8007c40 <_dtoa_r+0x738>
 8007c2e:	42ab      	cmp	r3, r5
 8007c30:	bfa8      	it	ge
 8007c32:	462b      	movge	r3, r5
 8007c34:	9a07      	ldr	r2, [sp, #28]
 8007c36:	eba9 0903 	sub.w	r9, r9, r3
 8007c3a:	1aed      	subs	r5, r5, r3
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	9b08      	ldr	r3, [sp, #32]
 8007c42:	b1eb      	cbz	r3, 8007c80 <_dtoa_r+0x778>
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d065      	beq.n	8007d16 <_dtoa_r+0x80e>
 8007c4a:	b18e      	cbz	r6, 8007c70 <_dtoa_r+0x768>
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	4632      	mov	r2, r6
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 fbaf 	bl	80083b4 <__pow5mult>
 8007c56:	465a      	mov	r2, fp
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fb13 	bl	8008288 <__multiply>
 8007c62:	4659      	mov	r1, fp
 8007c64:	900a      	str	r0, [sp, #40]	; 0x28
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fa65 	bl	8008136 <_Bfree>
 8007c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6e:	469b      	mov	fp, r3
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	1b9a      	subs	r2, r3, r6
 8007c74:	d004      	beq.n	8007c80 <_dtoa_r+0x778>
 8007c76:	4659      	mov	r1, fp
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fb9b 	bl	80083b4 <__pow5mult>
 8007c7e:	4683      	mov	fp, r0
 8007c80:	2101      	movs	r1, #1
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 faf7 	bl	8008276 <__i2b>
 8007c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 81c6 	beq.w	800801e <_dtoa_r+0xb16>
 8007c92:	461a      	mov	r2, r3
 8007c94:	4601      	mov	r1, r0
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 fb8c 	bl	80083b4 <__pow5mult>
 8007c9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	dc3e      	bgt.n	8007d22 <_dtoa_r+0x81a>
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d137      	bne.n	8007d1a <_dtoa_r+0x812>
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d134      	bne.n	8007d1e <_dtoa_r+0x816>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cba:	0d1b      	lsrs	r3, r3, #20
 8007cbc:	051b      	lsls	r3, r3, #20
 8007cbe:	b12b      	cbz	r3, 8007ccc <_dtoa_r+0x7c4>
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	f109 0901 	add.w	r9, r9, #1
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	9307      	str	r3, [sp, #28]
 8007cca:	2301      	movs	r3, #1
 8007ccc:	9308      	str	r3, [sp, #32]
 8007cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d128      	bne.n	8007d26 <_dtoa_r+0x81e>
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	e02e      	b.n	8007d36 <_dtoa_r+0x82e>
 8007cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cde:	e796      	b.n	8007c0e <_dtoa_r+0x706>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8007ce6:	42b3      	cmp	r3, r6
 8007ce8:	bfb7      	itett	lt
 8007cea:	9b08      	ldrlt	r3, [sp, #32]
 8007cec:	1b9e      	subge	r6, r3, r6
 8007cee:	1af2      	sublt	r2, r6, r3
 8007cf0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007cf2:	bfbf      	itttt	lt
 8007cf4:	9608      	strlt	r6, [sp, #32]
 8007cf6:	189b      	addlt	r3, r3, r2
 8007cf8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007cfa:	2600      	movlt	r6, #0
 8007cfc:	f1b8 0f00 	cmp.w	r8, #0
 8007d00:	bfb9      	ittee	lt
 8007d02:	eba9 0508 	sublt.w	r5, r9, r8
 8007d06:	2300      	movlt	r3, #0
 8007d08:	464d      	movge	r5, r9
 8007d0a:	4643      	movge	r3, r8
 8007d0c:	e781      	b.n	8007c12 <_dtoa_r+0x70a>
 8007d0e:	9e08      	ldr	r6, [sp, #32]
 8007d10:	464d      	mov	r5, r9
 8007d12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d14:	e786      	b.n	8007c24 <_dtoa_r+0x71c>
 8007d16:	9a08      	ldr	r2, [sp, #32]
 8007d18:	e7ad      	b.n	8007c76 <_dtoa_r+0x76e>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e7d6      	b.n	8007ccc <_dtoa_r+0x7c4>
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	e7d4      	b.n	8007ccc <_dtoa_r+0x7c4>
 8007d22:	2300      	movs	r3, #0
 8007d24:	9308      	str	r3, [sp, #32]
 8007d26:	6933      	ldr	r3, [r6, #16]
 8007d28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d2c:	6918      	ldr	r0, [r3, #16]
 8007d2e:	f000 fa54 	bl	80081da <__hi0bits>
 8007d32:	f1c0 0020 	rsb	r0, r0, #32
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	4418      	add	r0, r3
 8007d3a:	f010 001f 	ands.w	r0, r0, #31
 8007d3e:	d047      	beq.n	8007dd0 <_dtoa_r+0x8c8>
 8007d40:	f1c0 0320 	rsb	r3, r0, #32
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	dd3b      	ble.n	8007dc0 <_dtoa_r+0x8b8>
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	f1c0 001c 	rsb	r0, r0, #28
 8007d4e:	4481      	add	r9, r0
 8007d50:	4405      	add	r5, r0
 8007d52:	4403      	add	r3, r0
 8007d54:	9307      	str	r3, [sp, #28]
 8007d56:	f1b9 0f00 	cmp.w	r9, #0
 8007d5a:	dd05      	ble.n	8007d68 <_dtoa_r+0x860>
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	464a      	mov	r2, r9
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 fb75 	bl	8008450 <__lshift>
 8007d66:	4683      	mov	fp, r0
 8007d68:	9b07      	ldr	r3, [sp, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dd05      	ble.n	8007d7a <_dtoa_r+0x872>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	461a      	mov	r2, r3
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 fb6c 	bl	8008450 <__lshift>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	b353      	cbz	r3, 8007dd4 <_dtoa_r+0x8cc>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4658      	mov	r0, fp
 8007d82:	f000 fbb9 	bl	80084f8 <__mcmp>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	da24      	bge.n	8007dd4 <_dtoa_r+0x8cc>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4659      	mov	r1, fp
 8007d8e:	220a      	movs	r2, #10
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 f9e7 	bl	8008164 <__multadd>
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d9c:	4683      	mov	fp, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8144 	beq.w	800802c <_dtoa_r+0xb24>
 8007da4:	2300      	movs	r3, #0
 8007da6:	4639      	mov	r1, r7
 8007da8:	220a      	movs	r2, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f9da 	bl	8008164 <__multadd>
 8007db0:	9b04      	ldr	r3, [sp, #16]
 8007db2:	4607      	mov	r7, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dc4d      	bgt.n	8007e54 <_dtoa_r+0x94c>
 8007db8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	dd4a      	ble.n	8007e54 <_dtoa_r+0x94c>
 8007dbe:	e011      	b.n	8007de4 <_dtoa_r+0x8dc>
 8007dc0:	d0c9      	beq.n	8007d56 <_dtoa_r+0x84e>
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	331c      	adds	r3, #28
 8007dc6:	441a      	add	r2, r3
 8007dc8:	4499      	add	r9, r3
 8007dca:	441d      	add	r5, r3
 8007dcc:	4613      	mov	r3, r2
 8007dce:	e7c1      	b.n	8007d54 <_dtoa_r+0x84c>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	e7f6      	b.n	8007dc2 <_dtoa_r+0x8ba>
 8007dd4:	f1b8 0f00 	cmp.w	r8, #0
 8007dd8:	dc36      	bgt.n	8007e48 <_dtoa_r+0x940>
 8007dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	dd33      	ble.n	8007e48 <_dtoa_r+0x940>
 8007de0:	f8cd 8010 	str.w	r8, [sp, #16]
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	b963      	cbnz	r3, 8007e02 <_dtoa_r+0x8fa>
 8007de8:	4631      	mov	r1, r6
 8007dea:	2205      	movs	r2, #5
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 f9b9 	bl	8008164 <__multadd>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4606      	mov	r6, r0
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 fb7e 	bl	80084f8 <__mcmp>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f73f add3 	bgt.w	80079a8 <_dtoa_r+0x4a0>
 8007e02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e04:	9d06      	ldr	r5, [sp, #24]
 8007e06:	ea6f 0a03 	mvn.w	sl, r3
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 f990 	bl	8008136 <_Bfree>
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	f43f aebd 	beq.w	8007b96 <_dtoa_r+0x68e>
 8007e1c:	f1b9 0f00 	cmp.w	r9, #0
 8007e20:	d005      	beq.n	8007e2e <_dtoa_r+0x926>
 8007e22:	45b9      	cmp	r9, r7
 8007e24:	d003      	beq.n	8007e2e <_dtoa_r+0x926>
 8007e26:	4649      	mov	r1, r9
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f984 	bl	8008136 <_Bfree>
 8007e2e:	4639      	mov	r1, r7
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 f980 	bl	8008136 <_Bfree>
 8007e36:	e6ae      	b.n	8007b96 <_dtoa_r+0x68e>
 8007e38:	2600      	movs	r6, #0
 8007e3a:	4637      	mov	r7, r6
 8007e3c:	e7e1      	b.n	8007e02 <_dtoa_r+0x8fa>
 8007e3e:	46ba      	mov	sl, r7
 8007e40:	4637      	mov	r7, r6
 8007e42:	e5b1      	b.n	80079a8 <_dtoa_r+0x4a0>
 8007e44:	40240000 	.word	0x40240000
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80f3 	beq.w	800803a <_dtoa_r+0xb32>
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	dd05      	ble.n	8007e64 <_dtoa_r+0x95c>
 8007e58:	4639      	mov	r1, r7
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 faf7 	bl	8008450 <__lshift>
 8007e62:	4607      	mov	r7, r0
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d04c      	beq.n	8007f04 <_dtoa_r+0x9fc>
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 f92e 	bl	80080ce <_Balloc>
 8007e72:	4605      	mov	r5, r0
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	f107 010c 	add.w	r1, r7, #12
 8007e7a:	3202      	adds	r2, #2
 8007e7c:	0092      	lsls	r2, r2, #2
 8007e7e:	300c      	adds	r0, #12
 8007e80:	f000 f91a 	bl	80080b8 <memcpy>
 8007e84:	2201      	movs	r2, #1
 8007e86:	4629      	mov	r1, r5
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fae1 	bl	8008450 <__lshift>
 8007e8e:	46b9      	mov	r9, r7
 8007e90:	4607      	mov	r7, r0
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	9307      	str	r3, [sp, #28]
 8007e96:	9b02      	ldr	r3, [sp, #8]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	9308      	str	r3, [sp, #32]
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4658      	mov	r0, fp
 8007ea2:	f7ff faa1 	bl	80073e8 <quorem>
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f000 fb22 	bl	80084f8 <__mcmp>
 8007eb4:	463a      	mov	r2, r7
 8007eb6:	9002      	str	r0, [sp, #8]
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fb36 	bl	800852c <__mdiff>
 8007ec0:	68c3      	ldr	r3, [r0, #12]
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	bb03      	cbnz	r3, 8007f08 <_dtoa_r+0xa00>
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	9009      	str	r0, [sp, #36]	; 0x24
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f000 fb14 	bl	80084f8 <__mcmp>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eda:	f000 f92c 	bl	8008136 <_Bfree>
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	b9a3      	cbnz	r3, 8007f0c <_dtoa_r+0xa04>
 8007ee2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ee4:	b992      	cbnz	r2, 8007f0c <_dtoa_r+0xa04>
 8007ee6:	9a08      	ldr	r2, [sp, #32]
 8007ee8:	b982      	cbnz	r2, 8007f0c <_dtoa_r+0xa04>
 8007eea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eee:	d029      	beq.n	8007f44 <_dtoa_r+0xa3c>
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dd01      	ble.n	8007efa <_dtoa_r+0x9f2>
 8007ef6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007efa:	9b07      	ldr	r3, [sp, #28]
 8007efc:	1c5d      	adds	r5, r3, #1
 8007efe:	f883 8000 	strb.w	r8, [r3]
 8007f02:	e784      	b.n	8007e0e <_dtoa_r+0x906>
 8007f04:	4638      	mov	r0, r7
 8007f06:	e7c2      	b.n	8007e8e <_dtoa_r+0x986>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7e3      	b.n	8007ed4 <_dtoa_r+0x9cc>
 8007f0c:	9a02      	ldr	r2, [sp, #8]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	db04      	blt.n	8007f1c <_dtoa_r+0xa14>
 8007f12:	d123      	bne.n	8007f5c <_dtoa_r+0xa54>
 8007f14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f16:	bb0a      	cbnz	r2, 8007f5c <_dtoa_r+0xa54>
 8007f18:	9a08      	ldr	r2, [sp, #32]
 8007f1a:	b9fa      	cbnz	r2, 8007f5c <_dtoa_r+0xa54>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	ddec      	ble.n	8007efa <_dtoa_r+0x9f2>
 8007f20:	4659      	mov	r1, fp
 8007f22:	2201      	movs	r2, #1
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fa93 	bl	8008450 <__lshift>
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4683      	mov	fp, r0
 8007f2e:	f000 fae3 	bl	80084f8 <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dc03      	bgt.n	8007f3e <_dtoa_r+0xa36>
 8007f36:	d1e0      	bne.n	8007efa <_dtoa_r+0x9f2>
 8007f38:	f018 0f01 	tst.w	r8, #1
 8007f3c:	d0dd      	beq.n	8007efa <_dtoa_r+0x9f2>
 8007f3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f42:	d1d8      	bne.n	8007ef6 <_dtoa_r+0x9ee>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	9a07      	ldr	r2, [sp, #28]
 8007f48:	1c5d      	adds	r5, r3, #1
 8007f4a:	2339      	movs	r3, #57	; 0x39
 8007f4c:	7013      	strb	r3, [r2, #0]
 8007f4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f52:	1e6a      	subs	r2, r5, #1
 8007f54:	2b39      	cmp	r3, #57	; 0x39
 8007f56:	d04d      	beq.n	8007ff4 <_dtoa_r+0xaec>
 8007f58:	3301      	adds	r3, #1
 8007f5a:	e052      	b.n	8008002 <_dtoa_r+0xafa>
 8007f5c:	9a07      	ldr	r2, [sp, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f102 0501 	add.w	r5, r2, #1
 8007f64:	dd06      	ble.n	8007f74 <_dtoa_r+0xa6c>
 8007f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f6a:	d0eb      	beq.n	8007f44 <_dtoa_r+0xa3c>
 8007f6c:	f108 0801 	add.w	r8, r8, #1
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	e7c4      	b.n	8007efe <_dtoa_r+0x9f6>
 8007f74:	9b06      	ldr	r3, [sp, #24]
 8007f76:	9a04      	ldr	r2, [sp, #16]
 8007f78:	1aeb      	subs	r3, r5, r3
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f80:	d021      	beq.n	8007fc6 <_dtoa_r+0xabe>
 8007f82:	4659      	mov	r1, fp
 8007f84:	2300      	movs	r3, #0
 8007f86:	220a      	movs	r2, #10
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 f8eb 	bl	8008164 <__multadd>
 8007f8e:	45b9      	cmp	r9, r7
 8007f90:	4683      	mov	fp, r0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	f04f 020a 	mov.w	r2, #10
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	d105      	bne.n	8007fac <_dtoa_r+0xaa4>
 8007fa0:	f000 f8e0 	bl	8008164 <__multadd>
 8007fa4:	4681      	mov	r9, r0
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	9507      	str	r5, [sp, #28]
 8007faa:	e778      	b.n	8007e9e <_dtoa_r+0x996>
 8007fac:	f000 f8da 	bl	8008164 <__multadd>
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	4681      	mov	r9, r0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 f8d3 	bl	8008164 <__multadd>
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	e7f2      	b.n	8007fa8 <_dtoa_r+0xaa0>
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	4659      	mov	r1, fp
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fa40 	bl	8008450 <__lshift>
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4683      	mov	fp, r0
 8007fd4:	f000 fa90 	bl	80084f8 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dcb8      	bgt.n	8007f4e <_dtoa_r+0xa46>
 8007fdc:	d102      	bne.n	8007fe4 <_dtoa_r+0xadc>
 8007fde:	f018 0f01 	tst.w	r8, #1
 8007fe2:	d1b4      	bne.n	8007f4e <_dtoa_r+0xa46>
 8007fe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fe8:	1e6a      	subs	r2, r5, #1
 8007fea:	2b30      	cmp	r3, #48	; 0x30
 8007fec:	f47f af0f 	bne.w	8007e0e <_dtoa_r+0x906>
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	e7f7      	b.n	8007fe4 <_dtoa_r+0xadc>
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d105      	bne.n	8008006 <_dtoa_r+0xafe>
 8007ffa:	2331      	movs	r3, #49	; 0x31
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	f10a 0a01 	add.w	sl, sl, #1
 8008002:	7013      	strb	r3, [r2, #0]
 8008004:	e703      	b.n	8007e0e <_dtoa_r+0x906>
 8008006:	4615      	mov	r5, r2
 8008008:	e7a1      	b.n	8007f4e <_dtoa_r+0xa46>
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <_dtoa_r+0xb60>)
 800800c:	f7ff bae1 	b.w	80075d2 <_dtoa_r+0xca>
 8008010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008012:	2b00      	cmp	r3, #0
 8008014:	f47f aabb 	bne.w	800758e <_dtoa_r+0x86>
 8008018:	4b14      	ldr	r3, [pc, #80]	; (800806c <_dtoa_r+0xb64>)
 800801a:	f7ff bada 	b.w	80075d2 <_dtoa_r+0xca>
 800801e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008020:	2b01      	cmp	r3, #1
 8008022:	f77f ae3f 	ble.w	8007ca4 <_dtoa_r+0x79c>
 8008026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008028:	9308      	str	r3, [sp, #32]
 800802a:	e653      	b.n	8007cd4 <_dtoa_r+0x7cc>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	dc03      	bgt.n	800803a <_dtoa_r+0xb32>
 8008032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008034:	2b02      	cmp	r3, #2
 8008036:	f73f aed5 	bgt.w	8007de4 <_dtoa_r+0x8dc>
 800803a:	9d06      	ldr	r5, [sp, #24]
 800803c:	4631      	mov	r1, r6
 800803e:	4658      	mov	r0, fp
 8008040:	f7ff f9d2 	bl	80073e8 <quorem>
 8008044:	9b06      	ldr	r3, [sp, #24]
 8008046:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800804a:	f805 8b01 	strb.w	r8, [r5], #1
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	1aeb      	subs	r3, r5, r3
 8008052:	429a      	cmp	r2, r3
 8008054:	ddb5      	ble.n	8007fc2 <_dtoa_r+0xaba>
 8008056:	4659      	mov	r1, fp
 8008058:	2300      	movs	r3, #0
 800805a:	220a      	movs	r2, #10
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f881 	bl	8008164 <__multadd>
 8008062:	4683      	mov	fp, r0
 8008064:	e7ea      	b.n	800803c <_dtoa_r+0xb34>
 8008066:	bf00      	nop
 8008068:	08008d84 	.word	0x08008d84
 800806c:	08008da8 	.word	0x08008da8

08008070 <_localeconv_r>:
 8008070:	4b04      	ldr	r3, [pc, #16]	; (8008084 <_localeconv_r+0x14>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6a18      	ldr	r0, [r3, #32]
 8008076:	4b04      	ldr	r3, [pc, #16]	; (8008088 <_localeconv_r+0x18>)
 8008078:	2800      	cmp	r0, #0
 800807a:	bf08      	it	eq
 800807c:	4618      	moveq	r0, r3
 800807e:	30f0      	adds	r0, #240	; 0xf0
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000010 	.word	0x20000010
 8008088:	20000074 	.word	0x20000074

0800808c <malloc>:
 800808c:	4b02      	ldr	r3, [pc, #8]	; (8008098 <malloc+0xc>)
 800808e:	4601      	mov	r1, r0
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	f000 bb53 	b.w	800873c <_malloc_r>
 8008096:	bf00      	nop
 8008098:	20000010 	.word	0x20000010

0800809c <memchr>:
 800809c:	b510      	push	{r4, lr}
 800809e:	b2c9      	uxtb	r1, r1
 80080a0:	4402      	add	r2, r0
 80080a2:	4290      	cmp	r0, r2
 80080a4:	4603      	mov	r3, r0
 80080a6:	d101      	bne.n	80080ac <memchr+0x10>
 80080a8:	2300      	movs	r3, #0
 80080aa:	e003      	b.n	80080b4 <memchr+0x18>
 80080ac:	781c      	ldrb	r4, [r3, #0]
 80080ae:	3001      	adds	r0, #1
 80080b0:	428c      	cmp	r4, r1
 80080b2:	d1f6      	bne.n	80080a2 <memchr+0x6>
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <memcpy>:
 80080b8:	b510      	push	{r4, lr}
 80080ba:	1e43      	subs	r3, r0, #1
 80080bc:	440a      	add	r2, r1
 80080be:	4291      	cmp	r1, r2
 80080c0:	d100      	bne.n	80080c4 <memcpy+0xc>
 80080c2:	bd10      	pop	{r4, pc}
 80080c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080cc:	e7f7      	b.n	80080be <memcpy+0x6>

080080ce <_Balloc>:
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080d2:	4604      	mov	r4, r0
 80080d4:	460e      	mov	r6, r1
 80080d6:	b93d      	cbnz	r5, 80080e8 <_Balloc+0x1a>
 80080d8:	2010      	movs	r0, #16
 80080da:	f7ff ffd7 	bl	800808c <malloc>
 80080de:	6260      	str	r0, [r4, #36]	; 0x24
 80080e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080e4:	6005      	str	r5, [r0, #0]
 80080e6:	60c5      	str	r5, [r0, #12]
 80080e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80080ea:	68eb      	ldr	r3, [r5, #12]
 80080ec:	b183      	cbz	r3, 8008110 <_Balloc+0x42>
 80080ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080f6:	b9b8      	cbnz	r0, 8008128 <_Balloc+0x5a>
 80080f8:	2101      	movs	r1, #1
 80080fa:	fa01 f506 	lsl.w	r5, r1, r6
 80080fe:	1d6a      	adds	r2, r5, #5
 8008100:	0092      	lsls	r2, r2, #2
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fabf 	bl	8008686 <_calloc_r>
 8008108:	b160      	cbz	r0, 8008124 <_Balloc+0x56>
 800810a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800810e:	e00e      	b.n	800812e <_Balloc+0x60>
 8008110:	2221      	movs	r2, #33	; 0x21
 8008112:	2104      	movs	r1, #4
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fab6 	bl	8008686 <_calloc_r>
 800811a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800811c:	60e8      	str	r0, [r5, #12]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e4      	bne.n	80080ee <_Balloc+0x20>
 8008124:	2000      	movs	r0, #0
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	6802      	ldr	r2, [r0, #0]
 800812a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800812e:	2300      	movs	r3, #0
 8008130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008134:	e7f7      	b.n	8008126 <_Balloc+0x58>

08008136 <_Bfree>:
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800813a:	4606      	mov	r6, r0
 800813c:	460d      	mov	r5, r1
 800813e:	b93c      	cbnz	r4, 8008150 <_Bfree+0x1a>
 8008140:	2010      	movs	r0, #16
 8008142:	f7ff ffa3 	bl	800808c <malloc>
 8008146:	6270      	str	r0, [r6, #36]	; 0x24
 8008148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800814c:	6004      	str	r4, [r0, #0]
 800814e:	60c4      	str	r4, [r0, #12]
 8008150:	b13d      	cbz	r5, 8008162 <_Bfree+0x2c>
 8008152:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008154:	686a      	ldr	r2, [r5, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800815c:	6029      	str	r1, [r5, #0]
 800815e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008162:	bd70      	pop	{r4, r5, r6, pc}

08008164 <__multadd>:
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	461f      	mov	r7, r3
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	2300      	movs	r3, #0
 8008170:	690d      	ldr	r5, [r1, #16]
 8008172:	f101 0c14 	add.w	ip, r1, #20
 8008176:	f8dc 0000 	ldr.w	r0, [ip]
 800817a:	3301      	adds	r3, #1
 800817c:	b281      	uxth	r1, r0
 800817e:	fb02 7101 	mla	r1, r2, r1, r7
 8008182:	0c00      	lsrs	r0, r0, #16
 8008184:	0c0f      	lsrs	r7, r1, #16
 8008186:	fb02 7000 	mla	r0, r2, r0, r7
 800818a:	b289      	uxth	r1, r1
 800818c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008190:	429d      	cmp	r5, r3
 8008192:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008196:	f84c 1b04 	str.w	r1, [ip], #4
 800819a:	dcec      	bgt.n	8008176 <__multadd+0x12>
 800819c:	b1d7      	cbz	r7, 80081d4 <__multadd+0x70>
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	42ab      	cmp	r3, r5
 80081a2:	dc12      	bgt.n	80081ca <__multadd+0x66>
 80081a4:	6861      	ldr	r1, [r4, #4]
 80081a6:	4630      	mov	r0, r6
 80081a8:	3101      	adds	r1, #1
 80081aa:	f7ff ff90 	bl	80080ce <_Balloc>
 80081ae:	4680      	mov	r8, r0
 80081b0:	6922      	ldr	r2, [r4, #16]
 80081b2:	f104 010c 	add.w	r1, r4, #12
 80081b6:	3202      	adds	r2, #2
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	300c      	adds	r0, #12
 80081bc:	f7ff ff7c 	bl	80080b8 <memcpy>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ffb7 	bl	8008136 <_Bfree>
 80081c8:	4644      	mov	r4, r8
 80081ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ce:	3501      	adds	r5, #1
 80081d0:	615f      	str	r7, [r3, #20]
 80081d2:	6125      	str	r5, [r4, #16]
 80081d4:	4620      	mov	r0, r4
 80081d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081da <__hi0bits>:
 80081da:	0c02      	lsrs	r2, r0, #16
 80081dc:	0412      	lsls	r2, r2, #16
 80081de:	4603      	mov	r3, r0
 80081e0:	b9b2      	cbnz	r2, 8008210 <__hi0bits+0x36>
 80081e2:	0403      	lsls	r3, r0, #16
 80081e4:	2010      	movs	r0, #16
 80081e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081ea:	bf04      	itt	eq
 80081ec:	021b      	lsleq	r3, r3, #8
 80081ee:	3008      	addeq	r0, #8
 80081f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081f4:	bf04      	itt	eq
 80081f6:	011b      	lsleq	r3, r3, #4
 80081f8:	3004      	addeq	r0, #4
 80081fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081fe:	bf04      	itt	eq
 8008200:	009b      	lsleq	r3, r3, #2
 8008202:	3002      	addeq	r0, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	db06      	blt.n	8008216 <__hi0bits+0x3c>
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	d503      	bpl.n	8008214 <__hi0bits+0x3a>
 800820c:	3001      	adds	r0, #1
 800820e:	4770      	bx	lr
 8008210:	2000      	movs	r0, #0
 8008212:	e7e8      	b.n	80081e6 <__hi0bits+0xc>
 8008214:	2020      	movs	r0, #32
 8008216:	4770      	bx	lr

08008218 <__lo0bits>:
 8008218:	6803      	ldr	r3, [r0, #0]
 800821a:	4601      	mov	r1, r0
 800821c:	f013 0207 	ands.w	r2, r3, #7
 8008220:	d00b      	beq.n	800823a <__lo0bits+0x22>
 8008222:	07da      	lsls	r2, r3, #31
 8008224:	d423      	bmi.n	800826e <__lo0bits+0x56>
 8008226:	0798      	lsls	r0, r3, #30
 8008228:	bf49      	itett	mi
 800822a:	085b      	lsrmi	r3, r3, #1
 800822c:	089b      	lsrpl	r3, r3, #2
 800822e:	2001      	movmi	r0, #1
 8008230:	600b      	strmi	r3, [r1, #0]
 8008232:	bf5c      	itt	pl
 8008234:	600b      	strpl	r3, [r1, #0]
 8008236:	2002      	movpl	r0, #2
 8008238:	4770      	bx	lr
 800823a:	b298      	uxth	r0, r3
 800823c:	b9a8      	cbnz	r0, 800826a <__lo0bits+0x52>
 800823e:	2010      	movs	r0, #16
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008246:	bf04      	itt	eq
 8008248:	0a1b      	lsreq	r3, r3, #8
 800824a:	3008      	addeq	r0, #8
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	bf04      	itt	eq
 8008250:	091b      	lsreq	r3, r3, #4
 8008252:	3004      	addeq	r0, #4
 8008254:	079a      	lsls	r2, r3, #30
 8008256:	bf04      	itt	eq
 8008258:	089b      	lsreq	r3, r3, #2
 800825a:	3002      	addeq	r0, #2
 800825c:	07da      	lsls	r2, r3, #31
 800825e:	d402      	bmi.n	8008266 <__lo0bits+0x4e>
 8008260:	085b      	lsrs	r3, r3, #1
 8008262:	d006      	beq.n	8008272 <__lo0bits+0x5a>
 8008264:	3001      	adds	r0, #1
 8008266:	600b      	str	r3, [r1, #0]
 8008268:	4770      	bx	lr
 800826a:	4610      	mov	r0, r2
 800826c:	e7e9      	b.n	8008242 <__lo0bits+0x2a>
 800826e:	2000      	movs	r0, #0
 8008270:	4770      	bx	lr
 8008272:	2020      	movs	r0, #32
 8008274:	4770      	bx	lr

08008276 <__i2b>:
 8008276:	b510      	push	{r4, lr}
 8008278:	460c      	mov	r4, r1
 800827a:	2101      	movs	r1, #1
 800827c:	f7ff ff27 	bl	80080ce <_Balloc>
 8008280:	2201      	movs	r2, #1
 8008282:	6144      	str	r4, [r0, #20]
 8008284:	6102      	str	r2, [r0, #16]
 8008286:	bd10      	pop	{r4, pc}

08008288 <__multiply>:
 8008288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4614      	mov	r4, r2
 800828e:	690a      	ldr	r2, [r1, #16]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	4688      	mov	r8, r1
 8008294:	429a      	cmp	r2, r3
 8008296:	bfbe      	ittt	lt
 8008298:	460b      	movlt	r3, r1
 800829a:	46a0      	movlt	r8, r4
 800829c:	461c      	movlt	r4, r3
 800829e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80082a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082ae:	eb07 0609 	add.w	r6, r7, r9
 80082b2:	42b3      	cmp	r3, r6
 80082b4:	bfb8      	it	lt
 80082b6:	3101      	addlt	r1, #1
 80082b8:	f7ff ff09 	bl	80080ce <_Balloc>
 80082bc:	f100 0514 	add.w	r5, r0, #20
 80082c0:	462b      	mov	r3, r5
 80082c2:	2200      	movs	r2, #0
 80082c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082c8:	4573      	cmp	r3, lr
 80082ca:	d316      	bcc.n	80082fa <__multiply+0x72>
 80082cc:	f104 0214 	add.w	r2, r4, #20
 80082d0:	f108 0114 	add.w	r1, r8, #20
 80082d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	9201      	str	r2, [sp, #4]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d80c      	bhi.n	8008300 <__multiply+0x78>
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	dd03      	ble.n	80082f2 <__multiply+0x6a>
 80082ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d05d      	beq.n	80083ae <__multiply+0x126>
 80082f2:	6106      	str	r6, [r0, #16]
 80082f4:	b003      	add	sp, #12
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	f843 2b04 	str.w	r2, [r3], #4
 80082fe:	e7e3      	b.n	80082c8 <__multiply+0x40>
 8008300:	f8b2 b000 	ldrh.w	fp, [r2]
 8008304:	f1bb 0f00 	cmp.w	fp, #0
 8008308:	d023      	beq.n	8008352 <__multiply+0xca>
 800830a:	4689      	mov	r9, r1
 800830c:	46ac      	mov	ip, r5
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	f859 4b04 	ldr.w	r4, [r9], #4
 8008316:	f8dc a000 	ldr.w	sl, [ip]
 800831a:	b2a3      	uxth	r3, r4
 800831c:	fa1f fa8a 	uxth.w	sl, sl
 8008320:	fb0b a303 	mla	r3, fp, r3, sl
 8008324:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008328:	f8dc 4000 	ldr.w	r4, [ip]
 800832c:	4443      	add	r3, r8
 800832e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008332:	fb0b 840a 	mla	r4, fp, sl, r8
 8008336:	46e2      	mov	sl, ip
 8008338:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800833c:	b29b      	uxth	r3, r3
 800833e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008342:	454f      	cmp	r7, r9
 8008344:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008348:	f84a 3b04 	str.w	r3, [sl], #4
 800834c:	d82b      	bhi.n	80083a6 <__multiply+0x11e>
 800834e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	3204      	adds	r2, #4
 8008356:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800835a:	f1ba 0f00 	cmp.w	sl, #0
 800835e:	d020      	beq.n	80083a2 <__multiply+0x11a>
 8008360:	4689      	mov	r9, r1
 8008362:	46a8      	mov	r8, r5
 8008364:	f04f 0b00 	mov.w	fp, #0
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	f8b9 c000 	ldrh.w	ip, [r9]
 800836e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008372:	b29b      	uxth	r3, r3
 8008374:	fb0a 440c 	mla	r4, sl, ip, r4
 8008378:	46c4      	mov	ip, r8
 800837a:	445c      	add	r4, fp
 800837c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008380:	f84c 3b04 	str.w	r3, [ip], #4
 8008384:	f859 3b04 	ldr.w	r3, [r9], #4
 8008388:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800838c:	0c1b      	lsrs	r3, r3, #16
 800838e:	fb0a b303 	mla	r3, sl, r3, fp
 8008392:	454f      	cmp	r7, r9
 8008394:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008398:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800839c:	d805      	bhi.n	80083aa <__multiply+0x122>
 800839e:	f8c8 3004 	str.w	r3, [r8, #4]
 80083a2:	3504      	adds	r5, #4
 80083a4:	e79b      	b.n	80082de <__multiply+0x56>
 80083a6:	46d4      	mov	ip, sl
 80083a8:	e7b3      	b.n	8008312 <__multiply+0x8a>
 80083aa:	46e0      	mov	r8, ip
 80083ac:	e7dd      	b.n	800836a <__multiply+0xe2>
 80083ae:	3e01      	subs	r6, #1
 80083b0:	e799      	b.n	80082e6 <__multiply+0x5e>
	...

080083b4 <__pow5mult>:
 80083b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b8:	4615      	mov	r5, r2
 80083ba:	f012 0203 	ands.w	r2, r2, #3
 80083be:	4606      	mov	r6, r0
 80083c0:	460f      	mov	r7, r1
 80083c2:	d007      	beq.n	80083d4 <__pow5mult+0x20>
 80083c4:	4c21      	ldr	r4, [pc, #132]	; (800844c <__pow5mult+0x98>)
 80083c6:	3a01      	subs	r2, #1
 80083c8:	2300      	movs	r3, #0
 80083ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ce:	f7ff fec9 	bl	8008164 <__multadd>
 80083d2:	4607      	mov	r7, r0
 80083d4:	10ad      	asrs	r5, r5, #2
 80083d6:	d035      	beq.n	8008444 <__pow5mult+0x90>
 80083d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083da:	b93c      	cbnz	r4, 80083ec <__pow5mult+0x38>
 80083dc:	2010      	movs	r0, #16
 80083de:	f7ff fe55 	bl	800808c <malloc>
 80083e2:	6270      	str	r0, [r6, #36]	; 0x24
 80083e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e8:	6004      	str	r4, [r0, #0]
 80083ea:	60c4      	str	r4, [r0, #12]
 80083ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083f4:	b94c      	cbnz	r4, 800840a <__pow5mult+0x56>
 80083f6:	f240 2171 	movw	r1, #625	; 0x271
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ff3b 	bl	8008276 <__i2b>
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	f8c8 0008 	str.w	r0, [r8, #8]
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	f04f 0800 	mov.w	r8, #0
 800840e:	07eb      	lsls	r3, r5, #31
 8008410:	d50a      	bpl.n	8008428 <__pow5mult+0x74>
 8008412:	4639      	mov	r1, r7
 8008414:	4622      	mov	r2, r4
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ff36 	bl	8008288 <__multiply>
 800841c:	4681      	mov	r9, r0
 800841e:	4639      	mov	r1, r7
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff fe88 	bl	8008136 <_Bfree>
 8008426:	464f      	mov	r7, r9
 8008428:	106d      	asrs	r5, r5, #1
 800842a:	d00b      	beq.n	8008444 <__pow5mult+0x90>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	b938      	cbnz	r0, 8008440 <__pow5mult+0x8c>
 8008430:	4622      	mov	r2, r4
 8008432:	4621      	mov	r1, r4
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff ff27 	bl	8008288 <__multiply>
 800843a:	6020      	str	r0, [r4, #0]
 800843c:	f8c0 8000 	str.w	r8, [r0]
 8008440:	4604      	mov	r4, r0
 8008442:	e7e4      	b.n	800840e <__pow5mult+0x5a>
 8008444:	4638      	mov	r0, r7
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	bf00      	nop
 800844c:	08008ea8 	.word	0x08008ea8

08008450 <__lshift>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	460c      	mov	r4, r1
 8008456:	4607      	mov	r7, r0
 8008458:	4616      	mov	r6, r2
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008460:	eb0a 0903 	add.w	r9, sl, r3
 8008464:	6849      	ldr	r1, [r1, #4]
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	f109 0501 	add.w	r5, r9, #1
 800846c:	42ab      	cmp	r3, r5
 800846e:	db32      	blt.n	80084d6 <__lshift+0x86>
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff fe2c 	bl	80080ce <_Balloc>
 8008476:	2300      	movs	r3, #0
 8008478:	4680      	mov	r8, r0
 800847a:	461a      	mov	r2, r3
 800847c:	f100 0114 	add.w	r1, r0, #20
 8008480:	4553      	cmp	r3, sl
 8008482:	db2b      	blt.n	80084dc <__lshift+0x8c>
 8008484:	6920      	ldr	r0, [r4, #16]
 8008486:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800848a:	f104 0314 	add.w	r3, r4, #20
 800848e:	f016 021f 	ands.w	r2, r6, #31
 8008492:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008496:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800849a:	d025      	beq.n	80084e8 <__lshift+0x98>
 800849c:	2000      	movs	r0, #0
 800849e:	f1c2 0e20 	rsb	lr, r2, #32
 80084a2:	468a      	mov	sl, r1
 80084a4:	681e      	ldr	r6, [r3, #0]
 80084a6:	4096      	lsls	r6, r2
 80084a8:	4330      	orrs	r0, r6
 80084aa:	f84a 0b04 	str.w	r0, [sl], #4
 80084ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80084b2:	459c      	cmp	ip, r3
 80084b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80084b8:	d814      	bhi.n	80084e4 <__lshift+0x94>
 80084ba:	6048      	str	r0, [r1, #4]
 80084bc:	b108      	cbz	r0, 80084c2 <__lshift+0x72>
 80084be:	f109 0502 	add.w	r5, r9, #2
 80084c2:	3d01      	subs	r5, #1
 80084c4:	4638      	mov	r0, r7
 80084c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80084ca:	4621      	mov	r1, r4
 80084cc:	f7ff fe33 	bl	8008136 <_Bfree>
 80084d0:	4640      	mov	r0, r8
 80084d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d6:	3101      	adds	r1, #1
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	e7c7      	b.n	800846c <__lshift+0x1c>
 80084dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084e0:	3301      	adds	r3, #1
 80084e2:	e7cd      	b.n	8008480 <__lshift+0x30>
 80084e4:	4651      	mov	r1, sl
 80084e6:	e7dc      	b.n	80084a2 <__lshift+0x52>
 80084e8:	3904      	subs	r1, #4
 80084ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ee:	459c      	cmp	ip, r3
 80084f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f4:	d8f9      	bhi.n	80084ea <__lshift+0x9a>
 80084f6:	e7e4      	b.n	80084c2 <__lshift+0x72>

080084f8 <__mcmp>:
 80084f8:	6903      	ldr	r3, [r0, #16]
 80084fa:	690a      	ldr	r2, [r1, #16]
 80084fc:	b530      	push	{r4, r5, lr}
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	d10c      	bne.n	800851c <__mcmp+0x24>
 8008502:	0092      	lsls	r2, r2, #2
 8008504:	3014      	adds	r0, #20
 8008506:	3114      	adds	r1, #20
 8008508:	1884      	adds	r4, r0, r2
 800850a:	4411      	add	r1, r2
 800850c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008510:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008514:	4295      	cmp	r5, r2
 8008516:	d003      	beq.n	8008520 <__mcmp+0x28>
 8008518:	d305      	bcc.n	8008526 <__mcmp+0x2e>
 800851a:	2301      	movs	r3, #1
 800851c:	4618      	mov	r0, r3
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	42a0      	cmp	r0, r4
 8008522:	d3f3      	bcc.n	800850c <__mcmp+0x14>
 8008524:	e7fa      	b.n	800851c <__mcmp+0x24>
 8008526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800852a:	e7f7      	b.n	800851c <__mcmp+0x24>

0800852c <__mdiff>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	460d      	mov	r5, r1
 8008532:	4607      	mov	r7, r0
 8008534:	4611      	mov	r1, r2
 8008536:	4628      	mov	r0, r5
 8008538:	4614      	mov	r4, r2
 800853a:	f7ff ffdd 	bl	80084f8 <__mcmp>
 800853e:	1e06      	subs	r6, r0, #0
 8008540:	d108      	bne.n	8008554 <__mdiff+0x28>
 8008542:	4631      	mov	r1, r6
 8008544:	4638      	mov	r0, r7
 8008546:	f7ff fdc2 	bl	80080ce <_Balloc>
 800854a:	2301      	movs	r3, #1
 800854c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008554:	bfa4      	itt	ge
 8008556:	4623      	movge	r3, r4
 8008558:	462c      	movge	r4, r5
 800855a:	4638      	mov	r0, r7
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	bfa6      	itte	ge
 8008560:	461d      	movge	r5, r3
 8008562:	2600      	movge	r6, #0
 8008564:	2601      	movlt	r6, #1
 8008566:	f7ff fdb2 	bl	80080ce <_Balloc>
 800856a:	f04f 0e00 	mov.w	lr, #0
 800856e:	60c6      	str	r6, [r0, #12]
 8008570:	692b      	ldr	r3, [r5, #16]
 8008572:	6926      	ldr	r6, [r4, #16]
 8008574:	f104 0214 	add.w	r2, r4, #20
 8008578:	f105 0914 	add.w	r9, r5, #20
 800857c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008580:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008584:	f100 0114 	add.w	r1, r0, #20
 8008588:	f852 ab04 	ldr.w	sl, [r2], #4
 800858c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008590:	fa1f f38a 	uxth.w	r3, sl
 8008594:	4473      	add	r3, lr
 8008596:	b2ac      	uxth	r4, r5
 8008598:	1b1b      	subs	r3, r3, r4
 800859a:	0c2c      	lsrs	r4, r5, #16
 800859c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80085a0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80085aa:	45c8      	cmp	r8, r9
 80085ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80085b0:	4694      	mov	ip, r2
 80085b2:	f841 4b04 	str.w	r4, [r1], #4
 80085b6:	d8e7      	bhi.n	8008588 <__mdiff+0x5c>
 80085b8:	45bc      	cmp	ip, r7
 80085ba:	d304      	bcc.n	80085c6 <__mdiff+0x9a>
 80085bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085c0:	b183      	cbz	r3, 80085e4 <__mdiff+0xb8>
 80085c2:	6106      	str	r6, [r0, #16]
 80085c4:	e7c4      	b.n	8008550 <__mdiff+0x24>
 80085c6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80085ca:	b2a2      	uxth	r2, r4
 80085cc:	4472      	add	r2, lr
 80085ce:	1413      	asrs	r3, r2, #16
 80085d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085d4:	b292      	uxth	r2, r2
 80085d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085da:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80085de:	f841 2b04 	str.w	r2, [r1], #4
 80085e2:	e7e9      	b.n	80085b8 <__mdiff+0x8c>
 80085e4:	3e01      	subs	r6, #1
 80085e6:	e7e9      	b.n	80085bc <__mdiff+0x90>

080085e8 <__d2b>:
 80085e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80085ec:	461c      	mov	r4, r3
 80085ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80085f2:	2101      	movs	r1, #1
 80085f4:	4690      	mov	r8, r2
 80085f6:	f7ff fd6a 	bl	80080ce <_Balloc>
 80085fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80085fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008602:	4607      	mov	r7, r0
 8008604:	bb34      	cbnz	r4, 8008654 <__d2b+0x6c>
 8008606:	9201      	str	r2, [sp, #4]
 8008608:	f1b8 0200 	subs.w	r2, r8, #0
 800860c:	d027      	beq.n	800865e <__d2b+0x76>
 800860e:	a802      	add	r0, sp, #8
 8008610:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008614:	f7ff fe00 	bl	8008218 <__lo0bits>
 8008618:	9900      	ldr	r1, [sp, #0]
 800861a:	b1f0      	cbz	r0, 800865a <__d2b+0x72>
 800861c:	9a01      	ldr	r2, [sp, #4]
 800861e:	f1c0 0320 	rsb	r3, r0, #32
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	430b      	orrs	r3, r1
 8008628:	40c2      	lsrs	r2, r0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	9201      	str	r2, [sp, #4]
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf14      	ite	ne
 8008634:	2102      	movne	r1, #2
 8008636:	2101      	moveq	r1, #1
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	6139      	str	r1, [r7, #16]
 800863c:	b1c4      	cbz	r4, 8008670 <__d2b+0x88>
 800863e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008642:	4404      	add	r4, r0
 8008644:	6034      	str	r4, [r6, #0]
 8008646:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800864a:	6028      	str	r0, [r5, #0]
 800864c:	4638      	mov	r0, r7
 800864e:	b002      	add	sp, #8
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008658:	e7d5      	b.n	8008606 <__d2b+0x1e>
 800865a:	6179      	str	r1, [r7, #20]
 800865c:	e7e7      	b.n	800862e <__d2b+0x46>
 800865e:	a801      	add	r0, sp, #4
 8008660:	f7ff fdda 	bl	8008218 <__lo0bits>
 8008664:	2101      	movs	r1, #1
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	6139      	str	r1, [r7, #16]
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	3020      	adds	r0, #32
 800866e:	e7e5      	b.n	800863c <__d2b+0x54>
 8008670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008674:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008678:	6030      	str	r0, [r6, #0]
 800867a:	6918      	ldr	r0, [r3, #16]
 800867c:	f7ff fdad 	bl	80081da <__hi0bits>
 8008680:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008684:	e7e1      	b.n	800864a <__d2b+0x62>

08008686 <_calloc_r>:
 8008686:	b538      	push	{r3, r4, r5, lr}
 8008688:	fb02 f401 	mul.w	r4, r2, r1
 800868c:	4621      	mov	r1, r4
 800868e:	f000 f855 	bl	800873c <_malloc_r>
 8008692:	4605      	mov	r5, r0
 8008694:	b118      	cbz	r0, 800869e <_calloc_r+0x18>
 8008696:	4622      	mov	r2, r4
 8008698:	2100      	movs	r1, #0
 800869a:	f7fe fa2d 	bl	8006af8 <memset>
 800869e:	4628      	mov	r0, r5
 80086a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080086a4 <_free_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4605      	mov	r5, r0
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d043      	beq.n	8008734 <_free_r+0x90>
 80086ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b0:	1f0c      	subs	r4, r1, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfb8      	it	lt
 80086b6:	18e4      	addlt	r4, r4, r3
 80086b8:	f000 fa27 	bl	8008b0a <__malloc_lock>
 80086bc:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <_free_r+0x94>)
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	4610      	mov	r0, r2
 80086c2:	b933      	cbnz	r3, 80086d2 <_free_r+0x2e>
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	6014      	str	r4, [r2, #0]
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ce:	f000 ba1d 	b.w	8008b0c <__malloc_unlock>
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	d90b      	bls.n	80086ee <_free_r+0x4a>
 80086d6:	6821      	ldr	r1, [r4, #0]
 80086d8:	1862      	adds	r2, r4, r1
 80086da:	4293      	cmp	r3, r2
 80086dc:	bf01      	itttt	eq
 80086de:	681a      	ldreq	r2, [r3, #0]
 80086e0:	685b      	ldreq	r3, [r3, #4]
 80086e2:	1852      	addeq	r2, r2, r1
 80086e4:	6022      	streq	r2, [r4, #0]
 80086e6:	6063      	str	r3, [r4, #4]
 80086e8:	6004      	str	r4, [r0, #0]
 80086ea:	e7ed      	b.n	80086c8 <_free_r+0x24>
 80086ec:	4613      	mov	r3, r2
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	b10a      	cbz	r2, 80086f6 <_free_r+0x52>
 80086f2:	42a2      	cmp	r2, r4
 80086f4:	d9fa      	bls.n	80086ec <_free_r+0x48>
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	1858      	adds	r0, r3, r1
 80086fa:	42a0      	cmp	r0, r4
 80086fc:	d10b      	bne.n	8008716 <_free_r+0x72>
 80086fe:	6820      	ldr	r0, [r4, #0]
 8008700:	4401      	add	r1, r0
 8008702:	1858      	adds	r0, r3, r1
 8008704:	4282      	cmp	r2, r0
 8008706:	6019      	str	r1, [r3, #0]
 8008708:	d1de      	bne.n	80086c8 <_free_r+0x24>
 800870a:	6810      	ldr	r0, [r2, #0]
 800870c:	6852      	ldr	r2, [r2, #4]
 800870e:	4401      	add	r1, r0
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	605a      	str	r2, [r3, #4]
 8008714:	e7d8      	b.n	80086c8 <_free_r+0x24>
 8008716:	d902      	bls.n	800871e <_free_r+0x7a>
 8008718:	230c      	movs	r3, #12
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	e7d4      	b.n	80086c8 <_free_r+0x24>
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1821      	adds	r1, r4, r0
 8008722:	428a      	cmp	r2, r1
 8008724:	bf01      	itttt	eq
 8008726:	6811      	ldreq	r1, [r2, #0]
 8008728:	6852      	ldreq	r2, [r2, #4]
 800872a:	1809      	addeq	r1, r1, r0
 800872c:	6021      	streq	r1, [r4, #0]
 800872e:	6062      	str	r2, [r4, #4]
 8008730:	605c      	str	r4, [r3, #4]
 8008732:	e7c9      	b.n	80086c8 <_free_r+0x24>
 8008734:	bd38      	pop	{r3, r4, r5, pc}
 8008736:	bf00      	nop
 8008738:	20000220 	.word	0x20000220

0800873c <_malloc_r>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	1ccd      	adds	r5, r1, #3
 8008740:	f025 0503 	bic.w	r5, r5, #3
 8008744:	3508      	adds	r5, #8
 8008746:	2d0c      	cmp	r5, #12
 8008748:	bf38      	it	cc
 800874a:	250c      	movcc	r5, #12
 800874c:	2d00      	cmp	r5, #0
 800874e:	4606      	mov	r6, r0
 8008750:	db01      	blt.n	8008756 <_malloc_r+0x1a>
 8008752:	42a9      	cmp	r1, r5
 8008754:	d903      	bls.n	800875e <_malloc_r+0x22>
 8008756:	230c      	movs	r3, #12
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	f000 f9d4 	bl	8008b0a <__malloc_lock>
 8008762:	4a21      	ldr	r2, [pc, #132]	; (80087e8 <_malloc_r+0xac>)
 8008764:	6814      	ldr	r4, [r2, #0]
 8008766:	4621      	mov	r1, r4
 8008768:	b991      	cbnz	r1, 8008790 <_malloc_r+0x54>
 800876a:	4c20      	ldr	r4, [pc, #128]	; (80087ec <_malloc_r+0xb0>)
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	b91b      	cbnz	r3, 8008778 <_malloc_r+0x3c>
 8008770:	4630      	mov	r0, r6
 8008772:	f000 f98f 	bl	8008a94 <_sbrk_r>
 8008776:	6020      	str	r0, [r4, #0]
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f98a 	bl	8008a94 <_sbrk_r>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d124      	bne.n	80087ce <_malloc_r+0x92>
 8008784:	230c      	movs	r3, #12
 8008786:	4630      	mov	r0, r6
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	f000 f9bf 	bl	8008b0c <__malloc_unlock>
 800878e:	e7e4      	b.n	800875a <_malloc_r+0x1e>
 8008790:	680b      	ldr	r3, [r1, #0]
 8008792:	1b5b      	subs	r3, r3, r5
 8008794:	d418      	bmi.n	80087c8 <_malloc_r+0x8c>
 8008796:	2b0b      	cmp	r3, #11
 8008798:	d90f      	bls.n	80087ba <_malloc_r+0x7e>
 800879a:	600b      	str	r3, [r1, #0]
 800879c:	18cc      	adds	r4, r1, r3
 800879e:	50cd      	str	r5, [r1, r3]
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 f9b3 	bl	8008b0c <__malloc_unlock>
 80087a6:	f104 000b 	add.w	r0, r4, #11
 80087aa:	1d23      	adds	r3, r4, #4
 80087ac:	f020 0007 	bic.w	r0, r0, #7
 80087b0:	1ac3      	subs	r3, r0, r3
 80087b2:	d0d3      	beq.n	800875c <_malloc_r+0x20>
 80087b4:	425a      	negs	r2, r3
 80087b6:	50e2      	str	r2, [r4, r3]
 80087b8:	e7d0      	b.n	800875c <_malloc_r+0x20>
 80087ba:	684b      	ldr	r3, [r1, #4]
 80087bc:	428c      	cmp	r4, r1
 80087be:	bf16      	itet	ne
 80087c0:	6063      	strne	r3, [r4, #4]
 80087c2:	6013      	streq	r3, [r2, #0]
 80087c4:	460c      	movne	r4, r1
 80087c6:	e7eb      	b.n	80087a0 <_malloc_r+0x64>
 80087c8:	460c      	mov	r4, r1
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	e7cc      	b.n	8008768 <_malloc_r+0x2c>
 80087ce:	1cc4      	adds	r4, r0, #3
 80087d0:	f024 0403 	bic.w	r4, r4, #3
 80087d4:	42a0      	cmp	r0, r4
 80087d6:	d005      	beq.n	80087e4 <_malloc_r+0xa8>
 80087d8:	1a21      	subs	r1, r4, r0
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 f95a 	bl	8008a94 <_sbrk_r>
 80087e0:	3001      	adds	r0, #1
 80087e2:	d0cf      	beq.n	8008784 <_malloc_r+0x48>
 80087e4:	6025      	str	r5, [r4, #0]
 80087e6:	e7db      	b.n	80087a0 <_malloc_r+0x64>
 80087e8:	20000220 	.word	0x20000220
 80087ec:	20000224 	.word	0x20000224

080087f0 <__ssputs_r>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	688e      	ldr	r6, [r1, #8]
 80087f6:	4682      	mov	sl, r0
 80087f8:	429e      	cmp	r6, r3
 80087fa:	460c      	mov	r4, r1
 80087fc:	4690      	mov	r8, r2
 80087fe:	4699      	mov	r9, r3
 8008800:	d837      	bhi.n	8008872 <__ssputs_r+0x82>
 8008802:	898a      	ldrh	r2, [r1, #12]
 8008804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008808:	d031      	beq.n	800886e <__ssputs_r+0x7e>
 800880a:	2302      	movs	r3, #2
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	6909      	ldr	r1, [r1, #16]
 8008810:	1a6f      	subs	r7, r5, r1
 8008812:	6965      	ldr	r5, [r4, #20]
 8008814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008818:	fb95 f5f3 	sdiv	r5, r5, r3
 800881c:	f109 0301 	add.w	r3, r9, #1
 8008820:	443b      	add	r3, r7
 8008822:	429d      	cmp	r5, r3
 8008824:	bf38      	it	cc
 8008826:	461d      	movcc	r5, r3
 8008828:	0553      	lsls	r3, r2, #21
 800882a:	d530      	bpl.n	800888e <__ssputs_r+0x9e>
 800882c:	4629      	mov	r1, r5
 800882e:	f7ff ff85 	bl	800873c <_malloc_r>
 8008832:	4606      	mov	r6, r0
 8008834:	b950      	cbnz	r0, 800884c <__ssputs_r+0x5c>
 8008836:	230c      	movs	r3, #12
 8008838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800883c:	f8ca 3000 	str.w	r3, [sl]
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	463a      	mov	r2, r7
 800884e:	6921      	ldr	r1, [r4, #16]
 8008850:	f7ff fc32 	bl	80080b8 <memcpy>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800885a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	6126      	str	r6, [r4, #16]
 8008862:	443e      	add	r6, r7
 8008864:	6026      	str	r6, [r4, #0]
 8008866:	464e      	mov	r6, r9
 8008868:	6165      	str	r5, [r4, #20]
 800886a:	1bed      	subs	r5, r5, r7
 800886c:	60a5      	str	r5, [r4, #8]
 800886e:	454e      	cmp	r6, r9
 8008870:	d900      	bls.n	8008874 <__ssputs_r+0x84>
 8008872:	464e      	mov	r6, r9
 8008874:	4632      	mov	r2, r6
 8008876:	4641      	mov	r1, r8
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	f000 f92d 	bl	8008ad8 <memmove>
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	2000      	movs	r0, #0
 8008882:	1b9b      	subs	r3, r3, r6
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	441e      	add	r6, r3
 800888a:	6026      	str	r6, [r4, #0]
 800888c:	e7dc      	b.n	8008848 <__ssputs_r+0x58>
 800888e:	462a      	mov	r2, r5
 8008890:	f000 f93d 	bl	8008b0e <_realloc_r>
 8008894:	4606      	mov	r6, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	d1e2      	bne.n	8008860 <__ssputs_r+0x70>
 800889a:	6921      	ldr	r1, [r4, #16]
 800889c:	4650      	mov	r0, sl
 800889e:	f7ff ff01 	bl	80086a4 <_free_r>
 80088a2:	e7c8      	b.n	8008836 <__ssputs_r+0x46>

080088a4 <_svfiprintf_r>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	461d      	mov	r5, r3
 80088aa:	898b      	ldrh	r3, [r1, #12]
 80088ac:	b09d      	sub	sp, #116	; 0x74
 80088ae:	061f      	lsls	r7, r3, #24
 80088b0:	4680      	mov	r8, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	4616      	mov	r6, r2
 80088b6:	d50f      	bpl.n	80088d8 <_svfiprintf_r+0x34>
 80088b8:	690b      	ldr	r3, [r1, #16]
 80088ba:	b96b      	cbnz	r3, 80088d8 <_svfiprintf_r+0x34>
 80088bc:	2140      	movs	r1, #64	; 0x40
 80088be:	f7ff ff3d 	bl	800873c <_malloc_r>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	6120      	str	r0, [r4, #16]
 80088c6:	b928      	cbnz	r0, 80088d4 <_svfiprintf_r+0x30>
 80088c8:	230c      	movs	r3, #12
 80088ca:	f8c8 3000 	str.w	r3, [r8]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088d2:	e0c8      	b.n	8008a66 <_svfiprintf_r+0x1c2>
 80088d4:	2340      	movs	r3, #64	; 0x40
 80088d6:	6163      	str	r3, [r4, #20]
 80088d8:	2300      	movs	r3, #0
 80088da:	9309      	str	r3, [sp, #36]	; 0x24
 80088dc:	2320      	movs	r3, #32
 80088de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e2:	2330      	movs	r3, #48	; 0x30
 80088e4:	f04f 0b01 	mov.w	fp, #1
 80088e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ec:	9503      	str	r5, [sp, #12]
 80088ee:	4637      	mov	r7, r6
 80088f0:	463d      	mov	r5, r7
 80088f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088f6:	b10b      	cbz	r3, 80088fc <_svfiprintf_r+0x58>
 80088f8:	2b25      	cmp	r3, #37	; 0x25
 80088fa:	d13e      	bne.n	800897a <_svfiprintf_r+0xd6>
 80088fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008900:	d00b      	beq.n	800891a <_svfiprintf_r+0x76>
 8008902:	4653      	mov	r3, sl
 8008904:	4632      	mov	r2, r6
 8008906:	4621      	mov	r1, r4
 8008908:	4640      	mov	r0, r8
 800890a:	f7ff ff71 	bl	80087f0 <__ssputs_r>
 800890e:	3001      	adds	r0, #1
 8008910:	f000 80a4 	beq.w	8008a5c <_svfiprintf_r+0x1b8>
 8008914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008916:	4453      	add	r3, sl
 8008918:	9309      	str	r3, [sp, #36]	; 0x24
 800891a:	783b      	ldrb	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 809d 	beq.w	8008a5c <_svfiprintf_r+0x1b8>
 8008922:	2300      	movs	r3, #0
 8008924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008934:	931a      	str	r3, [sp, #104]	; 0x68
 8008936:	462f      	mov	r7, r5
 8008938:	2205      	movs	r2, #5
 800893a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800893e:	4850      	ldr	r0, [pc, #320]	; (8008a80 <_svfiprintf_r+0x1dc>)
 8008940:	f7ff fbac 	bl	800809c <memchr>
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	b9d0      	cbnz	r0, 800897e <_svfiprintf_r+0xda>
 8008948:	06d9      	lsls	r1, r3, #27
 800894a:	bf44      	itt	mi
 800894c:	2220      	movmi	r2, #32
 800894e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008952:	071a      	lsls	r2, r3, #28
 8008954:	bf44      	itt	mi
 8008956:	222b      	movmi	r2, #43	; 0x2b
 8008958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800895c:	782a      	ldrb	r2, [r5, #0]
 800895e:	2a2a      	cmp	r2, #42	; 0x2a
 8008960:	d015      	beq.n	800898e <_svfiprintf_r+0xea>
 8008962:	462f      	mov	r7, r5
 8008964:	2000      	movs	r0, #0
 8008966:	250a      	movs	r5, #10
 8008968:	9a07      	ldr	r2, [sp, #28]
 800896a:	4639      	mov	r1, r7
 800896c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008970:	3b30      	subs	r3, #48	; 0x30
 8008972:	2b09      	cmp	r3, #9
 8008974:	d94d      	bls.n	8008a12 <_svfiprintf_r+0x16e>
 8008976:	b1b8      	cbz	r0, 80089a8 <_svfiprintf_r+0x104>
 8008978:	e00f      	b.n	800899a <_svfiprintf_r+0xf6>
 800897a:	462f      	mov	r7, r5
 800897c:	e7b8      	b.n	80088f0 <_svfiprintf_r+0x4c>
 800897e:	4a40      	ldr	r2, [pc, #256]	; (8008a80 <_svfiprintf_r+0x1dc>)
 8008980:	463d      	mov	r5, r7
 8008982:	1a80      	subs	r0, r0, r2
 8008984:	fa0b f000 	lsl.w	r0, fp, r0
 8008988:	4318      	orrs	r0, r3
 800898a:	9004      	str	r0, [sp, #16]
 800898c:	e7d3      	b.n	8008936 <_svfiprintf_r+0x92>
 800898e:	9a03      	ldr	r2, [sp, #12]
 8008990:	1d11      	adds	r1, r2, #4
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	9103      	str	r1, [sp, #12]
 8008996:	2a00      	cmp	r2, #0
 8008998:	db01      	blt.n	800899e <_svfiprintf_r+0xfa>
 800899a:	9207      	str	r2, [sp, #28]
 800899c:	e004      	b.n	80089a8 <_svfiprintf_r+0x104>
 800899e:	4252      	negs	r2, r2
 80089a0:	f043 0302 	orr.w	r3, r3, #2
 80089a4:	9207      	str	r2, [sp, #28]
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	783b      	ldrb	r3, [r7, #0]
 80089aa:	2b2e      	cmp	r3, #46	; 0x2e
 80089ac:	d10c      	bne.n	80089c8 <_svfiprintf_r+0x124>
 80089ae:	787b      	ldrb	r3, [r7, #1]
 80089b0:	2b2a      	cmp	r3, #42	; 0x2a
 80089b2:	d133      	bne.n	8008a1c <_svfiprintf_r+0x178>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	3702      	adds	r7, #2
 80089b8:	1d1a      	adds	r2, r3, #4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	9203      	str	r2, [sp, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfb8      	it	lt
 80089c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	4d2e      	ldr	r5, [pc, #184]	; (8008a84 <_svfiprintf_r+0x1e0>)
 80089ca:	2203      	movs	r2, #3
 80089cc:	7839      	ldrb	r1, [r7, #0]
 80089ce:	4628      	mov	r0, r5
 80089d0:	f7ff fb64 	bl	800809c <memchr>
 80089d4:	b138      	cbz	r0, 80089e6 <_svfiprintf_r+0x142>
 80089d6:	2340      	movs	r3, #64	; 0x40
 80089d8:	1b40      	subs	r0, r0, r5
 80089da:	fa03 f000 	lsl.w	r0, r3, r0
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	3701      	adds	r7, #1
 80089e2:	4303      	orrs	r3, r0
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	7839      	ldrb	r1, [r7, #0]
 80089e8:	2206      	movs	r2, #6
 80089ea:	4827      	ldr	r0, [pc, #156]	; (8008a88 <_svfiprintf_r+0x1e4>)
 80089ec:	1c7e      	adds	r6, r7, #1
 80089ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089f2:	f7ff fb53 	bl	800809c <memchr>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d038      	beq.n	8008a6c <_svfiprintf_r+0x1c8>
 80089fa:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <_svfiprintf_r+0x1e8>)
 80089fc:	bb13      	cbnz	r3, 8008a44 <_svfiprintf_r+0x1a0>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	3307      	adds	r3, #7
 8008a02:	f023 0307 	bic.w	r3, r3, #7
 8008a06:	3308      	adds	r3, #8
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0c:	444b      	add	r3, r9
 8008a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a10:	e76d      	b.n	80088ee <_svfiprintf_r+0x4a>
 8008a12:	fb05 3202 	mla	r2, r5, r2, r3
 8008a16:	2001      	movs	r0, #1
 8008a18:	460f      	mov	r7, r1
 8008a1a:	e7a6      	b.n	800896a <_svfiprintf_r+0xc6>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	250a      	movs	r5, #10
 8008a20:	4619      	mov	r1, r3
 8008a22:	3701      	adds	r7, #1
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	4638      	mov	r0, r7
 8008a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2c:	3a30      	subs	r2, #48	; 0x30
 8008a2e:	2a09      	cmp	r2, #9
 8008a30:	d903      	bls.n	8008a3a <_svfiprintf_r+0x196>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0c8      	beq.n	80089c8 <_svfiprintf_r+0x124>
 8008a36:	9105      	str	r1, [sp, #20]
 8008a38:	e7c6      	b.n	80089c8 <_svfiprintf_r+0x124>
 8008a3a:	fb05 2101 	mla	r1, r5, r1, r2
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4607      	mov	r7, r0
 8008a42:	e7f0      	b.n	8008a26 <_svfiprintf_r+0x182>
 8008a44:	ab03      	add	r3, sp, #12
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <_svfiprintf_r+0x1ec>)
 8008a4c:	a904      	add	r1, sp, #16
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7fe f8ec 	bl	8006c2c <_printf_float>
 8008a54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a58:	4681      	mov	r9, r0
 8008a5a:	d1d6      	bne.n	8008a0a <_svfiprintf_r+0x166>
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	065b      	lsls	r3, r3, #25
 8008a60:	f53f af35 	bmi.w	80088ce <_svfiprintf_r+0x2a>
 8008a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a66:	b01d      	add	sp, #116	; 0x74
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4622      	mov	r2, r4
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <_svfiprintf_r+0x1ec>)
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7fe fb84 	bl	8007184 <_printf_i>
 8008a7c:	e7ea      	b.n	8008a54 <_svfiprintf_r+0x1b0>
 8008a7e:	bf00      	nop
 8008a80:	08008eb4 	.word	0x08008eb4
 8008a84:	08008eba 	.word	0x08008eba
 8008a88:	08008ebe 	.word	0x08008ebe
 8008a8c:	08006c2d 	.word	0x08006c2d
 8008a90:	080087f1 	.word	0x080087f1

08008a94 <_sbrk_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	2300      	movs	r3, #0
 8008a98:	4c05      	ldr	r4, [pc, #20]	; (8008ab0 <_sbrk_r+0x1c>)
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	f7fa f990 	bl	8002dc4 <_sbrk>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_sbrk_r+0x1a>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_sbrk_r+0x1a>
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	200005f0 	.word	0x200005f0

08008ab4 <__ascii_mbtowc>:
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	b901      	cbnz	r1, 8008aba <__ascii_mbtowc+0x6>
 8008ab8:	a901      	add	r1, sp, #4
 8008aba:	b142      	cbz	r2, 8008ace <__ascii_mbtowc+0x1a>
 8008abc:	b14b      	cbz	r3, 8008ad2 <__ascii_mbtowc+0x1e>
 8008abe:	7813      	ldrb	r3, [r2, #0]
 8008ac0:	600b      	str	r3, [r1, #0]
 8008ac2:	7812      	ldrb	r2, [r2, #0]
 8008ac4:	1c10      	adds	r0, r2, #0
 8008ac6:	bf18      	it	ne
 8008ac8:	2001      	movne	r0, #1
 8008aca:	b002      	add	sp, #8
 8008acc:	4770      	bx	lr
 8008ace:	4610      	mov	r0, r2
 8008ad0:	e7fb      	b.n	8008aca <__ascii_mbtowc+0x16>
 8008ad2:	f06f 0001 	mvn.w	r0, #1
 8008ad6:	e7f8      	b.n	8008aca <__ascii_mbtowc+0x16>

08008ad8 <memmove>:
 8008ad8:	4288      	cmp	r0, r1
 8008ada:	b510      	push	{r4, lr}
 8008adc:	eb01 0302 	add.w	r3, r1, r2
 8008ae0:	d807      	bhi.n	8008af2 <memmove+0x1a>
 8008ae2:	1e42      	subs	r2, r0, #1
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d00a      	beq.n	8008afe <memmove+0x26>
 8008ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008af0:	e7f8      	b.n	8008ae4 <memmove+0xc>
 8008af2:	4283      	cmp	r3, r0
 8008af4:	d9f5      	bls.n	8008ae2 <memmove+0xa>
 8008af6:	1881      	adds	r1, r0, r2
 8008af8:	1ad2      	subs	r2, r2, r3
 8008afa:	42d3      	cmn	r3, r2
 8008afc:	d100      	bne.n	8008b00 <memmove+0x28>
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b08:	e7f7      	b.n	8008afa <memmove+0x22>

08008b0a <__malloc_lock>:
 8008b0a:	4770      	bx	lr

08008b0c <__malloc_unlock>:
 8008b0c:	4770      	bx	lr

08008b0e <_realloc_r>:
 8008b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b10:	4607      	mov	r7, r0
 8008b12:	4614      	mov	r4, r2
 8008b14:	460e      	mov	r6, r1
 8008b16:	b921      	cbnz	r1, 8008b22 <_realloc_r+0x14>
 8008b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	f7ff be0d 	b.w	800873c <_malloc_r>
 8008b22:	b922      	cbnz	r2, 8008b2e <_realloc_r+0x20>
 8008b24:	f7ff fdbe 	bl	80086a4 <_free_r>
 8008b28:	4625      	mov	r5, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2e:	f000 f821 	bl	8008b74 <_malloc_usable_size_r>
 8008b32:	42a0      	cmp	r0, r4
 8008b34:	d20f      	bcs.n	8008b56 <_realloc_r+0x48>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff fdff 	bl	800873c <_malloc_r>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0f2      	beq.n	8008b2a <_realloc_r+0x1c>
 8008b44:	4631      	mov	r1, r6
 8008b46:	4622      	mov	r2, r4
 8008b48:	f7ff fab6 	bl	80080b8 <memcpy>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff fda8 	bl	80086a4 <_free_r>
 8008b54:	e7e9      	b.n	8008b2a <_realloc_r+0x1c>
 8008b56:	4635      	mov	r5, r6
 8008b58:	e7e7      	b.n	8008b2a <_realloc_r+0x1c>

08008b5a <__ascii_wctomb>:
 8008b5a:	b149      	cbz	r1, 8008b70 <__ascii_wctomb+0x16>
 8008b5c:	2aff      	cmp	r2, #255	; 0xff
 8008b5e:	bf8b      	itete	hi
 8008b60:	238a      	movhi	r3, #138	; 0x8a
 8008b62:	700a      	strbls	r2, [r1, #0]
 8008b64:	6003      	strhi	r3, [r0, #0]
 8008b66:	2001      	movls	r0, #1
 8008b68:	bf88      	it	hi
 8008b6a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b6e:	4770      	bx	lr
 8008b70:	4608      	mov	r0, r1
 8008b72:	4770      	bx	lr

08008b74 <_malloc_usable_size_r>:
 8008b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b78:	1f18      	subs	r0, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbc      	itt	lt
 8008b7e:	580b      	ldrlt	r3, [r1, r0]
 8008b80:	18c0      	addlt	r0, r0, r3
 8008b82:	4770      	bx	lr

08008b84 <_init>:
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	bf00      	nop
 8008b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8a:	bc08      	pop	{r3}
 8008b8c:	469e      	mov	lr, r3
 8008b8e:	4770      	bx	lr

08008b90 <_fini>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr
