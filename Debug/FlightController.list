
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  0800c140  0800c140  0001c140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cec8  0800cec8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cec8  0800cec8  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cec8  0800cec8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cecc  0800cecc  0001cecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ced0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e8  0800d0b8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800d0b8  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a22  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb9  00000000  00000000  00037c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003c070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171b3  00000000  00000000  0003d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6df  00000000  00000000  0005465b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f1b6  00000000  00000000  00063d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006828  00000000  00000000  000e2f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c128 	.word	0x0800c128

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c128 	.word	0x0800c128

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <MPU6050_Write_Single_Bit>:

};


void MPU6050_Write_Single_Bit(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitPosition, uint8_t BitValue)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	70fb      	strb	r3, [r7, #3]
 8001122:	460b      	mov	r3, r1
 8001124:	70bb      	strb	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &data, 1, 1000);//read whole Register
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	b299      	uxth	r1, r3
 800112e:	78bb      	ldrb	r3, [r7, #2]
 8001130:	b29a      	uxth	r2, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 030f 	add.w	r3, r7, #15
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f006 f8c1 	bl	80072cc <HAL_I2C_Mem_Read>

	if(BitValue==1)			data|= 1<<BitPosition; 		 //force 1 to bit in BitPosition
 800114a:	7e3b      	ldrb	r3, [r7, #24]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10b      	bne.n	8001168 <MPU6050_Write_Single_Bit+0x58>
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2201      	movs	r2, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	b25a      	sxtb	r2, r3
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b25b      	sxtb	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e00f      	b.n	8001188 <MPU6050_Write_Single_Bit+0x78>
	else if(BitValue==0) 	data&=~(1<<BitPosition); 	 //force 0 to bit in BitPosition
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10c      	bne.n	8001188 <MPU6050_Write_Single_Bit+0x78>
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	2201      	movs	r2, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	b25a      	sxtb	r2, r3
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	4013      	ands	r3, r2
 8001182:	b25b      	sxtb	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, RegisterAddress, 1,&data, 1, 1000); //write corected data (1 bit only) back to register
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	b299      	uxth	r1, r3
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	b29a      	uxth	r2, r3
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f005 ff98 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MPU6050_Write_Few_Bits>:

void MPU6050_Write_Few_Bits(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitStart, uint8_t Length, uint8_t data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	uint8_t mask;
	uint8_t temp;

	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &temp, 1, 1000);//read whole Register
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	78bb      	ldrb	r3, [r7, #2]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 030e 	add.w	r3, r7, #14
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f006 f871 	bl	80072cc <HAL_I2C_Mem_Read>

    mask = ((1 << Length) - 1) << (BitStart - Length + 1);
 80011ea:	7e3b      	ldrb	r3, [r7, #24]
 80011ec:	2201      	movs	r2, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	7879      	ldrb	r1, [r7, #1]
 80011f6:	7e3b      	ldrb	r3, [r7, #24]
 80011f8:	1acb      	subs	r3, r1, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	73fb      	strb	r3, [r7, #15]
    data <<= (BitStart - Length + 1); // shift data into correct position
 8001202:	7f3a      	ldrb	r2, [r7, #28]
 8001204:	7879      	ldrb	r1, [r7, #1]
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	1acb      	subs	r3, r1, r3
 800120a:	3301      	adds	r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	773b      	strb	r3, [r7, #28]
    data &= mask; // zero all non-important bits in data
 8001212:	7f3a      	ldrb	r2, [r7, #28]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4013      	ands	r3, r2
 8001218:	773b      	strb	r3, [r7, #28]
    temp &= ~(mask); // zero all important bits in existing word
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	43db      	mvns	r3, r3
 8001220:	b25a      	sxtb	r2, r3
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	b25b      	sxtb	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73bb      	strb	r3, [r7, #14]
    temp |= data; // combine data with existing word
 800122e:	7bba      	ldrb	r2, [r7, #14]
 8001230:	7f3b      	ldrb	r3, [r7, #28]
 8001232:	4313      	orrs	r3, r2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, RegisterAddress, 1,&temp, 1, 1000); //write corected data (1 bit only) back to register
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	b299      	uxth	r1, r3
 800123c:	78bb      	ldrb	r3, [r7, #2]
 800123e:	b29a      	uxth	r2, r3
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030e 	add.w	r3, r7, #14
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f005 ff40 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MPU6050_Read_Single_Bit>:

uint8_t MPU6050_Read_Single_Bit(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t RegisterAddress, uint8_t BitPosition)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4603      	mov	r3, r0
 8001270:	70fb      	strb	r3, [r7, #3]
 8001272:	460b      	mov	r3, r1
 8001274:	70bb      	strb	r3, [r7, #2]
 8001276:	4613      	mov	r3, r2
 8001278:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, RegisterAddress, 1, &data, 1, 1000);//read whole Register
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	b299      	uxth	r1, r3
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	b29a      	uxth	r2, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2301      	movs	r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 030f 	add.w	r3, r7, #15
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f006 f819 	bl	80072cc <HAL_I2C_Mem_Read>

	//filter bit data
	data&=(1<<BitPosition);
 800129a:	787b      	ldrb	r3, [r7, #1]
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
	//shift bit
	data=data>>BitPosition;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	461a      	mov	r2, r3
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	fa42 f303 	asr.w	r3, r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]

	return data;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MPU6050_check>:

MPU6050_Result MPU6050_check(I2C_HandleTypeDef* I2Cx)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t data;

	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS,MPU6050_WHO_AM_I,1, &data, 1, 1000);
 80012d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d4:	9302      	str	r3, [sp, #8]
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f107 030f 	add.w	r3, r7, #15
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	2275      	movs	r2, #117	; 0x75
 80012e4:	21d0      	movs	r1, #208	; 0xd0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f005 fff0 	bl	80072cc <HAL_I2C_Mem_Read>

	if(data==MPU6050_I_AM_VAL) return MPU6050_DETECTED;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b68      	cmp	r3, #104	; 0x68
 80012f0:	d101      	bne.n	80012f6 <MPU6050_check+0x2e>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <MPU6050_check+0x30>
	else return MPU6050_NOTDETECTED;
 80012f6:	2300      	movs	r3, #0

}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MPU6050_gyroread>:
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data [5]);

}

void MPU6050_gyroread(I2C_HandleTypeDef* I2Cx, MPU6050str* DataStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af04      	add	r7, sp, #16
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read (I2Cx, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, data, 6, 1000);
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2306      	movs	r3, #6
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2243      	movs	r2, #67	; 0x43
 800131e:	21d0      	movs	r1, #208	; 0xd0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f005 ffd3 	bl	80072cc <HAL_I2C_Mem_Read>

	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data [1]);
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data [3]);
 8001338:	7abb      	ldrb	r3, [r7, #10]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data [5]);
 800134a:	7b3b      	ldrb	r3, [r7, #12]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7b7b      	ldrb	r3, [r7, #13]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	815a      	strh	r2, [r3, #10]
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <MPU6050_DMP_Enable>:
	MPU6050_SetGyroRange(I2Cx,MPU6050_ADDRESS, MPU6050_GYRO_FS_250);
	MPU6050_SetAccelRange(I2Cx,MPU6050_ADDRESS, MPU6050_ACCEL_FS_2);
}

void MPU6050_DMP_Enable(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddress, uint8_t enable)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
 8001370:	4613      	mov	r3, r2
 8001372:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enable);
 8001374:	78f9      	ldrb	r1, [r7, #3]
 8001376:	78bb      	ldrb	r3, [r7, #2]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2307      	movs	r3, #7
 800137c:	226a      	movs	r2, #106	; 0x6a
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fec6 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <MPU6050_DMP_Reset>:

void MPU6050_DMP_Reset(I2C_HandleTypeDef* I2Cx,uint8_t DeviceAddres)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddres, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);
 8001398:	78f9      	ldrb	r1, [r7, #3]
 800139a:	2301      	movs	r3, #1
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2303      	movs	r3, #3
 80013a0:	226a      	movs	r2, #106	; 0x6a
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb4 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <MPU6050_Set_Memory_Bank>:
	data=MPU6050_Read_Single_Bit(I2Cx, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT);
	return data;
}

void MPU6050_Set_Memory_Bank(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t bank, uint8_t prefetchEnabled, uint8_t userBank)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	70fb      	strb	r3, [r7, #3]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70bb      	strb	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 80013ca:	78bb      	ldrb	r3, [r7, #2]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	70bb      	strb	r3, [r7, #2]
	if (userBank) bank |= 0x20;
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <MPU6050_Set_Memory_Bank+0x34>
 80013da:	78bb      	ldrb	r3, [r7, #2]
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	70bb      	strb	r3, [r7, #2]
	if (prefetchEnabled) bank |= 0x40;
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <MPU6050_Set_Memory_Bank+0x44>
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_BANK_SEL, 1,&bank, 1, 1000);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	b299      	uxth	r1, r3
 80013f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2301      	movs	r3, #1
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	226d      	movs	r2, #109	; 0x6d
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f005 fe64 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MPU6050_Set_Memory_Start_Address>:

void MPU6050_Set_Memory_Start_Address(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t address)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	4613      	mov	r3, r2
 8001426:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MEM_START_ADDR, 1, &address, 1, 1000);
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	b299      	uxth	r1, r3
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	226e      	movs	r2, #110	; 0x6e
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f005 fe4a 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <MPU6050_Read_Memory_Bank>:

uint8_t MPU6050_Read_Memory_Bank(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af04      	add	r7, sp, #16
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, &data, 1, 1000);
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	b299      	uxth	r1, r3
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2301      	movs	r3, #1
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	f107 030f 	add.w	r3, r7, #15
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	226f      	movs	r2, #111	; 0x6f
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 ff2b 	bl	80072cc <HAL_I2C_Mem_Read>
	return data;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <MPU6050_getOTPBankValid>:

uint8_t MPU6050_getOTPBankValid(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT);
 800148c:	78f9      	ldrb	r1, [r7, #3]
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fee4 	bl	8001260 <MPU6050_Read_Single_Bit>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
	return data;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <MPU6050_Set_SlaveAddress>:

void MPU6050_Set_SlaveAddress(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t num, uint8_t address)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af04      	add	r7, sp, #16
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	4608      	mov	r0, r1
 80014b0:	4611      	mov	r1, r2
 80014b2:	461a      	mov	r2, r3
 80014b4:	4603      	mov	r3, r0
 80014b6:	70fb      	strb	r3, [r7, #3]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70bb      	strb	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_I2C_SLV0_ADDR + num*3, 1, &address, 1, 1000);
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	b299      	uxth	r1, r3
 80014c4:	78bb      	ldrb	r3, [r7, #2]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3325      	adds	r3, #37	; 0x25
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	1c7b      	adds	r3, r7, #1
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f005 fdf7 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <MPU6050_Set_MasterModeEnable>:

void MPU6050_Set_MasterModeEnable(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af02      	add	r7, sp, #8
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
 80014fe:	4613      	mov	r3, r2
 8001500:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT ,enable);
 8001502:	78f9      	ldrb	r1, [r7, #3]
 8001504:	78bb      	ldrb	r3, [r7, #2]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2305      	movs	r3, #5
 800150a:	226a      	movs	r2, #106	; 0x6a
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fdff 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MPU6050_Reset_I2CMaster>:

void MPU6050_Reset_I2CMaster(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT ,1);
 8001526:	78f9      	ldrb	r1, [r7, #3]
 8001528:	2301      	movs	r3, #1
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	226a      	movs	r2, #106	; 0x6a
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fded 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <MPU6050_Set_CLK_Source>:

void MPU6050_Set_CLK_Source(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t source)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af02      	add	r7, sp, #8
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]
 800154a:	4613      	mov	r3, r2
 800154c:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx,DeviceAddress, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH ,source);
 800154e:	78f9      	ldrb	r1, [r7, #3]
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2303      	movs	r3, #3
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	226b      	movs	r2, #107	; 0x6b
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe27 	bl	80011b0 <MPU6050_Write_Few_Bits>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <MPU6050_Reset>:

void MPU6050_Reset(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af02      	add	r7, sp, #8
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT ,1);
 8001576:	2301      	movs	r3, #1
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2307      	movs	r3, #7
 800157c:	226b      	movs	r2, #107	; 0x6b
 800157e:	21d0      	movs	r1, #208	; 0xd0
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fdc5 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af02      	add	r7, sp, #8
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	4613      	mov	r3, r2
 800159c:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT ,enable);
 800159e:	78bb      	ldrb	r3, [r7, #2]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2306      	movs	r3, #6
 80015a4:	226b      	movs	r2, #107	; 0x6b
 80015a6:	21d0      	movs	r1, #208	; 0xd0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fdb1 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <MPU6050_SetIntEnabled>:

void MPU6050_SetIntEnabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t enable)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af04      	add	r7, sp, #16
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
 80015c2:	4613      	mov	r3, r2
 80015c4:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_INT_ENABLE, 1, &enable, 1, 1000);
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2301      	movs	r3, #1
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	1cbb      	adds	r3, r7, #2
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2301      	movs	r3, #1
 80015da:	2238      	movs	r2, #56	; 0x38
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f005 fd7b 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <MPU6050_SetRate>:

void MPU6050_SetRate(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t rate)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
 80015f6:	4613      	mov	r3, r2
 80015f8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_SMPLRT_DIV, 1, &rate, 1, 1000);
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	b299      	uxth	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	2301      	movs	r3, #1
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	1cbb      	adds	r3, r7, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	2219      	movs	r2, #25
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f005 fd61 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <MPU6050_SetGyroRange>:

void MPU6050_SetGyroRange(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t range)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af02      	add	r7, sp, #8
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
 800162a:	4613      	mov	r3, r2
 800162c:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH,range);
 800162e:	78f9      	ldrb	r1, [r7, #3]
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2304      	movs	r3, #4
 800163a:	221b      	movs	r2, #27
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fdb7 	bl	80011b0 <MPU6050_Write_Few_Bits>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <SetExternalFrameSync>:
{
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH,range);
}

void SetExternalFrameSync(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t sync)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af02      	add	r7, sp, #8
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	4613      	mov	r3, r2
 8001658:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH,sync);
 800165a:	78f9      	ldrb	r1, [r7, #3]
 800165c:	78bb      	ldrb	r3, [r7, #2]
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2303      	movs	r3, #3
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2305      	movs	r3, #5
 8001666:	221a      	movs	r2, #26
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fda1 	bl	80011b0 <MPU6050_Write_Few_Bits>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <SetDLPFMode>:

void SetDLPFMode(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t mode)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af02      	add	r7, sp, #8
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	70fb      	strb	r3, [r7, #3]
 8001682:	4613      	mov	r3, r2
 8001684:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Few_Bits(I2Cx, DeviceAddress, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH,mode);
 8001686:	78f9      	ldrb	r1, [r7, #3]
 8001688:	78bb      	ldrb	r3, [r7, #2]
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2303      	movs	r3, #3
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2302      	movs	r3, #2
 8001692:	221a      	movs	r2, #26
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fd8b 	bl	80011b0 <MPU6050_Write_Few_Bits>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <MPU6050_DMPConfig1>:

void MPU6050_DMPConfig1(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t config)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af04      	add	r7, sp, #16
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
 80016ae:	4613      	mov	r3, r2
 80016b0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_DMP_CFG_1, 1, &config, 1, 1000);
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	b299      	uxth	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2301      	movs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	1cbb      	adds	r3, r7, #2
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	2270      	movs	r2, #112	; 0x70
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 fd05 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <MPU6050_DMPConfig2>:

void MPU6050_DMPConfig2(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t config)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af04      	add	r7, sp, #16
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
 80016e2:	4613      	mov	r3, r2
 80016e4:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_DMP_CFG_2, 1, &config, 1, 1000);
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	b299      	uxth	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	1cbb      	adds	r3, r7, #2
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	2271      	movs	r2, #113	; 0x71
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f005 fceb 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <MPU6050_SetOTPBankValid>:

void MPU6050_SetOTPBankValid(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af02      	add	r7, sp, #8
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	4613      	mov	r3, r2
 8001718:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT ,enable);
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	21d0      	movs	r1, #208	; 0xd0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fcf3 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <MPU6050_SetMotionDetectionThreshold>:

void MPU6050_SetMotionDetectionThreshold(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t threshold)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af04      	add	r7, sp, #16
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
 800173e:	4613      	mov	r3, r2
 8001740:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MOT_THR, 1, &threshold, 1, 1000);
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	b299      	uxth	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	1cbb      	adds	r3, r7, #2
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	221f      	movs	r2, #31
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 fcbd 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <MPU6050_SetZeroMotionDetectionThreshold>:

void MPU6050_SetZeroMotionDetectionThreshold(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t threshold)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af04      	add	r7, sp, #16
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	4613      	mov	r3, r2
 8001774:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_ZRMOT_THR, 1, &threshold, 1, 1000);
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	b299      	uxth	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	1cbb      	adds	r3, r7, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	2221      	movs	r2, #33	; 0x21
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 fca3 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <MPU6050_SetMotionDetectionDuration>:

void MPU6050_SetMotionDetectionDuration(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t duration)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af04      	add	r7, sp, #16
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
 80017a6:	4613      	mov	r3, r2
 80017a8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MOT_DUR, 1, &duration, 1, 1000);
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	b299      	uxth	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2301      	movs	r3, #1
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	1cbb      	adds	r3, r7, #2
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	2220      	movs	r2, #32
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f005 fc89 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <MPU6050_SetZeroMotionDetectionDuration>:

void MPU6050_SetZeroMotionDetectionDuration(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress, uint8_t duration)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af04      	add	r7, sp, #16
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70fb      	strb	r3, [r7, #3]
 80017da:	4613      	mov	r3, r2
 80017dc:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_ZRMOT_DUR, 1, &duration, 1, 1000);
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	1cbb      	adds	r3, r7, #2
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2222      	movs	r2, #34	; 0x22
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f005 fc6f 	bl	80070d8 <HAL_I2C_Mem_Write>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <MPU6050_SetFIFOenabled>:

void MPU6050_SetFIFOenabled(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t enable)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af02      	add	r7, sp, #8
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	4613      	mov	r3, r2
 8001810:	70bb      	strb	r3, [r7, #2]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT ,enable);
 8001812:	78bb      	ldrb	r3, [r7, #2]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2306      	movs	r3, #6
 8001818:	226a      	movs	r2, #106	; 0x6a
 800181a:	21d0      	movs	r1, #208	; 0xd0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fc77 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <MPU6050_ResetFIFO>:

void MPU6050_ResetFIFO(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af02      	add	r7, sp, #8
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
	MPU6050_Write_Single_Bit(I2Cx,MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT ,1);
 8001836:	2301      	movs	r3, #1
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	226a      	movs	r2, #106	; 0x6a
 800183e:	21d0      	movs	r1, #208	; 0xd0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fc65 	bl	8001110 <MPU6050_Write_Single_Bit>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <MPU6050_GetFifoCount>:

uint16_t MPU6050_GetFifoCount(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af04      	add	r7, sp, #16
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_FIFO_COUNTH, 1, data, 2, 1000);
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	b299      	uxth	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2302      	movs	r3, #2
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2272      	movs	r2, #114	; 0x72
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f005 fd2a 	bl	80072cc <HAL_I2C_Mem_Read>
	return (((uint16_t)data[0]) << 8) | data[1];
 8001878:	7b3b      	ldrb	r3, [r7, #12]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	b29b      	uxth	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <MPU6050_GetFifoBytes>:
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT);
	return data;
}

void MPU6050_GetFifoBytes(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t *data, uint8_t length)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af04      	add	r7, sp, #16
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	72fb      	strb	r3, [r7, #11]
 80018a0:	4613      	mov	r3, r2
 80018a2:	72bb      	strb	r3, [r7, #10]
    if(length > 0)
 80018a4:	7abb      	ldrb	r3, [r7, #10]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00f      	beq.n	80018ca <MPU6050_GetFifoBytes+0x3a>
    {
    	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_FIFO_R_W, 1 , data, length, 1000);
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	b299      	uxth	r1, r3
 80018ae:	7abb      	ldrb	r3, [r7, #10]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2301      	movs	r3, #1
 80018c0:	2274      	movs	r2, #116	; 0x74
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f005 fd02 	bl	80072cc <HAL_I2C_Mem_Read>

    else
    {
    	*data = 0;
    }
}
 80018c8:	e002      	b.n	80018d0 <MPU6050_GetFifoBytes+0x40>
    	*data = 0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <MPU6050_GetIntStatus>:
	data=MPU6050_Read_Single_Bit(I2Cx, DeviceAddress, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT);
	return data;
}

uint8_t MPU6050_GetIntStatus(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af04      	add	r7, sp, #16
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_INT_STATUS, 1, &data, 1, 1000);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	b299      	uxth	r1, r3
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 030f 	add.w	r3, r7, #15
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	223a      	movs	r2, #58	; 0x3a
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f005 fce5 	bl	80072cc <HAL_I2C_Mem_Read>
	return data;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <MPU6050_GetCurrentFIFOPacket>:

uint32_t MPU6050_GetCurrentFIFOPacket(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,uint8_t *data,uint8_t length)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	72fb      	strb	r3, [r7, #11]
 800191c:	4613      	mov	r3, r2
 800191e:	72bb      	strb	r3, [r7, #10]
    int16_t fifoC;

    fifoC = MPU6050_GetFifoCount(I2Cx, DeviceAddress);
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	4619      	mov	r1, r3
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff92 	bl	800184e <MPU6050_GetFifoCount>
 800192a:	4603      	mov	r3, r0
 800192c:	82fb      	strh	r3, [r7, #22]

    if(!fifoC)//No data in FIFO
 800192e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <MPU6050_GetCurrentFIFOPacket+0x2e>
    {
    	return 0;
 8001936:	2300      	movs	r3, #0
 8001938:	e011      	b.n	800195e <MPU6050_GetCurrentFIFOPacket+0x52>
    }

    if(fifoC > length)//reset Buffer, more than expected 42 packets clr buffer read in next cycle
 800193a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	429a      	cmp	r2, r3
 8001942:	dd05      	ble.n	8001950 <MPU6050_GetCurrentFIFOPacket+0x44>
    {
    	MPU6050_ResetFIFO(I2Cx,MPU6050_ADDRESS);
 8001944:	21d0      	movs	r1, #208	; 0xd0
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff ff6f 	bl	800182a <MPU6050_ResetFIFO>
    	return 0;
 800194c:	2300      	movs	r3, #0
 800194e:	e006      	b.n	800195e <MPU6050_GetCurrentFIFOPacket+0x52>
    }

    else //read expected 42 bytes
    {
    	MPU6050_GetFifoBytes(I2Cx, DeviceAddress,data, length);
 8001950:	7abb      	ldrb	r3, [r7, #10]
 8001952:	7af9      	ldrb	r1, [r7, #11]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff ff9a 	bl	8001890 <MPU6050_GetFifoBytes>
    	return 1;
 800195c:	2301      	movs	r3, #1
    }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <MPU6050_WriteMemoryBlock>:

uint8_t MPU6050_WriteMemoryBlock(I2C_HandleTypeDef* I2Cx, uint8_t DeviceAddress,const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address,uint8_t verify, uint8_t useProgMem)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b08c      	sub	sp, #48	; 0x30
 800196a:	af04      	add	r7, sp, #16
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	461a      	mov	r2, r3
 8001972:	460b      	mov	r3, r1
 8001974:	72fb      	strb	r3, [r7, #11]
 8001976:	4613      	mov	r3, r2
 8001978:	813b      	strh	r3, [r7, #8]
	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 800197a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800197e:	7af9      	ldrb	r1, [r7, #11]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff fd12 	bl	80013b0 <MPU6050_Set_Memory_Bank>
	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 800198c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	4619      	mov	r1, r3
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fd3f 	bl	8001418 <MPU6050_Set_Memory_Start_Address>

    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) 	verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80019a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <MPU6050_WriteMemoryBlock+0x4e>
 80019aa:	2010      	movs	r0, #16
 80019ac:	f007 ffec 	bl	8009988 <malloc>
 80019b0:	4603      	mov	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80019b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <MPU6050_WriteMemoryBlock+0x60>
 80019bc:	2010      	movs	r0, #16
 80019be:	f007 ffe3 	bl	8009988 <malloc>
 80019c2:	4603      	mov	r3, r0
 80019c4:	617b      	str	r3, [r7, #20]

    for (i = 0; i < dataSize;)
 80019c6:	2300      	movs	r3, #0
 80019c8:	827b      	strh	r3, [r7, #18]
 80019ca:	e0a7      	b.n	8001b1c <MPU6050_WriteMemoryBlock+0x1b6>
    {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80019cc:	2310      	movs	r3, #16
 80019ce:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80019d0:	8a7a      	ldrh	r2, [r7, #18]
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	441a      	add	r2, r3
 80019d6:	893b      	ldrh	r3, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dd05      	ble.n	80019e8 <MPU6050_WriteMemoryBlock+0x82>
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	8a7b      	ldrh	r3, [r7, #18]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80019e8:	7ffa      	ldrb	r2, [r7, #31]
 80019ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd03      	ble.n	80019fe <MPU6050_WriteMemoryBlock+0x98>
 80019f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019fa:	425b      	negs	r3, r3
 80019fc:	77fb      	strb	r3, [r7, #31]

        if (useProgMem) {
 80019fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d014      	beq.n	8001a30 <MPU6050_WriteMemoryBlock+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8001a06:	2300      	movs	r3, #0
 8001a08:	747b      	strb	r3, [r7, #17]
 8001a0a:	e00c      	b.n	8001a26 <MPU6050_WriteMemoryBlock+0xc0>
 8001a0c:	8a7a      	ldrh	r2, [r7, #18]
 8001a0e:	7c7b      	ldrb	r3, [r7, #17]
 8001a10:	4413      	add	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	441a      	add	r2, r3
 8001a16:	7c7b      	ldrb	r3, [r7, #17]
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	7c7b      	ldrb	r3, [r7, #17]
 8001a22:	3301      	adds	r3, #1
 8001a24:	747b      	strb	r3, [r7, #17]
 8001a26:	7c7a      	ldrb	r2, [r7, #17]
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3ee      	bcc.n	8001a0c <MPU6050_WriteMemoryBlock+0xa6>
 8001a2e:	e003      	b.n	8001a38 <MPU6050_WriteMemoryBlock+0xd2>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
        }

        HAL_I2C_Mem_Write(I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, progBuffer, chunkSize, 1000);
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	b299      	uxth	r1, r3
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a44:	9202      	str	r2, [sp, #8]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	226f      	movs	r2, #111	; 0x6f
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f005 fb41 	bl	80070d8 <HAL_I2C_Mem_Write>

        // verify data if needed
        if (verify && verifyBuffer)
 8001a56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d036      	beq.n	8001acc <MPU6050_WriteMemoryBlock+0x166>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d033      	beq.n	8001acc <MPU6050_WriteMemoryBlock+0x166>
        {
        	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 8001a64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a68:	7af9      	ldrb	r1, [r7, #11]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fc9d 	bl	80013b0 <MPU6050_Set_Memory_Bank>
        	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 8001a76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fcca 	bl	8001418 <MPU6050_Set_Memory_Start_Address>

        	HAL_I2C_Mem_Read (I2Cx, DeviceAddress, MPU6050_RA_MEM_R_W, 1, verifyBuffer, chunkSize, 1000);
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	b299      	uxth	r1, r3
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a90:	9202      	str	r2, [sp, #8]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	226f      	movs	r2, #111	; 0x6f
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f005 fc15 	bl	80072cc <HAL_I2C_Mem_Read>

            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	6978      	ldr	r0, [r7, #20]
 8001aaa:	f007 ff7d 	bl	80099a8 <memcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00b      	beq.n	8001acc <MPU6050_WriteMemoryBlock+0x166>
            {
                free(verifyBuffer);
 8001ab4:	69b8      	ldr	r0, [r7, #24]
 8001ab6:	f007 ff6f 	bl	8009998 <free>
                if (useProgMem) free(progBuffer);
 8001aba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <MPU6050_WriteMemoryBlock+0x162>
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f007 ff68 	bl	8009998 <free>
                return 0; // uh oh.
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e03b      	b.n	8001b44 <MPU6050_WriteMemoryBlock+0x1de>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	8a7b      	ldrh	r3, [r7, #18]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8001ad6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	4413      	add	r3, r2
 8001ade:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize)
 8001ae2:	8a7a      	ldrh	r2, [r7, #18]
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d218      	bcs.n	8001b1c <MPU6050_WriteMemoryBlock+0x1b6>
        {
            if (address == 0) bank++;
 8001aea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d104      	bne.n	8001afc <MPU6050_WriteMemoryBlock+0x196>
 8001af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001af6:	3301      	adds	r3, #1
 8001af8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        	MPU6050_Set_Memory_Bank(I2Cx,DeviceAddress,bank,0,0);
 8001afc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b00:	7af9      	ldrb	r1, [r7, #11]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff fc51 	bl	80013b0 <MPU6050_Set_Memory_Bank>
        	MPU6050_Set_Memory_Start_Address(I2Cx,DeviceAddress,address);
 8001b0e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fc7e 	bl	8001418 <MPU6050_Set_Memory_Start_Address>
    for (i = 0; i < dataSize;)
 8001b1c:	8a7a      	ldrh	r2, [r7, #18]
 8001b1e:	893b      	ldrh	r3, [r7, #8]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f4ff af53 	bcc.w	80019cc <MPU6050_WriteMemoryBlock+0x66>
        }
    }
    if (verify) free(verifyBuffer);
 8001b26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <MPU6050_WriteMemoryBlock+0x1ce>
 8001b2e:	69b8      	ldr	r0, [r7, #24]
 8001b30:	f007 ff32 	bl	8009998 <free>
    if (useProgMem) free(progBuffer);
 8001b34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <MPU6050_WriteMemoryBlock+0x1dc>
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f007 ff2b 	bl	8009998 <free>
    return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <MPU6050_DMP_Init>:

uint8_t MPU6050_DMP_Init(I2C_HandleTypeDef* I2Cx)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	6078      	str	r0, [r7, #4]

	//reset Device
	MPU6050_Reset(I2Cx,MPU6050_ADDRESS);
 8001b54:	21d0      	movs	r1, #208	; 0xd0
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fd07 	bl	800156a <MPU6050_Reset>

	HAL_Delay(30);
 8001b5c:	201e      	movs	r0, #30
 8001b5e:	f004 f82d 	bl	8005bbc <HAL_Delay>

	//Sleep False
	MPU6050_SetSleepEnabled(I2Cx,MPU6050_ADDRESS,0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	21d0      	movs	r1, #208	; 0xd0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fd11 	bl	800158e <MPU6050_SetSleepEnabled>

	MPU6050_Set_Memory_Bank(I2Cx,MPU6050_ADDRESS, 0x10, 1, 1);
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2210      	movs	r2, #16
 8001b74:	21d0      	movs	r1, #208	; 0xd0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fc1a 	bl	80013b0 <MPU6050_Set_Memory_Bank>
	MPU6050_Set_Memory_Start_Address(I2Cx,MPU6050_ADDRESS,0x06);
 8001b7c:	2206      	movs	r2, #6
 8001b7e:	21d0      	movs	r1, #208	; 0xd0
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fc49 	bl	8001418 <MPU6050_Set_Memory_Start_Address>
	MPU6050_Read_Memory_Bank(I2Cx,MPU6050_ADDRESS);
 8001b86:	21d0      	movs	r1, #208	; 0xd0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fc5f 	bl	800144c <MPU6050_Read_Memory_Bank>
	MPU6050_Set_Memory_Bank(I2Cx,MPU6050_ADDRESS, 0, 0, 0);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	21d0      	movs	r1, #208	; 0xd0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fc09 	bl	80013b0 <MPU6050_Set_Memory_Bank>
	MPU6050_getOTPBankValid(I2Cx,MPU6050_ADDRESS);
 8001b9e:	21d0      	movs	r1, #208	; 0xd0
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fc6d 	bl	8001480 <MPU6050_getOTPBankValid>

	//Set Slave Stuff
	MPU6050_Set_SlaveAddress(I2Cx, MPU6050_ADDRESS, 0, 0x7F);	//slave 0 to address 0x7F
 8001ba6:	237f      	movs	r3, #127	; 0x7f
 8001ba8:	2200      	movs	r2, #0
 8001baa:	21d0      	movs	r1, #208	; 0xd0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fc7a 	bl	80014a6 <MPU6050_Set_SlaveAddress>
	MPU6050_Set_MasterModeEnable(I2Cx, MPU6050_ADDRESS,0); 		//disable master mode
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	21d0      	movs	r1, #208	; 0xd0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fc9b 	bl	80014f2 <MPU6050_Set_MasterModeEnable>
	MPU6050_Set_SlaveAddress(I2Cx, MPU6050_ADDRESS, 0, 0x68);	//slave 0 to address 0x68
 8001bbc:	2368      	movs	r3, #104	; 0x68
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	21d0      	movs	r1, #208	; 0xd0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fc6f 	bl	80014a6 <MPU6050_Set_SlaveAddress>
	MPU6050_Reset_I2CMaster(I2Cx,MPU6050_ADDRESS);
 8001bc8:	21d0      	movs	r1, #208	; 0xd0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fca5 	bl	800151a <MPU6050_Reset_I2CMaster>

	HAL_Delay(20);
 8001bd0:	2014      	movs	r0, #20
 8001bd2:	f003 fff3 	bl	8005bbc <HAL_Delay>

	MPU6050_Set_CLK_Source(I2Cx,MPU6050_ADDRESS,MPU6050_CLOCK_PLL_ZGYRO);
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	21d0      	movs	r1, #208	; 0xd0
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fcaf 	bl	800153e <MPU6050_Set_CLK_Source>
	MPU6050_SetIntEnabled(I2Cx,MPU6050_ADDRESS,1<<MPU6050_INTERRUPT_FIFO_OFLOW_BIT|1<<MPU6050_INTERRUPT_DMP_INT_BIT);
 8001be0:	2212      	movs	r2, #18
 8001be2:	21d0      	movs	r1, #208	; 0xd0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fce6 	bl	80015b6 <MPU6050_SetIntEnabled>

	MPU6050_SetRate(I2Cx,MPU6050_ADDRESS, 4);// if GYRO clk 1khz (depends on BW setting) 1Khz / (1+4)=200hZ  ,, else 8kHz /(39+1)=200hZ
 8001bea:	2204      	movs	r2, #4
 8001bec:	21d0      	movs	r1, #208	; 0xd0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fcfb 	bl	80015ea <MPU6050_SetRate>

	SetExternalFrameSync(I2Cx,MPU6050_ADDRESS, MPU6050_EXT_SYNC_TEMP_OUT_L);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	21d0      	movs	r1, #208	; 0xd0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fd26 	bl	800164a <SetExternalFrameSync>

	SetDLPFMode(I2Cx,MPU6050_ADDRESS, MPU6050_DLPF_BW_42);
 8001bfe:	2203      	movs	r2, #3
 8001c00:	21d0      	movs	r1, #208	; 0xd0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fd37 	bl	8001676 <SetDLPFMode>

	MPU6050_SetGyroRange(I2Cx,MPU6050_ADDRESS, MPU6050_GYRO_FS_2000); //must be full range or DMP overcompensates on fast movements !!!!
 8001c08:	2203      	movs	r2, #3
 8001c0a:	21d0      	movs	r1, #208	; 0xd0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fd06 	bl	800161e <MPU6050_SetGyroRange>

	//MPU6050_SetAccelRange(I2Cx,MPU6050_ADDRESS, MPU6050_ACCEL_FS_2);//don't change leave default seems DMP needs specific range to work properly

	//Load DMP Code in Memory Bank
	MPU6050_WriteMemoryBlock(I2Cx,MPU6050_ADDRESS,dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0,1,0);
 8001c12:	2300      	movs	r3, #0
 8001c14:	9303      	str	r3, [sp, #12]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	f240 7389 	movw	r3, #1929	; 0x789
 8001c26:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <MPU6050_DMP_Init+0x188>)
 8001c28:	21d0      	movs	r1, #208	; 0xd0
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe9b 	bl	8001966 <MPU6050_WriteMemoryBlock>

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 8001c30:	2300      	movs	r3, #0
 8001c32:	733b      	strb	r3, [r7, #12]
 8001c34:	2301      	movs	r3, #1
 8001c36:	737b      	strb	r3, [r7, #13]
	MPU6050_WriteMemoryBlock(I2Cx,MPU6050_ADDRESS,dmpUpdate, 0x02, 0x02, 0x16,1,0); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 8001c38:	f107 020c 	add.w	r2, r7, #12
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9303      	str	r3, [sp, #12]
 8001c40:	2301      	movs	r3, #1
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2316      	movs	r3, #22
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	21d0      	movs	r1, #208	; 0xd0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fe88 	bl	8001966 <MPU6050_WriteMemoryBlock>

	//write start address MSB into register
	MPU6050_DMPConfig1(I2Cx,MPU6050_ADDRESS, 0x03);
 8001c56:	2203      	movs	r2, #3
 8001c58:	21d0      	movs	r1, #208	; 0xd0
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fd21 	bl	80016a2 <MPU6050_DMPConfig1>

	//write start address LSB into register
	MPU6050_DMPConfig2(I2Cx,MPU6050_ADDRESS, 0x00);
 8001c60:	2200      	movs	r2, #0
 8001c62:	21d0      	movs	r1, #208	; 0xd0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fd36 	bl	80016d6 <MPU6050_DMPConfig2>

	MPU6050_SetOTPBankValid(I2Cx,MPU6050_ADDRESS,0);// Clear OTP flag
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	21d0      	movs	r1, #208	; 0xd0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fd4b 	bl	800170a <MPU6050_SetOTPBankValid>

	MPU6050_SetMotionDetectionThreshold(I2Cx,MPU6050_ADDRESS,2);
 8001c74:	2202      	movs	r2, #2
 8001c76:	21d0      	movs	r1, #208	; 0xd0
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fd5a 	bl	8001732 <MPU6050_SetMotionDetectionThreshold>
	MPU6050_SetZeroMotionDetectionThreshold(I2Cx,MPU6050_ADDRESS,156);
 8001c7e:	229c      	movs	r2, #156	; 0x9c
 8001c80:	21d0      	movs	r1, #208	; 0xd0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fd6f 	bl	8001766 <MPU6050_SetZeroMotionDetectionThreshold>
	MPU6050_SetMotionDetectionDuration(I2Cx,MPU6050_ADDRESS,80);
 8001c88:	2250      	movs	r2, #80	; 0x50
 8001c8a:	21d0      	movs	r1, #208	; 0xd0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fd84 	bl	800179a <MPU6050_SetMotionDetectionDuration>
	MPU6050_SetZeroMotionDetectionDuration(I2Cx,MPU6050_ADDRESS,0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	21d0      	movs	r1, #208	; 0xd0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fd99 	bl	80017ce <MPU6050_SetZeroMotionDetectionDuration>

	MPU6050_SetFIFOenabled(I2Cx,MPU6050_ADDRESS,1);//enable FIFO
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	21d0      	movs	r1, #208	; 0xd0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fdae 	bl	8001802 <MPU6050_SetFIFOenabled>

	MPU6050_DMP_Reset(I2Cx,MPU6050_ADDRESS);
 8001ca6:	21d0      	movs	r1, #208	; 0xd0
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fb6f 	bl	800138c <MPU6050_DMP_Reset>

	MPU6050_DMP_Enable(I2Cx,MPU6050_ADDRESS,0);//disable DMP
 8001cae:	2200      	movs	r2, #0
 8001cb0:	21d0      	movs	r1, #208	; 0xd0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fb56 	bl	8001364 <MPU6050_DMP_Enable>

	MPU6050_ResetFIFO(I2Cx,MPU6050_ADDRESS); //reset FIFO
 8001cb8:	21d0      	movs	r1, #208	; 0xd0
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fdb5 	bl	800182a <MPU6050_ResetFIFO>

	MPU6050_GetIntStatus(I2Cx,MPU6050_ADDRESS);
 8001cc0:	21d0      	movs	r1, #208	; 0xd0
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe08 	bl	80018d8 <MPU6050_GetIntStatus>
}
 8001cc8:	bf00      	nop
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800c468 	.word	0x0800c468

08001cd8 <CalculateQuaternions>:


void CalculateQuaternions(struct Quaternions *q, uint8_t *fifo_data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]

	int32_t q1,q2,q3,q4;

	q1=((int32_t)fifo_data[0] << 24) | ((int32_t)fifo_data[1] << 16) | ((int32_t)fifo_data[2] << 8) | fifo_data[3];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	061a      	lsls	r2, r3, #24
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	3203      	adds	r2, #3
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
	q2=((int32_t)fifo_data[4] << 24) | ((int32_t)fifo_data[5] << 16) | ((int32_t)fifo_data[6] << 8) | fifo_data[7];
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	061a      	lsls	r2, r3, #24
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3305      	adds	r3, #5
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	431a      	orrs	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3306      	adds	r3, #6
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4313      	orrs	r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	3207      	adds	r2, #7
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
	q3=((int32_t)fifo_data[8] << 24) | ((int32_t)fifo_data[9] << 16) | ((int32_t)fifo_data[10] << 8) | fifo_data[11];
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	061a      	lsls	r2, r3, #24
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3309      	adds	r3, #9
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	330a      	adds	r3, #10
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	320b      	adds	r2, #11
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
	q4=((int32_t)fifo_data[12] << 24) | ((int32_t)fifo_data[13] << 16) | ((int32_t)fifo_data[14] << 8) | fifo_data[15];
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	330c      	adds	r3, #12
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	330d      	adds	r3, #13
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	330e      	adds	r3, #14
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	320f      	adds	r2, #15
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]

	q->w=(float)(q1>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	141b      	asrs	r3, r3, #16
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ff8d 	bl	8000c9c <__aeabi_i2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f88f 	bl	8000eac <__aeabi_fdiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
	q->x=(float)(q2>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	141b      	asrs	r3, r3, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff7e 	bl	8000c9c <__aeabi_i2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f880 	bl	8000eac <__aeabi_fdiv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	605a      	str	r2, [r3, #4]
	q->y=(float)(q3>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	141b      	asrs	r3, r3, #16
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff6f 	bl	8000c9c <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f871 	bl	8000eac <__aeabi_fdiv>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
	q->z=(float)(q4>>16) / ACCELCONSTANT; //Depends on ACCEL RANGE!
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	141b      	asrs	r3, r3, #16
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ff60 	bl	8000c9c <__aeabi_i2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f862 	bl	8000eac <__aeabi_fdiv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <CalculateGravityVector>:

void CalculateGravityVector(struct Quaternions *q, struct GravityVector *v)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	v -> x = 2 * (q -> x * q -> z - q -> w * q -> y);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe ff99 	bl	8000d44 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461c      	mov	r4, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f7fe ff8f 	bl	8000d44 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fe80 	bl	8000b30 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4619      	mov	r1, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fe7d 	bl	8000b34 <__addsf3>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
	v -> y = 2 * (q -> w * q -> x + q -> y * q -> z);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7fe ff79 	bl	8000d44 <__aeabi_fmul>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461c      	mov	r4, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7fe ff6f 	bl	8000d44 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7fe fe62 	bl	8000b34 <__addsf3>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe5d 	bl	8000b34 <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]
	v -> z = q -> w * q -> w - q -> x * q -> x - q -> y * q -> y + q -> z * q -> z;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f7fe ff59 	bl	8000d44 <__aeabi_fmul>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461c      	mov	r4, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe ff4f 	bl	8000d44 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7fe fe40 	bl	8000b30 <__aeabi_fsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461c      	mov	r4, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f7fe ff40 	bl	8000d44 <__aeabi_fmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe fe31 	bl	8000b30 <__aeabi_fsub>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7fe ff31 	bl	8000d44 <__aeabi_fmul>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7fe fe24 	bl	8000b34 <__addsf3>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}

08001efc <CalculateYawPitchRoll>:

void CalculateYawPitchRoll(struct Quaternions *q, struct GravityVector *v, struct Angles *ang)
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	float zRad;
	float yRad;
	float xRad;

	//(about Z axis)
	zRad = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fe10 	bl	8000b34 <__addsf3>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7fe ff10 	bl	8000d44 <__aeabi_fmul>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461c      	mov	r4, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe00 	bl	8000b34 <__addsf3>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f7fe ff00 	bl	8000d44 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7fe fdf1 	bl	8000b30 <__aeabi_fsub>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa69 	bl	8000428 <__aeabi_f2d>
 8001f56:	4604      	mov	r4, r0
 8001f58:	460d      	mov	r5, r1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fde7 	bl	8000b34 <__addsf3>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f7fe fee7 	bl	8000d44 <__aeabi_fmul>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461e      	mov	r6, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fdd7 	bl	8000b34 <__addsf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7fe fed7 	bl	8000d44 <__aeabi_fmul>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f7fe fdca 	bl	8000b34 <__addsf3>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fdc2 	bl	8000b30 <__aeabi_fsub>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa3a 	bl	8000428 <__aeabi_f2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f009 fd40 	bl	800ba40 <atan2>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	f7fe fd5e 	bl	8000a88 <__aeabi_d2f>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]

	//(about Y axis)
	yRad = atan2(v -> x , sqrt(v -> y*v -> y + v -> z*v -> z));
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa27 	bl	8000428 <__aeabi_f2d>
 8001fda:	4604      	mov	r4, r0
 8001fdc:	460d      	mov	r5, r1
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7fe feab 	bl	8000d44 <__aeabi_fmul>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461e      	mov	r6, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7fe fea1 	bl	8000d44 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4630      	mov	r0, r6
 8002008:	f7fe fd94 	bl	8000b34 <__addsf3>
 800200c:	4603      	mov	r3, r0
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa0a 	bl	8000428 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f009 fd12 	bl	800ba44 <sqrt>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f009 fd0a 	bl	800ba40 <atan2>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	4618      	mov	r0, r3
 8002032:	4621      	mov	r1, r4
 8002034:	f7fe fd28 	bl	8000a88 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	617b      	str	r3, [r7, #20]

	//(about X axis)
	xRad = atan2(v -> y , v -> z);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe f9f1 	bl	8000428 <__aeabi_f2d>
 8002046:	4604      	mov	r4, r0
 8002048:	460d      	mov	r5, r1
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe f9ea 	bl	8000428 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f009 fcf0 	bl	800ba40 <atan2>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	4618      	mov	r0, r3
 8002066:	4621      	mov	r1, r4
 8002068:	f7fe fd0e 	bl	8000a88 <__aeabi_d2f>
 800206c:	4603      	mov	r3, r0
 800206e:	61fb      	str	r3, [r7, #28]
	if (v -> z < 0)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f801 	bl	8001080 <__aeabi_fcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <CalculateYawPitchRoll+0x1b2>
	{
		if(xRad > 0)
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	69f8      	ldr	r0, [r7, #28]
 800208a:	f7ff f817 	bl	80010bc <__aeabi_fcmpgt>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <CalculateYawPitchRoll+0x1a6>
		{
			xRad = PI - xRad;
 8002094:	69f9      	ldr	r1, [r7, #28]
 8002096:	4842      	ldr	r0, [pc, #264]	; (80021a0 <CalculateYawPitchRoll+0x2a4>)
 8002098:	f7fe fd4a 	bl	8000b30 <__aeabi_fsub>
 800209c:	4603      	mov	r3, r0
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e005      	b.n	80020ae <CalculateYawPitchRoll+0x1b2>
		}
		else
		{
			xRad = -PI - xRad;
 80020a2:	69f9      	ldr	r1, [r7, #28]
 80020a4:	483f      	ldr	r0, [pc, #252]	; (80021a4 <CalculateYawPitchRoll+0x2a8>)
 80020a6:	f7fe fd43 	bl	8000b30 <__aeabi_fsub>
 80020aa:	4603      	mov	r3, r0
 80020ac:	61fb      	str	r3, [r7, #28]
		}
	}

	//MPU6050 position on Drone--> X direction (+ drone right)-Rotation around x Pitch, Y direction (+ drone front) -Rotation around Y Roll
	ang->yaw=zRad*RADIANSTODEGREES;
 80020ae:	493e      	ldr	r1, [pc, #248]	; (80021a8 <CalculateYawPitchRoll+0x2ac>)
 80020b0:	69b8      	ldr	r0, [r7, #24]
 80020b2:	f7fe fe47 	bl	8000d44 <__aeabi_fmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
	ang->yaw+=YAWDMPOFFSET;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	493a      	ldr	r1, [pc, #232]	; (80021ac <CalculateYawPitchRoll+0x2b0>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd33 	bl	8000b30 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
	if ( ang->yaw < -180 ) ang->yaw += 360;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4936      	ldr	r1, [pc, #216]	; (80021b0 <CalculateYawPitchRoll+0x2b4>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe ffd1 	bl	8001080 <__aeabi_fcmplt>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <CalculateYawPitchRoll+0x1fc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4932      	ldr	r1, [pc, #200]	; (80021b4 <CalculateYawPitchRoll+0x2b8>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fd22 	bl	8000b34 <__addsf3>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	601a      	str	r2, [r3, #0]

	ang->pitch=xRad*RADIANSTODEGREES;
 80020f8:	492b      	ldr	r1, [pc, #172]	; (80021a8 <CalculateYawPitchRoll+0x2ac>)
 80020fa:	69f8      	ldr	r0, [r7, #28]
 80020fc:	f7fe fe22 	bl	8000d44 <__aeabi_fmul>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
	ang->pitch+=PITCHDMPOFFSET; //Add manual offset
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	492a      	ldr	r1, [pc, #168]	; (80021b8 <CalculateYawPitchRoll+0x2bc>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fd0e 	bl	8000b30 <__aeabi_fsub>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	605a      	str	r2, [r3, #4]
	if ( ang->pitch < -180 ) ang->pitch += 360;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4923      	ldr	r1, [pc, #140]	; (80021b0 <CalculateYawPitchRoll+0x2b4>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe ffac 	bl	8001080 <__aeabi_fcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <CalculateYawPitchRoll+0x246>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4920      	ldr	r1, [pc, #128]	; (80021b4 <CalculateYawPitchRoll+0x2b8>)
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fcfd 	bl	8000b34 <__addsf3>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]

	ang->roll=yRad*RADIANSTODEGREES;
 8002142:	4919      	ldr	r1, [pc, #100]	; (80021a8 <CalculateYawPitchRoll+0x2ac>)
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7fe fdfd 	bl	8000d44 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
	ang->roll+=ROLLDMPOFFSET; //Add manual offset
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4919      	ldr	r1, [pc, #100]	; (80021bc <CalculateYawPitchRoll+0x2c0>)
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fce9 	bl	8000b30 <__aeabi_fsub>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]
	if ( ang->roll < -180 ) ang->roll += 360;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4911      	ldr	r1, [pc, #68]	; (80021b0 <CalculateYawPitchRoll+0x2b4>)
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ff87 	bl	8001080 <__aeabi_fcmplt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <CalculateYawPitchRoll+0x290>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	490d      	ldr	r1, [pc, #52]	; (80021b4 <CalculateYawPitchRoll+0x2b8>)
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fcd8 	bl	8000b34 <__addsf3>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
	ang->roll=-ang->roll; //positive angle drone tilt to right
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]


}
 8002198:	bf00      	nop
 800219a:	3724      	adds	r7, #36	; 0x24
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a0:	40490fdb 	.word	0x40490fdb
 80021a4:	c0490fdb 	.word	0xc0490fdb
 80021a8:	42652ee1 	.word	0x42652ee1
 80021ac:	42353333 	.word	0x42353333
 80021b0:	c3340000 	.word	0xc3340000
 80021b4:	43b40000 	.word	0x43b40000
 80021b8:	3dcccccd 	.word	0x3dcccccd
 80021bc:	4039999a 	.word	0x4039999a

080021c0 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	b29b      	uxth	r3, r3
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
	...

08002228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b087      	sub	sp, #28
 800222e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <main+0xf8>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <main+0xf8>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <main+0xfc>)
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <main+0xfc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a37      	ldr	r2, [pc, #220]	; (8002324 <main+0xfc>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f003 fc53 	bl	8005af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 fd55 	bl	8002d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002256:	f000 ff8d 	bl	8003174 <MX_GPIO_Init>
  MX_ADC1_Init();
 800225a:	f000 fdad 	bl	8002db8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800225e:	f000 fde9 	bl	8002e34 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002262:	f000 fe15 	bl	8002e90 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002266:	f000 fe49 	bl	8002efc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800226a:	f000 ff59 	bl	8003120 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800226e:	f000 ff0b 	bl	8003088 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8002272:	482d      	ldr	r0, [pc, #180]	; (8002328 <main+0x100>)
 8002274:	f004 f8d4 	bl	8006420 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8002278:	482b      	ldr	r0, [pc, #172]	; (8002328 <main+0x100>)
 800227a:	f003 fd99 	bl	8005db0 <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <main+0x104>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=5.0;
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <main+0x104>)
 8002286:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <main+0x108>)
 8002288:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.001;
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <main+0x104>)
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <main+0x10c>)
 800228e:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=500.0;
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <main+0x104>)
 8002292:	4a29      	ldr	r2, [pc, #164]	; (8002338 <main+0x110>)
 8002294:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=5.0;
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <main+0x104>)
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <main+0x108>)
 800229a:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.001;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <main+0x104>)
 800229e:	4a25      	ldr	r2, [pc, #148]	; (8002334 <main+0x10c>)
 80022a0:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=500.0;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <main+0x104>)
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <main+0x110>)
 80022a6:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=5;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <main+0x104>)
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <main+0x108>)
 80022ac:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0.001;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <main+0x104>)
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <main+0x10c>)
 80022b2:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=500.0;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <main+0x104>)
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <main+0x110>)
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <main+0x104>)
 80022bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <main+0x104>)
 80022c4:	2264      	movs	r2, #100	; 0x64
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <main+0x104>)
 80022ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <main+0x104>)
 80022d2:	2264      	movs	r2, #100	; 0x64
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 400;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <main+0x104>)
 80022d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 100;
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <main+0x104>)
 80022e0:	2264      	movs	r2, #100	; 0x64
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
  FlashDataDefault.maxpitchdegree=20; //degrees
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <main+0x104>)
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <main+0x114>)
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
  FlashDataDefault.maxrolldegree=20;  //degrees
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <main+0x104>)
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <main+0x114>)
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
  FlashDataDefault.maxyawdegree=30;  //degrees per second rotation
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <main+0x104>)
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <main+0x118>)
 80022f4:	649a      	str	r2, [r3, #72]	; 0x48
  FlashDataDefault.minthrottle=80;    //80counts of 1000 to spin rotors
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <main+0x104>)
 80022f8:	4a12      	ldr	r2, [pc, #72]	; (8002344 <main+0x11c>)
 80022fa:	64da      	str	r2, [r3, #76]	; 0x4c
  FlashDataDefault.maxthrottle=800;   //800counts of 1000 (80%)
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <main+0x104>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <main+0x120>)
 8002300:	651a      	str	r2, [r3, #80]	; 0x50


  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 8002302:	4812      	ldr	r0, [pc, #72]	; (800234c <main+0x124>)
 8002304:	f001 f988 	bl	8003618 <CheckFlashData>
 8002308:	4603      	mov	r3, r0
 800230a:	2b07      	cmp	r3, #7
 800230c:	d124      	bne.n	8002358 <main+0x130>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 800230e:	4910      	ldr	r1, [pc, #64]	; (8002350 <main+0x128>)
 8002310:	480e      	ldr	r0, [pc, #56]	; (800234c <main+0x124>)
 8002312:	f001 f98d 	bl	8003630 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 8002316:	490f      	ldr	r1, [pc, #60]	; (8002354 <main+0x12c>)
 8002318:	480c      	ldr	r0, [pc, #48]	; (800234c <main+0x124>)
 800231a:	f001 f989 	bl	8003630 <ReadFlashData>
 800231e:	e027      	b.n	8002370 <main+0x148>
 8002320:	e000edf0 	.word	0xe000edf0
 8002324:	e0001000 	.word	0xe0001000
 8002328:	20000488 	.word	0x20000488
 800232c:	20000390 	.word	0x20000390
 8002330:	40a00000 	.word	0x40a00000
 8002334:	3a83126f 	.word	0x3a83126f
 8002338:	43fa0000 	.word	0x43fa0000
 800233c:	41a00000 	.word	0x41a00000
 8002340:	41f00000 	.word	0x41f00000
 8002344:	42a00000 	.word	0x42a00000
 8002348:	44480000 	.word	0x44480000
 800234c:	0800fc00 	.word	0x0800fc00
 8002350:	20000570 	.word	0x20000570
 8002354:	20000618 	.word	0x20000618

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR, &FlashDataDefault);
 8002358:	49bf      	ldr	r1, [pc, #764]	; (8002658 <main+0x430>)
 800235a:	48c0      	ldr	r0, [pc, #768]	; (800265c <main+0x434>)
 800235c:	f000 ffb8 	bl	80032d0 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8002360:	49bf      	ldr	r1, [pc, #764]	; (8002660 <main+0x438>)
 8002362:	48be      	ldr	r0, [pc, #760]	; (800265c <main+0x434>)
 8002364:	f001 f964 	bl	8003630 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 8002368:	49be      	ldr	r1, [pc, #760]	; (8002664 <main+0x43c>)
 800236a:	48bc      	ldr	r0, [pc, #752]	; (800265c <main+0x434>)
 800236c:	f001 f960 	bl	8003630 <ReadFlashData>
  }//------------------------------------------------------------------------------------------------------


  HAL_Delay(400);//wait for stable power
 8002370:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002374:	f003 fc22 	bl	8005bbc <HAL_Delay>

  //MPU6050 Init
  MPU6050rezulatat=MPU6050_check(&hi2c2);
 8002378:	48bb      	ldr	r0, [pc, #748]	; (8002668 <main+0x440>)
 800237a:	f7fe ffa5 	bl	80012c8 <MPU6050_check>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4bba      	ldr	r3, [pc, #744]	; (800266c <main+0x444>)
 8002384:	701a      	strb	r2, [r3, #0]
  MPU6050_DMP_Init(&hi2c2);
 8002386:	48b8      	ldr	r0, [pc, #736]	; (8002668 <main+0x440>)
 8002388:	f7ff fbe0 	bl	8001b4c <MPU6050_DMP_Init>

  //NRF24 INIT
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800238c:	4bb8      	ldr	r3, [pc, #736]	; (8002670 <main+0x448>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4ab7      	ldr	r2, [pc, #732]	; (8002670 <main+0x448>)
 8002392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002396:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239e:	48b5      	ldr	r0, [pc, #724]	; (8002674 <main+0x44c>)
 80023a0:	f004 fd42 	bl	8006e28 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 80023a4:	f001 fbec 	bl	8003b80 <nRF24_Check>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4bb2      	ldr	r3, [pc, #712]	; (8002678 <main+0x450>)
 80023ae:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80023b0:	f001 fb94 	bl	8003adc <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80023b4:	20ff      	movs	r0, #255	; 0xff
 80023b6:	f001 fd75 	bl	8003ea4 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80023ba:	200f      	movs	r0, #15
 80023bc:	f001 fc6f 	bl	8003c9e <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80023c0:	2020      	movs	r0, #32
 80023c2:	f001 fd00 	bl	8003dc6 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80023c6:	2008      	movs	r0, #8
 80023c8:	f001 fc48 	bl	8003c5c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f001 fc74 	bl	8003cba <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80023d2:	49aa      	ldr	r1, [pc, #680]	; (800267c <main+0x454>)
 80023d4:	2001      	movs	r0, #1
 80023d6:	f001 fc81 	bl	8003cdc <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 80023da:	2208      	movs	r2, #8
 80023dc:	2100      	movs	r1, #0
 80023de:	2001      	movs	r0, #1
 80023e0:	f001 fd0c 	bl	8003dfc <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80023e4:	49a5      	ldr	r1, [pc, #660]	; (800267c <main+0x454>)
 80023e6:	2006      	movs	r0, #6
 80023e8:	f001 fc78 	bl	8003cdc <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f001 fccf 	bl	8003d90 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f001 fc11 	bl	8003c1a <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80023f8:	f001 fd9e 	bl	8003f38 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80023fc:	2002      	movs	r0, #2
 80023fe:	f001 fbed 	bl	8003bdc <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002408:	489a      	ldr	r0, [pc, #616]	; (8002674 <main+0x44c>)
 800240a:	f004 fd0d 	bl	8006e28 <HAL_GPIO_WritePin>

  HAL_Delay(2000);//wait to connect battery
 800240e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002412:	f003 fbd3 	bl	8005bbc <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002416:	2100      	movs	r1, #0
 8002418:	4899      	ldr	r0, [pc, #612]	; (8002680 <main+0x458>)
 800241a:	f006 fb35 	bl	8008a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800241e:	2104      	movs	r1, #4
 8002420:	4897      	ldr	r0, [pc, #604]	; (8002680 <main+0x458>)
 8002422:	f006 fb31 	bl	8008a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002426:	2108      	movs	r1, #8
 8002428:	4895      	ldr	r0, [pc, #596]	; (8002680 <main+0x458>)
 800242a:	f006 fb2d 	bl	8008a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800242e:	210c      	movs	r1, #12
 8002430:	4893      	ldr	r0, [pc, #588]	; (8002680 <main+0x458>)
 8002432:	f006 fb29 	bl	8008a88 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8002436:	4b93      	ldr	r3, [pc, #588]	; (8002684 <main+0x45c>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  MPU6050_DMP_Enable(&hi2c2,MPU6050_ADDRESS,1);//enable DMP (writing to FIFO)
 800243c:	2201      	movs	r2, #1
 800243e:	21d0      	movs	r1, #208	; 0xd0
 8002440:	4889      	ldr	r0, [pc, #548]	; (8002668 <main+0x440>)
 8002442:	f7fe ff8f 	bl	8001364 <MPU6050_DMP_Enable>

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8002446:	4890      	ldr	r0, [pc, #576]	; (8002688 <main+0x460>)
 8002448:	f006 fac6 	bl	80089d8 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	f003 fbb5 	bl	8005bbc <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 8002452:	4b8e      	ldr	r3, [pc, #568]	; (800268c <main+0x464>)
 8002454:	4a8e      	ldr	r2, [pc, #568]	; (8002690 <main+0x468>)
 8002456:	6810      	ldr	r0, [r2, #0]
 8002458:	6018      	str	r0, [r3, #0]
 800245a:	8891      	ldrh	r1, [r2, #4]
 800245c:	7992      	ldrb	r2, [r2, #6]
 800245e:	8099      	strh	r1, [r3, #4]
 8002460:	719a      	strb	r2, [r3, #6]
	  WriteString(UartTXbuff0);
 8002462:	488a      	ldr	r0, [pc, #552]	; (800268c <main+0x464>)
 8002464:	f001 f9cc 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 8002468:	2301      	movs	r3, #1
 800246a:	2201      	movs	r2, #1
 800246c:	4989      	ldr	r1, [pc, #548]	; (8002694 <main+0x46c>)
 800246e:	4887      	ldr	r0, [pc, #540]	; (800268c <main+0x464>)
 8002470:	f007 ffc2 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002474:	4885      	ldr	r0, [pc, #532]	; (800268c <main+0x464>)
 8002476:	f001 f9c3 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 800247a:	4b84      	ldr	r3, [pc, #528]	; (800268c <main+0x464>)
 800247c:	4a86      	ldr	r2, [pc, #536]	; (8002698 <main+0x470>)
 800247e:	6810      	ldr	r0, [r2, #0]
 8002480:	6018      	str	r0, [r3, #0]
 8002482:	7912      	ldrb	r2, [r2, #4]
 8002484:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 8002486:	4881      	ldr	r0, [pc, #516]	; (800268c <main+0x464>)
 8002488:	f001 f9ba 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u MPU=%u \n\r",MotorStatus,MPU6050rezulatat);
 800248c:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <main+0x45c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b76      	ldr	r3, [pc, #472]	; (800266c <main+0x444>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4981      	ldr	r1, [pc, #516]	; (800269c <main+0x474>)
 8002496:	487d      	ldr	r0, [pc, #500]	; (800268c <main+0x464>)
 8002498:	f007 ffae 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800249c:	487b      	ldr	r0, [pc, #492]	; (800268c <main+0x464>)
 800249e:	f001 f9af 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <main+0x478>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ffbe 	bl	8000428 <__aeabi_f2d>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	461a      	mov	r2, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	497b      	ldr	r1, [pc, #492]	; (80026a4 <main+0x47c>)
 80024b6:	4875      	ldr	r0, [pc, #468]	; (800268c <main+0x464>)
 80024b8:	f007 ff9e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80024bc:	4873      	ldr	r0, [pc, #460]	; (800268c <main+0x464>)
 80024be:	f001 f99f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 80024c2:	4b79      	ldr	r3, [pc, #484]	; (80026a8 <main+0x480>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ffae 	bl	8000428 <__aeabi_f2d>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	4975      	ldr	r1, [pc, #468]	; (80026ac <main+0x484>)
 80024d6:	486d      	ldr	r0, [pc, #436]	; (800268c <main+0x464>)
 80024d8:	f007 ff8e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80024dc:	486b      	ldr	r0, [pc, #428]	; (800268c <main+0x464>)
 80024de:	f001 f98f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <main+0x488>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd ff9e 	bl	8000428 <__aeabi_f2d>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	461a      	mov	r2, r3
 80024f2:	4623      	mov	r3, r4
 80024f4:	496f      	ldr	r1, [pc, #444]	; (80026b4 <main+0x48c>)
 80024f6:	4865      	ldr	r0, [pc, #404]	; (800268c <main+0x464>)
 80024f8:	f007 ff7e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80024fc:	4863      	ldr	r0, [pc, #396]	; (800268c <main+0x464>)
 80024fe:	f001 f97f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <main+0x490>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff8e 	bl	8000428 <__aeabi_f2d>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	4969      	ldr	r1, [pc, #420]	; (80026bc <main+0x494>)
 8002516:	485d      	ldr	r0, [pc, #372]	; (800268c <main+0x464>)
 8002518:	f007 ff6e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800251c:	485b      	ldr	r0, [pc, #364]	; (800268c <main+0x464>)
 800251e:	f001 f96f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002522:	4b5a      	ldr	r3, [pc, #360]	; (800268c <main+0x464>)
 8002524:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <main+0x498>)
 8002526:	8811      	ldrh	r1, [r2, #0]
 8002528:	7892      	ldrb	r2, [r2, #2]
 800252a:	8019      	strh	r1, [r3, #0]
 800252c:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 800252e:	4857      	ldr	r0, [pc, #348]	; (800268c <main+0x464>)
 8002530:	f001 f966 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg\n\r",AnglePitch);
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <main+0x49c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd ff75 	bl	8000428 <__aeabi_f2d>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	461a      	mov	r2, r3
 8002544:	4623      	mov	r3, r4
 8002546:	4960      	ldr	r1, [pc, #384]	; (80026c8 <main+0x4a0>)
 8002548:	4850      	ldr	r0, [pc, #320]	; (800268c <main+0x464>)
 800254a:	f007 ff55 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800254e:	484f      	ldr	r0, [pc, #316]	; (800268c <main+0x464>)
 8002550:	f001 f956 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg\n\r",AngleRoll);
 8002554:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <main+0x4a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ff65 	bl	8000428 <__aeabi_f2d>
 800255e:	4603      	mov	r3, r0
 8002560:	460c      	mov	r4, r1
 8002562:	461a      	mov	r2, r3
 8002564:	4623      	mov	r3, r4
 8002566:	495a      	ldr	r1, [pc, #360]	; (80026d0 <main+0x4a8>)
 8002568:	4848      	ldr	r0, [pc, #288]	; (800268c <main+0x464>)
 800256a:	f007 ff45 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800256e:	4847      	ldr	r0, [pc, #284]	; (800268c <main+0x464>)
 8002570:	f001 f946 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw=%.2f deg/s\n\r",SpeedAngleYaw);
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <main+0x4ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff55 	bl	8000428 <__aeabi_f2d>
 800257e:	4603      	mov	r3, r0
 8002580:	460c      	mov	r4, r1
 8002582:	461a      	mov	r2, r3
 8002584:	4623      	mov	r3, r4
 8002586:	4954      	ldr	r1, [pc, #336]	; (80026d8 <main+0x4b0>)
 8002588:	4840      	ldr	r0, [pc, #256]	; (800268c <main+0x464>)
 800258a:	f007 ff35 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800258e:	483f      	ldr	r0, [pc, #252]	; (800268c <main+0x464>)
 8002590:	f001 f936 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "PID inputs\n\r",SpeedAngleRoll);
 8002594:	4b51      	ldr	r3, [pc, #324]	; (80026dc <main+0x4b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ff45 	bl	8000428 <__aeabi_f2d>
 800259e:	4603      	mov	r3, r0
 80025a0:	460c      	mov	r4, r1
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	494e      	ldr	r1, [pc, #312]	; (80026e0 <main+0x4b8>)
 80025a8:	4838      	ldr	r0, [pc, #224]	; (800268c <main+0x464>)
 80025aa:	f007 ff25 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80025ae:	4837      	ldr	r0, [pc, #220]	; (800268c <main+0x464>)
 80025b0:	f001 f926 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg\n\r",PitchPIDin);
 80025b4:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <main+0x4bc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff35 	bl	8000428 <__aeabi_f2d>
 80025be:	4603      	mov	r3, r0
 80025c0:	460c      	mov	r4, r1
 80025c2:	461a      	mov	r2, r3
 80025c4:	4623      	mov	r3, r4
 80025c6:	4940      	ldr	r1, [pc, #256]	; (80026c8 <main+0x4a0>)
 80025c8:	4830      	ldr	r0, [pc, #192]	; (800268c <main+0x464>)
 80025ca:	f007 ff15 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80025ce:	482f      	ldr	r0, [pc, #188]	; (800268c <main+0x464>)
 80025d0:	f001 f916 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg\n\r",RollPIDin);
 80025d4:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <main+0x4c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ff25 	bl	8000428 <__aeabi_f2d>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	461a      	mov	r2, r3
 80025e4:	4623      	mov	r3, r4
 80025e6:	493a      	ldr	r1, [pc, #232]	; (80026d0 <main+0x4a8>)
 80025e8:	4828      	ldr	r0, [pc, #160]	; (800268c <main+0x464>)
 80025ea:	f007 ff05 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80025ee:	4827      	ldr	r0, [pc, #156]	; (800268c <main+0x464>)
 80025f0:	f001 f906 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw=%.2f deg/s\n\r",YawPIDin);
 80025f4:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <main+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff15 	bl	8000428 <__aeabi_f2d>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	4934      	ldr	r1, [pc, #208]	; (80026d8 <main+0x4b0>)
 8002608:	4820      	ldr	r0, [pc, #128]	; (800268c <main+0x464>)
 800260a:	f007 fef5 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800260e:	481f      	ldr	r0, [pc, #124]	; (800268c <main+0x464>)
 8002610:	f001 f8f6 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <main+0x464>)
 8002616:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <main+0x498>)
 8002618:	8811      	ldrh	r1, [r2, #0]
 800261a:	7892      	ldrb	r2, [r2, #2]
 800261c:	8019      	strh	r1, [r3, #0]
 800261e:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002620:	481a      	ldr	r0, [pc, #104]	; (800268c <main+0x464>)
 8002622:	f001 f8ed 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg/s\n\r",SpeedAnglePitch);
 8002626:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <main+0x4c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fefc 	bl	8000428 <__aeabi_f2d>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	492e      	ldr	r1, [pc, #184]	; (80026f4 <main+0x4cc>)
 800263a:	4814      	ldr	r0, [pc, #80]	; (800268c <main+0x464>)
 800263c:	f007 fedc 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002640:	4812      	ldr	r0, [pc, #72]	; (800268c <main+0x464>)
 8002642:	f001 f8dd 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg/s\n\r",SpeedAngleRoll);
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <main+0x4b4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd feec 	bl	8000428 <__aeabi_f2d>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	e050      	b.n	80026f8 <main+0x4d0>
 8002656:	bf00      	nop
 8002658:	20000390 	.word	0x20000390
 800265c:	0800fc00 	.word	0x0800fc00
 8002660:	20000570 	.word	0x20000570
 8002664:	20000618 	.word	0x20000618
 8002668:	200002c4 	.word	0x200002c4
 800266c:	20000508 	.word	0x20000508
 8002670:	40003800 	.word	0x40003800
 8002674:	40010c00 	.word	0x40010c00
 8002678:	200003ec 	.word	0x200003ec
 800267c:	0800cbf4 	.word	0x0800cbf4
 8002680:	20000518 	.word	0x20000518
 8002684:	2000020c 	.word	0x2000020c
 8002688:	200005cc 	.word	0x200005cc
 800268c:	200003f8 	.word	0x200003f8
 8002690:	0800c140 	.word	0x0800c140
 8002694:	0800c148 	.word	0x0800c148
 8002698:	0800c154 	.word	0x0800c154
 800269c:	0800c15c 	.word	0x0800c15c
 80026a0:	20000690 	.word	0x20000690
 80026a4:	0800c178 	.word	0x0800c178
 80026a8:	2000087c 	.word	0x2000087c
 80026ac:	0800c18c 	.word	0x0800c18c
 80026b0:	20000878 	.word	0x20000878
 80026b4:	0800c19c 	.word	0x0800c19c
 80026b8:	200006a8 	.word	0x200006a8
 80026bc:	0800c1ac 	.word	0x0800c1ac
 80026c0:	0800c1bc 	.word	0x0800c1bc
 80026c4:	20000854 	.word	0x20000854
 80026c8:	0800c1c0 	.word	0x0800c1c0
 80026cc:	20000910 	.word	0x20000910
 80026d0:	0800c1d4 	.word	0x0800c1d4
 80026d4:	2000077c 	.word	0x2000077c
 80026d8:	0800c1e4 	.word	0x0800c1e4
 80026dc:	20000788 	.word	0x20000788
 80026e0:	0800c1f8 	.word	0x0800c1f8
 80026e4:	200008ec 	.word	0x200008ec
 80026e8:	20000868 	.word	0x20000868
 80026ec:	20000860 	.word	0x20000860
 80026f0:	20000920 	.word	0x20000920
 80026f4:	0800c208 	.word	0x0800c208
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	49a9      	ldr	r1, [pc, #676]	; (80029a4 <main+0x77c>)
 80026fe:	48aa      	ldr	r0, [pc, #680]	; (80029a8 <main+0x780>)
 8002700:	f007 fe7a 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002704:	48a8      	ldr	r0, [pc, #672]	; (80029a8 <main+0x780>)
 8002706:	f001 f87b 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "GYRO RAW x=%d y=%d z=%d \n\r",mpu6050DataStr.Gyroscope_X,mpu6050DataStr.Gyroscope_Y,mpu6050DataStr.Gyroscope_Z);
 800270a:	4ba8      	ldr	r3, [pc, #672]	; (80029ac <main+0x784>)
 800270c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002710:	461a      	mov	r2, r3
 8002712:	4ba6      	ldr	r3, [pc, #664]	; (80029ac <main+0x784>)
 8002714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002718:	4619      	mov	r1, r3
 800271a:	4ba4      	ldr	r3, [pc, #656]	; (80029ac <main+0x784>)
 800271c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	460b      	mov	r3, r1
 8002724:	49a2      	ldr	r1, [pc, #648]	; (80029b0 <main+0x788>)
 8002726:	48a0      	ldr	r0, [pc, #640]	; (80029a8 <main+0x780>)
 8002728:	f007 fe66 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800272c:	489e      	ldr	r0, [pc, #632]	; (80029a8 <main+0x780>)
 800272e:	f001 f867 	bl	8003800 <WriteString>


	  sprintf(UartTXbuff0, "\n\r" );
 8002732:	4b9d      	ldr	r3, [pc, #628]	; (80029a8 <main+0x780>)
 8002734:	4a9f      	ldr	r2, [pc, #636]	; (80029b4 <main+0x78c>)
 8002736:	8811      	ldrh	r1, [r2, #0]
 8002738:	7892      	ldrb	r2, [r2, #2]
 800273a:	8019      	strh	r1, [r3, #0]
 800273c:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 800273e:	489a      	ldr	r0, [pc, #616]	; (80029a8 <main+0x780>)
 8002740:	f001 f85e 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "PWM 1:%u  2:%u  3:%u  4:%u   \n\r",PWM_Mot1,PWM_Mot2,PWM_Mot3,PWM_Mot4);
 8002744:	4b9c      	ldr	r3, [pc, #624]	; (80029b8 <main+0x790>)
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	4b9c      	ldr	r3, [pc, #624]	; (80029bc <main+0x794>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	4b9c      	ldr	r3, [pc, #624]	; (80029c0 <main+0x798>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a9c      	ldr	r2, [pc, #624]	; (80029c4 <main+0x79c>)
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	9201      	str	r2, [sp, #4]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4603      	mov	r3, r0
 800275a:	460a      	mov	r2, r1
 800275c:	499a      	ldr	r1, [pc, #616]	; (80029c8 <main+0x7a0>)
 800275e:	4892      	ldr	r0, [pc, #584]	; (80029a8 <main+0x780>)
 8002760:	f007 fe4a 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002764:	4890      	ldr	r0, [pc, #576]	; (80029a8 <main+0x780>)
 8002766:	f001 f84b 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d  ",togg1,togg2,togg3,togg4,togg5,togg6);
 800276a:	4b98      	ldr	r3, [pc, #608]	; (80029cc <main+0x7a4>)
 800276c:	681c      	ldr	r4, [r3, #0]
 800276e:	4b98      	ldr	r3, [pc, #608]	; (80029d0 <main+0x7a8>)
 8002770:	681d      	ldr	r5, [r3, #0]
 8002772:	4b98      	ldr	r3, [pc, #608]	; (80029d4 <main+0x7ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a98      	ldr	r2, [pc, #608]	; (80029d8 <main+0x7b0>)
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4998      	ldr	r1, [pc, #608]	; (80029dc <main+0x7b4>)
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	4898      	ldr	r0, [pc, #608]	; (80029e0 <main+0x7b8>)
 8002780:	6800      	ldr	r0, [r0, #0]
 8002782:	9003      	str	r0, [sp, #12]
 8002784:	9102      	str	r1, [sp, #8]
 8002786:	9201      	str	r2, [sp, #4]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	462b      	mov	r3, r5
 800278c:	4622      	mov	r2, r4
 800278e:	4995      	ldr	r1, [pc, #596]	; (80029e4 <main+0x7bc>)
 8002790:	4885      	ldr	r0, [pc, #532]	; (80029a8 <main+0x780>)
 8002792:	f007 fe31 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002796:	4884      	ldr	r0, [pc, #528]	; (80029a8 <main+0x780>)
 8002798:	f001 f832 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d  ",potenc1,potenc2);
 800279c:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <main+0x7c0>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b92      	ldr	r3, [pc, #584]	; (80029ec <main+0x7c4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4992      	ldr	r1, [pc, #584]	; (80029f0 <main+0x7c8>)
 80027a6:	4880      	ldr	r0, [pc, #512]	; (80029a8 <main+0x780>)
 80027a8:	f007 fe26 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80027ac:	487e      	ldr	r0, [pc, #504]	; (80029a8 <main+0x780>)
 80027ae:	f001 f827 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 80027b2:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <main+0x7cc>)
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	4b90      	ldr	r3, [pc, #576]	; (80029f8 <main+0x7d0>)
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	4b90      	ldr	r3, [pc, #576]	; (80029fc <main+0x7d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a90      	ldr	r2, [pc, #576]	; (8002a00 <main+0x7d8>)
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	9201      	str	r2, [sp, #4]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	498e      	ldr	r1, [pc, #568]	; (8002a04 <main+0x7dc>)
 80027cc:	4876      	ldr	r0, [pc, #472]	; (80029a8 <main+0x780>)
 80027ce:	f007 fe13 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80027d2:	4875      	ldr	r0, [pc, #468]	; (80029a8 <main+0x780>)
 80027d4:	f001 f814 	bl	8003800 <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 80027d8:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <main+0x780>)
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <main+0x7e0>)
 80027dc:	4615      	mov	r5, r2
 80027de:	461c      	mov	r4, r3
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	6028      	str	r0, [r5, #0]
 80027e4:	6069      	str	r1, [r5, #4]
 80027e6:	60aa      	str	r2, [r5, #8]
 80027e8:	60eb      	str	r3, [r5, #12]
 80027ea:	cc03      	ldmia	r4!, {r0, r1}
 80027ec:	6128      	str	r0, [r5, #16]
 80027ee:	6169      	str	r1, [r5, #20]
 80027f0:	8823      	ldrh	r3, [r4, #0]
 80027f2:	78a2      	ldrb	r2, [r4, #2]
 80027f4:	832b      	strh	r3, [r5, #24]
 80027f6:	4613      	mov	r3, r2
 80027f8:	76ab      	strb	r3, [r5, #26]
	  WriteString(UartTXbuff0);
 80027fa:	486b      	ldr	r0, [pc, #428]	; (80029a8 <main+0x780>)
 80027fc:	f001 f800 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 8002800:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <main+0x7e4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fe0f 	bl	8000428 <__aeabi_f2d>
 800280a:	4680      	mov	r8, r0
 800280c:	4689      	mov	r9, r1
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <main+0x7e4>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe08 	bl	8000428 <__aeabi_f2d>
 8002818:	4604      	mov	r4, r0
 800281a:	460d      	mov	r5, r1
 800281c:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <main+0x7e4>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe01 	bl	8000428 <__aeabi_f2d>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800282e:	e9cd 4500 	strd	r4, r5, [sp]
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	4976      	ldr	r1, [pc, #472]	; (8002a10 <main+0x7e8>)
 8002838:	485b      	ldr	r0, [pc, #364]	; (80029a8 <main+0x780>)
 800283a:	f007 fddd 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800283e:	485a      	ldr	r0, [pc, #360]	; (80029a8 <main+0x780>)
 8002840:	f000 ffde 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 8002844:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <main+0x7e4>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fded 	bl	8000428 <__aeabi_f2d>
 800284e:	4680      	mov	r8, r0
 8002850:	4689      	mov	r9, r1
 8002852:	4b6e      	ldr	r3, [pc, #440]	; (8002a0c <main+0x7e4>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fde6 	bl	8000428 <__aeabi_f2d>
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <main+0x7e4>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fddf 	bl	8000428 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002872:	e9cd 4500 	strd	r4, r5, [sp]
 8002876:	4642      	mov	r2, r8
 8002878:	464b      	mov	r3, r9
 800287a:	4966      	ldr	r1, [pc, #408]	; (8002a14 <main+0x7ec>)
 800287c:	484a      	ldr	r0, [pc, #296]	; (80029a8 <main+0x780>)
 800287e:	f007 fdbb 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002882:	4849      	ldr	r0, [pc, #292]	; (80029a8 <main+0x780>)
 8002884:	f000 ffbc 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 8002888:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <main+0x7e4>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fdcb 	bl	8000428 <__aeabi_f2d>
 8002892:	4680      	mov	r8, r0
 8002894:	4689      	mov	r9, r1
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <main+0x7e4>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fdc4 	bl	8000428 <__aeabi_f2d>
 80028a0:	4604      	mov	r4, r0
 80028a2:	460d      	mov	r5, r1
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <main+0x7e4>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fdbd 	bl	8000428 <__aeabi_f2d>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028b6:	e9cd 4500 	strd	r4, r5, [sp]
 80028ba:	4642      	mov	r2, r8
 80028bc:	464b      	mov	r3, r9
 80028be:	4956      	ldr	r1, [pc, #344]	; (8002a18 <main+0x7f0>)
 80028c0:	4839      	ldr	r0, [pc, #228]	; (80029a8 <main+0x780>)
 80028c2:	f007 fd99 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80028c6:	4838      	ldr	r0, [pc, #224]	; (80029a8 <main+0x780>)
 80028c8:	f000 ff9a 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <main+0x7e4>)
 80028ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d0:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <main+0x7e4>)
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	4951      	ldr	r1, [pc, #324]	; (8002a1c <main+0x7f4>)
 80028d6:	4834      	ldr	r0, [pc, #208]	; (80029a8 <main+0x780>)
 80028d8:	f007 fd8e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80028dc:	4832      	ldr	r0, [pc, #200]	; (80029a8 <main+0x780>)
 80028de:	f000 ff8f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <main+0x7e4>)
 80028e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <main+0x7e4>)
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	494d      	ldr	r1, [pc, #308]	; (8002a20 <main+0x7f8>)
 80028ec:	482e      	ldr	r0, [pc, #184]	; (80029a8 <main+0x780>)
 80028ee:	f007 fd83 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 80028f2:	482d      	ldr	r0, [pc, #180]	; (80029a8 <main+0x780>)
 80028f4:	f000 ff84 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <main+0x7e4>)
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <main+0x7e4>)
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	4948      	ldr	r1, [pc, #288]	; (8002a24 <main+0x7fc>)
 8002902:	4829      	ldr	r0, [pc, #164]	; (80029a8 <main+0x780>)
 8002904:	f007 fd78 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <main+0x780>)
 800290a:	f000 ff79 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataActive.maxpitchdegree);
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <main+0x7e4>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fd88 	bl	8000428 <__aeabi_f2d>
 8002918:	4603      	mov	r3, r0
 800291a:	460c      	mov	r4, r1
 800291c:	461a      	mov	r2, r3
 800291e:	4623      	mov	r3, r4
 8002920:	4941      	ldr	r1, [pc, #260]	; (8002a28 <main+0x800>)
 8002922:	4821      	ldr	r0, [pc, #132]	; (80029a8 <main+0x780>)
 8002924:	f007 fd68 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <main+0x780>)
 800292a:	f000 ff69 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataActive.maxrolldegree);
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <main+0x7e4>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fd78 	bl	8000428 <__aeabi_f2d>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	461a      	mov	r2, r3
 800293e:	4623      	mov	r3, r4
 8002940:	493a      	ldr	r1, [pc, #232]	; (8002a2c <main+0x804>)
 8002942:	4819      	ldr	r0, [pc, #100]	; (80029a8 <main+0x780>)
 8002944:	f007 fd58 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002948:	4817      	ldr	r0, [pc, #92]	; (80029a8 <main+0x780>)
 800294a:	f000 ff59 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataActive.maxyawdegree);
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <main+0x7e4>)
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fd68 	bl	8000428 <__aeabi_f2d>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	461a      	mov	r2, r3
 800295e:	4623      	mov	r3, r4
 8002960:	4933      	ldr	r1, [pc, #204]	; (8002a30 <main+0x808>)
 8002962:	4811      	ldr	r0, [pc, #68]	; (80029a8 <main+0x780>)
 8002964:	f007 fd48 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002968:	480f      	ldr	r0, [pc, #60]	; (80029a8 <main+0x780>)
 800296a:	f000 ff49 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataActive.maxthrottle, FlashDataActive.minthrottle);
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <main+0x7e4>)
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fd58 	bl	8000428 <__aeabi_f2d>
 8002978:	4605      	mov	r5, r0
 800297a:	460e      	mov	r6, r1
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <main+0x7e4>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fd51 	bl	8000428 <__aeabi_f2d>
 8002986:	4603      	mov	r3, r0
 8002988:	460c      	mov	r4, r1
 800298a:	e9cd 3400 	strd	r3, r4, [sp]
 800298e:	462a      	mov	r2, r5
 8002990:	4633      	mov	r3, r6
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <main+0x80c>)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <main+0x780>)
 8002996:	f007 fd2f 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <main+0x780>)
 800299c:	f000 ff30 	bl	8003800 <WriteString>
 80029a0:	e04a      	b.n	8002a38 <main+0x810>
 80029a2:	bf00      	nop
 80029a4:	0800c21c 	.word	0x0800c21c
 80029a8:	200003f8 	.word	0x200003f8
 80029ac:	2000060c 	.word	0x2000060c
 80029b0:	0800c230 	.word	0x0800c230
 80029b4:	0800c1bc 	.word	0x0800c1bc
 80029b8:	20000890 	.word	0x20000890
 80029bc:	20000694 	.word	0x20000694
 80029c0:	20000688 	.word	0x20000688
 80029c4:	20000858 	.word	0x20000858
 80029c8:	0800c24c 	.word	0x0800c24c
 80029cc:	20000510 	.word	0x20000510
 80029d0:	20000678 	.word	0x20000678
 80029d4:	200002bc 	.word	0x200002bc
 80029d8:	2000056c 	.word	0x2000056c
 80029dc:	2000045c 	.word	0x2000045c
 80029e0:	200002c0 	.word	0x200002c0
 80029e4:	0800c26c 	.word	0x0800c26c
 80029e8:	200005c8 	.word	0x200005c8
 80029ec:	20000670 	.word	0x20000670
 80029f0:	0800c288 	.word	0x0800c288
 80029f4:	20000558 	.word	0x20000558
 80029f8:	200004b8 	.word	0x200004b8
 80029fc:	2000066c 	.word	0x2000066c
 8002a00:	20000250 	.word	0x20000250
 8002a04:	0800c298 	.word	0x0800c298
 8002a08:	0800c2b0 	.word	0x0800c2b0
 8002a0c:	20000570 	.word	0x20000570
 8002a10:	0800c2cc 	.word	0x0800c2cc
 8002a14:	0800c2ec 	.word	0x0800c2ec
 8002a18:	0800c30c 	.word	0x0800c30c
 8002a1c:	0800c328 	.word	0x0800c328
 8002a20:	0800c344 	.word	0x0800c344
 8002a24:	0800c35c 	.word	0x0800c35c
 8002a28:	0800c374 	.word	0x0800c374
 8002a2c:	0800c390 	.word	0x0800c390
 8002a30:	0800c3a8 	.word	0x0800c3a8
 8002a34:	0800c3c0 	.word	0x0800c3c0


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 8002a38:	4a97      	ldr	r2, [pc, #604]	; (8002c98 <main+0xa70>)
 8002a3a:	4b98      	ldr	r3, [pc, #608]	; (8002c9c <main+0xa74>)
 8002a3c:	4615      	mov	r5, r2
 8002a3e:	461c      	mov	r4, r3
 8002a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a42:	6028      	str	r0, [r5, #0]
 8002a44:	6069      	str	r1, [r5, #4]
 8002a46:	60aa      	str	r2, [r5, #8]
 8002a48:	60eb      	str	r3, [r5, #12]
 8002a4a:	cc03      	ldmia	r4!, {r0, r1}
 8002a4c:	6128      	str	r0, [r5, #16]
 8002a4e:	6169      	str	r1, [r5, #20]
 8002a50:	8823      	ldrh	r3, [r4, #0]
 8002a52:	832b      	strh	r3, [r5, #24]
	  WriteString(UartTXbuff0);
 8002a54:	4890      	ldr	r0, [pc, #576]	; (8002c98 <main+0xa70>)
 8002a56:	f000 fed3 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 8002a5a:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <main+0xa78>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fce2 	bl	8000428 <__aeabi_f2d>
 8002a64:	4680      	mov	r8, r0
 8002a66:	4689      	mov	r9, r1
 8002a68:	4b8d      	ldr	r3, [pc, #564]	; (8002ca0 <main+0xa78>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fcdb 	bl	8000428 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	4b8a      	ldr	r3, [pc, #552]	; (8002ca0 <main+0xa78>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fcd4 	bl	8000428 <__aeabi_f2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a88:	e9cd 4500 	strd	r4, r5, [sp]
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	4984      	ldr	r1, [pc, #528]	; (8002ca4 <main+0xa7c>)
 8002a92:	4881      	ldr	r0, [pc, #516]	; (8002c98 <main+0xa70>)
 8002a94:	f007 fcb0 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002a98:	487f      	ldr	r0, [pc, #508]	; (8002c98 <main+0xa70>)
 8002a9a:	f000 feb1 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <main+0xa78>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fcc0 	bl	8000428 <__aeabi_f2d>
 8002aa8:	4680      	mov	r8, r0
 8002aaa:	4689      	mov	r9, r1
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <main+0xa78>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fcb9 	bl	8000428 <__aeabi_f2d>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	460d      	mov	r5, r1
 8002aba:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <main+0xa78>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fcb2 	bl	8000428 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002acc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	4974      	ldr	r1, [pc, #464]	; (8002ca8 <main+0xa80>)
 8002ad6:	4870      	ldr	r0, [pc, #448]	; (8002c98 <main+0xa70>)
 8002ad8:	f007 fc8e 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002adc:	486e      	ldr	r0, [pc, #440]	; (8002c98 <main+0xa70>)
 8002ade:	f000 fe8f 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <main+0xa78>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fc9e 	bl	8000428 <__aeabi_f2d>
 8002aec:	4680      	mov	r8, r0
 8002aee:	4689      	mov	r9, r1
 8002af0:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <main+0xa78>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fc97 	bl	8000428 <__aeabi_f2d>
 8002afa:	4604      	mov	r4, r0
 8002afc:	460d      	mov	r5, r1
 8002afe:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <main+0xa78>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fc90 	bl	8000428 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b10:	e9cd 4500 	strd	r4, r5, [sp]
 8002b14:	4642      	mov	r2, r8
 8002b16:	464b      	mov	r3, r9
 8002b18:	4964      	ldr	r1, [pc, #400]	; (8002cac <main+0xa84>)
 8002b1a:	485f      	ldr	r0, [pc, #380]	; (8002c98 <main+0xa70>)
 8002b1c:	f007 fc6c 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002b20:	485d      	ldr	r0, [pc, #372]	; (8002c98 <main+0xa70>)
 8002b22:	f000 fe6d 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 8002b26:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <main+0xa78>)
 8002b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <main+0xa78>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	4960      	ldr	r1, [pc, #384]	; (8002cb0 <main+0xa88>)
 8002b30:	4859      	ldr	r0, [pc, #356]	; (8002c98 <main+0xa70>)
 8002b32:	f007 fc61 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002b36:	4858      	ldr	r0, [pc, #352]	; (8002c98 <main+0xa70>)
 8002b38:	f000 fe62 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <main+0xa78>)
 8002b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b40:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <main+0xa78>)
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	495b      	ldr	r1, [pc, #364]	; (8002cb4 <main+0xa8c>)
 8002b46:	4854      	ldr	r0, [pc, #336]	; (8002c98 <main+0xa70>)
 8002b48:	f007 fc56 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002b4c:	4852      	ldr	r0, [pc, #328]	; (8002c98 <main+0xa70>)
 8002b4e:	f000 fe57 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <main+0xa78>)
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <main+0xa78>)
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	4957      	ldr	r1, [pc, #348]	; (8002cb8 <main+0xa90>)
 8002b5c:	484e      	ldr	r0, [pc, #312]	; (8002c98 <main+0xa70>)
 8002b5e:	f007 fc4b 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002b62:	484d      	ldr	r0, [pc, #308]	; (8002c98 <main+0xa70>)
 8002b64:	f000 fe4c 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataFlash.maxpitchdegree);
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <main+0xa78>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fc5b 	bl	8000428 <__aeabi_f2d>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	461a      	mov	r2, r3
 8002b78:	4623      	mov	r3, r4
 8002b7a:	4950      	ldr	r1, [pc, #320]	; (8002cbc <main+0xa94>)
 8002b7c:	4846      	ldr	r0, [pc, #280]	; (8002c98 <main+0xa70>)
 8002b7e:	f007 fc3b 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002b82:	4845      	ldr	r0, [pc, #276]	; (8002c98 <main+0xa70>)
 8002b84:	f000 fe3c 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataFlash.maxrolldegree);
 8002b88:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <main+0xa78>)
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fc4b 	bl	8000428 <__aeabi_f2d>
 8002b92:	4603      	mov	r3, r0
 8002b94:	460c      	mov	r4, r1
 8002b96:	461a      	mov	r2, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	4949      	ldr	r1, [pc, #292]	; (8002cc0 <main+0xa98>)
 8002b9c:	483e      	ldr	r0, [pc, #248]	; (8002c98 <main+0xa70>)
 8002b9e:	f007 fc2b 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002ba2:	483d      	ldr	r0, [pc, #244]	; (8002c98 <main+0xa70>)
 8002ba4:	f000 fe2c 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataFlash.maxyawdegree);
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <main+0xa78>)
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fc3b 	bl	8000428 <__aeabi_f2d>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4623      	mov	r3, r4
 8002bba:	4942      	ldr	r1, [pc, #264]	; (8002cc4 <main+0xa9c>)
 8002bbc:	4836      	ldr	r0, [pc, #216]	; (8002c98 <main+0xa70>)
 8002bbe:	f007 fc1b 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002bc2:	4835      	ldr	r0, [pc, #212]	; (8002c98 <main+0xa70>)
 8002bc4:	f000 fe1c 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <main+0xa78>)
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc2b 	bl	8000428 <__aeabi_f2d>
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	460e      	mov	r6, r1
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <main+0xa78>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc24 	bl	8000428 <__aeabi_f2d>
 8002be0:	4603      	mov	r3, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	e9cd 3400 	strd	r3, r4, [sp]
 8002be8:	462a      	mov	r2, r5
 8002bea:	4633      	mov	r3, r6
 8002bec:	4936      	ldr	r1, [pc, #216]	; (8002cc8 <main+0xaa0>)
 8002bee:	482a      	ldr	r0, [pc, #168]	; (8002c98 <main+0xa70>)
 8002bf0:	f007 fc02 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002bf4:	4828      	ldr	r0, [pc, #160]	; (8002c98 <main+0xa70>)
 8002bf6:	f000 fe03 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <main+0xa70>)
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <main+0xaa4>)
 8002bfe:	8811      	ldrh	r1, [r2, #0]
 8002c00:	7892      	ldrb	r2, [r2, #2]
 8002c02:	8019      	strh	r1, [r3, #0]
 8002c04:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002c06:	4824      	ldr	r0, [pc, #144]	; (8002c98 <main+0xa70>)
 8002c08:	f000 fdfa 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <main+0xaa8>)
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <main+0xaac>)
 8002c12:	681d      	ldr	r5, [r3, #0]
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <main+0xab0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a30      	ldr	r2, [pc, #192]	; (8002cdc <main+0xab4>)
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4930      	ldr	r1, [pc, #192]	; (8002ce0 <main+0xab8>)
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	4830      	ldr	r0, [pc, #192]	; (8002ce4 <main+0xabc>)
 8002c22:	6800      	ldr	r0, [r0, #0]
 8002c24:	9003      	str	r0, [sp, #12]
 8002c26:	9102      	str	r1, [sp, #8]
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	4622      	mov	r2, r4
 8002c30:	492d      	ldr	r1, [pc, #180]	; (8002ce8 <main+0xac0>)
 8002c32:	4819      	ldr	r0, [pc, #100]	; (8002c98 <main+0xa70>)
 8002c34:	f007 fbe0 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002c38:	4817      	ldr	r0, [pc, #92]	; (8002c98 <main+0xa70>)
 8002c3a:	f000 fde1 	bl	8003800 <WriteString>

	  sprintf(UartTXbuff0, "watch %.2f %.2f %.2f %.2f \n\r",watch1fl,watch2fl,watch3fl,watch4fl);
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <main+0xac4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fbf0 	bl	8000428 <__aeabi_f2d>
 8002c48:	4682      	mov	sl, r0
 8002c4a:	468b      	mov	fp, r1
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <main+0xac8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fbe9 	bl	8000428 <__aeabi_f2d>
 8002c56:	4604      	mov	r4, r0
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <main+0xacc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fbe2 	bl	8000428 <__aeabi_f2d>
 8002c64:	4680      	mov	r8, r0
 8002c66:	4689      	mov	r9, r1
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <main+0xad0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fbdb 	bl	8000428 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c7a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002c7e:	e9cd 4500 	strd	r4, r5, [sp]
 8002c82:	4652      	mov	r2, sl
 8002c84:	465b      	mov	r3, fp
 8002c86:	491d      	ldr	r1, [pc, #116]	; (8002cfc <main+0xad4>)
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <main+0xa70>)
 8002c8a:	f007 fbb5 	bl	800a3f8 <siprintf>
	  WriteString(UartTXbuff0);
 8002c8e:	4802      	ldr	r0, [pc, #8]	; (8002c98 <main+0xa70>)
 8002c90:	f000 fdb6 	bl	8003800 <WriteString>
	  HAL_Delay(100);
 8002c94:	f7ff bbda 	b.w	800244c <main+0x224>
 8002c98:	200003f8 	.word	0x200003f8
 8002c9c:	0800c3e0 	.word	0x0800c3e0
 8002ca0:	20000618 	.word	0x20000618
 8002ca4:	0800c2cc 	.word	0x0800c2cc
 8002ca8:	0800c2ec 	.word	0x0800c2ec
 8002cac:	0800c30c 	.word	0x0800c30c
 8002cb0:	0800c328 	.word	0x0800c328
 8002cb4:	0800c344 	.word	0x0800c344
 8002cb8:	0800c35c 	.word	0x0800c35c
 8002cbc:	0800c374 	.word	0x0800c374
 8002cc0:	0800c390 	.word	0x0800c390
 8002cc4:	0800c3a8 	.word	0x0800c3a8
 8002cc8:	0800c3c0 	.word	0x0800c3c0
 8002ccc:	0800c1bc 	.word	0x0800c1bc
 8002cd0:	200003f4 	.word	0x200003f4
 8002cd4:	200003e4 	.word	0x200003e4
 8002cd8:	20000568 	.word	0x20000568
 8002cdc:	200003e8 	.word	0x200003e8
 8002ce0:	20000680 	.word	0x20000680
 8002ce4:	200004bc 	.word	0x200004bc
 8002ce8:	0800c3fc 	.word	0x0800c3fc
 8002cec:	2000050c 	.word	0x2000050c
 8002cf0:	200005c4 	.word	0x200005c4
 8002cf4:	2000033c 	.word	0x2000033c
 8002cf8:	20000504 	.word	0x20000504
 8002cfc:	0800c418 	.word	0x0800c418

08002d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b094      	sub	sp, #80	; 0x50
 8002d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0a:	2228      	movs	r2, #40	; 0x28
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f006 fe64 	bl	80099dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d42:	2302      	movs	r3, #2
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 f824 	bl	8007da4 <HAL_RCC_OscConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d62:	f000 fd81 	bl	8003868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d66:	230f      	movs	r3, #15
 8002d68:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fa8e 	bl	80082a4 <HAL_RCC_ClockConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d8e:	f000 fd6b 	bl	8003868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d92:	2302      	movs	r3, #2
 8002d94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 fc1c 	bl	80085dc <HAL_RCCEx_PeriphCLKConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002daa:	f000 fd5d 	bl	8003868 <Error_Handler>
  }
}
 8002dae:	bf00      	nop
 8002db0:	3750      	adds	r7, #80	; 0x50
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <MX_ADC1_Init+0x78>)
 8002dcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002de2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002de6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002df6:	f002 ff03 	bl	8005c00 <HAL_ADC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002e00:	f000 fd32 	bl	8003868 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <MX_ADC1_Init+0x74>)
 8002e16:	f003 f97f 	bl	8006118 <HAL_ADC_ConfigChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002e20:	f000 fd22 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000488 	.word	0x20000488
 8002e30:	40012400 	.word	0x40012400

08002e34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <MX_I2C2_Init+0x54>)
 8002e3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <MX_I2C2_Init+0x58>)
 8002e42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	; (8002e84 <MX_I2C2_Init+0x50>)
 8002e72:	f004 f809 	bl	8006e88 <HAL_I2C_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e7c:	f000 fcf4 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200002c4 	.word	0x200002c4
 8002e88:	40005800 	.word	0x40005800
 8002e8c:	00061a80 	.word	0x00061a80

08002e90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <MX_SPI2_Init+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ea0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002edc:	220a      	movs	r2, #10
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <MX_SPI2_Init+0x64>)
 8002ee2:	f005 fced 	bl	80088c0 <HAL_SPI_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002eec:	f000 fcbc 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000264 	.word	0x20000264
 8002ef8:	40003800 	.word	0x40003800

08002efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b096      	sub	sp, #88	; 0x58
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	615a      	str	r2, [r3, #20]
 8002f2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2220      	movs	r2, #32
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f006 fd51 	bl	80099dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f3c:	4a51      	ldr	r2, [pc, #324]	; (8003084 <MX_TIM1_Init+0x188>)
 8002f3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f42:	2247      	movs	r2, #71	; 0x47
 8002f44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f54:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f60:	4b47      	ldr	r3, [pc, #284]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f66:	4846      	ldr	r0, [pc, #280]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f68:	f005 fd0b 	bl	8008982 <HAL_TIM_Base_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f72:	f000 fc79 	bl	8003868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f80:	4619      	mov	r1, r3
 8002f82:	483f      	ldr	r0, [pc, #252]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f84:	f005 ff80 	bl	8008e88 <HAL_TIM_ConfigClockSource>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f8e:	f000 fc6b 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f92:	483b      	ldr	r0, [pc, #236]	; (8003080 <MX_TIM1_Init+0x184>)
 8002f94:	f005 fd43 	bl	8008a1e <HAL_TIM_PWM_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f9e:	f000 fc63 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4833      	ldr	r0, [pc, #204]	; (8003080 <MX_TIM1_Init+0x184>)
 8002fb2:	f006 faf1 	bl	8009598 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002fbc:	f000 fc54 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc0:	2360      	movs	r3, #96	; 0x60
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8002fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4826      	ldr	r0, [pc, #152]	; (8003080 <MX_TIM1_Init+0x184>)
 8002fe8:	f005 fe88 	bl	8008cfc <HAL_TIM_PWM_ConfigChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002ff2:	f000 fc39 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4820      	ldr	r0, [pc, #128]	; (8003080 <MX_TIM1_Init+0x184>)
 8003000:	f005 fe7c 	bl	8008cfc <HAL_TIM_PWM_ConfigChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800300a:	f000 fc2d 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	2208      	movs	r2, #8
 8003014:	4619      	mov	r1, r3
 8003016:	481a      	ldr	r0, [pc, #104]	; (8003080 <MX_TIM1_Init+0x184>)
 8003018:	f005 fe70 	bl	8008cfc <HAL_TIM_PWM_ConfigChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003022:	f000 fc21 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	220c      	movs	r2, #12
 800302c:	4619      	mov	r1, r3
 800302e:	4814      	ldr	r0, [pc, #80]	; (8003080 <MX_TIM1_Init+0x184>)
 8003030:	f005 fe64 	bl	8008cfc <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800303a:	f000 fc15 	bl	8003868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4807      	ldr	r0, [pc, #28]	; (8003080 <MX_TIM1_Init+0x184>)
 8003062:	f006 fadd 	bl	8009620 <HAL_TIMEx_ConfigBreakDeadTime>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800306c:	f000 fbfc 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <MX_TIM1_Init+0x184>)
 8003072:	f001 f8eb 	bl	800424c <HAL_TIM_MspPostInit>

}
 8003076:	bf00      	nop
 8003078:	3758      	adds	r7, #88	; 0x58
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000518 	.word	0x20000518
 8003084:	40012c00 	.word	0x40012c00

08003088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309c:	463b      	mov	r3, r7
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <MX_TIM2_Init+0x94>)
 80030a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <MX_TIM2_Init+0x94>)
 80030ae:	2247      	movs	r2, #71	; 0x47
 80030b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <MX_TIM2_Init+0x94>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <MX_TIM2_Init+0x94>)
 80030ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <MX_TIM2_Init+0x94>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <MX_TIM2_Init+0x94>)
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030cc:	4813      	ldr	r0, [pc, #76]	; (800311c <MX_TIM2_Init+0x94>)
 80030ce:	f005 fc58 	bl	8008982 <HAL_TIM_Base_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80030d8:	f000 fbc6 	bl	8003868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	4619      	mov	r1, r3
 80030e8:	480c      	ldr	r0, [pc, #48]	; (800311c <MX_TIM2_Init+0x94>)
 80030ea:	f005 fecd 	bl	8008e88 <HAL_TIM_ConfigClockSource>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030f4:	f000 fbb8 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003100:	463b      	mov	r3, r7
 8003102:	4619      	mov	r1, r3
 8003104:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_TIM2_Init+0x94>)
 8003106:	f006 fa47 	bl	8009598 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003110:	f000 fbaa 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200005cc 	.word	0x200005cc

08003120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <MX_USART1_UART_Init+0x50>)
 8003128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <MX_USART1_UART_Init+0x4c>)
 800312c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <MX_USART1_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003146:	220c      	movs	r2, #12
 8003148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <MX_USART1_UART_Init+0x4c>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <MX_USART1_UART_Init+0x4c>)
 8003158:	f006 fac5 	bl	80096e6 <HAL_UART_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003162:	f000 fb81 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200004c0 	.word	0x200004c0
 8003170:	40013800 	.word	0x40013800

08003174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317a:	f107 0310 	add.w	r3, r7, #16
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003188:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <MX_GPIO_Init+0x14c>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <MX_GPIO_Init+0x14c>)
 800318e:	f043 0310 	orr.w	r3, r3, #16
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <MX_GPIO_Init+0x14c>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4a3a      	ldr	r2, [pc, #232]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <MX_GPIO_Init+0x14c>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ee:	4835      	ldr	r0, [pc, #212]	; (80032c4 <MX_GPIO_Init+0x150>)
 80031f0:	f003 fe1a 	bl	8006e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|TEST1_PIN_Pin, GPIO_PIN_RESET);
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80031fa:	4833      	ldr	r0, [pc, #204]	; (80032c8 <MX_GPIO_Init+0x154>)
 80031fc:	f003 fe14 	bl	8006e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8003200:	2200      	movs	r2, #0
 8003202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003206:	4831      	ldr	r0, [pc, #196]	; (80032cc <MX_GPIO_Init+0x158>)
 8003208:	f003 fe0e 	bl	8006e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800320c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003212:	2301      	movs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2302      	movs	r3, #2
 800321c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4619      	mov	r1, r3
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <MX_GPIO_Init+0x150>)
 8003226:	f003 fca5 	bl	8006b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 800322a:	2301      	movs	r3, #1
 800322c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4619      	mov	r1, r3
 800323c:	4822      	ldr	r0, [pc, #136]	; (80032c8 <MX_GPIO_Init+0x154>)
 800323e:	f003 fc99 	bl	8006b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8003242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2302      	movs	r3, #2
 8003252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4619      	mov	r1, r3
 800325a:	481b      	ldr	r0, [pc, #108]	; (80032c8 <MX_GPIO_Init+0x154>)
 800325c:	f003 fc8a 	bl	8006b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8003260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800326e:	f107 0310 	add.w	r3, r7, #16
 8003272:	4619      	mov	r1, r3
 8003274:	4815      	ldr	r0, [pc, #84]	; (80032cc <MX_GPIO_Init+0x158>)
 8003276:	f003 fc7d 	bl	8006b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2302      	movs	r3, #2
 800328a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4619      	mov	r1, r3
 8003292:	480e      	ldr	r0, [pc, #56]	; (80032cc <MX_GPIO_Init+0x158>)
 8003294:	f003 fc6e 	bl	8006b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST1_PIN_Pin */
  GPIO_InitStruct.Pin = TEST1_PIN_Pin;
 8003298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800329c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST1_PIN_GPIO_Port, &GPIO_InitStruct);
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	4619      	mov	r1, r3
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <MX_GPIO_Init+0x154>)
 80032b2:	f003 fc5f 	bl	8006b74 <HAL_GPIO_Init>

}
 80032b6:	bf00      	nop
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40010c00 	.word	0x40010c00
 80032cc:	40010800 	.word	0x40010800

080032d0 <WriteFlashData>:

/* USER CODE BEGIN 4 */
//Write Data into Flash starting from given address
void WriteFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 80032e6:	f003 fab5 	bl	8006854 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80032ea:	f107 020c 	add.w	r2, r7, #12
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fb95 	bl	8006a24 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 0400 	mov.w	r4, #0
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	2002      	movs	r0, #2
 800330a:	f003 fa33 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, (uint32_t) ( p->pid_p_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1d1d      	adds	r5, r3, #4
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	49b2      	ldr	r1, [pc, #712]	; (80035e0 <WriteFlashData+0x310>)
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd13 	bl	8000d44 <__aeabi_fmul>
 800331e:	4603      	mov	r3, r0
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fed5 	bl	80010d0 <__aeabi_f2uiz>
 8003326:	4603      	mov	r3, r0
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	461a      	mov	r2, r3
 800332e:	4623      	mov	r3, r4
 8003330:	4629      	mov	r1, r5
 8003332:	2002      	movs	r0, #2
 8003334:	f003 fa1e 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, (uint32_t) ( p->pid_i_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f103 0508 	add.w	r5, r3, #8
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	49a7      	ldr	r1, [pc, #668]	; (80035e0 <WriteFlashData+0x310>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fcfd 	bl	8000d44 <__aeabi_fmul>
 800334a:	4603      	mov	r3, r0
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd febf 	bl	80010d0 <__aeabi_f2uiz>
 8003352:	4603      	mov	r3, r0
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	4629      	mov	r1, r5
 800335e:	2002      	movs	r0, #2
 8003360:	f003 fa08 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12,(uint32_t) ( p->pid_d_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 050c 	add.w	r5, r3, #12
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	499c      	ldr	r1, [pc, #624]	; (80035e0 <WriteFlashData+0x310>)
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fce7 	bl	8000d44 <__aeabi_fmul>
 8003376:	4603      	mov	r3, r0
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fea9 	bl	80010d0 <__aeabi_f2uiz>
 800337e:	4603      	mov	r3, r0
 8003380:	f04f 0400 	mov.w	r4, #0
 8003384:	461a      	mov	r2, r3
 8003386:	4623      	mov	r3, r4
 8003388:	4629      	mov	r1, r5
 800338a:	2002      	movs	r0, #2
 800338c:	f003 f9f2 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16,(uint32_t) ( p->pid_p_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0510 	add.w	r5, r3, #16
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	4991      	ldr	r1, [pc, #580]	; (80035e0 <WriteFlashData+0x310>)
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fcd1 	bl	8000d44 <__aeabi_fmul>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd fe93 	bl	80010d0 <__aeabi_f2uiz>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f04f 0400 	mov.w	r4, #0
 80033b0:	461a      	mov	r2, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	2002      	movs	r0, #2
 80033b8:	f003 f9dc 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20,(uint32_t) ( p->pid_i_gain_roll * FLASHCONSTANTMULTIPLIER) );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f103 0514 	add.w	r5, r3, #20
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4986      	ldr	r1, [pc, #536]	; (80035e0 <WriteFlashData+0x310>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fcbb 	bl	8000d44 <__aeabi_fmul>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fe7d 	bl	80010d0 <__aeabi_f2uiz>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	2002      	movs	r0, #2
 80033e4:	f003 f9c6 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24,(uint32_t) ( p->pid_d_gain_roll * FLASHCONSTANTMULTIPLIER) );
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0518 	add.w	r5, r3, #24
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	497b      	ldr	r1, [pc, #492]	; (80035e0 <WriteFlashData+0x310>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fca5 	bl	8000d44 <__aeabi_fmul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fe67 	bl	80010d0 <__aeabi_f2uiz>
 8003402:	4603      	mov	r3, r0
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	4629      	mov	r1, r5
 800340e:	2002      	movs	r0, #2
 8003410:	f003 f9b0 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28,(uint32_t) ( p->pid_p_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f103 051c 	add.w	r5, r3, #28
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4970      	ldr	r1, [pc, #448]	; (80035e0 <WriteFlashData+0x310>)
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fc8f 	bl	8000d44 <__aeabi_fmul>
 8003426:	4603      	mov	r3, r0
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fe51 	bl	80010d0 <__aeabi_f2uiz>
 800342e:	4603      	mov	r3, r0
 8003430:	f04f 0400 	mov.w	r4, #0
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	4629      	mov	r1, r5
 800343a:	2002      	movs	r0, #2
 800343c:	f003 f99a 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32,(uint32_t) ( p->pid_i_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0520 	add.w	r5, r3, #32
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4965      	ldr	r1, [pc, #404]	; (80035e0 <WriteFlashData+0x310>)
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fc79 	bl	8000d44 <__aeabi_fmul>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fe3b 	bl	80010d0 <__aeabi_f2uiz>
 800345a:	4603      	mov	r3, r0
 800345c:	f04f 0400 	mov.w	r4, #0
 8003460:	461a      	mov	r2, r3
 8003462:	4623      	mov	r3, r4
 8003464:	4629      	mov	r1, r5
 8003466:	2002      	movs	r0, #2
 8003468:	f003 f984 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36,(uint32_t) ( p->pid_d_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f103 0524 	add.w	r5, r3, #36	; 0x24
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	495a      	ldr	r1, [pc, #360]	; (80035e0 <WriteFlashData+0x310>)
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fc63 	bl	8000d44 <__aeabi_fmul>
 800347e:	4603      	mov	r3, r0
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fe25 	bl	80010d0 <__aeabi_f2uiz>
 8003486:	4603      	mov	r3, r0
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	4629      	mov	r1, r5
 8003492:	2002      	movs	r0, #2
 8003494:	f003 f96e 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80034a6:	461a      	mov	r2, r3
 80034a8:	4623      	mov	r3, r4
 80034aa:	2002      	movs	r0, #2
 80034ac:	f003 f962 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80034be:	461a      	mov	r2, r3
 80034c0:	4623      	mov	r3, r4
 80034c2:	2002      	movs	r0, #2
 80034c4:	f003 f956 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	2002      	movs	r0, #2
 80034dc:	f003 f94a 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80034ee:	461a      	mov	r2, r3
 80034f0:	4623      	mov	r3, r4
 80034f2:	2002      	movs	r0, #2
 80034f4:	f003 f93e 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8003506:	461a      	mov	r2, r3
 8003508:	4623      	mov	r3, r4
 800350a:	2002      	movs	r0, #2
 800350c:	f003 f932 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800351e:	461a      	mov	r2, r3
 8003520:	4623      	mov	r3, r4
 8003522:	2002      	movs	r0, #2
 8003524:	f003 f926 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+64,(uint32_t)(p->maxpitchdegree) );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0540 	add.w	r5, r3, #64	; 0x40
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fdcc 	bl	80010d0 <__aeabi_f2uiz>
 8003538:	4603      	mov	r3, r0
 800353a:	f04f 0400 	mov.w	r4, #0
 800353e:	461a      	mov	r2, r3
 8003540:	4623      	mov	r3, r4
 8003542:	4629      	mov	r1, r5
 8003544:	2002      	movs	r0, #2
 8003546:	f003 f915 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+68,(uint32_t)(p->maxrolldegree) );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0544 	add.w	r5, r3, #68	; 0x44
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fdbb 	bl	80010d0 <__aeabi_f2uiz>
 800355a:	4603      	mov	r3, r0
 800355c:	f04f 0400 	mov.w	r4, #0
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4629      	mov	r1, r5
 8003566:	2002      	movs	r0, #2
 8003568:	f003 f904 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+72,(uint32_t)(p->maxyawdegree) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fdaa 	bl	80010d0 <__aeabi_f2uiz>
 800357c:	4603      	mov	r3, r0
 800357e:	f04f 0400 	mov.w	r4, #0
 8003582:	461a      	mov	r2, r3
 8003584:	4623      	mov	r3, r4
 8003586:	4629      	mov	r1, r5
 8003588:	2002      	movs	r0, #2
 800358a:	f003 f8f3 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+76,(uint32_t)(p->minthrottle) );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fd99 	bl	80010d0 <__aeabi_f2uiz>
 800359e:	4603      	mov	r3, r0
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4623      	mov	r3, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	2002      	movs	r0, #2
 80035ac:	f003 f8e2 	bl	8006774 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+80,(uint32_t)(p->maxthrottle) );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fd88 	bl	80010d0 <__aeabi_f2uiz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	461a      	mov	r2, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	4629      	mov	r1, r5
 80035cc:	2002      	movs	r0, #2
 80035ce:	f003 f8d1 	bl	8006774 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 80035d2:	f003 f965 	bl	80068a0 <HAL_FLASH_Lock>
}
 80035d6:	bf00      	nop
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bdb0      	pop	{r4, r5, r7, pc}
 80035de:	bf00      	nop
 80035e0:	47c35000 	.word	0x47c35000

080035e4 <EraseFlashData>:

void EraseFlashData(uint32_t StartAddr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;

	uint32_t PageError;

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = StartAddr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages     = 1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 80035f8:	f003 f92c 	bl	8006854 <HAL_FLASH_Unlock>

	//FLASH_PageErase(0x800FC00); //doesn't handle all registers PER regiser in CR is not cleared

	HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80035fc:	f107 020c 	add.w	r2, r7, #12
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fa0c 	bl	8006a24 <HAL_FLASHEx_Erase>

	HAL_FLASH_Lock();
 800360c:	f003 f948 	bl	80068a0 <HAL_FLASH_Lock>
}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <CheckFlashData>:


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
	...

08003630 <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+4) )) )/FLASHCONSTANTMULTIPLIER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fb23 	bl	8000c94 <__aeabi_ui2f>
 800364e:	4603      	mov	r3, r0
 8003650:	496a      	ldr	r1, [pc, #424]	; (80037fc <ReadFlashData+0x1cc>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fc2a 	bl	8000eac <__aeabi_fdiv>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]
	p->pid_i_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+8) )) )/FLASHCONSTANTMULTIPLIER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3308      	adds	r3, #8
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fb14 	bl	8000c94 <__aeabi_ui2f>
 800366c:	4603      	mov	r3, r0
 800366e:	4963      	ldr	r1, [pc, #396]	; (80037fc <ReadFlashData+0x1cc>)
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fc1b 	bl	8000eac <__aeabi_fdiv>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	609a      	str	r2, [r3, #8]
	p->pid_d_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+12) )) )/FLASHCONSTANTMULTIPLIER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	330c      	adds	r3, #12
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fb05 	bl	8000c94 <__aeabi_ui2f>
 800368a:	4603      	mov	r3, r0
 800368c:	495b      	ldr	r1, [pc, #364]	; (80037fc <ReadFlashData+0x1cc>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fc0c 	bl	8000eac <__aeabi_fdiv>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	60da      	str	r2, [r3, #12]
	p->pid_p_gain_roll=(float)( (*(( uint32_t *) (StartAddr+16) ))  )/FLASHCONSTANTMULTIPLIER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3310      	adds	r3, #16
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd faf6 	bl	8000c94 <__aeabi_ui2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4954      	ldr	r1, [pc, #336]	; (80037fc <ReadFlashData+0x1cc>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fbfd 	bl	8000eac <__aeabi_fdiv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	611a      	str	r2, [r3, #16]
	p->pid_i_gain_roll=(float)( (*(( uint32_t *) (StartAddr+20) )) )/FLASHCONSTANTMULTIPLIER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3314      	adds	r3, #20
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fae7 	bl	8000c94 <__aeabi_ui2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	494c      	ldr	r1, [pc, #304]	; (80037fc <ReadFlashData+0x1cc>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fbee 	bl	8000eac <__aeabi_fdiv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	615a      	str	r2, [r3, #20]
	p->pid_d_gain_roll=(float)( (*(( uint32_t *) (StartAddr+24) )) )/FLASHCONSTANTMULTIPLIER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3318      	adds	r3, #24
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fad8 	bl	8000c94 <__aeabi_ui2f>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4945      	ldr	r1, [pc, #276]	; (80037fc <ReadFlashData+0x1cc>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fbdf 	bl	8000eac <__aeabi_fdiv>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
	p->pid_p_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+28) )) )/FLASHCONSTANTMULTIPLIER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	331c      	adds	r3, #28
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fac9 	bl	8000c94 <__aeabi_ui2f>
 8003702:	4603      	mov	r3, r0
 8003704:	493d      	ldr	r1, [pc, #244]	; (80037fc <ReadFlashData+0x1cc>)
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fbd0 	bl	8000eac <__aeabi_fdiv>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	61da      	str	r2, [r3, #28]
	p->pid_i_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+32) )) )/FLASHCONSTANTMULTIPLIER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3320      	adds	r3, #32
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd faba 	bl	8000c94 <__aeabi_ui2f>
 8003720:	4603      	mov	r3, r0
 8003722:	4936      	ldr	r1, [pc, #216]	; (80037fc <ReadFlashData+0x1cc>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fbc1 	bl	8000eac <__aeabi_fdiv>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	621a      	str	r2, [r3, #32]
	p->pid_d_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+36) )) )/FLASHCONSTANTMULTIPLIER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3324      	adds	r3, #36	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd faab 	bl	8000c94 <__aeabi_ui2f>
 800373e:	4603      	mov	r3, r0
 8003740:	492e      	ldr	r1, [pc, #184]	; (80037fc <ReadFlashData+0x1cc>)
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fbb2 	bl	8000eac <__aeabi_fdiv>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3328      	adds	r3, #40	; 0x28
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	332c      	adds	r3, #44	; 0x2c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3330      	adds	r3, #48	; 0x30
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3334      	adds	r3, #52	; 0x34
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3338      	adds	r3, #56	; 0x38
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	333c      	adds	r3, #60	; 0x3c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
	p->maxpitchdegree=(float)( (*(( uint32_t *) (StartAddr+64) )) );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3340      	adds	r3, #64	; 0x40
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fa78 	bl	8000c94 <__aeabi_ui2f>
 80037a4:	4602      	mov	r2, r0
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
	p->maxrolldegree=(float)( (*(( uint32_t *) (StartAddr+68) )) );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3344      	adds	r3, #68	; 0x44
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fa6f 	bl	8000c94 <__aeabi_ui2f>
 80037b6:	4602      	mov	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
	p->maxyawdegree=(float)( (*(( uint32_t *) (StartAddr+72) )) );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3348      	adds	r3, #72	; 0x48
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fa66 	bl	8000c94 <__aeabi_ui2f>
 80037c8:	4602      	mov	r2, r0
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	649a      	str	r2, [r3, #72]	; 0x48
	p->minthrottle=(float)( (*(( uint32_t *) (StartAddr+76) )) );
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	334c      	adds	r3, #76	; 0x4c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fa5d 	bl	8000c94 <__aeabi_ui2f>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3350      	adds	r3, #80	; 0x50
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fa54 	bl	8000c94 <__aeabi_ui2f>
 80037ec:	4602      	mov	r2, r0
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	47c35000 	.word	0x47c35000

08003800 <WriteString>:

void WriteString(char string[])
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
  while (string[i])
 800380c:	e009      	b.n	8003822 <WriteString+0x22>
	{
	PrintCharUart (string[i]);
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f80e 	bl	8003838 <PrintCharUart>
	i++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ef      	bne.n	800380e <WriteString+0xe>
  }
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <PrintCharUart>:


void PrintCharUart (int ch) 	 /* Write character to Serial Port    */
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 8003840:	bf00      	nop
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <PrintCharUart+0x2c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f9      	beq.n	8003842 <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <PrintCharUart+0x2c>)
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	6053      	str	r3, [r2, #4]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40013800 	.word	0x40013800

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <nRF24_TransmitPacket+0x98>)
 8003882:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800388a:	4821      	ldr	r0, [pc, #132]	; (8003910 <nRF24_TransmitPacket+0x9c>)
 800388c:	f003 facc 	bl	8006e28 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb64 	bl	8003f62 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800389a:	2201      	movs	r2, #1
 800389c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038a0:	481b      	ldr	r0, [pc, #108]	; (8003910 <nRF24_TransmitPacket+0x9c>)
 80038a2:	f003 fac1 	bl	8006e28 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80038a6:	f000 fb24 	bl	8003ef2 <nRF24_GetStatus>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	60ba      	str	r2, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f1      	bne.n	80038a6 <nRF24_TransmitPacket+0x32>
 80038c2:	e000      	b.n	80038c6 <nRF24_TransmitPacket+0x52>
			break;
 80038c4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80038c6:	2200      	movs	r2, #0
 80038c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038cc:	4810      	ldr	r0, [pc, #64]	; (8003910 <nRF24_TransmitPacket+0x9c>)
 80038ce:	f003 faab 	bl	8006e28 <HAL_GPIO_WritePin>

	if (!wait) {
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80038d8:	2302      	movs	r3, #2
 80038da:	e012      	b.n	8003902 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80038dc:	f000 fb2c 	bl	8003f38 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e009      	b.n	8003902 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e002      	b.n	8003902 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80038fc:	f000 fb0c 	bl	8003f18 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	000fffff 	.word	0x000fffff
 8003910:	40010c00 	.word	0x40010c00

08003914 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 800391e:	bf00      	nop
 8003920:	2102      	movs	r1, #2
 8003922:	480e      	ldr	r0, [pc, #56]	; (800395c <nRF24_LL_RW+0x48>)
 8003924:	f7fe fc66 	bl	80021f4 <SPI_I2S_GetFlagStatus>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f8      	beq.n	8003920 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4619      	mov	r1, r3
 8003934:	4809      	ldr	r0, [pc, #36]	; (800395c <nRF24_LL_RW+0x48>)
 8003936:	f7fe fc43 	bl	80021c0 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 800393a:	bf00      	nop
 800393c:	2101      	movs	r1, #1
 800393e:	4807      	ldr	r0, [pc, #28]	; (800395c <nRF24_LL_RW+0x48>)
 8003940:	f7fe fc58 	bl	80021f4 <SPI_I2S_GetFlagStatus>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f8      	beq.n	800393c <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800394a:	4804      	ldr	r0, [pc, #16]	; (800395c <nRF24_LL_RW+0x48>)
 800394c:	f7fe fc46 	bl	80021dc <SPI_I2S_ReceiveData>
 8003950:	4603      	mov	r3, r0
 8003952:	b2db      	uxtb	r3, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40003800 	.word	0x40003800

08003960 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <nRF24_ReadReg+0x44>)
 8003972:	f003 fa59 	bl	8006e28 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ffc8 	bl	8003914 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003984:	20ff      	movs	r0, #255	; 0xff
 8003986:	f7ff ffc5 	bl	8003914 <nRF24_LL_RW>
 800398a:	4603      	mov	r3, r0
 800398c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800398e:	2201      	movs	r2, #1
 8003990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <nRF24_ReadReg+0x44>)
 8003996:	f003 fa47 	bl	8006e28 <HAL_GPIO_WritePin>

	return value;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40010800 	.word	0x40010800

080039a8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	460a      	mov	r2, r1
 80039b2:	71fb      	strb	r3, [r7, #7]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039be:	481a      	ldr	r0, [pc, #104]	; (8003a28 <nRF24_WriteReg+0x80>)
 80039c0:	f003 fa32 	bl	8006e28 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	2b1f      	cmp	r3, #31
 80039c8:	d810      	bhi.n	80039ec <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	f043 0320 	orr.w	r3, r3, #32
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff99 	bl	8003914 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80039e2:	79bb      	ldrb	r3, [r7, #6]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff95 	bl	8003914 <nRF24_LL_RW>
 80039ea:	e013      	b.n	8003a14 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff90 	bl	8003914 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2be1      	cmp	r3, #225	; 0xe1
 80039f8:	d00c      	beq.n	8003a14 <nRF24_WriteReg+0x6c>
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2be2      	cmp	r3, #226	; 0xe2
 80039fe:	d009      	beq.n	8003a14 <nRF24_WriteReg+0x6c>
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2be3      	cmp	r3, #227	; 0xe3
 8003a04:	d006      	beq.n	8003a14 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2bff      	cmp	r3, #255	; 0xff
 8003a0a:	d003      	beq.n	8003a14 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8003a0c:	79bb      	ldrb	r3, [r7, #6]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff80 	bl	8003914 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8003a14:	2201      	movs	r2, #1
 8003a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1a:	4803      	ldr	r0, [pc, #12]	; (8003a28 <nRF24_WriteReg+0x80>)
 8003a1c:	f003 fa04 	bl	8006e28 <HAL_GPIO_WritePin>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010800 	.word	0x40010800

08003a2c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a42:	480f      	ldr	r0, [pc, #60]	; (8003a80 <nRF24_ReadMBReg+0x54>)
 8003a44:	f003 f9f0 	bl	8006e28 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff62 	bl	8003914 <nRF24_LL_RW>
	while (count--) {
 8003a50:	e007      	b.n	8003a62 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003a52:	683c      	ldr	r4, [r7, #0]
 8003a54:	1c63      	adds	r3, r4, #1
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	20ff      	movs	r0, #255	; 0xff
 8003a5a:	f7ff ff5b 	bl	8003914 <nRF24_LL_RW>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8003a62:	79bb      	ldrb	r3, [r7, #6]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	71ba      	strb	r2, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f2      	bne.n	8003a52 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a72:	4803      	ldr	r0, [pc, #12]	; (8003a80 <nRF24_ReadMBReg+0x54>)
 8003a74:	f003 f9d8 	bl	8006e28 <HAL_GPIO_WritePin>
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}
 8003a80:	40010800 	.word	0x40010800

08003a84 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	71fb      	strb	r3, [r7, #7]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a9a:	480f      	ldr	r0, [pc, #60]	; (8003ad8 <nRF24_WriteMBReg+0x54>)
 8003a9c:	f003 f9c4 	bl	8006e28 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff36 	bl	8003914 <nRF24_LL_RW>
	while (count--) {
 8003aa8:	e006      	b.n	8003ab8 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	603a      	str	r2, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff2e 	bl	8003914 <nRF24_LL_RW>
	while (count--) {
 8003ab8:	79bb      	ldrb	r3, [r7, #6]
 8003aba:	1e5a      	subs	r2, r3, #1
 8003abc:	71ba      	strb	r2, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f3      	bne.n	8003aaa <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <nRF24_WriteMBReg+0x54>)
 8003aca:	f003 f9ad 	bl	8006e28 <HAL_GPIO_WritePin>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40010800 	.word	0x40010800

08003adc <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8003ae0:	2108      	movs	r1, #8
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7ff ff60 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8003ae8:	213f      	movs	r1, #63	; 0x3f
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff ff5c 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8003af0:	2103      	movs	r1, #3
 8003af2:	2002      	movs	r0, #2
 8003af4:	f7ff ff58 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8003af8:	2103      	movs	r1, #3
 8003afa:	2003      	movs	r0, #3
 8003afc:	f7ff ff54 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8003b00:	2103      	movs	r1, #3
 8003b02:	2004      	movs	r0, #4
 8003b04:	f7ff ff50 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003b08:	2102      	movs	r1, #2
 8003b0a:	2005      	movs	r0, #5
 8003b0c:	f7ff ff4c 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8003b10:	210e      	movs	r1, #14
 8003b12:	2006      	movs	r0, #6
 8003b14:	f7ff ff48 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2007      	movs	r0, #7
 8003b1c:	f7ff ff44 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8003b20:	2100      	movs	r1, #0
 8003b22:	2011      	movs	r0, #17
 8003b24:	f7ff ff40 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	2012      	movs	r0, #18
 8003b2c:	f7ff ff3c 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8003b30:	2100      	movs	r1, #0
 8003b32:	2013      	movs	r0, #19
 8003b34:	f7ff ff38 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2014      	movs	r0, #20
 8003b3c:	f7ff ff34 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8003b40:	2100      	movs	r1, #0
 8003b42:	2015      	movs	r0, #21
 8003b44:	f7ff ff30 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2016      	movs	r0, #22
 8003b4c:	f7ff ff2c 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8003b50:	2100      	movs	r1, #0
 8003b52:	201c      	movs	r0, #28
 8003b54:	f7ff ff28 	bl	80039a8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8003b58:	2100      	movs	r1, #0
 8003b5a:	201d      	movs	r0, #29
 8003b5c:	f7ff ff24 	bl	80039a8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8003b60:	f000 f9e2 	bl	8003f28 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003b64:	f000 f9d8 	bl	8003f18 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8003b68:	f000 f9e6 	bl	8003f38 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <nRF24_Init+0xa0>)
 8003b74:	f003 f958 	bl	8006e28 <HAL_GPIO_WritePin>
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010800 	.word	0x40010800

08003b80 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <nRF24_Check+0x58>)
 8003b88:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	2030      	movs	r0, #48	; 0x30
 8003b90:	f7ff ff78 	bl	8003a84 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8003b94:	463b      	mov	r3, r7
 8003b96:	2205      	movs	r2, #5
 8003b98:	4619      	mov	r1, r3
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	f7ff ff46 	bl	8003a2c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e010      	b.n	8003bc8 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	f107 0210 	add.w	r2, r7, #16
 8003bac:	4413      	add	r3, r2
 8003bae:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <nRF24_Check+0x42>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e006      	b.n	8003bd0 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d9eb      	bls.n	8003ba6 <nRF24_Check+0x26>
	}

	return 1;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	0800c438 	.word	0x0800c438

08003bdc <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7ff feba 	bl	8003960 <nRF24_ReadReg>
 8003bec:	4603      	mov	r3, r0
 8003bee:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d104      	bne.n	8003c00 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e003      	b.n	8003c08 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	f023 0302 	bic.w	r3, r3, #2
 8003c06:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fecb 	bl	80039a8 <nRF24_WriteReg>
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003c24:	2000      	movs	r0, #0
 8003c26:	f7ff fe9b 	bl	8003960 <nRF24_ReadReg>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	b25a      	sxtb	r2, r3
 8003c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b25b      	sxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff feaa 	bl	80039a8 <nRF24_WriteReg>
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7ff fe7a 	bl	8003960 <nRF24_ReadReg>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	f023 030c 	bic.w	r3, r3, #12
 8003c76:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7ff fe89 	bl	80039a8 <nRF24_WriteReg>
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	4619      	mov	r1, r3
 8003cac:	2005      	movs	r0, #5
 8003cae:	f7ff fe7b 	bl	80039a8 <nRF24_WriteReg>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	3b02      	subs	r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2003      	movs	r0, #3
 8003cce:	f7ff fe6b 	bl	80039a8 <nRF24_WriteReg>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d846      	bhi.n	8003d7c <nRF24_SetAddr+0xa0>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <nRF24_SetAddr+0x18>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d11 	.word	0x08003d11
 8003cf8:	08003d11 	.word	0x08003d11
 8003cfc:	08003d69 	.word	0x08003d69
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d11 	.word	0x08003d11
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003d10:	2003      	movs	r0, #3
 8003d12:	f7ff fe25 	bl	8003960 <nRF24_ReadReg>
 8003d16:	4603      	mov	r3, r0
 8003d18:	3301      	adds	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d2a:	4817      	ldr	r0, [pc, #92]	; (8003d88 <nRF24_SetAddr+0xac>)
 8003d2c:	f003 f87c 	bl	8006e28 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <nRF24_SetAddr+0xb0>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fde9 	bl	8003914 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	603a      	str	r2, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fde2 	bl	8003914 <nRF24_LL_RW>
			} while (addr_width--);
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	73fa      	strb	r2, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f3      	bne.n	8003d42 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d60:	4809      	ldr	r0, [pc, #36]	; (8003d88 <nRF24_SetAddr+0xac>)
 8003d62:	f003 f861 	bl	8006e28 <HAL_GPIO_WritePin>
			break;
 8003d66:	e00a      	b.n	8003d7e <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <nRF24_SetAddr+0xb0>)
 8003d6c:	5cd2      	ldrb	r2, [r2, r3]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f7ff fe17 	bl	80039a8 <nRF24_WriteReg>
			break;
 8003d7a:	e000      	b.n	8003d7e <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8003d7c:	bf00      	nop
	}
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40010800 	.word	0x40010800
 8003d8c:	0800cc00 	.word	0x0800cc00

08003d90 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003d9a:	2006      	movs	r0, #6
 8003d9c:	f7ff fde0 	bl	8003960 <nRF24_ReadReg>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	f023 0306 	bic.w	r3, r3, #6
 8003daa:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	4619      	mov	r1, r3
 8003db8:	2006      	movs	r0, #6
 8003dba:	f7ff fdf5 	bl	80039a8 <nRF24_WriteReg>
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003dd0:	2006      	movs	r0, #6
 8003dd2:	f7ff fdc5 	bl	8003960 <nRF24_ReadReg>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003de0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	4619      	mov	r1, r3
 8003dee:	2006      	movs	r0, #6
 8003df0:	f7ff fdda 	bl	80039a8 <nRF24_WriteReg>
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
 8003e06:	460b      	mov	r3, r1
 8003e08:	71bb      	strb	r3, [r7, #6]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8003e0e:	2002      	movs	r0, #2
 8003e10:	f7ff fda6 	bl	8003960 <nRF24_ReadReg>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b25a      	sxtb	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b25b      	sxtb	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e2c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	4619      	mov	r1, r3
 8003e32:	2002      	movs	r0, #2
 8003e34:	f7ff fdb8 	bl	80039a8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <nRF24_SetRXPipe+0xa4>)
 8003e3c:	5cd2      	ldrb	r2, [r2, r3]
 8003e3e:	797b      	ldrb	r3, [r7, #5]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7ff fdad 	bl	80039a8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7ff fd86 	bl	8003960 <nRF24_ReadReg>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8003e58:	79bb      	ldrb	r3, [r7, #6]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10a      	bne.n	8003e74 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2201      	movs	r2, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	b25a      	sxtb	r2, r3
 8003e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	e00b      	b.n	8003e8c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	b25a      	sxtb	r2, r3
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	4013      	ands	r3, r2
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7ff fd89 	bl	80039a8 <nRF24_WriteReg>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	0800cbf8 	.word	0x0800cbf8

08003ea4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d904      	bls.n	8003ebe <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f7ff fd76 	bl	80039a8 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8003ebc:	e015      	b.n	8003eea <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7ff fd4e 	bl	8003960 <nRF24_ReadReg>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	b25a      	sxtb	r2, r3
 8003ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eda:	4013      	ands	r3, r2
 8003edc:	b25b      	sxtb	r3, r3
 8003ede:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff fd5f 	bl	80039a8 <nRF24_WriteReg>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8003ef6:	2007      	movs	r0, #7
 8003ef8:	f7ff fd32 	bl	8003960 <nRF24_ReadReg>
 8003efc:	4603      	mov	r3, r0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8003f06:	2017      	movs	r0, #23
 8003f08:	f7ff fd2a 	bl	8003960 <nRF24_ReadReg>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8003f1c:	21ff      	movs	r1, #255	; 0xff
 8003f1e:	20e1      	movs	r0, #225	; 0xe1
 8003f20:	f7ff fd42 	bl	80039a8 <nRF24_WriteReg>
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8003f2c:	21ff      	movs	r1, #255	; 0xff
 8003f2e:	20e2      	movs	r0, #226	; 0xe2
 8003f30:	f7ff fd3a 	bl	80039a8 <nRF24_WriteReg>
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8003f3e:	2007      	movs	r0, #7
 8003f40:	f7ff fd0e 	bl	8003960 <nRF24_ReadReg>
 8003f44:	4603      	mov	r3, r0
 8003f46:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003f4e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	4619      	mov	r1, r3
 8003f54:	2007      	movs	r0, #7
 8003f56:	f7ff fd27 	bl	80039a8 <nRF24_WriteReg>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	20a0      	movs	r0, #160	; 0xa0
 8003f76:	f7ff fd85 	bl	8003a84 <nRF24_WriteMBReg>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8003f8e:	2007      	movs	r0, #7
 8003f90:	f7ff fce6 	bl	8003960 <nRF24_ReadReg>
 8003f94:	4603      	mov	r3, r0
 8003f96:	105b      	asrs	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d816      	bhi.n	8003fd4 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <nRF24_ReadPayload+0x60>)
 8003faa:	5cd3      	ldrb	r3, [r2, r3]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fcd7 	bl	8003960 <nRF24_ReadReg>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	2061      	movs	r0, #97	; 0x61
 8003fcc:	f7ff fd2e 	bl	8003a2c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	e003      	b.n	8003fdc <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8003fda:	23ff      	movs	r3, #255	; 0xff
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	0800cbf8 	.word	0x0800cbf8

08003fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_MspInit+0x5c>)
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_MspInit+0x5c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6193      	str	r3, [r2, #24]
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_MspInit+0x5c>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_MspInit+0x5c>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <HAL_MspInit+0x5c>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_MspInit+0x5c>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_MspInit+0x60>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_MspInit+0x60>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	40021000 	.word	0x40021000
 8004048:	40010000 	.word	0x40010000

0800404c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_ADC_MspInit+0x6c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d121      	bne.n	80040b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_ADC_MspInit+0x70>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_ADC_MspInit+0x70>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	6193      	str	r3, [r2, #24]
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_ADC_MspInit+0x70>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_ADC_MspInit+0x70>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <HAL_ADC_MspInit+0x70>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6193      	str	r3, [r2, #24]
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_ADC_MspInit+0x70>)
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800409c:	2301      	movs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040a0:	2303      	movs	r3, #3
 80040a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	f107 0310 	add.w	r3, r7, #16
 80040a8:	4619      	mov	r1, r3
 80040aa:	4805      	ldr	r0, [pc, #20]	; (80040c0 <HAL_ADC_MspInit+0x74>)
 80040ac:	f002 fd62 	bl	8006b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40012400 	.word	0x40012400
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40010800 	.word	0x40010800

080040c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_I2C_MspInit+0x74>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d124      	bne.n	800412e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_I2C_MspInit+0x78>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <HAL_I2C_MspInit+0x78>)
 80040ea:	f043 0308 	orr.w	r3, r3, #8
 80040ee:	6193      	str	r3, [r2, #24]
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_I2C_MspInit+0x78>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004102:	2312      	movs	r3, #18
 8004104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004106:	2303      	movs	r3, #3
 8004108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	4619      	mov	r1, r3
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <HAL_I2C_MspInit+0x7c>)
 8004112:	f002 fd2f 	bl	8006b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_I2C_MspInit+0x78>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <HAL_I2C_MspInit+0x78>)
 800411c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004120:	61d3      	str	r3, [r2, #28]
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_I2C_MspInit+0x78>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40005800 	.word	0x40005800
 800413c:	40021000 	.word	0x40021000
 8004140:	40010c00 	.word	0x40010c00

08004144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_SPI_MspInit+0x8c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d131      	bne.n	80041c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 800416a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800416e:	61d3      	str	r3, [r2, #28]
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 8004182:	f043 0308 	orr.w	r3, r3, #8
 8004186:	6193      	str	r3, [r2, #24]
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_SPI_MspInit+0x90>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004194:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800419e:	2303      	movs	r3, #3
 80041a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a2:	f107 0310 	add.w	r3, r7, #16
 80041a6:	4619      	mov	r1, r3
 80041a8:	480b      	ldr	r0, [pc, #44]	; (80041d8 <HAL_SPI_MspInit+0x94>)
 80041aa:	f002 fce3 	bl	8006b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80041ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4619      	mov	r1, r3
 80041c2:	4805      	ldr	r0, [pc, #20]	; (80041d8 <HAL_SPI_MspInit+0x94>)
 80041c4:	f002 fcd6 	bl	8006b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40003800 	.word	0x40003800
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40010c00 	.word	0x40010c00

080041dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_TIM_Base_MspInit+0x68>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 80041f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041f8:	6193      	str	r3, [r2, #24]
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004206:	e018      	b.n	800423a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d113      	bne.n	800423a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4a0c      	ldr	r2, [pc, #48]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	61d3      	str	r3, [r2, #28]
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_TIM_Base_MspInit+0x6c>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	2101      	movs	r1, #1
 800422e:	201c      	movs	r0, #28
 8004230:	f002 fa69 	bl	8006706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004234:	201c      	movs	r0, #28
 8004236:	f002 fa82 	bl	800673e <HAL_NVIC_EnableIRQ>
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40021000 	.word	0x40021000

0800424c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <HAL_TIM_MspPostInit+0x5c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d118      	bne.n	800429e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_TIM_MspPostInit+0x60>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_TIM_MspPostInit+0x60>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6193      	str	r3, [r2, #24]
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_TIM_MspPostInit+0x60>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004284:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	2302      	movs	r3, #2
 8004290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <HAL_TIM_MspPostInit+0x64>)
 800429a:	f002 fc6b 	bl	8006b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800429e:	bf00      	nop
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40010800 	.word	0x40010800

080042b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_UART_MspInit+0xa4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d13d      	bne.n	8004350 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	6193      	str	r3, [r2, #24]
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ec:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042f2:	f043 0308 	orr.w	r3, r3, #8
 80042f6:	6193      	str	r3, [r2, #24]
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_UART_MspInit+0xa8>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800430c:	2303      	movs	r3, #3
 800430e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4619      	mov	r1, r3
 8004316:	4812      	ldr	r0, [pc, #72]	; (8004360 <HAL_UART_MspInit+0xac>)
 8004318:	f002 fc2c 	bl	8006b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4619      	mov	r1, r3
 800432e:	480c      	ldr	r0, [pc, #48]	; (8004360 <HAL_UART_MspInit+0xac>)
 8004330:	f002 fc20 	bl	8006b74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_UART_MspInit+0xb0>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	4a06      	ldr	r2, [pc, #24]	; (8004364 <HAL_UART_MspInit+0xb0>)
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	; 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40013800 	.word	0x40013800
 800435c:	40021000 	.word	0x40021000
 8004360:	40010c00 	.word	0x40010c00
 8004364:	40010000 	.word	0x40010000

08004368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004378:	e7fe      	b.n	8004378 <HardFault_Handler+0x4>

0800437a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800437e:	e7fe      	b.n	800437e <MemManage_Handler+0x4>

08004380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004384:	e7fe      	b.n	8004384 <BusFault_Handler+0x4>

08004386 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800438a:	e7fe      	b.n	800438a <UsageFault_Handler+0x4>

0800438c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b4:	f001 fbe6 	bl	8005b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043b8:	bf00      	nop
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	0000      	movs	r0, r0
	...

080043c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043c8:	4893      	ldr	r0, [pc, #588]	; (8004618 <TIM2_IRQHandler+0x258>)
 80043ca:	f004 fb8f 	bl	8008aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_SET);
 80043ce:	2201      	movs	r2, #1
 80043d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043d4:	4891      	ldr	r0, [pc, #580]	; (800461c <TIM2_IRQHandler+0x25c>)
 80043d6:	f002 fd27 	bl	8006e28 <HAL_GPIO_WritePin>

  //blinky
  LEDcount++;
 80043da:	4b91      	ldr	r3, [pc, #580]	; (8004620 <TIM2_IRQHandler+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a8f      	ldr	r2, [pc, #572]	; (8004620 <TIM2_IRQHandler+0x260>)
 80043e2:	6013      	str	r3, [r2, #0]
  if(LEDcount>=250)
 80043e4:	4b8e      	ldr	r3, [pc, #568]	; (8004620 <TIM2_IRQHandler+0x260>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2bf9      	cmp	r3, #249	; 0xf9
 80043ea:	d907      	bls.n	80043fc <TIM2_IRQHandler+0x3c>
  {
	  LEDcount=0;
 80043ec:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <TIM2_IRQHandler+0x260>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80043f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043f6:	488b      	ldr	r0, [pc, #556]	; (8004624 <TIM2_IRQHandler+0x264>)
 80043f8:	f002 fd2e 	bl	8006e58 <HAL_GPIO_TogglePin>
  }



  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 80043fc:	210a      	movs	r1, #10
 80043fe:	488a      	ldr	r0, [pc, #552]	; (8004628 <TIM2_IRQHandler+0x268>)
 8004400:	f001 fd84 	bl	8005f0c <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8004404:	4888      	ldr	r0, [pc, #544]	; (8004628 <TIM2_IRQHandler+0x268>)
 8004406:	f001 fe7b 	bl	8006100 <HAL_ADC_GetValue>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fc41 	bl	8000c94 <__aeabi_ui2f>
 8004412:	4603      	mov	r3, r0
 8004414:	4985      	ldr	r1, [pc, #532]	; (800462c <TIM2_IRQHandler+0x26c>)
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fc94 	bl	8000d44 <__aeabi_fmul>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc fe56 	bl	80010d0 <__aeabi_f2uiz>
 8004424:	4602      	mov	r2, r0
 8004426:	4b82      	ldr	r3, [pc, #520]	; (8004630 <TIM2_IRQHandler+0x270>)
 8004428:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <TIM2_IRQHandler+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a80      	ldr	r2, [pc, #512]	; (8004630 <TIM2_IRQHandler+0x270>)
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	4981      	ldr	r1, [pc, #516]	; (8004638 <TIM2_IRQHandler+0x278>)
 8004434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8004438:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <TIM2_IRQHandler+0x274>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	4a7d      	ldr	r2, [pc, #500]	; (8004634 <TIM2_IRQHandler+0x274>)
 8004440:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8004442:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <TIM2_IRQHandler+0x274>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b31      	cmp	r3, #49	; 0x31
 8004448:	d902      	bls.n	8004450 <TIM2_IRQHandler+0x90>
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <TIM2_IRQHandler+0x274>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8004450:	4b7a      	ldr	r3, [pc, #488]	; (800463c <TIM2_IRQHandler+0x27c>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8004456:	4b7a      	ldr	r3, [pc, #488]	; (8004640 <TIM2_IRQHandler+0x280>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e00e      	b.n	800447c <TIM2_IRQHandler+0xbc>
  {
	  BattmVSUM+=BAttmVhist[i];
 800445e:	4b78      	ldr	r3, [pc, #480]	; (8004640 <TIM2_IRQHandler+0x280>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a75      	ldr	r2, [pc, #468]	; (8004638 <TIM2_IRQHandler+0x278>)
 8004464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004468:	4b74      	ldr	r3, [pc, #464]	; (800463c <TIM2_IRQHandler+0x27c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4413      	add	r3, r2
 800446e:	4a73      	ldr	r2, [pc, #460]	; (800463c <TIM2_IRQHandler+0x27c>)
 8004470:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8004472:	4b73      	ldr	r3, [pc, #460]	; (8004640 <TIM2_IRQHandler+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a71      	ldr	r2, [pc, #452]	; (8004640 <TIM2_IRQHandler+0x280>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4b70      	ldr	r3, [pc, #448]	; (8004640 <TIM2_IRQHandler+0x280>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b31      	cmp	r3, #49	; 0x31
 8004482:	d9ec      	bls.n	800445e <TIM2_IRQHandler+0x9e>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8004484:	4b6d      	ldr	r3, [pc, #436]	; (800463c <TIM2_IRQHandler+0x27c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <TIM2_IRQHandler+0x284>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	4a6d      	ldr	r2, [pc, #436]	; (8004648 <TIM2_IRQHandler+0x288>)
 8004492:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 8004494:	4b6d      	ldr	r3, [pc, #436]	; (800464c <TIM2_IRQHandler+0x28c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <TIM2_IRQHandler+0x290>)
 800449a:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 800449c:	4b6d      	ldr	r3, [pc, #436]	; (8004654 <TIM2_IRQHandler+0x294>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6d      	ldr	r2, [pc, #436]	; (8004658 <TIM2_IRQHandler+0x298>)
 80044a2:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 80044a4:	4b6d      	ldr	r3, [pc, #436]	; (800465c <TIM2_IRQHandler+0x29c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6d      	ldr	r2, [pc, #436]	; (8004660 <TIM2_IRQHandler+0x2a0>)
 80044aa:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 80044ac:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <TIM2_IRQHandler+0x2a4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6d      	ldr	r2, [pc, #436]	; (8004668 <TIM2_IRQHandler+0x2a8>)
 80044b2:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 80044b4:	4b6d      	ldr	r3, [pc, #436]	; (800466c <TIM2_IRQHandler+0x2ac>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6d      	ldr	r2, [pc, #436]	; (8004670 <TIM2_IRQHandler+0x2b0>)
 80044ba:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 80044bc:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <TIM2_IRQHandler+0x2b4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6d      	ldr	r2, [pc, #436]	; (8004678 <TIM2_IRQHandler+0x2b8>)
 80044c2:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 80044c4:	4b6d      	ldr	r3, [pc, #436]	; (800467c <TIM2_IRQHandler+0x2bc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8257 	beq.w	800497c <TIM2_IRQHandler+0x5bc>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 80044ce:	f7ff fd18 	bl	8003f02 <nRF24_GetStatus_RXFIFO>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f000 8251 	beq.w	800497c <TIM2_IRQHandler+0x5bc>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 80044da:	4969      	ldr	r1, [pc, #420]	; (8004680 <TIM2_IRQHandler+0x2c0>)
 80044dc:	4869      	ldr	r0, [pc, #420]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80044de:	f7ff fd51 	bl	8003f84 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 80044e2:	f7ff fd29 	bl	8003f38 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b66      	ldr	r3, [pc, #408]	; (8004688 <TIM2_IRQHandler+0x2c8>)
 80044ee:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 80044f0:	4b65      	ldr	r3, [pc, #404]	; (8004688 <TIM2_IRQHandler+0x2c8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	f200 80de 	bhi.w	80046b6 <TIM2_IRQHandler+0x2f6>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <TIM2_IRQHandler+0x140>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004515 	.word	0x08004515
 8004504:	080045df 	.word	0x080045df
 8004508:	0800460d 	.word	0x0800460d
 800450c:	080045cf 	.word	0x080045cf
 8004510:	080045d7 	.word	0x080045d7
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 8004514:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	f200 80cb 	bhi.w	80046b4 <TIM2_IRQHandler+0x2f4>
 800451e:	4b59      	ldr	r3, [pc, #356]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004520:	789b      	ldrb	r3, [r3, #2]
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	f200 80c6 	bhi.w	80046b4 <TIM2_IRQHandler+0x2f4>
 8004528:	4b56      	ldr	r3, [pc, #344]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 800452a:	78db      	ldrb	r3, [r3, #3]
 800452c:	2b64      	cmp	r3, #100	; 0x64
 800452e:	f200 80c1 	bhi.w	80046b4 <TIM2_IRQHandler+0x2f4>
 8004532:	4b54      	ldr	r3, [pc, #336]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004534:	791b      	ldrb	r3, [r3, #4]
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	f200 80bc 	bhi.w	80046b4 <TIM2_IRQHandler+0x2f4>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 800453c:	4b51      	ldr	r3, [pc, #324]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	461a      	mov	r2, r3
 8004542:	4b52      	ldr	r3, [pc, #328]	; (800468c <TIM2_IRQHandler+0x2cc>)
 8004544:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 8004546:	4b4f      	ldr	r3, [pc, #316]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004548:	789b      	ldrb	r3, [r3, #2]
 800454a:	461a      	mov	r2, r3
 800454c:	4b50      	ldr	r3, [pc, #320]	; (8004690 <TIM2_IRQHandler+0x2d0>)
 800454e:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 8004550:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004552:	78db      	ldrb	r3, [r3, #3]
 8004554:	461a      	mov	r2, r3
 8004556:	4b4f      	ldr	r3, [pc, #316]	; (8004694 <TIM2_IRQHandler+0x2d4>)
 8004558:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 800455c:	791b      	ldrb	r3, [r3, #4]
 800455e:	461a      	mov	r2, r3
 8004560:	4b4d      	ldr	r3, [pc, #308]	; (8004698 <TIM2_IRQHandler+0x2d8>)
 8004562:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 8004564:	4b47      	ldr	r3, [pc, #284]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004566:	795b      	ldrb	r3, [r3, #5]
 8004568:	461a      	mov	r2, r3
 800456a:	4b4c      	ldr	r3, [pc, #304]	; (800469c <TIM2_IRQHandler+0x2dc>)
 800456c:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 800456e:	4b45      	ldr	r3, [pc, #276]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004570:	799b      	ldrb	r3, [r3, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <TIM2_IRQHandler+0x2e0>)
 8004576:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 8004578:	4b42      	ldr	r3, [pc, #264]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 800457a:	79db      	ldrb	r3, [r3, #7]
 800457c:	09db      	lsrs	r3, r3, #7
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	4b32      	ldr	r3, [pc, #200]	; (800464c <TIM2_IRQHandler+0x28c>)
 8004584:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004588:	79db      	ldrb	r3, [r3, #7]
 800458a:	119b      	asrs	r3, r3, #6
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	4a30      	ldr	r2, [pc, #192]	; (8004654 <TIM2_IRQHandler+0x294>)
 8004592:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004596:	79db      	ldrb	r3, [r3, #7]
 8004598:	115b      	asrs	r3, r3, #5
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	4a2f      	ldr	r2, [pc, #188]	; (800465c <TIM2_IRQHandler+0x29c>)
 80045a0:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045a4:	79db      	ldrb	r3, [r3, #7]
 80045a6:	111b      	asrs	r3, r3, #4
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <TIM2_IRQHandler+0x2a4>)
 80045ae:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045b2:	79db      	ldrb	r3, [r3, #7]
 80045b4:	10db      	asrs	r3, r3, #3
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	4a2c      	ldr	r2, [pc, #176]	; (800466c <TIM2_IRQHandler+0x2ac>)
 80045bc:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045c0:	79db      	ldrb	r3, [r3, #7]
 80045c2:	109b      	asrs	r3, r3, #2
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <TIM2_IRQHandler+0x2b4>)
 80045ca:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 80045cc:	e072      	b.n	80046b4 <TIM2_IRQHandler+0x2f4>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <TIM2_IRQHandler+0x2e4>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  									}break;
 80045d4:	e06f      	b.n	80046b6 <TIM2_IRQHandler+0x2f6>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 80045d6:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <TIM2_IRQHandler+0x2e8>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  									}break;
 80045dc:	e06b      	b.n	80046b6 <TIM2_IRQHandler+0x2f6>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 80045de:	4b29      	ldr	r3, [pc, #164]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b31      	ldr	r3, [pc, #196]	; (80046ac <TIM2_IRQHandler+0x2ec>)
 80045e6:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045ea:	789b      	ldrb	r3, [r3, #2]
 80045ec:	061a      	lsls	r2, r3, #24
 80045ee:	4b25      	ldr	r3, [pc, #148]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045f0:	78db      	ldrb	r3, [r3, #3]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	441a      	add	r2, r3
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 80045f8:	791b      	ldrb	r3, [r3, #4]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	4413      	add	r3, r2
 80045fe:	4a21      	ldr	r2, [pc, #132]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 8004600:	7952      	ldrb	r2, [r2, #5]
 8004602:	4413      	add	r3, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <TIM2_IRQHandler+0x2f0>)
 8004608:	601a      	str	r2, [r3, #0]

  				  					}break;
 800460a:	e054      	b.n	80046b6 <TIM2_IRQHandler+0x2f6>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <TIM2_IRQHandler+0x2c4>)
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	461a      	mov	r2, r3
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <TIM2_IRQHandler+0x2ec>)
 8004614:	601a      	str	r2, [r3, #0]

  				  					}break;
 8004616:	e04e      	b.n	80046b6 <TIM2_IRQHandler+0x2f6>
 8004618:	200005cc 	.word	0x200005cc
 800461c:	40010c00 	.word	0x40010c00
 8004620:	200008f8 	.word	0x200008f8
 8004624:	40011000 	.word	0x40011000
 8004628:	20000488 	.word	0x20000488
 800462c:	4090ac29 	.word	0x4090ac29
 8004630:	2000090c 	.word	0x2000090c
 8004634:	2000021c 	.word	0x2000021c
 8004638:	200006ac 	.word	0x200006ac
 800463c:	20000214 	.word	0x20000214
 8004640:	20000208 	.word	0x20000208
 8004644:	51eb851f 	.word	0x51eb851f
 8004648:	20000218 	.word	0x20000218
 800464c:	20000510 	.word	0x20000510
 8004650:	20000928 	.word	0x20000928
 8004654:	20000678 	.word	0x20000678
 8004658:	20000888 	.word	0x20000888
 800465c:	200002bc 	.word	0x200002bc
 8004660:	20000924 	.word	0x20000924
 8004664:	2000056c 	.word	0x2000056c
 8004668:	20000774 	.word	0x20000774
 800466c:	2000045c 	.word	0x2000045c
 8004670:	200006a0 	.word	0x200006a0
 8004674:	200002c0 	.word	0x200002c0
 8004678:	20000904 	.word	0x20000904
 800467c:	20000004 	.word	0x20000004
 8004680:	20000204 	.word	0x20000204
 8004684:	20000318 	.word	0x20000318
 8004688:	200006a4 	.word	0x200006a4
 800468c:	20000558 	.word	0x20000558
 8004690:	200004b8 	.word	0x200004b8
 8004694:	2000066c 	.word	0x2000066c
 8004698:	20000250 	.word	0x20000250
 800469c:	200005c8 	.word	0x200005c8
 80046a0:	20000670 	.word	0x20000670
 80046a4:	2000068c 	.word	0x2000068c
 80046a8:	20000908 	.word	0x20000908
 80046ac:	20000864 	.word	0x20000864
 80046b0:	20000778 	.word	0x20000778
  									}break;
 80046b4:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 80046b6:	4b9e      	ldr	r3, [pc, #632]	; (8004930 <TIM2_IRQHandler+0x570>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	f040 8153 	bne.w	8004966 <TIM2_IRQHandler+0x5a6>
  			{
  				switch(ParamSelector)
 80046c0:	4b9c      	ldr	r3, [pc, #624]	; (8004934 <TIM2_IRQHandler+0x574>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	2b13      	cmp	r3, #19
 80046c8:	f200 814d 	bhi.w	8004966 <TIM2_IRQHandler+0x5a6>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <TIM2_IRQHandler+0x314>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004743 	.word	0x08004743
 80046dc:	08004761 	.word	0x08004761
 80046e0:	0800477f 	.word	0x0800477f
 80046e4:	0800479d 	.word	0x0800479d
 80046e8:	080047bb 	.word	0x080047bb
 80046ec:	080047d9 	.word	0x080047d9
 80046f0:	080047f7 	.word	0x080047f7
 80046f4:	08004815 	.word	0x08004815
 80046f8:	08004833 	.word	0x08004833
 80046fc:	08004849 	.word	0x08004849
 8004700:	0800485f 	.word	0x0800485f
 8004704:	08004875 	.word	0x08004875
 8004708:	0800488b 	.word	0x0800488b
 800470c:	080048a1 	.word	0x080048a1
 8004710:	080048b7 	.word	0x080048b7
 8004714:	080048d5 	.word	0x080048d5
 8004718:	080048f3 	.word	0x080048f3
 800471c:	08004911 	.word	0x08004911
 8004720:	08004949 	.word	0x08004949
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004724:	4b84      	ldr	r3, [pc, #528]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fab3 	bl	8000c94 <__aeabi_ui2f>
 800472e:	4603      	mov	r3, r0
 8004730:	4982      	ldr	r1, [pc, #520]	; (800493c <TIM2_IRQHandler+0x57c>)
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fbba 	bl	8000eac <__aeabi_fdiv>
 8004738:	4603      	mov	r3, r0
 800473a:	461a      	mov	r2, r3
 800473c:	4b80      	ldr	r3, [pc, #512]	; (8004940 <TIM2_IRQHandler+0x580>)
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	e111      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc faa4 	bl	8000c94 <__aeabi_ui2f>
 800474c:	4603      	mov	r3, r0
 800474e:	497b      	ldr	r1, [pc, #492]	; (800493c <TIM2_IRQHandler+0x57c>)
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc fbab 	bl	8000eac <__aeabi_fdiv>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b79      	ldr	r3, [pc, #484]	; (8004940 <TIM2_IRQHandler+0x580>)
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	e102      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004760:	4b75      	ldr	r3, [pc, #468]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7fc fa95 	bl	8000c94 <__aeabi_ui2f>
 800476a:	4603      	mov	r3, r0
 800476c:	4973      	ldr	r1, [pc, #460]	; (800493c <TIM2_IRQHandler+0x57c>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fb9c 	bl	8000eac <__aeabi_fdiv>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	4b71      	ldr	r3, [pc, #452]	; (8004940 <TIM2_IRQHandler+0x580>)
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	e0f3      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800477e:	4b6e      	ldr	r3, [pc, #440]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc fa86 	bl	8000c94 <__aeabi_ui2f>
 8004788:	4603      	mov	r3, r0
 800478a:	496c      	ldr	r1, [pc, #432]	; (800493c <TIM2_IRQHandler+0x57c>)
 800478c:	4618      	mov	r0, r3
 800478e:	f7fc fb8d 	bl	8000eac <__aeabi_fdiv>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <TIM2_IRQHandler+0x580>)
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	e0e4      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800479c:	4b66      	ldr	r3, [pc, #408]	; (8004938 <TIM2_IRQHandler+0x578>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fc fa77 	bl	8000c94 <__aeabi_ui2f>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4964      	ldr	r1, [pc, #400]	; (800493c <TIM2_IRQHandler+0x57c>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc fb7e 	bl	8000eac <__aeabi_fdiv>
 80047b0:	4603      	mov	r3, r0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4b62      	ldr	r3, [pc, #392]	; (8004940 <TIM2_IRQHandler+0x580>)
 80047b6:	615a      	str	r2, [r3, #20]
 80047b8:	e0d5      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047ba:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <TIM2_IRQHandler+0x578>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fa68 	bl	8000c94 <__aeabi_ui2f>
 80047c4:	4603      	mov	r3, r0
 80047c6:	495d      	ldr	r1, [pc, #372]	; (800493c <TIM2_IRQHandler+0x57c>)
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc fb6f 	bl	8000eac <__aeabi_fdiv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <TIM2_IRQHandler+0x580>)
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e0c6      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047d8:	4b57      	ldr	r3, [pc, #348]	; (8004938 <TIM2_IRQHandler+0x578>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fc fa59 	bl	8000c94 <__aeabi_ui2f>
 80047e2:	4603      	mov	r3, r0
 80047e4:	4955      	ldr	r1, [pc, #340]	; (800493c <TIM2_IRQHandler+0x57c>)
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fb60 	bl	8000eac <__aeabi_fdiv>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <TIM2_IRQHandler+0x580>)
 80047f2:	61da      	str	r2, [r3, #28]
 80047f4:	e0b7      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80047f6:	4b50      	ldr	r3, [pc, #320]	; (8004938 <TIM2_IRQHandler+0x578>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fa4a 	bl	8000c94 <__aeabi_ui2f>
 8004800:	4603      	mov	r3, r0
 8004802:	494e      	ldr	r1, [pc, #312]	; (800493c <TIM2_IRQHandler+0x57c>)
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fb51 	bl	8000eac <__aeabi_fdiv>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <TIM2_IRQHandler+0x580>)
 8004810:	621a      	str	r2, [r3, #32]
 8004812:	e0a8      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004814:	4b48      	ldr	r3, [pc, #288]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fc fa3b 	bl	8000c94 <__aeabi_ui2f>
 800481e:	4603      	mov	r3, r0
 8004820:	4946      	ldr	r1, [pc, #280]	; (800493c <TIM2_IRQHandler+0x57c>)
 8004822:	4618      	mov	r0, r3
 8004824:	f7fc fb42 	bl	8000eac <__aeabi_fdiv>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	4b44      	ldr	r3, [pc, #272]	; (8004940 <TIM2_IRQHandler+0x580>)
 800482e:	625a      	str	r2, [r3, #36]	; 0x24
 8004830:	e099      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	4a42      	ldr	r2, [pc, #264]	; (8004944 <TIM2_IRQHandler+0x584>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	461a      	mov	r2, r3
 8004842:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <TIM2_IRQHandler+0x580>)
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
 8004846:	e08e      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004848:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <TIM2_IRQHandler+0x578>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	4a3d      	ldr	r2, [pc, #244]	; (8004944 <TIM2_IRQHandler+0x584>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	461a      	mov	r2, r3
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <TIM2_IRQHandler+0x580>)
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
 800485c:	e083      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800485e:	4b36      	ldr	r3, [pc, #216]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	4a37      	ldr	r2, [pc, #220]	; (8004944 <TIM2_IRQHandler+0x584>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	09db      	lsrs	r3, r3, #7
 800486c:	461a      	mov	r2, r3
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <TIM2_IRQHandler+0x580>)
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
 8004872:	e078      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004874:	4b30      	ldr	r3, [pc, #192]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	4a32      	ldr	r2, [pc, #200]	; (8004944 <TIM2_IRQHandler+0x584>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	461a      	mov	r2, r3
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <TIM2_IRQHandler+0x580>)
 8004886:	635a      	str	r2, [r3, #52]	; 0x34
 8004888:	e06d      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800488a:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <TIM2_IRQHandler+0x578>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	4a2c      	ldr	r2, [pc, #176]	; (8004944 <TIM2_IRQHandler+0x584>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	09db      	lsrs	r3, r3, #7
 8004898:	461a      	mov	r2, r3
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <TIM2_IRQHandler+0x580>)
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
 800489e:	e062      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <TIM2_IRQHandler+0x578>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM2_IRQHandler+0x584>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <TIM2_IRQHandler+0x580>)
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80048b4:	e057      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <TIM2_IRQHandler+0x578>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc f9ea 	bl	8000c94 <__aeabi_ui2f>
 80048c0:	4603      	mov	r3, r0
 80048c2:	491e      	ldr	r1, [pc, #120]	; (800493c <TIM2_IRQHandler+0x57c>)
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fc faf1 	bl	8000eac <__aeabi_fdiv>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <TIM2_IRQHandler+0x580>)
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
 80048d2:	e048      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <TIM2_IRQHandler+0x578>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fc f9db 	bl	8000c94 <__aeabi_ui2f>
 80048de:	4603      	mov	r3, r0
 80048e0:	4916      	ldr	r1, [pc, #88]	; (800493c <TIM2_IRQHandler+0x57c>)
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fae2 	bl	8000eac <__aeabi_fdiv>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <TIM2_IRQHandler+0x580>)
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
 80048f0:	e039      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <TIM2_IRQHandler+0x578>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc f9cc 	bl	8000c94 <__aeabi_ui2f>
 80048fc:	4603      	mov	r3, r0
 80048fe:	490f      	ldr	r1, [pc, #60]	; (800493c <TIM2_IRQHandler+0x57c>)
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fad3 	bl	8000eac <__aeabi_fdiv>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <TIM2_IRQHandler+0x580>)
 800490c:	649a      	str	r2, [r3, #72]	; 0x48
 800490e:	e02a      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <TIM2_IRQHandler+0x578>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fc f9bd 	bl	8000c94 <__aeabi_ui2f>
 800491a:	4603      	mov	r3, r0
 800491c:	4907      	ldr	r1, [pc, #28]	; (800493c <TIM2_IRQHandler+0x57c>)
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fac4 	bl	8000eac <__aeabi_fdiv>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <TIM2_IRQHandler+0x580>)
 800492a:	64da      	str	r2, [r3, #76]	; 0x4c
 800492c:	e01b      	b.n	8004966 <TIM2_IRQHandler+0x5a6>
 800492e:	bf00      	nop
 8004930:	200006a4 	.word	0x200006a4
 8004934:	20000864 	.word	0x20000864
 8004938:	20000778 	.word	0x20000778
 800493c:	47c35000 	.word	0x47c35000
 8004940:	20000570 	.word	0x20000570
 8004944:	0a7c5ac5 	.word	0x0a7c5ac5
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004948:	4ba1      	ldr	r3, [pc, #644]	; (8004bd0 <TIM2_IRQHandler+0x810>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc f9a1 	bl	8000c94 <__aeabi_ui2f>
 8004952:	4603      	mov	r3, r0
 8004954:	499f      	ldr	r1, [pc, #636]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc faa8 	bl	8000eac <__aeabi_fdiv>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	4b9d      	ldr	r3, [pc, #628]	; (8004bd8 <TIM2_IRQHandler+0x818>)
 8004962:	651a      	str	r2, [r3, #80]	; 0x50
 8004964:	bf00      	nop
  				}
  			}



  			SendBackFlag=1;
 8004966:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <TIM2_IRQHandler+0x81c>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 800496c:	4b9c      	ldr	r3, [pc, #624]	; (8004be0 <TIM2_IRQHandler+0x820>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8004972:	4b9c      	ldr	r3, [pc, #624]	; (8004be4 <TIM2_IRQHandler+0x824>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	4a9a      	ldr	r2, [pc, #616]	; (8004be4 <TIM2_IRQHandler+0x824>)
 800497a:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 800497c:	4b97      	ldr	r3, [pc, #604]	; (8004bdc <TIM2_IRQHandler+0x81c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 82bb 	beq.w	8004efc <TIM2_IRQHandler+0xb3c>
  {
    	BackTimer++;
 8004986:	4b98      	ldr	r3, [pc, #608]	; (8004be8 <TIM2_IRQHandler+0x828>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	4a96      	ldr	r2, [pc, #600]	; (8004be8 <TIM2_IRQHandler+0x828>)
 800498e:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 8004990:	4b96      	ldr	r3, [pc, #600]	; (8004bec <TIM2_IRQHandler+0x82c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d004      	beq.n	80049a2 <TIM2_IRQHandler+0x5e2>
 8004998:	4b94      	ldr	r3, [pc, #592]	; (8004bec <TIM2_IRQHandler+0x82c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	f040 815b 	bne.w	8004c58 <TIM2_IRQHandler+0x898>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 80049a2:	4b92      	ldr	r3, [pc, #584]	; (8004bec <TIM2_IRQHandler+0x82c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d108      	bne.n	80049bc <TIM2_IRQHandler+0x5fc>
 80049aa:	4a91      	ldr	r2, [pc, #580]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 80049ac:	4b8a      	ldr	r3, [pc, #552]	; (8004bd8 <TIM2_IRQHandler+0x818>)
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	2354      	movs	r3, #84	; 0x54
 80049b4:	461a      	mov	r2, r3
 80049b6:	f005 f806 	bl	80099c6 <memcpy>
 80049ba:	e007      	b.n	80049cc <TIM2_IRQHandler+0x60c>
    		 else FlashDataTemp=FlashDataFlash;
 80049bc:	4a8c      	ldr	r2, [pc, #560]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 80049be:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <TIM2_IRQHandler+0x834>)
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	2354      	movs	r3, #84	; 0x54
 80049c6:	461a      	mov	r2, r3
 80049c8:	f004 fffd 	bl	80099c6 <memcpy>

    		 switch(ParamSelector)
 80049cc:	4b8a      	ldr	r3, [pc, #552]	; (8004bf8 <TIM2_IRQHandler+0x838>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	2b13      	cmp	r3, #19
 80049d4:	f200 8140 	bhi.w	8004c58 <TIM2_IRQHandler+0x898>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <TIM2_IRQHandler+0x620>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a31 	.word	0x08004a31
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	08004a69 	.word	0x08004a69
 80049ec:	08004a85 	.word	0x08004a85
 80049f0:	08004aa1 	.word	0x08004aa1
 80049f4:	08004abd 	.word	0x08004abd
 80049f8:	08004ad9 	.word	0x08004ad9
 80049fc:	08004af5 	.word	0x08004af5
 8004a00:	08004b11 	.word	0x08004b11
 8004a04:	08004b2d 	.word	0x08004b2d
 8004a08:	08004b3f 	.word	0x08004b3f
 8004a0c:	08004b51 	.word	0x08004b51
 8004a10:	08004b63 	.word	0x08004b63
 8004a14:	08004b75 	.word	0x08004b75
 8004a18:	08004b87 	.word	0x08004b87
 8004a1c:	08004b99 	.word	0x08004b99
 8004a20:	08004bb5 	.word	0x08004bb5
 8004a24:	08004c05 	.word	0x08004c05
 8004a28:	08004c21 	.word	0x08004c21
 8004a2c:	08004c3d 	.word	0x08004c3d
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004a30:	4b6f      	ldr	r3, [pc, #444]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4967      	ldr	r1, [pc, #412]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc f984 	bl	8000d44 <__aeabi_fmul>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fb46 	bl	80010d0 <__aeabi_f2uiz>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b6d      	ldr	r3, [pc, #436]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e105      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4960      	ldr	r1, [pc, #384]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc f976 	bl	8000d44 <__aeabi_fmul>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fc fb38 	bl	80010d0 <__aeabi_f2uiz>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e0f7      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004a68:	4b61      	ldr	r3, [pc, #388]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4959      	ldr	r1, [pc, #356]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc f968 	bl	8000d44 <__aeabi_fmul>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc fb2a 	bl	80010d0 <__aeabi_f2uiz>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b5f      	ldr	r3, [pc, #380]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e0e9      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004a84:	4b5a      	ldr	r3, [pc, #360]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4952      	ldr	r1, [pc, #328]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc f95a 	bl	8000d44 <__aeabi_fmul>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fb1c 	bl	80010d0 <__aeabi_f2uiz>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b58      	ldr	r3, [pc, #352]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e0db      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	494b      	ldr	r1, [pc, #300]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc f94c 	bl	8000d44 <__aeabi_fmul>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fb0e 	bl	80010d0 <__aeabi_f2uiz>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b51      	ldr	r3, [pc, #324]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e0cd      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004abc:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4944      	ldr	r1, [pc, #272]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc f93e 	bl	8000d44 <__aeabi_fmul>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc fb00 	bl	80010d0 <__aeabi_f2uiz>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e0bf      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	493d      	ldr	r1, [pc, #244]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc f930 	bl	8000d44 <__aeabi_fmul>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc faf2 	bl	80010d0 <__aeabi_f2uiz>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b43      	ldr	r3, [pc, #268]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e0b1      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004af4:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4936      	ldr	r1, [pc, #216]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc f922 	bl	8000d44 <__aeabi_fmul>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc fae4 	bl	80010d0 <__aeabi_f2uiz>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e0a3      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004b10:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	492f      	ldr	r1, [pc, #188]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fc f914 	bl	8000d44 <__aeabi_fmul>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fad6 	bl	80010d0 <__aeabi_f2uiz>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b35      	ldr	r3, [pc, #212]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e095      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004b2c:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	4a33      	ldr	r2, [pc, #204]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e08c      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e083      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e07a      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e071      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004b74:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e068      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM2_IRQHandler+0x840>)
 8004b8c:	fb02 f303 	mul.w	r3, r2, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e05f      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	490d      	ldr	r1, [pc, #52]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc f8d0 	bl	8000d44 <__aeabi_fmul>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fc fa92 	bl	80010d0 <__aeabi_f2uiz>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e051      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <TIM2_IRQHandler+0x830>)
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <TIM2_IRQHandler+0x814>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fc f8c2 	bl	8000d44 <__aeabi_fmul>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fa84 	bl	80010d0 <__aeabi_f2uiz>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <TIM2_IRQHandler+0x83c>)
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e043      	b.n	8004c58 <TIM2_IRQHandler+0x898>
 8004bd0:	20000778 	.word	0x20000778
 8004bd4:	47c35000 	.word	0x47c35000
 8004bd8:	20000570 	.word	0x20000570
 8004bdc:	20000220 	.word	0x20000220
 8004be0:	20000004 	.word	0x20000004
 8004be4:	2000069c 	.word	0x2000069c
 8004be8:	20000224 	.word	0x20000224
 8004bec:	200006a4 	.word	0x200006a4
 8004bf0:	20000898 	.word	0x20000898
 8004bf4:	20000618 	.word	0x20000618
 8004bf8:	20000864 	.word	0x20000864
 8004bfc:	20000870 	.word	0x20000870
 8004c00:	000186a0 	.word	0x000186a0
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 8004c04:	4ba5      	ldr	r3, [pc, #660]	; (8004e9c <TIM2_IRQHandler+0xadc>)
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	49a5      	ldr	r1, [pc, #660]	; (8004ea0 <TIM2_IRQHandler+0xae0>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fc f89a 	bl	8000d44 <__aeabi_fmul>
 8004c10:	4603      	mov	r3, r0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc fa5c 	bl	80010d0 <__aeabi_f2uiz>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4ba2      	ldr	r3, [pc, #648]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e01b      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8004c20:	4b9e      	ldr	r3, [pc, #632]	; (8004e9c <TIM2_IRQHandler+0xadc>)
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	499e      	ldr	r1, [pc, #632]	; (8004ea0 <TIM2_IRQHandler+0xae0>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc f88c 	bl	8000d44 <__aeabi_fmul>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc fa4e 	bl	80010d0 <__aeabi_f2uiz>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b9b      	ldr	r3, [pc, #620]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e00d      	b.n	8004c58 <TIM2_IRQHandler+0x898>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8004c3c:	4b97      	ldr	r3, [pc, #604]	; (8004e9c <TIM2_IRQHandler+0xadc>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	4997      	ldr	r1, [pc, #604]	; (8004ea0 <TIM2_IRQHandler+0xae0>)
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fc f87e 	bl	8000d44 <__aeabi_fmul>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc fa40 	bl	80010d0 <__aeabi_f2uiz>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	bf00      	nop
    		 }
    	 }

      	switch(BackTimer)
 8004c58:	4b93      	ldr	r3, [pc, #588]	; (8004ea8 <TIM2_IRQHandler+0xae8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	f200 814c 	bhi.w	8004efc <TIM2_IRQHandler+0xb3c>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <TIM2_IRQHandler+0x8ac>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c85 	.word	0x08004c85
 8004c70:	08004efd 	.word	0x08004efd
 8004c74:	08004efd 	.word	0x08004efd
 8004c78:	08004c99 	.word	0x08004c99
 8004c7c:	08004e89 	.word	0x08004e89
 8004c80:	08004ee9 	.word	0x08004ee9
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c8a:	4888      	ldr	r0, [pc, #544]	; (8004eac <TIM2_IRQHandler+0xaec>)
 8004c8c:	f002 f8cc 	bl	8006e28 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8004c90:	2000      	movs	r0, #0
 8004c92:	f7fe ffc2 	bl	8003c1a <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8004c96:	e131      	b.n	8004efc <TIM2_IRQHandler+0xb3c>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8004c98:	4b85      	ldr	r3, [pc, #532]	; (8004eb0 <TIM2_IRQHandler+0xaf0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004ca0:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8004ca2:	4b83      	ldr	r3, [pc, #524]	; (8004eb0 <TIM2_IRQHandler+0xaf0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	f200 80e9 	bhi.w	8004e7e <TIM2_IRQHandler+0xabe>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <TIM2_IRQHandler+0x8f4>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cc9 	.word	0x08004cc9
 8004cb8:	08004e0b 	.word	0x08004e0b
 8004cbc:	08004e45 	.word	0x08004e45
 8004cc0:	08004dbb 	.word	0x08004dbb
 8004cc4:	08004de3 	.word	0x08004de3
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8004cc8:	4b7b      	ldr	r3, [pc, #492]	; (8004eb8 <TIM2_IRQHandler+0xaf8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004cd0:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8004cd2:	4b79      	ldr	r3, [pc, #484]	; (8004eb8 <TIM2_IRQHandler+0xaf8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b76      	ldr	r3, [pc, #472]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004cdc:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(AnglePitch<0)
 8004cde:	4b77      	ldr	r3, [pc, #476]	; (8004ebc <TIM2_IRQHandler+0xafc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc f9ca 	bl	8001080 <__aeabi_fcmplt>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <TIM2_IRQHandler+0x950>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 8004cf2:	4b73      	ldr	r3, [pc, #460]	; (8004ec0 <TIM2_IRQHandler+0xb00>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch*(-1);
 8004cf8:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <TIM2_IRQHandler+0xafc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc f9e5 	bl	80010d0 <__aeabi_f2uiz>
 8004d06:	4603      	mov	r3, r0
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b6e      	ldr	r3, [pc, #440]	; (8004ec4 <TIM2_IRQHandler+0xb04>)
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e00b      	b.n	8004d28 <TIM2_IRQHandler+0x968>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 8004d10:	4b6b      	ldr	r3, [pc, #428]	; (8004ec0 <TIM2_IRQHandler+0xb00>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=AnglePitch;
 8004d16:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <TIM2_IRQHandler+0xafc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc f9d8 	bl	80010d0 <__aeabi_f2uiz>
 8004d20:	4603      	mov	r3, r0
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	4b67      	ldr	r3, [pc, #412]	; (8004ec4 <TIM2_IRQHandler+0xb04>)
 8004d26:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(AngleRoll<0)
 8004d28:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <TIM2_IRQHandler+0xb08>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fc f9a5 	bl	8001080 <__aeabi_fcmplt>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <TIM2_IRQHandler+0x99a>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8004d3c:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <TIM2_IRQHandler+0xb0c>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll*(-1);
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <TIM2_IRQHandler+0xb08>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fc f9c0 	bl	80010d0 <__aeabi_f2uiz>
 8004d50:	4603      	mov	r3, r0
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <TIM2_IRQHandler+0xb10>)
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e00b      	b.n	8004d72 <TIM2_IRQHandler+0x9b2>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <TIM2_IRQHandler+0xb0c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=AngleRoll;
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <TIM2_IRQHandler+0xb08>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc f9b3 	bl	80010d0 <__aeabi_f2uiz>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <TIM2_IRQHandler+0xb10>)
 8004d70:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <TIM2_IRQHandler+0xb04>)
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004d78:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 8004d7a:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <TIM2_IRQHandler+0xb10>)
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	4b4d      	ldr	r3, [pc, #308]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004d80:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8004d82:	4b52      	ldr	r3, [pc, #328]	; (8004ecc <TIM2_IRQHandler+0xb0c>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	; (8004ec0 <TIM2_IRQHandler+0xb00>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <TIM2_IRQHandler+0xb14>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b4d      	ldr	r3, [pc, #308]	; (8004ed8 <TIM2_IRQHandler+0xb18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004db6:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004db8:	e061      	b.n	8004e7e <TIM2_IRQHandler+0xabe>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 8004dcc:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <TIM2_IRQHandler+0xb1c>)
 8004dda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004dde:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8004de0:	e04d      	b.n	8004e7e <TIM2_IRQHandler+0xabe>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 8004df4:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 8004e00:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <TIM2_IRQHandler+0xb20>)
 8004e02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e06:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8004e08:	e039      	b.n	8004e7e <TIM2_IRQHandler+0xabe>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <TIM2_IRQHandler+0xb24>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e12:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e1e:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8004e20:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e2a:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e36:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004e38:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e40:	715a      	strb	r2, [r3, #5]
											}break;
 8004e42:	e01c      	b.n	8004e7e <TIM2_IRQHandler+0xabe>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <TIM2_IRQHandler+0xb24>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e4c:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	0e1b      	lsrs	r3, r3, #24
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e58:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e64:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e70:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <TIM2_IRQHandler+0xae4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e7a:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004e7c:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 8004e7e:	2106      	movs	r1, #6
 8004e80:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <TIM2_IRQHandler+0xaf4>)
 8004e82:	f7fe fcf7 	bl	8003874 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8004e86:	e039      	b.n	8004efc <TIM2_IRQHandler+0xb3c>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8004e88:	2001      	movs	r0, #1
 8004e8a:	f7fe fec6 	bl	8003c1a <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e94:	4805      	ldr	r0, [pc, #20]	; (8004eac <TIM2_IRQHandler+0xaec>)
 8004e96:	f001 ffc7 	bl	8006e28 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8004e9a:	e02f      	b.n	8004efc <TIM2_IRQHandler+0xb3c>
 8004e9c:	20000898 	.word	0x20000898
 8004ea0:	47c35000 	.word	0x47c35000
 8004ea4:	20000870 	.word	0x20000870
 8004ea8:	20000224 	.word	0x20000224
 8004eac:	40010c00 	.word	0x40010c00
 8004eb0:	200006a4 	.word	0x200006a4
 8004eb4:	20000468 	.word	0x20000468
 8004eb8:	20000218 	.word	0x20000218
 8004ebc:	20000854 	.word	0x20000854
 8004ec0:	2000085c 	.word	0x2000085c
 8004ec4:	200008f4 	.word	0x200008f4
 8004ec8:	20000910 	.word	0x20000910
 8004ecc:	2000088c 	.word	0x2000088c
 8004ed0:	200008fc 	.word	0x200008fc
 8004ed4:	20000210 	.word	0x20000210
 8004ed8:	2000020c 	.word	0x2000020c
 8004edc:	20000698 	.word	0x20000698
 8004ee0:	20000914 	.word	0x20000914
 8004ee4:	20000864 	.word	0x20000864

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <TIM2_IRQHandler+0xb74>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <TIM2_IRQHandler+0xb78>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <TIM2_IRQHandler+0xb7c>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]

  				}break;
 8004efa:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <TIM2_IRQHandler+0xb80>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <TIM2_IRQHandler+0xb80>)
 8004f04:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <TIM2_IRQHandler+0xb80>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0e:	d12a      	bne.n	8004f66 <TIM2_IRQHandler+0xba6>
  {
    		MSGprerSecond=MSGcount;
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <TIM2_IRQHandler+0xb84>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <TIM2_IRQHandler+0xb88>)
 8004f16:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <TIM2_IRQHandler+0xb84>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d819      	bhi.n	8004f54 <TIM2_IRQHandler+0xb94>
    		{
    			MSGLowCount++;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <TIM2_IRQHandler+0xb8c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <TIM2_IRQHandler+0xb8c>)
 8004f28:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <TIM2_IRQHandler+0xb90>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e013      	b.n	8004f5a <TIM2_IRQHandler+0xb9a>
 8004f32:	bf00      	nop
 8004f34:	20000004 	.word	0x20000004
 8004f38:	20000220 	.word	0x20000220
 8004f3c:	20000224 	.word	0x20000224
 8004f40:	20000684 	.word	0x20000684
 8004f44:	2000069c 	.word	0x2000069c
 8004f48:	20000784 	.word	0x20000784
 8004f4c:	20000780 	.word	0x20000780
 8004f50:	20000894 	.word	0x20000894
    		}
    		 else  ConnectWeakFlag=0;
 8004f54:	4bac      	ldr	r3, [pc, #688]	; (8005208 <TIM2_IRQHandler+0xe48>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8004f5a:	4bac      	ldr	r3, [pc, #688]	; (800520c <TIM2_IRQHandler+0xe4c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8004f60:	4bab      	ldr	r3, [pc, #684]	; (8005210 <TIM2_IRQHandler+0xe50>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 6050-----------------------------------------------------------
  MPU6050_GetCurrentFIFOPacket(&hi2c2,MPU6050_ADDRESS,fifoBuffer,packetSize);
 8004f66:	4bab      	ldr	r3, [pc, #684]	; (8005214 <TIM2_IRQHandler+0xe54>)
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4aaa      	ldr	r2, [pc, #680]	; (8005218 <TIM2_IRQHandler+0xe58>)
 8004f6e:	21d0      	movs	r1, #208	; 0xd0
 8004f70:	48aa      	ldr	r0, [pc, #680]	; (800521c <TIM2_IRQHandler+0xe5c>)
 8004f72:	f7fc fccb 	bl	800190c <MPU6050_GetCurrentFIFOPacket>
  CalculateQuaternions(&QuaternionMPU60500,fifoBuffer);
 8004f76:	49a8      	ldr	r1, [pc, #672]	; (8005218 <TIM2_IRQHandler+0xe58>)
 8004f78:	48a9      	ldr	r0, [pc, #676]	; (8005220 <TIM2_IRQHandler+0xe60>)
 8004f7a:	f7fc fead 	bl	8001cd8 <CalculateQuaternions>
  CalculateGravityVector(&QuaternionMPU60500, &GravityVectorMPU6050);
 8004f7e:	49a9      	ldr	r1, [pc, #676]	; (8005224 <TIM2_IRQHandler+0xe64>)
 8004f80:	48a7      	ldr	r0, [pc, #668]	; (8005220 <TIM2_IRQHandler+0xe60>)
 8004f82:	f7fc ff39 	bl	8001df8 <CalculateGravityVector>
  CalculateYawPitchRoll(&QuaternionMPU60500, &GravityVectorMPU6050,&AnglesMPU6050_DMP);
 8004f86:	4aa8      	ldr	r2, [pc, #672]	; (8005228 <TIM2_IRQHandler+0xe68>)
 8004f88:	49a6      	ldr	r1, [pc, #664]	; (8005224 <TIM2_IRQHandler+0xe64>)
 8004f8a:	48a5      	ldr	r0, [pc, #660]	; (8005220 <TIM2_IRQHandler+0xe60>)
 8004f8c:	f7fc ffb6 	bl	8001efc <CalculateYawPitchRoll>

  //Get Gyro registers
  MPU6050_gyroread(&hi2c2,&mpu6050DataStr);
 8004f90:	49a6      	ldr	r1, [pc, #664]	; (800522c <TIM2_IRQHandler+0xe6c>)
 8004f92:	48a2      	ldr	r0, [pc, #648]	; (800521c <TIM2_IRQHandler+0xe5c>)
 8004f94:	f7fc f9b4 	bl	8001300 <MPU6050_gyroread>
  //Calculate angular velocity
  gyroXDegperSecond=(float)(mpu6050DataStr.Gyroscope_X-OFFSETGYROROLL)/GYROCONSTANT;
 8004f98:	4ba4      	ldr	r3, [pc, #656]	; (800522c <TIM2_IRQHandler+0xe6c>)
 8004f9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004f9e:	3309      	adds	r3, #9
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fe7b 	bl	8000c9c <__aeabi_i2f>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	49a1      	ldr	r1, [pc, #644]	; (8005230 <TIM2_IRQHandler+0xe70>)
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb ff7e 	bl	8000eac <__aeabi_fdiv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <TIM2_IRQHandler+0xe74>)
 8004fb6:	601a      	str	r2, [r3, #0]
  gyroYDegperSecond=(float)(mpu6050DataStr.Gyroscope_Y-OFFSETGYROPITCH)/GYROCONSTANT;
 8004fb8:	4b9c      	ldr	r3, [pc, #624]	; (800522c <TIM2_IRQHandler+0xe6c>)
 8004fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fbe:	3325      	adds	r3, #37	; 0x25
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb fe6b 	bl	8000c9c <__aeabi_i2f>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4999      	ldr	r1, [pc, #612]	; (8005230 <TIM2_IRQHandler+0xe70>)
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fb ff6e 	bl	8000eac <__aeabi_fdiv>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b98      	ldr	r3, [pc, #608]	; (8005238 <TIM2_IRQHandler+0xe78>)
 8004fd6:	601a      	str	r2, [r3, #0]
  gyroZDegperSecond=(float)(mpu6050DataStr.Gyroscope_Z-OFFSETGYROYAW)/GYROCONSTANT;
 8004fd8:	4b94      	ldr	r3, [pc, #592]	; (800522c <TIM2_IRQHandler+0xe6c>)
 8004fda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004fde:	3302      	adds	r3, #2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fb fe5b 	bl	8000c9c <__aeabi_i2f>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4991      	ldr	r1, [pc, #580]	; (8005230 <TIM2_IRQHandler+0xe70>)
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb ff5e 	bl	8000eac <__aeabi_fdiv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b91      	ldr	r3, [pc, #580]	; (800523c <TIM2_IRQHandler+0xe7c>)
 8004ff6:	601a      	str	r2, [r3, #0]

  //Pitch Roll Absolute Angle from DMP
  AnglePitch=AnglesMPU6050_DMP.pitch;
 8004ff8:	4b8b      	ldr	r3, [pc, #556]	; (8005228 <TIM2_IRQHandler+0xe68>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a90      	ldr	r2, [pc, #576]	; (8005240 <TIM2_IRQHandler+0xe80>)
 8004ffe:	6013      	str	r3, [r2, #0]
  AngleRoll=AnglesMPU6050_DMP.roll;
 8005000:	4b89      	ldr	r3, [pc, #548]	; (8005228 <TIM2_IRQHandler+0xe68>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a8f      	ldr	r2, [pc, #572]	; (8005244 <TIM2_IRQHandler+0xe84>)
 8005006:	6013      	str	r3, [r2, #0]

  //Yaw Angular velocity from Gyro
  SpeedAngleYaw=-gyroZDegperSecond;  // rotation in left is negative
 8005008:	4b8c      	ldr	r3, [pc, #560]	; (800523c <TIM2_IRQHandler+0xe7c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005010:	4a8d      	ldr	r2, [pc, #564]	; (8005248 <TIM2_IRQHandler+0xe88>)
 8005012:	6013      	str	r3, [r2, #0]
  SpeedAnglePitch=gyroXDegperSecond; //only debug not used in regulation
 8005014:	4b87      	ldr	r3, [pc, #540]	; (8005234 <TIM2_IRQHandler+0xe74>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a8c      	ldr	r2, [pc, #560]	; (800524c <TIM2_IRQHandler+0xe8c>)
 800501a:	6013      	str	r3, [r2, #0]
  SpeedAngleRoll=gyroYDegperSecond;  //only debug not used in regulation
 800501c:	4b86      	ldr	r3, [pc, #536]	; (8005238 <TIM2_IRQHandler+0xe78>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a8b      	ldr	r2, [pc, #556]	; (8005250 <TIM2_IRQHandler+0xe90>)
 8005022:	6013      	str	r3, [r2, #0]


  //PID input Filtered
  PitchPIDin =  (PitchPIDin * 0.95) + (AnglePitch * 0.05);
 8005024:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <TIM2_IRQHandler+0xe94>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb f9fd 	bl	8000428 <__aeabi_f2d>
 800502e:	a372      	add	r3, pc, #456	; (adr r3, 80051f8 <TIM2_IRQHandler+0xe38>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fa50 	bl	80004d8 <__aeabi_dmul>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4625      	mov	r5, r4
 800503e:	461c      	mov	r4, r3
 8005040:	4b7f      	ldr	r3, [pc, #508]	; (8005240 <TIM2_IRQHandler+0xe80>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fb f9ef 	bl	8000428 <__aeabi_f2d>
 800504a:	a36d      	add	r3, pc, #436	; (adr r3, 8005200 <TIM2_IRQHandler+0xe40>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb f886 	bl	800016c <__adddf3>
 8005060:	4603      	mov	r3, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4618      	mov	r0, r3
 8005066:	4621      	mov	r1, r4
 8005068:	f7fb fd0e 	bl	8000a88 <__aeabi_d2f>
 800506c:	4602      	mov	r2, r0
 800506e:	4b79      	ldr	r3, [pc, #484]	; (8005254 <TIM2_IRQHandler+0xe94>)
 8005070:	601a      	str	r2, [r3, #0]
  RollPIDin = (RollPIDin * 0.95) + (AngleRoll * 0.05);
 8005072:	4b79      	ldr	r3, [pc, #484]	; (8005258 <TIM2_IRQHandler+0xe98>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb f9d6 	bl	8000428 <__aeabi_f2d>
 800507c:	a35e      	add	r3, pc, #376	; (adr r3, 80051f8 <TIM2_IRQHandler+0xe38>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb fa29 	bl	80004d8 <__aeabi_dmul>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	4625      	mov	r5, r4
 800508c:	461c      	mov	r4, r3
 800508e:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <TIM2_IRQHandler+0xe84>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb f9c8 	bl	8000428 <__aeabi_f2d>
 8005098:	a359      	add	r3, pc, #356	; (adr r3, 8005200 <TIM2_IRQHandler+0xe40>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb fa1b 	bl	80004d8 <__aeabi_dmul>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4620      	mov	r0, r4
 80050a8:	4629      	mov	r1, r5
 80050aa:	f7fb f85f 	bl	800016c <__adddf3>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	4618      	mov	r0, r3
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7fb fce7 	bl	8000a88 <__aeabi_d2f>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <TIM2_IRQHandler+0xe98>)
 80050be:	601a      	str	r2, [r3, #0]
  YawPIDin = (YawPIDin * 0.95) + (SpeedAngleYaw * 0.05);
 80050c0:	4b66      	ldr	r3, [pc, #408]	; (800525c <TIM2_IRQHandler+0xe9c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb f9af 	bl	8000428 <__aeabi_f2d>
 80050ca:	a34b      	add	r3, pc, #300	; (adr r3, 80051f8 <TIM2_IRQHandler+0xe38>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f7fb fa02 	bl	80004d8 <__aeabi_dmul>
 80050d4:	4603      	mov	r3, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4625      	mov	r5, r4
 80050da:	461c      	mov	r4, r3
 80050dc:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <TIM2_IRQHandler+0xe88>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb f9a1 	bl	8000428 <__aeabi_f2d>
 80050e6:	a346      	add	r3, pc, #280	; (adr r3, 8005200 <TIM2_IRQHandler+0xe40>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb f9f4 	bl	80004d8 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb f838 	bl	800016c <__adddf3>
 80050fc:	4603      	mov	r3, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	4618      	mov	r0, r3
 8005102:	4621      	mov	r1, r4
 8005104:	f7fb fcc0 	bl	8000a88 <__aeabi_d2f>
 8005108:	4602      	mov	r2, r0
 800510a:	4b54      	ldr	r3, [pc, #336]	; (800525c <TIM2_IRQHandler+0xe9c>)
 800510c:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA
  //Throttle UP->DOWN 0-100 ->scaling
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,FlashDataActive.minthrottle,FlashDataActive.maxthrottle);
 800510e:	4b54      	ldr	r3, [pc, #336]	; (8005260 <TIM2_IRQHandler+0xea0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb fdbe 	bl	8000c94 <__aeabi_ui2f>
 8005118:	4b52      	ldr	r3, [pc, #328]	; (8005264 <TIM2_IRQHandler+0xea4>)
 800511a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800511c:	4b51      	ldr	r3, [pc, #324]	; (8005264 <TIM2_IRQHandler+0xea4>)
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	4a50      	ldr	r2, [pc, #320]	; (8005268 <TIM2_IRQHandler+0xea8>)
 8005126:	f04f 0100 	mov.w	r1, #0
 800512a:	f000 fbaf 	bl	800588c <ScaleDataFl>
 800512e:	4602      	mov	r2, r0
 8005130:	4b4e      	ldr	r3, [pc, #312]	; (800526c <TIM2_IRQHandler+0xeac>)
 8005132:	601a      	str	r2, [r3, #0]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-FlashDataActive.maxpitchdegree,FlashDataActive.maxpitchdegree);
 8005134:	4b4e      	ldr	r3, [pc, #312]	; (8005270 <TIM2_IRQHandler+0xeb0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb fdab 	bl	8000c94 <__aeabi_ui2f>
 800513e:	4b49      	ldr	r3, [pc, #292]	; (8005264 <TIM2_IRQHandler+0xea4>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <TIM2_IRQHandler+0xea4>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	4a46      	ldr	r2, [pc, #280]	; (8005268 <TIM2_IRQHandler+0xea8>)
 8005150:	f04f 0100 	mov.w	r1, #0
 8005154:	f000 fb9a 	bl	800588c <ScaleDataFl>
 8005158:	4602      	mov	r2, r0
 800515a:	4b46      	ldr	r3, [pc, #280]	; (8005274 <TIM2_IRQHandler+0xeb4>)
 800515c:	601a      	str	r2, [r3, #0]
  //Invert
  PitchINscaled*=(-1);
 800515e:	4b45      	ldr	r3, [pc, #276]	; (8005274 <TIM2_IRQHandler+0xeb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005166:	4a43      	ldr	r2, [pc, #268]	; (8005274 <TIM2_IRQHandler+0xeb4>)
 8005168:	6013      	str	r3, [r2, #0]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-FlashDataActive.maxrolldegree,FlashDataActive.maxrolldegree);
 800516a:	4b43      	ldr	r3, [pc, #268]	; (8005278 <TIM2_IRQHandler+0xeb8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb fd90 	bl	8000c94 <__aeabi_ui2f>
 8005174:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <TIM2_IRQHandler+0xea4>)
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800517c:	4b39      	ldr	r3, [pc, #228]	; (8005264 <TIM2_IRQHandler+0xea4>)
 800517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	4a38      	ldr	r2, [pc, #224]	; (8005268 <TIM2_IRQHandler+0xea8>)
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	f000 fb7f 	bl	800588c <ScaleDataFl>
 800518e:	4602      	mov	r2, r0
 8005190:	4b3a      	ldr	r3, [pc, #232]	; (800527c <TIM2_IRQHandler+0xebc>)
 8005192:	601a      	str	r2, [r3, #0]

  //YAW angular speed of rotation degrees/second
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-FlashDataActive.maxyawdegree,FlashDataActive.maxyawdegree);
 8005194:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <TIM2_IRQHandler+0xec0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb fd7b 	bl	8000c94 <__aeabi_ui2f>
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	4a2e      	ldr	r2, [pc, #184]	; (8005268 <TIM2_IRQHandler+0xea8>)
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f000 fb6a 	bl	800588c <ScaleDataFl>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b32      	ldr	r3, [pc, #200]	; (8005284 <TIM2_IRQHandler+0xec4>)
 80051bc:	601a      	str	r2, [r3, #0]

  //MOTOR CONTROL

  //PID
  PitchPIDout = pid(PitchINscaled, PitchPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 80051be:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <TIM2_IRQHandler+0xeb4>)
 80051c0:	681d      	ldr	r5, [r3, #0]
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <TIM2_IRQHandler+0xe94>)
 80051c4:	681e      	ldr	r6, [r3, #0]
 80051c6:	4b27      	ldr	r3, [pc, #156]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051ce:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051d4:	68dc      	ldr	r4, [r3, #12]
 80051d6:	4b23      	ldr	r3, [pc, #140]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb fd5e 	bl	8000c9c <__aeabi_i2f>
 80051e0:	4682      	mov	sl, r0
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <TIM2_IRQHandler+0xea4>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb fd58 	bl	8000c9c <__aeabi_i2f>
 80051ec:	4603      	mov	r3, r0
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	e04a      	b.n	8005288 <TIM2_IRQHandler+0xec8>
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	66666666 	.word	0x66666666
 80051fc:	3fee6666 	.word	0x3fee6666
 8005200:	9999999a 	.word	0x9999999a
 8005204:	3fa99999 	.word	0x3fa99999
 8005208:	20000894 	.word	0x20000894
 800520c:	2000069c 	.word	0x2000069c
 8005210:	20000684 	.word	0x20000684
 8005214:	20000000 	.word	0x20000000
 8005218:	20000340 	.word	0x20000340
 800521c:	200002c4 	.word	0x200002c4
 8005220:	20000380 	.word	0x20000380
 8005224:	20000254 	.word	0x20000254
 8005228:	2000055c 	.word	0x2000055c
 800522c:	2000060c 	.word	0x2000060c
 8005230:	41833333 	.word	0x41833333
 8005234:	20000880 	.word	0x20000880
 8005238:	2000086c 	.word	0x2000086c
 800523c:	20000900 	.word	0x20000900
 8005240:	20000854 	.word	0x20000854
 8005244:	20000910 	.word	0x20000910
 8005248:	2000077c 	.word	0x2000077c
 800524c:	20000920 	.word	0x20000920
 8005250:	20000788 	.word	0x20000788
 8005254:	200008ec 	.word	0x200008ec
 8005258:	20000868 	.word	0x20000868
 800525c:	20000860 	.word	0x20000860
 8005260:	20000558 	.word	0x20000558
 8005264:	20000570 	.word	0x20000570
 8005268:	42c80000 	.word	0x42c80000
 800526c:	20000690 	.word	0x20000690
 8005270:	2000066c 	.word	0x2000066c
 8005274:	2000087c 	.word	0x2000087c
 8005278:	20000250 	.word	0x20000250
 800527c:	20000878 	.word	0x20000878
 8005280:	200004b8 	.word	0x200004b8
 8005284:	200006a8 	.word	0x200006a8
 8005288:	f8cd a00c 	str.w	sl, [sp, #12]
 800528c:	4b95      	ldr	r3, [pc, #596]	; (80054e4 <TIM2_IRQHandler+0x1124>)
 800528e:	9302      	str	r3, [sp, #8]
 8005290:	4b95      	ldr	r3, [pc, #596]	; (80054e8 <TIM2_IRQHandler+0x1128>)
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	9400      	str	r4, [sp, #0]
 8005296:	464b      	mov	r3, r9
 8005298:	4642      	mov	r2, r8
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	f000 fb2b 	bl	80058f8 <pid>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b91      	ldr	r3, [pc, #580]	; (80054ec <TIM2_IRQHandler+0x112c>)
 80052a6:	601a      	str	r2, [r3, #0]
  RollPIDout = pid(RollINscaled, RollPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 80052a8:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <TIM2_IRQHandler+0x1130>)
 80052aa:	681d      	ldr	r5, [r3, #0]
 80052ac:	4b91      	ldr	r3, [pc, #580]	; (80054f4 <TIM2_IRQHandler+0x1134>)
 80052ae:	681e      	ldr	r6, [r3, #0]
 80052b0:	4b91      	ldr	r3, [pc, #580]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 80052b2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80052b6:	4b90      	ldr	r3, [pc, #576]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 80052b8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80052bc:	4b8e      	ldr	r3, [pc, #568]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 80052be:	699c      	ldr	r4, [r3, #24]
 80052c0:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fb fce9 	bl	8000c9c <__aeabi_i2f>
 80052ca:	4682      	mov	sl, r0
 80052cc:	4b8a      	ldr	r3, [pc, #552]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb fce3 	bl	8000c9c <__aeabi_i2f>
 80052d6:	4603      	mov	r3, r0
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	f8cd a00c 	str.w	sl, [sp, #12]
 80052de:	4b87      	ldr	r3, [pc, #540]	; (80054fc <TIM2_IRQHandler+0x113c>)
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	4b87      	ldr	r3, [pc, #540]	; (8005500 <TIM2_IRQHandler+0x1140>)
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	9400      	str	r4, [sp, #0]
 80052e8:	464b      	mov	r3, r9
 80052ea:	4642      	mov	r2, r8
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fb02 	bl	80058f8 <pid>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b83      	ldr	r3, [pc, #524]	; (8005504 <TIM2_IRQHandler+0x1144>)
 80052f8:	601a      	str	r2, [r3, #0]
  YawPIDout = pid(YawINscaled, YawPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 80052fa:	4b83      	ldr	r3, [pc, #524]	; (8005508 <TIM2_IRQHandler+0x1148>)
 80052fc:	681d      	ldr	r5, [r3, #0]
 80052fe:	4b83      	ldr	r3, [pc, #524]	; (800550c <TIM2_IRQHandler+0x114c>)
 8005300:	681e      	ldr	r6, [r3, #0]
 8005302:	4b7d      	ldr	r3, [pc, #500]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 8005304:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8005308:	4b7b      	ldr	r3, [pc, #492]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 800530a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800530e:	4b7a      	ldr	r3, [pc, #488]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 8005310:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005312:	4b79      	ldr	r3, [pc, #484]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb fcc0 	bl	8000c9c <__aeabi_i2f>
 800531c:	4682      	mov	sl, r0
 800531e:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb fcba 	bl	8000c9c <__aeabi_i2f>
 8005328:	4603      	mov	r3, r0
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	f8cd a00c 	str.w	sl, [sp, #12]
 8005330:	4b77      	ldr	r3, [pc, #476]	; (8005510 <TIM2_IRQHandler+0x1150>)
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	4b77      	ldr	r3, [pc, #476]	; (8005514 <TIM2_IRQHandler+0x1154>)
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	9400      	str	r4, [sp, #0]
 800533a:	464b      	mov	r3, r9
 800533c:	4642      	mov	r2, r8
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	f000 fad9 	bl	80058f8 <pid>
 8005346:	4602      	mov	r2, r0
 8005348:	4b73      	ldr	r3, [pc, #460]	; (8005518 <TIM2_IRQHandler+0x1158>)
 800534a:	601a      	str	r2, [r3, #0]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 800534c:	4b73      	ldr	r3, [pc, #460]	; (800551c <TIM2_IRQHandler+0x115c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d102      	bne.n	800535a <TIM2_IRQHandler+0xf9a>
 8005354:	4b72      	ldr	r3, [pc, #456]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 800535a:	4b72      	ldr	r3, [pc, #456]	; (8005524 <TIM2_IRQHandler+0x1164>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b72      	ldr	r3, [pc, #456]	; (8005528 <TIM2_IRQHandler+0x1168>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d00f      	beq.n	8005386 <TIM2_IRQHandler+0xfc6>
 8005366:	4b70      	ldr	r3, [pc, #448]	; (8005528 <TIM2_IRQHandler+0x1168>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10b      	bne.n	8005386 <TIM2_IRQHandler+0xfc6>
 800536e:	4b6f      	ldr	r3, [pc, #444]	; (800552c <TIM2_IRQHandler+0x116c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	496f      	ldr	r1, [pc, #444]	; (8005530 <TIM2_IRQHandler+0x1170>)
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb fe83 	bl	8001080 <__aeabi_fcmplt>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <TIM2_IRQHandler+0xfc6>
 8005380:	4b67      	ldr	r3, [pc, #412]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005382:	2202      	movs	r2, #2
 8005384:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 8005386:	4b68      	ldr	r3, [pc, #416]	; (8005528 <TIM2_IRQHandler+0x1168>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <TIM2_IRQHandler+0xfd4>
 800538e:	4b64      	ldr	r3, [pc, #400]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8005394:	4b67      	ldr	r3, [pc, #412]	; (8005534 <TIM2_IRQHandler+0x1174>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11a      	bne.n	80053d2 <TIM2_IRQHandler+0x1012>
 800539c:	4b66      	ldr	r3, [pc, #408]	; (8005538 <TIM2_IRQHandler+0x1178>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d116      	bne.n	80053d2 <TIM2_IRQHandler+0x1012>
 80053a4:	4b65      	ldr	r3, [pc, #404]	; (800553c <TIM2_IRQHandler+0x117c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d112      	bne.n	80053d2 <TIM2_IRQHandler+0x1012>
 80053ac:	4b5c      	ldr	r3, [pc, #368]	; (8005520 <TIM2_IRQHandler+0x1160>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10e      	bne.n	80053d2 <TIM2_IRQHandler+0x1012>
  {
	  GyroCalibStatus=1;
 80053b4:	4b61      	ldr	r3, [pc, #388]	; (800553c <TIM2_IRQHandler+0x117c>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
	  SUMGyroX=0;
 80053ba:	4b61      	ldr	r3, [pc, #388]	; (8005540 <TIM2_IRQHandler+0x1180>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
	  SUMGyroY=0;
 80053c0:	4b60      	ldr	r3, [pc, #384]	; (8005544 <TIM2_IRQHandler+0x1184>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	  SUMGyroZ=0;
 80053c6:	4b60      	ldr	r3, [pc, #384]	; (8005548 <TIM2_IRQHandler+0x1188>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
	  Gyrocalibcount=0;
 80053cc:	4b5f      	ldr	r3, [pc, #380]	; (800554c <TIM2_IRQHandler+0x118c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
  }

  //Write and Erase Flash operation timeout to prevent multiple calls in sequence
  if(FlashWriteTimeoutCount>0)FlashWriteTimeoutCount--;
 80053d2:	4b5f      	ldr	r3, [pc, #380]	; (8005550 <TIM2_IRQHandler+0x1190>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <TIM2_IRQHandler+0x1024>
 80053da:	4b5d      	ldr	r3, [pc, #372]	; (8005550 <TIM2_IRQHandler+0x1190>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3b01      	subs	r3, #1
 80053e0:	4a5b      	ldr	r2, [pc, #364]	; (8005550 <TIM2_IRQHandler+0x1190>)
 80053e2:	6013      	str	r3, [r2, #0]
  if(FlashEraseTimeoutCount>0)FlashEraseTimeoutCount--;
 80053e4:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <TIM2_IRQHandler+0x1194>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <TIM2_IRQHandler+0x1036>
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <TIM2_IRQHandler+0x1194>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	4a58      	ldr	r2, [pc, #352]	; (8005554 <TIM2_IRQHandler+0x1194>)
 80053f4:	6013      	str	r3, [r2, #0]

  //Write active parameters in flash
  if(FlashWriteFlag && MotorStatus==MOTOROFF && FlashWriteTimeoutCount==0)
 80053f6:	4b58      	ldr	r3, [pc, #352]	; (8005558 <TIM2_IRQHandler+0x1198>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d017      	beq.n	800542e <TIM2_IRQHandler+0x106e>
 80053fe:	4b48      	ldr	r3, [pc, #288]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d113      	bne.n	800542e <TIM2_IRQHandler+0x106e>
 8005406:	4b52      	ldr	r3, [pc, #328]	; (8005550 <TIM2_IRQHandler+0x1190>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <TIM2_IRQHandler+0x106e>
  {
	  WriteFlashData(FLASHCONSTADDR, &FlashDataActive);
 800540e:	493a      	ldr	r1, [pc, #232]	; (80054f8 <TIM2_IRQHandler+0x1138>)
 8005410:	4852      	ldr	r0, [pc, #328]	; (800555c <TIM2_IRQHandler+0x119c>)
 8005412:	f7fd ff5d 	bl	80032d0 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);//Read back values to Flash structure
 8005416:	4952      	ldr	r1, [pc, #328]	; (8005560 <TIM2_IRQHandler+0x11a0>)
 8005418:	4850      	ldr	r0, [pc, #320]	; (800555c <TIM2_IRQHandler+0x119c>)
 800541a:	f7fe f909 	bl	8003630 <ReadFlashData>
	  FlashWriteFlag=0;//reset
 800541e:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <TIM2_IRQHandler+0x1198>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
	  watch1++;
 8005424:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <TIM2_IRQHandler+0x11a4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <TIM2_IRQHandler+0x11a4>)
 800542c:	6013      	str	r3, [r2, #0]
  }

  //Erase Flash Data
  if(FlashEraseFlag && MotorStatus==MOTOROFF && FlashEraseTimeoutCount==0)
 800542e:	4b4e      	ldr	r3, [pc, #312]	; (8005568 <TIM2_IRQHandler+0x11a8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d012      	beq.n	800545c <TIM2_IRQHandler+0x109c>
 8005436:	4b3a      	ldr	r3, [pc, #232]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10e      	bne.n	800545c <TIM2_IRQHandler+0x109c>
 800543e:	4b45      	ldr	r3, [pc, #276]	; (8005554 <TIM2_IRQHandler+0x1194>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <TIM2_IRQHandler+0x109c>
  {
	  EraseFlashData(FLASHCONSTADDR);
 8005446:	4845      	ldr	r0, [pc, #276]	; (800555c <TIM2_IRQHandler+0x119c>)
 8005448:	f7fe f8cc 	bl	80035e4 <EraseFlashData>
	  FlashEraseFlag=0;//reset
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <TIM2_IRQHandler+0x11a8>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
	  watch2++;
 8005452:	4b46      	ldr	r3, [pc, #280]	; (800556c <TIM2_IRQHandler+0x11ac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	4a44      	ldr	r2, [pc, #272]	; (800556c <TIM2_IRQHandler+0x11ac>)
 800545a:	6013      	str	r3, [r2, #0]
  }

  if(GyroCalibStatus==1)
 800545c:	4b37      	ldr	r3, [pc, #220]	; (800553c <TIM2_IRQHandler+0x117c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d102      	bne.n	800546a <TIM2_IRQHandler+0x10aa>
  {
	 GyroCalibStatus=0;
 8005464:	4b35      	ldr	r3, [pc, #212]	; (800553c <TIM2_IRQHandler+0x117c>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 800546a:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <TIM2_IRQHandler+0x1160>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d106      	bne.n	8005480 <TIM2_IRQHandler+0x10c0>
  {

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 8005472:	4b32      	ldr	r3, [pc, #200]	; (800553c <TIM2_IRQHandler+0x117c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <TIM2_IRQHandler+0x10c0>
	  MotorStatus=MOTORRUNNING;
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <TIM2_IRQHandler+0x1160>)
 800547c:	2203      	movs	r2, #3
 800547e:	601a      	str	r2, [r3, #0]

  //MOT 1 FRONT LEFT  CW
  //MOT 2 FRONT RIGHT CCW
  //MOT 3 BACK  RIGHT CW
  //MOT 4 BACK  LEFT  CCW
  switch(MotorStatus)
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <TIM2_IRQHandler+0x1160>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b03      	cmp	r3, #3
 8005486:	f040 81a1 	bne.w	80057cc <TIM2_IRQHandler+0x140c>
  {
  	  case MOTORRUNNING:
  	  	  	  {
  	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - PitchPIDout - RollPIDout + YawPIDout;
 800548a:	4b28      	ldr	r3, [pc, #160]	; (800552c <TIM2_IRQHandler+0x116c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4938      	ldr	r1, [pc, #224]	; (8005570 <TIM2_IRQHandler+0x11b0>)
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb fb4f 	bl	8000b34 <__addsf3>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <TIM2_IRQHandler+0x112c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7fb fb45 	bl	8000b30 <__aeabi_fsub>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b16      	ldr	r3, [pc, #88]	; (8005504 <TIM2_IRQHandler+0x1144>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fb fb3d 	bl	8000b30 <__aeabi_fsub>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <TIM2_IRQHandler+0x1158>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fb fb37 	bl	8000b34 <__addsf3>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fe01 	bl	80010d0 <__aeabi_f2uiz>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <TIM2_IRQHandler+0x11b4>)
 80054d2:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - PitchPIDout + RollPIDout - YawPIDout;
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <TIM2_IRQHandler+0x116c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4925      	ldr	r1, [pc, #148]	; (8005570 <TIM2_IRQHandler+0x11b0>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb fb2a 	bl	8000b34 <__addsf3>
 80054e0:	e04a      	b.n	8005578 <TIM2_IRQHandler+0x11b8>
 80054e2:	bf00      	nop
 80054e4:	20000230 	.word	0x20000230
 80054e8:	2000022c 	.word	0x2000022c
 80054ec:	20000918 	.word	0x20000918
 80054f0:	20000878 	.word	0x20000878
 80054f4:	20000868 	.word	0x20000868
 80054f8:	20000570 	.word	0x20000570
 80054fc:	20000238 	.word	0x20000238
 8005500:	20000234 	.word	0x20000234
 8005504:	20000874 	.word	0x20000874
 8005508:	200006a8 	.word	0x200006a8
 800550c:	20000860 	.word	0x20000860
 8005510:	20000240 	.word	0x20000240
 8005514:	2000023c 	.word	0x2000023c
 8005518:	2000091c 	.word	0x2000091c
 800551c:	20000894 	.word	0x20000894
 8005520:	2000020c 	.word	0x2000020c
 8005524:	20000928 	.word	0x20000928
 8005528:	20000510 	.word	0x20000510
 800552c:	20000690 	.word	0x20000690
 8005530:	43480000 	.word	0x43480000
 8005534:	20000888 	.word	0x20000888
 8005538:	20000678 	.word	0x20000678
 800553c:	20000210 	.word	0x20000210
 8005540:	2000067c 	.word	0x2000067c
 8005544:	20000514 	.word	0x20000514
 8005548:	20000464 	.word	0x20000464
 800554c:	20000228 	.word	0x20000228
 8005550:	20000914 	.word	0x20000914
 8005554:	20000698 	.word	0x20000698
 8005558:	20000908 	.word	0x20000908
 800555c:	0800fc00 	.word	0x0800fc00
 8005560:	20000618 	.word	0x20000618
 8005564:	200003f4 	.word	0x200003f4
 8005568:	2000068c 	.word	0x2000068c
 800556c:	200003e4 	.word	0x200003e4
 8005570:	447a0000 	.word	0x447a0000
 8005574:	20000890 	.word	0x20000890
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	4b89      	ldr	r3, [pc, #548]	; (80057a4 <TIM2_IRQHandler+0x13e4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fb fad4 	bl	8000b30 <__aeabi_fsub>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	4b86      	ldr	r3, [pc, #536]	; (80057a8 <TIM2_IRQHandler+0x13e8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fb face 	bl	8000b34 <__addsf3>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	4b83      	ldr	r3, [pc, #524]	; (80057ac <TIM2_IRQHandler+0x13ec>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fb fac4 	bl	8000b30 <__aeabi_fsub>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fd90 	bl	80010d0 <__aeabi_f2uiz>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b7f      	ldr	r3, [pc, #508]	; (80057b0 <TIM2_IRQHandler+0x13f0>)
 80055b4:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + PitchPIDout + RollPIDout + YawPIDout;
 80055b6:	4b7f      	ldr	r3, [pc, #508]	; (80057b4 <TIM2_IRQHandler+0x13f4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	497f      	ldr	r1, [pc, #508]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fb fab9 	bl	8000b34 <__addsf3>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b77      	ldr	r3, [pc, #476]	; (80057a4 <TIM2_IRQHandler+0x13e4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fb fab1 	bl	8000b34 <__addsf3>
 80055d2:	4603      	mov	r3, r0
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b74      	ldr	r3, [pc, #464]	; (80057a8 <TIM2_IRQHandler+0x13e8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fb faa9 	bl	8000b34 <__addsf3>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b71      	ldr	r3, [pc, #452]	; (80057ac <TIM2_IRQHandler+0x13ec>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fb faa1 	bl	8000b34 <__addsf3>
 80055f2:	4603      	mov	r3, r0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fd6b 	bl	80010d0 <__aeabi_f2uiz>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <TIM2_IRQHandler+0x13fc>)
 80055fe:	601a      	str	r2, [r3, #0]
  	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + PitchPIDout - RollPIDout - YawPIDout;
 8005600:	4b6c      	ldr	r3, [pc, #432]	; (80057b4 <TIM2_IRQHandler+0x13f4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	496c      	ldr	r1, [pc, #432]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 8005606:	4618      	mov	r0, r3
 8005608:	f7fb fa94 	bl	8000b34 <__addsf3>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <TIM2_IRQHandler+0x13e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7fb fa8c 	bl	8000b34 <__addsf3>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <TIM2_IRQHandler+0x13e8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fb fa82 	bl	8000b30 <__aeabi_fsub>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <TIM2_IRQHandler+0x13ec>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fb fa7a 	bl	8000b30 <__aeabi_fsub>
 800563c:	4603      	mov	r3, r0
 800563e:	4618      	mov	r0, r3
 8005640:	f7fb fd46 	bl	80010d0 <__aeabi_f2uiz>
 8005644:	4602      	mov	r2, r0
 8005646:	4b5e      	ldr	r3, [pc, #376]	; (80057c0 <TIM2_IRQHandler+0x1400>)
 8005648:	601a      	str	r2, [r3, #0]

  	  		  	  //MIN OBRATI
  	  		  	  if(PWM_Mot1 < (1000+ FlashDataActive.minthrottle))PWM_Mot1=(1000+ FlashDataActive.minthrottle);
 800564a:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <TIM2_IRQHandler+0x1404>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fb fb20 	bl	8000c94 <__aeabi_ui2f>
 8005654:	4604      	mov	r4, r0
 8005656:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	4957      	ldr	r1, [pc, #348]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 800565c:	4618      	mov	r0, r3
 800565e:	f7fb fa69 	bl	8000b34 <__addsf3>
 8005662:	4603      	mov	r3, r0
 8005664:	4619      	mov	r1, r3
 8005666:	4620      	mov	r0, r4
 8005668:	f7fb fd0a 	bl	8001080 <__aeabi_fcmplt>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <TIM2_IRQHandler+0x12cc>
 8005672:	4b55      	ldr	r3, [pc, #340]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	4950      	ldr	r1, [pc, #320]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fa5b 	bl	8000b34 <__addsf3>
 800567e:	4603      	mov	r3, r0
 8005680:	4618      	mov	r0, r3
 8005682:	f7fb fd25 	bl	80010d0 <__aeabi_f2uiz>
 8005686:	4602      	mov	r2, r0
 8005688:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <TIM2_IRQHandler+0x1404>)
 800568a:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 < (1000+ FlashDataActive.minthrottle))PWM_Mot2=(1000+ FlashDataActive.minthrottle);
 800568c:	4b48      	ldr	r3, [pc, #288]	; (80057b0 <TIM2_IRQHandler+0x13f0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fb faff 	bl	8000c94 <__aeabi_ui2f>
 8005696:	4604      	mov	r4, r0
 8005698:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 800569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569c:	4946      	ldr	r1, [pc, #280]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fb fa48 	bl	8000b34 <__addsf3>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4619      	mov	r1, r3
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fb fce9 	bl	8001080 <__aeabi_fcmplt>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00c      	beq.n	80056ce <TIM2_IRQHandler+0x130e>
 80056b4:	4b44      	ldr	r3, [pc, #272]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	493f      	ldr	r1, [pc, #252]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fb fa3a 	bl	8000b34 <__addsf3>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fb fd04 	bl	80010d0 <__aeabi_f2uiz>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <TIM2_IRQHandler+0x13f0>)
 80056cc:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 < (1000+ FlashDataActive.minthrottle))PWM_Mot3=(1000+ FlashDataActive.minthrottle);
 80056ce:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <TIM2_IRQHandler+0x13fc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb fade 	bl	8000c94 <__aeabi_ui2f>
 80056d8:	4604      	mov	r4, r0
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	4936      	ldr	r1, [pc, #216]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fb fa27 	bl	8000b34 <__addsf3>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4619      	mov	r1, r3
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7fb fcc8 	bl	8001080 <__aeabi_fcmplt>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00c      	beq.n	8005710 <TIM2_IRQHandler+0x1350>
 80056f6:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	492f      	ldr	r1, [pc, #188]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fb fa19 	bl	8000b34 <__addsf3>
 8005702:	4603      	mov	r3, r0
 8005704:	4618      	mov	r0, r3
 8005706:	f7fb fce3 	bl	80010d0 <__aeabi_f2uiz>
 800570a:	4602      	mov	r2, r0
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <TIM2_IRQHandler+0x13fc>)
 800570e:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 < (1000+ FlashDataActive.minthrottle))PWM_Mot4=(1000+ FlashDataActive.minthrottle);
 8005710:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <TIM2_IRQHandler+0x1400>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fb fabd 	bl	8000c94 <__aeabi_ui2f>
 800571a:	4604      	mov	r4, r0
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 800571e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005720:	4925      	ldr	r1, [pc, #148]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 8005722:	4618      	mov	r0, r3
 8005724:	f7fb fa06 	bl	8000b34 <__addsf3>
 8005728:	4603      	mov	r3, r0
 800572a:	4619      	mov	r1, r3
 800572c:	4620      	mov	r0, r4
 800572e:	f7fb fca7 	bl	8001080 <__aeabi_fcmplt>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <TIM2_IRQHandler+0x1392>
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <TIM2_IRQHandler+0x1408>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	491e      	ldr	r1, [pc, #120]	; (80057b8 <TIM2_IRQHandler+0x13f8>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fb f9f8 	bl	8000b34 <__addsf3>
 8005744:	4603      	mov	r3, r0
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fcc2 	bl	80010d0 <__aeabi_f2uiz>
 800574c:	4602      	mov	r2, r0
 800574e:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <TIM2_IRQHandler+0x1400>)
 8005750:	601a      	str	r2, [r3, #0]

			  	  //MAX OBRATI
	  	  		  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <TIM2_IRQHandler+0x1404>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f240 729e 	movw	r2, #1950	; 0x79e
 800575a:	4293      	cmp	r3, r2
 800575c:	d903      	bls.n	8005766 <TIM2_IRQHandler+0x13a6>
 800575e:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <TIM2_IRQHandler+0x1404>)
 8005760:	f240 729e 	movw	r2, #1950	; 0x79e
 8005764:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <TIM2_IRQHandler+0x13f0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f240 729e 	movw	r2, #1950	; 0x79e
 800576e:	4293      	cmp	r3, r2
 8005770:	d903      	bls.n	800577a <TIM2_IRQHandler+0x13ba>
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <TIM2_IRQHandler+0x13f0>)
 8005774:	f240 729e 	movw	r2, #1950	; 0x79e
 8005778:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <TIM2_IRQHandler+0x13fc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f240 729e 	movw	r2, #1950	; 0x79e
 8005782:	4293      	cmp	r3, r2
 8005784:	d903      	bls.n	800578e <TIM2_IRQHandler+0x13ce>
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <TIM2_IRQHandler+0x13fc>)
 8005788:	f240 729e 	movw	r2, #1950	; 0x79e
 800578c:	601a      	str	r2, [r3, #0]
				  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <TIM2_IRQHandler+0x1400>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f240 729e 	movw	r2, #1950	; 0x79e
 8005796:	4293      	cmp	r3, r2
 8005798:	d941      	bls.n	800581e <TIM2_IRQHandler+0x145e>
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <TIM2_IRQHandler+0x1400>)
 800579c:	f240 729e 	movw	r2, #1950	; 0x79e
 80057a0:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 80057a2:	e03c      	b.n	800581e <TIM2_IRQHandler+0x145e>
 80057a4:	20000918 	.word	0x20000918
 80057a8:	20000874 	.word	0x20000874
 80057ac:	2000091c 	.word	0x2000091c
 80057b0:	20000694 	.word	0x20000694
 80057b4:	20000690 	.word	0x20000690
 80057b8:	447a0000 	.word	0x447a0000
 80057bc:	20000688 	.word	0x20000688
 80057c0:	20000858 	.word	0x20000858
 80057c4:	20000890 	.word	0x20000890
 80057c8:	20000570 	.word	0x20000570

  	  default:
  	  	  	  {
  	  	  		  PWM_Mot1=900;
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <TIM2_IRQHandler+0x149c>)
 80057ce:	f44f 7261 	mov.w	r2, #900	; 0x384
 80057d2:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot2=900;
 80057d4:	4b22      	ldr	r3, [pc, #136]	; (8005860 <TIM2_IRQHandler+0x14a0>)
 80057d6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80057da:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot3=900;
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <TIM2_IRQHandler+0x14a4>)
 80057de:	f44f 7261 	mov.w	r2, #900	; 0x384
 80057e2:	601a      	str	r2, [r3, #0]
  		  	  	  PWM_Mot4=900;
 80057e4:	4b20      	ldr	r3, [pc, #128]	; (8005868 <TIM2_IRQHandler+0x14a8>)
 80057e6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80057ea:	601a      	str	r2, [r3, #0]

  		  	  	  //Reset PID
  		  	  	  pitch_integral=0;
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <TIM2_IRQHandler+0x14ac>)
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
  		  	  	  pitch_diffErrHist=0;
 80057f4:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <TIM2_IRQHandler+0x14b0>)
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
  		  	  	  roll_integral=0;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <TIM2_IRQHandler+0x14b4>)
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
  		  	  	  roll_diffErrHist=0;
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <TIM2_IRQHandler+0x14b8>)
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_integral=0;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <TIM2_IRQHandler+0x14bc>)
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
  		  	  	  yaw_diffErrHist=0;
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <TIM2_IRQHandler+0x14c0>)
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

  	  	  	  }break;
 800581c:	e000      	b.n	8005820 <TIM2_IRQHandler+0x1460>
  	  	  	  }break;
 800581e:	bf00      	nop
  }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <TIM2_IRQHandler+0x14c4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0d      	ldr	r2, [pc, #52]	; (800585c <TIM2_IRQHandler+0x149c>)
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <TIM2_IRQHandler+0x14c4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <TIM2_IRQHandler+0x14a0>)
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <TIM2_IRQHandler+0x14c4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <TIM2_IRQHandler+0x14a4>)
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <TIM2_IRQHandler+0x14c4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <TIM2_IRQHandler+0x14a8>)
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(TEST1_PIN_GPIO_Port,TEST1_PIN_Pin,GPIO_PIN_RESET);
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800584e:	480e      	ldr	r0, [pc, #56]	; (8005888 <TIM2_IRQHandler+0x14c8>)
 8005850:	f001 faea 	bl	8006e28 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 1 */
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	20000890 	.word	0x20000890
 8005860:	20000694 	.word	0x20000694
 8005864:	20000688 	.word	0x20000688
 8005868:	20000858 	.word	0x20000858
 800586c:	2000022c 	.word	0x2000022c
 8005870:	20000230 	.word	0x20000230
 8005874:	20000234 	.word	0x20000234
 8005878:	20000238 	.word	0x20000238
 800587c:	2000023c 	.word	0x2000023c
 8005880:	20000240 	.word	0x20000240
 8005884:	20000518 	.word	0x20000518
 8005888:	40010c00 	.word	0x40010c00

0800588c <ScaleDataFl>:

/* USER CODE BEGIN 1 */
float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589e:	f7fb f947 	bl	8000b30 <__aeabi_fsub>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461c      	mov	r4, r3
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fb f941 	bl	8000b30 <__aeabi_fsub>
 80058ae:	4603      	mov	r3, r0
 80058b0:	4619      	mov	r1, r3
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7fb fafa 	bl	8000eac <__aeabi_fdiv>
 80058b8:	4603      	mov	r3, r0
 80058ba:	613b      	str	r3, [r7, #16]
	out=(in_value-in_min)*factor+out_min;
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7fb f936 	bl	8000b30 <__aeabi_fsub>
 80058c4:	4603      	mov	r3, r0
 80058c6:	6939      	ldr	r1, [r7, #16]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fb fa3b 	bl	8000d44 <__aeabi_fmul>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4619      	mov	r1, r3
 80058d2:	6838      	ldr	r0, [r7, #0]
 80058d4:	f7fb f92e 	bl	8000b34 <__addsf3>
 80058d8:	4603      	mov	r3, r0
 80058da:	617b      	str	r3, [r7, #20]
	if(out<out_min)out=out_min;
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6978      	ldr	r0, [r7, #20]
 80058e0:	f7fb fbce 	bl	8001080 <__aeabi_fcmplt>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <ScaleDataFl+0x62>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	617b      	str	r3, [r7, #20]

	return out;
 80058ee:	697b      	ldr	r3, [r7, #20]

}
 80058f0:	4618      	mov	r0, r3
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd90      	pop	{r4, r7, pc}

080058f8 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f7fb f911 	bl	8000b30 <__aeabi_fsub>
 800590e:	4603      	mov	r3, r0
 8005910:	613b      	str	r3, [r7, #16]

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	6939      	ldr	r1, [r7, #16]
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f7fb fa13 	bl	8000d44 <__aeabi_fmul>
 800591e:	4603      	mov	r3, r0
 8005920:	4619      	mov	r1, r3
 8005922:	4620      	mov	r0, r4
 8005924:	f7fb f906 	bl	8000b34 <__addsf3>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	601a      	str	r2, [r3, #0]
	if(*integral > PIDimax)*integral = PIDimax;
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4619      	mov	r1, r3
 8005936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005938:	f7fb fba2 	bl	8001080 <__aeabi_fcmplt>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <pid+0x52>
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	e010      	b.n	800596c <pid+0x74>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f7fb fb92 	bl	8001080 <__aeabi_fcmplt>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <pid+0x74>
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	601a      	str	r2, [r3, #0]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 800596c:	6939      	ldr	r1, [r7, #16]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb f9e8 	bl	8000d44 <__aeabi_fmul>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fb f8d8 	bl	8000b34 <__addsf3>
 8005984:	4603      	mov	r3, r0
 8005986:	461c      	mov	r4, r3
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f7fb f8ce 	bl	8000b30 <__aeabi_fsub>
 8005994:	4603      	mov	r3, r0
 8005996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005998:	4618      	mov	r0, r3
 800599a:	f7fb f9d3 	bl	8000d44 <__aeabi_fmul>
 800599e:	4603      	mov	r3, r0
 80059a0:	4619      	mov	r1, r3
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fb f8c6 	bl	8000b34 <__addsf3>
 80059a8:	4603      	mov	r3, r0
 80059aa:	617b      	str	r3, [r7, #20]

	if(out > PIDmax)out = PIDmax;
 80059ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7fb fb84 	bl	80010bc <__aeabi_fcmpgt>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <pid+0xc8>
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e00d      	b.n	80059dc <pid+0xe4>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059c6:	4619      	mov	r1, r3
 80059c8:	6978      	ldr	r0, [r7, #20]
 80059ca:	f7fb fb59 	bl	8001080 <__aeabi_fcmplt>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <pid+0xe4>
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059da:	617b      	str	r3, [r7, #20]

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	601a      	str	r2, [r3, #0]


	return out;
 80059e2:	697b      	ldr	r3, [r7, #20]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd90      	pop	{r4, r7, pc}

080059ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <_sbrk+0x50>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <_sbrk+0x16>
		heap_end = &end;
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <_sbrk+0x50>)
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <_sbrk+0x54>)
 8005a00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <_sbrk+0x50>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <_sbrk+0x50>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	466a      	mov	r2, sp
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d907      	bls.n	8005a26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a16:	f003 ff8d 	bl	8009934 <__errno>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	230c      	movs	r3, #12
 8005a1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a24:	e006      	b.n	8005a34 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <_sbrk+0x50>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <_sbrk+0x50>)
 8005a30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000244 	.word	0x20000244
 8005a40:	20000958 	.word	0x20000958

08005a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <SystemInit+0x5c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <SystemInit+0x5c>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <SystemInit+0x5c>)
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4911      	ldr	r1, [pc, #68]	; (8005aa0 <SystemInit+0x5c>)
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <SystemInit+0x60>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <SystemInit+0x5c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <SystemInit+0x5c>)
 8005a66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <SystemInit+0x5c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <SystemInit+0x5c>)
 8005a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005a7c:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <SystemInit+0x5c>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <SystemInit+0x5c>)
 8005a82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005a86:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <SystemInit+0x5c>)
 8005a8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005a8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <SystemInit+0x64>)
 8005a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a96:	609a      	str	r2, [r3, #8]
#endif 
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	f8ff0000 	.word	0xf8ff0000
 8005aa8:	e000ed00 	.word	0xe000ed00

08005aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005aac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005aae:	e003      	b.n	8005ab8 <LoopCopyDataInit>

08005ab0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005ab2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ab4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005ab6:	3104      	adds	r1, #4

08005ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005ab8:	480a      	ldr	r0, [pc, #40]	; (8005ae4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005abc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005abe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ac0:	d3f6      	bcc.n	8005ab0 <CopyDataInit>
  ldr r2, =_sbss
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005ac4:	e002      	b.n	8005acc <LoopFillZerobss>

08005ac6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005ac6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005ac8:	f842 3b04 	str.w	r3, [r2], #4

08005acc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ace:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ad0:	d3f9      	bcc.n	8005ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ad2:	f7ff ffb7 	bl	8005a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ad6:	f003 ff33 	bl	8009940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ada:	f7fc fba5 	bl	8002228 <main>
  bx lr
 8005ade:	4770      	bx	lr
  ldr r3, =_sidata
 8005ae0:	0800ced0 	.word	0x0800ced0
  ldr r0, =_sdata
 8005ae4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005ae8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8005aec:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8005af0:	20000954 	.word	0x20000954

08005af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005af4:	e7fe      	b.n	8005af4 <ADC1_2_IRQHandler>
	...

08005af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_Init+0x28>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <HAL_Init+0x28>)
 8005b02:	f043 0310 	orr.w	r3, r3, #16
 8005b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b08:	2003      	movs	r0, #3
 8005b0a:	f000 fdf1 	bl	80066f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b0e:	2002      	movs	r0, #2
 8005b10:	f000 f808 	bl	8005b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b14:	f7fe fa68 	bl	8003fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40022000 	.word	0x40022000

08005b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b2c:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <HAL_InitTick+0x54>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <HAL_InitTick+0x58>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fe09 	bl	800675a <HAL_SYSTICK_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e00e      	b.n	8005b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b0f      	cmp	r3, #15
 8005b56:	d80a      	bhi.n	8005b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b58:	2200      	movs	r2, #0
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	f000 fdd1 	bl	8006706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b64:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <HAL_InitTick+0x5c>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000008 	.word	0x20000008
 8005b7c:	20000010 	.word	0x20000010
 8005b80:	2000000c 	.word	0x2000000c

08005b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_IncTick+0x1c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_IncTick+0x20>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4413      	add	r3, r2
 8005b94:	4a03      	ldr	r2, [pc, #12]	; (8005ba4 <HAL_IncTick+0x20>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	20000010 	.word	0x20000010
 8005ba4:	2000092c 	.word	0x2000092c

08005ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return uwTick;
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <HAL_GetTick+0x10>)
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	2000092c 	.word	0x2000092c

08005bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bc4:	f7ff fff0 	bl	8005ba8 <HAL_GetTick>
 8005bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd4:	d005      	beq.n	8005be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_Delay+0x40>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005be2:	bf00      	nop
 8005be4:	f7ff ffe0 	bl	8005ba8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d8f7      	bhi.n	8005be4 <HAL_Delay+0x28>
  {
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000010 	.word	0x20000010

08005c00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e0be      	b.n	8005da0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fe fa04 	bl	800404c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fbb1 	bl	80063ac <ADC_ConversionStop_Disable>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 8099 	bne.w	8005d8e <HAL_ADC_Init+0x18e>
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 8095 	bne.w	8005d8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005c6c:	f023 0302 	bic.w	r3, r3, #2
 8005c70:	f043 0202 	orr.w	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	7b1b      	ldrb	r3, [r3, #12]
 8005c86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005c88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c98:	d003      	beq.n	8005ca2 <HAL_ADC_Init+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_ADC_Init+0xa8>
 8005ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca6:	e000      	b.n	8005caa <HAL_ADC_Init+0xaa>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7d1b      	ldrb	r3, [r3, #20]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d119      	bne.n	8005cec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7b1b      	ldrb	r3, [r3, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	035a      	lsls	r2, r3, #13
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	e00b      	b.n	8005cec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f043 0201 	orr.w	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <HAL_ADC_Init+0x1a8>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1c:	d003      	beq.n	8005d26 <HAL_ADC_Init+0x126>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d104      	bne.n	8005d30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <HAL_ADC_Init+0x1ac>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d10b      	bne.n	8005d6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d6a:	e018      	b.n	8005d9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f023 0312 	bic.w	r3, r3, #18
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d8c:	e007      	b.n	8005d9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f043 0210 	orr.w	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	ffe1f7fd 	.word	0xffe1f7fd
 8005dac:	ff1f0efe 	.word	0xff1f0efe

08005db0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_Start+0x1a>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e098      	b.n	8005efc <HAL_ADC_Start+0x14c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa98 	bl	8006308 <ADC_Enable>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8087 	bne.w	8005ef2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a41      	ldr	r2, [pc, #260]	; (8005f04 <HAL_ADC_Start+0x154>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d105      	bne.n	8005e0e <HAL_ADC_Start+0x5e>
 8005e02:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <HAL_ADC_Start+0x158>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d115      	bne.n	8005e3a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d026      	beq.n	8005e76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e38:	e01d      	b.n	8005e76 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <HAL_ADC_Start+0x158>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_ADC_Start+0xaa>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <HAL_ADC_Start+0x154>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10d      	bne.n	8005e76 <HAL_ADC_Start+0xc6>
 8005e5a:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <HAL_ADC_Start+0x158>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	f023 0206 	bic.w	r2, r3, #6
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e8e:	e002      	b.n	8005e96 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0202 	mvn.w	r2, #2
 8005ea6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005eb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005eb6:	d113      	bne.n	8005ee0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <HAL_ADC_Start+0x154>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d105      	bne.n	8005ece <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <HAL_ADC_Start+0x158>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d108      	bne.n	8005ee0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005edc:	609a      	str	r2, [r3, #8]
 8005ede:	e00c      	b.n	8005efa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	e003      	b.n	8005efa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40012800 	.word	0x40012800
 8005f08:	40012400 	.word	0x40012400

08005f0c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005f22:	f7ff fe41 	bl	8005ba8 <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e0c8      	b.n	80060e0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d12a      	bne.n	8005fb2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d123      	bne.n	8005fb2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005f6a:	e01a      	b.n	8005fa2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f72:	d016      	beq.n	8005fa2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_ADC_PollForConversion+0x7e>
 8005f7a:	f7ff fe15 	bl	8005ba8 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d20b      	bcs.n	8005fa2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e09e      	b.n	80060e0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0dd      	beq.n	8005f6c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005fb0:	e06c      	b.n	800608c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005fb2:	4b4d      	ldr	r3, [pc, #308]	; (80060e8 <HAL_ADC_PollForConversion+0x1dc>)
 8005fb4:	681c      	ldr	r4, [r3, #0]
 8005fb6:	2002      	movs	r0, #2
 8005fb8:	f002 fbc6 	bl	8008748 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6919      	ldr	r1, [r3, #16]
 8005fc8:	4b48      	ldr	r3, [pc, #288]	; (80060ec <HAL_ADC_PollForConversion+0x1e0>)
 8005fca:	400b      	ands	r3, r1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d118      	bne.n	8006002 <HAL_ADC_PollForConversion+0xf6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68d9      	ldr	r1, [r3, #12]
 8005fd6:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <HAL_ADC_PollForConversion+0x1e4>)
 8005fd8:	400b      	ands	r3, r1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d111      	bne.n	8006002 <HAL_ADC_PollForConversion+0xf6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6919      	ldr	r1, [r3, #16]
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_ADC_PollForConversion+0x1e8>)
 8005fe6:	400b      	ands	r3, r1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <HAL_ADC_PollForConversion+0xf2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68d9      	ldr	r1, [r3, #12]
 8005ff2:	4b41      	ldr	r3, [pc, #260]	; (80060f8 <HAL_ADC_PollForConversion+0x1ec>)
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADC_PollForConversion+0xf2>
 8005ffa:	2314      	movs	r3, #20
 8005ffc:	e020      	b.n	8006040 <HAL_ADC_PollForConversion+0x134>
 8005ffe:	2329      	movs	r3, #41	; 0x29
 8006000:	e01e      	b.n	8006040 <HAL_ADC_PollForConversion+0x134>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6919      	ldr	r1, [r3, #16]
 8006008:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <HAL_ADC_PollForConversion+0x1e8>)
 800600a:	400b      	ands	r3, r1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_ADC_PollForConversion+0x112>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	4b38      	ldr	r3, [pc, #224]	; (80060f8 <HAL_ADC_PollForConversion+0x1ec>)
 8006018:	400b      	ands	r3, r1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00d      	beq.n	800603a <HAL_ADC_PollForConversion+0x12e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6919      	ldr	r1, [r3, #16]
 8006024:	4b35      	ldr	r3, [pc, #212]	; (80060fc <HAL_ADC_PollForConversion+0x1f0>)
 8006026:	400b      	ands	r3, r1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <HAL_ADC_PollForConversion+0x132>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68d9      	ldr	r1, [r3, #12]
 8006032:	4b32      	ldr	r3, [pc, #200]	; (80060fc <HAL_ADC_PollForConversion+0x1f0>)
 8006034:	400b      	ands	r3, r1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_ADC_PollForConversion+0x132>
 800603a:	2354      	movs	r3, #84	; 0x54
 800603c:	e000      	b.n	8006040 <HAL_ADC_PollForConversion+0x134>
 800603e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8006040:	fb02 f303 	mul.w	r3, r2, r3
 8006044:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006046:	e01d      	b.n	8006084 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800604e:	d016      	beq.n	800607e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <HAL_ADC_PollForConversion+0x15a>
 8006056:	f7ff fda7 	bl	8005ba8 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d20b      	bcs.n	800607e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e030      	b.n	80060e0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d8dd      	bhi.n	8006048 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0212 	mvn.w	r2, #18
 8006094:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80060ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80060b0:	d115      	bne.n	80060de <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d111      	bne.n	80060de <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f043 0201 	orr.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}
 80060e8:	20000008 	.word	0x20000008
 80060ec:	24924924 	.word	0x24924924
 80060f0:	00924924 	.word	0x00924924
 80060f4:	12492492 	.word	0x12492492
 80060f8:	00492492 	.word	0x00492492
 80060fc:	00249249 	.word	0x00249249

08006100 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x20>
 8006134:	2302      	movs	r3, #2
 8006136:	e0dc      	b.n	80062f2 <HAL_ADC_ConfigChannel+0x1da>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b06      	cmp	r3, #6
 8006146:	d81c      	bhi.n	8006182 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	3b05      	subs	r3, #5
 800615a:	221f      	movs	r2, #31
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	4019      	ands	r1, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	3b05      	subs	r3, #5
 8006174:	fa00 f203 	lsl.w	r2, r0, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	635a      	str	r2, [r3, #52]	; 0x34
 8006180:	e03c      	b.n	80061fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b0c      	cmp	r3, #12
 8006188:	d81c      	bhi.n	80061c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	3b23      	subs	r3, #35	; 0x23
 800619c:	221f      	movs	r2, #31
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	4019      	ands	r1, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	3b23      	subs	r3, #35	; 0x23
 80061b6:	fa00 f203 	lsl.w	r2, r0, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
 80061c2:	e01b      	b.n	80061fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	3b41      	subs	r3, #65	; 0x41
 80061d6:	221f      	movs	r2, #31
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	4019      	ands	r1, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	3b41      	subs	r3, #65	; 0x41
 80061f0:	fa00 f203 	lsl.w	r2, r0, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b09      	cmp	r3, #9
 8006202:	d91c      	bls.n	800623e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68d9      	ldr	r1, [r3, #12]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	4413      	add	r3, r2
 8006214:	3b1e      	subs	r3, #30
 8006216:	2207      	movs	r2, #7
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	4019      	ands	r1, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	6898      	ldr	r0, [r3, #8]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	3b1e      	subs	r3, #30
 8006230:	fa00 f203 	lsl.w	r2, r0, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	e019      	b.n	8006272 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6919      	ldr	r1, [r3, #16]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4413      	add	r3, r2
 800624e:	2207      	movs	r2, #7
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	4019      	ands	r1, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	6898      	ldr	r0, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	fa00 f203 	lsl.w	r2, r0, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b10      	cmp	r3, #16
 8006278:	d003      	beq.n	8006282 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800627e:	2b11      	cmp	r3, #17
 8006280:	d132      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <HAL_ADC_ConfigChannel+0x1e4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d125      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d126      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80062a8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d11a      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <HAL_ADC_ConfigChannel+0x1e8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a13      	ldr	r2, [pc, #76]	; (8006304 <HAL_ADC_ConfigChannel+0x1ec>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	0c9a      	lsrs	r2, r3, #18
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80062c8:	e002      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f9      	bne.n	80062ca <HAL_ADC_ConfigChannel+0x1b2>
 80062d6:	e007      	b.n	80062e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	40012400 	.word	0x40012400
 8006300:	20000008 	.word	0x20000008
 8006304:	431bde83 	.word	0x431bde83

08006308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d039      	beq.n	800639a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006336:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <ADC_Enable+0x9c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1b      	ldr	r2, [pc, #108]	; (80063a8 <ADC_Enable+0xa0>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	0c9b      	lsrs	r3, r3, #18
 8006342:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006344:	e002      	b.n	800634c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3b01      	subs	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f9      	bne.n	8006346 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006352:	f7ff fc29 	bl	8005ba8 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006358:	e018      	b.n	800638c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800635a:	f7ff fc25 	bl	8005ba8 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d911      	bls.n	800638c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f043 0210 	orr.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e007      	b.n	800639c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d1df      	bne.n	800635a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000008 	.word	0x20000008
 80063a8:	431bde83 	.word	0x431bde83

080063ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d127      	bne.n	8006416 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063d6:	f7ff fbe7 	bl	8005ba8 <HAL_GetTick>
 80063da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80063dc:	e014      	b.n	8006408 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063de:	f7ff fbe3 	bl	8005ba8 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d90d      	bls.n	8006408 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	f043 0210 	orr.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f043 0201 	orr.w	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d0e3      	beq.n	80063de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_ADCEx_Calibration_Start+0x1e>
 800643a:	2302      	movs	r3, #2
 800643c:	e086      	b.n	800654c <HAL_ADCEx_Calibration_Start+0x12c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ffb0 	bl	80063ac <ADC_ConversionStop_Disable>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d175      	bne.n	8006542 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800645e:	f023 0302 	bic.w	r3, r3, #2
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800646a:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <HAL_ADCEx_Calibration_Start+0x134>)
 800646c:	681c      	ldr	r4, [r3, #0]
 800646e:	2002      	movs	r0, #2
 8006470:	f002 f96a 	bl	8008748 <HAL_RCCEx_GetPeriphCLKFreq>
 8006474:	4603      	mov	r3, r0
 8006476:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800647a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800647c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800647e:	e002      	b.n	8006486 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f9      	bne.n	8006480 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff3b 	bl	8006308 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0208 	orr.w	r2, r2, #8
 80064a0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80064a2:	f7ff fb81 	bl	8005ba8 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80064a8:	e014      	b.n	80064d4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80064aa:	f7ff fb7d 	bl	8005ba8 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b0a      	cmp	r3, #10
 80064b6:	d90d      	bls.n	80064d4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	f023 0312 	bic.w	r3, r3, #18
 80064c0:	f043 0210 	orr.w	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e03b      	b.n	800654c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e3      	bne.n	80064aa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0204 	orr.w	r2, r2, #4
 80064f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80064f2:	f7ff fb59 	bl	8005ba8 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80064f8:	e014      	b.n	8006524 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80064fa:	f7ff fb55 	bl	8005ba8 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b0a      	cmp	r3, #10
 8006506:	d90d      	bls.n	8006524 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f023 0312 	bic.w	r3, r3, #18
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e013      	b.n	800654c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
}
 800654c:	4618      	mov	r0, r3
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}
 8006554:	20000008 	.word	0x20000008

08006558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <__NVIC_SetPriorityGrouping+0x44>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006574:	4013      	ands	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800658a:	4a04      	ldr	r2, [pc, #16]	; (800659c <__NVIC_SetPriorityGrouping+0x44>)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	60d3      	str	r3, [r2, #12]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <__NVIC_GetPriorityGrouping+0x18>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	f003 0307 	and.w	r3, r3, #7
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db0b      	blt.n	80065e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	f003 021f 	and.w	r2, r3, #31
 80065d4:	4906      	ldr	r1, [pc, #24]	; (80065f0 <__NVIC_EnableIRQ+0x34>)
 80065d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	2001      	movs	r0, #1
 80065de:	fa00 f202 	lsl.w	r2, r0, r2
 80065e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	e000e100 	.word	0xe000e100

080065f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	db0a      	blt.n	800661e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	490c      	ldr	r1, [pc, #48]	; (8006640 <__NVIC_SetPriority+0x4c>)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	440b      	add	r3, r1
 8006618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800661c:	e00a      	b.n	8006634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	4908      	ldr	r1, [pc, #32]	; (8006644 <__NVIC_SetPriority+0x50>)
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	3b04      	subs	r3, #4
 800662c:	0112      	lsls	r2, r2, #4
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	440b      	add	r3, r1
 8006632:	761a      	strb	r2, [r3, #24]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000e100 	.word	0xe000e100
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	; 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f1c3 0307 	rsb	r3, r3, #7
 8006662:	2b04      	cmp	r3, #4
 8006664:	bf28      	it	cs
 8006666:	2304      	movcs	r3, #4
 8006668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3304      	adds	r3, #4
 800666e:	2b06      	cmp	r3, #6
 8006670:	d902      	bls.n	8006678 <NVIC_EncodePriority+0x30>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3b03      	subs	r3, #3
 8006676:	e000      	b.n	800667a <NVIC_EncodePriority+0x32>
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800667c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	401a      	ands	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	43d9      	mvns	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a0:	4313      	orrs	r3, r2
         );
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3724      	adds	r7, #36	; 0x24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066bc:	d301      	bcc.n	80066c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066be:	2301      	movs	r3, #1
 80066c0:	e00f      	b.n	80066e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066c2:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <SysTick_Config+0x40>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066ca:	210f      	movs	r1, #15
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d0:	f7ff ff90 	bl	80065f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <SysTick_Config+0x40>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <SysTick_Config+0x40>)
 80066dc:	2207      	movs	r2, #7
 80066de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	e000e010 	.word	0xe000e010

080066f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff2d 	bl	8006558 <__NVIC_SetPriorityGrouping>
}
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006706:	b580      	push	{r7, lr}
 8006708:	b086      	sub	sp, #24
 800670a:	af00      	add	r7, sp, #0
 800670c:	4603      	mov	r3, r0
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006718:	f7ff ff42 	bl	80065a0 <__NVIC_GetPriorityGrouping>
 800671c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	f7ff ff90 	bl	8006648 <NVIC_EncodePriority>
 8006728:	4602      	mov	r2, r0
 800672a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672e:	4611      	mov	r1, r2
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff5f 	bl	80065f4 <__NVIC_SetPriority>
}
 8006736:	bf00      	nop
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	4603      	mov	r3, r0
 8006746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff ff35 	bl	80065bc <__NVIC_EnableIRQ>
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff ffa2 	bl	80066ac <SysTick_Config>
 8006768:	4603      	mov	r3, r0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <HAL_FLASH_Program+0xd8>)
 8006790:	7e1b      	ldrb	r3, [r3, #24]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_FLASH_Program+0x26>
 8006796:	2302      	movs	r3, #2
 8006798:	e054      	b.n	8006844 <HAL_FLASH_Program+0xd0>
 800679a:	4b2c      	ldr	r3, [pc, #176]	; (800684c <HAL_FLASH_Program+0xd8>)
 800679c:	2201      	movs	r2, #1
 800679e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80067a4:	f000 f8a8 	bl	80068f8 <FLASH_WaitForLastOperation>
 80067a8:	4603      	mov	r3, r0
 80067aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d144      	bne.n	800683c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80067b8:	2301      	movs	r3, #1
 80067ba:	757b      	strb	r3, [r7, #21]
 80067bc:	e007      	b.n	80067ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d102      	bne.n	80067ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80067c4:	2302      	movs	r3, #2
 80067c6:	757b      	strb	r3, [r7, #21]
 80067c8:	e001      	b.n	80067ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80067ca:	2304      	movs	r3, #4
 80067cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80067ce:	2300      	movs	r3, #0
 80067d0:	75bb      	strb	r3, [r7, #22]
 80067d2:	e02d      	b.n	8006830 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80067d4:	7dbb      	ldrb	r3, [r7, #22]
 80067d6:	005a      	lsls	r2, r3, #1
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	eb02 0c03 	add.w	ip, r2, r3
 80067de:	7dbb      	ldrb	r3, [r7, #22]
 80067e0:	0119      	lsls	r1, r3, #4
 80067e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e6:	f1c1 0620 	rsb	r6, r1, #32
 80067ea:	f1a1 0020 	sub.w	r0, r1, #32
 80067ee:	fa22 f401 	lsr.w	r4, r2, r1
 80067f2:	fa03 f606 	lsl.w	r6, r3, r6
 80067f6:	4334      	orrs	r4, r6
 80067f8:	fa23 f000 	lsr.w	r0, r3, r0
 80067fc:	4304      	orrs	r4, r0
 80067fe:	fa23 f501 	lsr.w	r5, r3, r1
 8006802:	b2a3      	uxth	r3, r4
 8006804:	4619      	mov	r1, r3
 8006806:	4660      	mov	r0, ip
 8006808:	f000 f85a 	bl	80068c0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800680c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006810:	f000 f872 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006814:	4603      	mov	r3, r0
 8006816:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006818:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <HAL_FLASH_Program+0xdc>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4a0c      	ldr	r2, [pc, #48]	; (8006850 <HAL_FLASH_Program+0xdc>)
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800682a:	7dbb      	ldrb	r3, [r7, #22]
 800682c:	3301      	adds	r3, #1
 800682e:	75bb      	strb	r3, [r7, #22]
 8006830:	7dba      	ldrb	r2, [r7, #22]
 8006832:	7d7b      	ldrb	r3, [r7, #21]
 8006834:	429a      	cmp	r2, r3
 8006836:	d3cd      	bcc.n	80067d4 <HAL_FLASH_Program+0x60>
 8006838:	e000      	b.n	800683c <HAL_FLASH_Program+0xc8>
      {
        break;
 800683a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_FLASH_Program+0xd8>)
 800683e:	2200      	movs	r2, #0
 8006840:	761a      	strb	r2, [r3, #24]

  return status;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	20000930 	.word	0x20000930
 8006850:	40022000 	.word	0x40022000

08006854 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <HAL_FLASH_Unlock+0x40>)
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00d      	beq.n	8006886 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <HAL_FLASH_Unlock+0x40>)
 800686c:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <HAL_FLASH_Unlock+0x44>)
 800686e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <HAL_FLASH_Unlock+0x40>)
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <HAL_FLASH_Unlock+0x48>)
 8006874:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <HAL_FLASH_Unlock+0x40>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006886:	79fb      	ldrb	r3, [r7, #7]
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40022000 	.word	0x40022000
 8006898:	45670123 	.word	0x45670123
 800689c:	cdef89ab 	.word	0xcdef89ab

080068a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_FLASH_Lock+0x1c>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <HAL_FLASH_Lock+0x1c>)
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40022000 	.word	0x40022000

080068c0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <FLASH_Program_HalfWord+0x30>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <FLASH_Program_HalfWord+0x34>)
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <FLASH_Program_HalfWord+0x34>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	801a      	strh	r2, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000930 	.word	0x20000930
 80068f4:	40022000 	.word	0x40022000

080068f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006900:	f7ff f952 	bl	8005ba8 <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006906:	e010      	b.n	800692a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690e:	d00c      	beq.n	800692a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <FLASH_WaitForLastOperation+0x2e>
 8006916:	f7ff f947 	bl	8005ba8 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	429a      	cmp	r2, r3
 8006924:	d201      	bcs.n	800692a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e025      	b.n	8006976 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800692a:	4b15      	ldr	r3, [pc, #84]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e8      	bne.n	8006908 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006942:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 8006944:	2220      	movs	r2, #32
 8006946:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006954:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <FLASH_WaitForLastOperation+0x88>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800696c:	f000 f80a 	bl	8006984 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40022000 	.word	0x40022000

08006984 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800698e:	4b23      	ldr	r3, [pc, #140]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800699a:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f043 0302 	orr.w	r3, r3, #2
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 80069a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f043 0310 	orr.w	r3, r3, #16
 80069ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 80069c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f043 0304 	orr.w	r3, r3, #4
 80069cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f043 0304 	orr.w	r3, r3, #4
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <FLASH_SetErrorCode+0x9c>)
 80069e4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f240 1201 	movw	r2, #257	; 0x101
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d106      	bne.n	8006a0a <FLASH_SetErrorCode+0x86>
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	61d3      	str	r3, [r2, #28]
}  
 8006a08:	e002      	b.n	8006a10 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a0a:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <FLASH_SetErrorCode+0x98>)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60d3      	str	r3, [r2, #12]
}  
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	20000930 	.word	0x20000930

08006a24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <HAL_FLASHEx_Erase+0xd0>)
 8006a38:	7e1b      	ldrb	r3, [r3, #24]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_FLASHEx_Erase+0x1e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e053      	b.n	8006aea <HAL_FLASHEx_Erase+0xc6>
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <HAL_FLASHEx_Erase+0xd0>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d116      	bne.n	8006a7e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a54:	f7ff ff50 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d141      	bne.n	8006ae2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006a5e:	2001      	movs	r0, #1
 8006a60:	f000 f84c 	bl	8006afc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a68:	f7ff ff46 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006a70:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <HAL_FLASHEx_Erase+0xd4>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <HAL_FLASHEx_Erase+0xd4>)
 8006a76:	f023 0304 	bic.w	r3, r3, #4
 8006a7a:	6113      	str	r3, [r2, #16]
 8006a7c:	e031      	b.n	8006ae2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a82:	f7ff ff39 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d12a      	bne.n	8006ae2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a92:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	e019      	b.n	8006ad0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006a9c:	68b8      	ldr	r0, [r7, #8]
 8006a9e:	f000 f849 	bl	8006b34 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006aa2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006aa6:	f7ff ff27 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006aae:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_FLASHEx_Erase+0xd4>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4a11      	ldr	r2, [pc, #68]	; (8006af8 <HAL_FLASHEx_Erase+0xd4>)
 8006ab4:	f023 0302 	bic.w	r3, r3, #2
 8006ab8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	601a      	str	r2, [r3, #0]
            break;
 8006ac6:	e00c      	b.n	8006ae2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ace:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	029a      	lsls	r2, r3, #10
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3dc      	bcc.n	8006a9c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ae2:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <HAL_FLASHEx_Erase+0xd0>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	761a      	strb	r2, [r3, #24]

  return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000930 	.word	0x20000930
 8006af8:	40022000 	.word	0x40022000

08006afc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <FLASH_MassErase+0x30>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <FLASH_MassErase+0x34>)
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <FLASH_MassErase+0x34>)
 8006b10:	f043 0304 	orr.w	r3, r3, #4
 8006b14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <FLASH_MassErase+0x34>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4a05      	ldr	r2, [pc, #20]	; (8006b30 <FLASH_MassErase+0x34>)
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr
 8006b2c:	20000930 	.word	0x20000930
 8006b30:	40022000 	.word	0x40022000

08006b34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <FLASH_PageErase+0x38>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <FLASH_PageErase+0x3c>)
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <FLASH_PageErase+0x3c>)
 8006b48:	f043 0302 	orr.w	r3, r3, #2
 8006b4c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006b4e:	4a08      	ldr	r2, [pc, #32]	; (8006b70 <FLASH_PageErase+0x3c>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <FLASH_PageErase+0x3c>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	4a05      	ldr	r2, [pc, #20]	; (8006b70 <FLASH_PageErase+0x3c>)
 8006b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000930 	.word	0x20000930
 8006b70:	40022000 	.word	0x40022000

08006b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b08b      	sub	sp, #44	; 0x2c
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b82:	2300      	movs	r3, #0
 8006b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b86:	e127      	b.n	8006dd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006b88:	2201      	movs	r2, #1
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	f040 8116 	bne.w	8006dd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b12      	cmp	r3, #18
 8006bac:	d034      	beq.n	8006c18 <HAL_GPIO_Init+0xa4>
 8006bae:	2b12      	cmp	r3, #18
 8006bb0:	d80d      	bhi.n	8006bce <HAL_GPIO_Init+0x5a>
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d02b      	beq.n	8006c0e <HAL_GPIO_Init+0x9a>
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d804      	bhi.n	8006bc4 <HAL_GPIO_Init+0x50>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d031      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d01c      	beq.n	8006bfc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006bc2:	e048      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d043      	beq.n	8006c50 <HAL_GPIO_Init+0xdc>
 8006bc8:	2b11      	cmp	r3, #17
 8006bca:	d01b      	beq.n	8006c04 <HAL_GPIO_Init+0x90>
          break;
 8006bcc:	e043      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006bce:	4a89      	ldr	r2, [pc, #548]	; (8006df4 <HAL_GPIO_Init+0x280>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d026      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
 8006bd4:	4a87      	ldr	r2, [pc, #540]	; (8006df4 <HAL_GPIO_Init+0x280>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d806      	bhi.n	8006be8 <HAL_GPIO_Init+0x74>
 8006bda:	4a87      	ldr	r2, [pc, #540]	; (8006df8 <HAL_GPIO_Init+0x284>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d020      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
 8006be0:	4a86      	ldr	r2, [pc, #536]	; (8006dfc <HAL_GPIO_Init+0x288>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
          break;
 8006be6:	e036      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006be8:	4a85      	ldr	r2, [pc, #532]	; (8006e00 <HAL_GPIO_Init+0x28c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
 8006bee:	4a85      	ldr	r2, [pc, #532]	; (8006e04 <HAL_GPIO_Init+0x290>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d016      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
 8006bf4:	4a84      	ldr	r2, [pc, #528]	; (8006e08 <HAL_GPIO_Init+0x294>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_GPIO_Init+0xae>
          break;
 8006bfa:	e02c      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	623b      	str	r3, [r7, #32]
          break;
 8006c02:	e028      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	623b      	str	r3, [r7, #32]
          break;
 8006c0c:	e023      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	3308      	adds	r3, #8
 8006c14:	623b      	str	r3, [r7, #32]
          break;
 8006c16:	e01e      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	623b      	str	r3, [r7, #32]
          break;
 8006c20:	e019      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	623b      	str	r3, [r7, #32]
          break;
 8006c2e:	e012      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d105      	bne.n	8006c44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c38:	2308      	movs	r3, #8
 8006c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	611a      	str	r2, [r3, #16]
          break;
 8006c42:	e008      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c44:	2308      	movs	r3, #8
 8006c46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	615a      	str	r2, [r3, #20]
          break;
 8006c4e:	e002      	b.n	8006c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c50:	2300      	movs	r3, #0
 8006c52:	623b      	str	r3, [r7, #32]
          break;
 8006c54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2bff      	cmp	r3, #255	; 0xff
 8006c5a:	d801      	bhi.n	8006c60 <HAL_GPIO_Init+0xec>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	e001      	b.n	8006c64 <HAL_GPIO_Init+0xf0>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2bff      	cmp	r3, #255	; 0xff
 8006c6a:	d802      	bhi.n	8006c72 <HAL_GPIO_Init+0xfe>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	e002      	b.n	8006c78 <HAL_GPIO_Init+0x104>
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	3b08      	subs	r3, #8
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	210f      	movs	r1, #15
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	43db      	mvns	r3, r3
 8006c88:	401a      	ands	r2, r3
 8006c8a:	6a39      	ldr	r1, [r7, #32]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	431a      	orrs	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8096 	beq.w	8006dd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006ca6:	4b59      	ldr	r3, [pc, #356]	; (8006e0c <HAL_GPIO_Init+0x298>)
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	4a58      	ldr	r2, [pc, #352]	; (8006e0c <HAL_GPIO_Init+0x298>)
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	6193      	str	r3, [r2, #24]
 8006cb2:	4b56      	ldr	r3, [pc, #344]	; (8006e0c <HAL_GPIO_Init+0x298>)
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006cbe:	4a54      	ldr	r2, [pc, #336]	; (8006e10 <HAL_GPIO_Init+0x29c>)
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	220f      	movs	r2, #15
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a4b      	ldr	r2, [pc, #300]	; (8006e14 <HAL_GPIO_Init+0x2a0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_GPIO_Init+0x19e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a4a      	ldr	r2, [pc, #296]	; (8006e18 <HAL_GPIO_Init+0x2a4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00d      	beq.n	8006d0e <HAL_GPIO_Init+0x19a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a49      	ldr	r2, [pc, #292]	; (8006e1c <HAL_GPIO_Init+0x2a8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <HAL_GPIO_Init+0x196>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a48      	ldr	r2, [pc, #288]	; (8006e20 <HAL_GPIO_Init+0x2ac>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <HAL_GPIO_Init+0x192>
 8006d02:	2303      	movs	r3, #3
 8006d04:	e006      	b.n	8006d14 <HAL_GPIO_Init+0x1a0>
 8006d06:	2304      	movs	r3, #4
 8006d08:	e004      	b.n	8006d14 <HAL_GPIO_Init+0x1a0>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e002      	b.n	8006d14 <HAL_GPIO_Init+0x1a0>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <HAL_GPIO_Init+0x1a0>
 8006d12:	2300      	movs	r3, #0
 8006d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d16:	f002 0203 	and.w	r2, r2, #3
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	4093      	lsls	r3, r2
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006d24:	493a      	ldr	r1, [pc, #232]	; (8006e10 <HAL_GPIO_Init+0x29c>)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006d3e:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4938      	ldr	r1, [pc, #224]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]
 8006d4a:	e006      	b.n	8006d5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	43db      	mvns	r3, r3
 8006d54:	4933      	ldr	r1, [pc, #204]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	492e      	ldr	r1, [pc, #184]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	604b      	str	r3, [r1, #4]
 8006d72:	e006      	b.n	8006d82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d74:	4b2b      	ldr	r3, [pc, #172]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	4929      	ldr	r1, [pc, #164]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d8e:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	4924      	ldr	r1, [pc, #144]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	608b      	str	r3, [r1, #8]
 8006d9a:	e006      	b.n	8006daa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d9c:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	491f      	ldr	r1, [pc, #124]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006db6:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	491a      	ldr	r1, [pc, #104]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60cb      	str	r3, [r1, #12]
 8006dc2:	e006      	b.n	8006dd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	4915      	ldr	r1, [pc, #84]	; (8006e24 <HAL_GPIO_Init+0x2b0>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f47f aed0 	bne.w	8006b88 <HAL_GPIO_Init+0x14>
  }
}
 8006de8:	bf00      	nop
 8006dea:	372c      	adds	r7, #44	; 0x2c
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	10210000 	.word	0x10210000
 8006df8:	10110000 	.word	0x10110000
 8006dfc:	10120000 	.word	0x10120000
 8006e00:	10310000 	.word	0x10310000
 8006e04:	10320000 	.word	0x10320000
 8006e08:	10220000 	.word	0x10220000
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40010800 	.word	0x40010800
 8006e18:	40010c00 	.word	0x40010c00
 8006e1c:	40011000 	.word	0x40011000
 8006e20:	40011400 	.word	0x40011400
 8006e24:	40010400 	.word	0x40010400

08006e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]
 8006e34:	4613      	mov	r3, r2
 8006e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e38:	787b      	ldrb	r3, [r7, #1]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e3e:	887a      	ldrh	r2, [r7, #2]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e44:	e003      	b.n	8006e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	041a      	lsls	r2, r3, #16
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	611a      	str	r2, [r3, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e70:	887a      	ldrh	r2, [r7, #2]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006e76:	e002      	b.n	8006e7e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e78:	887a      	ldrh	r2, [r7, #2]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	611a      	str	r2, [r3, #16]
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e10f      	b.n	80070ba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fd f908 	bl	80040c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2224      	movs	r2, #36	; 0x24
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f001 fb40 	bl	8008550 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4a7b      	ldr	r2, [pc, #492]	; (80070c4 <HAL_I2C_Init+0x23c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d807      	bhi.n	8006eec <HAL_I2C_Init+0x64>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a7a      	ldr	r2, [pc, #488]	; (80070c8 <HAL_I2C_Init+0x240>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	bf94      	ite	ls
 8006ee4:	2301      	movls	r3, #1
 8006ee6:	2300      	movhi	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	e006      	b.n	8006efa <HAL_I2C_Init+0x72>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4a77      	ldr	r2, [pc, #476]	; (80070cc <HAL_I2C_Init+0x244>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	bf94      	ite	ls
 8006ef4:	2301      	movls	r3, #1
 8006ef6:	2300      	movhi	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0db      	b.n	80070ba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a72      	ldr	r2, [pc, #456]	; (80070d0 <HAL_I2C_Init+0x248>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0c9b      	lsrs	r3, r3, #18
 8006f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a64      	ldr	r2, [pc, #400]	; (80070c4 <HAL_I2C_Init+0x23c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d802      	bhi.n	8006f3c <HAL_I2C_Init+0xb4>
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	e009      	b.n	8006f50 <HAL_I2C_Init+0xc8>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	4a63      	ldr	r2, [pc, #396]	; (80070d4 <HAL_I2C_Init+0x24c>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	099b      	lsrs	r3, r3, #6
 8006f4e:	3301      	adds	r3, #1
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4956      	ldr	r1, [pc, #344]	; (80070c4 <HAL_I2C_Init+0x23c>)
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	d80d      	bhi.n	8006f8c <HAL_I2C_Init+0x104>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1e59      	subs	r1, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	bf38      	it	cc
 8006f88:	2304      	movcc	r3, #4
 8006f8a:	e04f      	b.n	800702c <HAL_I2C_Init+0x1a4>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d111      	bne.n	8006fb8 <HAL_I2C_Init+0x130>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1e58      	subs	r0, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	440b      	add	r3, r1
 8006fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf0c      	ite	eq
 8006fb0:	2301      	moveq	r3, #1
 8006fb2:	2300      	movne	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e012      	b.n	8006fde <HAL_I2C_Init+0x156>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1e58      	subs	r0, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	0099      	lsls	r1, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_I2C_Init+0x15e>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e022      	b.n	800702c <HAL_I2C_Init+0x1a4>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10e      	bne.n	800700c <HAL_I2C_Init+0x184>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1e58      	subs	r0, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	440b      	add	r3, r1
 8006ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007000:	3301      	adds	r3, #1
 8007002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700a:	e00f      	b.n	800702c <HAL_I2C_Init+0x1a4>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	1e58      	subs	r0, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	0099      	lsls	r1, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007022:	3301      	adds	r3, #1
 8007024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	6809      	ldr	r1, [r1, #0]
 8007030:	4313      	orrs	r3, r2
 8007032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800705a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6911      	ldr	r1, [r2, #16]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68d2      	ldr	r2, [r2, #12]
 8007066:	4311      	orrs	r1, r2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	430b      	orrs	r3, r1
 800706e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	000186a0 	.word	0x000186a0
 80070c8:	001e847f 	.word	0x001e847f
 80070cc:	003d08ff 	.word	0x003d08ff
 80070d0:	431bde83 	.word	0x431bde83
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	817b      	strh	r3, [r7, #10]
 80070ea:	460b      	mov	r3, r1
 80070ec:	813b      	strh	r3, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070f2:	f7fe fd59 	bl	8005ba8 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b20      	cmp	r3, #32
 8007102:	f040 80d9 	bne.w	80072b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2319      	movs	r3, #25
 800710c:	2201      	movs	r2, #1
 800710e:	496d      	ldr	r1, [pc, #436]	; (80072c4 <HAL_I2C_Mem_Write+0x1ec>)
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fc6b 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
 800711e:	e0cc      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_I2C_Mem_Write+0x56>
 800712a:	2302      	movs	r3, #2
 800712c:	e0c5      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b01      	cmp	r3, #1
 8007142:	d007      	beq.n	8007154 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2221      	movs	r2, #33	; 0x21
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a3a      	ldr	r2, [r7, #32]
 800717e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a4d      	ldr	r2, [pc, #308]	; (80072c8 <HAL_I2C_Mem_Write+0x1f0>)
 8007194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007196:	88f8      	ldrh	r0, [r7, #6]
 8007198:	893a      	ldrh	r2, [r7, #8]
 800719a:	8979      	ldrh	r1, [r7, #10]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	4603      	mov	r3, r0
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fac6 	bl	8007738 <I2C_RequestMemoryWrite>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d052      	beq.n	8007258 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e081      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fcec 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d107      	bne.n	80071de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e06b      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d11b      	bne.n	8007258 <HAL_I2C_Mem_Write+0x180>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1aa      	bne.n	80071b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fcd8 	bl	8007c1a <I2C_WaitOnBTFFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	2b04      	cmp	r3, #4
 8007276:	d107      	bne.n	8007288 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007286:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e016      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	e000      	b.n	80072ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072b8:	2302      	movs	r3, #2
  }
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	00100002 	.word	0x00100002
 80072c8:	ffff0000 	.word	0xffff0000

080072cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	4603      	mov	r3, r0
 80072dc:	817b      	strh	r3, [r7, #10]
 80072de:	460b      	mov	r3, r1
 80072e0:	813b      	strh	r3, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072e6:	f7fe fc5f 	bl	8005ba8 <HAL_GetTick>
 80072ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	f040 8218 	bne.w	800772a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	2319      	movs	r3, #25
 8007300:	2201      	movs	r2, #1
 8007302:	4981      	ldr	r1, [pc, #516]	; (8007508 <HAL_I2C_Mem_Read+0x23c>)
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fb71 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
 8007312:	e20b      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_I2C_Mem_Read+0x56>
 800731e:	2302      	movs	r3, #2
 8007320:	e204      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d007      	beq.n	8007348 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2222      	movs	r2, #34	; 0x22
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2240      	movs	r2, #64	; 0x40
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a61      	ldr	r2, [pc, #388]	; (800750c <HAL_I2C_Mem_Read+0x240>)
 8007388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800738a:	88f8      	ldrh	r0, [r7, #6]
 800738c:	893a      	ldrh	r2, [r7, #8]
 800738e:	8979      	ldrh	r1, [r7, #10]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4603      	mov	r3, r0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fa56 	bl	800784c <I2C_RequestMemoryRead>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e1c0      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d113      	bne.n	80073da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b2:	2300      	movs	r3, #0
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e194      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d11d      	bne.n	800741e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800741a:	b662      	cpsie	i
 800741c:	e172      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007422:	2b02      	cmp	r3, #2
 8007424:	d11d      	bne.n	8007462 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007436:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800745e:	b662      	cpsie	i
 8007460:	e150      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007470:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007488:	e13c      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748e:	2b03      	cmp	r3, #3
 8007490:	f200 80f5 	bhi.w	800767e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	2b01      	cmp	r3, #1
 800749a:	d123      	bne.n	80074e4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800749c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fbfb 	bl	8007c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e13d      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e2:	e10f      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d150      	bne.n	800758e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	2200      	movs	r2, #0
 80074f4:	4906      	ldr	r1, [pc, #24]	; (8007510 <HAL_I2C_Mem_Read+0x244>)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fa78 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e112      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
 8007506:	bf00      	nop
 8007508:	00100002 	.word	0x00100002
 800750c:	ffff0000 	.word	0xffff0000
 8007510:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007514:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007524:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007558:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800758c:	e0ba      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2200      	movs	r2, #0
 8007596:	4967      	ldr	r1, [pc, #412]	; (8007734 <HAL_I2C_Mem_Read+0x468>)
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa27 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0c1      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80075b8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	2200      	movs	r2, #0
 80075f4:	494f      	ldr	r1, [pc, #316]	; (8007734 <HAL_I2C_Mem_Read+0x468>)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 f9f8 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e092      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007614:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007648:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800767c:	e042      	b.n	8007704 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fb0a 	bl	8007c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e04c      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d118      	bne.n	8007704 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f aebe 	bne.w	800748a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	00010004 	.word	0x00010004

08007738 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4603      	mov	r3, r0
 8007748:	817b      	strh	r3, [r7, #10]
 800774a:	460b      	mov	r3, r1
 800774c:	813b      	strh	r3, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	2200      	movs	r2, #0
 800776a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f93c 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e05f      	b.n	800783e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800777e:	897b      	ldrh	r3, [r7, #10]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800778c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	492d      	ldr	r1, [pc, #180]	; (8007848 <I2C_RequestMemoryWrite+0x110>)
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f980 	bl	8007a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e04c      	b.n	800783e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	6a39      	ldr	r1, [r7, #32]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f9ea 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d107      	bne.n	80077e2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e02b      	b.n	800783e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d105      	bne.n	80077f8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077ec:	893b      	ldrh	r3, [r7, #8]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	611a      	str	r2, [r3, #16]
 80077f6:	e021      	b.n	800783c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077f8:	893b      	ldrh	r3, [r7, #8]
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007808:	6a39      	ldr	r1, [r7, #32]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f9c4 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	2b04      	cmp	r3, #4
 800781c:	d107      	bne.n	800782e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800782c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e005      	b.n	800783e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007832:	893b      	ldrh	r3, [r7, #8]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	00010002 	.word	0x00010002

0800784c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	4608      	mov	r0, r1
 8007856:	4611      	mov	r1, r2
 8007858:	461a      	mov	r2, r3
 800785a:	4603      	mov	r3, r0
 800785c:	817b      	strh	r3, [r7, #10]
 800785e:	460b      	mov	r3, r1
 8007860:	813b      	strh	r3, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007874:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	2200      	movs	r2, #0
 800788e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f8aa 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e09e      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	494c      	ldr	r1, [pc, #304]	; (80079e8 <I2C_RequestMemoryRead+0x19c>)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f8ee 	bl	8007a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e08b      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e0:	6a39      	ldr	r1, [r7, #32]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f958 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d107      	bne.n	8007906 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e06a      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d105      	bne.n	800791c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	611a      	str	r2, [r3, #16]
 800791a:	e021      	b.n	8007960 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800791c:	893b      	ldrh	r3, [r7, #8]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800792a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792c:	6a39      	ldr	r1, [r7, #32]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f932 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b04      	cmp	r3, #4
 8007940:	d107      	bne.n	8007952 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e044      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007956:	893b      	ldrh	r3, [r7, #8]
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007962:	6a39      	ldr	r1, [r7, #32]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f917 	bl	8007b98 <I2C_WaitOnTXEFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	2b04      	cmp	r3, #4
 8007976:	d107      	bne.n	8007988 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007986:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e029      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800799a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f81f 	bl	80079ec <I2C_WaitOnFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e013      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079b8:	897b      	ldrh	r3, [r7, #10]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	4906      	ldr	r1, [pc, #24]	; (80079e8 <I2C_RequestMemoryRead+0x19c>)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f863 	bl	8007a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	00010002 	.word	0x00010002

080079ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	4613      	mov	r3, r2
 80079fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079fc:	e025      	b.n	8007a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a04:	d021      	beq.n	8007a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a06:	f7fe f8cf 	bl	8005ba8 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d116      	bne.n	8007a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e023      	b.n	8007a92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10d      	bne.n	8007a70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	43da      	mvns	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bf0c      	ite	eq
 8007a66:	2301      	moveq	r3, #1
 8007a68:	2300      	movne	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	e00c      	b.n	8007a8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d0b6      	beq.n	80079fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007aa8:	e051      	b.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab8:	d123      	bne.n	8007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ad2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e046      	b.n	8007b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b08:	d021      	beq.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0a:	f7fe f84d 	bl	8005ba8 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d302      	bcc.n	8007b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d116      	bne.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e020      	b.n	8007b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10c      	bne.n	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	43da      	mvns	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	2300      	moveq	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	e00b      	b.n	8007b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	43da      	mvns	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf14      	ite	ne
 8007b84:	2301      	movne	r3, #1
 8007b86:	2300      	moveq	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d18d      	bne.n	8007aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ba4:	e02d      	b.n	8007c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f8ce 	bl	8007d48 <I2C_IsAcknowledgeFailed>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e02d      	b.n	8007c12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bbc:	d021      	beq.n	8007c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7fd fff3 	bl	8005ba8 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d116      	bne.n	8007c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e007      	b.n	8007c12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d1ca      	bne.n	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c26:	e02d      	b.n	8007c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f88d 	bl	8007d48 <I2C_IsAcknowledgeFailed>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e02d      	b.n	8007c94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c3e:	d021      	beq.n	8007c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c40:	f7fd ffb2 	bl	8005ba8 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d302      	bcc.n	8007c56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d116      	bne.n	8007c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	f043 0220 	orr.w	r2, r3, #32
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e007      	b.n	8007c94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d1ca      	bne.n	8007c28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ca8:	e042      	b.n	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d119      	bne.n	8007cec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0210 	mvn.w	r2, #16
 8007cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e029      	b.n	8007d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cec:	f7fd ff5c 	bl	8005ba8 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d116      	bne.n	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f043 0220 	orr.w	r2, r3, #32
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e007      	b.n	8007d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d1b5      	bne.n	8007caa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d5e:	d11b      	bne.n	8007d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	f043 0204 	orr.w	r2, r3, #4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e26c      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8087 	beq.w	8007ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dc4:	4b92      	ldr	r3, [pc, #584]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d00c      	beq.n	8007dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007dd0:	4b8f      	ldr	r3, [pc, #572]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 030c 	and.w	r3, r3, #12
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d112      	bne.n	8007e02 <HAL_RCC_OscConfig+0x5e>
 8007ddc:	4b8c      	ldr	r3, [pc, #560]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de8:	d10b      	bne.n	8007e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dea:	4b89      	ldr	r3, [pc, #548]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d06c      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x12c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d168      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e246      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d106      	bne.n	8007e1a <HAL_RCC_OscConfig+0x76>
 8007e0c:	4b80      	ldr	r3, [pc, #512]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7f      	ldr	r2, [pc, #508]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e02e      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <HAL_RCC_OscConfig+0x98>
 8007e22:	4b7b      	ldr	r3, [pc, #492]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a7a      	ldr	r2, [pc, #488]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	4b78      	ldr	r3, [pc, #480]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a77      	ldr	r2, [pc, #476]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e01d      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0xbc>
 8007e46:	4b72      	ldr	r3, [pc, #456]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a71      	ldr	r2, [pc, #452]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	4b6f      	ldr	r3, [pc, #444]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a6e      	ldr	r2, [pc, #440]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	e00b      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e60:	4b6b      	ldr	r3, [pc, #428]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6a      	ldr	r2, [pc, #424]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4b68      	ldr	r3, [pc, #416]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a67      	ldr	r2, [pc, #412]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e80:	f7fd fe92 	bl	8005ba8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e88:	f7fd fe8e 	bl	8005ba8 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	; 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e1fa      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e9a:	4b5d      	ldr	r3, [pc, #372]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0xe4>
 8007ea6:	e014      	b.n	8007ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea8:	f7fd fe7e 	bl	8005ba8 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb0:	f7fd fe7a 	bl	8005ba8 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b64      	cmp	r3, #100	; 0x64
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e1e6      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ec2:	4b53      	ldr	r3, [pc, #332]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x10c>
 8007ece:	e000      	b.n	8007ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d063      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ede:	4b4c      	ldr	r3, [pc, #304]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007eea:	4b49      	ldr	r3, [pc, #292]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f003 030c 	and.w	r3, r3, #12
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d11c      	bne.n	8007f30 <HAL_RCC_OscConfig+0x18c>
 8007ef6:	4b46      	ldr	r3, [pc, #280]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d116      	bne.n	8007f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f02:	4b43      	ldr	r3, [pc, #268]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_RCC_OscConfig+0x176>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e1ba      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1a:	4b3d      	ldr	r3, [pc, #244]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4939      	ldr	r1, [pc, #228]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2e:	e03a      	b.n	8007fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d020      	beq.n	8007f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f38:	4b36      	ldr	r3, [pc, #216]	; (8008014 <HAL_RCC_OscConfig+0x270>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3e:	f7fd fe33 	bl	8005ba8 <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f44:	e008      	b.n	8007f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f46:	f7fd fe2f 	bl	8005ba8 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e19b      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0f0      	beq.n	8007f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f64:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4927      	ldr	r1, [pc, #156]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	600b      	str	r3, [r1, #0]
 8007f78:	e015      	b.n	8007fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7a:	4b26      	ldr	r3, [pc, #152]	; (8008014 <HAL_RCC_OscConfig+0x270>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f80:	f7fd fe12 	bl	8005ba8 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f88:	f7fd fe0e 	bl	8005ba8 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e17a      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9a:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d03a      	beq.n	8008028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d019      	beq.n	8007fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fba:	4b17      	ldr	r3, [pc, #92]	; (8008018 <HAL_RCC_OscConfig+0x274>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fc0:	f7fd fdf2 	bl	8005ba8 <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fc8:	f7fd fdee 	bl	8005ba8 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e15a      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <HAL_RCC_OscConfig+0x26c>)
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f000 fada 	bl	80085a0 <RCC_Delay>
 8007fec:	e01c      	b.n	8008028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <HAL_RCC_OscConfig+0x274>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff4:	f7fd fdd8 	bl	8005ba8 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ffa:	e00f      	b.n	800801c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ffc:	f7fd fdd4 	bl	8005ba8 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d908      	bls.n	800801c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e140      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
 800800e:	bf00      	nop
 8008010:	40021000 	.word	0x40021000
 8008014:	42420000 	.word	0x42420000
 8008018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800801c:	4b9e      	ldr	r3, [pc, #632]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e9      	bne.n	8007ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80a6 	beq.w	8008182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800803a:	4b97      	ldr	r3, [pc, #604]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10d      	bne.n	8008062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008046:	4b94      	ldr	r3, [pc, #592]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	4a93      	ldr	r2, [pc, #588]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008050:	61d3      	str	r3, [r2, #28]
 8008052:	4b91      	ldr	r3, [pc, #580]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008062:	4b8e      	ldr	r3, [pc, #568]	; (800829c <HAL_RCC_OscConfig+0x4f8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d118      	bne.n	80080a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800806e:	4b8b      	ldr	r3, [pc, #556]	; (800829c <HAL_RCC_OscConfig+0x4f8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a8a      	ldr	r2, [pc, #552]	; (800829c <HAL_RCC_OscConfig+0x4f8>)
 8008074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800807a:	f7fd fd95 	bl	8005ba8 <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008082:	f7fd fd91 	bl	8005ba8 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b64      	cmp	r3, #100	; 0x64
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e0fd      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008094:	4b81      	ldr	r3, [pc, #516]	; (800829c <HAL_RCC_OscConfig+0x4f8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d106      	bne.n	80080b6 <HAL_RCC_OscConfig+0x312>
 80080a8:	4b7b      	ldr	r3, [pc, #492]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	4a7a      	ldr	r2, [pc, #488]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	6213      	str	r3, [r2, #32]
 80080b4:	e02d      	b.n	8008112 <HAL_RCC_OscConfig+0x36e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10c      	bne.n	80080d8 <HAL_RCC_OscConfig+0x334>
 80080be:	4b76      	ldr	r3, [pc, #472]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	4a75      	ldr	r2, [pc, #468]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	6213      	str	r3, [r2, #32]
 80080ca:	4b73      	ldr	r3, [pc, #460]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	4a72      	ldr	r2, [pc, #456]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080d0:	f023 0304 	bic.w	r3, r3, #4
 80080d4:	6213      	str	r3, [r2, #32]
 80080d6:	e01c      	b.n	8008112 <HAL_RCC_OscConfig+0x36e>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b05      	cmp	r3, #5
 80080de:	d10c      	bne.n	80080fa <HAL_RCC_OscConfig+0x356>
 80080e0:	4b6d      	ldr	r3, [pc, #436]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	4a6c      	ldr	r2, [pc, #432]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080e6:	f043 0304 	orr.w	r3, r3, #4
 80080ea:	6213      	str	r3, [r2, #32]
 80080ec:	4b6a      	ldr	r3, [pc, #424]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	4a69      	ldr	r2, [pc, #420]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6213      	str	r3, [r2, #32]
 80080f8:	e00b      	b.n	8008112 <HAL_RCC_OscConfig+0x36e>
 80080fa:	4b67      	ldr	r3, [pc, #412]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	4a66      	ldr	r2, [pc, #408]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	6213      	str	r3, [r2, #32]
 8008106:	4b64      	ldr	r3, [pc, #400]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	4a63      	ldr	r2, [pc, #396]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800810c:	f023 0304 	bic.w	r3, r3, #4
 8008110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d015      	beq.n	8008146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811a:	f7fd fd45 	bl	8005ba8 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008120:	e00a      	b.n	8008138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008122:	f7fd fd41 	bl	8005ba8 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008130:	4293      	cmp	r3, r2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e0ab      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008138:	4b57      	ldr	r3, [pc, #348]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0ee      	beq.n	8008122 <HAL_RCC_OscConfig+0x37e>
 8008144:	e014      	b.n	8008170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008146:	f7fd fd2f 	bl	8005ba8 <HAL_GetTick>
 800814a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800814c:	e00a      	b.n	8008164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800814e:	f7fd fd2b 	bl	8005ba8 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f241 3288 	movw	r2, #5000	; 0x1388
 800815c:	4293      	cmp	r3, r2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e095      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008164:	4b4c      	ldr	r3, [pc, #304]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ee      	bne.n	800814e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d105      	bne.n	8008182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008176:	4b48      	ldr	r3, [pc, #288]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	4a47      	ldr	r2, [pc, #284]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800817c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8081 	beq.w	800828e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800818c:	4b42      	ldr	r3, [pc, #264]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 030c 	and.w	r3, r3, #12
 8008194:	2b08      	cmp	r3, #8
 8008196:	d061      	beq.n	800825c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d146      	bne.n	800822e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <HAL_RCC_OscConfig+0x4fc>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a6:	f7fd fcff 	bl	8005ba8 <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ae:	f7fd fcfb 	bl	8005ba8 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e067      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081c0:	4b35      	ldr	r3, [pc, #212]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f0      	bne.n	80081ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d4:	d108      	bne.n	80081e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80081d6:	4b30      	ldr	r3, [pc, #192]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	492d      	ldr	r1, [pc, #180]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081e8:	4b2b      	ldr	r3, [pc, #172]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a19      	ldr	r1, [r3, #32]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	430b      	orrs	r3, r1
 80081fa:	4927      	ldr	r1, [pc, #156]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008200:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <HAL_RCC_OscConfig+0x4fc>)
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008206:	f7fd fccf 	bl	8005ba8 <HAL_GetTick>
 800820a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800820c:	e008      	b.n	8008220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800820e:	f7fd fccb 	bl	8005ba8 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e037      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008220:	4b1d      	ldr	r3, [pc, #116]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <HAL_RCC_OscConfig+0x46a>
 800822c:	e02f      	b.n	800828e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800822e:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <HAL_RCC_OscConfig+0x4fc>)
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008234:	f7fd fcb8 	bl	8005ba8 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800823c:	f7fd fcb4 	bl	8005ba8 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e020      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <HAL_RCC_OscConfig+0x498>
 800825a:	e018      	b.n	800828e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e013      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008268:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <HAL_RCC_OscConfig+0x4f4>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	429a      	cmp	r2, r3
 800827a:	d106      	bne.n	800828a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008286:	429a      	cmp	r2, r3
 8008288:	d001      	beq.n	800828e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40021000 	.word	0x40021000
 800829c:	40007000 	.word	0x40007000
 80082a0:	42420060 	.word	0x42420060

080082a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0d0      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082b8:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d910      	bls.n	80082e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b67      	ldr	r3, [pc, #412]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 0207 	bic.w	r2, r3, #7
 80082ce:	4965      	ldr	r1, [pc, #404]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d6:	4b63      	ldr	r3, [pc, #396]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e0b8      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d020      	beq.n	8008336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008300:	4b59      	ldr	r3, [pc, #356]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	4a58      	ldr	r2, [pc, #352]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800830a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008318:	4b53      	ldr	r3, [pc, #332]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	4a52      	ldr	r2, [pc, #328]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800831e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008324:	4b50      	ldr	r3, [pc, #320]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	494d      	ldr	r1, [pc, #308]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008332:	4313      	orrs	r3, r2
 8008334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d040      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d107      	bne.n	800835a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800834a:	4b47      	ldr	r3, [pc, #284]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d115      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e07f      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d107      	bne.n	8008372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008362:	4b41      	ldr	r3, [pc, #260]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e073      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008372:	4b3d      	ldr	r3, [pc, #244]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e06b      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008382:	4b39      	ldr	r3, [pc, #228]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f023 0203 	bic.w	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4936      	ldr	r1, [pc, #216]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008390:	4313      	orrs	r3, r2
 8008392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008394:	f7fd fc08 	bl	8005ba8 <HAL_GetTick>
 8008398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839a:	e00a      	b.n	80083b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800839c:	f7fd fc04 	bl	8005ba8 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e053      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b2:	4b2d      	ldr	r3, [pc, #180]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f003 020c 	and.w	r2, r3, #12
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d1eb      	bne.n	800839c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083c4:	4b27      	ldr	r3, [pc, #156]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d210      	bcs.n	80083f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 0207 	bic.w	r2, r3, #7
 80083da:	4922      	ldr	r1, [pc, #136]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	4313      	orrs	r3, r2
 80083e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e2:	4b20      	ldr	r3, [pc, #128]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d001      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e032      	b.n	800845a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	4916      	ldr	r1, [pc, #88]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800840e:	4313      	orrs	r3, r2
 8008410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	490e      	ldr	r1, [pc, #56]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800842e:	4313      	orrs	r3, r2
 8008430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008432:	f000 f821 	bl	8008478 <HAL_RCC_GetSysClockFreq>
 8008436:	4601      	mov	r1, r0
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	091b      	lsrs	r3, r3, #4
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	4a0a      	ldr	r2, [pc, #40]	; (800846c <HAL_RCC_ClockConfig+0x1c8>)
 8008444:	5cd3      	ldrb	r3, [r2, r3]
 8008446:	fa21 f303 	lsr.w	r3, r1, r3
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <HAL_RCC_ClockConfig+0x1cc>)
 800844c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <HAL_RCC_ClockConfig+0x1d0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7fd fb66 	bl	8005b24 <HAL_InitTick>

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40022000 	.word	0x40022000
 8008468:	40021000 	.word	0x40021000
 800846c:	0800cc08 	.word	0x0800cc08
 8008470:	20000008 	.word	0x20000008
 8008474:	2000000c 	.word	0x2000000c

08008478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008478:	b490      	push	{r4, r7}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800847e:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008480:	1d3c      	adds	r4, r7, #4
 8008482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008488:	4b28      	ldr	r3, [pc, #160]	; (800852c <HAL_RCC_GetSysClockFreq+0xb4>)
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80084a2:	4b23      	ldr	r3, [pc, #140]	; (8008530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f003 030c 	and.w	r3, r3, #12
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d002      	beq.n	80084b8 <HAL_RCC_GetSysClockFreq+0x40>
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d003      	beq.n	80084be <HAL_RCC_GetSysClockFreq+0x46>
 80084b6:	e02d      	b.n	8008514 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084ba:	623b      	str	r3, [r7, #32]
      break;
 80084bc:	e02d      	b.n	800851a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	0c9b      	lsrs	r3, r3, #18
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084ca:	4413      	add	r3, r2
 80084cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80084d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d013      	beq.n	8008504 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80084dc:	4b14      	ldr	r3, [pc, #80]	; (8008530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	0c5b      	lsrs	r3, r3, #17
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084ea:	4413      	add	r3, r2
 80084ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80084f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4a0f      	ldr	r2, [pc, #60]	; (8008534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084f6:	fb02 f203 	mul.w	r2, r2, r3
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
 8008502:	e004      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4a0c      	ldr	r2, [pc, #48]	; (8008538 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008508:	fb02 f303 	mul.w	r3, r2, r3
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	623b      	str	r3, [r7, #32]
      break;
 8008512:	e002      	b.n	800851a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008514:	4b07      	ldr	r3, [pc, #28]	; (8008534 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008516:	623b      	str	r3, [r7, #32]
      break;
 8008518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800851a:	6a3b      	ldr	r3, [r7, #32]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3728      	adds	r7, #40	; 0x28
 8008520:	46bd      	mov	sp, r7
 8008522:	bc90      	pop	{r4, r7}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	0800c440 	.word	0x0800c440
 800852c:	0800c450 	.word	0x0800c450
 8008530:	40021000 	.word	0x40021000
 8008534:	007a1200 	.word	0x007a1200
 8008538:	003d0900 	.word	0x003d0900

0800853c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <HAL_RCC_GetHCLKFreq+0x10>)
 8008542:	681b      	ldr	r3, [r3, #0]
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	20000008 	.word	0x20000008

08008550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008554:	f7ff fff2 	bl	800853c <HAL_RCC_GetHCLKFreq>
 8008558:	4601      	mov	r1, r0
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	4a03      	ldr	r2, [pc, #12]	; (8008574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008566:	5cd3      	ldrb	r3, [r2, r3]
 8008568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800856c:	4618      	mov	r0, r3
 800856e:	bd80      	pop	{r7, pc}
 8008570:	40021000 	.word	0x40021000
 8008574:	0800cc18 	.word	0x0800cc18

08008578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800857c:	f7ff ffde 	bl	800853c <HAL_RCC_GetHCLKFreq>
 8008580:	4601      	mov	r1, r0
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	0adb      	lsrs	r3, r3, #11
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	4a03      	ldr	r2, [pc, #12]	; (800859c <HAL_RCC_GetPCLK2Freq+0x24>)
 800858e:	5cd3      	ldrb	r3, [r2, r3]
 8008590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008594:	4618      	mov	r0, r3
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40021000 	.word	0x40021000
 800859c:	0800cc18 	.word	0x0800cc18

080085a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80085a8:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <RCC_Delay+0x34>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a0a      	ldr	r2, [pc, #40]	; (80085d8 <RCC_Delay+0x38>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	0a5b      	lsrs	r3, r3, #9
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
 80085ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80085bc:	bf00      	nop
  }
  while (Delay --);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1e5a      	subs	r2, r3, #1
 80085c2:	60fa      	str	r2, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f9      	bne.n	80085bc <RCC_Delay+0x1c>
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000008 	.word	0x20000008
 80085d8:	10624dd3 	.word	0x10624dd3

080085dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d07d      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80085f8:	2300      	movs	r3, #0
 80085fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085fc:	4b4f      	ldr	r3, [pc, #316]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10d      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008608:	4b4c      	ldr	r3, [pc, #304]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	4a4b      	ldr	r2, [pc, #300]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800860e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008612:	61d3      	str	r3, [r2, #28]
 8008614:	4b49      	ldr	r3, [pc, #292]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008620:	2301      	movs	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008624:	4b46      	ldr	r3, [pc, #280]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862c:	2b00      	cmp	r3, #0
 800862e:	d118      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008630:	4b43      	ldr	r3, [pc, #268]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a42      	ldr	r2, [pc, #264]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800863c:	f7fd fab4 	bl	8005ba8 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008642:	e008      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7fd fab0 	bl	8005ba8 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e06d      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008656:	4b3a      	ldr	r3, [pc, #232]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008662:	4b36      	ldr	r3, [pc, #216]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02e      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	429a      	cmp	r2, r3
 800867e:	d027      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008680:	4b2e      	ldr	r3, [pc, #184]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008688:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800868a:	4b2e      	ldr	r3, [pc, #184]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008690:	4b2c      	ldr	r3, [pc, #176]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008696:	4a29      	ldr	r2, [pc, #164]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d014      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a6:	f7fd fa7f 	bl	8005ba8 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ac:	e00a      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ae:	f7fd fa7b 	bl	8005ba8 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086bc:	4293      	cmp	r3, r2
 80086be:	d901      	bls.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e036      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086c4:	4b1d      	ldr	r3, [pc, #116]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0ee      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4917      	ldr	r1, [pc, #92]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e8:	4b14      	ldr	r3, [pc, #80]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	4a13      	ldr	r2, [pc, #76]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	490b      	ldr	r1, [pc, #44]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800870e:	4313      	orrs	r3, r2
 8008710:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	4904      	ldr	r1, [pc, #16]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800872c:	4313      	orrs	r3, r2
 800872e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	40021000 	.word	0x40021000
 8008740:	40007000 	.word	0x40007000
 8008744:	42420440 	.word	0x42420440

08008748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b08d      	sub	sp, #52	; 0x34
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008750:	4b55      	ldr	r3, [pc, #340]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008752:	f107 040c 	add.w	r4, r7, #12
 8008756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800875c:	4b53      	ldr	r3, [pc, #332]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
 8008766:	2300      	movs	r3, #0
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800876a:	2300      	movs	r3, #0
 800876c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	2300      	movs	r3, #0
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d07f      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800877c:	2b10      	cmp	r3, #16
 800877e:	d002      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8008780:	2b01      	cmp	r3, #1
 8008782:	d048      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008784:	e08b      	b.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8008786:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800878c:	4b48      	ldr	r3, [pc, #288]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d07f      	beq.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	0c9b      	lsrs	r3, r3, #18
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80087a4:	4413      	add	r3, r2
 80087a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80087aa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80087b6:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0c5b      	lsrs	r3, r3, #17
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80087c4:	4413      	add	r3, r2
 80087c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00d      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80087d6:	4a37      	ldr	r2, [pc, #220]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	fbb2 f2f3 	udiv	r2, r2, r3
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	fb02 f303 	mul.w	r3, r2, r3
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e6:	e004      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	4a33      	ldr	r2, [pc, #204]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80087ec:	fb02 f303 	mul.w	r3, r2, r3
 80087f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80087f2:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087fe:	d102      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008804:	e048      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4a2c      	ldr	r2, [pc, #176]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008814:	e040      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8008816:	4b26      	ldr	r3, [pc, #152]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008826:	d108      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
 8008838:	e01f      	b.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008844:	d109      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8008852:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
 8008858:	e00f      	b.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008864:	d11a      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008866:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d014      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8008872:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008878:	e010      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800887a:	e00f      	b.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800887c:	f7ff fe7c 	bl	8008578 <HAL_RCC_GetPCLK2Freq>
 8008880:	4602      	mov	r2, r0
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	0b9b      	lsrs	r3, r3, #14
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	3301      	adds	r3, #1
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008896:	e002      	b.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8008898:	bf00      	nop
 800889a:	e000      	b.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800889c:	bf00      	nop
    }
  }
  return (frequency);
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3734      	adds	r7, #52	; 0x34
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd90      	pop	{r4, r7, pc}
 80088a8:	0800c454 	.word	0x0800c454
 80088ac:	0800c464 	.word	0x0800c464
 80088b0:	40021000 	.word	0x40021000
 80088b4:	007a1200 	.word	0x007a1200
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	aaaaaaab 	.word	0xaaaaaaab

080088c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e053      	b.n	800897a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7fb fc29 	bl	8004144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2202      	movs	r2, #2
 80088f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008908:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	ea42 0103 	orr.w	r1, r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	0c1a      	lsrs	r2, r3, #16
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f002 0204 	and.w	r2, r2, #4
 8008958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e01d      	b.n	80089d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7fb fc17 	bl	80041dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f000 fb45 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0201 	orr.w	r2, r2, #1
 80089ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d007      	beq.n	8008a12 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0201 	orr.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr

08008a1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e01d      	b.n	8008a6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f815 	bl	8008a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f000 faf7 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr
	...

08008a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2201      	movs	r2, #1
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fd58 	bl	8009550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a10      	ldr	r2, [pc, #64]	; (8008ae8 <HAL_TIM_PWM_Start+0x60>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d107      	bne.n	8008aba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b06      	cmp	r3, #6
 8008aca:	d007      	beq.n	8008adc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40012c00 	.word	0x40012c00

08008aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d122      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d11b      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0202 	mvn.w	r2, #2
 8008b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa73 	bl	800901a <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fa66 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa75 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d122      	bne.n	8008b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d11b      	bne.n	8008b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0204 	mvn.w	r2, #4
 8008b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2202      	movs	r2, #2
 8008b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa49 	bl	800901a <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa3c 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa4b 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0208 	mvn.w	r2, #8
 8008bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa1f 	bl	800901a <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa12 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fa21 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d122      	bne.n	8008c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d11b      	bne.n	8008c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0210 	mvn.w	r2, #16
 8008c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f9f5 	bl	800901a <HAL_TIM_IC_CaptureCallback>
 8008c30:	e005      	b.n	8008c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9e8 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9f7 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d10e      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d107      	bne.n	8008c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0201 	mvn.w	r2, #1
 8008c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9c3 	bl	8008ff6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	2b80      	cmp	r3, #128	; 0x80
 8008c7c:	d10e      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c88:	2b80      	cmp	r3, #128	; 0x80
 8008c8a:	d107      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fd1c 	bl	80096d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d10e      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d107      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9bb 	bl	800903e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d10e      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0220 	mvn.w	r2, #32
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fce7 	bl	80096c2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e0b4      	b.n	8008e80 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2202      	movs	r2, #2
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b0c      	cmp	r3, #12
 8008d2a:	f200 809f 	bhi.w	8008e6c <HAL_TIM_PWM_ConfigChannel+0x170>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d69 	.word	0x08008d69
 8008d38:	08008e6d 	.word	0x08008e6d
 8008d3c:	08008e6d 	.word	0x08008e6d
 8008d40:	08008e6d 	.word	0x08008e6d
 8008d44:	08008da9 	.word	0x08008da9
 8008d48:	08008e6d 	.word	0x08008e6d
 8008d4c:	08008e6d 	.word	0x08008e6d
 8008d50:	08008e6d 	.word	0x08008e6d
 8008d54:	08008deb 	.word	0x08008deb
 8008d58:	08008e6d 	.word	0x08008e6d
 8008d5c:	08008e6d 	.word	0x08008e6d
 8008d60:	08008e6d 	.word	0x08008e6d
 8008d64:	08008e2b 	.word	0x08008e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f9d0 	bl	8009114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699a      	ldr	r2, [r3, #24]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0208 	orr.w	r2, r2, #8
 8008d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0204 	bic.w	r2, r2, #4
 8008d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6999      	ldr	r1, [r3, #24]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	619a      	str	r2, [r3, #24]
      break;
 8008da6:	e062      	b.n	8008e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fa16 	bl	80091e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699a      	ldr	r2, [r3, #24]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6999      	ldr	r1, [r3, #24]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	021a      	lsls	r2, r3, #8
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	619a      	str	r2, [r3, #24]
      break;
 8008de8:	e041      	b.n	8008e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fa5f 	bl	80092b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69da      	ldr	r2, [r3, #28]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0208 	orr.w	r2, r2, #8
 8008e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69da      	ldr	r2, [r3, #28]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0204 	bic.w	r2, r2, #4
 8008e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69d9      	ldr	r1, [r3, #28]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	61da      	str	r2, [r3, #28]
      break;
 8008e28:	e021      	b.n	8008e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 faa9 	bl	8009388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69d9      	ldr	r1, [r3, #28]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	021a      	lsls	r2, r3, #8
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	61da      	str	r2, [r3, #28]
      break;
 8008e6a:	e000      	b.n	8008e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008e6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_TIM_ConfigClockSource+0x18>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e0a6      	b.n	8008fee <HAL_TIM_ConfigClockSource+0x166>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ec6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d067      	beq.n	8008fa8 <HAL_TIM_ConfigClockSource+0x120>
 8008ed8:	2b40      	cmp	r3, #64	; 0x40
 8008eda:	d80b      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x6c>
 8008edc:	2b10      	cmp	r3, #16
 8008ede:	d073      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x140>
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d802      	bhi.n	8008eea <HAL_TIM_ConfigClockSource+0x62>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d06f      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ee8:	e078      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	d06c      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x140>
 8008eee:	2b30      	cmp	r3, #48	; 0x30
 8008ef0:	d06a      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008ef2:	e073      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ef4:	2b70      	cmp	r3, #112	; 0x70
 8008ef6:	d00d      	beq.n	8008f14 <HAL_TIM_ConfigClockSource+0x8c>
 8008ef8:	2b70      	cmp	r3, #112	; 0x70
 8008efa:	d804      	bhi.n	8008f06 <HAL_TIM_ConfigClockSource+0x7e>
 8008efc:	2b50      	cmp	r3, #80	; 0x50
 8008efe:	d033      	beq.n	8008f68 <HAL_TIM_ConfigClockSource+0xe0>
 8008f00:	2b60      	cmp	r3, #96	; 0x60
 8008f02:	d041      	beq.n	8008f88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008f04:	e06a      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0a:	d066      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x152>
 8008f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f10:	d017      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008f12:	e063      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f000 faf5 	bl	8009512 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	609a      	str	r2, [r3, #8]
      break;
 8008f40:	e04c      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	6899      	ldr	r1, [r3, #8]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f000 fade 	bl	8009512 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f64:	609a      	str	r2, [r3, #8]
      break;
 8008f66:	e039      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	6859      	ldr	r1, [r3, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f000 fa55 	bl	8009424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2150      	movs	r1, #80	; 0x50
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 faac 	bl	80094de <TIM_ITRx_SetConfig>
      break;
 8008f86:	e029      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	6859      	ldr	r1, [r3, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	461a      	mov	r2, r3
 8008f96:	f000 fa73 	bl	8009480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2160      	movs	r1, #96	; 0x60
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fa9c 	bl	80094de <TIM_ITRx_SetConfig>
      break;
 8008fa6:	e019      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	6859      	ldr	r1, [r3, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f000 fa35 	bl	8009424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2140      	movs	r1, #64	; 0x40
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fa8c 	bl	80094de <TIM_ITRx_SetConfig>
      break;
 8008fc6:	e009      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f000 fa83 	bl	80094de <TIM_ITRx_SetConfig>
      break;
 8008fd8:	e000      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr

0800901a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr

0800902c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr

0800903e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a29      	ldr	r2, [pc, #164]	; (8009108 <TIM_Base_SetConfig+0xb8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00b      	beq.n	8009080 <TIM_Base_SetConfig+0x30>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906e:	d007      	beq.n	8009080 <TIM_Base_SetConfig+0x30>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a26      	ldr	r2, [pc, #152]	; (800910c <TIM_Base_SetConfig+0xbc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_Base_SetConfig+0x30>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a25      	ldr	r2, [pc, #148]	; (8009110 <TIM_Base_SetConfig+0xc0>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d108      	bne.n	8009092 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <TIM_Base_SetConfig+0xb8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00b      	beq.n	80090b2 <TIM_Base_SetConfig+0x62>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a0:	d007      	beq.n	80090b2 <TIM_Base_SetConfig+0x62>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a19      	ldr	r2, [pc, #100]	; (800910c <TIM_Base_SetConfig+0xbc>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d003      	beq.n	80090b2 <TIM_Base_SetConfig+0x62>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a18      	ldr	r2, [pc, #96]	; (8009110 <TIM_Base_SetConfig+0xc0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d108      	bne.n	80090c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <TIM_Base_SetConfig+0xb8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d103      	bne.n	80090f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	615a      	str	r2, [r3, #20]
}
 80090fe:	bf00      	nop
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr
 8009108:	40012c00 	.word	0x40012c00
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800

08009114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	f023 0201 	bic.w	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f023 0302 	bic.w	r3, r3, #2
 800915c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <TIM_OC1_SetConfig+0xc8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10c      	bne.n	800918a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 0308 	bic.w	r3, r3, #8
 8009176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f023 0304 	bic.w	r3, r3, #4
 8009188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a13      	ldr	r2, [pc, #76]	; (80091dc <TIM_OC1_SetConfig+0xc8>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d111      	bne.n	80091b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	621a      	str	r2, [r3, #32]
}
 80091d0:	bf00      	nop
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40012c00 	.word	0x40012c00

080091e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f023 0210 	bic.w	r2, r3, #16
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f023 0320 	bic.w	r3, r3, #32
 800922a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	4313      	orrs	r3, r2
 8009236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a1d      	ldr	r2, [pc, #116]	; (80092b0 <TIM_OC2_SetConfig+0xd0>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10d      	bne.n	800925c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a14      	ldr	r2, [pc, #80]	; (80092b0 <TIM_OC2_SetConfig+0xd0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d113      	bne.n	800928c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800926a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr
 80092b0:	40012c00 	.word	0x40012c00

080092b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <TIM_OC3_SetConfig+0xd0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10d      	bne.n	800932e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	021b      	lsls	r3, r3, #8
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800932c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a14      	ldr	r2, [pc, #80]	; (8009384 <TIM_OC3_SetConfig+0xd0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d113      	bne.n	800935e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800933c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	4313      	orrs	r3, r2
 8009350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	621a      	str	r2, [r3, #32]
}
 8009378:	bf00      	nop
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40012c00 	.word	0x40012c00

08009388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	031b      	lsls	r3, r3, #12
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a0f      	ldr	r2, [pc, #60]	; (8009420 <TIM_OC4_SetConfig+0x98>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d109      	bne.n	80093fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	019b      	lsls	r3, r3, #6
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr
 8009420:	40012c00 	.word	0x40012c00

08009424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	f023 0201 	bic.w	r2, r3, #1
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800944e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	4313      	orrs	r3, r2
 8009458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f023 030a 	bic.w	r3, r3, #10
 8009460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr

08009480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	f023 0210 	bic.w	r2, r3, #16
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	031b      	lsls	r3, r3, #12
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	621a      	str	r2, [r3, #32]
}
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr

080094de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094de:	b480      	push	{r7}
 80094e0:	b085      	sub	sp, #20
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f043 0307 	orr.w	r3, r3, #7
 8009500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	609a      	str	r2, [r3, #8]
}
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr

08009512 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800952c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	021a      	lsls	r2, r3, #8
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	431a      	orrs	r2, r3
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4313      	orrs	r3, r2
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	609a      	str	r2, [r3, #8]
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2201      	movs	r2, #1
 8009564:	fa02 f303 	lsl.w	r3, r2, r3
 8009568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1a      	ldr	r2, [r3, #32]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6a1a      	ldr	r2, [r3, #32]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f003 031f 	and.w	r3, r3, #31
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	fa01 f303 	lsl.w	r3, r1, r3
 8009588:	431a      	orrs	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
}
 800958e:	bf00      	nop
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr

08009598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e032      	b.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095e8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009638:	2302      	movs	r3, #2
 800963a:	e03d      	b.n	80096b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc80      	pop	{r7}
 80096c0:	4770      	bx	lr

080096c2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e03f      	b.n	8009778 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fa fdd1 	bl	80042b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2224      	movs	r2, #36	; 0x24
 8009716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009728:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f828 	bl	8009780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800973e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695a      	ldr	r2, [r3, #20]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800974e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800975e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80097ba:	f023 030c 	bic.w	r3, r3, #12
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	430b      	orrs	r3, r1
 80097c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a52      	ldr	r2, [pc, #328]	; (800992c <UART_SetConfig+0x1ac>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d14e      	bne.n	8009886 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80097e8:	f7fe fec6 	bl	8008578 <HAL_RCC_GetPCLK2Freq>
 80097ec:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009a      	lsls	r2, r3, #2
 80097f8:	441a      	add	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	fbb2 f3f3 	udiv	r3, r2, r3
 8009804:	4a4a      	ldr	r2, [pc, #296]	; (8009930 <UART_SetConfig+0x1b0>)
 8009806:	fba2 2303 	umull	r2, r3, r2, r3
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	0119      	lsls	r1, r3, #4
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009a      	lsls	r2, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	fbb2 f2f3 	udiv	r2, r2, r3
 8009824:	4b42      	ldr	r3, [pc, #264]	; (8009930 <UART_SetConfig+0x1b0>)
 8009826:	fba3 0302 	umull	r0, r3, r3, r2
 800982a:	095b      	lsrs	r3, r3, #5
 800982c:	2064      	movs	r0, #100	; 0x64
 800982e:	fb00 f303 	mul.w	r3, r0, r3
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	3332      	adds	r3, #50	; 0x32
 8009838:	4a3d      	ldr	r2, [pc, #244]	; (8009930 <UART_SetConfig+0x1b0>)
 800983a:	fba2 2303 	umull	r2, r3, r2, r3
 800983e:	095b      	lsrs	r3, r3, #5
 8009840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009844:	4419      	add	r1, r3
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009a      	lsls	r2, r3, #2
 8009850:	441a      	add	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	fbb2 f2f3 	udiv	r2, r2, r3
 800985c:	4b34      	ldr	r3, [pc, #208]	; (8009930 <UART_SetConfig+0x1b0>)
 800985e:	fba3 0302 	umull	r0, r3, r3, r2
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	2064      	movs	r0, #100	; 0x64
 8009866:	fb00 f303 	mul.w	r3, r0, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	011b      	lsls	r3, r3, #4
 800986e:	3332      	adds	r3, #50	; 0x32
 8009870:	4a2f      	ldr	r2, [pc, #188]	; (8009930 <UART_SetConfig+0x1b0>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	440a      	add	r2, r1
 8009882:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009884:	e04d      	b.n	8009922 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009886:	f7fe fe63 	bl	8008550 <HAL_RCC_GetPCLK1Freq>
 800988a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	009a      	lsls	r2, r3, #2
 8009896:	441a      	add	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a2:	4a23      	ldr	r2, [pc, #140]	; (8009930 <UART_SetConfig+0x1b0>)
 80098a4:	fba2 2303 	umull	r2, r3, r2, r3
 80098a8:	095b      	lsrs	r3, r3, #5
 80098aa:	0119      	lsls	r1, r3, #4
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009a      	lsls	r2, r3, #2
 80098b6:	441a      	add	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	fbb2 f2f3 	udiv	r2, r2, r3
 80098c2:	4b1b      	ldr	r3, [pc, #108]	; (8009930 <UART_SetConfig+0x1b0>)
 80098c4:	fba3 0302 	umull	r0, r3, r3, r2
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	2064      	movs	r0, #100	; 0x64
 80098cc:	fb00 f303 	mul.w	r3, r0, r3
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	3332      	adds	r3, #50	; 0x32
 80098d6:	4a16      	ldr	r2, [pc, #88]	; (8009930 <UART_SetConfig+0x1b0>)
 80098d8:	fba2 2303 	umull	r2, r3, r2, r3
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098e2:	4419      	add	r1, r3
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009a      	lsls	r2, r3, #2
 80098ee:	441a      	add	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <UART_SetConfig+0x1b0>)
 80098fc:	fba3 0302 	umull	r0, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2064      	movs	r0, #100	; 0x64
 8009904:	fb00 f303 	mul.w	r3, r0, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <UART_SetConfig+0x1b0>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 020f 	and.w	r2, r3, #15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	440a      	add	r2, r1
 8009920:	609a      	str	r2, [r3, #8]
}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40013800 	.word	0x40013800
 8009930:	51eb851f 	.word	0x51eb851f

08009934 <__errno>:
 8009934:	4b01      	ldr	r3, [pc, #4]	; (800993c <__errno+0x8>)
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	20000014 	.word	0x20000014

08009940 <__libc_init_array>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	2500      	movs	r5, #0
 8009944:	4e0c      	ldr	r6, [pc, #48]	; (8009978 <__libc_init_array+0x38>)
 8009946:	4c0d      	ldr	r4, [pc, #52]	; (800997c <__libc_init_array+0x3c>)
 8009948:	1ba4      	subs	r4, r4, r6
 800994a:	10a4      	asrs	r4, r4, #2
 800994c:	42a5      	cmp	r5, r4
 800994e:	d109      	bne.n	8009964 <__libc_init_array+0x24>
 8009950:	f002 fbea 	bl	800c128 <_init>
 8009954:	2500      	movs	r5, #0
 8009956:	4e0a      	ldr	r6, [pc, #40]	; (8009980 <__libc_init_array+0x40>)
 8009958:	4c0a      	ldr	r4, [pc, #40]	; (8009984 <__libc_init_array+0x44>)
 800995a:	1ba4      	subs	r4, r4, r6
 800995c:	10a4      	asrs	r4, r4, #2
 800995e:	42a5      	cmp	r5, r4
 8009960:	d105      	bne.n	800996e <__libc_init_array+0x2e>
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009968:	4798      	blx	r3
 800996a:	3501      	adds	r5, #1
 800996c:	e7ee      	b.n	800994c <__libc_init_array+0xc>
 800996e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009972:	4798      	blx	r3
 8009974:	3501      	adds	r5, #1
 8009976:	e7f2      	b.n	800995e <__libc_init_array+0x1e>
 8009978:	0800cec8 	.word	0x0800cec8
 800997c:	0800cec8 	.word	0x0800cec8
 8009980:	0800cec8 	.word	0x0800cec8
 8009984:	0800cecc 	.word	0x0800cecc

08009988 <malloc>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <malloc+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f000 b879 	b.w	8009a84 <_malloc_r>
 8009992:	bf00      	nop
 8009994:	20000014 	.word	0x20000014

08009998 <free>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <free+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f000 b825 	b.w	80099ec <_free_r>
 80099a2:	bf00      	nop
 80099a4:	20000014 	.word	0x20000014

080099a8 <memcmp>:
 80099a8:	b530      	push	{r4, r5, lr}
 80099aa:	2400      	movs	r4, #0
 80099ac:	42a2      	cmp	r2, r4
 80099ae:	d101      	bne.n	80099b4 <memcmp+0xc>
 80099b0:	2000      	movs	r0, #0
 80099b2:	e007      	b.n	80099c4 <memcmp+0x1c>
 80099b4:	5d03      	ldrb	r3, [r0, r4]
 80099b6:	3401      	adds	r4, #1
 80099b8:	190d      	adds	r5, r1, r4
 80099ba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80099be:	42ab      	cmp	r3, r5
 80099c0:	d0f4      	beq.n	80099ac <memcmp+0x4>
 80099c2:	1b58      	subs	r0, r3, r5
 80099c4:	bd30      	pop	{r4, r5, pc}

080099c6 <memcpy>:
 80099c6:	b510      	push	{r4, lr}
 80099c8:	1e43      	subs	r3, r0, #1
 80099ca:	440a      	add	r2, r1
 80099cc:	4291      	cmp	r1, r2
 80099ce:	d100      	bne.n	80099d2 <memcpy+0xc>
 80099d0:	bd10      	pop	{r4, pc}
 80099d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099da:	e7f7      	b.n	80099cc <memcpy+0x6>

080099dc <memset>:
 80099dc:	4603      	mov	r3, r0
 80099de:	4402      	add	r2, r0
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d100      	bne.n	80099e6 <memset+0xa>
 80099e4:	4770      	bx	lr
 80099e6:	f803 1b01 	strb.w	r1, [r3], #1
 80099ea:	e7f9      	b.n	80099e0 <memset+0x4>

080099ec <_free_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4605      	mov	r5, r0
 80099f0:	2900      	cmp	r1, #0
 80099f2:	d043      	beq.n	8009a7c <_free_r+0x90>
 80099f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f8:	1f0c      	subs	r4, r1, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bfb8      	it	lt
 80099fe:	18e4      	addlt	r4, r4, r3
 8009a00:	f001 fb7a 	bl	800b0f8 <__malloc_lock>
 8009a04:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <_free_r+0x94>)
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	4610      	mov	r0, r2
 8009a0a:	b933      	cbnz	r3, 8009a1a <_free_r+0x2e>
 8009a0c:	6063      	str	r3, [r4, #4]
 8009a0e:	6014      	str	r4, [r2, #0]
 8009a10:	4628      	mov	r0, r5
 8009a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a16:	f001 bb70 	b.w	800b0fa <__malloc_unlock>
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	d90b      	bls.n	8009a36 <_free_r+0x4a>
 8009a1e:	6821      	ldr	r1, [r4, #0]
 8009a20:	1862      	adds	r2, r4, r1
 8009a22:	4293      	cmp	r3, r2
 8009a24:	bf01      	itttt	eq
 8009a26:	681a      	ldreq	r2, [r3, #0]
 8009a28:	685b      	ldreq	r3, [r3, #4]
 8009a2a:	1852      	addeq	r2, r2, r1
 8009a2c:	6022      	streq	r2, [r4, #0]
 8009a2e:	6063      	str	r3, [r4, #4]
 8009a30:	6004      	str	r4, [r0, #0]
 8009a32:	e7ed      	b.n	8009a10 <_free_r+0x24>
 8009a34:	4613      	mov	r3, r2
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	b10a      	cbz	r2, 8009a3e <_free_r+0x52>
 8009a3a:	42a2      	cmp	r2, r4
 8009a3c:	d9fa      	bls.n	8009a34 <_free_r+0x48>
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	1858      	adds	r0, r3, r1
 8009a42:	42a0      	cmp	r0, r4
 8009a44:	d10b      	bne.n	8009a5e <_free_r+0x72>
 8009a46:	6820      	ldr	r0, [r4, #0]
 8009a48:	4401      	add	r1, r0
 8009a4a:	1858      	adds	r0, r3, r1
 8009a4c:	4282      	cmp	r2, r0
 8009a4e:	6019      	str	r1, [r3, #0]
 8009a50:	d1de      	bne.n	8009a10 <_free_r+0x24>
 8009a52:	6810      	ldr	r0, [r2, #0]
 8009a54:	6852      	ldr	r2, [r2, #4]
 8009a56:	4401      	add	r1, r0
 8009a58:	6019      	str	r1, [r3, #0]
 8009a5a:	605a      	str	r2, [r3, #4]
 8009a5c:	e7d8      	b.n	8009a10 <_free_r+0x24>
 8009a5e:	d902      	bls.n	8009a66 <_free_r+0x7a>
 8009a60:	230c      	movs	r3, #12
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	e7d4      	b.n	8009a10 <_free_r+0x24>
 8009a66:	6820      	ldr	r0, [r4, #0]
 8009a68:	1821      	adds	r1, r4, r0
 8009a6a:	428a      	cmp	r2, r1
 8009a6c:	bf01      	itttt	eq
 8009a6e:	6811      	ldreq	r1, [r2, #0]
 8009a70:	6852      	ldreq	r2, [r2, #4]
 8009a72:	1809      	addeq	r1, r1, r0
 8009a74:	6021      	streq	r1, [r4, #0]
 8009a76:	6062      	str	r2, [r4, #4]
 8009a78:	605c      	str	r4, [r3, #4]
 8009a7a:	e7c9      	b.n	8009a10 <_free_r+0x24>
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000248 	.word	0x20000248

08009a84 <_malloc_r>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	1ccd      	adds	r5, r1, #3
 8009a88:	f025 0503 	bic.w	r5, r5, #3
 8009a8c:	3508      	adds	r5, #8
 8009a8e:	2d0c      	cmp	r5, #12
 8009a90:	bf38      	it	cc
 8009a92:	250c      	movcc	r5, #12
 8009a94:	2d00      	cmp	r5, #0
 8009a96:	4606      	mov	r6, r0
 8009a98:	db01      	blt.n	8009a9e <_malloc_r+0x1a>
 8009a9a:	42a9      	cmp	r1, r5
 8009a9c:	d903      	bls.n	8009aa6 <_malloc_r+0x22>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	f001 fb27 	bl	800b0f8 <__malloc_lock>
 8009aaa:	4a21      	ldr	r2, [pc, #132]	; (8009b30 <_malloc_r+0xac>)
 8009aac:	6814      	ldr	r4, [r2, #0]
 8009aae:	4621      	mov	r1, r4
 8009ab0:	b991      	cbnz	r1, 8009ad8 <_malloc_r+0x54>
 8009ab2:	4c20      	ldr	r4, [pc, #128]	; (8009b34 <_malloc_r+0xb0>)
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	b91b      	cbnz	r3, 8009ac0 <_malloc_r+0x3c>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 fc8d 	bl	800a3d8 <_sbrk_r>
 8009abe:	6020      	str	r0, [r4, #0]
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 fc88 	bl	800a3d8 <_sbrk_r>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d124      	bne.n	8009b16 <_malloc_r+0x92>
 8009acc:	230c      	movs	r3, #12
 8009ace:	4630      	mov	r0, r6
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	f001 fb12 	bl	800b0fa <__malloc_unlock>
 8009ad6:	e7e4      	b.n	8009aa2 <_malloc_r+0x1e>
 8009ad8:	680b      	ldr	r3, [r1, #0]
 8009ada:	1b5b      	subs	r3, r3, r5
 8009adc:	d418      	bmi.n	8009b10 <_malloc_r+0x8c>
 8009ade:	2b0b      	cmp	r3, #11
 8009ae0:	d90f      	bls.n	8009b02 <_malloc_r+0x7e>
 8009ae2:	600b      	str	r3, [r1, #0]
 8009ae4:	18cc      	adds	r4, r1, r3
 8009ae6:	50cd      	str	r5, [r1, r3]
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f001 fb06 	bl	800b0fa <__malloc_unlock>
 8009aee:	f104 000b 	add.w	r0, r4, #11
 8009af2:	1d23      	adds	r3, r4, #4
 8009af4:	f020 0007 	bic.w	r0, r0, #7
 8009af8:	1ac3      	subs	r3, r0, r3
 8009afa:	d0d3      	beq.n	8009aa4 <_malloc_r+0x20>
 8009afc:	425a      	negs	r2, r3
 8009afe:	50e2      	str	r2, [r4, r3]
 8009b00:	e7d0      	b.n	8009aa4 <_malloc_r+0x20>
 8009b02:	684b      	ldr	r3, [r1, #4]
 8009b04:	428c      	cmp	r4, r1
 8009b06:	bf16      	itet	ne
 8009b08:	6063      	strne	r3, [r4, #4]
 8009b0a:	6013      	streq	r3, [r2, #0]
 8009b0c:	460c      	movne	r4, r1
 8009b0e:	e7eb      	b.n	8009ae8 <_malloc_r+0x64>
 8009b10:	460c      	mov	r4, r1
 8009b12:	6849      	ldr	r1, [r1, #4]
 8009b14:	e7cc      	b.n	8009ab0 <_malloc_r+0x2c>
 8009b16:	1cc4      	adds	r4, r0, #3
 8009b18:	f024 0403 	bic.w	r4, r4, #3
 8009b1c:	42a0      	cmp	r0, r4
 8009b1e:	d005      	beq.n	8009b2c <_malloc_r+0xa8>
 8009b20:	1a21      	subs	r1, r4, r0
 8009b22:	4630      	mov	r0, r6
 8009b24:	f000 fc58 	bl	800a3d8 <_sbrk_r>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0cf      	beq.n	8009acc <_malloc_r+0x48>
 8009b2c:	6025      	str	r5, [r4, #0]
 8009b2e:	e7db      	b.n	8009ae8 <_malloc_r+0x64>
 8009b30:	20000248 	.word	0x20000248
 8009b34:	2000024c 	.word	0x2000024c

08009b38 <__cvt>:
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3e:	461e      	mov	r6, r3
 8009b40:	bfbb      	ittet	lt
 8009b42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009b46:	461e      	movlt	r6, r3
 8009b48:	2300      	movge	r3, #0
 8009b4a:	232d      	movlt	r3, #45	; 0x2d
 8009b4c:	b088      	sub	sp, #32
 8009b4e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b50:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009b54:	f027 0720 	bic.w	r7, r7, #32
 8009b58:	2f46      	cmp	r7, #70	; 0x46
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b5e:	700b      	strb	r3, [r1, #0]
 8009b60:	d004      	beq.n	8009b6c <__cvt+0x34>
 8009b62:	2f45      	cmp	r7, #69	; 0x45
 8009b64:	d100      	bne.n	8009b68 <__cvt+0x30>
 8009b66:	3501      	adds	r5, #1
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e000      	b.n	8009b6e <__cvt+0x36>
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	aa07      	add	r2, sp, #28
 8009b70:	9204      	str	r2, [sp, #16]
 8009b72:	aa06      	add	r2, sp, #24
 8009b74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009b78:	e9cd 3500 	strd	r3, r5, [sp]
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4633      	mov	r3, r6
 8009b80:	f000 fcea 	bl	800a558 <_dtoa_r>
 8009b84:	2f47      	cmp	r7, #71	; 0x47
 8009b86:	4680      	mov	r8, r0
 8009b88:	d102      	bne.n	8009b90 <__cvt+0x58>
 8009b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b8c:	07db      	lsls	r3, r3, #31
 8009b8e:	d526      	bpl.n	8009bde <__cvt+0xa6>
 8009b90:	2f46      	cmp	r7, #70	; 0x46
 8009b92:	eb08 0905 	add.w	r9, r8, r5
 8009b96:	d111      	bne.n	8009bbc <__cvt+0x84>
 8009b98:	f898 3000 	ldrb.w	r3, [r8]
 8009b9c:	2b30      	cmp	r3, #48	; 0x30
 8009b9e:	d10a      	bne.n	8009bb6 <__cvt+0x7e>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	f7f6 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8009bac:	b918      	cbnz	r0, 8009bb6 <__cvt+0x7e>
 8009bae:	f1c5 0501 	rsb	r5, r5, #1
 8009bb2:	f8ca 5000 	str.w	r5, [sl]
 8009bb6:	f8da 3000 	ldr.w	r3, [sl]
 8009bba:	4499      	add	r9, r3
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	f7f6 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8009bc8:	b938      	cbnz	r0, 8009bda <__cvt+0xa2>
 8009bca:	2230      	movs	r2, #48	; 0x30
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	454b      	cmp	r3, r9
 8009bd0:	d205      	bcs.n	8009bde <__cvt+0xa6>
 8009bd2:	1c59      	adds	r1, r3, #1
 8009bd4:	9107      	str	r1, [sp, #28]
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	e7f8      	b.n	8009bcc <__cvt+0x94>
 8009bda:	f8cd 901c 	str.w	r9, [sp, #28]
 8009bde:	4640      	mov	r0, r8
 8009be0:	9b07      	ldr	r3, [sp, #28]
 8009be2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009be4:	eba3 0308 	sub.w	r3, r3, r8
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	b008      	add	sp, #32
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009bf0 <__exponent>:
 8009bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	bfb4      	ite	lt
 8009bf6:	232d      	movlt	r3, #45	; 0x2d
 8009bf8:	232b      	movge	r3, #43	; 0x2b
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	bfb8      	it	lt
 8009bfe:	4249      	neglt	r1, r1
 8009c00:	2909      	cmp	r1, #9
 8009c02:	f804 2b02 	strb.w	r2, [r4], #2
 8009c06:	7043      	strb	r3, [r0, #1]
 8009c08:	dd21      	ble.n	8009c4e <__exponent+0x5e>
 8009c0a:	f10d 0307 	add.w	r3, sp, #7
 8009c0e:	461f      	mov	r7, r3
 8009c10:	260a      	movs	r6, #10
 8009c12:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c16:	fb06 1115 	mls	r1, r6, r5, r1
 8009c1a:	2d09      	cmp	r5, #9
 8009c1c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009c20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c24:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009c28:	4629      	mov	r1, r5
 8009c2a:	dc09      	bgt.n	8009c40 <__exponent+0x50>
 8009c2c:	3130      	adds	r1, #48	; 0x30
 8009c2e:	3b02      	subs	r3, #2
 8009c30:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c34:	42bb      	cmp	r3, r7
 8009c36:	4622      	mov	r2, r4
 8009c38:	d304      	bcc.n	8009c44 <__exponent+0x54>
 8009c3a:	1a10      	subs	r0, r2, r0
 8009c3c:	b003      	add	sp, #12
 8009c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c40:	4613      	mov	r3, r2
 8009c42:	e7e6      	b.n	8009c12 <__exponent+0x22>
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	f804 2b01 	strb.w	r2, [r4], #1
 8009c4c:	e7f2      	b.n	8009c34 <__exponent+0x44>
 8009c4e:	2330      	movs	r3, #48	; 0x30
 8009c50:	4419      	add	r1, r3
 8009c52:	7083      	strb	r3, [r0, #2]
 8009c54:	1d02      	adds	r2, r0, #4
 8009c56:	70c1      	strb	r1, [r0, #3]
 8009c58:	e7ef      	b.n	8009c3a <__exponent+0x4a>
	...

08009c5c <_printf_float>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	b091      	sub	sp, #68	; 0x44
 8009c62:	460c      	mov	r4, r1
 8009c64:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009c66:	4693      	mov	fp, r2
 8009c68:	461e      	mov	r6, r3
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	f001 fa28 	bl	800b0c0 <_localeconv_r>
 8009c70:	6803      	ldr	r3, [r0, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	9309      	str	r3, [sp, #36]	; 0x24
 8009c76:	f7f6 fa6b 	bl	8000150 <strlen>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	900a      	str	r0, [sp, #40]	; 0x28
 8009c82:	3307      	adds	r3, #7
 8009c84:	f023 0307 	bic.w	r3, r3, #7
 8009c88:	f103 0208 	add.w	r2, r3, #8
 8009c8c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009c90:	f8d4 a000 	ldr.w	sl, [r4]
 8009c94:	603a      	str	r2, [r7, #0]
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c9e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cac:	4ba6      	ldr	r3, [pc, #664]	; (8009f48 <_printf_float+0x2ec>)
 8009cae:	4638      	mov	r0, r7
 8009cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cb2:	f7f6 feab 	bl	8000a0c <__aeabi_dcmpun>
 8009cb6:	bb68      	cbnz	r0, 8009d14 <_printf_float+0xb8>
 8009cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cbc:	4ba2      	ldr	r3, [pc, #648]	; (8009f48 <_printf_float+0x2ec>)
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cc2:	f7f6 fe85 	bl	80009d0 <__aeabi_dcmple>
 8009cc6:	bb28      	cbnz	r0, 8009d14 <_printf_float+0xb8>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4638      	mov	r0, r7
 8009cce:	4649      	mov	r1, r9
 8009cd0:	f7f6 fe74 	bl	80009bc <__aeabi_dcmplt>
 8009cd4:	b110      	cbz	r0, 8009cdc <_printf_float+0x80>
 8009cd6:	232d      	movs	r3, #45	; 0x2d
 8009cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cdc:	4f9b      	ldr	r7, [pc, #620]	; (8009f4c <_printf_float+0x2f0>)
 8009cde:	4b9c      	ldr	r3, [pc, #624]	; (8009f50 <_printf_float+0x2f4>)
 8009ce0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ce4:	bf98      	it	ls
 8009ce6:	461f      	movls	r7, r3
 8009ce8:	2303      	movs	r3, #3
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	6123      	str	r3, [r4, #16]
 8009cf0:	f02a 0304 	bic.w	r3, sl, #4
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	9600      	str	r6, [sp, #0]
 8009cf8:	465b      	mov	r3, fp
 8009cfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 f9e2 	bl	800a0c8 <_printf_common>
 8009d04:	3001      	adds	r0, #1
 8009d06:	f040 8090 	bne.w	8009e2a <_printf_float+0x1ce>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0e:	b011      	add	sp, #68	; 0x44
 8009d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d14:	463a      	mov	r2, r7
 8009d16:	464b      	mov	r3, r9
 8009d18:	4638      	mov	r0, r7
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	f7f6 fe76 	bl	8000a0c <__aeabi_dcmpun>
 8009d20:	b110      	cbz	r0, 8009d28 <_printf_float+0xcc>
 8009d22:	4f8c      	ldr	r7, [pc, #560]	; (8009f54 <_printf_float+0x2f8>)
 8009d24:	4b8c      	ldr	r3, [pc, #560]	; (8009f58 <_printf_float+0x2fc>)
 8009d26:	e7db      	b.n	8009ce0 <_printf_float+0x84>
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009d2e:	1c59      	adds	r1, r3, #1
 8009d30:	a80d      	add	r0, sp, #52	; 0x34
 8009d32:	a90e      	add	r1, sp, #56	; 0x38
 8009d34:	d140      	bne.n	8009db8 <_printf_float+0x15c>
 8009d36:	2306      	movs	r3, #6
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	f04f 0c00 	mov.w	ip, #0
 8009d3e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009d42:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009d46:	6863      	ldr	r3, [r4, #4]
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	463a      	mov	r2, r7
 8009d52:	464b      	mov	r3, r9
 8009d54:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f7ff feed 	bl	8009b38 <__cvt>
 8009d5e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009d62:	2b47      	cmp	r3, #71	; 0x47
 8009d64:	4607      	mov	r7, r0
 8009d66:	d109      	bne.n	8009d7c <_printf_float+0x120>
 8009d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6a:	1cd8      	adds	r0, r3, #3
 8009d6c:	db02      	blt.n	8009d74 <_printf_float+0x118>
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	dd47      	ble.n	8009e04 <_printf_float+0x1a8>
 8009d74:	f1a8 0802 	sub.w	r8, r8, #2
 8009d78:	fa5f f888 	uxtb.w	r8, r8
 8009d7c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009d80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d82:	d824      	bhi.n	8009dce <_printf_float+0x172>
 8009d84:	3901      	subs	r1, #1
 8009d86:	4642      	mov	r2, r8
 8009d88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d8c:	910d      	str	r1, [sp, #52]	; 0x34
 8009d8e:	f7ff ff2f 	bl	8009bf0 <__exponent>
 8009d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d94:	4681      	mov	r9, r0
 8009d96:	1813      	adds	r3, r2, r0
 8009d98:	2a01      	cmp	r2, #1
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	dc02      	bgt.n	8009da4 <_printf_float+0x148>
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	07d1      	lsls	r1, r2, #31
 8009da2:	d501      	bpl.n	8009da8 <_printf_float+0x14c>
 8009da4:	3301      	adds	r3, #1
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0a2      	beq.n	8009cf6 <_printf_float+0x9a>
 8009db0:	232d      	movs	r3, #45	; 0x2d
 8009db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db6:	e79e      	b.n	8009cf6 <_printf_float+0x9a>
 8009db8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009dbc:	f000 816e 	beq.w	800a09c <_printf_float+0x440>
 8009dc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009dc4:	d1b9      	bne.n	8009d3a <_printf_float+0xde>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1b7      	bne.n	8009d3a <_printf_float+0xde>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e7b4      	b.n	8009d38 <_printf_float+0xdc>
 8009dce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009dd2:	d119      	bne.n	8009e08 <_printf_float+0x1ac>
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	6863      	ldr	r3, [r4, #4]
 8009dd8:	dd0c      	ble.n	8009df4 <_printf_float+0x198>
 8009dda:	6121      	str	r1, [r4, #16]
 8009ddc:	b913      	cbnz	r3, 8009de4 <_printf_float+0x188>
 8009dde:	6822      	ldr	r2, [r4, #0]
 8009de0:	07d2      	lsls	r2, r2, #31
 8009de2:	d502      	bpl.n	8009dea <_printf_float+0x18e>
 8009de4:	3301      	adds	r3, #1
 8009de6:	440b      	add	r3, r1
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dec:	f04f 0900 	mov.w	r9, #0
 8009df0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009df2:	e7d9      	b.n	8009da8 <_printf_float+0x14c>
 8009df4:	b913      	cbnz	r3, 8009dfc <_printf_float+0x1a0>
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	07d0      	lsls	r0, r2, #31
 8009dfa:	d501      	bpl.n	8009e00 <_printf_float+0x1a4>
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	e7f3      	b.n	8009de8 <_printf_float+0x18c>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e7f1      	b.n	8009de8 <_printf_float+0x18c>
 8009e04:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009e08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	db05      	blt.n	8009e1c <_printf_float+0x1c0>
 8009e10:	6822      	ldr	r2, [r4, #0]
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	07d1      	lsls	r1, r2, #31
 8009e16:	d5e8      	bpl.n	8009dea <_printf_float+0x18e>
 8009e18:	3301      	adds	r3, #1
 8009e1a:	e7e5      	b.n	8009de8 <_printf_float+0x18c>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfcc      	ite	gt
 8009e20:	2301      	movgt	r3, #1
 8009e22:	f1c3 0302 	rsble	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	e7de      	b.n	8009de8 <_printf_float+0x18c>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	055a      	lsls	r2, r3, #21
 8009e2e:	d407      	bmi.n	8009e40 <_printf_float+0x1e4>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	463a      	mov	r2, r7
 8009e34:	4659      	mov	r1, fp
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b0      	blx	r6
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d129      	bne.n	8009e92 <_printf_float+0x236>
 8009e3e:	e764      	b.n	8009d0a <_printf_float+0xae>
 8009e40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009e44:	f240 80d7 	bls.w	8009ff6 <_printf_float+0x39a>
 8009e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f7f6 fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009e54:	b388      	cbz	r0, 8009eba <_printf_float+0x25e>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4a40      	ldr	r2, [pc, #256]	; (8009f5c <_printf_float+0x300>)
 8009e5a:	4659      	mov	r1, fp
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b0      	blx	r6
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f af52 	beq.w	8009d0a <_printf_float+0xae>
 8009e66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	db02      	blt.n	8009e74 <_printf_float+0x218>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	07d8      	lsls	r0, r3, #31
 8009e72:	d50e      	bpl.n	8009e92 <_printf_float+0x236>
 8009e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e78:	4659      	mov	r1, fp
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	47b0      	blx	r6
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f43f af43 	beq.w	8009d0a <_printf_float+0xae>
 8009e84:	2700      	movs	r7, #0
 8009e86:	f104 081a 	add.w	r8, r4, #26
 8009e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	42bb      	cmp	r3, r7
 8009e90:	dc09      	bgt.n	8009ea6 <_printf_float+0x24a>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	079f      	lsls	r7, r3, #30
 8009e96:	f100 80fd 	bmi.w	800a094 <_printf_float+0x438>
 8009e9a:	68e0      	ldr	r0, [r4, #12]
 8009e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e9e:	4298      	cmp	r0, r3
 8009ea0:	bfb8      	it	lt
 8009ea2:	4618      	movlt	r0, r3
 8009ea4:	e733      	b.n	8009d0e <_printf_float+0xb2>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4659      	mov	r1, fp
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b0      	blx	r6
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	f43f af2a 	beq.w	8009d0a <_printf_float+0xae>
 8009eb6:	3701      	adds	r7, #1
 8009eb8:	e7e7      	b.n	8009e8a <_printf_float+0x22e>
 8009eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc2b      	bgt.n	8009f18 <_printf_float+0x2bc>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <_printf_float+0x300>)
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b0      	blx	r6
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af1d 	beq.w	8009d0a <_printf_float+0xae>
 8009ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed2:	b923      	cbnz	r3, 8009ede <_printf_float+0x282>
 8009ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ed6:	b913      	cbnz	r3, 8009ede <_printf_float+0x282>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07d9      	lsls	r1, r3, #31
 8009edc:	d5d9      	bpl.n	8009e92 <_printf_float+0x236>
 8009ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee2:	4659      	mov	r1, fp
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b0      	blx	r6
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f af0e 	beq.w	8009d0a <_printf_float+0xae>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	f104 091a 	add.w	r9, r4, #26
 8009ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ef8:	425b      	negs	r3, r3
 8009efa:	4543      	cmp	r3, r8
 8009efc:	dc01      	bgt.n	8009f02 <_printf_float+0x2a6>
 8009efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f00:	e797      	b.n	8009e32 <_printf_float+0x1d6>
 8009f02:	2301      	movs	r3, #1
 8009f04:	464a      	mov	r2, r9
 8009f06:	4659      	mov	r1, fp
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b0      	blx	r6
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f aefc 	beq.w	8009d0a <_printf_float+0xae>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	e7ee      	b.n	8009ef6 <_printf_float+0x29a>
 8009f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	bfa8      	it	ge
 8009f20:	461a      	movge	r2, r3
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	4690      	mov	r8, r2
 8009f26:	dd07      	ble.n	8009f38 <_printf_float+0x2dc>
 8009f28:	4613      	mov	r3, r2
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	463a      	mov	r2, r7
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b0      	blx	r6
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f aee9 	beq.w	8009d0a <_printf_float+0xae>
 8009f38:	f104 031a 	add.w	r3, r4, #26
 8009f3c:	f04f 0a00 	mov.w	sl, #0
 8009f40:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f46:	e015      	b.n	8009f74 <_printf_float+0x318>
 8009f48:	7fefffff 	.word	0x7fefffff
 8009f4c:	0800cc24 	.word	0x0800cc24
 8009f50:	0800cc20 	.word	0x0800cc20
 8009f54:	0800cc2c 	.word	0x0800cc2c
 8009f58:	0800cc28 	.word	0x0800cc28
 8009f5c:	0800cc30 	.word	0x0800cc30
 8009f60:	2301      	movs	r3, #1
 8009f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f64:	4659      	mov	r1, fp
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b0      	blx	r6
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f aecd 	beq.w	8009d0a <_printf_float+0xae>
 8009f70:	f10a 0a01 	add.w	sl, sl, #1
 8009f74:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009f78:	eba9 0308 	sub.w	r3, r9, r8
 8009f7c:	4553      	cmp	r3, sl
 8009f7e:	dcef      	bgt.n	8009f60 <_printf_float+0x304>
 8009f80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f84:	429a      	cmp	r2, r3
 8009f86:	444f      	add	r7, r9
 8009f88:	db14      	blt.n	8009fb4 <_printf_float+0x358>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	07da      	lsls	r2, r3, #31
 8009f8e:	d411      	bmi.n	8009fb4 <_printf_float+0x358>
 8009f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f94:	eba3 0209 	sub.w	r2, r3, r9
 8009f98:	eba3 0901 	sub.w	r9, r3, r1
 8009f9c:	4591      	cmp	r9, r2
 8009f9e:	bfa8      	it	ge
 8009fa0:	4691      	movge	r9, r2
 8009fa2:	f1b9 0f00 	cmp.w	r9, #0
 8009fa6:	dc0d      	bgt.n	8009fc4 <_printf_float+0x368>
 8009fa8:	2700      	movs	r7, #0
 8009faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fae:	f104 081a 	add.w	r8, r4, #26
 8009fb2:	e018      	b.n	8009fe6 <_printf_float+0x38a>
 8009fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fb8:	4659      	mov	r1, fp
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b0      	blx	r6
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d1e6      	bne.n	8009f90 <_printf_float+0x334>
 8009fc2:	e6a2      	b.n	8009d0a <_printf_float+0xae>
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	4659      	mov	r1, fp
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b0      	blx	r6
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d1ea      	bne.n	8009fa8 <_printf_float+0x34c>
 8009fd2:	e69a      	b.n	8009d0a <_printf_float+0xae>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4642      	mov	r2, r8
 8009fd8:	4659      	mov	r1, fp
 8009fda:	4628      	mov	r0, r5
 8009fdc:	47b0      	blx	r6
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f43f ae93 	beq.w	8009d0a <_printf_float+0xae>
 8009fe4:	3701      	adds	r7, #1
 8009fe6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	eba3 0309 	sub.w	r3, r3, r9
 8009ff0:	42bb      	cmp	r3, r7
 8009ff2:	dcef      	bgt.n	8009fd4 <_printf_float+0x378>
 8009ff4:	e74d      	b.n	8009e92 <_printf_float+0x236>
 8009ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ff8:	2a01      	cmp	r2, #1
 8009ffa:	dc01      	bgt.n	800a000 <_printf_float+0x3a4>
 8009ffc:	07db      	lsls	r3, r3, #31
 8009ffe:	d538      	bpl.n	800a072 <_printf_float+0x416>
 800a000:	2301      	movs	r3, #1
 800a002:	463a      	mov	r2, r7
 800a004:	4659      	mov	r1, fp
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	3001      	adds	r0, #1
 800a00c:	f43f ae7d 	beq.w	8009d0a <_printf_float+0xae>
 800a010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a014:	4659      	mov	r1, fp
 800a016:	4628      	mov	r0, r5
 800a018:	47b0      	blx	r6
 800a01a:	3001      	adds	r0, #1
 800a01c:	f107 0701 	add.w	r7, r7, #1
 800a020:	f43f ae73 	beq.w	8009d0a <_printf_float+0xae>
 800a024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02a:	2200      	movs	r2, #0
 800a02c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800a030:	2300      	movs	r3, #0
 800a032:	f7f6 fcb9 	bl	80009a8 <__aeabi_dcmpeq>
 800a036:	b9c0      	cbnz	r0, 800a06a <_printf_float+0x40e>
 800a038:	4643      	mov	r3, r8
 800a03a:	463a      	mov	r2, r7
 800a03c:	4659      	mov	r1, fp
 800a03e:	4628      	mov	r0, r5
 800a040:	47b0      	blx	r6
 800a042:	3001      	adds	r0, #1
 800a044:	d10d      	bne.n	800a062 <_printf_float+0x406>
 800a046:	e660      	b.n	8009d0a <_printf_float+0xae>
 800a048:	2301      	movs	r3, #1
 800a04a:	4642      	mov	r2, r8
 800a04c:	4659      	mov	r1, fp
 800a04e:	4628      	mov	r0, r5
 800a050:	47b0      	blx	r6
 800a052:	3001      	adds	r0, #1
 800a054:	f43f ae59 	beq.w	8009d0a <_printf_float+0xae>
 800a058:	3701      	adds	r7, #1
 800a05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a05c:	3b01      	subs	r3, #1
 800a05e:	42bb      	cmp	r3, r7
 800a060:	dcf2      	bgt.n	800a048 <_printf_float+0x3ec>
 800a062:	464b      	mov	r3, r9
 800a064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a068:	e6e4      	b.n	8009e34 <_printf_float+0x1d8>
 800a06a:	2700      	movs	r7, #0
 800a06c:	f104 081a 	add.w	r8, r4, #26
 800a070:	e7f3      	b.n	800a05a <_printf_float+0x3fe>
 800a072:	2301      	movs	r3, #1
 800a074:	e7e1      	b.n	800a03a <_printf_float+0x3de>
 800a076:	2301      	movs	r3, #1
 800a078:	4642      	mov	r2, r8
 800a07a:	4659      	mov	r1, fp
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b0      	blx	r6
 800a080:	3001      	adds	r0, #1
 800a082:	f43f ae42 	beq.w	8009d0a <_printf_float+0xae>
 800a086:	3701      	adds	r7, #1
 800a088:	68e3      	ldr	r3, [r4, #12]
 800a08a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	42bb      	cmp	r3, r7
 800a090:	dcf1      	bgt.n	800a076 <_printf_float+0x41a>
 800a092:	e702      	b.n	8009e9a <_printf_float+0x23e>
 800a094:	2700      	movs	r7, #0
 800a096:	f104 0819 	add.w	r8, r4, #25
 800a09a:	e7f5      	b.n	800a088 <_printf_float+0x42c>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f43f ae94 	beq.w	8009dca <_printf_float+0x16e>
 800a0a2:	f04f 0c00 	mov.w	ip, #0
 800a0a6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a0aa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a0b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	463a      	mov	r2, r7
 800a0bc:	464b      	mov	r3, r9
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f7ff fd3a 	bl	8009b38 <__cvt>
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	e64f      	b.n	8009d68 <_printf_float+0x10c>

0800a0c8 <_printf_common>:
 800a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	4691      	mov	r9, r2
 800a0ce:	461f      	mov	r7, r3
 800a0d0:	688a      	ldr	r2, [r1, #8]
 800a0d2:	690b      	ldr	r3, [r1, #16]
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	bfb8      	it	lt
 800a0da:	4613      	movlt	r3, r2
 800a0dc:	f8c9 3000 	str.w	r3, [r9]
 800a0e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0ea:	b112      	cbz	r2, 800a0f2 <_printf_common+0x2a>
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8c9 3000 	str.w	r3, [r9]
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	0699      	lsls	r1, r3, #26
 800a0f6:	bf42      	ittt	mi
 800a0f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a0fc:	3302      	addmi	r3, #2
 800a0fe:	f8c9 3000 	strmi.w	r3, [r9]
 800a102:	6825      	ldr	r5, [r4, #0]
 800a104:	f015 0506 	ands.w	r5, r5, #6
 800a108:	d107      	bne.n	800a11a <_printf_common+0x52>
 800a10a:	f104 0a19 	add.w	sl, r4, #25
 800a10e:	68e3      	ldr	r3, [r4, #12]
 800a110:	f8d9 2000 	ldr.w	r2, [r9]
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	42ab      	cmp	r3, r5
 800a118:	dc29      	bgt.n	800a16e <_printf_common+0xa6>
 800a11a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a11e:	6822      	ldr	r2, [r4, #0]
 800a120:	3300      	adds	r3, #0
 800a122:	bf18      	it	ne
 800a124:	2301      	movne	r3, #1
 800a126:	0692      	lsls	r2, r2, #26
 800a128:	d42e      	bmi.n	800a188 <_printf_common+0xc0>
 800a12a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a12e:	4639      	mov	r1, r7
 800a130:	4630      	mov	r0, r6
 800a132:	47c0      	blx	r8
 800a134:	3001      	adds	r0, #1
 800a136:	d021      	beq.n	800a17c <_printf_common+0xb4>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	68e5      	ldr	r5, [r4, #12]
 800a13c:	f003 0306 	and.w	r3, r3, #6
 800a140:	2b04      	cmp	r3, #4
 800a142:	bf18      	it	ne
 800a144:	2500      	movne	r5, #0
 800a146:	f8d9 2000 	ldr.w	r2, [r9]
 800a14a:	f04f 0900 	mov.w	r9, #0
 800a14e:	bf08      	it	eq
 800a150:	1aad      	subeq	r5, r5, r2
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	6922      	ldr	r2, [r4, #16]
 800a156:	bf08      	it	eq
 800a158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a15c:	4293      	cmp	r3, r2
 800a15e:	bfc4      	itt	gt
 800a160:	1a9b      	subgt	r3, r3, r2
 800a162:	18ed      	addgt	r5, r5, r3
 800a164:	341a      	adds	r4, #26
 800a166:	454d      	cmp	r5, r9
 800a168:	d11a      	bne.n	800a1a0 <_printf_common+0xd8>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e008      	b.n	800a180 <_printf_common+0xb8>
 800a16e:	2301      	movs	r3, #1
 800a170:	4652      	mov	r2, sl
 800a172:	4639      	mov	r1, r7
 800a174:	4630      	mov	r0, r6
 800a176:	47c0      	blx	r8
 800a178:	3001      	adds	r0, #1
 800a17a:	d103      	bne.n	800a184 <_printf_common+0xbc>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a184:	3501      	adds	r5, #1
 800a186:	e7c2      	b.n	800a10e <_printf_common+0x46>
 800a188:	2030      	movs	r0, #48	; 0x30
 800a18a:	18e1      	adds	r1, r4, r3
 800a18c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a196:	4422      	add	r2, r4
 800a198:	3302      	adds	r3, #2
 800a19a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a19e:	e7c4      	b.n	800a12a <_printf_common+0x62>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d0e6      	beq.n	800a17c <_printf_common+0xb4>
 800a1ae:	f109 0901 	add.w	r9, r9, #1
 800a1b2:	e7d8      	b.n	800a166 <_printf_common+0x9e>

0800a1b4 <_printf_i>:
 800a1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a1bc:	460c      	mov	r4, r1
 800a1be:	7e09      	ldrb	r1, [r1, #24]
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	296e      	cmp	r1, #110	; 0x6e
 800a1c4:	4617      	mov	r7, r2
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1cc:	f000 80b3 	beq.w	800a336 <_printf_i+0x182>
 800a1d0:	d822      	bhi.n	800a218 <_printf_i+0x64>
 800a1d2:	2963      	cmp	r1, #99	; 0x63
 800a1d4:	d036      	beq.n	800a244 <_printf_i+0x90>
 800a1d6:	d80a      	bhi.n	800a1ee <_printf_i+0x3a>
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	f000 80b9 	beq.w	800a350 <_printf_i+0x19c>
 800a1de:	2958      	cmp	r1, #88	; 0x58
 800a1e0:	f000 8083 	beq.w	800a2ea <_printf_i+0x136>
 800a1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a1ec:	e032      	b.n	800a254 <_printf_i+0xa0>
 800a1ee:	2964      	cmp	r1, #100	; 0x64
 800a1f0:	d001      	beq.n	800a1f6 <_printf_i+0x42>
 800a1f2:	2969      	cmp	r1, #105	; 0x69
 800a1f4:	d1f6      	bne.n	800a1e4 <_printf_i+0x30>
 800a1f6:	6820      	ldr	r0, [r4, #0]
 800a1f8:	6813      	ldr	r3, [r2, #0]
 800a1fa:	0605      	lsls	r5, r0, #24
 800a1fc:	f103 0104 	add.w	r1, r3, #4
 800a200:	d52a      	bpl.n	800a258 <_printf_i+0xa4>
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	da03      	bge.n	800a212 <_printf_i+0x5e>
 800a20a:	222d      	movs	r2, #45	; 0x2d
 800a20c:	425b      	negs	r3, r3
 800a20e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a212:	486f      	ldr	r0, [pc, #444]	; (800a3d0 <_printf_i+0x21c>)
 800a214:	220a      	movs	r2, #10
 800a216:	e039      	b.n	800a28c <_printf_i+0xd8>
 800a218:	2973      	cmp	r1, #115	; 0x73
 800a21a:	f000 809d 	beq.w	800a358 <_printf_i+0x1a4>
 800a21e:	d808      	bhi.n	800a232 <_printf_i+0x7e>
 800a220:	296f      	cmp	r1, #111	; 0x6f
 800a222:	d020      	beq.n	800a266 <_printf_i+0xb2>
 800a224:	2970      	cmp	r1, #112	; 0x70
 800a226:	d1dd      	bne.n	800a1e4 <_printf_i+0x30>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	f043 0320 	orr.w	r3, r3, #32
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	e003      	b.n	800a23a <_printf_i+0x86>
 800a232:	2975      	cmp	r1, #117	; 0x75
 800a234:	d017      	beq.n	800a266 <_printf_i+0xb2>
 800a236:	2978      	cmp	r1, #120	; 0x78
 800a238:	d1d4      	bne.n	800a1e4 <_printf_i+0x30>
 800a23a:	2378      	movs	r3, #120	; 0x78
 800a23c:	4865      	ldr	r0, [pc, #404]	; (800a3d4 <_printf_i+0x220>)
 800a23e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a242:	e055      	b.n	800a2f0 <_printf_i+0x13c>
 800a244:	6813      	ldr	r3, [r2, #0]
 800a246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a24a:	1d19      	adds	r1, r3, #4
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6011      	str	r1, [r2, #0]
 800a250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a254:	2301      	movs	r3, #1
 800a256:	e08c      	b.n	800a372 <_printf_i+0x1be>
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a25e:	6011      	str	r1, [r2, #0]
 800a260:	bf18      	it	ne
 800a262:	b21b      	sxthne	r3, r3
 800a264:	e7cf      	b.n	800a206 <_printf_i+0x52>
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	6825      	ldr	r5, [r4, #0]
 800a26a:	1d18      	adds	r0, r3, #4
 800a26c:	6010      	str	r0, [r2, #0]
 800a26e:	0628      	lsls	r0, r5, #24
 800a270:	d501      	bpl.n	800a276 <_printf_i+0xc2>
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	e002      	b.n	800a27c <_printf_i+0xc8>
 800a276:	0668      	lsls	r0, r5, #25
 800a278:	d5fb      	bpl.n	800a272 <_printf_i+0xbe>
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	296f      	cmp	r1, #111	; 0x6f
 800a27e:	bf14      	ite	ne
 800a280:	220a      	movne	r2, #10
 800a282:	2208      	moveq	r2, #8
 800a284:	4852      	ldr	r0, [pc, #328]	; (800a3d0 <_printf_i+0x21c>)
 800a286:	2100      	movs	r1, #0
 800a288:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a28c:	6865      	ldr	r5, [r4, #4]
 800a28e:	2d00      	cmp	r5, #0
 800a290:	60a5      	str	r5, [r4, #8]
 800a292:	f2c0 8095 	blt.w	800a3c0 <_printf_i+0x20c>
 800a296:	6821      	ldr	r1, [r4, #0]
 800a298:	f021 0104 	bic.w	r1, r1, #4
 800a29c:	6021      	str	r1, [r4, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d13d      	bne.n	800a31e <_printf_i+0x16a>
 800a2a2:	2d00      	cmp	r5, #0
 800a2a4:	f040 808e 	bne.w	800a3c4 <_printf_i+0x210>
 800a2a8:	4665      	mov	r5, ip
 800a2aa:	2a08      	cmp	r2, #8
 800a2ac:	d10b      	bne.n	800a2c6 <_printf_i+0x112>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07db      	lsls	r3, r3, #31
 800a2b2:	d508      	bpl.n	800a2c6 <_printf_i+0x112>
 800a2b4:	6923      	ldr	r3, [r4, #16]
 800a2b6:	6862      	ldr	r2, [r4, #4]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	bfde      	ittt	le
 800a2bc:	2330      	movle	r3, #48	; 0x30
 800a2be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a2c6:	ebac 0305 	sub.w	r3, ip, r5
 800a2ca:	6123      	str	r3, [r4, #16]
 800a2cc:	f8cd 8000 	str.w	r8, [sp]
 800a2d0:	463b      	mov	r3, r7
 800a2d2:	aa03      	add	r2, sp, #12
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff fef6 	bl	800a0c8 <_printf_common>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d14d      	bne.n	800a37c <_printf_i+0x1c8>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2e4:	b005      	add	sp, #20
 800a2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ea:	4839      	ldr	r0, [pc, #228]	; (800a3d0 <_printf_i+0x21c>)
 800a2ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	6821      	ldr	r1, [r4, #0]
 800a2f4:	1d1d      	adds	r5, r3, #4
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6015      	str	r5, [r2, #0]
 800a2fa:	060a      	lsls	r2, r1, #24
 800a2fc:	d50b      	bpl.n	800a316 <_printf_i+0x162>
 800a2fe:	07ca      	lsls	r2, r1, #31
 800a300:	bf44      	itt	mi
 800a302:	f041 0120 	orrmi.w	r1, r1, #32
 800a306:	6021      	strmi	r1, [r4, #0]
 800a308:	b91b      	cbnz	r3, 800a312 <_printf_i+0x15e>
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	f022 0220 	bic.w	r2, r2, #32
 800a310:	6022      	str	r2, [r4, #0]
 800a312:	2210      	movs	r2, #16
 800a314:	e7b7      	b.n	800a286 <_printf_i+0xd2>
 800a316:	064d      	lsls	r5, r1, #25
 800a318:	bf48      	it	mi
 800a31a:	b29b      	uxthmi	r3, r3
 800a31c:	e7ef      	b.n	800a2fe <_printf_i+0x14a>
 800a31e:	4665      	mov	r5, ip
 800a320:	fbb3 f1f2 	udiv	r1, r3, r2
 800a324:	fb02 3311 	mls	r3, r2, r1, r3
 800a328:	5cc3      	ldrb	r3, [r0, r3]
 800a32a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a32e:	460b      	mov	r3, r1
 800a330:	2900      	cmp	r1, #0
 800a332:	d1f5      	bne.n	800a320 <_printf_i+0x16c>
 800a334:	e7b9      	b.n	800a2aa <_printf_i+0xf6>
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	6825      	ldr	r5, [r4, #0]
 800a33a:	1d18      	adds	r0, r3, #4
 800a33c:	6961      	ldr	r1, [r4, #20]
 800a33e:	6010      	str	r0, [r2, #0]
 800a340:	0628      	lsls	r0, r5, #24
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	d501      	bpl.n	800a34a <_printf_i+0x196>
 800a346:	6019      	str	r1, [r3, #0]
 800a348:	e002      	b.n	800a350 <_printf_i+0x19c>
 800a34a:	066a      	lsls	r2, r5, #25
 800a34c:	d5fb      	bpl.n	800a346 <_printf_i+0x192>
 800a34e:	8019      	strh	r1, [r3, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	4665      	mov	r5, ip
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	e7b9      	b.n	800a2cc <_printf_i+0x118>
 800a358:	6813      	ldr	r3, [r2, #0]
 800a35a:	1d19      	adds	r1, r3, #4
 800a35c:	6011      	str	r1, [r2, #0]
 800a35e:	681d      	ldr	r5, [r3, #0]
 800a360:	6862      	ldr	r2, [r4, #4]
 800a362:	2100      	movs	r1, #0
 800a364:	4628      	mov	r0, r5
 800a366:	f000 feb9 	bl	800b0dc <memchr>
 800a36a:	b108      	cbz	r0, 800a370 <_printf_i+0x1bc>
 800a36c:	1b40      	subs	r0, r0, r5
 800a36e:	6060      	str	r0, [r4, #4]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2300      	movs	r3, #0
 800a376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a37a:	e7a7      	b.n	800a2cc <_printf_i+0x118>
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	462a      	mov	r2, r5
 800a380:	4639      	mov	r1, r7
 800a382:	4630      	mov	r0, r6
 800a384:	47c0      	blx	r8
 800a386:	3001      	adds	r0, #1
 800a388:	d0aa      	beq.n	800a2e0 <_printf_i+0x12c>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	079b      	lsls	r3, r3, #30
 800a38e:	d413      	bmi.n	800a3b8 <_printf_i+0x204>
 800a390:	68e0      	ldr	r0, [r4, #12]
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	4298      	cmp	r0, r3
 800a396:	bfb8      	it	lt
 800a398:	4618      	movlt	r0, r3
 800a39a:	e7a3      	b.n	800a2e4 <_printf_i+0x130>
 800a39c:	2301      	movs	r3, #1
 800a39e:	464a      	mov	r2, r9
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d09a      	beq.n	800a2e0 <_printf_i+0x12c>
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	68e3      	ldr	r3, [r4, #12]
 800a3ae:	9a03      	ldr	r2, [sp, #12]
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	42ab      	cmp	r3, r5
 800a3b4:	dcf2      	bgt.n	800a39c <_printf_i+0x1e8>
 800a3b6:	e7eb      	b.n	800a390 <_printf_i+0x1dc>
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	f104 0919 	add.w	r9, r4, #25
 800a3be:	e7f5      	b.n	800a3ac <_printf_i+0x1f8>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1ac      	bne.n	800a31e <_printf_i+0x16a>
 800a3c4:	7803      	ldrb	r3, [r0, #0]
 800a3c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3ce:	e76c      	b.n	800a2aa <_printf_i+0xf6>
 800a3d0:	0800cc32 	.word	0x0800cc32
 800a3d4:	0800cc43 	.word	0x0800cc43

0800a3d8 <_sbrk_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4c05      	ldr	r4, [pc, #20]	; (800a3f4 <_sbrk_r+0x1c>)
 800a3de:	4605      	mov	r5, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	f7fb fb02 	bl	80059ec <_sbrk>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_sbrk_r+0x1a>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_sbrk_r+0x1a>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20000950 	.word	0x20000950

0800a3f8 <siprintf>:
 800a3f8:	b40e      	push	{r1, r2, r3}
 800a3fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3fe:	b500      	push	{lr}
 800a400:	b09c      	sub	sp, #112	; 0x70
 800a402:	ab1d      	add	r3, sp, #116	; 0x74
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	9006      	str	r0, [sp, #24]
 800a408:	9107      	str	r1, [sp, #28]
 800a40a:	9104      	str	r1, [sp, #16]
 800a40c:	4808      	ldr	r0, [pc, #32]	; (800a430 <siprintf+0x38>)
 800a40e:	4909      	ldr	r1, [pc, #36]	; (800a434 <siprintf+0x3c>)
 800a410:	f853 2b04 	ldr.w	r2, [r3], #4
 800a414:	9105      	str	r1, [sp, #20]
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	a902      	add	r1, sp, #8
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	f001 f9b2 	bl	800b784 <_svfiprintf_r>
 800a420:	2200      	movs	r2, #0
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	b01c      	add	sp, #112	; 0x70
 800a428:	f85d eb04 	ldr.w	lr, [sp], #4
 800a42c:	b003      	add	sp, #12
 800a42e:	4770      	bx	lr
 800a430:	20000014 	.word	0x20000014
 800a434:	ffff0208 	.word	0xffff0208

0800a438 <quorem>:
 800a438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	6903      	ldr	r3, [r0, #16]
 800a43e:	690c      	ldr	r4, [r1, #16]
 800a440:	4680      	mov	r8, r0
 800a442:	42a3      	cmp	r3, r4
 800a444:	f2c0 8084 	blt.w	800a550 <quorem+0x118>
 800a448:	3c01      	subs	r4, #1
 800a44a:	f101 0714 	add.w	r7, r1, #20
 800a44e:	f100 0614 	add.w	r6, r0, #20
 800a452:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a456:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a45a:	3501      	adds	r5, #1
 800a45c:	fbb0 f5f5 	udiv	r5, r0, r5
 800a460:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a464:	eb06 030c 	add.w	r3, r6, ip
 800a468:	eb07 090c 	add.w	r9, r7, ip
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	b39d      	cbz	r5, 800a4d8 <quorem+0xa0>
 800a470:	f04f 0a00 	mov.w	sl, #0
 800a474:	4638      	mov	r0, r7
 800a476:	46b6      	mov	lr, r6
 800a478:	46d3      	mov	fp, sl
 800a47a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a47e:	b293      	uxth	r3, r2
 800a480:	fb05 a303 	mla	r3, r5, r3, sl
 800a484:	0c12      	lsrs	r2, r2, #16
 800a486:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a48a:	fb05 a202 	mla	r2, r5, r2, sl
 800a48e:	b29b      	uxth	r3, r3
 800a490:	ebab 0303 	sub.w	r3, fp, r3
 800a494:	f8de b000 	ldr.w	fp, [lr]
 800a498:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a49c:	fa1f fb8b 	uxth.w	fp, fp
 800a4a0:	445b      	add	r3, fp
 800a4a2:	fa1f fb82 	uxth.w	fp, r2
 800a4a6:	f8de 2000 	ldr.w	r2, [lr]
 800a4aa:	4581      	cmp	r9, r0
 800a4ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a4b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a4be:	f84e 3b04 	str.w	r3, [lr], #4
 800a4c2:	d2da      	bcs.n	800a47a <quorem+0x42>
 800a4c4:	f856 300c 	ldr.w	r3, [r6, ip]
 800a4c8:	b933      	cbnz	r3, 800a4d8 <quorem+0xa0>
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	429e      	cmp	r6, r3
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	d331      	bcc.n	800a538 <quorem+0x100>
 800a4d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f001 f823 	bl	800b524 <__mcmp>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	db26      	blt.n	800a530 <quorem+0xf8>
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f04f 0c00 	mov.w	ip, #0
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	f857 1b04 	ldr.w	r1, [r7], #4
 800a4ee:	f8d0 e000 	ldr.w	lr, [r0]
 800a4f2:	b28b      	uxth	r3, r1
 800a4f4:	ebac 0303 	sub.w	r3, ip, r3
 800a4f8:	fa1f f28e 	uxth.w	r2, lr
 800a4fc:	4413      	add	r3, r2
 800a4fe:	0c0a      	lsrs	r2, r1, #16
 800a500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a508:	b29b      	uxth	r3, r3
 800a50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a50e:	45b9      	cmp	r9, r7
 800a510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a514:	f840 3b04 	str.w	r3, [r0], #4
 800a518:	d2e7      	bcs.n	800a4ea <quorem+0xb2>
 800a51a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a51e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a522:	b92a      	cbnz	r2, 800a530 <quorem+0xf8>
 800a524:	3b04      	subs	r3, #4
 800a526:	429e      	cmp	r6, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	d30b      	bcc.n	800a544 <quorem+0x10c>
 800a52c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a530:	4628      	mov	r0, r5
 800a532:	b003      	add	sp, #12
 800a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	3b04      	subs	r3, #4
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d1c9      	bne.n	800a4d4 <quorem+0x9c>
 800a540:	3c01      	subs	r4, #1
 800a542:	e7c4      	b.n	800a4ce <quorem+0x96>
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	3b04      	subs	r3, #4
 800a548:	2a00      	cmp	r2, #0
 800a54a:	d1ef      	bne.n	800a52c <quorem+0xf4>
 800a54c:	3c01      	subs	r4, #1
 800a54e:	e7ea      	b.n	800a526 <quorem+0xee>
 800a550:	2000      	movs	r0, #0
 800a552:	e7ee      	b.n	800a532 <quorem+0xfa>
 800a554:	0000      	movs	r0, r0
	...

0800a558 <_dtoa_r>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	4616      	mov	r6, r2
 800a55e:	461f      	mov	r7, r3
 800a560:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a562:	b095      	sub	sp, #84	; 0x54
 800a564:	4604      	mov	r4, r0
 800a566:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a56a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a56e:	b93d      	cbnz	r5, 800a580 <_dtoa_r+0x28>
 800a570:	2010      	movs	r0, #16
 800a572:	f7ff fa09 	bl	8009988 <malloc>
 800a576:	6260      	str	r0, [r4, #36]	; 0x24
 800a578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a57c:	6005      	str	r5, [r0, #0]
 800a57e:	60c5      	str	r5, [r0, #12]
 800a580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	b151      	cbz	r1, 800a59c <_dtoa_r+0x44>
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	2301      	movs	r3, #1
 800a58a:	4093      	lsls	r3, r2
 800a58c:	604a      	str	r2, [r1, #4]
 800a58e:	608b      	str	r3, [r1, #8]
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fde7 	bl	800b164 <_Bfree>
 800a596:	2200      	movs	r2, #0
 800a598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	1e3b      	subs	r3, r7, #0
 800a59e:	bfaf      	iteee	ge
 800a5a0:	2300      	movge	r3, #0
 800a5a2:	2201      	movlt	r2, #1
 800a5a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5a8:	9303      	strlt	r3, [sp, #12]
 800a5aa:	bfac      	ite	ge
 800a5ac:	f8c8 3000 	strge.w	r3, [r8]
 800a5b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a5b4:	4bae      	ldr	r3, [pc, #696]	; (800a870 <_dtoa_r+0x318>)
 800a5b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a5ba:	ea33 0308 	bics.w	r3, r3, r8
 800a5be:	d11b      	bne.n	800a5f8 <_dtoa_r+0xa0>
 800a5c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	b923      	cbnz	r3, 800a5d6 <_dtoa_r+0x7e>
 800a5cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f000 8545 	beq.w	800b060 <_dtoa_r+0xb08>
 800a5d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5d8:	b953      	cbnz	r3, 800a5f0 <_dtoa_r+0x98>
 800a5da:	4ba6      	ldr	r3, [pc, #664]	; (800a874 <_dtoa_r+0x31c>)
 800a5dc:	e021      	b.n	800a622 <_dtoa_r+0xca>
 800a5de:	4ba6      	ldr	r3, [pc, #664]	; (800a878 <_dtoa_r+0x320>)
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	9806      	ldr	r0, [sp, #24]
 800a5ea:	b015      	add	sp, #84	; 0x54
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	4ba0      	ldr	r3, [pc, #640]	; (800a874 <_dtoa_r+0x31c>)
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	3303      	adds	r3, #3
 800a5f6:	e7f5      	b.n	800a5e4 <_dtoa_r+0x8c>
 800a5f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2300      	movs	r3, #0
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f6 f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 800a608:	4682      	mov	sl, r0
 800a60a:	b160      	cbz	r0, 800a626 <_dtoa_r+0xce>
 800a60c:	2301      	movs	r3, #1
 800a60e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8520 	beq.w	800b05a <_dtoa_r+0xb02>
 800a61a:	4b98      	ldr	r3, [pc, #608]	; (800a87c <_dtoa_r+0x324>)
 800a61c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	3b01      	subs	r3, #1
 800a622:	9306      	str	r3, [sp, #24]
 800a624:	e7e0      	b.n	800a5e8 <_dtoa_r+0x90>
 800a626:	ab12      	add	r3, sp, #72	; 0x48
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	ab13      	add	r3, sp, #76	; 0x4c
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	4632      	mov	r2, r6
 800a630:	463b      	mov	r3, r7
 800a632:	4620      	mov	r0, r4
 800a634:	f000 ffee 	bl	800b614 <__d2b>
 800a638:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a63c:	4683      	mov	fp, r0
 800a63e:	2d00      	cmp	r5, #0
 800a640:	d07d      	beq.n	800a73e <_dtoa_r+0x1e6>
 800a642:	46b0      	mov	r8, r6
 800a644:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a648:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a64c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a650:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a654:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a658:	2200      	movs	r2, #0
 800a65a:	4b89      	ldr	r3, [pc, #548]	; (800a880 <_dtoa_r+0x328>)
 800a65c:	4640      	mov	r0, r8
 800a65e:	4649      	mov	r1, r9
 800a660:	f7f5 fd82 	bl	8000168 <__aeabi_dsub>
 800a664:	a37c      	add	r3, pc, #496	; (adr r3, 800a858 <_dtoa_r+0x300>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f7f5 ff35 	bl	80004d8 <__aeabi_dmul>
 800a66e:	a37c      	add	r3, pc, #496	; (adr r3, 800a860 <_dtoa_r+0x308>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f7f5 fd7a 	bl	800016c <__adddf3>
 800a678:	4606      	mov	r6, r0
 800a67a:	4628      	mov	r0, r5
 800a67c:	460f      	mov	r7, r1
 800a67e:	f7f5 fec1 	bl	8000404 <__aeabi_i2d>
 800a682:	a379      	add	r3, pc, #484	; (adr r3, 800a868 <_dtoa_r+0x310>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ff26 	bl	80004d8 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f5 fd6a 	bl	800016c <__adddf3>
 800a698:	4606      	mov	r6, r0
 800a69a:	460f      	mov	r7, r1
 800a69c:	f7f6 f9cc 	bl	8000a38 <__aeabi_d2iz>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4682      	mov	sl, r0
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f6 f987 	bl	80009bc <__aeabi_dcmplt>
 800a6ae:	b148      	cbz	r0, 800a6c4 <_dtoa_r+0x16c>
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	f7f5 fea7 	bl	8000404 <__aeabi_i2d>
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	463b      	mov	r3, r7
 800a6ba:	f7f6 f975 	bl	80009a8 <__aeabi_dcmpeq>
 800a6be:	b908      	cbnz	r0, 800a6c4 <_dtoa_r+0x16c>
 800a6c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6c4:	f1ba 0f16 	cmp.w	sl, #22
 800a6c8:	d85a      	bhi.n	800a780 <_dtoa_r+0x228>
 800a6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6ce:	496d      	ldr	r1, [pc, #436]	; (800a884 <_dtoa_r+0x32c>)
 800a6d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d8:	f7f6 f98e 	bl	80009f8 <__aeabi_dcmpgt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d051      	beq.n	800a784 <_dtoa_r+0x22c>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ea:	1b5d      	subs	r5, r3, r5
 800a6ec:	1e6b      	subs	r3, r5, #1
 800a6ee:	9307      	str	r3, [sp, #28]
 800a6f0:	bf43      	ittte	mi
 800a6f2:	2300      	movmi	r3, #0
 800a6f4:	f1c5 0901 	rsbmi	r9, r5, #1
 800a6f8:	9307      	strmi	r3, [sp, #28]
 800a6fa:	f04f 0900 	movpl.w	r9, #0
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	db41      	blt.n	800a788 <_dtoa_r+0x230>
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a70a:	4453      	add	r3, sl
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	2300      	movs	r3, #0
 800a710:	9308      	str	r3, [sp, #32]
 800a712:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a714:	2b09      	cmp	r3, #9
 800a716:	f200 808f 	bhi.w	800a838 <_dtoa_r+0x2e0>
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	bfc4      	itt	gt
 800a71e:	3b04      	subgt	r3, #4
 800a720:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a722:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a724:	bfc8      	it	gt
 800a726:	2500      	movgt	r5, #0
 800a728:	f1a3 0302 	sub.w	r3, r3, #2
 800a72c:	bfd8      	it	le
 800a72e:	2501      	movle	r5, #1
 800a730:	2b03      	cmp	r3, #3
 800a732:	f200 808d 	bhi.w	800a850 <_dtoa_r+0x2f8>
 800a736:	e8df f003 	tbb	[pc, r3]
 800a73a:	7d7b      	.short	0x7d7b
 800a73c:	6f2f      	.short	0x6f2f
 800a73e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a742:	441d      	add	r5, r3
 800a744:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a748:	2820      	cmp	r0, #32
 800a74a:	dd13      	ble.n	800a774 <_dtoa_r+0x21c>
 800a74c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	fa08 f800 	lsl.w	r8, r8, r0
 800a756:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a75a:	fa23 f000 	lsr.w	r0, r3, r0
 800a75e:	ea48 0000 	orr.w	r0, r8, r0
 800a762:	f7f5 fe3f 	bl	80003e4 <__aeabi_ui2d>
 800a766:	2301      	movs	r3, #1
 800a768:	4680      	mov	r8, r0
 800a76a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a76e:	3d01      	subs	r5, #1
 800a770:	9310      	str	r3, [sp, #64]	; 0x40
 800a772:	e771      	b.n	800a658 <_dtoa_r+0x100>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	f1c0 0020 	rsb	r0, r0, #32
 800a77a:	fa03 f000 	lsl.w	r0, r3, r0
 800a77e:	e7f0      	b.n	800a762 <_dtoa_r+0x20a>
 800a780:	2301      	movs	r3, #1
 800a782:	e7b0      	b.n	800a6e6 <_dtoa_r+0x18e>
 800a784:	900d      	str	r0, [sp, #52]	; 0x34
 800a786:	e7af      	b.n	800a6e8 <_dtoa_r+0x190>
 800a788:	f1ca 0300 	rsb	r3, sl, #0
 800a78c:	9308      	str	r3, [sp, #32]
 800a78e:	2300      	movs	r3, #0
 800a790:	eba9 090a 	sub.w	r9, r9, sl
 800a794:	930c      	str	r3, [sp, #48]	; 0x30
 800a796:	e7bc      	b.n	800a712 <_dtoa_r+0x1ba>
 800a798:	2301      	movs	r3, #1
 800a79a:	9309      	str	r3, [sp, #36]	; 0x24
 800a79c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd74      	ble.n	800a88c <_dtoa_r+0x334>
 800a7a2:	4698      	mov	r8, r3
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7aa:	6072      	str	r2, [r6, #4]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	f102 0014 	add.w	r0, r2, #20
 800a7b2:	4298      	cmp	r0, r3
 800a7b4:	6871      	ldr	r1, [r6, #4]
 800a7b6:	d96e      	bls.n	800a896 <_dtoa_r+0x33e>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fc9f 	bl	800b0fc <_Balloc>
 800a7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7c0:	6030      	str	r0, [r6, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f1b8 0f0e 	cmp.w	r8, #14
 800a7c8:	9306      	str	r3, [sp, #24]
 800a7ca:	f200 80ed 	bhi.w	800a9a8 <_dtoa_r+0x450>
 800a7ce:	2d00      	cmp	r5, #0
 800a7d0:	f000 80ea 	beq.w	800a9a8 <_dtoa_r+0x450>
 800a7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d8:	f1ba 0f00 	cmp.w	sl, #0
 800a7dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a7e0:	dd77      	ble.n	800a8d2 <_dtoa_r+0x37a>
 800a7e2:	4a28      	ldr	r2, [pc, #160]	; (800a884 <_dtoa_r+0x32c>)
 800a7e4:	f00a 030f 	and.w	r3, sl, #15
 800a7e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a7ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a7f0:	06f0      	lsls	r0, r6, #27
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a7fa:	d568      	bpl.n	800a8ce <_dtoa_r+0x376>
 800a7fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a800:	4b21      	ldr	r3, [pc, #132]	; (800a888 <_dtoa_r+0x330>)
 800a802:	2503      	movs	r5, #3
 800a804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a808:	f7f5 ff90 	bl	800072c <__aeabi_ddiv>
 800a80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a810:	f006 060f 	and.w	r6, r6, #15
 800a814:	4f1c      	ldr	r7, [pc, #112]	; (800a888 <_dtoa_r+0x330>)
 800a816:	e04f      	b.n	800a8b8 <_dtoa_r+0x360>
 800a818:	2301      	movs	r3, #1
 800a81a:	9309      	str	r3, [sp, #36]	; 0x24
 800a81c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a81e:	4453      	add	r3, sl
 800a820:	f103 0801 	add.w	r8, r3, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	4643      	mov	r3, r8
 800a828:	2b01      	cmp	r3, #1
 800a82a:	bfb8      	it	lt
 800a82c:	2301      	movlt	r3, #1
 800a82e:	e7ba      	b.n	800a7a6 <_dtoa_r+0x24e>
 800a830:	2300      	movs	r3, #0
 800a832:	e7b2      	b.n	800a79a <_dtoa_r+0x242>
 800a834:	2300      	movs	r3, #0
 800a836:	e7f0      	b.n	800a81a <_dtoa_r+0x2c2>
 800a838:	2501      	movs	r5, #1
 800a83a:	2300      	movs	r3, #0
 800a83c:	9509      	str	r5, [sp, #36]	; 0x24
 800a83e:	931e      	str	r3, [sp, #120]	; 0x78
 800a840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a844:	2200      	movs	r2, #0
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	4698      	mov	r8, r3
 800a84a:	2312      	movs	r3, #18
 800a84c:	921f      	str	r2, [sp, #124]	; 0x7c
 800a84e:	e7aa      	b.n	800a7a6 <_dtoa_r+0x24e>
 800a850:	2301      	movs	r3, #1
 800a852:	9309      	str	r3, [sp, #36]	; 0x24
 800a854:	e7f4      	b.n	800a840 <_dtoa_r+0x2e8>
 800a856:	bf00      	nop
 800a858:	636f4361 	.word	0x636f4361
 800a85c:	3fd287a7 	.word	0x3fd287a7
 800a860:	8b60c8b3 	.word	0x8b60c8b3
 800a864:	3fc68a28 	.word	0x3fc68a28
 800a868:	509f79fb 	.word	0x509f79fb
 800a86c:	3fd34413 	.word	0x3fd34413
 800a870:	7ff00000 	.word	0x7ff00000
 800a874:	0800cc5d 	.word	0x0800cc5d
 800a878:	0800cc54 	.word	0x0800cc54
 800a87c:	0800cc31 	.word	0x0800cc31
 800a880:	3ff80000 	.word	0x3ff80000
 800a884:	0800cc90 	.word	0x0800cc90
 800a888:	0800cc68 	.word	0x0800cc68
 800a88c:	2301      	movs	r3, #1
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	4698      	mov	r8, r3
 800a892:	461a      	mov	r2, r3
 800a894:	e7da      	b.n	800a84c <_dtoa_r+0x2f4>
 800a896:	3101      	adds	r1, #1
 800a898:	6071      	str	r1, [r6, #4]
 800a89a:	0052      	lsls	r2, r2, #1
 800a89c:	e787      	b.n	800a7ae <_dtoa_r+0x256>
 800a89e:	07f1      	lsls	r1, r6, #31
 800a8a0:	d508      	bpl.n	800a8b4 <_dtoa_r+0x35c>
 800a8a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8aa:	f7f5 fe15 	bl	80004d8 <__aeabi_dmul>
 800a8ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8b2:	3501      	adds	r5, #1
 800a8b4:	1076      	asrs	r6, r6, #1
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	d1f0      	bne.n	800a89e <_dtoa_r+0x346>
 800a8bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c4:	f7f5 ff32 	bl	800072c <__aeabi_ddiv>
 800a8c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8cc:	e01b      	b.n	800a906 <_dtoa_r+0x3ae>
 800a8ce:	2502      	movs	r5, #2
 800a8d0:	e7a0      	b.n	800a814 <_dtoa_r+0x2bc>
 800a8d2:	f000 80a4 	beq.w	800aa1e <_dtoa_r+0x4c6>
 800a8d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8da:	f1ca 0600 	rsb	r6, sl, #0
 800a8de:	4ba0      	ldr	r3, [pc, #640]	; (800ab60 <_dtoa_r+0x608>)
 800a8e0:	f006 020f 	and.w	r2, r6, #15
 800a8e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fdf4 	bl	80004d8 <__aeabi_dmul>
 800a8f0:	2502      	movs	r5, #2
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f8:	4f9a      	ldr	r7, [pc, #616]	; (800ab64 <_dtoa_r+0x60c>)
 800a8fa:	1136      	asrs	r6, r6, #4
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	f040 8083 	bne.w	800aa08 <_dtoa_r+0x4b0>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e0      	bne.n	800a8c8 <_dtoa_r+0x370>
 800a906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 808a 	beq.w	800aa22 <_dtoa_r+0x4ca>
 800a90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a912:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a91a:	2200      	movs	r2, #0
 800a91c:	4b92      	ldr	r3, [pc, #584]	; (800ab68 <_dtoa_r+0x610>)
 800a91e:	f7f6 f84d 	bl	80009bc <__aeabi_dcmplt>
 800a922:	2800      	cmp	r0, #0
 800a924:	d07d      	beq.n	800aa22 <_dtoa_r+0x4ca>
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	d07a      	beq.n	800aa22 <_dtoa_r+0x4ca>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd36      	ble.n	800a9a0 <_dtoa_r+0x448>
 800a932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a936:	2200      	movs	r2, #0
 800a938:	4b8c      	ldr	r3, [pc, #560]	; (800ab6c <_dtoa_r+0x614>)
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a942:	9e04      	ldr	r6, [sp, #16]
 800a944:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800a948:	3501      	adds	r5, #1
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7f5 fd5a 	bl	8000404 <__aeabi_i2d>
 800a950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a954:	f7f5 fdc0 	bl	80004d8 <__aeabi_dmul>
 800a958:	2200      	movs	r2, #0
 800a95a:	4b85      	ldr	r3, [pc, #532]	; (800ab70 <_dtoa_r+0x618>)
 800a95c:	f7f5 fc06 	bl	800016c <__adddf3>
 800a960:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a964:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a968:	950b      	str	r5, [sp, #44]	; 0x2c
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	d15c      	bne.n	800aa28 <_dtoa_r+0x4d0>
 800a96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a972:	2200      	movs	r2, #0
 800a974:	4b7f      	ldr	r3, [pc, #508]	; (800ab74 <_dtoa_r+0x61c>)
 800a976:	f7f5 fbf7 	bl	8000168 <__aeabi_dsub>
 800a97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a97c:	462b      	mov	r3, r5
 800a97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a982:	f7f6 f839 	bl	80009f8 <__aeabi_dcmpgt>
 800a986:	2800      	cmp	r0, #0
 800a988:	f040 8281 	bne.w	800ae8e <_dtoa_r+0x936>
 800a98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a992:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a996:	f7f6 f811 	bl	80009bc <__aeabi_dcmplt>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f040 8275 	bne.w	800ae8a <_dtoa_r+0x932>
 800a9a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f2c0 814b 	blt.w	800ac46 <_dtoa_r+0x6ee>
 800a9b0:	f1ba 0f0e 	cmp.w	sl, #14
 800a9b4:	f300 8147 	bgt.w	800ac46 <_dtoa_r+0x6ee>
 800a9b8:	4b69      	ldr	r3, [pc, #420]	; (800ab60 <_dtoa_r+0x608>)
 800a9ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f280 80d7 	bge.w	800ab7c <_dtoa_r+0x624>
 800a9ce:	f1b8 0f00 	cmp.w	r8, #0
 800a9d2:	f300 80d3 	bgt.w	800ab7c <_dtoa_r+0x624>
 800a9d6:	f040 8257 	bne.w	800ae88 <_dtoa_r+0x930>
 800a9da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4b64      	ldr	r3, [pc, #400]	; (800ab74 <_dtoa_r+0x61c>)
 800a9e2:	f7f5 fd79 	bl	80004d8 <__aeabi_dmul>
 800a9e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ea:	f7f5 fffb 	bl	80009e4 <__aeabi_dcmpge>
 800a9ee:	4646      	mov	r6, r8
 800a9f0:	4647      	mov	r7, r8
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f040 822d 	bne.w	800ae52 <_dtoa_r+0x8fa>
 800a9f8:	9b06      	ldr	r3, [sp, #24]
 800a9fa:	9a06      	ldr	r2, [sp, #24]
 800a9fc:	1c5d      	adds	r5, r3, #1
 800a9fe:	2331      	movs	r3, #49	; 0x31
 800aa00:	f10a 0a01 	add.w	sl, sl, #1
 800aa04:	7013      	strb	r3, [r2, #0]
 800aa06:	e228      	b.n	800ae5a <_dtoa_r+0x902>
 800aa08:	07f2      	lsls	r2, r6, #31
 800aa0a:	d505      	bpl.n	800aa18 <_dtoa_r+0x4c0>
 800aa0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa10:	f7f5 fd62 	bl	80004d8 <__aeabi_dmul>
 800aa14:	2301      	movs	r3, #1
 800aa16:	3501      	adds	r5, #1
 800aa18:	1076      	asrs	r6, r6, #1
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	e76e      	b.n	800a8fc <_dtoa_r+0x3a4>
 800aa1e:	2502      	movs	r5, #2
 800aa20:	e771      	b.n	800a906 <_dtoa_r+0x3ae>
 800aa22:	4657      	mov	r7, sl
 800aa24:	4646      	mov	r6, r8
 800aa26:	e790      	b.n	800a94a <_dtoa_r+0x3f2>
 800aa28:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <_dtoa_r+0x608>)
 800aa2a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800aa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d048      	beq.n	800aaca <_dtoa_r+0x572>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	494e      	ldr	r1, [pc, #312]	; (800ab78 <_dtoa_r+0x620>)
 800aa40:	f7f5 fe74 	bl	800072c <__aeabi_ddiv>
 800aa44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa48:	f7f5 fb8e 	bl	8000168 <__aeabi_dsub>
 800aa4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa50:	9d06      	ldr	r5, [sp, #24]
 800aa52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa56:	f7f5 ffef 	bl	8000a38 <__aeabi_d2iz>
 800aa5a:	9011      	str	r0, [sp, #68]	; 0x44
 800aa5c:	f7f5 fcd2 	bl	8000404 <__aeabi_i2d>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa68:	f7f5 fb7e 	bl	8000168 <__aeabi_dsub>
 800aa6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa72:	3330      	adds	r3, #48	; 0x30
 800aa74:	f805 3b01 	strb.w	r3, [r5], #1
 800aa78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa7c:	f7f5 ff9e 	bl	80009bc <__aeabi_dcmplt>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d163      	bne.n	800ab4c <_dtoa_r+0x5f4>
 800aa84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa88:	2000      	movs	r0, #0
 800aa8a:	4937      	ldr	r1, [pc, #220]	; (800ab68 <_dtoa_r+0x610>)
 800aa8c:	f7f5 fb6c 	bl	8000168 <__aeabi_dsub>
 800aa90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa94:	f7f5 ff92 	bl	80009bc <__aeabi_dcmplt>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	f040 80b5 	bne.w	800ac08 <_dtoa_r+0x6b0>
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	1aeb      	subs	r3, r5, r3
 800aaa2:	429e      	cmp	r6, r3
 800aaa4:	f77f af7c 	ble.w	800a9a0 <_dtoa_r+0x448>
 800aaa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaac:	2200      	movs	r2, #0
 800aaae:	4b2f      	ldr	r3, [pc, #188]	; (800ab6c <_dtoa_r+0x614>)
 800aab0:	f7f5 fd12 	bl	80004d8 <__aeabi_dmul>
 800aab4:	2200      	movs	r2, #0
 800aab6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aaba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aabe:	4b2b      	ldr	r3, [pc, #172]	; (800ab6c <_dtoa_r+0x614>)
 800aac0:	f7f5 fd0a 	bl	80004d8 <__aeabi_dmul>
 800aac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac8:	e7c3      	b.n	800aa52 <_dtoa_r+0x4fa>
 800aaca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aace:	f7f5 fd03 	bl	80004d8 <__aeabi_dmul>
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aad8:	199d      	adds	r5, r3, r6
 800aada:	461e      	mov	r6, r3
 800aadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae0:	f7f5 ffaa 	bl	8000a38 <__aeabi_d2iz>
 800aae4:	9011      	str	r0, [sp, #68]	; 0x44
 800aae6:	f7f5 fc8d 	bl	8000404 <__aeabi_i2d>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf2:	f7f5 fb39 	bl	8000168 <__aeabi_dsub>
 800aaf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aafc:	3330      	adds	r3, #48	; 0x30
 800aafe:	f806 3b01 	strb.w	r3, [r6], #1
 800ab02:	42ae      	cmp	r6, r5
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	d124      	bne.n	800ab54 <_dtoa_r+0x5fc>
 800ab0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab0e:	4b1a      	ldr	r3, [pc, #104]	; (800ab78 <_dtoa_r+0x620>)
 800ab10:	f7f5 fb2c 	bl	800016c <__adddf3>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab1c:	f7f5 ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d171      	bne.n	800ac08 <_dtoa_r+0x6b0>
 800ab24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4913      	ldr	r1, [pc, #76]	; (800ab78 <_dtoa_r+0x620>)
 800ab2c:	f7f5 fb1c 	bl	8000168 <__aeabi_dsub>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab38:	f7f5 ff40 	bl	80009bc <__aeabi_dcmplt>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	f43f af2f 	beq.w	800a9a0 <_dtoa_r+0x448>
 800ab42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab46:	1e6a      	subs	r2, r5, #1
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	d001      	beq.n	800ab50 <_dtoa_r+0x5f8>
 800ab4c:	46ba      	mov	sl, r7
 800ab4e:	e04a      	b.n	800abe6 <_dtoa_r+0x68e>
 800ab50:	4615      	mov	r5, r2
 800ab52:	e7f6      	b.n	800ab42 <_dtoa_r+0x5ea>
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <_dtoa_r+0x614>)
 800ab56:	f7f5 fcbf 	bl	80004d8 <__aeabi_dmul>
 800ab5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab5e:	e7bd      	b.n	800aadc <_dtoa_r+0x584>
 800ab60:	0800cc90 	.word	0x0800cc90
 800ab64:	0800cc68 	.word	0x0800cc68
 800ab68:	3ff00000 	.word	0x3ff00000
 800ab6c:	40240000 	.word	0x40240000
 800ab70:	401c0000 	.word	0x401c0000
 800ab74:	40140000 	.word	0x40140000
 800ab78:	3fe00000 	.word	0x3fe00000
 800ab7c:	9d06      	ldr	r5, [sp, #24]
 800ab7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab86:	4630      	mov	r0, r6
 800ab88:	4639      	mov	r1, r7
 800ab8a:	f7f5 fdcf 	bl	800072c <__aeabi_ddiv>
 800ab8e:	f7f5 ff53 	bl	8000a38 <__aeabi_d2iz>
 800ab92:	4681      	mov	r9, r0
 800ab94:	f7f5 fc36 	bl	8000404 <__aeabi_i2d>
 800ab98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9c:	f7f5 fc9c 	bl	80004d8 <__aeabi_dmul>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 fade 	bl	8000168 <__aeabi_dsub>
 800abac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800abb0:	f805 6b01 	strb.w	r6, [r5], #1
 800abb4:	9e06      	ldr	r6, [sp, #24]
 800abb6:	4602      	mov	r2, r0
 800abb8:	1bae      	subs	r6, r5, r6
 800abba:	45b0      	cmp	r8, r6
 800abbc:	460b      	mov	r3, r1
 800abbe:	d135      	bne.n	800ac2c <_dtoa_r+0x6d4>
 800abc0:	f7f5 fad4 	bl	800016c <__adddf3>
 800abc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abc8:	4606      	mov	r6, r0
 800abca:	460f      	mov	r7, r1
 800abcc:	f7f5 ff14 	bl	80009f8 <__aeabi_dcmpgt>
 800abd0:	b9c8      	cbnz	r0, 800ac06 <_dtoa_r+0x6ae>
 800abd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fee5 	bl	80009a8 <__aeabi_dcmpeq>
 800abde:	b110      	cbz	r0, 800abe6 <_dtoa_r+0x68e>
 800abe0:	f019 0f01 	tst.w	r9, #1
 800abe4:	d10f      	bne.n	800ac06 <_dtoa_r+0x6ae>
 800abe6:	4659      	mov	r1, fp
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fabb 	bl	800b164 <_Bfree>
 800abee:	2300      	movs	r3, #0
 800abf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800abf2:	702b      	strb	r3, [r5, #0]
 800abf4:	f10a 0301 	add.w	r3, sl, #1
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f43f acf3 	beq.w	800a5e8 <_dtoa_r+0x90>
 800ac02:	601d      	str	r5, [r3, #0]
 800ac04:	e4f0      	b.n	800a5e8 <_dtoa_r+0x90>
 800ac06:	4657      	mov	r7, sl
 800ac08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac0c:	1e6b      	subs	r3, r5, #1
 800ac0e:	2a39      	cmp	r2, #57	; 0x39
 800ac10:	d106      	bne.n	800ac20 <_dtoa_r+0x6c8>
 800ac12:	9a06      	ldr	r2, [sp, #24]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d107      	bne.n	800ac28 <_dtoa_r+0x6d0>
 800ac18:	2330      	movs	r3, #48	; 0x30
 800ac1a:	7013      	strb	r3, [r2, #0]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	3701      	adds	r7, #1
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	3201      	adds	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e791      	b.n	800ab4c <_dtoa_r+0x5f4>
 800ac28:	461d      	mov	r5, r3
 800ac2a:	e7ed      	b.n	800ac08 <_dtoa_r+0x6b0>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4b99      	ldr	r3, [pc, #612]	; (800ae94 <_dtoa_r+0x93c>)
 800ac30:	f7f5 fc52 	bl	80004d8 <__aeabi_dmul>
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	f7f5 feb4 	bl	80009a8 <__aeabi_dcmpeq>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d09e      	beq.n	800ab82 <_dtoa_r+0x62a>
 800ac44:	e7cf      	b.n	800abe6 <_dtoa_r+0x68e>
 800ac46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	f000 8088 	beq.w	800ad5e <_dtoa_r+0x806>
 800ac4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac50:	2a01      	cmp	r2, #1
 800ac52:	dc6d      	bgt.n	800ad30 <_dtoa_r+0x7d8>
 800ac54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	d066      	beq.n	800ad28 <_dtoa_r+0x7d0>
 800ac5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac5e:	464d      	mov	r5, r9
 800ac60:	9e08      	ldr	r6, [sp, #32]
 800ac62:	9a07      	ldr	r2, [sp, #28]
 800ac64:	2101      	movs	r1, #1
 800ac66:	441a      	add	r2, r3
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4499      	add	r9, r3
 800ac6c:	9207      	str	r2, [sp, #28]
 800ac6e:	f000 fb19 	bl	800b2a4 <__i2b>
 800ac72:	4607      	mov	r7, r0
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	dd0b      	ble.n	800ac90 <_dtoa_r+0x738>
 800ac78:	9b07      	ldr	r3, [sp, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dd08      	ble.n	800ac90 <_dtoa_r+0x738>
 800ac7e:	42ab      	cmp	r3, r5
 800ac80:	bfa8      	it	ge
 800ac82:	462b      	movge	r3, r5
 800ac84:	9a07      	ldr	r2, [sp, #28]
 800ac86:	eba9 0903 	sub.w	r9, r9, r3
 800ac8a:	1aed      	subs	r5, r5, r3
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	b1eb      	cbz	r3, 800acd0 <_dtoa_r+0x778>
 800ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d065      	beq.n	800ad66 <_dtoa_r+0x80e>
 800ac9a:	b18e      	cbz	r6, 800acc0 <_dtoa_r+0x768>
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4632      	mov	r2, r6
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fb9d 	bl	800b3e0 <__pow5mult>
 800aca6:	465a      	mov	r2, fp
 800aca8:	4601      	mov	r1, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fb02 	bl	800b2b6 <__multiply>
 800acb2:	4659      	mov	r1, fp
 800acb4:	900a      	str	r0, [sp, #40]	; 0x28
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fa54 	bl	800b164 <_Bfree>
 800acbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acbe:	469b      	mov	fp, r3
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	1b9a      	subs	r2, r3, r6
 800acc4:	d004      	beq.n	800acd0 <_dtoa_r+0x778>
 800acc6:	4659      	mov	r1, fp
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fb89 	bl	800b3e0 <__pow5mult>
 800acce:	4683      	mov	fp, r0
 800acd0:	2101      	movs	r1, #1
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fae6 	bl	800b2a4 <__i2b>
 800acd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acda:	4606      	mov	r6, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 81c6 	beq.w	800b06e <_dtoa_r+0xb16>
 800ace2:	461a      	mov	r2, r3
 800ace4:	4601      	mov	r1, r0
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fb7a 	bl	800b3e0 <__pow5mult>
 800acec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800acee:	4606      	mov	r6, r0
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	dc3e      	bgt.n	800ad72 <_dtoa_r+0x81a>
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d137      	bne.n	800ad6a <_dtoa_r+0x812>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d134      	bne.n	800ad6e <_dtoa_r+0x816>
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad0a:	0d1b      	lsrs	r3, r3, #20
 800ad0c:	051b      	lsls	r3, r3, #20
 800ad0e:	b12b      	cbz	r3, 800ad1c <_dtoa_r+0x7c4>
 800ad10:	9b07      	ldr	r3, [sp, #28]
 800ad12:	f109 0901 	add.w	r9, r9, #1
 800ad16:	3301      	adds	r3, #1
 800ad18:	9307      	str	r3, [sp, #28]
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	9308      	str	r3, [sp, #32]
 800ad1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d128      	bne.n	800ad76 <_dtoa_r+0x81e>
 800ad24:	2001      	movs	r0, #1
 800ad26:	e02e      	b.n	800ad86 <_dtoa_r+0x82e>
 800ad28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad2e:	e796      	b.n	800ac5e <_dtoa_r+0x706>
 800ad30:	9b08      	ldr	r3, [sp, #32]
 800ad32:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800ad36:	42b3      	cmp	r3, r6
 800ad38:	bfb7      	itett	lt
 800ad3a:	9b08      	ldrlt	r3, [sp, #32]
 800ad3c:	1b9e      	subge	r6, r3, r6
 800ad3e:	1af2      	sublt	r2, r6, r3
 800ad40:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ad42:	bfbf      	itttt	lt
 800ad44:	9608      	strlt	r6, [sp, #32]
 800ad46:	189b      	addlt	r3, r3, r2
 800ad48:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ad4a:	2600      	movlt	r6, #0
 800ad4c:	f1b8 0f00 	cmp.w	r8, #0
 800ad50:	bfb9      	ittee	lt
 800ad52:	eba9 0508 	sublt.w	r5, r9, r8
 800ad56:	2300      	movlt	r3, #0
 800ad58:	464d      	movge	r5, r9
 800ad5a:	4643      	movge	r3, r8
 800ad5c:	e781      	b.n	800ac62 <_dtoa_r+0x70a>
 800ad5e:	9e08      	ldr	r6, [sp, #32]
 800ad60:	464d      	mov	r5, r9
 800ad62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad64:	e786      	b.n	800ac74 <_dtoa_r+0x71c>
 800ad66:	9a08      	ldr	r2, [sp, #32]
 800ad68:	e7ad      	b.n	800acc6 <_dtoa_r+0x76e>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e7d6      	b.n	800ad1c <_dtoa_r+0x7c4>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	e7d4      	b.n	800ad1c <_dtoa_r+0x7c4>
 800ad72:	2300      	movs	r3, #0
 800ad74:	9308      	str	r3, [sp, #32]
 800ad76:	6933      	ldr	r3, [r6, #16]
 800ad78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad7c:	6918      	ldr	r0, [r3, #16]
 800ad7e:	f000 fa43 	bl	800b208 <__hi0bits>
 800ad82:	f1c0 0020 	rsb	r0, r0, #32
 800ad86:	9b07      	ldr	r3, [sp, #28]
 800ad88:	4418      	add	r0, r3
 800ad8a:	f010 001f 	ands.w	r0, r0, #31
 800ad8e:	d047      	beq.n	800ae20 <_dtoa_r+0x8c8>
 800ad90:	f1c0 0320 	rsb	r3, r0, #32
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	dd3b      	ble.n	800ae10 <_dtoa_r+0x8b8>
 800ad98:	9b07      	ldr	r3, [sp, #28]
 800ad9a:	f1c0 001c 	rsb	r0, r0, #28
 800ad9e:	4481      	add	r9, r0
 800ada0:	4405      	add	r5, r0
 800ada2:	4403      	add	r3, r0
 800ada4:	9307      	str	r3, [sp, #28]
 800ada6:	f1b9 0f00 	cmp.w	r9, #0
 800adaa:	dd05      	ble.n	800adb8 <_dtoa_r+0x860>
 800adac:	4659      	mov	r1, fp
 800adae:	464a      	mov	r2, r9
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fb63 	bl	800b47c <__lshift>
 800adb6:	4683      	mov	fp, r0
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	dd05      	ble.n	800adca <_dtoa_r+0x872>
 800adbe:	4631      	mov	r1, r6
 800adc0:	461a      	mov	r2, r3
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fb5a 	bl	800b47c <__lshift>
 800adc8:	4606      	mov	r6, r0
 800adca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adcc:	b353      	cbz	r3, 800ae24 <_dtoa_r+0x8cc>
 800adce:	4631      	mov	r1, r6
 800add0:	4658      	mov	r0, fp
 800add2:	f000 fba7 	bl	800b524 <__mcmp>
 800add6:	2800      	cmp	r0, #0
 800add8:	da24      	bge.n	800ae24 <_dtoa_r+0x8cc>
 800adda:	2300      	movs	r3, #0
 800addc:	4659      	mov	r1, fp
 800adde:	220a      	movs	r2, #10
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 f9d6 	bl	800b192 <__multadd>
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800adec:	4683      	mov	fp, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 8144 	beq.w	800b07c <_dtoa_r+0xb24>
 800adf4:	2300      	movs	r3, #0
 800adf6:	4639      	mov	r1, r7
 800adf8:	220a      	movs	r2, #10
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 f9c9 	bl	800b192 <__multadd>
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	4607      	mov	r7, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dc4d      	bgt.n	800aea4 <_dtoa_r+0x94c>
 800ae08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	dd4a      	ble.n	800aea4 <_dtoa_r+0x94c>
 800ae0e:	e011      	b.n	800ae34 <_dtoa_r+0x8dc>
 800ae10:	d0c9      	beq.n	800ada6 <_dtoa_r+0x84e>
 800ae12:	9a07      	ldr	r2, [sp, #28]
 800ae14:	331c      	adds	r3, #28
 800ae16:	441a      	add	r2, r3
 800ae18:	4499      	add	r9, r3
 800ae1a:	441d      	add	r5, r3
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	e7c1      	b.n	800ada4 <_dtoa_r+0x84c>
 800ae20:	4603      	mov	r3, r0
 800ae22:	e7f6      	b.n	800ae12 <_dtoa_r+0x8ba>
 800ae24:	f1b8 0f00 	cmp.w	r8, #0
 800ae28:	dc36      	bgt.n	800ae98 <_dtoa_r+0x940>
 800ae2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	dd33      	ble.n	800ae98 <_dtoa_r+0x940>
 800ae30:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae34:	9b04      	ldr	r3, [sp, #16]
 800ae36:	b963      	cbnz	r3, 800ae52 <_dtoa_r+0x8fa>
 800ae38:	4631      	mov	r1, r6
 800ae3a:	2205      	movs	r2, #5
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 f9a8 	bl	800b192 <__multadd>
 800ae42:	4601      	mov	r1, r0
 800ae44:	4606      	mov	r6, r0
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 fb6c 	bl	800b524 <__mcmp>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	f73f add3 	bgt.w	800a9f8 <_dtoa_r+0x4a0>
 800ae52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae54:	9d06      	ldr	r5, [sp, #24]
 800ae56:	ea6f 0a03 	mvn.w	sl, r3
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 f97f 	bl	800b164 <_Bfree>
 800ae66:	2f00      	cmp	r7, #0
 800ae68:	f43f aebd 	beq.w	800abe6 <_dtoa_r+0x68e>
 800ae6c:	f1b9 0f00 	cmp.w	r9, #0
 800ae70:	d005      	beq.n	800ae7e <_dtoa_r+0x926>
 800ae72:	45b9      	cmp	r9, r7
 800ae74:	d003      	beq.n	800ae7e <_dtoa_r+0x926>
 800ae76:	4649      	mov	r1, r9
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 f973 	bl	800b164 <_Bfree>
 800ae7e:	4639      	mov	r1, r7
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 f96f 	bl	800b164 <_Bfree>
 800ae86:	e6ae      	b.n	800abe6 <_dtoa_r+0x68e>
 800ae88:	2600      	movs	r6, #0
 800ae8a:	4637      	mov	r7, r6
 800ae8c:	e7e1      	b.n	800ae52 <_dtoa_r+0x8fa>
 800ae8e:	46ba      	mov	sl, r7
 800ae90:	4637      	mov	r7, r6
 800ae92:	e5b1      	b.n	800a9f8 <_dtoa_r+0x4a0>
 800ae94:	40240000 	.word	0x40240000
 800ae98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 80f3 	beq.w	800b08a <_dtoa_r+0xb32>
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	dd05      	ble.n	800aeb4 <_dtoa_r+0x95c>
 800aea8:	4639      	mov	r1, r7
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fae5 	bl	800b47c <__lshift>
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d04c      	beq.n	800af54 <_dtoa_r+0x9fc>
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 f91d 	bl	800b0fc <_Balloc>
 800aec2:	4605      	mov	r5, r0
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	f107 010c 	add.w	r1, r7, #12
 800aeca:	3202      	adds	r2, #2
 800aecc:	0092      	lsls	r2, r2, #2
 800aece:	300c      	adds	r0, #12
 800aed0:	f7fe fd79 	bl	80099c6 <memcpy>
 800aed4:	2201      	movs	r2, #1
 800aed6:	4629      	mov	r1, r5
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 facf 	bl	800b47c <__lshift>
 800aede:	46b9      	mov	r9, r7
 800aee0:	4607      	mov	r7, r0
 800aee2:	9b06      	ldr	r3, [sp, #24]
 800aee4:	9307      	str	r3, [sp, #28]
 800aee6:	9b02      	ldr	r3, [sp, #8]
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	9308      	str	r3, [sp, #32]
 800aeee:	4631      	mov	r1, r6
 800aef0:	4658      	mov	r0, fp
 800aef2:	f7ff faa1 	bl	800a438 <quorem>
 800aef6:	4649      	mov	r1, r9
 800aef8:	4605      	mov	r5, r0
 800aefa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aefe:	4658      	mov	r0, fp
 800af00:	f000 fb10 	bl	800b524 <__mcmp>
 800af04:	463a      	mov	r2, r7
 800af06:	9002      	str	r0, [sp, #8]
 800af08:	4631      	mov	r1, r6
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 fb24 	bl	800b558 <__mdiff>
 800af10:	68c3      	ldr	r3, [r0, #12]
 800af12:	4602      	mov	r2, r0
 800af14:	bb03      	cbnz	r3, 800af58 <_dtoa_r+0xa00>
 800af16:	4601      	mov	r1, r0
 800af18:	9009      	str	r0, [sp, #36]	; 0x24
 800af1a:	4658      	mov	r0, fp
 800af1c:	f000 fb02 	bl	800b524 <__mcmp>
 800af20:	4603      	mov	r3, r0
 800af22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af24:	4611      	mov	r1, r2
 800af26:	4620      	mov	r0, r4
 800af28:	9309      	str	r3, [sp, #36]	; 0x24
 800af2a:	f000 f91b 	bl	800b164 <_Bfree>
 800af2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af30:	b9a3      	cbnz	r3, 800af5c <_dtoa_r+0xa04>
 800af32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af34:	b992      	cbnz	r2, 800af5c <_dtoa_r+0xa04>
 800af36:	9a08      	ldr	r2, [sp, #32]
 800af38:	b982      	cbnz	r2, 800af5c <_dtoa_r+0xa04>
 800af3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af3e:	d029      	beq.n	800af94 <_dtoa_r+0xa3c>
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	dd01      	ble.n	800af4a <_dtoa_r+0x9f2>
 800af46:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	1c5d      	adds	r5, r3, #1
 800af4e:	f883 8000 	strb.w	r8, [r3]
 800af52:	e784      	b.n	800ae5e <_dtoa_r+0x906>
 800af54:	4638      	mov	r0, r7
 800af56:	e7c2      	b.n	800aede <_dtoa_r+0x986>
 800af58:	2301      	movs	r3, #1
 800af5a:	e7e3      	b.n	800af24 <_dtoa_r+0x9cc>
 800af5c:	9a02      	ldr	r2, [sp, #8]
 800af5e:	2a00      	cmp	r2, #0
 800af60:	db04      	blt.n	800af6c <_dtoa_r+0xa14>
 800af62:	d123      	bne.n	800afac <_dtoa_r+0xa54>
 800af64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af66:	bb0a      	cbnz	r2, 800afac <_dtoa_r+0xa54>
 800af68:	9a08      	ldr	r2, [sp, #32]
 800af6a:	b9fa      	cbnz	r2, 800afac <_dtoa_r+0xa54>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	ddec      	ble.n	800af4a <_dtoa_r+0x9f2>
 800af70:	4659      	mov	r1, fp
 800af72:	2201      	movs	r2, #1
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fa81 	bl	800b47c <__lshift>
 800af7a:	4631      	mov	r1, r6
 800af7c:	4683      	mov	fp, r0
 800af7e:	f000 fad1 	bl	800b524 <__mcmp>
 800af82:	2800      	cmp	r0, #0
 800af84:	dc03      	bgt.n	800af8e <_dtoa_r+0xa36>
 800af86:	d1e0      	bne.n	800af4a <_dtoa_r+0x9f2>
 800af88:	f018 0f01 	tst.w	r8, #1
 800af8c:	d0dd      	beq.n	800af4a <_dtoa_r+0x9f2>
 800af8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af92:	d1d8      	bne.n	800af46 <_dtoa_r+0x9ee>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	9a07      	ldr	r2, [sp, #28]
 800af98:	1c5d      	adds	r5, r3, #1
 800af9a:	2339      	movs	r3, #57	; 0x39
 800af9c:	7013      	strb	r3, [r2, #0]
 800af9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afa2:	1e6a      	subs	r2, r5, #1
 800afa4:	2b39      	cmp	r3, #57	; 0x39
 800afa6:	d04d      	beq.n	800b044 <_dtoa_r+0xaec>
 800afa8:	3301      	adds	r3, #1
 800afaa:	e052      	b.n	800b052 <_dtoa_r+0xafa>
 800afac:	9a07      	ldr	r2, [sp, #28]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f102 0501 	add.w	r5, r2, #1
 800afb4:	dd06      	ble.n	800afc4 <_dtoa_r+0xa6c>
 800afb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800afba:	d0eb      	beq.n	800af94 <_dtoa_r+0xa3c>
 800afbc:	f108 0801 	add.w	r8, r8, #1
 800afc0:	9b07      	ldr	r3, [sp, #28]
 800afc2:	e7c4      	b.n	800af4e <_dtoa_r+0x9f6>
 800afc4:	9b06      	ldr	r3, [sp, #24]
 800afc6:	9a04      	ldr	r2, [sp, #16]
 800afc8:	1aeb      	subs	r3, r5, r3
 800afca:	4293      	cmp	r3, r2
 800afcc:	f805 8c01 	strb.w	r8, [r5, #-1]
 800afd0:	d021      	beq.n	800b016 <_dtoa_r+0xabe>
 800afd2:	4659      	mov	r1, fp
 800afd4:	2300      	movs	r3, #0
 800afd6:	220a      	movs	r2, #10
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 f8da 	bl	800b192 <__multadd>
 800afde:	45b9      	cmp	r9, r7
 800afe0:	4683      	mov	fp, r0
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	f04f 020a 	mov.w	r2, #10
 800afea:	4649      	mov	r1, r9
 800afec:	4620      	mov	r0, r4
 800afee:	d105      	bne.n	800affc <_dtoa_r+0xaa4>
 800aff0:	f000 f8cf 	bl	800b192 <__multadd>
 800aff4:	4681      	mov	r9, r0
 800aff6:	4607      	mov	r7, r0
 800aff8:	9507      	str	r5, [sp, #28]
 800affa:	e778      	b.n	800aeee <_dtoa_r+0x996>
 800affc:	f000 f8c9 	bl	800b192 <__multadd>
 800b000:	4639      	mov	r1, r7
 800b002:	4681      	mov	r9, r0
 800b004:	2300      	movs	r3, #0
 800b006:	220a      	movs	r2, #10
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 f8c2 	bl	800b192 <__multadd>
 800b00e:	4607      	mov	r7, r0
 800b010:	e7f2      	b.n	800aff8 <_dtoa_r+0xaa0>
 800b012:	f04f 0900 	mov.w	r9, #0
 800b016:	4659      	mov	r1, fp
 800b018:	2201      	movs	r2, #1
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fa2e 	bl	800b47c <__lshift>
 800b020:	4631      	mov	r1, r6
 800b022:	4683      	mov	fp, r0
 800b024:	f000 fa7e 	bl	800b524 <__mcmp>
 800b028:	2800      	cmp	r0, #0
 800b02a:	dcb8      	bgt.n	800af9e <_dtoa_r+0xa46>
 800b02c:	d102      	bne.n	800b034 <_dtoa_r+0xadc>
 800b02e:	f018 0f01 	tst.w	r8, #1
 800b032:	d1b4      	bne.n	800af9e <_dtoa_r+0xa46>
 800b034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b038:	1e6a      	subs	r2, r5, #1
 800b03a:	2b30      	cmp	r3, #48	; 0x30
 800b03c:	f47f af0f 	bne.w	800ae5e <_dtoa_r+0x906>
 800b040:	4615      	mov	r5, r2
 800b042:	e7f7      	b.n	800b034 <_dtoa_r+0xadc>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	4293      	cmp	r3, r2
 800b048:	d105      	bne.n	800b056 <_dtoa_r+0xafe>
 800b04a:	2331      	movs	r3, #49	; 0x31
 800b04c:	9a06      	ldr	r2, [sp, #24]
 800b04e:	f10a 0a01 	add.w	sl, sl, #1
 800b052:	7013      	strb	r3, [r2, #0]
 800b054:	e703      	b.n	800ae5e <_dtoa_r+0x906>
 800b056:	4615      	mov	r5, r2
 800b058:	e7a1      	b.n	800af9e <_dtoa_r+0xa46>
 800b05a:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <_dtoa_r+0xb60>)
 800b05c:	f7ff bae1 	b.w	800a622 <_dtoa_r+0xca>
 800b060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b062:	2b00      	cmp	r3, #0
 800b064:	f47f aabb 	bne.w	800a5de <_dtoa_r+0x86>
 800b068:	4b14      	ldr	r3, [pc, #80]	; (800b0bc <_dtoa_r+0xb64>)
 800b06a:	f7ff bada 	b.w	800a622 <_dtoa_r+0xca>
 800b06e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b070:	2b01      	cmp	r3, #1
 800b072:	f77f ae3f 	ble.w	800acf4 <_dtoa_r+0x79c>
 800b076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b078:	9308      	str	r3, [sp, #32]
 800b07a:	e653      	b.n	800ad24 <_dtoa_r+0x7cc>
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dc03      	bgt.n	800b08a <_dtoa_r+0xb32>
 800b082:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b084:	2b02      	cmp	r3, #2
 800b086:	f73f aed5 	bgt.w	800ae34 <_dtoa_r+0x8dc>
 800b08a:	9d06      	ldr	r5, [sp, #24]
 800b08c:	4631      	mov	r1, r6
 800b08e:	4658      	mov	r0, fp
 800b090:	f7ff f9d2 	bl	800a438 <quorem>
 800b094:	9b06      	ldr	r3, [sp, #24]
 800b096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b09a:	f805 8b01 	strb.w	r8, [r5], #1
 800b09e:	9a04      	ldr	r2, [sp, #16]
 800b0a0:	1aeb      	subs	r3, r5, r3
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	ddb5      	ble.n	800b012 <_dtoa_r+0xaba>
 800b0a6:	4659      	mov	r1, fp
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	220a      	movs	r2, #10
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 f870 	bl	800b192 <__multadd>
 800b0b2:	4683      	mov	fp, r0
 800b0b4:	e7ea      	b.n	800b08c <_dtoa_r+0xb34>
 800b0b6:	bf00      	nop
 800b0b8:	0800cc30 	.word	0x0800cc30
 800b0bc:	0800cc54 	.word	0x0800cc54

0800b0c0 <_localeconv_r>:
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <_localeconv_r+0x14>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6a18      	ldr	r0, [r3, #32]
 800b0c6:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <_localeconv_r+0x18>)
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	bf08      	it	eq
 800b0cc:	4618      	moveq	r0, r3
 800b0ce:	30f0      	adds	r0, #240	; 0xf0
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	20000014 	.word	0x20000014
 800b0d8:	20000078 	.word	0x20000078

0800b0dc <memchr>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	b2c9      	uxtb	r1, r1
 800b0e0:	4402      	add	r2, r0
 800b0e2:	4290      	cmp	r0, r2
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	d101      	bne.n	800b0ec <memchr+0x10>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e003      	b.n	800b0f4 <memchr+0x18>
 800b0ec:	781c      	ldrb	r4, [r3, #0]
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	428c      	cmp	r4, r1
 800b0f2:	d1f6      	bne.n	800b0e2 <memchr+0x6>
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	bd10      	pop	{r4, pc}

0800b0f8 <__malloc_lock>:
 800b0f8:	4770      	bx	lr

0800b0fa <__malloc_unlock>:
 800b0fa:	4770      	bx	lr

0800b0fc <_Balloc>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b100:	4604      	mov	r4, r0
 800b102:	460e      	mov	r6, r1
 800b104:	b93d      	cbnz	r5, 800b116 <_Balloc+0x1a>
 800b106:	2010      	movs	r0, #16
 800b108:	f7fe fc3e 	bl	8009988 <malloc>
 800b10c:	6260      	str	r0, [r4, #36]	; 0x24
 800b10e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b112:	6005      	str	r5, [r0, #0]
 800b114:	60c5      	str	r5, [r0, #12]
 800b116:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b118:	68eb      	ldr	r3, [r5, #12]
 800b11a:	b183      	cbz	r3, 800b13e <_Balloc+0x42>
 800b11c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b124:	b9b8      	cbnz	r0, 800b156 <_Balloc+0x5a>
 800b126:	2101      	movs	r1, #1
 800b128:	fa01 f506 	lsl.w	r5, r1, r6
 800b12c:	1d6a      	adds	r2, r5, #5
 800b12e:	0092      	lsls	r2, r2, #2
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fabe 	bl	800b6b2 <_calloc_r>
 800b136:	b160      	cbz	r0, 800b152 <_Balloc+0x56>
 800b138:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b13c:	e00e      	b.n	800b15c <_Balloc+0x60>
 800b13e:	2221      	movs	r2, #33	; 0x21
 800b140:	2104      	movs	r1, #4
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fab5 	bl	800b6b2 <_calloc_r>
 800b148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b14a:	60e8      	str	r0, [r5, #12]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e4      	bne.n	800b11c <_Balloc+0x20>
 800b152:	2000      	movs	r0, #0
 800b154:	bd70      	pop	{r4, r5, r6, pc}
 800b156:	6802      	ldr	r2, [r0, #0]
 800b158:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b15c:	2300      	movs	r3, #0
 800b15e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b162:	e7f7      	b.n	800b154 <_Balloc+0x58>

0800b164 <_Bfree>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b168:	4606      	mov	r6, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	b93c      	cbnz	r4, 800b17e <_Bfree+0x1a>
 800b16e:	2010      	movs	r0, #16
 800b170:	f7fe fc0a 	bl	8009988 <malloc>
 800b174:	6270      	str	r0, [r6, #36]	; 0x24
 800b176:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b17a:	6004      	str	r4, [r0, #0]
 800b17c:	60c4      	str	r4, [r0, #12]
 800b17e:	b13d      	cbz	r5, 800b190 <_Bfree+0x2c>
 800b180:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b182:	686a      	ldr	r2, [r5, #4]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b18a:	6029      	str	r1, [r5, #0]
 800b18c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b190:	bd70      	pop	{r4, r5, r6, pc}

0800b192 <__multadd>:
 800b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	461f      	mov	r7, r3
 800b198:	4606      	mov	r6, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	2300      	movs	r3, #0
 800b19e:	690d      	ldr	r5, [r1, #16]
 800b1a0:	f101 0c14 	add.w	ip, r1, #20
 800b1a4:	f8dc 0000 	ldr.w	r0, [ip]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	b281      	uxth	r1, r0
 800b1ac:	fb02 7101 	mla	r1, r2, r1, r7
 800b1b0:	0c00      	lsrs	r0, r0, #16
 800b1b2:	0c0f      	lsrs	r7, r1, #16
 800b1b4:	fb02 7000 	mla	r0, r2, r0, r7
 800b1b8:	b289      	uxth	r1, r1
 800b1ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b1c4:	f84c 1b04 	str.w	r1, [ip], #4
 800b1c8:	dcec      	bgt.n	800b1a4 <__multadd+0x12>
 800b1ca:	b1d7      	cbz	r7, 800b202 <__multadd+0x70>
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	42ab      	cmp	r3, r5
 800b1d0:	dc12      	bgt.n	800b1f8 <__multadd+0x66>
 800b1d2:	6861      	ldr	r1, [r4, #4]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	3101      	adds	r1, #1
 800b1d8:	f7ff ff90 	bl	800b0fc <_Balloc>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	6922      	ldr	r2, [r4, #16]
 800b1e0:	f104 010c 	add.w	r1, r4, #12
 800b1e4:	3202      	adds	r2, #2
 800b1e6:	0092      	lsls	r2, r2, #2
 800b1e8:	300c      	adds	r0, #12
 800b1ea:	f7fe fbec 	bl	80099c6 <memcpy>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff ffb7 	bl	800b164 <_Bfree>
 800b1f6:	4644      	mov	r4, r8
 800b1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1fc:	3501      	adds	r5, #1
 800b1fe:	615f      	str	r7, [r3, #20]
 800b200:	6125      	str	r5, [r4, #16]
 800b202:	4620      	mov	r0, r4
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b208 <__hi0bits>:
 800b208:	0c02      	lsrs	r2, r0, #16
 800b20a:	0412      	lsls	r2, r2, #16
 800b20c:	4603      	mov	r3, r0
 800b20e:	b9b2      	cbnz	r2, 800b23e <__hi0bits+0x36>
 800b210:	0403      	lsls	r3, r0, #16
 800b212:	2010      	movs	r0, #16
 800b214:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b218:	bf04      	itt	eq
 800b21a:	021b      	lsleq	r3, r3, #8
 800b21c:	3008      	addeq	r0, #8
 800b21e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b222:	bf04      	itt	eq
 800b224:	011b      	lsleq	r3, r3, #4
 800b226:	3004      	addeq	r0, #4
 800b228:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b22c:	bf04      	itt	eq
 800b22e:	009b      	lsleq	r3, r3, #2
 800b230:	3002      	addeq	r0, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	db06      	blt.n	800b244 <__hi0bits+0x3c>
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	d503      	bpl.n	800b242 <__hi0bits+0x3a>
 800b23a:	3001      	adds	r0, #1
 800b23c:	4770      	bx	lr
 800b23e:	2000      	movs	r0, #0
 800b240:	e7e8      	b.n	800b214 <__hi0bits+0xc>
 800b242:	2020      	movs	r0, #32
 800b244:	4770      	bx	lr

0800b246 <__lo0bits>:
 800b246:	6803      	ldr	r3, [r0, #0]
 800b248:	4601      	mov	r1, r0
 800b24a:	f013 0207 	ands.w	r2, r3, #7
 800b24e:	d00b      	beq.n	800b268 <__lo0bits+0x22>
 800b250:	07da      	lsls	r2, r3, #31
 800b252:	d423      	bmi.n	800b29c <__lo0bits+0x56>
 800b254:	0798      	lsls	r0, r3, #30
 800b256:	bf49      	itett	mi
 800b258:	085b      	lsrmi	r3, r3, #1
 800b25a:	089b      	lsrpl	r3, r3, #2
 800b25c:	2001      	movmi	r0, #1
 800b25e:	600b      	strmi	r3, [r1, #0]
 800b260:	bf5c      	itt	pl
 800b262:	600b      	strpl	r3, [r1, #0]
 800b264:	2002      	movpl	r0, #2
 800b266:	4770      	bx	lr
 800b268:	b298      	uxth	r0, r3
 800b26a:	b9a8      	cbnz	r0, 800b298 <__lo0bits+0x52>
 800b26c:	2010      	movs	r0, #16
 800b26e:	0c1b      	lsrs	r3, r3, #16
 800b270:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b274:	bf04      	itt	eq
 800b276:	0a1b      	lsreq	r3, r3, #8
 800b278:	3008      	addeq	r0, #8
 800b27a:	071a      	lsls	r2, r3, #28
 800b27c:	bf04      	itt	eq
 800b27e:	091b      	lsreq	r3, r3, #4
 800b280:	3004      	addeq	r0, #4
 800b282:	079a      	lsls	r2, r3, #30
 800b284:	bf04      	itt	eq
 800b286:	089b      	lsreq	r3, r3, #2
 800b288:	3002      	addeq	r0, #2
 800b28a:	07da      	lsls	r2, r3, #31
 800b28c:	d402      	bmi.n	800b294 <__lo0bits+0x4e>
 800b28e:	085b      	lsrs	r3, r3, #1
 800b290:	d006      	beq.n	800b2a0 <__lo0bits+0x5a>
 800b292:	3001      	adds	r0, #1
 800b294:	600b      	str	r3, [r1, #0]
 800b296:	4770      	bx	lr
 800b298:	4610      	mov	r0, r2
 800b29a:	e7e9      	b.n	800b270 <__lo0bits+0x2a>
 800b29c:	2000      	movs	r0, #0
 800b29e:	4770      	bx	lr
 800b2a0:	2020      	movs	r0, #32
 800b2a2:	4770      	bx	lr

0800b2a4 <__i2b>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	f7ff ff27 	bl	800b0fc <_Balloc>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	6144      	str	r4, [r0, #20]
 800b2b2:	6102      	str	r2, [r0, #16]
 800b2b4:	bd10      	pop	{r4, pc}

0800b2b6 <__multiply>:
 800b2b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	4614      	mov	r4, r2
 800b2bc:	690a      	ldr	r2, [r1, #16]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	4688      	mov	r8, r1
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	bfbe      	ittt	lt
 800b2c6:	460b      	movlt	r3, r1
 800b2c8:	46a0      	movlt	r8, r4
 800b2ca:	461c      	movlt	r4, r3
 800b2cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2dc:	eb07 0609 	add.w	r6, r7, r9
 800b2e0:	42b3      	cmp	r3, r6
 800b2e2:	bfb8      	it	lt
 800b2e4:	3101      	addlt	r1, #1
 800b2e6:	f7ff ff09 	bl	800b0fc <_Balloc>
 800b2ea:	f100 0514 	add.w	r5, r0, #20
 800b2ee:	462b      	mov	r3, r5
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b2f6:	4573      	cmp	r3, lr
 800b2f8:	d316      	bcc.n	800b328 <__multiply+0x72>
 800b2fa:	f104 0214 	add.w	r2, r4, #20
 800b2fe:	f108 0114 	add.w	r1, r8, #20
 800b302:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b306:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	9201      	str	r2, [sp, #4]
 800b310:	4293      	cmp	r3, r2
 800b312:	d80c      	bhi.n	800b32e <__multiply+0x78>
 800b314:	2e00      	cmp	r6, #0
 800b316:	dd03      	ble.n	800b320 <__multiply+0x6a>
 800b318:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d05d      	beq.n	800b3dc <__multiply+0x126>
 800b320:	6106      	str	r6, [r0, #16]
 800b322:	b003      	add	sp, #12
 800b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b328:	f843 2b04 	str.w	r2, [r3], #4
 800b32c:	e7e3      	b.n	800b2f6 <__multiply+0x40>
 800b32e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b332:	f1bb 0f00 	cmp.w	fp, #0
 800b336:	d023      	beq.n	800b380 <__multiply+0xca>
 800b338:	4689      	mov	r9, r1
 800b33a:	46ac      	mov	ip, r5
 800b33c:	f04f 0800 	mov.w	r8, #0
 800b340:	f859 4b04 	ldr.w	r4, [r9], #4
 800b344:	f8dc a000 	ldr.w	sl, [ip]
 800b348:	b2a3      	uxth	r3, r4
 800b34a:	fa1f fa8a 	uxth.w	sl, sl
 800b34e:	fb0b a303 	mla	r3, fp, r3, sl
 800b352:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b356:	f8dc 4000 	ldr.w	r4, [ip]
 800b35a:	4443      	add	r3, r8
 800b35c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b360:	fb0b 840a 	mla	r4, fp, sl, r8
 800b364:	46e2      	mov	sl, ip
 800b366:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b370:	454f      	cmp	r7, r9
 800b372:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b376:	f84a 3b04 	str.w	r3, [sl], #4
 800b37a:	d82b      	bhi.n	800b3d4 <__multiply+0x11e>
 800b37c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	3204      	adds	r2, #4
 800b384:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b388:	f1ba 0f00 	cmp.w	sl, #0
 800b38c:	d020      	beq.n	800b3d0 <__multiply+0x11a>
 800b38e:	4689      	mov	r9, r1
 800b390:	46a8      	mov	r8, r5
 800b392:	f04f 0b00 	mov.w	fp, #0
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	f8b9 c000 	ldrh.w	ip, [r9]
 800b39c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	fb0a 440c 	mla	r4, sl, ip, r4
 800b3a6:	46c4      	mov	ip, r8
 800b3a8:	445c      	add	r4, fp
 800b3aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b3ae:	f84c 3b04 	str.w	r3, [ip], #4
 800b3b2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3b6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b3ba:	0c1b      	lsrs	r3, r3, #16
 800b3bc:	fb0a b303 	mla	r3, sl, r3, fp
 800b3c0:	454f      	cmp	r7, r9
 800b3c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b3c6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b3ca:	d805      	bhi.n	800b3d8 <__multiply+0x122>
 800b3cc:	f8c8 3004 	str.w	r3, [r8, #4]
 800b3d0:	3504      	adds	r5, #4
 800b3d2:	e79b      	b.n	800b30c <__multiply+0x56>
 800b3d4:	46d4      	mov	ip, sl
 800b3d6:	e7b3      	b.n	800b340 <__multiply+0x8a>
 800b3d8:	46e0      	mov	r8, ip
 800b3da:	e7dd      	b.n	800b398 <__multiply+0xe2>
 800b3dc:	3e01      	subs	r6, #1
 800b3de:	e799      	b.n	800b314 <__multiply+0x5e>

0800b3e0 <__pow5mult>:
 800b3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e4:	4615      	mov	r5, r2
 800b3e6:	f012 0203 	ands.w	r2, r2, #3
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460f      	mov	r7, r1
 800b3ee:	d007      	beq.n	800b400 <__pow5mult+0x20>
 800b3f0:	4c21      	ldr	r4, [pc, #132]	; (800b478 <__pow5mult+0x98>)
 800b3f2:	3a01      	subs	r2, #1
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3fa:	f7ff feca 	bl	800b192 <__multadd>
 800b3fe:	4607      	mov	r7, r0
 800b400:	10ad      	asrs	r5, r5, #2
 800b402:	d035      	beq.n	800b470 <__pow5mult+0x90>
 800b404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b406:	b93c      	cbnz	r4, 800b418 <__pow5mult+0x38>
 800b408:	2010      	movs	r0, #16
 800b40a:	f7fe fabd 	bl	8009988 <malloc>
 800b40e:	6270      	str	r0, [r6, #36]	; 0x24
 800b410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b414:	6004      	str	r4, [r0, #0]
 800b416:	60c4      	str	r4, [r0, #12]
 800b418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b420:	b94c      	cbnz	r4, 800b436 <__pow5mult+0x56>
 800b422:	f240 2171 	movw	r1, #625	; 0x271
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ff3c 	bl	800b2a4 <__i2b>
 800b42c:	2300      	movs	r3, #0
 800b42e:	4604      	mov	r4, r0
 800b430:	f8c8 0008 	str.w	r0, [r8, #8]
 800b434:	6003      	str	r3, [r0, #0]
 800b436:	f04f 0800 	mov.w	r8, #0
 800b43a:	07eb      	lsls	r3, r5, #31
 800b43c:	d50a      	bpl.n	800b454 <__pow5mult+0x74>
 800b43e:	4639      	mov	r1, r7
 800b440:	4622      	mov	r2, r4
 800b442:	4630      	mov	r0, r6
 800b444:	f7ff ff37 	bl	800b2b6 <__multiply>
 800b448:	4681      	mov	r9, r0
 800b44a:	4639      	mov	r1, r7
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7ff fe89 	bl	800b164 <_Bfree>
 800b452:	464f      	mov	r7, r9
 800b454:	106d      	asrs	r5, r5, #1
 800b456:	d00b      	beq.n	800b470 <__pow5mult+0x90>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	b938      	cbnz	r0, 800b46c <__pow5mult+0x8c>
 800b45c:	4622      	mov	r2, r4
 800b45e:	4621      	mov	r1, r4
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff ff28 	bl	800b2b6 <__multiply>
 800b466:	6020      	str	r0, [r4, #0]
 800b468:	f8c0 8000 	str.w	r8, [r0]
 800b46c:	4604      	mov	r4, r0
 800b46e:	e7e4      	b.n	800b43a <__pow5mult+0x5a>
 800b470:	4638      	mov	r0, r7
 800b472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b476:	bf00      	nop
 800b478:	0800cd58 	.word	0x0800cd58

0800b47c <__lshift>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	460c      	mov	r4, r1
 800b482:	4607      	mov	r7, r0
 800b484:	4616      	mov	r6, r2
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b48c:	eb0a 0903 	add.w	r9, sl, r3
 800b490:	6849      	ldr	r1, [r1, #4]
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	f109 0501 	add.w	r5, r9, #1
 800b498:	42ab      	cmp	r3, r5
 800b49a:	db32      	blt.n	800b502 <__lshift+0x86>
 800b49c:	4638      	mov	r0, r7
 800b49e:	f7ff fe2d 	bl	800b0fc <_Balloc>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f100 0114 	add.w	r1, r0, #20
 800b4ac:	4553      	cmp	r3, sl
 800b4ae:	db2b      	blt.n	800b508 <__lshift+0x8c>
 800b4b0:	6920      	ldr	r0, [r4, #16]
 800b4b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4b6:	f104 0314 	add.w	r3, r4, #20
 800b4ba:	f016 021f 	ands.w	r2, r6, #31
 800b4be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4c6:	d025      	beq.n	800b514 <__lshift+0x98>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	f1c2 0e20 	rsb	lr, r2, #32
 800b4ce:	468a      	mov	sl, r1
 800b4d0:	681e      	ldr	r6, [r3, #0]
 800b4d2:	4096      	lsls	r6, r2
 800b4d4:	4330      	orrs	r0, r6
 800b4d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b4da:	f853 0b04 	ldr.w	r0, [r3], #4
 800b4de:	459c      	cmp	ip, r3
 800b4e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b4e4:	d814      	bhi.n	800b510 <__lshift+0x94>
 800b4e6:	6048      	str	r0, [r1, #4]
 800b4e8:	b108      	cbz	r0, 800b4ee <__lshift+0x72>
 800b4ea:	f109 0502 	add.w	r5, r9, #2
 800b4ee:	3d01      	subs	r5, #1
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	f7ff fe34 	bl	800b164 <_Bfree>
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b502:	3101      	adds	r1, #1
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	e7c7      	b.n	800b498 <__lshift+0x1c>
 800b508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b50c:	3301      	adds	r3, #1
 800b50e:	e7cd      	b.n	800b4ac <__lshift+0x30>
 800b510:	4651      	mov	r1, sl
 800b512:	e7dc      	b.n	800b4ce <__lshift+0x52>
 800b514:	3904      	subs	r1, #4
 800b516:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51a:	459c      	cmp	ip, r3
 800b51c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b520:	d8f9      	bhi.n	800b516 <__lshift+0x9a>
 800b522:	e7e4      	b.n	800b4ee <__lshift+0x72>

0800b524 <__mcmp>:
 800b524:	6903      	ldr	r3, [r0, #16]
 800b526:	690a      	ldr	r2, [r1, #16]
 800b528:	b530      	push	{r4, r5, lr}
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	d10c      	bne.n	800b548 <__mcmp+0x24>
 800b52e:	0092      	lsls	r2, r2, #2
 800b530:	3014      	adds	r0, #20
 800b532:	3114      	adds	r1, #20
 800b534:	1884      	adds	r4, r0, r2
 800b536:	4411      	add	r1, r2
 800b538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b53c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b540:	4295      	cmp	r5, r2
 800b542:	d003      	beq.n	800b54c <__mcmp+0x28>
 800b544:	d305      	bcc.n	800b552 <__mcmp+0x2e>
 800b546:	2301      	movs	r3, #1
 800b548:	4618      	mov	r0, r3
 800b54a:	bd30      	pop	{r4, r5, pc}
 800b54c:	42a0      	cmp	r0, r4
 800b54e:	d3f3      	bcc.n	800b538 <__mcmp+0x14>
 800b550:	e7fa      	b.n	800b548 <__mcmp+0x24>
 800b552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b556:	e7f7      	b.n	800b548 <__mcmp+0x24>

0800b558 <__mdiff>:
 800b558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b55c:	460d      	mov	r5, r1
 800b55e:	4607      	mov	r7, r0
 800b560:	4611      	mov	r1, r2
 800b562:	4628      	mov	r0, r5
 800b564:	4614      	mov	r4, r2
 800b566:	f7ff ffdd 	bl	800b524 <__mcmp>
 800b56a:	1e06      	subs	r6, r0, #0
 800b56c:	d108      	bne.n	800b580 <__mdiff+0x28>
 800b56e:	4631      	mov	r1, r6
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff fdc3 	bl	800b0fc <_Balloc>
 800b576:	2301      	movs	r3, #1
 800b578:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b580:	bfa4      	itt	ge
 800b582:	4623      	movge	r3, r4
 800b584:	462c      	movge	r4, r5
 800b586:	4638      	mov	r0, r7
 800b588:	6861      	ldr	r1, [r4, #4]
 800b58a:	bfa6      	itte	ge
 800b58c:	461d      	movge	r5, r3
 800b58e:	2600      	movge	r6, #0
 800b590:	2601      	movlt	r6, #1
 800b592:	f7ff fdb3 	bl	800b0fc <_Balloc>
 800b596:	f04f 0e00 	mov.w	lr, #0
 800b59a:	60c6      	str	r6, [r0, #12]
 800b59c:	692b      	ldr	r3, [r5, #16]
 800b59e:	6926      	ldr	r6, [r4, #16]
 800b5a0:	f104 0214 	add.w	r2, r4, #20
 800b5a4:	f105 0914 	add.w	r9, r5, #20
 800b5a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b5ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b5b0:	f100 0114 	add.w	r1, r0, #20
 800b5b4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b5b8:	f859 5b04 	ldr.w	r5, [r9], #4
 800b5bc:	fa1f f38a 	uxth.w	r3, sl
 800b5c0:	4473      	add	r3, lr
 800b5c2:	b2ac      	uxth	r4, r5
 800b5c4:	1b1b      	subs	r3, r3, r4
 800b5c6:	0c2c      	lsrs	r4, r5, #16
 800b5c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b5cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b5d6:	45c8      	cmp	r8, r9
 800b5d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b5dc:	4694      	mov	ip, r2
 800b5de:	f841 4b04 	str.w	r4, [r1], #4
 800b5e2:	d8e7      	bhi.n	800b5b4 <__mdiff+0x5c>
 800b5e4:	45bc      	cmp	ip, r7
 800b5e6:	d304      	bcc.n	800b5f2 <__mdiff+0x9a>
 800b5e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b5ec:	b183      	cbz	r3, 800b610 <__mdiff+0xb8>
 800b5ee:	6106      	str	r6, [r0, #16]
 800b5f0:	e7c4      	b.n	800b57c <__mdiff+0x24>
 800b5f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b5f6:	b2a2      	uxth	r2, r4
 800b5f8:	4472      	add	r2, lr
 800b5fa:	1413      	asrs	r3, r2, #16
 800b5fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b600:	b292      	uxth	r2, r2
 800b602:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b606:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b60a:	f841 2b04 	str.w	r2, [r1], #4
 800b60e:	e7e9      	b.n	800b5e4 <__mdiff+0x8c>
 800b610:	3e01      	subs	r6, #1
 800b612:	e7e9      	b.n	800b5e8 <__mdiff+0x90>

0800b614 <__d2b>:
 800b614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b618:	461c      	mov	r4, r3
 800b61a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b61e:	2101      	movs	r1, #1
 800b620:	4690      	mov	r8, r2
 800b622:	f7ff fd6b 	bl	800b0fc <_Balloc>
 800b626:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b62a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b62e:	4607      	mov	r7, r0
 800b630:	bb34      	cbnz	r4, 800b680 <__d2b+0x6c>
 800b632:	9201      	str	r2, [sp, #4]
 800b634:	f1b8 0200 	subs.w	r2, r8, #0
 800b638:	d027      	beq.n	800b68a <__d2b+0x76>
 800b63a:	a802      	add	r0, sp, #8
 800b63c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b640:	f7ff fe01 	bl	800b246 <__lo0bits>
 800b644:	9900      	ldr	r1, [sp, #0]
 800b646:	b1f0      	cbz	r0, 800b686 <__d2b+0x72>
 800b648:	9a01      	ldr	r2, [sp, #4]
 800b64a:	f1c0 0320 	rsb	r3, r0, #32
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	430b      	orrs	r3, r1
 800b654:	40c2      	lsrs	r2, r0
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	9201      	str	r2, [sp, #4]
 800b65a:	9b01      	ldr	r3, [sp, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bf14      	ite	ne
 800b660:	2102      	movne	r1, #2
 800b662:	2101      	moveq	r1, #1
 800b664:	61bb      	str	r3, [r7, #24]
 800b666:	6139      	str	r1, [r7, #16]
 800b668:	b1c4      	cbz	r4, 800b69c <__d2b+0x88>
 800b66a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b66e:	4404      	add	r4, r0
 800b670:	6034      	str	r4, [r6, #0]
 800b672:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b676:	6028      	str	r0, [r5, #0]
 800b678:	4638      	mov	r0, r7
 800b67a:	b002      	add	sp, #8
 800b67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b680:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b684:	e7d5      	b.n	800b632 <__d2b+0x1e>
 800b686:	6179      	str	r1, [r7, #20]
 800b688:	e7e7      	b.n	800b65a <__d2b+0x46>
 800b68a:	a801      	add	r0, sp, #4
 800b68c:	f7ff fddb 	bl	800b246 <__lo0bits>
 800b690:	2101      	movs	r1, #1
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	6139      	str	r1, [r7, #16]
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	3020      	adds	r0, #32
 800b69a:	e7e5      	b.n	800b668 <__d2b+0x54>
 800b69c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b6a4:	6030      	str	r0, [r6, #0]
 800b6a6:	6918      	ldr	r0, [r3, #16]
 800b6a8:	f7ff fdae 	bl	800b208 <__hi0bits>
 800b6ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b6b0:	e7e1      	b.n	800b676 <__d2b+0x62>

0800b6b2 <_calloc_r>:
 800b6b2:	b538      	push	{r3, r4, r5, lr}
 800b6b4:	fb02 f401 	mul.w	r4, r2, r1
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f7fe f9e3 	bl	8009a84 <_malloc_r>
 800b6be:	4605      	mov	r5, r0
 800b6c0:	b118      	cbz	r0, 800b6ca <_calloc_r+0x18>
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	f7fe f989 	bl	80099dc <memset>
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}

0800b6ce <__ssputs_r>:
 800b6ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d2:	688e      	ldr	r6, [r1, #8]
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	429e      	cmp	r6, r3
 800b6d8:	460c      	mov	r4, r1
 800b6da:	4690      	mov	r8, r2
 800b6dc:	4699      	mov	r9, r3
 800b6de:	d837      	bhi.n	800b750 <__ssputs_r+0x82>
 800b6e0:	898a      	ldrh	r2, [r1, #12]
 800b6e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6e6:	d031      	beq.n	800b74c <__ssputs_r+0x7e>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	6825      	ldr	r5, [r4, #0]
 800b6ec:	6909      	ldr	r1, [r1, #16]
 800b6ee:	1a6f      	subs	r7, r5, r1
 800b6f0:	6965      	ldr	r5, [r4, #20]
 800b6f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6f6:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6fa:	f109 0301 	add.w	r3, r9, #1
 800b6fe:	443b      	add	r3, r7
 800b700:	429d      	cmp	r5, r3
 800b702:	bf38      	it	cc
 800b704:	461d      	movcc	r5, r3
 800b706:	0553      	lsls	r3, r2, #21
 800b708:	d530      	bpl.n	800b76c <__ssputs_r+0x9e>
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7fe f9ba 	bl	8009a84 <_malloc_r>
 800b710:	4606      	mov	r6, r0
 800b712:	b950      	cbnz	r0, 800b72a <__ssputs_r+0x5c>
 800b714:	230c      	movs	r3, #12
 800b716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b71a:	f8ca 3000 	str.w	r3, [sl]
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b724:	81a3      	strh	r3, [r4, #12]
 800b726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72a:	463a      	mov	r2, r7
 800b72c:	6921      	ldr	r1, [r4, #16]
 800b72e:	f7fe f94a 	bl	80099c6 <memcpy>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	6126      	str	r6, [r4, #16]
 800b740:	443e      	add	r6, r7
 800b742:	6026      	str	r6, [r4, #0]
 800b744:	464e      	mov	r6, r9
 800b746:	6165      	str	r5, [r4, #20]
 800b748:	1bed      	subs	r5, r5, r7
 800b74a:	60a5      	str	r5, [r4, #8]
 800b74c:	454e      	cmp	r6, r9
 800b74e:	d900      	bls.n	800b752 <__ssputs_r+0x84>
 800b750:	464e      	mov	r6, r9
 800b752:	4632      	mov	r2, r6
 800b754:	4641      	mov	r1, r8
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	f000 f91e 	bl	800b998 <memmove>
 800b75c:	68a3      	ldr	r3, [r4, #8]
 800b75e:	2000      	movs	r0, #0
 800b760:	1b9b      	subs	r3, r3, r6
 800b762:	60a3      	str	r3, [r4, #8]
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	441e      	add	r6, r3
 800b768:	6026      	str	r6, [r4, #0]
 800b76a:	e7dc      	b.n	800b726 <__ssputs_r+0x58>
 800b76c:	462a      	mov	r2, r5
 800b76e:	f000 f92c 	bl	800b9ca <_realloc_r>
 800b772:	4606      	mov	r6, r0
 800b774:	2800      	cmp	r0, #0
 800b776:	d1e2      	bne.n	800b73e <__ssputs_r+0x70>
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	4650      	mov	r0, sl
 800b77c:	f7fe f936 	bl	80099ec <_free_r>
 800b780:	e7c8      	b.n	800b714 <__ssputs_r+0x46>
	...

0800b784 <_svfiprintf_r>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	461d      	mov	r5, r3
 800b78a:	898b      	ldrh	r3, [r1, #12]
 800b78c:	b09d      	sub	sp, #116	; 0x74
 800b78e:	061f      	lsls	r7, r3, #24
 800b790:	4680      	mov	r8, r0
 800b792:	460c      	mov	r4, r1
 800b794:	4616      	mov	r6, r2
 800b796:	d50f      	bpl.n	800b7b8 <_svfiprintf_r+0x34>
 800b798:	690b      	ldr	r3, [r1, #16]
 800b79a:	b96b      	cbnz	r3, 800b7b8 <_svfiprintf_r+0x34>
 800b79c:	2140      	movs	r1, #64	; 0x40
 800b79e:	f7fe f971 	bl	8009a84 <_malloc_r>
 800b7a2:	6020      	str	r0, [r4, #0]
 800b7a4:	6120      	str	r0, [r4, #16]
 800b7a6:	b928      	cbnz	r0, 800b7b4 <_svfiprintf_r+0x30>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	f8c8 3000 	str.w	r3, [r8]
 800b7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b2:	e0c8      	b.n	800b946 <_svfiprintf_r+0x1c2>
 800b7b4:	2340      	movs	r3, #64	; 0x40
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b7bc:	2320      	movs	r3, #32
 800b7be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7c2:	2330      	movs	r3, #48	; 0x30
 800b7c4:	f04f 0b01 	mov.w	fp, #1
 800b7c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7cc:	9503      	str	r5, [sp, #12]
 800b7ce:	4637      	mov	r7, r6
 800b7d0:	463d      	mov	r5, r7
 800b7d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7d6:	b10b      	cbz	r3, 800b7dc <_svfiprintf_r+0x58>
 800b7d8:	2b25      	cmp	r3, #37	; 0x25
 800b7da:	d13e      	bne.n	800b85a <_svfiprintf_r+0xd6>
 800b7dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7e0:	d00b      	beq.n	800b7fa <_svfiprintf_r+0x76>
 800b7e2:	4653      	mov	r3, sl
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7ff ff70 	bl	800b6ce <__ssputs_r>
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	f000 80a4 	beq.w	800b93c <_svfiprintf_r+0x1b8>
 800b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f6:	4453      	add	r3, sl
 800b7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fa:	783b      	ldrb	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 809d 	beq.w	800b93c <_svfiprintf_r+0x1b8>
 800b802:	2300      	movs	r3, #0
 800b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b814:	931a      	str	r3, [sp, #104]	; 0x68
 800b816:	462f      	mov	r7, r5
 800b818:	2205      	movs	r2, #5
 800b81a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b81e:	4850      	ldr	r0, [pc, #320]	; (800b960 <_svfiprintf_r+0x1dc>)
 800b820:	f7ff fc5c 	bl	800b0dc <memchr>
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	b9d0      	cbnz	r0, 800b85e <_svfiprintf_r+0xda>
 800b828:	06d9      	lsls	r1, r3, #27
 800b82a:	bf44      	itt	mi
 800b82c:	2220      	movmi	r2, #32
 800b82e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b832:	071a      	lsls	r2, r3, #28
 800b834:	bf44      	itt	mi
 800b836:	222b      	movmi	r2, #43	; 0x2b
 800b838:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b83c:	782a      	ldrb	r2, [r5, #0]
 800b83e:	2a2a      	cmp	r2, #42	; 0x2a
 800b840:	d015      	beq.n	800b86e <_svfiprintf_r+0xea>
 800b842:	462f      	mov	r7, r5
 800b844:	2000      	movs	r0, #0
 800b846:	250a      	movs	r5, #10
 800b848:	9a07      	ldr	r2, [sp, #28]
 800b84a:	4639      	mov	r1, r7
 800b84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b850:	3b30      	subs	r3, #48	; 0x30
 800b852:	2b09      	cmp	r3, #9
 800b854:	d94d      	bls.n	800b8f2 <_svfiprintf_r+0x16e>
 800b856:	b1b8      	cbz	r0, 800b888 <_svfiprintf_r+0x104>
 800b858:	e00f      	b.n	800b87a <_svfiprintf_r+0xf6>
 800b85a:	462f      	mov	r7, r5
 800b85c:	e7b8      	b.n	800b7d0 <_svfiprintf_r+0x4c>
 800b85e:	4a40      	ldr	r2, [pc, #256]	; (800b960 <_svfiprintf_r+0x1dc>)
 800b860:	463d      	mov	r5, r7
 800b862:	1a80      	subs	r0, r0, r2
 800b864:	fa0b f000 	lsl.w	r0, fp, r0
 800b868:	4318      	orrs	r0, r3
 800b86a:	9004      	str	r0, [sp, #16]
 800b86c:	e7d3      	b.n	800b816 <_svfiprintf_r+0x92>
 800b86e:	9a03      	ldr	r2, [sp, #12]
 800b870:	1d11      	adds	r1, r2, #4
 800b872:	6812      	ldr	r2, [r2, #0]
 800b874:	9103      	str	r1, [sp, #12]
 800b876:	2a00      	cmp	r2, #0
 800b878:	db01      	blt.n	800b87e <_svfiprintf_r+0xfa>
 800b87a:	9207      	str	r2, [sp, #28]
 800b87c:	e004      	b.n	800b888 <_svfiprintf_r+0x104>
 800b87e:	4252      	negs	r2, r2
 800b880:	f043 0302 	orr.w	r3, r3, #2
 800b884:	9207      	str	r2, [sp, #28]
 800b886:	9304      	str	r3, [sp, #16]
 800b888:	783b      	ldrb	r3, [r7, #0]
 800b88a:	2b2e      	cmp	r3, #46	; 0x2e
 800b88c:	d10c      	bne.n	800b8a8 <_svfiprintf_r+0x124>
 800b88e:	787b      	ldrb	r3, [r7, #1]
 800b890:	2b2a      	cmp	r3, #42	; 0x2a
 800b892:	d133      	bne.n	800b8fc <_svfiprintf_r+0x178>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	3702      	adds	r7, #2
 800b898:	1d1a      	adds	r2, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9203      	str	r2, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfb8      	it	lt
 800b8a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8a6:	9305      	str	r3, [sp, #20]
 800b8a8:	4d2e      	ldr	r5, [pc, #184]	; (800b964 <_svfiprintf_r+0x1e0>)
 800b8aa:	2203      	movs	r2, #3
 800b8ac:	7839      	ldrb	r1, [r7, #0]
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff fc14 	bl	800b0dc <memchr>
 800b8b4:	b138      	cbz	r0, 800b8c6 <_svfiprintf_r+0x142>
 800b8b6:	2340      	movs	r3, #64	; 0x40
 800b8b8:	1b40      	subs	r0, r0, r5
 800b8ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	3701      	adds	r7, #1
 800b8c2:	4303      	orrs	r3, r0
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	7839      	ldrb	r1, [r7, #0]
 800b8c8:	2206      	movs	r2, #6
 800b8ca:	4827      	ldr	r0, [pc, #156]	; (800b968 <_svfiprintf_r+0x1e4>)
 800b8cc:	1c7e      	adds	r6, r7, #1
 800b8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8d2:	f7ff fc03 	bl	800b0dc <memchr>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d038      	beq.n	800b94c <_svfiprintf_r+0x1c8>
 800b8da:	4b24      	ldr	r3, [pc, #144]	; (800b96c <_svfiprintf_r+0x1e8>)
 800b8dc:	bb13      	cbnz	r3, 800b924 <_svfiprintf_r+0x1a0>
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	3307      	adds	r3, #7
 800b8e2:	f023 0307 	bic.w	r3, r3, #7
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	444b      	add	r3, r9
 800b8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f0:	e76d      	b.n	800b7ce <_svfiprintf_r+0x4a>
 800b8f2:	fb05 3202 	mla	r2, r5, r2, r3
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	e7a6      	b.n	800b84a <_svfiprintf_r+0xc6>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	250a      	movs	r5, #10
 800b900:	4619      	mov	r1, r3
 800b902:	3701      	adds	r7, #1
 800b904:	9305      	str	r3, [sp, #20]
 800b906:	4638      	mov	r0, r7
 800b908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90c:	3a30      	subs	r2, #48	; 0x30
 800b90e:	2a09      	cmp	r2, #9
 800b910:	d903      	bls.n	800b91a <_svfiprintf_r+0x196>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0c8      	beq.n	800b8a8 <_svfiprintf_r+0x124>
 800b916:	9105      	str	r1, [sp, #20]
 800b918:	e7c6      	b.n	800b8a8 <_svfiprintf_r+0x124>
 800b91a:	fb05 2101 	mla	r1, r5, r1, r2
 800b91e:	2301      	movs	r3, #1
 800b920:	4607      	mov	r7, r0
 800b922:	e7f0      	b.n	800b906 <_svfiprintf_r+0x182>
 800b924:	ab03      	add	r3, sp, #12
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	4622      	mov	r2, r4
 800b92a:	4b11      	ldr	r3, [pc, #68]	; (800b970 <_svfiprintf_r+0x1ec>)
 800b92c:	a904      	add	r1, sp, #16
 800b92e:	4640      	mov	r0, r8
 800b930:	f7fe f994 	bl	8009c5c <_printf_float>
 800b934:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b938:	4681      	mov	r9, r0
 800b93a:	d1d6      	bne.n	800b8ea <_svfiprintf_r+0x166>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	065b      	lsls	r3, r3, #25
 800b940:	f53f af35 	bmi.w	800b7ae <_svfiprintf_r+0x2a>
 800b944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b946:	b01d      	add	sp, #116	; 0x74
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	ab03      	add	r3, sp, #12
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4622      	mov	r2, r4
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <_svfiprintf_r+0x1ec>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	4640      	mov	r0, r8
 800b958:	f7fe fc2c 	bl	800a1b4 <_printf_i>
 800b95c:	e7ea      	b.n	800b934 <_svfiprintf_r+0x1b0>
 800b95e:	bf00      	nop
 800b960:	0800cd64 	.word	0x0800cd64
 800b964:	0800cd6a 	.word	0x0800cd6a
 800b968:	0800cd6e 	.word	0x0800cd6e
 800b96c:	08009c5d 	.word	0x08009c5d
 800b970:	0800b6cf 	.word	0x0800b6cf

0800b974 <__ascii_mbtowc>:
 800b974:	b082      	sub	sp, #8
 800b976:	b901      	cbnz	r1, 800b97a <__ascii_mbtowc+0x6>
 800b978:	a901      	add	r1, sp, #4
 800b97a:	b142      	cbz	r2, 800b98e <__ascii_mbtowc+0x1a>
 800b97c:	b14b      	cbz	r3, 800b992 <__ascii_mbtowc+0x1e>
 800b97e:	7813      	ldrb	r3, [r2, #0]
 800b980:	600b      	str	r3, [r1, #0]
 800b982:	7812      	ldrb	r2, [r2, #0]
 800b984:	1c10      	adds	r0, r2, #0
 800b986:	bf18      	it	ne
 800b988:	2001      	movne	r0, #1
 800b98a:	b002      	add	sp, #8
 800b98c:	4770      	bx	lr
 800b98e:	4610      	mov	r0, r2
 800b990:	e7fb      	b.n	800b98a <__ascii_mbtowc+0x16>
 800b992:	f06f 0001 	mvn.w	r0, #1
 800b996:	e7f8      	b.n	800b98a <__ascii_mbtowc+0x16>

0800b998 <memmove>:
 800b998:	4288      	cmp	r0, r1
 800b99a:	b510      	push	{r4, lr}
 800b99c:	eb01 0302 	add.w	r3, r1, r2
 800b9a0:	d807      	bhi.n	800b9b2 <memmove+0x1a>
 800b9a2:	1e42      	subs	r2, r0, #1
 800b9a4:	4299      	cmp	r1, r3
 800b9a6:	d00a      	beq.n	800b9be <memmove+0x26>
 800b9a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b9b0:	e7f8      	b.n	800b9a4 <memmove+0xc>
 800b9b2:	4283      	cmp	r3, r0
 800b9b4:	d9f5      	bls.n	800b9a2 <memmove+0xa>
 800b9b6:	1881      	adds	r1, r0, r2
 800b9b8:	1ad2      	subs	r2, r2, r3
 800b9ba:	42d3      	cmn	r3, r2
 800b9bc:	d100      	bne.n	800b9c0 <memmove+0x28>
 800b9be:	bd10      	pop	{r4, pc}
 800b9c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9c8:	e7f7      	b.n	800b9ba <memmove+0x22>

0800b9ca <_realloc_r>:
 800b9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	4614      	mov	r4, r2
 800b9d0:	460e      	mov	r6, r1
 800b9d2:	b921      	cbnz	r1, 800b9de <_realloc_r+0x14>
 800b9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9d8:	4611      	mov	r1, r2
 800b9da:	f7fe b853 	b.w	8009a84 <_malloc_r>
 800b9de:	b922      	cbnz	r2, 800b9ea <_realloc_r+0x20>
 800b9e0:	f7fe f804 	bl	80099ec <_free_r>
 800b9e4:	4625      	mov	r5, r4
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ea:	f000 f821 	bl	800ba30 <_malloc_usable_size_r>
 800b9ee:	42a0      	cmp	r0, r4
 800b9f0:	d20f      	bcs.n	800ba12 <_realloc_r+0x48>
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f7fe f845 	bl	8009a84 <_malloc_r>
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d0f2      	beq.n	800b9e6 <_realloc_r+0x1c>
 800ba00:	4631      	mov	r1, r6
 800ba02:	4622      	mov	r2, r4
 800ba04:	f7fd ffdf 	bl	80099c6 <memcpy>
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f7fd ffee 	bl	80099ec <_free_r>
 800ba10:	e7e9      	b.n	800b9e6 <_realloc_r+0x1c>
 800ba12:	4635      	mov	r5, r6
 800ba14:	e7e7      	b.n	800b9e6 <_realloc_r+0x1c>

0800ba16 <__ascii_wctomb>:
 800ba16:	b149      	cbz	r1, 800ba2c <__ascii_wctomb+0x16>
 800ba18:	2aff      	cmp	r2, #255	; 0xff
 800ba1a:	bf8b      	itete	hi
 800ba1c:	238a      	movhi	r3, #138	; 0x8a
 800ba1e:	700a      	strbls	r2, [r1, #0]
 800ba20:	6003      	strhi	r3, [r0, #0]
 800ba22:	2001      	movls	r0, #1
 800ba24:	bf88      	it	hi
 800ba26:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ba2a:	4770      	bx	lr
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4770      	bx	lr

0800ba30 <_malloc_usable_size_r>:
 800ba30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba34:	1f18      	subs	r0, r3, #4
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	bfbc      	itt	lt
 800ba3a:	580b      	ldrlt	r3, [r1, r0]
 800ba3c:	18c0      	addlt	r0, r0, r3
 800ba3e:	4770      	bx	lr

0800ba40 <atan2>:
 800ba40:	f000 b856 	b.w	800baf0 <__ieee754_atan2>

0800ba44 <sqrt>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	b08b      	sub	sp, #44	; 0x2c
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	f000 f92d 	bl	800bcac <__ieee754_sqrt>
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <sqrt+0xa0>)
 800ba54:	4680      	mov	r8, r0
 800ba56:	f993 a000 	ldrsb.w	sl, [r3]
 800ba5a:	4689      	mov	r9, r1
 800ba5c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ba60:	d02b      	beq.n	800baba <sqrt+0x76>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7f4 ffcf 	bl	8000a0c <__aeabi_dcmpun>
 800ba6e:	4683      	mov	fp, r0
 800ba70:	bb18      	cbnz	r0, 800baba <sqrt+0x76>
 800ba72:	2600      	movs	r6, #0
 800ba74:	2700      	movs	r7, #0
 800ba76:	4632      	mov	r2, r6
 800ba78:	463b      	mov	r3, r7
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 ff9d 	bl	80009bc <__aeabi_dcmplt>
 800ba82:	b1d0      	cbz	r0, 800baba <sqrt+0x76>
 800ba84:	2301      	movs	r3, #1
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	4b17      	ldr	r3, [pc, #92]	; (800bae8 <sqrt+0xa4>)
 800ba8a:	f8cd b020 	str.w	fp, [sp, #32]
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ba94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	d112      	bne.n	800bac4 <sqrt+0x80>
 800ba9e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800baa2:	4668      	mov	r0, sp
 800baa4:	f000 fb3e 	bl	800c124 <matherr>
 800baa8:	b1b8      	cbz	r0, 800bada <sqrt+0x96>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	b11b      	cbz	r3, 800bab6 <sqrt+0x72>
 800baae:	f7fd ff41 	bl	8009934 <__errno>
 800bab2:	9b08      	ldr	r3, [sp, #32]
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	b00b      	add	sp, #44	; 0x2c
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac4:	4632      	mov	r2, r6
 800bac6:	463b      	mov	r3, r7
 800bac8:	4630      	mov	r0, r6
 800baca:	4639      	mov	r1, r7
 800bacc:	f7f4 fe2e 	bl	800072c <__aeabi_ddiv>
 800bad0:	f1ba 0f02 	cmp.w	sl, #2
 800bad4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bad8:	d1e3      	bne.n	800baa2 <sqrt+0x5e>
 800bada:	f7fd ff2b 	bl	8009934 <__errno>
 800bade:	2321      	movs	r3, #33	; 0x21
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	e7e2      	b.n	800baaa <sqrt+0x66>
 800bae4:	200001e4 	.word	0x200001e4
 800bae8:	0800ce80 	.word	0x0800ce80
 800baec:	00000000 	.word	0x00000000

0800baf0 <__ieee754_atan2>:
 800baf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	4256      	negs	r6, r2
 800baf6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800bafa:	4316      	orrs	r6, r2
 800bafc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800bca8 <__ieee754_atan2+0x1b8>
 800bb00:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800bb04:	454e      	cmp	r6, r9
 800bb06:	4604      	mov	r4, r0
 800bb08:	460d      	mov	r5, r1
 800bb0a:	469e      	mov	lr, r3
 800bb0c:	d808      	bhi.n	800bb20 <__ieee754_atan2+0x30>
 800bb0e:	4246      	negs	r6, r0
 800bb10:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bb14:	4306      	orrs	r6, r0
 800bb16:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800bb1a:	454e      	cmp	r6, r9
 800bb1c:	4688      	mov	r8, r1
 800bb1e:	d906      	bls.n	800bb2e <__ieee754_atan2+0x3e>
 800bb20:	4620      	mov	r0, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	f7f4 fb22 	bl	800016c <__adddf3>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	e030      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bb2e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800bb32:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bb36:	4316      	orrs	r6, r2
 800bb38:	d103      	bne.n	800bb42 <__ieee754_atan2+0x52>
 800bb3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3e:	f000 b963 	b.w	800be08 <atan>
 800bb42:	179e      	asrs	r6, r3, #30
 800bb44:	f006 0602 	and.w	r6, r6, #2
 800bb48:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bb4c:	ea57 0100 	orrs.w	r1, r7, r0
 800bb50:	d107      	bne.n	800bb62 <__ieee754_atan2+0x72>
 800bb52:	2e02      	cmp	r6, #2
 800bb54:	d079      	beq.n	800bc4a <__ieee754_atan2+0x15a>
 800bb56:	2e03      	cmp	r6, #3
 800bb58:	d11a      	bne.n	800bb90 <__ieee754_atan2+0xa0>
 800bb5a:	a541      	add	r5, pc, #260	; (adr r5, 800bc60 <__ieee754_atan2+0x170>)
 800bb5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb60:	e016      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bb62:	ea5c 0102 	orrs.w	r1, ip, r2
 800bb66:	d106      	bne.n	800bb76 <__ieee754_atan2+0x86>
 800bb68:	f1b8 0f00 	cmp.w	r8, #0
 800bb6c:	da71      	bge.n	800bc52 <__ieee754_atan2+0x162>
 800bb6e:	a53e      	add	r5, pc, #248	; (adr r5, 800bc68 <__ieee754_atan2+0x178>)
 800bb70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb74:	e00c      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bb76:	45cc      	cmp	ip, r9
 800bb78:	d123      	bne.n	800bbc2 <__ieee754_atan2+0xd2>
 800bb7a:	4567      	cmp	r7, ip
 800bb7c:	d114      	bne.n	800bba8 <__ieee754_atan2+0xb8>
 800bb7e:	2e02      	cmp	r6, #2
 800bb80:	d00a      	beq.n	800bb98 <__ieee754_atan2+0xa8>
 800bb82:	2e03      	cmp	r6, #3
 800bb84:	d00c      	beq.n	800bba0 <__ieee754_atan2+0xb0>
 800bb86:	2e01      	cmp	r6, #1
 800bb88:	d15b      	bne.n	800bc42 <__ieee754_atan2+0x152>
 800bb8a:	a539      	add	r5, pc, #228	; (adr r5, 800bc70 <__ieee754_atan2+0x180>)
 800bb8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb98:	a537      	add	r5, pc, #220	; (adr r5, 800bc78 <__ieee754_atan2+0x188>)
 800bb9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb9e:	e7f7      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bba0:	a537      	add	r5, pc, #220	; (adr r5, 800bc80 <__ieee754_atan2+0x190>)
 800bba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bba6:	e7f3      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bba8:	2e02      	cmp	r6, #2
 800bbaa:	d04e      	beq.n	800bc4a <__ieee754_atan2+0x15a>
 800bbac:	2e03      	cmp	r6, #3
 800bbae:	d0d4      	beq.n	800bb5a <__ieee754_atan2+0x6a>
 800bbb0:	2e01      	cmp	r6, #1
 800bbb2:	f04f 0400 	mov.w	r4, #0
 800bbb6:	d102      	bne.n	800bbbe <__ieee754_atan2+0xce>
 800bbb8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bbbc:	e7e8      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bbbe:	2500      	movs	r5, #0
 800bbc0:	e7e6      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bbc2:	454f      	cmp	r7, r9
 800bbc4:	d0d0      	beq.n	800bb68 <__ieee754_atan2+0x78>
 800bbc6:	eba7 070c 	sub.w	r7, r7, ip
 800bbca:	153f      	asrs	r7, r7, #20
 800bbcc:	2f3c      	cmp	r7, #60	; 0x3c
 800bbce:	dc1e      	bgt.n	800bc0e <__ieee754_atan2+0x11e>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da01      	bge.n	800bbd8 <__ieee754_atan2+0xe8>
 800bbd4:	373c      	adds	r7, #60	; 0x3c
 800bbd6:	db1e      	blt.n	800bc16 <__ieee754_atan2+0x126>
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7f4 fda6 	bl	800072c <__aeabi_ddiv>
 800bbe0:	f000 fa9c 	bl	800c11c <fabs>
 800bbe4:	f000 f910 	bl	800be08 <atan>
 800bbe8:	4604      	mov	r4, r0
 800bbea:	460d      	mov	r5, r1
 800bbec:	2e01      	cmp	r6, #1
 800bbee:	d015      	beq.n	800bc1c <__ieee754_atan2+0x12c>
 800bbf0:	2e02      	cmp	r6, #2
 800bbf2:	d017      	beq.n	800bc24 <__ieee754_atan2+0x134>
 800bbf4:	2e00      	cmp	r6, #0
 800bbf6:	d0cb      	beq.n	800bb90 <__ieee754_atan2+0xa0>
 800bbf8:	a323      	add	r3, pc, #140	; (adr r3, 800bc88 <__ieee754_atan2+0x198>)
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fab1 	bl	8000168 <__aeabi_dsub>
 800bc06:	a322      	add	r3, pc, #136	; (adr r3, 800bc90 <__ieee754_atan2+0x1a0>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	e016      	b.n	800bc3c <__ieee754_atan2+0x14c>
 800bc0e:	a522      	add	r5, pc, #136	; (adr r5, 800bc98 <__ieee754_atan2+0x1a8>)
 800bc10:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc14:	e7ea      	b.n	800bbec <__ieee754_atan2+0xfc>
 800bc16:	2400      	movs	r4, #0
 800bc18:	2500      	movs	r5, #0
 800bc1a:	e7e7      	b.n	800bbec <__ieee754_atan2+0xfc>
 800bc1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bc20:	461d      	mov	r5, r3
 800bc22:	e7b5      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bc24:	a318      	add	r3, pc, #96	; (adr r3, 800bc88 <__ieee754_atan2+0x198>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 fa9b 	bl	8000168 <__aeabi_dsub>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	a116      	add	r1, pc, #88	; (adr r1, 800bc90 <__ieee754_atan2+0x1a0>)
 800bc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3c:	f7f4 fa94 	bl	8000168 <__aeabi_dsub>
 800bc40:	e772      	b.n	800bb28 <__ieee754_atan2+0x38>
 800bc42:	a517      	add	r5, pc, #92	; (adr r5, 800bca0 <__ieee754_atan2+0x1b0>)
 800bc44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc48:	e7a2      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bc4a:	a511      	add	r5, pc, #68	; (adr r5, 800bc90 <__ieee754_atan2+0x1a0>)
 800bc4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc50:	e79e      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bc52:	a511      	add	r5, pc, #68	; (adr r5, 800bc98 <__ieee754_atan2+0x1a8>)
 800bc54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc58:	e79a      	b.n	800bb90 <__ieee754_atan2+0xa0>
 800bc5a:	bf00      	nop
 800bc5c:	f3af 8000 	nop.w
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	c00921fb 	.word	0xc00921fb
 800bc68:	54442d18 	.word	0x54442d18
 800bc6c:	bff921fb 	.word	0xbff921fb
 800bc70:	54442d18 	.word	0x54442d18
 800bc74:	bfe921fb 	.word	0xbfe921fb
 800bc78:	7f3321d2 	.word	0x7f3321d2
 800bc7c:	4002d97c 	.word	0x4002d97c
 800bc80:	7f3321d2 	.word	0x7f3321d2
 800bc84:	c002d97c 	.word	0xc002d97c
 800bc88:	33145c07 	.word	0x33145c07
 800bc8c:	3ca1a626 	.word	0x3ca1a626
 800bc90:	54442d18 	.word	0x54442d18
 800bc94:	400921fb 	.word	0x400921fb
 800bc98:	54442d18 	.word	0x54442d18
 800bc9c:	3ff921fb 	.word	0x3ff921fb
 800bca0:	54442d18 	.word	0x54442d18
 800bca4:	3fe921fb 	.word	0x3fe921fb
 800bca8:	7ff00000 	.word	0x7ff00000

0800bcac <__ieee754_sqrt>:
 800bcac:	4b54      	ldr	r3, [pc, #336]	; (800be00 <__ieee754_sqrt+0x154>)
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	438b      	bics	r3, r1
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	460a      	mov	r2, r1
 800bcba:	460c      	mov	r4, r1
 800bcbc:	d10f      	bne.n	800bcde <__ieee754_sqrt+0x32>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	f7f4 fc09 	bl	80004d8 <__aeabi_dmul>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4630      	mov	r0, r6
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fa4d 	bl	800016c <__adddf3>
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4629      	mov	r1, r5
 800bcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcde:	2900      	cmp	r1, #0
 800bce0:	4607      	mov	r7, r0
 800bce2:	4603      	mov	r3, r0
 800bce4:	dc0e      	bgt.n	800bd04 <__ieee754_sqrt+0x58>
 800bce6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bcea:	ea5c 0707 	orrs.w	r7, ip, r7
 800bcee:	d0f2      	beq.n	800bcd6 <__ieee754_sqrt+0x2a>
 800bcf0:	b141      	cbz	r1, 800bd04 <__ieee754_sqrt+0x58>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	f7f4 fa37 	bl	8000168 <__aeabi_dsub>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	f7f4 fd15 	bl	800072c <__aeabi_ddiv>
 800bd02:	e7e6      	b.n	800bcd2 <__ieee754_sqrt+0x26>
 800bd04:	1512      	asrs	r2, r2, #20
 800bd06:	d074      	beq.n	800bdf2 <__ieee754_sqrt+0x146>
 800bd08:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd0c:	07d5      	lsls	r5, r2, #31
 800bd0e:	f04f 0500 	mov.w	r5, #0
 800bd12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bd16:	bf48      	it	mi
 800bd18:	0fd9      	lsrmi	r1, r3, #31
 800bd1a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bd1e:	bf44      	itt	mi
 800bd20:	005b      	lslmi	r3, r3, #1
 800bd22:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800bd26:	1051      	asrs	r1, r2, #1
 800bd28:	0fda      	lsrs	r2, r3, #31
 800bd2a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800bd2e:	4628      	mov	r0, r5
 800bd30:	2216      	movs	r2, #22
 800bd32:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bd36:	005b      	lsls	r3, r3, #1
 800bd38:	1987      	adds	r7, r0, r6
 800bd3a:	42a7      	cmp	r7, r4
 800bd3c:	bfde      	ittt	le
 800bd3e:	19b8      	addle	r0, r7, r6
 800bd40:	1be4      	suble	r4, r4, r7
 800bd42:	19ad      	addle	r5, r5, r6
 800bd44:	0fdf      	lsrs	r7, r3, #31
 800bd46:	3a01      	subs	r2, #1
 800bd48:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800bd4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd54:	d1f0      	bne.n	800bd38 <__ieee754_sqrt+0x8c>
 800bd56:	f04f 0c20 	mov.w	ip, #32
 800bd5a:	4696      	mov	lr, r2
 800bd5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bd60:	4284      	cmp	r4, r0
 800bd62:	eb06 070e 	add.w	r7, r6, lr
 800bd66:	dc02      	bgt.n	800bd6e <__ieee754_sqrt+0xc2>
 800bd68:	d112      	bne.n	800bd90 <__ieee754_sqrt+0xe4>
 800bd6a:	429f      	cmp	r7, r3
 800bd6c:	d810      	bhi.n	800bd90 <__ieee754_sqrt+0xe4>
 800bd6e:	2f00      	cmp	r7, #0
 800bd70:	eb07 0e06 	add.w	lr, r7, r6
 800bd74:	da42      	bge.n	800bdfc <__ieee754_sqrt+0x150>
 800bd76:	f1be 0f00 	cmp.w	lr, #0
 800bd7a:	db3f      	blt.n	800bdfc <__ieee754_sqrt+0x150>
 800bd7c:	f100 0801 	add.w	r8, r0, #1
 800bd80:	1a24      	subs	r4, r4, r0
 800bd82:	4640      	mov	r0, r8
 800bd84:	429f      	cmp	r7, r3
 800bd86:	bf88      	it	hi
 800bd88:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800bd8c:	1bdb      	subs	r3, r3, r7
 800bd8e:	4432      	add	r2, r6
 800bd90:	0064      	lsls	r4, r4, #1
 800bd92:	f1bc 0c01 	subs.w	ip, ip, #1
 800bd96:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800bd9a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bda2:	d1dd      	bne.n	800bd60 <__ieee754_sqrt+0xb4>
 800bda4:	4323      	orrs	r3, r4
 800bda6:	d006      	beq.n	800bdb6 <__ieee754_sqrt+0x10a>
 800bda8:	1c54      	adds	r4, r2, #1
 800bdaa:	bf0b      	itete	eq
 800bdac:	4662      	moveq	r2, ip
 800bdae:	3201      	addne	r2, #1
 800bdb0:	3501      	addeq	r5, #1
 800bdb2:	f022 0201 	bicne.w	r2, r2, #1
 800bdb6:	106b      	asrs	r3, r5, #1
 800bdb8:	0852      	lsrs	r2, r2, #1
 800bdba:	07e8      	lsls	r0, r5, #31
 800bdbc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bdc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bdc4:	bf48      	it	mi
 800bdc6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bdca:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bdce:	4616      	mov	r6, r2
 800bdd0:	e781      	b.n	800bcd6 <__ieee754_sqrt+0x2a>
 800bdd2:	0adc      	lsrs	r4, r3, #11
 800bdd4:	3915      	subs	r1, #21
 800bdd6:	055b      	lsls	r3, r3, #21
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	d0fa      	beq.n	800bdd2 <__ieee754_sqrt+0x126>
 800bddc:	02e6      	lsls	r6, r4, #11
 800bdde:	d50a      	bpl.n	800bdf6 <__ieee754_sqrt+0x14a>
 800bde0:	f1c2 0020 	rsb	r0, r2, #32
 800bde4:	fa23 f000 	lsr.w	r0, r3, r0
 800bde8:	1e55      	subs	r5, r2, #1
 800bdea:	4093      	lsls	r3, r2
 800bdec:	4304      	orrs	r4, r0
 800bdee:	1b4a      	subs	r2, r1, r5
 800bdf0:	e78a      	b.n	800bd08 <__ieee754_sqrt+0x5c>
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	e7f0      	b.n	800bdd8 <__ieee754_sqrt+0x12c>
 800bdf6:	0064      	lsls	r4, r4, #1
 800bdf8:	3201      	adds	r2, #1
 800bdfa:	e7ef      	b.n	800bddc <__ieee754_sqrt+0x130>
 800bdfc:	4680      	mov	r8, r0
 800bdfe:	e7bf      	b.n	800bd80 <__ieee754_sqrt+0xd4>
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	00000000 	.word	0x00000000

0800be08 <atan>:
 800be08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	4bb6      	ldr	r3, [pc, #728]	; (800c0e8 <atan+0x2e0>)
 800be0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800be12:	429e      	cmp	r6, r3
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	468b      	mov	fp, r1
 800be1a:	dd17      	ble.n	800be4c <atan+0x44>
 800be1c:	4bb3      	ldr	r3, [pc, #716]	; (800c0ec <atan+0x2e4>)
 800be1e:	429e      	cmp	r6, r3
 800be20:	dc01      	bgt.n	800be26 <atan+0x1e>
 800be22:	d109      	bne.n	800be38 <atan+0x30>
 800be24:	b140      	cbz	r0, 800be38 <atan+0x30>
 800be26:	4622      	mov	r2, r4
 800be28:	462b      	mov	r3, r5
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 f99d 	bl	800016c <__adddf3>
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	e005      	b.n	800be44 <atan+0x3c>
 800be38:	f1bb 0f00 	cmp.w	fp, #0
 800be3c:	4cac      	ldr	r4, [pc, #688]	; (800c0f0 <atan+0x2e8>)
 800be3e:	f340 8121 	ble.w	800c084 <atan+0x27c>
 800be42:	4dac      	ldr	r5, [pc, #688]	; (800c0f4 <atan+0x2ec>)
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	4baa      	ldr	r3, [pc, #680]	; (800c0f8 <atan+0x2f0>)
 800be4e:	429e      	cmp	r6, r3
 800be50:	dc11      	bgt.n	800be76 <atan+0x6e>
 800be52:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800be56:	429e      	cmp	r6, r3
 800be58:	dc0a      	bgt.n	800be70 <atan+0x68>
 800be5a:	a38b      	add	r3, pc, #556	; (adr r3, 800c088 <atan+0x280>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 f984 	bl	800016c <__adddf3>
 800be64:	2200      	movs	r2, #0
 800be66:	4ba5      	ldr	r3, [pc, #660]	; (800c0fc <atan+0x2f4>)
 800be68:	f7f4 fdc6 	bl	80009f8 <__aeabi_dcmpgt>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d1e9      	bne.n	800be44 <atan+0x3c>
 800be70:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be74:	e027      	b.n	800bec6 <atan+0xbe>
 800be76:	f000 f951 	bl	800c11c <fabs>
 800be7a:	4ba1      	ldr	r3, [pc, #644]	; (800c100 <atan+0x2f8>)
 800be7c:	4604      	mov	r4, r0
 800be7e:	429e      	cmp	r6, r3
 800be80:	460d      	mov	r5, r1
 800be82:	f300 80b8 	bgt.w	800bff6 <atan+0x1ee>
 800be86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800be8a:	429e      	cmp	r6, r3
 800be8c:	f300 809c 	bgt.w	800bfc8 <atan+0x1c0>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	f7f4 f96a 	bl	800016c <__adddf3>
 800be98:	2200      	movs	r2, #0
 800be9a:	4b98      	ldr	r3, [pc, #608]	; (800c0fc <atan+0x2f4>)
 800be9c:	f7f4 f964 	bl	8000168 <__aeabi_dsub>
 800bea0:	2200      	movs	r2, #0
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 f95d 	bl	800016c <__adddf3>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4630      	mov	r0, r6
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 fc37 	bl	800072c <__aeabi_ddiv>
 800bebe:	f04f 0a00 	mov.w	sl, #0
 800bec2:	4604      	mov	r4, r0
 800bec4:	460d      	mov	r5, r1
 800bec6:	4622      	mov	r2, r4
 800bec8:	462b      	mov	r3, r5
 800beca:	4620      	mov	r0, r4
 800becc:	4629      	mov	r1, r5
 800bece:	f7f4 fb03 	bl	80004d8 <__aeabi_dmul>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4680      	mov	r8, r0
 800bed8:	4689      	mov	r9, r1
 800beda:	f7f4 fafd 	bl	80004d8 <__aeabi_dmul>
 800bede:	a36c      	add	r3, pc, #432	; (adr r3, 800c090 <atan+0x288>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	4606      	mov	r6, r0
 800bee6:	460f      	mov	r7, r1
 800bee8:	f7f4 faf6 	bl	80004d8 <__aeabi_dmul>
 800beec:	a36a      	add	r3, pc, #424	; (adr r3, 800c098 <atan+0x290>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 f93b 	bl	800016c <__adddf3>
 800bef6:	4632      	mov	r2, r6
 800bef8:	463b      	mov	r3, r7
 800befa:	f7f4 faed 	bl	80004d8 <__aeabi_dmul>
 800befe:	a368      	add	r3, pc, #416	; (adr r3, 800c0a0 <atan+0x298>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f7f4 f932 	bl	800016c <__adddf3>
 800bf08:	4632      	mov	r2, r6
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	f7f4 fae4 	bl	80004d8 <__aeabi_dmul>
 800bf10:	a365      	add	r3, pc, #404	; (adr r3, 800c0a8 <atan+0x2a0>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 f929 	bl	800016c <__adddf3>
 800bf1a:	4632      	mov	r2, r6
 800bf1c:	463b      	mov	r3, r7
 800bf1e:	f7f4 fadb 	bl	80004d8 <__aeabi_dmul>
 800bf22:	a363      	add	r3, pc, #396	; (adr r3, 800c0b0 <atan+0x2a8>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 f920 	bl	800016c <__adddf3>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	f7f4 fad2 	bl	80004d8 <__aeabi_dmul>
 800bf34:	a360      	add	r3, pc, #384	; (adr r3, 800c0b8 <atan+0x2b0>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f7f4 f917 	bl	800016c <__adddf3>
 800bf3e:	4642      	mov	r2, r8
 800bf40:	464b      	mov	r3, r9
 800bf42:	f7f4 fac9 	bl	80004d8 <__aeabi_dmul>
 800bf46:	a35e      	add	r3, pc, #376	; (adr r3, 800c0c0 <atan+0x2b8>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	4689      	mov	r9, r1
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 fac0 	bl	80004d8 <__aeabi_dmul>
 800bf58:	a35b      	add	r3, pc, #364	; (adr r3, 800c0c8 <atan+0x2c0>)
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	f7f4 f903 	bl	8000168 <__aeabi_dsub>
 800bf62:	4632      	mov	r2, r6
 800bf64:	463b      	mov	r3, r7
 800bf66:	f7f4 fab7 	bl	80004d8 <__aeabi_dmul>
 800bf6a:	a359      	add	r3, pc, #356	; (adr r3, 800c0d0 <atan+0x2c8>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 f8fa 	bl	8000168 <__aeabi_dsub>
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	f7f4 faae 	bl	80004d8 <__aeabi_dmul>
 800bf7c:	a356      	add	r3, pc, #344	; (adr r3, 800c0d8 <atan+0x2d0>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	f7f4 f8f1 	bl	8000168 <__aeabi_dsub>
 800bf86:	4632      	mov	r2, r6
 800bf88:	463b      	mov	r3, r7
 800bf8a:	f7f4 faa5 	bl	80004d8 <__aeabi_dmul>
 800bf8e:	a354      	add	r3, pc, #336	; (adr r3, 800c0e0 <atan+0x2d8>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 f8e8 	bl	8000168 <__aeabi_dsub>
 800bf98:	4632      	mov	r2, r6
 800bf9a:	463b      	mov	r3, r7
 800bf9c:	f7f4 fa9c 	bl	80004d8 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	f7f4 f8e0 	bl	800016c <__adddf3>
 800bfac:	4622      	mov	r2, r4
 800bfae:	462b      	mov	r3, r5
 800bfb0:	f7f4 fa92 	bl	80004d8 <__aeabi_dmul>
 800bfb4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	d144      	bne.n	800c048 <atan+0x240>
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7f4 f8d1 	bl	8000168 <__aeabi_dsub>
 800bfc6:	e734      	b.n	800be32 <atan+0x2a>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	4b4c      	ldr	r3, [pc, #304]	; (800c0fc <atan+0x2f4>)
 800bfcc:	f7f4 f8cc 	bl	8000168 <__aeabi_dsub>
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	4b49      	ldr	r3, [pc, #292]	; (800c0fc <atan+0x2f4>)
 800bfd8:	4620      	mov	r0, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7f4 f8c6 	bl	800016c <__adddf3>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 fba0 	bl	800072c <__aeabi_ddiv>
 800bfec:	f04f 0a01 	mov.w	sl, #1
 800bff0:	4604      	mov	r4, r0
 800bff2:	460d      	mov	r5, r1
 800bff4:	e767      	b.n	800bec6 <atan+0xbe>
 800bff6:	4b43      	ldr	r3, [pc, #268]	; (800c104 <atan+0x2fc>)
 800bff8:	429e      	cmp	r6, r3
 800bffa:	dc1a      	bgt.n	800c032 <atan+0x22a>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b42      	ldr	r3, [pc, #264]	; (800c108 <atan+0x300>)
 800c000:	f7f4 f8b2 	bl	8000168 <__aeabi_dsub>
 800c004:	2200      	movs	r2, #0
 800c006:	4606      	mov	r6, r0
 800c008:	460f      	mov	r7, r1
 800c00a:	4b3f      	ldr	r3, [pc, #252]	; (800c108 <atan+0x300>)
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fa62 	bl	80004d8 <__aeabi_dmul>
 800c014:	2200      	movs	r2, #0
 800c016:	4b39      	ldr	r3, [pc, #228]	; (800c0fc <atan+0x2f4>)
 800c018:	f7f4 f8a8 	bl	800016c <__adddf3>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4630      	mov	r0, r6
 800c022:	4639      	mov	r1, r7
 800c024:	f7f4 fb82 	bl	800072c <__aeabi_ddiv>
 800c028:	f04f 0a02 	mov.w	sl, #2
 800c02c:	4604      	mov	r4, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	e749      	b.n	800bec6 <atan+0xbe>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	2000      	movs	r0, #0
 800c038:	4934      	ldr	r1, [pc, #208]	; (800c10c <atan+0x304>)
 800c03a:	f7f4 fb77 	bl	800072c <__aeabi_ddiv>
 800c03e:	f04f 0a03 	mov.w	sl, #3
 800c042:	4604      	mov	r4, r0
 800c044:	460d      	mov	r5, r1
 800c046:	e73e      	b.n	800bec6 <atan+0xbe>
 800c048:	4b31      	ldr	r3, [pc, #196]	; (800c110 <atan+0x308>)
 800c04a:	4e32      	ldr	r6, [pc, #200]	; (800c114 <atan+0x30c>)
 800c04c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c050:	4456      	add	r6, sl
 800c052:	449a      	add	sl, r3
 800c054:	e9da 2300 	ldrd	r2, r3, [sl]
 800c058:	f7f4 f886 	bl	8000168 <__aeabi_dsub>
 800c05c:	4622      	mov	r2, r4
 800c05e:	462b      	mov	r3, r5
 800c060:	f7f4 f882 	bl	8000168 <__aeabi_dsub>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c06c:	f7f4 f87c 	bl	8000168 <__aeabi_dsub>
 800c070:	f1bb 0f00 	cmp.w	fp, #0
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	f6bf aee4 	bge.w	800be44 <atan+0x3c>
 800c07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c080:	461d      	mov	r5, r3
 800c082:	e6df      	b.n	800be44 <atan+0x3c>
 800c084:	4d24      	ldr	r5, [pc, #144]	; (800c118 <atan+0x310>)
 800c086:	e6dd      	b.n	800be44 <atan+0x3c>
 800c088:	8800759c 	.word	0x8800759c
 800c08c:	7e37e43c 	.word	0x7e37e43c
 800c090:	e322da11 	.word	0xe322da11
 800c094:	3f90ad3a 	.word	0x3f90ad3a
 800c098:	24760deb 	.word	0x24760deb
 800c09c:	3fa97b4b 	.word	0x3fa97b4b
 800c0a0:	a0d03d51 	.word	0xa0d03d51
 800c0a4:	3fb10d66 	.word	0x3fb10d66
 800c0a8:	c54c206e 	.word	0xc54c206e
 800c0ac:	3fb745cd 	.word	0x3fb745cd
 800c0b0:	920083ff 	.word	0x920083ff
 800c0b4:	3fc24924 	.word	0x3fc24924
 800c0b8:	5555550d 	.word	0x5555550d
 800c0bc:	3fd55555 	.word	0x3fd55555
 800c0c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0c4:	bfa2b444 	.word	0xbfa2b444
 800c0c8:	52defd9a 	.word	0x52defd9a
 800c0cc:	3fadde2d 	.word	0x3fadde2d
 800c0d0:	af749a6d 	.word	0xaf749a6d
 800c0d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c0d8:	fe231671 	.word	0xfe231671
 800c0dc:	3fbc71c6 	.word	0x3fbc71c6
 800c0e0:	9998ebc4 	.word	0x9998ebc4
 800c0e4:	3fc99999 	.word	0x3fc99999
 800c0e8:	440fffff 	.word	0x440fffff
 800c0ec:	7ff00000 	.word	0x7ff00000
 800c0f0:	54442d18 	.word	0x54442d18
 800c0f4:	3ff921fb 	.word	0x3ff921fb
 800c0f8:	3fdbffff 	.word	0x3fdbffff
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	3ff2ffff 	.word	0x3ff2ffff
 800c104:	40037fff 	.word	0x40037fff
 800c108:	3ff80000 	.word	0x3ff80000
 800c10c:	bff00000 	.word	0xbff00000
 800c110:	0800cea8 	.word	0x0800cea8
 800c114:	0800ce88 	.word	0x0800ce88
 800c118:	bff921fb 	.word	0xbff921fb

0800c11c <fabs>:
 800c11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c120:	4619      	mov	r1, r3
 800c122:	4770      	bx	lr

0800c124 <matherr>:
 800c124:	2000      	movs	r0, #0
 800c126:	4770      	bx	lr

0800c128 <_init>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	bf00      	nop
 800c12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12e:	bc08      	pop	{r3}
 800c130:	469e      	mov	lr, r3
 800c132:	4770      	bx	lr

0800c134 <_fini>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	bf00      	nop
 800c138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13a:	bc08      	pop	{r3}
 800c13c:	469e      	mov	lr, r3
 800c13e:	4770      	bx	lr
