
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c4  080069c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080069c4  080069c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c4  080069c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000074  08006a40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08006a40  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f6d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ef  00000000  00000000  0003300a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d0  00000000  00000000  00036af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f9d  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d763  00000000  00000000  0004dc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d32b  00000000  00000000  0005b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d86f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  000d8770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080067d4 	.word	0x080067d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080067d4 	.word	0x080067d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	b29b      	uxth	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	4013      	ands	r3, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e001      	b.n	80006b2 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//test timings DWT counter
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006c6:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <main+0x174>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4a5a      	ldr	r2, [pc, #360]	; (8000834 <main+0x174>)
 80006cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006d0:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80006d2:	4b59      	ldr	r3, [pc, #356]	; (8000838 <main+0x178>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <main+0x178>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a56      	ldr	r2, [pc, #344]	; (8000838 <main+0x178>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 feec 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 fa3c 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fc28 	bl	8000f40 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006f0:	f000 fa94 	bl	8000c1c <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f4:	f000 fad0 	bl	8000c98 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006f8:	f000 fafc 	bl	8000cf4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006fc:	f000 fb30 	bl	8000d60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000700:	f000 fbf4 	bl	8000eec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000704:	484d      	ldr	r0, [pc, #308]	; (800083c <main+0x17c>)
 8000706:	f002 fb6f 	bl	8002de8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800070a:	484c      	ldr	r0, [pc, #304]	; (800083c <main+0x17c>)
 800070c:	f002 f834 	bl	8002778 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000710:	2100      	movs	r1, #0
 8000712:	484b      	ldr	r0, [pc, #300]	; (8000840 <main+0x180>)
 8000714:	f004 fd26 	bl	8005164 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000718:	2104      	movs	r1, #4
 800071a:	4849      	ldr	r0, [pc, #292]	; (8000840 <main+0x180>)
 800071c:	f004 fd22 	bl	8005164 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000720:	2108      	movs	r1, #8
 8000722:	4847      	ldr	r0, [pc, #284]	; (8000840 <main+0x180>)
 8000724:	f004 fd1e 	bl	8005164 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000728:	210c      	movs	r1, #12
 800072a:	4845      	ldr	r0, [pc, #276]	; (8000840 <main+0x180>)
 800072c:	f004 fd1a 	bl	8005164 <HAL_TIM_PWM_Start>

  //NRF24 INIT
  HAL_Delay(500);//wait for stable power
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f001 ff26 	bl	8002584 <HAL_Delay>

  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <main+0x184>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a41      	ldr	r2, [pc, #260]	; (8000844 <main+0x184>)
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	483f      	ldr	r0, [pc, #252]	; (8000848 <main+0x188>)
 800074c:	f002 fe26 	bl	800339c <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8000750:	f000 fe14 	bl	800137c <nRF24_Check>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <main+0x18c>)
 800075a:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 800075c:	f000 fdbc 	bl	80012d8 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	f000 ff9d 	bl	80016a0 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 8000766:	200f      	movs	r0, #15
 8000768:	f000 fe97 	bl	800149a <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 800076c:	2020      	movs	r0, #32
 800076e:	f000 ff28 	bl	80015c2 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 8000772:	2008      	movs	r0, #8
 8000774:	f000 fe70 	bl	8001458 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 fe9c 	bl	80014b6 <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 800077e:	4934      	ldr	r1, [pc, #208]	; (8000850 <main+0x190>)
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fea9 	bl	80014d8 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 7); // Auto-ACK: disabled
 8000786:	2207      	movs	r2, #7
 8000788:	2100      	movs	r1, #0
 800078a:	2001      	movs	r0, #1
 800078c:	f000 ff34 	bl	80015f8 <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8000790:	492f      	ldr	r1, [pc, #188]	; (8000850 <main+0x190>)
 8000792:	2006      	movs	r0, #6
 8000794:	f000 fea0 	bl	80014d8 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_6dBm);
 8000798:	2004      	movs	r0, #4
 800079a:	f000 fef7 	bl	800158c <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fe39 	bl	8001416 <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80007a4:	f000 ffc6 	bl	8001734 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f000 fe15 	bl	80013d8 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <main+0x188>)
 80007b6:	f002 fdf1 	bl	800339c <HAL_GPIO_WritePin>

  //MPU6050 INIT
  MPU6050result=SD_MPU6050_Init(&hi2c2,&mpuDataStr,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_500s );
 80007ba:	2301      	movs	r3, #1
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	4924      	ldr	r1, [pc, #144]	; (8000854 <main+0x194>)
 80007c4:	4824      	ldr	r0, [pc, #144]	; (8000858 <main+0x198>)
 80007c6:	f001 f80d 	bl	80017e4 <SD_MPU6050_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <main+0x19c>)
 80007d0:	701a      	strb	r2, [r3, #0]



  MainInitDoneFlag=1;
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <main+0x1a0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f001 fed3 	bl	8002584 <HAL_Delay>

	  if(wifiOK)LED1_ON;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <main+0x18c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <main+0x130>
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <main+0x1a4>)
 80007e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	e003      	b.n	80007f8 <main+0x138>
	  else LED1_OFF;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <main+0x1a4>)
 80007f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f6:	611a      	str	r2, [r3, #16]

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <main+0x1a8>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <main+0x1ac>)
 80007fc:	6810      	ldr	r0, [r2, #0]
 80007fe:	6018      	str	r0, [r3, #0]
 8000800:	7912      	ldrb	r2, [r2, #4]
 8000802:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <main+0x1a8>)
 8000806:	f7ff fca1 	bl	800014c <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	2301      	movs	r3, #1
 8000810:	4915      	ldr	r1, [pc, #84]	; (8000868 <main+0x1a8>)
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <main+0x1b0>)
 8000814:	f005 f9dc 	bl	8005bd0 <HAL_UART_Transmit>

	  if(wifiOK)
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <main+0x18c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d02b      	beq.n	8000878 <main+0x1b8>
	  {
		  sprintf(UartTXbuff0, "Wifi OK \n\r");
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <main+0x1a8>)
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x1b4>)
 8000824:	cb03      	ldmia	r3!, {r0, r1}
 8000826:	6010      	str	r0, [r2, #0]
 8000828:	6051      	str	r1, [r2, #4]
 800082a:	8819      	ldrh	r1, [r3, #0]
 800082c:	789b      	ldrb	r3, [r3, #2]
 800082e:	8111      	strh	r1, [r2, #8]
 8000830:	7293      	strb	r3, [r2, #10]
 8000832:	e02a      	b.n	800088a <main+0x1ca>
 8000834:	e000edf0 	.word	0xe000edf0
 8000838:	e0001000 	.word	0xe0001000
 800083c:	20000254 	.word	0x20000254
 8000840:	200002d4 	.word	0x200002d4
 8000844:	40003800 	.word	0x40003800
 8000848:	40010c00 	.word	0x40010c00
 800084c:	200001c0 	.word	0x200001c0
 8000850:	08006964 	.word	0x08006964
 8000854:	20000194 	.word	0x20000194
 8000858:	20000120 	.word	0x20000120
 800085c:	2000032c 	.word	0x2000032c
 8000860:	20000094 	.word	0x20000094
 8000864:	40011000 	.word	0x40011000
 8000868:	200001c8 	.word	0x200001c8
 800086c:	080067ec 	.word	0x080067ec
 8000870:	2000028c 	.word	0x2000028c
 8000874:	080067f4 	.word	0x080067f4
	  }
	  else sprintf(UartTXbuff0, "Wifi Fail \n\r");
 8000878:	4a96      	ldr	r2, [pc, #600]	; (8000ad4 <main+0x414>)
 800087a:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <main+0x418>)
 800087c:	4614      	mov	r4, r2
 800087e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000880:	6020      	str	r0, [r4, #0]
 8000882:	6061      	str	r1, [r4, #4]
 8000884:	60a2      	str	r2, [r4, #8]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800088a:	4892      	ldr	r0, [pc, #584]	; (8000ad4 <main+0x414>)
 800088c:	f7ff fc5e 	bl	800014c <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	2301      	movs	r3, #1
 8000896:	498f      	ldr	r1, [pc, #572]	; (8000ad4 <main+0x414>)
 8000898:	4890      	ldr	r0, [pc, #576]	; (8000adc <main+0x41c>)
 800089a:	f005 f999 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "L-UD=%u L-LR=%u \n\r",Ljoyupdown,Ljoyleftright);
 800089e:	4b90      	ldr	r3, [pc, #576]	; (8000ae0 <main+0x420>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b90      	ldr	r3, [pc, #576]	; (8000ae4 <main+0x424>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4990      	ldr	r1, [pc, #576]	; (8000ae8 <main+0x428>)
 80008a8:	488a      	ldr	r0, [pc, #552]	; (8000ad4 <main+0x414>)
 80008aa:	f005 fb81 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80008ae:	4889      	ldr	r0, [pc, #548]	; (8000ad4 <main+0x414>)
 80008b0:	f7ff fc4c 	bl	800014c <strlen>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	2301      	movs	r3, #1
 80008ba:	4986      	ldr	r1, [pc, #536]	; (8000ad4 <main+0x414>)
 80008bc:	4887      	ldr	r0, [pc, #540]	; (8000adc <main+0x41c>)
 80008be:	f005 f987 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "D-UD=%u D-LR=%u \n\r",Djoyupdown,Djoyleftright);
 80008c2:	4b8a      	ldr	r3, [pc, #552]	; (8000aec <main+0x42c>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b8a      	ldr	r3, [pc, #552]	; (8000af0 <main+0x430>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	498a      	ldr	r1, [pc, #552]	; (8000af4 <main+0x434>)
 80008cc:	4881      	ldr	r0, [pc, #516]	; (8000ad4 <main+0x414>)
 80008ce:	f005 fb6f 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80008d2:	4880      	ldr	r0, [pc, #512]	; (8000ad4 <main+0x414>)
 80008d4:	f7ff fc3a 	bl	800014c <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	2301      	movs	r3, #1
 80008de:	497d      	ldr	r1, [pc, #500]	; (8000ad4 <main+0x414>)
 80008e0:	487e      	ldr	r0, [pc, #504]	; (8000adc <main+0x41c>)
 80008e2:	f005 f975 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Pot1=%u Pot2=%u \n\r",potenc1,potenc2);
 80008e6:	4b84      	ldr	r3, [pc, #528]	; (8000af8 <main+0x438>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b84      	ldr	r3, [pc, #528]	; (8000afc <main+0x43c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4984      	ldr	r1, [pc, #528]	; (8000b00 <main+0x440>)
 80008f0:	4878      	ldr	r0, [pc, #480]	; (8000ad4 <main+0x414>)
 80008f2:	f005 fb5d 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80008f6:	4877      	ldr	r0, [pc, #476]	; (8000ad4 <main+0x414>)
 80008f8:	f7ff fc28 	bl	800014c <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	2301      	movs	r3, #1
 8000902:	4974      	ldr	r1, [pc, #464]	; (8000ad4 <main+0x414>)
 8000904:	4875      	ldr	r0, [pc, #468]	; (8000adc <main+0x41c>)
 8000906:	f005 f963 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Togg1=%u Togg2=%u \n\r",togg1,togg2);
 800090a:	4b7e      	ldr	r3, [pc, #504]	; (8000b04 <main+0x444>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b7e      	ldr	r3, [pc, #504]	; (8000b08 <main+0x448>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	497e      	ldr	r1, [pc, #504]	; (8000b0c <main+0x44c>)
 8000914:	486f      	ldr	r0, [pc, #444]	; (8000ad4 <main+0x414>)
 8000916:	f005 fb4b 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800091a:	486e      	ldr	r0, [pc, #440]	; (8000ad4 <main+0x414>)
 800091c:	f7ff fc16 	bl	800014c <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	2301      	movs	r3, #1
 8000926:	496b      	ldr	r1, [pc, #428]	; (8000ad4 <main+0x414>)
 8000928:	486c      	ldr	r0, [pc, #432]	; (8000adc <main+0x41c>)
 800092a:	f005 f951 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "Butt1=%u Butt2=%u Butt3=%u Butt4=%u \n\r",butt1,butt2,butt3,butt4);
 800092e:	4b78      	ldr	r3, [pc, #480]	; (8000b10 <main+0x450>)
 8000930:	6819      	ldr	r1, [r3, #0]
 8000932:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <main+0x454>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	4b78      	ldr	r3, [pc, #480]	; (8000b18 <main+0x458>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a78      	ldr	r2, [pc, #480]	; (8000b1c <main+0x45c>)
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	9201      	str	r2, [sp, #4]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	4976      	ldr	r1, [pc, #472]	; (8000b20 <main+0x460>)
 8000948:	4862      	ldr	r0, [pc, #392]	; (8000ad4 <main+0x414>)
 800094a:	f005 fb31 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 800094e:	4861      	ldr	r0, [pc, #388]	; (8000ad4 <main+0x414>)
 8000950:	f7ff fbfc 	bl	800014c <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	2301      	movs	r3, #1
 800095a:	495e      	ldr	r1, [pc, #376]	; (8000ad4 <main+0x414>)
 800095c:	485f      	ldr	r0, [pc, #380]	; (8000adc <main+0x41c>)
 800095e:	f005 f937 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ButtL=%u ButtD=%u \n\r",buttL,buttD);
 8000962:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <main+0x464>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <main+0x468>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4970      	ldr	r1, [pc, #448]	; (8000b2c <main+0x46c>)
 800096c:	4859      	ldr	r0, [pc, #356]	; (8000ad4 <main+0x414>)
 800096e:	f005 fb1f 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000972:	4858      	ldr	r0, [pc, #352]	; (8000ad4 <main+0x414>)
 8000974:	f7ff fbea 	bl	800014c <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	2301      	movs	r3, #1
 800097e:	4955      	ldr	r1, [pc, #340]	; (8000ad4 <main+0x414>)
 8000980:	4856      	ldr	r0, [pc, #344]	; (8000adc <main+0x41c>)
 8000982:	f005 f925 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG RECV=%u \n\r",watch1);
 8000986:	4b6a      	ldr	r3, [pc, #424]	; (8000b30 <main+0x470>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4969      	ldr	r1, [pc, #420]	; (8000b34 <main+0x474>)
 800098e:	4851      	ldr	r0, [pc, #324]	; (8000ad4 <main+0x414>)
 8000990:	f005 fb0e 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000994:	484f      	ldr	r0, [pc, #316]	; (8000ad4 <main+0x414>)
 8000996:	f7ff fbd9 	bl	800014c <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	2301      	movs	r3, #1
 80009a0:	494c      	ldr	r1, [pc, #304]	; (8000ad4 <main+0x414>)
 80009a2:	484e      	ldr	r0, [pc, #312]	; (8000adc <main+0x41c>)
 80009a4:	f005 f914 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "MSG SEND=%u \n\r",watch2);
 80009a8:	4b63      	ldr	r3, [pc, #396]	; (8000b38 <main+0x478>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4963      	ldr	r1, [pc, #396]	; (8000b3c <main+0x47c>)
 80009b0:	4848      	ldr	r0, [pc, #288]	; (8000ad4 <main+0x414>)
 80009b2:	f005 fafd 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80009b6:	4847      	ldr	r0, [pc, #284]	; (8000ad4 <main+0x414>)
 80009b8:	f7ff fbc8 	bl	800014c <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	2301      	movs	r3, #1
 80009c2:	4944      	ldr	r1, [pc, #272]	; (8000ad4 <main+0x414>)
 80009c4:	4845      	ldr	r0, [pc, #276]	; (8000adc <main+0x41c>)
 80009c6:	f005 f903 	bl	8005bd0 <HAL_UART_Transmit>

	  //MPU 6050
	  sprintf(UartTXbuff0, "GYRO X RAW=%d \n\r",mpuDataStr.Gyroscope_X);
 80009ca:	4b5d      	ldr	r3, [pc, #372]	; (8000b40 <main+0x480>)
 80009cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80009d0:	461a      	mov	r2, r3
 80009d2:	495c      	ldr	r1, [pc, #368]	; (8000b44 <main+0x484>)
 80009d4:	483f      	ldr	r0, [pc, #252]	; (8000ad4 <main+0x414>)
 80009d6:	f005 faeb 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80009da:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <main+0x414>)
 80009dc:	f7ff fbb6 	bl	800014c <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	2301      	movs	r3, #1
 80009e6:	493b      	ldr	r1, [pc, #236]	; (8000ad4 <main+0x414>)
 80009e8:	483c      	ldr	r0, [pc, #240]	; (8000adc <main+0x41c>)
 80009ea:	f005 f8f1 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYRO Y RAW=%d \n\r",mpuDataStr.Gyroscope_Y);
 80009ee:	4b54      	ldr	r3, [pc, #336]	; (8000b40 <main+0x480>)
 80009f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4954      	ldr	r1, [pc, #336]	; (8000b48 <main+0x488>)
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <main+0x414>)
 80009fa:	f005 fad9 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 80009fe:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <main+0x414>)
 8000a00:	f7ff fba4 	bl	800014c <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	2301      	movs	r3, #1
 8000a0a:	4932      	ldr	r1, [pc, #200]	; (8000ad4 <main+0x414>)
 8000a0c:	4833      	ldr	r0, [pc, #204]	; (8000adc <main+0x41c>)
 8000a0e:	f005 f8df 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "GYRO Z RAW=%d \n\r",mpuDataStr.Gyroscope_Z);
 8000a12:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <main+0x480>)
 8000a14:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	494c      	ldr	r1, [pc, #304]	; (8000b4c <main+0x48c>)
 8000a1c:	482d      	ldr	r0, [pc, #180]	; (8000ad4 <main+0x414>)
 8000a1e:	f005 fac7 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000a22:	482c      	ldr	r0, [pc, #176]	; (8000ad4 <main+0x414>)
 8000a24:	f7ff fb92 	bl	800014c <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4929      	ldr	r1, [pc, #164]	; (8000ad4 <main+0x414>)
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <main+0x41c>)
 8000a32:	f005 f8cd 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC X RAW=%d \n\r",mpuDataStr.Accelerometer_X);
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <main+0x480>)
 8000a38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4944      	ldr	r1, [pc, #272]	; (8000b50 <main+0x490>)
 8000a40:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <main+0x414>)
 8000a42:	f005 fab5 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <main+0x414>)
 8000a48:	f7ff fb80 	bl	800014c <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	4920      	ldr	r1, [pc, #128]	; (8000ad4 <main+0x414>)
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <main+0x41c>)
 8000a56:	f005 f8bb 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Y RAW=%d \n\r",mpuDataStr.Accelerometer_Y);
 8000a5a:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <main+0x480>)
 8000a5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a60:	461a      	mov	r2, r3
 8000a62:	493c      	ldr	r1, [pc, #240]	; (8000b54 <main+0x494>)
 8000a64:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <main+0x414>)
 8000a66:	f005 faa3 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000a6a:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <main+0x414>)
 8000a6c:	f7ff fb6e 	bl	800014c <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	2301      	movs	r3, #1
 8000a76:	4917      	ldr	r1, [pc, #92]	; (8000ad4 <main+0x414>)
 8000a78:	4818      	ldr	r0, [pc, #96]	; (8000adc <main+0x41c>)
 8000a7a:	f005 f8a9 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "ACC Z RAW=%d \n\r",mpuDataStr.Accelerometer_Z);
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <main+0x480>)
 8000a80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4934      	ldr	r1, [pc, #208]	; (8000b58 <main+0x498>)
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <main+0x414>)
 8000a8a:	f005 fa91 	bl	8005fb0 <siprintf>
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000a8e:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <main+0x414>)
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	2301      	movs	r3, #1
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <main+0x414>)
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <main+0x41c>)
 8000a9e:	f005 f897 	bl	8005bd0 <HAL_UART_Transmit>

	  sprintf(UartTXbuff0, "\n\r" );
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <main+0x414>)
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <main+0x49c>)
 8000aa6:	8811      	ldrh	r1, [r2, #0]
 8000aa8:	7892      	ldrb	r2, [r2, #2]
 8000aaa:	8019      	strh	r1, [r3, #0]
 8000aac:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 );
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <main+0x414>)
 8000ab0:	f7ff fb4c 	bl	800014c <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <main+0x414>)
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <main+0x41c>)
 8000abe:	f005 f887 	bl	8005bd0 <HAL_UART_Transmit>

	  //MPU 6050
	  SD_MPU6050_ReadGyroscope(&hi2c2,&mpuDataStr);
 8000ac2:	491f      	ldr	r1, [pc, #124]	; (8000b40 <main+0x480>)
 8000ac4:	4826      	ldr	r0, [pc, #152]	; (8000b60 <main+0x4a0>)
 8000ac6:	f001 f855 	bl	8001b74 <SD_MPU6050_ReadGyroscope>
	  SD_MPU6050_ReadAccelerometer(&hi2c2,&mpuDataStr);
 8000aca:	491d      	ldr	r1, [pc, #116]	; (8000b40 <main+0x480>)
 8000acc:	4824      	ldr	r0, [pc, #144]	; (8000b60 <main+0x4a0>)
 8000ace:	f001 f807 	bl	8001ae0 <SD_MPU6050_ReadAccelerometer>
  {
 8000ad2:	e681      	b.n	80007d8 <main+0x118>
 8000ad4:	200001c8 	.word	0x200001c8
 8000ad8:	08006800 	.word	0x08006800
 8000adc:	2000028c 	.word	0x2000028c
 8000ae0:	20000314 	.word	0x20000314
 8000ae4:	20000284 	.word	0x20000284
 8000ae8:	08006810 	.word	0x08006810
 8000aec:	20000334 	.word	0x20000334
 8000af0:	200000bc 	.word	0x200000bc
 8000af4:	08006824 	.word	0x08006824
 8000af8:	20000328 	.word	0x20000328
 8000afc:	20000338 	.word	0x20000338
 8000b00:	08006838 	.word	0x08006838
 8000b04:	200002d0 	.word	0x200002d0
 8000b08:	20000340 	.word	0x20000340
 8000b0c:	0800684c 	.word	0x0800684c
 8000b10:	20000320 	.word	0x20000320
 8000b14:	2000033c 	.word	0x2000033c
 8000b18:	200002cc 	.word	0x200002cc
 8000b1c:	200000c0 	.word	0x200000c0
 8000b20:	08006864 	.word	0x08006864
 8000b24:	2000011c 	.word	0x2000011c
 8000b28:	20000324 	.word	0x20000324
 8000b2c:	0800688c 	.word	0x0800688c
 8000b30:	200001c4 	.word	0x200001c4
 8000b34:	080068a4 	.word	0x080068a4
 8000b38:	200001b4 	.word	0x200001b4
 8000b3c:	080068b4 	.word	0x080068b4
 8000b40:	20000194 	.word	0x20000194
 8000b44:	080068c4 	.word	0x080068c4
 8000b48:	080068d8 	.word	0x080068d8
 8000b4c:	080068ec 	.word	0x080068ec
 8000b50:	08006900 	.word	0x08006900
 8000b54:	08006910 	.word	0x08006910
 8000b58:	08006920 	.word	0x08006920
 8000b5c:	08006930 	.word	0x08006930
 8000b60:	20000120 	.word	0x20000120

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fa14 	bl	8005fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fc84 	bl	80044c8 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bc6:	f000 fa4d 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2102      	movs	r1, #2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 feee 	bl	80049c8 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bf2:	f000 fa37 	bl	8001064 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 f87c 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c0e:	f000 fa29 	bl	8001064 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3750      	adds	r7, #80	; 0x50
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <MX_ADC1_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c5a:	f001 fcb5 	bl	80025c8 <HAL_ADC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 f9fe 	bl	8001064 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_ADC1_Init+0x74>)
 8000c7a:	f001 ff31 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c84:	f000 f9ee 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000254 	.word	0x20000254
 8000c94:	40012400 	.word	0x40012400

08000c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <MX_I2C2_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_I2C2_Init+0x58>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_I2C2_Init+0x50>)
 8000cd6:	f002 fb79 	bl	80033cc <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 f9c0 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000120 	.word	0x20000120
 8000cec:	40005800 	.word	0x40005800
 8000cf0:	00061a80 	.word	0x00061a80

08000cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_SPI2_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_SPI2_Init+0x64>)
 8000d46:	f004 f94d 	bl	8004fe4 <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 f988 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000c4 	.word	0x200000c4
 8000d5c:	40003800 	.word	0x40003800

08000d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2220      	movs	r2, #32
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 f901 	bl	8005fa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d9e:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000da0:	4a51      	ldr	r2, [pc, #324]	; (8000ee8 <MX_TIM1_Init+0x188>)
 8000da2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000da4:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000da6:	2247      	movs	r2, #71	; 0x47
 8000da8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000db0:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000db2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000db6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dbe:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dca:	4846      	ldr	r0, [pc, #280]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000dcc:	f004 f96b 	bl	80050a6 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dd6:	f000 f945 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000de4:	4619      	mov	r1, r3
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000de8:	f004 fab4 	bl	8005354 <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000df2:	f000 f937 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000df6:	483b      	ldr	r0, [pc, #236]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000df8:	f004 f980 	bl	80050fc <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e02:	f000 f92f 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e12:	4619      	mov	r1, r3
 8000e14:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000e16:	f004 fdf9 	bl	8005a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e20:	f000 f920 	bl	8001064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e24:	2360      	movs	r3, #96	; 0x60
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e36:	2304      	movs	r3, #4
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000e4c:	f004 f9bc 	bl	80051c8 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e56:	f000 f905 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4820      	ldr	r0, [pc, #128]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000e64:	f004 f9b0 	bl	80051c8 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000e6e:	f000 f8f9 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	2208      	movs	r2, #8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000e7c:	f004 f9a4 	bl	80051c8 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000e86:	f000 f8ed 	bl	8001064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000e94:	f004 f998 	bl	80051c8 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e9e:	f000 f8e1 	bl	8001064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000ec6:	f004 fde5 	bl	8005a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000ed0:	f000 f8c8 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM1_Init+0x184>)
 8000ed6:	f000 ffaf 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	; 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002d4 	.word	0x200002d4
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART1_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f24:	f004 fe07 	bl	8005b36 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f899 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000028c 	.word	0x2000028c
 8000f3c:	40013800 	.word	0x40013800

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a3e      	ldr	r2, [pc, #248]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a38      	ldr	r2, [pc, #224]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_GPIO_Init+0x114>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <MX_GPIO_Init+0x114>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MX_GPIO_Init+0x114>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	4827      	ldr	r0, [pc, #156]	; (8001058 <MX_GPIO_Init+0x118>)
 8000fbc:	f002 f9ee 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4825      	ldr	r0, [pc, #148]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fc8:	f002 f9e8 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	4823      	ldr	r0, [pc, #140]	; (8001060 <MX_GPIO_Init+0x120>)
 8000fd4:	f002 f9e2 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <MX_GPIO_Init+0x118>)
 8000ff2:	f002 f879 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_GPIO_Init+0x11c>)
 8001010:	f002 f86a 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_GPIO_Init+0x120>)
 800102a:	f002 f85d 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_GPIO_Init+0x120>)
 8001048:	f002 f84e 	bl	80030e8 <HAL_GPIO_Init>

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	40011000 	.word	0x40011000
 800105c:	40010c00 	.word	0x40010c00
 8001060:	40010800 	.word	0x40010800

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <nRF24_TransmitPacket+0x98>)
 800107e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <nRF24_TransmitPacket+0x9c>)
 8001088:	f002 f988 	bl	800339c <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb64 	bl	800175e <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	481b      	ldr	r0, [pc, #108]	; (800110c <nRF24_TransmitPacket+0x9c>)
 800109e:	f002 f97d 	bl	800339c <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80010a2:	f000 fb24 	bl	80016ee <nRF24_GetStatus>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f1      	bne.n	80010a2 <nRF24_TransmitPacket+0x32>
 80010be:	e000      	b.n	80010c2 <nRF24_TransmitPacket+0x52>
			break;
 80010c0:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <nRF24_TransmitPacket+0x9c>)
 80010ca:	f002 f967 	bl	800339c <HAL_GPIO_WritePin>

	if (!wait) {
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80010d4:	2302      	movs	r3, #2
 80010d6:	e012      	b.n	80010fe <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80010d8:	f000 fb2c 	bl	8001734 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e009      	b.n	80010fe <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e002      	b.n	80010fe <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80010f8:	f000 fb0c 	bl	8001714 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	000fffff 	.word	0x000fffff
 800110c:	40010c00 	.word	0x40010c00

08001110 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 800111a:	bf00      	nop
 800111c:	2102      	movs	r1, #2
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <nRF24_LL_RW+0x48>)
 8001120:	f7ff fab4 	bl	800068c <SPI_I2S_GetFlagStatus>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f8      	beq.n	800111c <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <nRF24_LL_RW+0x48>)
 8001132:	f7ff fa91 	bl	8000658 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8001136:	bf00      	nop
 8001138:	2101      	movs	r1, #1
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <nRF24_LL_RW+0x48>)
 800113c:	f7ff faa6 	bl	800068c <SPI_I2S_GetFlagStatus>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f8      	beq.n	8001138 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <nRF24_LL_RW+0x48>)
 8001148:	f7ff fa94 	bl	8000674 <SPI_I2S_ReceiveData>
 800114c:	4603      	mov	r3, r0
 800114e:	b2db      	uxtb	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40003800 	.word	0x40003800

0800115c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <nRF24_ReadReg+0x44>)
 800116e:	f002 f915 	bl	800339c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffc8 	bl	8001110 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001180:	20ff      	movs	r0, #255	; 0xff
 8001182:	f7ff ffc5 	bl	8001110 <nRF24_LL_RW>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <nRF24_ReadReg+0x44>)
 8001192:	f002 f903 	bl	800339c <HAL_GPIO_WritePin>

	return value;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010800 	.word	0x40010800

080011a4 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <nRF24_WriteReg+0x80>)
 80011bc:	f002 f8ee 	bl	800339c <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b1f      	cmp	r3, #31
 80011c4:	d810      	bhi.n	80011e8 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff99 	bl	8001110 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff95 	bl	8001110 <nRF24_LL_RW>
 80011e6:	e013      	b.n	8001210 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff90 	bl	8001110 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2be1      	cmp	r3, #225	; 0xe1
 80011f4:	d00c      	beq.n	8001210 <nRF24_WriteReg+0x6c>
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2be2      	cmp	r3, #226	; 0xe2
 80011fa:	d009      	beq.n	8001210 <nRF24_WriteReg+0x6c>
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2be3      	cmp	r3, #227	; 0xe3
 8001200:	d006      	beq.n	8001210 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d003      	beq.n	8001210 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff80 	bl	8001110 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <nRF24_WriteReg+0x80>)
 8001218:	f002 f8c0 	bl	800339c <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010800 	.word	0x40010800

08001228 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	4613      	mov	r3, r2
 8001236:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <nRF24_ReadMBReg+0x54>)
 8001240:	f002 f8ac 	bl	800339c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff62 	bl	8001110 <nRF24_LL_RW>
	while (count--) {
 800124c:	e007      	b.n	800125e <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800124e:	683c      	ldr	r4, [r7, #0]
 8001250:	1c63      	adds	r3, r4, #1
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	20ff      	movs	r0, #255	; 0xff
 8001256:	f7ff ff5b 	bl	8001110 <nRF24_LL_RW>
 800125a:	4603      	mov	r3, r0
 800125c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	71ba      	strb	r2, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f2      	bne.n	800124e <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <nRF24_ReadMBReg+0x54>)
 8001270:	f002 f894 	bl	800339c <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	40010800 	.word	0x40010800

08001280 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <nRF24_WriteMBReg+0x54>)
 8001298:	f002 f880 	bl	800339c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff36 	bl	8001110 <nRF24_LL_RW>
	while (count--) {
 80012a4:	e006      	b.n	80012b4 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	603a      	str	r2, [r7, #0]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff2e 	bl	8001110 <nRF24_LL_RW>
	while (count--) {
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	71ba      	strb	r2, [r7, #6]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f3      	bne.n	80012a6 <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <nRF24_WriteMBReg+0x54>)
 80012c6:	f002 f869 	bl	800339c <HAL_GPIO_WritePin>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010800 	.word	0x40010800

080012d8 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80012dc:	2108      	movs	r1, #8
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff ff60 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80012e4:	213f      	movs	r1, #63	; 0x3f
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff ff5c 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80012ec:	2103      	movs	r1, #3
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff ff58 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80012f4:	2103      	movs	r1, #3
 80012f6:	2003      	movs	r0, #3
 80012f8:	f7ff ff54 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80012fc:	2103      	movs	r1, #3
 80012fe:	2004      	movs	r0, #4
 8001300:	f7ff ff50 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001304:	2102      	movs	r1, #2
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff ff4c 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800130c:	210e      	movs	r1, #14
 800130e:	2006      	movs	r0, #6
 8001310:	f7ff ff48 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001314:	2100      	movs	r1, #0
 8001316:	2007      	movs	r0, #7
 8001318:	f7ff ff44 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800131c:	2100      	movs	r1, #0
 800131e:	2011      	movs	r0, #17
 8001320:	f7ff ff40 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	2012      	movs	r0, #18
 8001328:	f7ff ff3c 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800132c:	2100      	movs	r1, #0
 800132e:	2013      	movs	r0, #19
 8001330:	f7ff ff38 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001334:	2100      	movs	r1, #0
 8001336:	2014      	movs	r0, #20
 8001338:	f7ff ff34 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	2015      	movs	r0, #21
 8001340:	f7ff ff30 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001344:	2100      	movs	r1, #0
 8001346:	2016      	movs	r0, #22
 8001348:	f7ff ff2c 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800134c:	2100      	movs	r1, #0
 800134e:	201c      	movs	r0, #28
 8001350:	f7ff ff28 	bl	80011a4 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8001354:	2100      	movs	r1, #0
 8001356:	201d      	movs	r0, #29
 8001358:	f7ff ff24 	bl	80011a4 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800135c:	f000 f9e2 	bl	8001724 <nRF24_FlushRX>
	nRF24_FlushTX();
 8001360:	f000 f9d8 	bl	8001714 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8001364:	f000 f9e6 	bl	8001734 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	4802      	ldr	r0, [pc, #8]	; (8001378 <nRF24_Init+0xa0>)
 8001370:	f002 f814 	bl	800339c <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010800 	.word	0x40010800

0800137c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <nRF24_Check+0x58>)
 8001384:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8001386:	2205      	movs	r2, #5
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	2030      	movs	r0, #48	; 0x30
 800138c:	f7ff ff78 	bl	8001280 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8001390:	463b      	mov	r3, r7
 8001392:	2205      	movs	r2, #5
 8001394:	4619      	mov	r1, r3
 8001396:	2010      	movs	r0, #16
 8001398:	f7ff ff46 	bl	8001228 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e010      	b.n	80013c4 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	4413      	add	r3, r2
 80013aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c59      	adds	r1, r3, #1
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <nRF24_Check+0x42>
 80013ba:	2300      	movs	r3, #0
 80013bc:	e006      	b.n	80013cc <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d9eb      	bls.n	80013a2 <nRF24_Check+0x26>
	}

	return 1;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08006934 	.word	0x08006934

080013d8 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff feba 	bl	800115c <nRF24_ReadReg>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d104      	bne.n	80013fc <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e003      	b.n	8001404 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4619      	mov	r1, r3
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fecb 	bl	80011a4 <nRF24_WriteReg>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fe9b 	bl	800115c <nRF24_ReadReg>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b25a      	sxtb	r2, r3
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	4313      	orrs	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4619      	mov	r1, r3
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff feaa 	bl	80011a4 <nRF24_WriteReg>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fe7a 	bl	800115c <nRF24_ReadReg>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	f023 030c 	bic.w	r3, r3, #12
 8001472:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	b25a      	sxtb	r2, r3
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	4619      	mov	r1, r3
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fe89 	bl	80011a4 <nRF24_WriteReg>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2005      	movs	r0, #5
 80014aa:	f7ff fe7b 	bl	80011a4 <nRF24_WriteReg>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	3b02      	subs	r3, #2
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	2003      	movs	r0, #3
 80014ca:	f7ff fe6b 	bl	80011a4 <nRF24_WriteReg>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d846      	bhi.n	8001578 <nRF24_SetAddr+0xa0>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <nRF24_SetAddr+0x18>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	0800150d 	.word	0x0800150d
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001565 	.word	0x08001565
 80014fc:	08001565 	.word	0x08001565
 8001500:	08001565 	.word	0x08001565
 8001504:	08001565 	.word	0x08001565
 8001508:	0800150d 	.word	0x0800150d
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fe25 	bl	800115c <nRF24_ReadReg>
 8001512:	4603      	mov	r3, r0
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001526:	4817      	ldr	r0, [pc, #92]	; (8001584 <nRF24_SetAddr+0xac>)
 8001528:	f001 ff38 	bl	800339c <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <nRF24_SetAddr+0xb0>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fde9 	bl	8001110 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	603a      	str	r2, [r7, #0]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fde2 	bl	8001110 <nRF24_LL_RW>
			} while (addr_width--);
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	73fa      	strb	r2, [r7, #15]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f3      	bne.n	800153e <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <nRF24_SetAddr+0xac>)
 800155e:	f001 ff1d 	bl	800339c <HAL_GPIO_WritePin>
			break;
 8001562:	e00a      	b.n	800157a <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <nRF24_SetAddr+0xb0>)
 8001568:	5cd2      	ldrb	r2, [r2, r3]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4619      	mov	r1, r3
 8001570:	4610      	mov	r0, r2
 8001572:	f7ff fe17 	bl	80011a4 <nRF24_WriteReg>
			break;
 8001576:	e000      	b.n	800157a <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001578:	bf00      	nop
	}
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40010800 	.word	0x40010800
 8001588:	08006970 	.word	0x08006970

0800158c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001596:	2006      	movs	r0, #6
 8001598:	f7ff fde0 	bl	800115c <nRF24_ReadReg>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f023 0306 	bic.w	r3, r3, #6
 80015a6:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4619      	mov	r1, r3
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff fdf5 	bl	80011a4 <nRF24_WriteReg>
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80015cc:	2006      	movs	r0, #6
 80015ce:	f7ff fdc5 	bl	800115c <nRF24_ReadReg>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80015dc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	4619      	mov	r1, r3
 80015ea:	2006      	movs	r0, #6
 80015ec:	f7ff fdda 	bl	80011a4 <nRF24_WriteReg>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	460b      	mov	r3, r1
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	4613      	mov	r3, r2
 8001608:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff fda6 	bl	800115c <nRF24_ReadReg>
 8001610:	4603      	mov	r3, r0
 8001612:	b25a      	sxtb	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	b25b      	sxtb	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b25b      	sxtb	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4619      	mov	r1, r3
 800162e:	2002      	movs	r0, #2
 8001630:	f7ff fdb8 	bl	80011a4 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <nRF24_SetRXPipe+0xa4>)
 8001638:	5cd2      	ldrb	r2, [r2, r3]
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7ff fdad 	bl	80011a4 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fd86 	bl	800115c <nRF24_ReadReg>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10a      	bne.n	8001670 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2201      	movs	r2, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	b25a      	sxtb	r2, r3
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e00b      	b.n	8001688 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2201      	movs	r2, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	b25b      	sxtb	r3, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	b25a      	sxtb	r2, r3
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4013      	ands	r3, r2
 8001684:	b25b      	sxtb	r3, r3
 8001686:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	4619      	mov	r1, r3
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fd89 	bl	80011a4 <nRF24_WriteReg>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	08006968 	.word	0x08006968

080016a0 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d904      	bls.n	80016ba <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fd76 	bl	80011a4 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80016b8:	e015      	b.n	80016e6 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fd4e 	bl	800115c <nRF24_ReadReg>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2201      	movs	r2, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4013      	ands	r3, r2
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4619      	mov	r1, r3
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fd5f 	bl	80011a4 <nRF24_WriteReg>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f7ff fd32 	bl	800115c <nRF24_ReadReg>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}

080016fe <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001702:	2017      	movs	r0, #23
 8001704:	f7ff fd2a 	bl	800115c <nRF24_ReadReg>
 8001708:	4603      	mov	r3, r0
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}

08001714 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001718:	21ff      	movs	r1, #255	; 0xff
 800171a:	20e1      	movs	r0, #225	; 0xe1
 800171c:	f7ff fd42 	bl	80011a4 <nRF24_WriteReg>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001728:	21ff      	movs	r1, #255	; 0xff
 800172a:	20e2      	movs	r0, #226	; 0xe2
 800172c:	f7ff fd3a 	bl	80011a4 <nRF24_WriteReg>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800173a:	2007      	movs	r0, #7
 800173c:	f7ff fd0e 	bl	800115c <nRF24_ReadReg>
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800174a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4619      	mov	r1, r3
 8001750:	2007      	movs	r0, #7
 8001752:	f7ff fd27 	bl	80011a4 <nRF24_WriteReg>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	461a      	mov	r2, r3
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	20a0      	movs	r0, #160	; 0xa0
 8001772:	f7ff fd85 	bl	8001280 <nRF24_WriteMBReg>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800178a:	2007      	movs	r0, #7
 800178c:	f7ff fce6 	bl	800115c <nRF24_ReadReg>
 8001790:	4603      	mov	r3, r0
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d816      	bhi.n	80017d0 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <nRF24_ReadPayload+0x60>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fcd7 	bl	800115c <nRF24_ReadReg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	2061      	movs	r0, #97	; 0x61
 80017c8:	f7ff fd2e 	bl	8001228 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	e003      	b.n	80017d8 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80017d6:	23ff      	movs	r3, #255	; 0xff
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	08006968 	.word	0x08006968

080017e4 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	460b      	mov	r3, r1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	4613      	mov	r3, r2
 80017f8:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80017fa:	2375      	movs	r3, #117	; 0x75
 80017fc:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001814:	7efb      	ldrb	r3, [r7, #27]
 8001816:	b299      	uxth	r1, r3
 8001818:	2305      	movs	r3, #5
 800181a:	2202      	movs	r2, #2
 800181c:	69f8      	ldr	r0, [r7, #28]
 800181e:	f002 fa29 	bl	8003c74 <HAL_I2C_IsDeviceReady>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001828:	2301      	movs	r3, #1
 800182a:	e04c      	b.n	80018c6 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800182c:	7efb      	ldrb	r3, [r7, #27]
 800182e:	b299      	uxth	r1, r3
 8001830:	f107 021a 	add.w	r2, r7, #26
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	69f8      	ldr	r0, [r7, #28]
 800183e:	f001 feed 	bl	800361c <HAL_I2C_Master_Transmit>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001848:	2301      	movs	r3, #1
 800184a:	e03c      	b.n	80018c6 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800184c:	7efb      	ldrb	r3, [r7, #27]
 800184e:	b299      	uxth	r1, r3
 8001850:	f107 0219 	add.w	r2, r7, #25
 8001854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	69f8      	ldr	r0, [r7, #28]
 800185e:	f001 ffdb 	bl	8003818 <HAL_I2C_Master_Receive>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001868:	2301      	movs	r3, #1
 800186a:	e02c      	b.n	80018c6 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800186c:	2303      	movs	r3, #3
 800186e:	e02a      	b.n	80018c6 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001870:	bf00      	nop
 8001872:	7e7b      	ldrb	r3, [r7, #25]
 8001874:	2b68      	cmp	r3, #104	; 0x68
 8001876:	d1f9      	bne.n	800186c <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001878:	236b      	movs	r3, #107	; 0x6b
 800187a:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800187c:	2300      	movs	r3, #0
 800187e:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001880:	7efb      	ldrb	r3, [r7, #27]
 8001882:	b299      	uxth	r1, r3
 8001884:	f107 0214 	add.w	r2, r7, #20
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2302      	movs	r3, #2
 8001890:	69f8      	ldr	r0, [r7, #28]
 8001892:	f001 fec3 	bl	800361c <HAL_I2C_Master_Transmit>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800189c:	2301      	movs	r3, #1
 800189e:	e012      	b.n	80018c6 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 80018a0:	2207      	movs	r2, #7
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f812 	bl	80018ce <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f831 	bl	8001918 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80018b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018ba:	461a      	mov	r2, r3
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f89a 	bl	80019f8 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b088      	sub	sp, #32
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	4613      	mov	r3, r2
 80018da:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80018e6:	2319      	movs	r3, #25
 80018e8:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80018ee:	bf00      	nop
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	b299      	uxth	r1, r3
 80018f4:	f107 0210 	add.w	r2, r7, #16
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2302      	movs	r3, #2
 8001900:	6978      	ldr	r0, [r7, #20]
 8001902:	f001 fe8b 	bl	800361c <HAL_I2C_Master_Transmit>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f1      	bne.n	80018f0 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001930:	231c      	movs	r3, #28
 8001932:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001934:	bf00      	nop
 8001936:	7cfb      	ldrb	r3, [r7, #19]
 8001938:	b299      	uxth	r1, r3
 800193a:	f107 0211 	add.w	r2, r7, #17
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f001 fe68 	bl	800361c <HAL_I2C_Master_Transmit>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001952:	bf00      	nop
 8001954:	7cfb      	ldrb	r3, [r7, #19]
 8001956:	b299      	uxth	r1, r3
 8001958:	f107 0212 	add.w	r2, r7, #18
 800195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	6978      	ldr	r0, [r7, #20]
 8001966:	f001 ff57 	bl	8003818 <HAL_I2C_Master_Receive>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f1      	bne.n	8001954 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001970:	7cbb      	ldrb	r3, [r7, #18]
 8001972:	b25b      	sxtb	r3, r3
 8001974:	f023 0318 	bic.w	r3, r3, #24
 8001978:	b25a      	sxtb	r2, r3
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b25b      	sxtb	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b25b      	sxtb	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001988:	bf00      	nop
 800198a:	7cfb      	ldrb	r3, [r7, #19]
 800198c:	b299      	uxth	r1, r3
 800198e:	f107 0212 	add.w	r2, r7, #18
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f001 fe3e 	bl	800361c <HAL_I2C_Master_Transmit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f1      	bne.n	800198a <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d81f      	bhi.n	80019ec <SD_MPU6050_SetAccelerometer+0xd4>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <SD_MPU6050_SetAccelerometer+0x9c>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cf 	.word	0x080019cf
 80019bc:	080019d9 	.word	0x080019d9
 80019c0:	080019e3 	.word	0x080019e3
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80019ca:	609a      	str	r2, [r3, #8]
			break;
 80019cc:	e00f      	b.n	80019ee <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80019d4:	609a      	str	r2, [r3, #8]
			break;
 80019d6:	e00a      	b.n	80019ee <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80019de:	609a      	str	r2, [r3, #8]
			break;
 80019e0:	e005      	b.n	80019ee <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80019e8:	609a      	str	r2, [r3, #8]
			break;
 80019ea:	e000      	b.n	80019ee <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 80019ec:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001a10:	231b      	movs	r3, #27
 8001a12:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001a14:	bf00      	nop
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	f107 0211 	add.w	r2, r7, #17
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2301      	movs	r3, #1
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f001 fdf8 	bl	800361c <HAL_I2C_Master_Transmit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f1      	bne.n	8001a16 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001a32:	bf00      	nop
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	b299      	uxth	r1, r3
 8001a38:	f107 0212 	add.w	r2, r7, #18
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f001 fee7 	bl	8003818 <HAL_I2C_Master_Receive>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f1      	bne.n	8001a34 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001a50:	7cbb      	ldrb	r3, [r7, #18]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	f023 0318 	bic.w	r3, r3, #24
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001a68:	bf00      	nop
 8001a6a:	7cfb      	ldrb	r3, [r7, #19]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	f107 0212 	add.w	r2, r7, #18
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f001 fdce 	bl	800361c <HAL_I2C_Master_Transmit>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f1      	bne.n	8001a6a <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d81b      	bhi.n	8001ac4 <SD_MPU6050_SetGyroscope+0xcc>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <SD_MPU6050_SetGyroscope+0x9c>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001aad 	.word	0x08001aad
 8001a9c:	08001ab5 	.word	0x08001ab5
 8001aa0:	08001abd 	.word	0x08001abd
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SD_MPU6050_SetGyroscope+0xd8>)
 8001aa8:	605a      	str	r2, [r3, #4]
				break;
 8001aaa:	e00c      	b.n	8001ac6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <SD_MPU6050_SetGyroscope+0xdc>)
 8001ab0:	605a      	str	r2, [r3, #4]
				break;
 8001ab2:	e008      	b.n	8001ac6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <SD_MPU6050_SetGyroscope+0xe0>)
 8001ab8:	605a      	str	r2, [r3, #4]
				break;
 8001aba:	e004      	b.n	8001ac6 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <SD_MPU6050_SetGyroscope+0xe4>)
 8001ac0:	605a      	str	r2, [r3, #4]
				break;
 8001ac2:	e000      	b.n	8001ac6 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8001ac4:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	3bfa232d 	.word	0x3bfa232d
 8001ad4:	3c7a232d 	.word	0x3c7a232d
 8001ad8:	3cf9c190 	.word	0x3cf9c190
 8001adc:	3d79c190 	.word	0x3d79c190

08001ae0 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8001aea:	233b      	movs	r3, #59	; 0x3b
 8001aec:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001af8:	bf00      	nop
 8001afa:	7cfb      	ldrb	r3, [r7, #19]
 8001afc:	b299      	uxth	r1, r3
 8001afe:	f107 020b 	add.w	r2, r7, #11
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f001 fd86 	bl	800361c <HAL_I2C_Master_Transmit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f1      	bne.n	8001afa <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001b16:	bf00      	nop
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	f107 020c 	add.w	r2, r7, #12
 8001b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2306      	movs	r3, #6
 8001b28:	6978      	ldr	r0, [r7, #20]
 8001b2a:	f001 fe75 	bl	8003818 <HAL_I2C_Master_Receive>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f1      	bne.n	8001b18 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8001b34:	7b3b      	ldrb	r3, [r7, #12]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8001b58:	7c3b      	ldrb	r3, [r7, #16]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	7c7b      	ldrb	r3, [r7, #17]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8001b7e:	2343      	movs	r3, #67	; 0x43
 8001b80:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001b8c:	bf00      	nop
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	b299      	uxth	r1, r3
 8001b92:	f107 020b 	add.w	r2, r7, #11
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f001 fd3c 	bl	800361c <HAL_I2C_Master_Transmit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f1      	bne.n	8001b8e <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001baa:	bf00      	nop
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	b299      	uxth	r1, r3
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2306      	movs	r3, #6
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f001 fe2b 	bl	8003818 <HAL_I2C_Master_Receive>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f1      	bne.n	8001bac <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8001bc8:	7b3b      	ldrb	r3, [r7, #12]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	7b7b      	ldrb	r3, [r7, #13]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8001bec:	7c3b      	ldrb	r3, [r7, #16]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	7c7b      	ldrb	r3, [r7, #17]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_MspInit+0x60>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_MspInit+0x60>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_ADC_MspInit+0x6c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d121      	bne.n	8001cd0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_ADC_MspInit+0x70>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <HAL_ADC_MspInit+0x74>)
 8001ccc:	f001 fa0c 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012400 	.word	0x40012400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010800 	.word	0x40010800

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_I2C_MspInit+0x74>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d124      	bne.n	8001d4e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <HAL_I2C_MspInit+0x7c>)
 8001d32:	f001 f9d9 	bl	80030e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_I2C_MspInit+0x78>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40005800 	.word	0x40005800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_SPI_MspInit+0x8c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d131      	bne.n	8001de8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	61d3      	str	r3, [r2, #28]
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_SPI_MspInit+0x90>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001db4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HAL_SPI_MspInit+0x94>)
 8001dca:	f001 f98d 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_SPI_MspInit+0x94>)
 8001de4:	f001 f980 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40003800 	.word	0x40003800
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010c00 	.word	0x40010c00

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_TIM_Base_MspInit+0x34>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10b      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_Base_MspInit+0x38>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_TIM_Base_MspInit+0x38>)
 8001e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_TIM_Base_MspInit+0x38>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_MspPostInit+0x5c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d118      	bne.n	8001e8a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_TIM_MspPostInit+0x60>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_TIM_MspPostInit+0x60>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_TIM_MspPostInit+0x60>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e70:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_TIM_MspPostInit+0x64>)
 8001e86:	f001 f92f 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_UART_MspInit+0xa4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d13d      	bne.n	8001f3c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_UART_MspInit+0xa8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	4812      	ldr	r0, [pc, #72]	; (8001f4c <HAL_UART_MspInit+0xac>)
 8001f04:	f001 f8f0 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	480c      	ldr	r0, [pc, #48]	; (8001f4c <HAL_UART_MspInit+0xac>)
 8001f1c:	f001 f8e4 	bl	80030e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_UART_MspInit+0xb0>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_UART_MspInit+0xb0>)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40010000 	.word	0x40010000

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <HardFault_Handler+0x4>

08001f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <MemManage_Handler+0x4>

08001f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <BusFault_Handler+0x4>

08001f72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 fad4 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,10);
 8001fa4:	210a      	movs	r1, #10
 8001fa6:	4837      	ldr	r0, [pc, #220]	; (8002084 <SysTick_Handler+0xe8>)
 8001fa8:	f000 fc94 	bl	80028d4 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8001fac:	4835      	ldr	r0, [pc, #212]	; (8002084 <SysTick_Handler+0xe8>)
 8001fae:	f000 fd8b 	bl	8002ac8 <HAL_ADC_GetValue>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f987 	bl	80002c8 <__aeabi_ui2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4932      	ldr	r1, [pc, #200]	; (8002088 <SysTick_Handler+0xec>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f9da 	bl	8000378 <__aeabi_fmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fb26 	bl	8000618 <__aeabi_f2uiz>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <SysTick_Handler+0xf0>)
 8001fd0:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
   BAttmVhist[batthistindx]=BattmV;
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <SysTick_Handler+0xf4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <SysTick_Handler+0xf0>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	492e      	ldr	r1, [pc, #184]	; (8002094 <SysTick_Handler+0xf8>)
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   batthistindx++;
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <SysTick_Handler+0xf4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <SysTick_Handler+0xf4>)
 8001fe8:	6013      	str	r3, [r2, #0]

   if(batthistindx>=BATTAVERAGETIME)batthistindx=0;
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <SysTick_Handler+0xf4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b31      	cmp	r3, #49	; 0x31
 8001ff0:	d902      	bls.n	8001ff8 <SysTick_Handler+0x5c>
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <SysTick_Handler+0xf4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

   BattmVSUM=0;
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <SysTick_Handler+0xfc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

   for(i=0;i<BATTAVERAGETIME;i++)
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <SysTick_Handler+0x100>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e00e      	b.n	8002024 <SysTick_Handler+0x88>
   {
     BattmVSUM+=BAttmVhist[i];
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <SysTick_Handler+0x100>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <SysTick_Handler+0xf8>)
 800200c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <SysTick_Handler+0xfc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4413      	add	r3, r2
 8002016:	4a20      	ldr	r2, [pc, #128]	; (8002098 <SysTick_Handler+0xfc>)
 8002018:	6013      	str	r3, [r2, #0]
   for(i=0;i<BATTAVERAGETIME;i++)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <SysTick_Handler+0x100>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <SysTick_Handler+0x100>)
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <SysTick_Handler+0x100>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b31      	cmp	r3, #49	; 0x31
 800202a:	d9ec      	bls.n	8002006 <SysTick_Handler+0x6a>
   }

   BattmVAVG=BattmVSUM/(BATTAVERAGETIME);//------------------------------
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <SysTick_Handler+0xfc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <SysTick_Handler+0x104>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <SysTick_Handler+0x108>)
 800203a:	6013      	str	r3, [r2, #0]

   //testing
   if(togg1==1 && ConnectWeakFlag==0)MotorStatus=1;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <SysTick_Handler+0x10c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <SysTick_Handler+0xb8>
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <SysTick_Handler+0x110>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <SysTick_Handler+0xb8>
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <SysTick_Handler+0x114>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e002      	b.n	800205a <SysTick_Handler+0xbe>
   else MotorStatus=0;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <SysTick_Handler+0x114>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

   if(MotorStatus==0)
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <SysTick_Handler+0x114>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d130      	bne.n	80020c4 <SysTick_Handler+0x128>
   {
	   PWM_Mot1=1000;
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <SysTick_Handler+0x118>)
 8002064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002068:	601a      	str	r2, [r3, #0]
	   PWM_Mot2=1000;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <SysTick_Handler+0x11c>)
 800206c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002070:	601a      	str	r2, [r3, #0]
	   PWM_Mot3=1000;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <SysTick_Handler+0x120>)
 8002074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002078:	601a      	str	r2, [r3, #0]
	   PWM_Mot4=1000;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <SysTick_Handler+0x124>)
 800207c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e04b      	b.n	800211c <SysTick_Handler+0x180>
 8002084:	20000254 	.word	0x20000254
 8002088:	4090ac29 	.word	0x4090ac29
 800208c:	20000438 	.word	0x20000438
 8002090:	200000a4 	.word	0x200000a4
 8002094:	20000358 	.word	0x20000358
 8002098:	2000009c 	.word	0x2000009c
 800209c:	2000042c 	.word	0x2000042c
 80020a0:	51eb851f 	.word	0x51eb851f
 80020a4:	200000a0 	.word	0x200000a0
 80020a8:	200002d0 	.word	0x200002d0
 80020ac:	20000434 	.word	0x20000434
 80020b0:	20000098 	.word	0x20000098
 80020b4:	20000430 	.word	0x20000430
 80020b8:	20000350 	.word	0x20000350
 80020bc:	2000034c 	.word	0x2000034c
 80020c0:	20000428 	.word	0x20000428
   }
   else if(MotorStatus==1)
 80020c4:	4b97      	ldr	r3, [pc, #604]	; (8002324 <SysTick_Handler+0x388>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d127      	bne.n	800211c <SysTick_Handler+0x180>
   {
	   PWM_Mot1=1000 + potenc1*10;
 80020cc:	4b96      	ldr	r3, [pc, #600]	; (8002328 <SysTick_Handler+0x38c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80020dc:	4a93      	ldr	r2, [pc, #588]	; (800232c <SysTick_Handler+0x390>)
 80020de:	6013      	str	r3, [r2, #0]
	   PWM_Mot2=1000 + potenc1*10;
 80020e0:	4b91      	ldr	r3, [pc, #580]	; (8002328 <SysTick_Handler+0x38c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80020f0:	4a8f      	ldr	r2, [pc, #572]	; (8002330 <SysTick_Handler+0x394>)
 80020f2:	6013      	str	r3, [r2, #0]
	   PWM_Mot3=1000 + potenc1*10;
 80020f4:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <SysTick_Handler+0x38c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002104:	4a8b      	ldr	r2, [pc, #556]	; (8002334 <SysTick_Handler+0x398>)
 8002106:	6013      	str	r3, [r2, #0]
	   PWM_Mot4=1000 + potenc1*10;
 8002108:	4b87      	ldr	r3, [pc, #540]	; (8002328 <SysTick_Handler+0x38c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002118:	4a87      	ldr	r2, [pc, #540]	; (8002338 <SysTick_Handler+0x39c>)
 800211a:	6013      	str	r3, [r2, #0]

   }

  //SET PWM CHANNELS-----------------------------------------------------
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 800211c:	4b87      	ldr	r3, [pc, #540]	; (800233c <SysTick_Handler+0x3a0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a82      	ldr	r2, [pc, #520]	; (800232c <SysTick_Handler+0x390>)
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <SysTick_Handler+0x3a0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a81      	ldr	r2, [pc, #516]	; (8002330 <SysTick_Handler+0x394>)
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8002130:	4b82      	ldr	r3, [pc, #520]	; (800233c <SysTick_Handler+0x3a0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <SysTick_Handler+0x398>)
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <SysTick_Handler+0x3a0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <SysTick_Handler+0x39c>)
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40




   //NRF24--------------------------------------------------------------------
  if(MainInitDoneFlag)
 8002144:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <SysTick_Handler+0x3a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80c4 	beq.w	80022d6 <SysTick_Handler+0x33a>
  {
	//Ping for RX data when RXflag is SET
	if(RXactiveFlag)
 800214e:	4b7d      	ldr	r3, [pc, #500]	; (8002344 <SysTick_Handler+0x3a8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06f      	beq.n	8002236 <SysTick_Handler+0x29a>
	{
		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8002156:	f7ff fad2 	bl	80016fe <nRF24_GetStatus_RXFIFO>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d06a      	beq.n	8002236 <SysTick_Handler+0x29a>
		{
			watch1++;
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <SysTick_Handler+0x3ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a78      	ldr	r2, [pc, #480]	; (8002348 <SysTick_Handler+0x3ac>)
 8002168:	6013      	str	r3, [r2, #0]

			// Get a payload from the transceiver
			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 800216a:	4978      	ldr	r1, [pc, #480]	; (800234c <SysTick_Handler+0x3b0>)
 800216c:	4878      	ldr	r0, [pc, #480]	; (8002350 <SysTick_Handler+0x3b4>)
 800216e:	f7ff fb07 	bl	8001780 <nRF24_ReadPayload>

			// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 8002172:	f7ff fadf 	bl	8001734 <nRF24_ClearIRQFlags>

			Ljoyupdown=nRF24_payloadRX[0];
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <SysTick_Handler+0x3b4>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <SysTick_Handler+0x3b8>)
 800217e:	601a      	str	r2, [r3, #0]
			Ljoyleftright=nRF24_payloadRX[1];
 8002180:	4b73      	ldr	r3, [pc, #460]	; (8002350 <SysTick_Handler+0x3b4>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	461a      	mov	r2, r3
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <SysTick_Handler+0x3bc>)
 8002188:	601a      	str	r2, [r3, #0]
			Djoyupdown=nRF24_payloadRX[2];
 800218a:	4b71      	ldr	r3, [pc, #452]	; (8002350 <SysTick_Handler+0x3b4>)
 800218c:	789b      	ldrb	r3, [r3, #2]
 800218e:	461a      	mov	r2, r3
 8002190:	4b72      	ldr	r3, [pc, #456]	; (800235c <SysTick_Handler+0x3c0>)
 8002192:	601a      	str	r2, [r3, #0]
			Djoyleftright=nRF24_payloadRX[3];
 8002194:	4b6e      	ldr	r3, [pc, #440]	; (8002350 <SysTick_Handler+0x3b4>)
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	461a      	mov	r2, r3
 800219a:	4b71      	ldr	r3, [pc, #452]	; (8002360 <SysTick_Handler+0x3c4>)
 800219c:	601a      	str	r2, [r3, #0]
			potenc1=nRF24_payloadRX[4];
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <SysTick_Handler+0x3b4>)
 80021a0:	791b      	ldrb	r3, [r3, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b60      	ldr	r3, [pc, #384]	; (8002328 <SysTick_Handler+0x38c>)
 80021a6:	601a      	str	r2, [r3, #0]
			potenc2=nRF24_payloadRX[5];
 80021a8:	4b69      	ldr	r3, [pc, #420]	; (8002350 <SysTick_Handler+0x3b4>)
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <SysTick_Handler+0x3c8>)
 80021b0:	601a      	str	r2, [r3, #0]

			togg1=nRF24_payloadRX[6]>>7;
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <SysTick_Handler+0x3b4>)
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	09db      	lsrs	r3, r3, #7
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <SysTick_Handler+0x3cc>)
 80021be:	601a      	str	r2, [r3, #0]
			togg2=(nRF24_payloadRX[6] & 64 )>>6;
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <SysTick_Handler+0x3b4>)
 80021c2:	799b      	ldrb	r3, [r3, #6]
 80021c4:	119b      	asrs	r3, r3, #6
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	4a68      	ldr	r2, [pc, #416]	; (800236c <SysTick_Handler+0x3d0>)
 80021cc:	6013      	str	r3, [r2, #0]
			butt1=(nRF24_payloadRX[6] & 32 )>>5;
 80021ce:	4b60      	ldr	r3, [pc, #384]	; (8002350 <SysTick_Handler+0x3b4>)
 80021d0:	799b      	ldrb	r3, [r3, #6]
 80021d2:	115b      	asrs	r3, r3, #5
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	4a65      	ldr	r2, [pc, #404]	; (8002370 <SysTick_Handler+0x3d4>)
 80021da:	6013      	str	r3, [r2, #0]
			butt2=(nRF24_payloadRX[6] & 16 )>>4;
 80021dc:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <SysTick_Handler+0x3b4>)
 80021de:	799b      	ldrb	r3, [r3, #6]
 80021e0:	111b      	asrs	r3, r3, #4
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	4a63      	ldr	r2, [pc, #396]	; (8002374 <SysTick_Handler+0x3d8>)
 80021e8:	6013      	str	r3, [r2, #0]
			butt3=(nRF24_payloadRX[6] & 8 )>>3;
 80021ea:	4b59      	ldr	r3, [pc, #356]	; (8002350 <SysTick_Handler+0x3b4>)
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	10db      	asrs	r3, r3, #3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	4a60      	ldr	r2, [pc, #384]	; (8002378 <SysTick_Handler+0x3dc>)
 80021f6:	6013      	str	r3, [r2, #0]
			butt4=(nRF24_payloadRX[6] & 4 )>>2;
 80021f8:	4b55      	ldr	r3, [pc, #340]	; (8002350 <SysTick_Handler+0x3b4>)
 80021fa:	799b      	ldrb	r3, [r3, #6]
 80021fc:	109b      	asrs	r3, r3, #2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	4a5e      	ldr	r2, [pc, #376]	; (800237c <SysTick_Handler+0x3e0>)
 8002204:	6013      	str	r3, [r2, #0]
			buttL=(nRF24_payloadRX[6] & 2 )>>1;
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <SysTick_Handler+0x3b4>)
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	105b      	asrs	r3, r3, #1
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <SysTick_Handler+0x3e4>)
 8002212:	6013      	str	r3, [r2, #0]
			buttD=(nRF24_payloadRX[6] & 1 );
 8002214:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <SysTick_Handler+0x3b4>)
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	4a59      	ldr	r2, [pc, #356]	; (8002384 <SysTick_Handler+0x3e8>)
 800221e:	6013      	str	r3, [r2, #0]

			SendBackFlag=1;
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <SysTick_Handler+0x3ec>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
			RXactiveFlag=0;
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <SysTick_Handler+0x3a8>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

			MSGcount++;
 800222c:	4b57      	ldr	r3, [pc, #348]	; (800238c <SysTick_Handler+0x3f0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a56      	ldr	r2, [pc, #344]	; (800238c <SysTick_Handler+0x3f0>)
 8002234:	6013      	str	r3, [r2, #0]
		}
	}

    if(SendBackFlag)//Config between RX-TX
 8002236:	4b54      	ldr	r3, [pc, #336]	; (8002388 <SysTick_Handler+0x3ec>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d04b      	beq.n	80022d6 <SysTick_Handler+0x33a>
    {
    	BackTimer++;
 800223e:	4b54      	ldr	r3, [pc, #336]	; (8002390 <SysTick_Handler+0x3f4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <SysTick_Handler+0x3f4>)
 8002246:	6013      	str	r3, [r2, #0]

    	switch(BackTimer)
 8002248:	4b51      	ldr	r3, [pc, #324]	; (8002390 <SysTick_Handler+0x3f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	2b05      	cmp	r3, #5
 8002250:	d841      	bhi.n	80022d6 <SysTick_Handler+0x33a>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <SysTick_Handler+0x2bc>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	08002271 	.word	0x08002271
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022d7 	.word	0x080022d7
 8002264:	08002285 	.word	0x08002285
 8002268:	080022af 	.word	0x080022af
 800226c:	080022c3 	.word	0x080022c3
    	{
	 	 case 1:
	 	 	 	 {
	 	 	 		//SET TX MODE
	 	 	 		nRF24_CE_L();//END RX
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002276:	4847      	ldr	r0, [pc, #284]	; (8002394 <SysTick_Handler+0x3f8>)
 8002278:	f001 f890 	bl	800339c <HAL_GPIO_WritePin>
					nRF24_SetOperationalMode(nRF24_MODE_TX);
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff f8ca 	bl	8001416 <nRF24_SetOperationalMode>
	 	 	 	 }break;
 8002282:	e028      	b.n	80022d6 <SysTick_Handler+0x33a>

	 	 case 4:
	 	 	 	 {
	 	 			//SEND DATA TO RC remote
	 	 			nRF24_payloadTX[0] = (uint8_t)(BattmVAVG & 0xFF);
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <SysTick_Handler+0x3fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b44      	ldr	r3, [pc, #272]	; (800239c <SysTick_Handler+0x400>)
 800228c:	701a      	strb	r2, [r3, #0]
	 	 			nRF24_payloadTX[1] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <SysTick_Handler+0x3fc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <SysTick_Handler+0x400>)
 8002298:	705a      	strb	r2, [r3, #1]

	 	 			// Transmit a packet
	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 2);
 800229a:	2102      	movs	r1, #2
 800229c:	483f      	ldr	r0, [pc, #252]	; (800239c <SysTick_Handler+0x400>)
 800229e:	f7fe fee7 	bl	8001070 <nRF24_TransmitPacket>
	 	 			watch2++;
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <SysTick_Handler+0x404>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a3d      	ldr	r2, [pc, #244]	; (80023a0 <SysTick_Handler+0x404>)
 80022aa:	6013      	str	r3, [r2, #0]
	 	 	 	 }break;
 80022ac:	e013      	b.n	80022d6 <SysTick_Handler+0x33a>

    	case 5:
    			{
	 	 	 		//SET RX MODE
	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff f8b1 	bl	8001416 <nRF24_SetOperationalMode>
	 				nRF24_CE_H(); //Start RX)
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ba:	4836      	ldr	r0, [pc, #216]	; (8002394 <SysTick_Handler+0x3f8>)
 80022bc:	f001 f86e 	bl	800339c <HAL_GPIO_WritePin>

	 	 	 	 }break;
 80022c0:	e009      	b.n	80022d6 <SysTick_Handler+0x33a>

    	case 6:
				{
    				RXactiveFlag=1; //start pinging for data
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <SysTick_Handler+0x3a8>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    				SendBackFlag=0; //Exit routine
 80022c8:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <SysTick_Handler+0x3ec>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
    				BackTimer=0;	//reset counter
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <SysTick_Handler+0x3f4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

				}break;
 80022d4:	bf00      	nop
    	}
    }//End Send Back config routine
  }//End NRF24 routine
  //-----------------------------------------------------
  LoopCounter++;
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <SysTick_Handler+0x408>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <SysTick_Handler+0x408>)
 80022de:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <SysTick_Handler+0x408>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e8:	d119      	bne.n	800231e <SysTick_Handler+0x382>
  {
  		MSGprerSecond=MSGcount;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <SysTick_Handler+0x3f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <SysTick_Handler+0x40c>)
 80022f0:	6013      	str	r3, [r2, #0]

  		if(MSGcount<MINMSGPERSEC)
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <SysTick_Handler+0x3f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d808      	bhi.n	800230c <SysTick_Handler+0x370>
  		{
  			MSGLowCount++;
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <SysTick_Handler+0x410>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <SysTick_Handler+0x410>)
 8002302:	6013      	str	r3, [r2, #0]
  			ConnectWeakFlag=1;
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <SysTick_Handler+0x414>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e002      	b.n	8002312 <SysTick_Handler+0x376>
  		}
  		 else  ConnectWeakFlag=0;
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <SysTick_Handler+0x414>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

  		MSGcount=0;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <SysTick_Handler+0x3f0>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
  		LoopCounter=0;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <SysTick_Handler+0x408>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
  }



  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000098 	.word	0x20000098
 8002328:	20000328 	.word	0x20000328
 800232c:	20000430 	.word	0x20000430
 8002330:	20000350 	.word	0x20000350
 8002334:	2000034c 	.word	0x2000034c
 8002338:	20000428 	.word	0x20000428
 800233c:	200002d4 	.word	0x200002d4
 8002340:	20000094 	.word	0x20000094
 8002344:	20000000 	.word	0x20000000
 8002348:	200001c4 	.word	0x200001c4
 800234c:	20000090 	.word	0x20000090
 8002350:	20000174 	.word	0x20000174
 8002354:	20000314 	.word	0x20000314
 8002358:	20000284 	.word	0x20000284
 800235c:	20000334 	.word	0x20000334
 8002360:	200000bc 	.word	0x200000bc
 8002364:	20000338 	.word	0x20000338
 8002368:	200002d0 	.word	0x200002d0
 800236c:	20000340 	.word	0x20000340
 8002370:	20000320 	.word	0x20000320
 8002374:	2000033c 	.word	0x2000033c
 8002378:	200002cc 	.word	0x200002cc
 800237c:	200000c0 	.word	0x200000c0
 8002380:	2000011c 	.word	0x2000011c
 8002384:	20000324 	.word	0x20000324
 8002388:	200000a8 	.word	0x200000a8
 800238c:	20000354 	.word	0x20000354
 8002390:	200000ac 	.word	0x200000ac
 8002394:	40010c00 	.word	0x40010c00
 8002398:	200000a0 	.word	0x200000a0
 800239c:	20000234 	.word	0x20000234
 80023a0:	200001b4 	.word	0x200001b4
 80023a4:	20000348 	.word	0x20000348
 80023a8:	20000424 	.word	0x20000424
 80023ac:	20000420 	.word	0x20000420
 80023b0:	20000434 	.word	0x20000434

080023b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x50>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x16>
		heap_end = &end;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <_sbrk+0x50>)
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <_sbrk+0x54>)
 80023c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <_sbrk+0x50>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <_sbrk+0x50>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	466a      	mov	r2, sp
 80023da:	4293      	cmp	r3, r2
 80023dc:	d907      	bls.n	80023ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023de:	f003 fdb5 	bl	8005f4c <__errno>
 80023e2:	4602      	mov	r2, r0
 80023e4:	230c      	movs	r3, #12
 80023e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ec:	e006      	b.n	80023fc <_sbrk+0x48>
	}

	heap_end += incr;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_sbrk+0x50>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a03      	ldr	r2, [pc, #12]	; (8002404 <_sbrk+0x50>)
 80023f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200000b0 	.word	0x200000b0
 8002408:	20000448 	.word	0x20000448

0800240c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <SystemInit+0x5c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <SystemInit+0x5c>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <SystemInit+0x5c>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4911      	ldr	r1, [pc, #68]	; (8002468 <SystemInit+0x5c>)
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <SystemInit+0x60>)
 8002424:	4013      	ands	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <SystemInit+0x5c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <SystemInit+0x5c>)
 800242e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <SystemInit+0x5c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SystemInit+0x5c>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <SystemInit+0x5c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <SystemInit+0x5c>)
 800244a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800244e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SystemInit+0x5c>)
 8002452:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002456:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SystemInit+0x64>)
 800245a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000
 800246c:	f8ff0000 	.word	0xf8ff0000
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002474:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002476:	e003      	b.n	8002480 <LoopCopyDataInit>

08002478 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800247a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800247c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800247e:	3104      	adds	r1, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002480:	480a      	ldr	r0, [pc, #40]	; (80024ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002484:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002486:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002488:	d3f6      	bcc.n	8002478 <CopyDataInit>
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800248c:	e002      	b.n	8002494 <LoopFillZerobss>

0800248e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002490:	f842 3b04 	str.w	r3, [r2], #4

08002494 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002496:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002498:	d3f9      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800249a:	f7ff ffb7 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f003 fd5b 	bl	8005f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a2:	f7fe f90d 	bl	80006c0 <main>
  bx lr
 80024a6:	4770      	bx	lr
  ldr r3, =_sidata
 80024a8:	080069cc 	.word	0x080069cc
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024b0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80024b4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80024b8:	20000444 	.word	0x20000444

080024bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC1_2_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x28>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x28>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 fdd5 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7ff fb94 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fddf 	bl	80030ce <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f000 fdb5 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000004 	.word	0x20000004
 8002544:	2000000c 	.word	0x2000000c
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x1c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_IncTick+0x20>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_IncTick+0x20>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	2000000c 	.word	0x2000000c
 800256c:	2000043c 	.word	0x2000043c

08002570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <HAL_GetTick+0x10>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	2000043c 	.word	0x2000043c

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff fff0 	bl	8002570 <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_Delay+0x40>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffe0 	bl	8002570 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0be      	b.n	8002768 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fb30 	bl	8001c6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fbb1 	bl	8002d74 <ADC_ConversionStop_Disable>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8099 	bne.w	8002756 <HAL_ADC_Init+0x18e>
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8095 	bne.w	8002756 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002634:	f023 0302 	bic.w	r3, r3, #2
 8002638:	f043 0202 	orr.w	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002648:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7b1b      	ldrb	r3, [r3, #12]
 800264e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002650:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4313      	orrs	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002660:	d003      	beq.n	800266a <HAL_ADC_Init+0xa2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_ADC_Init+0xa8>
 800266a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266e:	e000      	b.n	8002672 <HAL_ADC_Init+0xaa>
 8002670:	2300      	movs	r3, #0
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7d1b      	ldrb	r3, [r3, #20]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d119      	bne.n	80026b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7b1b      	ldrb	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	3b01      	subs	r3, #1
 800268e:	035a      	lsls	r2, r3, #13
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e00b      	b.n	80026b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_ADC_Init+0x1a8>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e4:	d003      	beq.n	80026ee <HAL_ADC_Init+0x126>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d104      	bne.n	80026f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	430a      	orrs	r2, r1
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_ADC_Init+0x1ac>)
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	d10b      	bne.n	8002734 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002732:	e018      	b.n	8002766 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	f023 0312 	bic.w	r3, r3, #18
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002754:	e007      	b.n	8002766 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	ffe1f7fd 	.word	0xffe1f7fd
 8002774:	ff1f0efe 	.word	0xff1f0efe

08002778 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Start+0x1a>
 800278e:	2302      	movs	r3, #2
 8002790:	e098      	b.n	80028c4 <HAL_ADC_Start+0x14c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa98 	bl	8002cd0 <ADC_Enable>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8087 	bne.w	80028ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_ADC_Start+0x154>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_Start+0x5e>
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_ADC_Start+0x158>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d115      	bne.n	8002802 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d026      	beq.n	800283e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002800:	e01d      	b.n	800283e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_ADC_Start+0x158>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_ADC_Start+0xaa>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_ADC_Start+0x154>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10d      	bne.n	800283e <HAL_ADC_Start+0xc6>
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_ADC_Start+0x158>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f023 0206 	bic.w	r2, r3, #6
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
 8002856:	e002      	b.n	800285e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f06f 0202 	mvn.w	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800287a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800287e:	d113      	bne.n	80028a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002884:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_ADC_Start+0x154>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d105      	bne.n	8002896 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_ADC_Start+0x158>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e00c      	b.n	80028c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40012800 	.word	0x40012800
 80028d0:	40012400 	.word	0x40012400

080028d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fe41 	bl	8002570 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0c8      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12a      	bne.n	800297a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d123      	bne.n	800297a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002932:	e01a      	b.n	800296a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293a:	d016      	beq.n	800296a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_ADC_PollForConversion+0x7e>
 8002942:	f7ff fe15 	bl	8002570 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d20b      	bcs.n	800296a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e09e      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0dd      	beq.n	8002934 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002978:	e06c      	b.n	8002a54 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_ADC_PollForConversion+0x1dc>)
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	2002      	movs	r0, #2
 8002980:	f002 fa74 	bl	8004e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002984:	4603      	mov	r3, r0
 8002986:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6919      	ldr	r1, [r3, #16]
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_ADC_PollForConversion+0x1e0>)
 8002992:	400b      	ands	r3, r1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d118      	bne.n	80029ca <HAL_ADC_PollForConversion+0xf6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_ADC_PollForConversion+0x1e4>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d111      	bne.n	80029ca <HAL_ADC_PollForConversion+0xf6>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <HAL_ADC_PollForConversion+0x1e8>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <HAL_ADC_PollForConversion+0xf2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68d9      	ldr	r1, [r3, #12]
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ec>)
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_PollForConversion+0xf2>
 80029c2:	2314      	movs	r3, #20
 80029c4:	e020      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 80029c6:	2329      	movs	r3, #41	; 0x29
 80029c8:	e01e      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_ADC_PollForConversion+0x1e8>)
 80029d2:	400b      	ands	r3, r1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x112>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_ADC_PollForConversion+0x1ec>)
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_ADC_PollForConversion+0x12e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_ADC_PollForConversion+0x1f0>)
 80029ee:	400b      	ands	r3, r1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x132>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_ADC_PollForConversion+0x1f0>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_PollForConversion+0x132>
 8002a02:	2354      	movs	r3, #84	; 0x54
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_PollForConversion+0x134>
 8002a06:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a0e:	e01d      	b.n	8002a4c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a16:	d016      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_ADC_PollForConversion+0x15a>
 8002a1e:	f7ff fda7 	bl	8002570 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20b      	bcs.n	8002a46 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e030      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8dd      	bhi.n	8002a10 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0212 	mvn.w	r2, #18
 8002a5c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a78:	d115      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d111      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	24924924 	.word	0x24924924
 8002ab8:	00924924 	.word	0x00924924
 8002abc:	12492492 	.word	0x12492492
 8002ac0:	00492492 	.word	0x00492492
 8002ac4:	00249249 	.word	0x00249249

08002ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x20>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0dc      	b.n	8002cba <HAL_ADC_ConfigChannel+0x1da>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d81c      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b05      	subs	r3, #5
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4019      	ands	r1, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b05      	subs	r3, #5
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
 8002b48:	e03c      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d81c      	bhi.n	8002b8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b23      	subs	r3, #35	; 0x23
 8002b64:	221f      	movs	r2, #31
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	4019      	ands	r1, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b23      	subs	r3, #35	; 0x23
 8002b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
 8002b8a:	e01b      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b41      	subs	r3, #65	; 0x41
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	4019      	ands	r1, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b41      	subs	r3, #65	; 0x41
 8002bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d91c      	bls.n	8002c06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6898      	ldr	r0, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b1e      	subs	r3, #30
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	e019      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	4019      	ands	r1, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6898      	ldr	r0, [r3, #8]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d003      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c46:	2b11      	cmp	r3, #17
 8002c48:	d132      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d125      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d126      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c70:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d11a      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <HAL_ADC_ConfigChannel+0x1ec>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9a      	lsrs	r2, r3, #18
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x1b2>
 8002c9e:	e007      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d039      	beq.n	8002d62 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <ADC_Enable+0x9c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <ADC_Enable+0xa0>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	0c9b      	lsrs	r3, r3, #18
 8002d0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d0c:	e002      	b.n	8002d14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f9      	bne.n	8002d0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d1a:	f7ff fc29 	bl	8002570 <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d20:	e018      	b.n	8002d54 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d22:	f7ff fc25 	bl	8002570 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d911      	bls.n	8002d54 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d1df      	bne.n	8002d22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000004 	.word	0x20000004
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d127      	bne.n	8002dde <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7ff fbe7 	bl	8002570 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002da4:	e014      	b.n	8002dd0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da6:	f7ff fbe3 	bl	8002570 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d90d      	bls.n	8002dd0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d0e3      	beq.n	8002da6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e086      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0x12c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffb0 	bl	8002d74 <ADC_ConversionStop_Disable>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d175      	bne.n	8002f0a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e32:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <HAL_ADCEx_Calibration_Start+0x134>)
 8002e34:	681c      	ldr	r4, [r3, #0]
 8002e36:	2002      	movs	r0, #2
 8002e38:	f002 f818 	bl	8004e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002e42:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002e44:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002e46:	e002      	b.n	8002e4e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff3b 	bl	8002cd0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0208 	orr.w	r2, r2, #8
 8002e68:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e6a:	f7ff fb81 	bl	8002570 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e70:	e014      	b.n	8002e9c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e72:	f7ff fb7d 	bl	8002570 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b0a      	cmp	r3, #10
 8002e7e:	d90d      	bls.n	8002e9c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f023 0312 	bic.w	r3, r3, #18
 8002e88:	f043 0210 	orr.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e03b      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0204 	orr.w	r2, r2, #4
 8002eb8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002eba:	f7ff fb59 	bl	8002570 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ec0:	e014      	b.n	8002eec <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ec2:	f7ff fb55 	bl	8002570 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b0a      	cmp	r3, #10
 8002ece:	d90d      	bls.n	8002eec <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f023 0312 	bic.w	r3, r3, #18
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e013      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e3      	bne.n	8002ec2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	20000004 	.word	0x20000004

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003060:	f7ff ff90 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff49 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff5e 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff90 	bl	8002fd8 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5f 	bl	8002f84 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffb0 	bl	800303c <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e127      	b.n	800334c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030fc:	2201      	movs	r2, #1
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8116 	bne.w	8003346 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b12      	cmp	r3, #18
 8003120:	d034      	beq.n	800318c <HAL_GPIO_Init+0xa4>
 8003122:	2b12      	cmp	r3, #18
 8003124:	d80d      	bhi.n	8003142 <HAL_GPIO_Init+0x5a>
 8003126:	2b02      	cmp	r3, #2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_Init+0x9a>
 800312a:	2b02      	cmp	r3, #2
 800312c:	d804      	bhi.n	8003138 <HAL_GPIO_Init+0x50>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d031      	beq.n	8003196 <HAL_GPIO_Init+0xae>
 8003132:	2b01      	cmp	r3, #1
 8003134:	d01c      	beq.n	8003170 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003136:	e048      	b.n	80031ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003138:	2b03      	cmp	r3, #3
 800313a:	d043      	beq.n	80031c4 <HAL_GPIO_Init+0xdc>
 800313c:	2b11      	cmp	r3, #17
 800313e:	d01b      	beq.n	8003178 <HAL_GPIO_Init+0x90>
          break;
 8003140:	e043      	b.n	80031ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003142:	4a89      	ldr	r2, [pc, #548]	; (8003368 <HAL_GPIO_Init+0x280>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d026      	beq.n	8003196 <HAL_GPIO_Init+0xae>
 8003148:	4a87      	ldr	r2, [pc, #540]	; (8003368 <HAL_GPIO_Init+0x280>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d806      	bhi.n	800315c <HAL_GPIO_Init+0x74>
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <HAL_GPIO_Init+0x284>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d020      	beq.n	8003196 <HAL_GPIO_Init+0xae>
 8003154:	4a86      	ldr	r2, [pc, #536]	; (8003370 <HAL_GPIO_Init+0x288>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01d      	beq.n	8003196 <HAL_GPIO_Init+0xae>
          break;
 800315a:	e036      	b.n	80031ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800315c:	4a85      	ldr	r2, [pc, #532]	; (8003374 <HAL_GPIO_Init+0x28c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0xae>
 8003162:	4a85      	ldr	r2, [pc, #532]	; (8003378 <HAL_GPIO_Init+0x290>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d016      	beq.n	8003196 <HAL_GPIO_Init+0xae>
 8003168:	4a84      	ldr	r2, [pc, #528]	; (800337c <HAL_GPIO_Init+0x294>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0xae>
          break;
 800316e:	e02c      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e028      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	3304      	adds	r3, #4
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e023      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	3308      	adds	r3, #8
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e01e      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	330c      	adds	r3, #12
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e019      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800319e:	2304      	movs	r3, #4
 80031a0:	623b      	str	r3, [r7, #32]
          break;
 80031a2:	e012      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	611a      	str	r2, [r3, #16]
          break;
 80031b6:	e008      	b.n	80031ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b8:	2308      	movs	r3, #8
 80031ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	615a      	str	r2, [r3, #20]
          break;
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2bff      	cmp	r3, #255	; 0xff
 80031ce:	d801      	bhi.n	80031d4 <HAL_GPIO_Init+0xec>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	e001      	b.n	80031d8 <HAL_GPIO_Init+0xf0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2bff      	cmp	r3, #255	; 0xff
 80031de:	d802      	bhi.n	80031e6 <HAL_GPIO_Init+0xfe>
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x104>
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	3b08      	subs	r3, #8
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	210f      	movs	r1, #15
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	401a      	ands	r2, r3
 80031fe:	6a39      	ldr	r1, [r7, #32]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	431a      	orrs	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8096 	beq.w	8003346 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800321a:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_GPIO_Init+0x298>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_GPIO_Init+0x298>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6193      	str	r3, [r2, #24]
 8003226:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x298>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003232:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_GPIO_Init+0x29c>)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_GPIO_Init+0x2a0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x19e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4a      	ldr	r2, [pc, #296]	; (800338c <HAL_GPIO_Init+0x2a4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x19a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a49      	ldr	r2, [pc, #292]	; (8003390 <HAL_GPIO_Init+0x2a8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x196>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a48      	ldr	r2, [pc, #288]	; (8003394 <HAL_GPIO_Init+0x2ac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x192>
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x1a0>
 800327a:	2304      	movs	r3, #4
 800327c:	e004      	b.n	8003288 <HAL_GPIO_Init+0x1a0>
 800327e:	2302      	movs	r3, #2
 8003280:	e002      	b.n	8003288 <HAL_GPIO_Init+0x1a0>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_GPIO_Init+0x1a0>
 8003286:	2300      	movs	r3, #0
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	f002 0203 	and.w	r2, r2, #3
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	4093      	lsls	r3, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003298:	493a      	ldr	r1, [pc, #232]	; (8003384 <HAL_GPIO_Init+0x29c>)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	3302      	adds	r3, #2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4938      	ldr	r1, [pc, #224]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
 80032be:	e006      	b.n	80032ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4933      	ldr	r1, [pc, #204]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	492e      	ldr	r1, [pc, #184]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
 80032e6:	e006      	b.n	80032f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4929      	ldr	r1, [pc, #164]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d006      	beq.n	8003310 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003302:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	4924      	ldr	r1, [pc, #144]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	e006      	b.n	800331e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	43db      	mvns	r3, r3
 8003318:	491f      	ldr	r1, [pc, #124]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 800331a:	4013      	ands	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	491a      	ldr	r1, [pc, #104]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	60cb      	str	r3, [r1, #12]
 8003336:	e006      	b.n	8003346 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	43db      	mvns	r3, r3
 8003340:	4915      	ldr	r1, [pc, #84]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	3301      	adds	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f47f aed0 	bne.w	80030fc <HAL_GPIO_Init+0x14>
  }
}
 800335c:	bf00      	nop
 800335e:	372c      	adds	r7, #44	; 0x2c
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	10210000 	.word	0x10210000
 800336c:	10110000 	.word	0x10110000
 8003370:	10120000 	.word	0x10120000
 8003374:	10310000 	.word	0x10310000
 8003378:	10320000 	.word	0x10320000
 800337c:	10220000 	.word	0x10220000
 8003380:	40021000 	.word	0x40021000
 8003384:	40010000 	.word	0x40010000
 8003388:	40010800 	.word	0x40010800
 800338c:	40010c00 	.word	0x40010c00
 8003390:	40011000 	.word	0x40011000
 8003394:	40011400 	.word	0x40011400
 8003398:	40010400 	.word	0x40010400

0800339c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
 80033a8:	4613      	mov	r3, r2
 80033aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ac:	787b      	ldrb	r3, [r7, #1]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033b8:	e003      	b.n	80033c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	041a      	lsls	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e10f      	b.n	80035fe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fc76 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003410:	f001 fc30 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a7b      	ldr	r2, [pc, #492]	; (8003608 <HAL_I2C_Init+0x23c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d807      	bhi.n	8003430 <HAL_I2C_Init+0x64>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a7a      	ldr	r2, [pc, #488]	; (800360c <HAL_I2C_Init+0x240>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e006      	b.n	800343e <HAL_I2C_Init+0x72>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_I2C_Init+0x244>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0db      	b.n	80035fe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a72      	ldr	r2, [pc, #456]	; (8003614 <HAL_I2C_Init+0x248>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a64      	ldr	r2, [pc, #400]	; (8003608 <HAL_I2C_Init+0x23c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d802      	bhi.n	8003480 <HAL_I2C_Init+0xb4>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	e009      	b.n	8003494 <HAL_I2C_Init+0xc8>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_I2C_Init+0x24c>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	3301      	adds	r3, #1
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4956      	ldr	r1, [pc, #344]	; (8003608 <HAL_I2C_Init+0x23c>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d80d      	bhi.n	80034d0 <HAL_I2C_Init+0x104>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e59      	subs	r1, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	bf38      	it	cc
 80034cc:	2304      	movcc	r3, #4
 80034ce:	e04f      	b.n	8003570 <HAL_I2C_Init+0x1a4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d111      	bne.n	80034fc <HAL_I2C_Init+0x130>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <HAL_I2C_Init+0x156>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x15e>
 8003526:	2301      	movs	r3, #1
 8003528:	e022      	b.n	8003570 <HAL_I2C_Init+0x1a4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <HAL_I2C_Init+0x184>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e58      	subs	r0, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	fbb0 f3f3 	udiv	r3, r0, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Init+0x1a4>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800359e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6911      	ldr	r1, [r2, #16]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	000186a0 	.word	0x000186a0
 800360c:	001e847f 	.word	0x001e847f
 8003610:	003d08ff 	.word	0x003d08ff
 8003614:	431bde83 	.word	0x431bde83
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
 800362c:	4613      	mov	r3, r2
 800362e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7fe ff9e 	bl	8002570 <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 80e0 	bne.w	8003804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	4970      	ldr	r1, [pc, #448]	; (8003810 <HAL_I2C_Master_Transmit+0x1f4>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fd5e 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	e0d3      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2C_Master_Transmit+0x50>
 8003668:	2302      	movs	r3, #2
 800366a:	e0cc      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d007      	beq.n	8003692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a50      	ldr	r2, [pc, #320]	; (8003814 <HAL_I2C_Master_Transmit+0x1f8>)
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fbec 	bl	8003eb8 <I2C_MasterRequestWrite>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e08d      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003700:	e066      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fdd8 	bl	80042bc <I2C_WaitOnTXEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b04      	cmp	r3, #4
 8003718:	d107      	bne.n	800372a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06b      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d11b      	bne.n	80037a4 <HAL_I2C_Master_Transmit+0x188>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d017      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	6a39      	ldr	r1, [r7, #32]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fdc8 	bl	800433e <I2C_WaitOnBTFFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d107      	bne.n	80037cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e01a      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d194      	bne.n	8003702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	00100002 	.word	0x00100002
 8003814:	ffff0000 	.word	0xffff0000

08003818 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	817b      	strh	r3, [r7, #10]
 8003828:	4613      	mov	r3, r2
 800382a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7fe fea0 	bl	8002570 <HAL_GetTick>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	f040 8213 	bne.w	8003c66 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	497e      	ldr	r1, [pc, #504]	; (8003a44 <HAL_I2C_Master_Receive+0x22c>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fc60 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e206      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2C_Master_Receive+0x50>
 8003864:	2302      	movs	r3, #2
 8003866:	e1ff      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2222      	movs	r2, #34	; 0x22
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_I2C_Master_Receive+0x230>)
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb64 	bl	8003fa4 <I2C_MasterRequestRead>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c0      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e194      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11d      	bne.n	800395a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800392e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003956:	b662      	cpsie	i
 8003958:	e172      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b02      	cmp	r3, #2
 8003960:	d11d      	bne.n	800399e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003972:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800399a:	b662      	cpsie	i
 800399c:	e150      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039c4:	e13c      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	f200 80f5 	bhi.w	8003bba <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d123      	bne.n	8003a20 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fcef 	bl	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e13d      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a1e:	e10f      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d150      	bne.n	8003aca <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <HAL_I2C_Master_Receive+0x234>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb6c 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e112      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac8:	e0ba      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4967      	ldr	r1, [pc, #412]	; (8003c70 <HAL_I2C_Master_Receive+0x458>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb1b 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0c1      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	494f      	ldr	r1, [pc, #316]	; (8003c70 <HAL_I2C_Master_Receive+0x458>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 faec 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e092      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b50:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b84:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb8:	e042      	b.n	8003c40 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fbfe 	bl	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e04c      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d118      	bne.n	8003c40 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f aebe 	bne.w	80039c6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	00010004 	.word	0x00010004

08003c74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7fe fc74 	bl	8002570 <HAL_GetTick>
 8003c88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	f040 8105 	bne.w	8003ea6 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4982      	ldr	r1, [pc, #520]	; (8003eb0 <HAL_I2C_IsDeviceReady+0x23c>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa32 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0f8      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2C_IsDeviceReady+0x50>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0f1      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	; (8003eb4 <HAL_I2C_IsDeviceReady+0x240>)
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f9f0 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0b6      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fc11 	bl	8002570 <HAL_GetTick>
 8003d4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d7e:	e025      	b.n	8003dcc <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe fbf6 	bl	8002570 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <HAL_I2C_IsDeviceReady+0x122>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22a0      	movs	r2, #160	; 0xa0
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2ba0      	cmp	r3, #160	; 0xa0
 8003dd6:	d005      	beq.n	8003de4 <HAL_I2C_IsDeviceReady+0x170>
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_I2C_IsDeviceReady+0x170>
 8003dde:	7dbb      	ldrb	r3, [r7, #22]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0cd      	beq.n	8003d80 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d129      	bne.n	8003e4e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2319      	movs	r3, #25
 8003e26:	2201      	movs	r2, #1
 8003e28:	4921      	ldr	r1, [pc, #132]	; (8003eb0 <HAL_I2C_IsDeviceReady+0x23c>)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f970 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e036      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e02c      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	490f      	ldr	r1, [pc, #60]	; (8003eb0 <HAL_I2C_IsDeviceReady+0x23c>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f94c 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e012      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	f4ff af3e 	bcc.w	8003d0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	00100002 	.word	0x00100002
 8003eb4:	ffff0000 	.word	0xffff0000

08003eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d006      	beq.n	8003ee2 <I2C_MasterRequestWrite+0x2a>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d003      	beq.n	8003ee2 <I2C_MasterRequestWrite+0x2a>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee0:	d108      	bne.n	8003ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e00b      	b.n	8003f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b12      	cmp	r3, #18
 8003efa:	d107      	bne.n	8003f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f8f9 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e035      	b.n	8003f94 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e01b      	b.n	8003f7c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	11db      	asrs	r3, r3, #7
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 030f 	orn	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <I2C_MasterRequestWrite+0xe4>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f92b 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e010      	b.n	8003f94 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <I2C_MasterRequestWrite+0xe8>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f91b 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010008 	.word	0x00010008
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d006      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e00b      	b.n	8004008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	2b11      	cmp	r3, #17
 8003ff6:	d107      	bne.n	8004008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f87b 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e06d      	b.n	8004100 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402c:	d108      	bne.n	8004040 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e053      	b.n	80040e8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004040:	897b      	ldrh	r3, [r7, #10]
 8004042:	11db      	asrs	r3, r3, #7
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f063 030f 	orn	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	492a      	ldr	r1, [pc, #168]	; (8004108 <I2C_MasterRequestRead+0x164>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8ad 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e048      	b.n	8004100 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4923      	ldr	r1, [pc, #140]	; (800410c <I2C_MasterRequestRead+0x168>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f89d 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e038      	b.n	8004100 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f825 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e017      	b.n	8004100 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040d0:	897b      	ldrh	r3, [r7, #10]
 80040d2:	11db      	asrs	r3, r3, #7
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 0306 	and.w	r3, r3, #6
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f063 030e 	orn	r3, r3, #14
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <I2C_MasterRequestRead+0x168>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f865 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	00010008 	.word	0x00010008
 800410c:	00010002 	.word	0x00010002

08004110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004120:	e025      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004128:	d021      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe fa21 	bl	8002570 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d116      	bne.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e023      	b.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10d      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	e00c      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d0b6      	beq.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041cc:	e051      	b.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041dc:	d123      	bne.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e046      	b.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422c:	d021      	beq.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fe f99f 	bl	8002570 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e020      	b.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10c      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e00b      	b.n	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d18d      	bne.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8ce 	bl	800446c <I2C_IsAcknowledgeFailed>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e02d      	b.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e0:	d021      	beq.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fe f945 	bl	8002570 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e007      	b.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d1ca      	bne.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434a:	e02d      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f88d 	bl	800446c <I2C_IsAcknowledgeFailed>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e02d      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004362:	d021      	beq.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fe f904 	bl	8002570 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e007      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d1ca      	bne.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043cc:	e042      	b.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d119      	bne.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0210 	mvn.w	r2, #16
 80043e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e029      	b.n	8004464 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7fe f8ae 	bl	8002570 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d116      	bne.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e007      	b.n	8004464 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d1b5      	bne.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d11b      	bne.n	80044bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800448c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0204 	orr.w	r2, r3, #4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e26c      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8087 	beq.w	80045f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e8:	4b92      	ldr	r3, [pc, #584]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d00c      	beq.n	800450e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f4:	4b8f      	ldr	r3, [pc, #572]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d112      	bne.n	8004526 <HAL_RCC_OscConfig+0x5e>
 8004500:	4b8c      	ldr	r3, [pc, #560]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d10b      	bne.n	8004526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450e:	4b89      	ldr	r3, [pc, #548]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d06c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x12c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d168      	bne.n	80045f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e246      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x76>
 8004530:	4b80      	ldr	r3, [pc, #512]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7f      	ldr	r2, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e02e      	b.n	800459c <HAL_RCC_OscConfig+0xd4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x98>
 8004546:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a7a      	ldr	r2, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800454c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b78      	ldr	r3, [pc, #480]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a77      	ldr	r2, [pc, #476]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e01d      	b.n	800459c <HAL_RCC_OscConfig+0xd4>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0xbc>
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a71      	ldr	r2, [pc, #452]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0xd4>
 8004584:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6a      	ldr	r2, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a67      	ldr	r2, [pc, #412]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d013      	beq.n	80045cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd ffe4 	bl	8002570 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fd ffe0 	bl	8002570 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1fa      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b5d      	ldr	r3, [pc, #372]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0xe4>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd ffd0 	bl	8002570 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fd ffcc 	bl	8002570 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1e6      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x10c>
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d063      	beq.n	80046ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004602:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b08      	cmp	r3, #8
 8004618:	d11c      	bne.n	8004654 <HAL_RCC_OscConfig+0x18c>
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d116      	bne.n	8004654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x176>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e1ba      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463e:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4939      	ldr	r1, [pc, #228]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	e03a      	b.n	80046ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_RCC_OscConfig+0x270>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fd ff85 	bl	8002570 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466a:	f7fd ff81 	bl	8002570 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e19b      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4927      	ldr	r1, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
 800469c:	e015      	b.n	80046ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <HAL_RCC_OscConfig+0x270>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fd ff64 	bl	8002570 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fd ff60 	bl	8002570 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e17a      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d03a      	beq.n	800474c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046de:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_RCC_OscConfig+0x274>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e4:	f7fd ff44 	bl	8002570 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd ff40 	bl	8002570 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e15a      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_RCC_OscConfig+0x26c>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800470a:	2001      	movs	r0, #1
 800470c:	f000 fada 	bl	8004cc4 <RCC_Delay>
 8004710:	e01c      	b.n	800474c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_OscConfig+0x274>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004718:	f7fd ff2a 	bl	8002570 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471e:	e00f      	b.n	8004740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd ff26 	bl	8002570 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d908      	bls.n	8004740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e140      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	42420000 	.word	0x42420000
 800473c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	4b9e      	ldr	r3, [pc, #632]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e9      	bne.n	8004720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80a6 	beq.w	80048a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475e:	4b97      	ldr	r3, [pc, #604]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	4b94      	ldr	r3, [pc, #592]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4a93      	ldr	r2, [pc, #588]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004774:	61d3      	str	r3, [r2, #28]
 8004776:	4b91      	ldr	r3, [pc, #580]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004786:	4b8e      	ldr	r3, [pc, #568]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d118      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004792:	4b8b      	ldr	r3, [pc, #556]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a8a      	ldr	r2, [pc, #552]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479e:	f7fd fee7 	bl	8002570 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fd fee3 	bl	8002570 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b64      	cmp	r3, #100	; 0x64
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0fd      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	4b81      	ldr	r3, [pc, #516]	; (80049c0 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x312>
 80047cc:	4b7b      	ldr	r3, [pc, #492]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	4a7a      	ldr	r2, [pc, #488]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	6213      	str	r3, [r2, #32]
 80047d8:	e02d      	b.n	8004836 <HAL_RCC_OscConfig+0x36e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0x334>
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6213      	str	r3, [r2, #32]
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4a72      	ldr	r2, [pc, #456]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6213      	str	r3, [r2, #32]
 80047fa:	e01c      	b.n	8004836 <HAL_RCC_OscConfig+0x36e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b05      	cmp	r3, #5
 8004802:	d10c      	bne.n	800481e <HAL_RCC_OscConfig+0x356>
 8004804:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4a6c      	ldr	r2, [pc, #432]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6213      	str	r3, [r2, #32]
 8004810:	4b6a      	ldr	r3, [pc, #424]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4a69      	ldr	r2, [pc, #420]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6213      	str	r3, [r2, #32]
 800481c:	e00b      	b.n	8004836 <HAL_RCC_OscConfig+0x36e>
 800481e:	4b67      	ldr	r3, [pc, #412]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a66      	ldr	r2, [pc, #408]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6213      	str	r3, [r2, #32]
 800482a:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4a63      	ldr	r2, [pc, #396]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d015      	beq.n	800486a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fd fe97 	bl	8002570 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fd fe93 	bl	8002570 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e0ab      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485c:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ee      	beq.n	8004846 <HAL_RCC_OscConfig+0x37e>
 8004868:	e014      	b.n	8004894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486a:	f7fd fe81 	bl	8002570 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd fe7d 	bl	8002570 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e095      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004888:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ee      	bne.n	8004872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489a:	4b48      	ldr	r3, [pc, #288]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	4a47      	ldr	r2, [pc, #284]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8081 	beq.w	80049b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b0:	4b42      	ldr	r3, [pc, #264]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d061      	beq.n	8004980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d146      	bne.n	8004952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c4:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_RCC_OscConfig+0x4fc>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fe51 	bl	8002570 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fd fe4d 	bl	8002570 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e067      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d108      	bne.n	800490c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	492d      	ldr	r1, [pc, #180]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a19      	ldr	r1, [r3, #32]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	430b      	orrs	r3, r1
 800491e:	4927      	ldr	r1, [pc, #156]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x4fc>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd fe21 	bl	8002570 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd fe1d 	bl	8002570 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e037      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004944:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x46a>
 8004950:	e02f      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_RCC_OscConfig+0x4fc>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd fe0a 	bl	8002570 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd fe06 	bl	8002570 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e020      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x498>
 800497e:	e018      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e013      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_OscConfig+0x4f4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	429a      	cmp	r2, r3
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40007000 	.word	0x40007000
 80049c4:	42420060 	.word	0x42420060

080049c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0d0      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d910      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b67      	ldr	r3, [pc, #412]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 0207 	bic.w	r2, r3, #7
 80049f2:	4965      	ldr	r1, [pc, #404]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d040      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d115      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e073      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e06b      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4936      	ldr	r1, [pc, #216]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fd5a 	bl	8002570 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fd fd56 	bl	8002570 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e053      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d210      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 0207 	bic.w	r2, r3, #7
 8004afe:	4922      	ldr	r1, [pc, #136]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1cc>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x1d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fcb8 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40022000 	.word	0x40022000
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	08006978 	.word	0x08006978
 8004b94:	20000004 	.word	0x20000004
 8004b98:	20000008 	.word	0x20000008

08004b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b490      	push	{r4, r7}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba4:	1d3c      	adds	r4, r7, #4
 8004ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bc6:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d002      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x40>
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x46>
 8004bda:	e02d      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bde:	623b      	str	r3, [r7, #32]
      break;
 8004be0:	e02d      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	0c9b      	lsrs	r3, r3, #18
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bee:	4413      	add	r3, r2
 8004bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c5b      	lsrs	r3, r3, #17
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c0e:	4413      	add	r3, r2
 8004c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c1a:	fb02 f203 	mul.w	r2, r2, r3
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	e004      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	623b      	str	r3, [r7, #32]
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c3a:	623b      	str	r3, [r7, #32]
      break;
 8004c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc90      	pop	{r4, r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	0800693c 	.word	0x0800693c
 8004c50:	0800694c 	.word	0x0800694c
 8004c54:	40021000 	.word	0x40021000
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	003d0900 	.word	0x003d0900

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff2 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4601      	mov	r1, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	08006988 	.word	0x08006988

08004c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca0:	f7ff ffde 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4601      	mov	r1, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0adb      	lsrs	r3, r3, #11
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4a03      	ldr	r2, [pc, #12]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	08006988 	.word	0x08006988

08004cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <RCC_Delay+0x34>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <RCC_Delay+0x38>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a5b      	lsrs	r3, r3, #9
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ce0:	bf00      	nop
  }
  while (Delay --);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	60fa      	str	r2, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f9      	bne.n	8004ce0 <RCC_Delay+0x1c>
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000004 	.word	0x20000004
 8004cfc:	10624dd3 	.word	0x10624dd3

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d07d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4a4b      	ldr	r2, [pc, #300]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	61d3      	str	r3, [r2, #28]
 8004d38:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d118      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d54:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a42      	ldr	r2, [pc, #264]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d60:	f7fd fc06 	bl	8002570 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fd fc02 	bl	8002570 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06d      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d027      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	4b2e      	ldr	r3, [pc, #184]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dba:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd fbd1 	bl	8002570 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd fbcd 	bl	8002570 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e036      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4917      	ldr	r1, [pc, #92]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	490b      	ldr	r1, [pc, #44]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
 8004e68:	42420440 	.word	0x42420440

08004e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b08d      	sub	sp, #52	; 0x34
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e74:	4b55      	ldr	r3, [pc, #340]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e76:	f107 040c 	add.w	r4, r7, #12
 8004e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	2300      	movs	r3, #0
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d07f      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d002      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d048      	beq.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004ea8:	e08b      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004eb0:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d07f      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	0c9b      	lsrs	r3, r3, #18
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ec8:	4413      	add	r3, r2
 8004eca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ece:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0c5b      	lsrs	r3, r3, #17
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ee8:	4413      	add	r3, r2
 8004eea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004efa:	4a37      	ldr	r2, [pc, #220]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0a:	e004      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	4a33      	ldr	r2, [pc, #204]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f16:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f22:	d102      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f28:	e048      	b.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f38:	e040      	b.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004f3a:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d108      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5c:	e01f      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d109      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004f76:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7c:	e00f      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d014      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004f96:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f9c:	e010      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004f9e:	e00f      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004fa0:	f7ff fe7c 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	0b9b      	lsrs	r3, r3, #14
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004fc0:	bf00      	nop
    }
  }
  return (frequency);
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3734      	adds	r7, #52	; 0x34
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd90      	pop	{r4, r7, pc}
 8004fcc:	08006950 	.word	0x08006950
 8004fd0:	08006960 	.word	0x08006960
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	aaaaaaab 	.word	0xaaaaaaab

08004fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e053      	b.n	800509e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fc fea7 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	ea42 0103 	orr.w	r1, r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	0c1a      	lsrs	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f002 0204 	and.w	r2, r2, #4
 800507c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01d      	b.n	80050f4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc fe95 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 f9ed 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e01d      	b.n	800514a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f815 	bl	8005152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 f9c2 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fc24 	bl	80059c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <HAL_TIM_PWM_Start+0x60>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d107      	bne.n	8005196 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d007      	beq.n	80051b8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40012c00 	.word	0x40012c00

080051c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0b4      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x184>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	f200 809f 	bhi.w	8005338 <HAL_TIM_PWM_ConfigChannel+0x170>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005235 	.word	0x08005235
 8005204:	08005339 	.word	0x08005339
 8005208:	08005339 	.word	0x08005339
 800520c:	08005339 	.word	0x08005339
 8005210:	08005275 	.word	0x08005275
 8005214:	08005339 	.word	0x08005339
 8005218:	08005339 	.word	0x08005339
 800521c:	08005339 	.word	0x08005339
 8005220:	080052b7 	.word	0x080052b7
 8005224:	08005339 	.word	0x08005339
 8005228:	08005339 	.word	0x08005339
 800522c:	08005339 	.word	0x08005339
 8005230:	080052f7 	.word	0x080052f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f9a4 	bl	8005588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
      break;
 8005272:	e062      	b.n	800533a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f9ea 	bl	8005654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	619a      	str	r2, [r3, #24]
      break;
 80052b4:	e041      	b.n	800533a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fa33 	bl	8005728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0208 	orr.w	r2, r2, #8
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	61da      	str	r2, [r3, #28]
      break;
 80052f4:	e021      	b.n	800533a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fa7d 	bl	80057fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	61da      	str	r2, [r3, #28]
      break;
 8005336:	e000      	b.n	800533a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005338:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e0a6      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x166>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d067      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x120>
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d80b      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x6c>
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d073      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x140>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d802      	bhi.n	80053b6 <HAL_TIM_ConfigClockSource+0x62>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d06f      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053b4:	e078      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d06c      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x140>
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	d06a      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053be:	e073      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d00d      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0x8c>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d804      	bhi.n	80053d2 <HAL_TIM_ConfigClockSource+0x7e>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d033      	beq.n	8005434 <HAL_TIM_ConfigClockSource+0xe0>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d041      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053d0:	e06a      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	d066      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x152>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d017      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053de:	e063      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 fac9 	bl	8005986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005402:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e04c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f000 fab2 	bl	8005986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005430:	609a      	str	r2, [r3, #8]
      break;
 8005432:	e039      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6859      	ldr	r1, [r3, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	461a      	mov	r2, r3
 8005442:	f000 fa29 	bl	8005898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2150      	movs	r1, #80	; 0x50
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fa80 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8005452:	e029      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	461a      	mov	r2, r3
 8005462:	f000 fa47 	bl	80058f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2160      	movs	r1, #96	; 0x60
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fa70 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8005472:	e019      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	461a      	mov	r2, r3
 8005482:	f000 fa09 	bl	8005898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2140      	movs	r1, #64	; 0x40
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fa60 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 8005492:	e009      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 fa57 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a29      	ldr	r2, [pc, #164]	; (800557c <TIM_Base_SetConfig+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_Base_SetConfig+0x30>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d007      	beq.n	80054f4 <TIM_Base_SetConfig+0x30>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a26      	ldr	r2, [pc, #152]	; (8005580 <TIM_Base_SetConfig+0xbc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0x30>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a25      	ldr	r2, [pc, #148]	; (8005584 <TIM_Base_SetConfig+0xc0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d108      	bne.n	8005506 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <TIM_Base_SetConfig+0xb8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0x62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0x62>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a19      	ldr	r2, [pc, #100]	; (8005580 <TIM_Base_SetConfig+0xbc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0x62>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <TIM_Base_SetConfig+0xc0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a07      	ldr	r2, [pc, #28]	; (800557c <TIM_Base_SetConfig+0xb8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d103      	bne.n	800556c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	615a      	str	r2, [r3, #20]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800

08005588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 0302 	bic.w	r3, r3, #2
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <TIM_OC1_SetConfig+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0308 	bic.w	r3, r3, #8
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 0304 	bic.w	r3, r3, #4
 80055fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <TIM_OC1_SetConfig+0xc8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d111      	bne.n	800562a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00

08005654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0210 	bic.w	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0320 	bic.w	r3, r3, #32
 800569e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <TIM_OC2_SetConfig+0xd0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10d      	bne.n	80056d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a14      	ldr	r2, [pc, #80]	; (8005724 <TIM_OC2_SetConfig+0xd0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d113      	bne.n	8005700 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	40012c00 	.word	0x40012c00

08005728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <TIM_OC3_SetConfig+0xd0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10d      	bne.n	80057a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <TIM_OC3_SetConfig+0xd0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d113      	bne.n	80057d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00

080057fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <TIM_OC4_SetConfig+0x98>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d109      	bne.n	8005870 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	40012c00 	.word	0x40012c00

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f023 0210 	bic.w	r2, r3, #16
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	031b      	lsls	r3, r3, #12
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 0307 	orr.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	021a      	lsls	r2, r3, #8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	609a      	str	r2, [r3, #8]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2201      	movs	r2, #1
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e032      	b.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e03d      	b.n	8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e03f      	b.n	8005bc8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fc f99f 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f90c 	bl	8005d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	f040 8083 	bne.w	8005cf8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_UART_Transmit+0x2e>
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e07b      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UART_Transmit+0x40>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e074      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c26:	f7fc fca3 	bl	8002570 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c38:	e042      	b.n	8005cc0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d122      	bne.n	8005c98 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f850 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e046      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c7e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	e017      	b.n	8005cc0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	e013      	b.n	8005cc0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f82d 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e023      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	60ba      	str	r2, [r7, #8]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1b7      	bne.n	8005c3a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2140      	movs	r1, #64	; 0x40
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f814 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e00a      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	e02c      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1a:	d028      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d22:	f7fc fc25 	bl	8002570 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d21d      	bcs.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e00f      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4013      	ands	r3, r2
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d0c3      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005dd2:	f023 030c 	bic.w	r3, r3, #12
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <UART_SetConfig+0x1ac>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d14e      	bne.n	8005e9e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fe ff4c 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 8005e04:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009a      	lsls	r2, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	4a4a      	ldr	r2, [pc, #296]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	0119      	lsls	r1, r3, #4
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009a      	lsls	r2, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e3c:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2064      	movs	r0, #100	; 0x64
 8005e46:	fb00 f303 	mul.w	r3, r0, r3
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	3332      	adds	r3, #50	; 0x32
 8005e50:	4a3d      	ldr	r2, [pc, #244]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5c:	4419      	add	r1, r3
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009a      	lsls	r2, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e74:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005e76:	fba3 0302 	umull	r0, r3, r3, r2
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2064      	movs	r0, #100	; 0x64
 8005e7e:	fb00 f303 	mul.w	r3, r0, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	3332      	adds	r3, #50	; 0x32
 8005e88:	4a2f      	ldr	r2, [pc, #188]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	440a      	add	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005e9c:	e04d      	b.n	8005f3a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fe fee9 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009a      	lsls	r2, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	4a23      	ldr	r2, [pc, #140]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	0119      	lsls	r1, r3, #4
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009a      	lsls	r2, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005edc:	fba3 0302 	umull	r0, r3, r3, r2
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	2064      	movs	r0, #100	; 0x64
 8005ee4:	fb00 f303 	mul.w	r3, r0, r3
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	3332      	adds	r3, #50	; 0x32
 8005eee:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005efa:	4419      	add	r1, r3
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009a      	lsls	r2, r3, #2
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005f14:	fba3 0302 	umull	r0, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	2064      	movs	r0, #100	; 0x64
 8005f1c:	fb00 f303 	mul.w	r3, r0, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	3332      	adds	r3, #50	; 0x32
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <UART_SetConfig+0x1b0>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f003 020f 	and.w	r2, r3, #15
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	440a      	add	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40013800 	.word	0x40013800
 8005f48:	51eb851f 	.word	0x51eb851f

08005f4c <__errno>:
 8005f4c:	4b01      	ldr	r3, [pc, #4]	; (8005f54 <__errno+0x8>)
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000010 	.word	0x20000010

08005f58 <__libc_init_array>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	2500      	movs	r5, #0
 8005f5c:	4e0c      	ldr	r6, [pc, #48]	; (8005f90 <__libc_init_array+0x38>)
 8005f5e:	4c0d      	ldr	r4, [pc, #52]	; (8005f94 <__libc_init_array+0x3c>)
 8005f60:	1ba4      	subs	r4, r4, r6
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	42a5      	cmp	r5, r4
 8005f66:	d109      	bne.n	8005f7c <__libc_init_array+0x24>
 8005f68:	f000 fc34 	bl	80067d4 <_init>
 8005f6c:	2500      	movs	r5, #0
 8005f6e:	4e0a      	ldr	r6, [pc, #40]	; (8005f98 <__libc_init_array+0x40>)
 8005f70:	4c0a      	ldr	r4, [pc, #40]	; (8005f9c <__libc_init_array+0x44>)
 8005f72:	1ba4      	subs	r4, r4, r6
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	42a5      	cmp	r5, r4
 8005f78:	d105      	bne.n	8005f86 <__libc_init_array+0x2e>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f80:	4798      	blx	r3
 8005f82:	3501      	adds	r5, #1
 8005f84:	e7ee      	b.n	8005f64 <__libc_init_array+0xc>
 8005f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f8a:	4798      	blx	r3
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	e7f2      	b.n	8005f76 <__libc_init_array+0x1e>
 8005f90:	080069c4 	.word	0x080069c4
 8005f94:	080069c4 	.word	0x080069c4
 8005f98:	080069c4 	.word	0x080069c4
 8005f9c:	080069c8 	.word	0x080069c8

08005fa0 <memset>:
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4402      	add	r2, r0
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d100      	bne.n	8005faa <memset+0xa>
 8005fa8:	4770      	bx	lr
 8005faa:	f803 1b01 	strb.w	r1, [r3], #1
 8005fae:	e7f9      	b.n	8005fa4 <memset+0x4>

08005fb0 <siprintf>:
 8005fb0:	b40e      	push	{r1, r2, r3}
 8005fb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fb6:	b500      	push	{lr}
 8005fb8:	b09c      	sub	sp, #112	; 0x70
 8005fba:	ab1d      	add	r3, sp, #116	; 0x74
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	9107      	str	r1, [sp, #28]
 8005fc2:	9104      	str	r1, [sp, #16]
 8005fc4:	4808      	ldr	r0, [pc, #32]	; (8005fe8 <siprintf+0x38>)
 8005fc6:	4909      	ldr	r1, [pc, #36]	; (8005fec <siprintf+0x3c>)
 8005fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fcc:	9105      	str	r1, [sp, #20]
 8005fce:	6800      	ldr	r0, [r0, #0]
 8005fd0:	a902      	add	r1, sp, #8
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	f000 f866 	bl	80060a4 <_svfiprintf_r>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	b01c      	add	sp, #112	; 0x70
 8005fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe4:	b003      	add	sp, #12
 8005fe6:	4770      	bx	lr
 8005fe8:	20000010 	.word	0x20000010
 8005fec:	ffff0208 	.word	0xffff0208

08005ff0 <__ssputs_r>:
 8005ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	688e      	ldr	r6, [r1, #8]
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	429e      	cmp	r6, r3
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4690      	mov	r8, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	d837      	bhi.n	8006072 <__ssputs_r+0x82>
 8006002:	898a      	ldrh	r2, [r1, #12]
 8006004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006008:	d031      	beq.n	800606e <__ssputs_r+0x7e>
 800600a:	2302      	movs	r3, #2
 800600c:	6825      	ldr	r5, [r4, #0]
 800600e:	6909      	ldr	r1, [r1, #16]
 8006010:	1a6f      	subs	r7, r5, r1
 8006012:	6965      	ldr	r5, [r4, #20]
 8006014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006018:	fb95 f5f3 	sdiv	r5, r5, r3
 800601c:	f109 0301 	add.w	r3, r9, #1
 8006020:	443b      	add	r3, r7
 8006022:	429d      	cmp	r5, r3
 8006024:	bf38      	it	cc
 8006026:	461d      	movcc	r5, r3
 8006028:	0553      	lsls	r3, r2, #21
 800602a:	d530      	bpl.n	800608e <__ssputs_r+0x9e>
 800602c:	4629      	mov	r1, r5
 800602e:	f000 fb37 	bl	80066a0 <_malloc_r>
 8006032:	4606      	mov	r6, r0
 8006034:	b950      	cbnz	r0, 800604c <__ssputs_r+0x5c>
 8006036:	230c      	movs	r3, #12
 8006038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800603c:	f8ca 3000 	str.w	r3, [sl]
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	463a      	mov	r2, r7
 800604e:	6921      	ldr	r1, [r4, #16]
 8006050:	f000 fab6 	bl	80065c0 <memcpy>
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	6126      	str	r6, [r4, #16]
 8006062:	443e      	add	r6, r7
 8006064:	6026      	str	r6, [r4, #0]
 8006066:	464e      	mov	r6, r9
 8006068:	6165      	str	r5, [r4, #20]
 800606a:	1bed      	subs	r5, r5, r7
 800606c:	60a5      	str	r5, [r4, #8]
 800606e:	454e      	cmp	r6, r9
 8006070:	d900      	bls.n	8006074 <__ssputs_r+0x84>
 8006072:	464e      	mov	r6, r9
 8006074:	4632      	mov	r2, r6
 8006076:	4641      	mov	r1, r8
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	f000 faac 	bl	80065d6 <memmove>
 800607e:	68a3      	ldr	r3, [r4, #8]
 8006080:	2000      	movs	r0, #0
 8006082:	1b9b      	subs	r3, r3, r6
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	441e      	add	r6, r3
 800608a:	6026      	str	r6, [r4, #0]
 800608c:	e7dc      	b.n	8006048 <__ssputs_r+0x58>
 800608e:	462a      	mov	r2, r5
 8006090:	f000 fb60 	bl	8006754 <_realloc_r>
 8006094:	4606      	mov	r6, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	d1e2      	bne.n	8006060 <__ssputs_r+0x70>
 800609a:	6921      	ldr	r1, [r4, #16]
 800609c:	4650      	mov	r0, sl
 800609e:	f000 fab3 	bl	8006608 <_free_r>
 80060a2:	e7c8      	b.n	8006036 <__ssputs_r+0x46>

080060a4 <_svfiprintf_r>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	461d      	mov	r5, r3
 80060aa:	898b      	ldrh	r3, [r1, #12]
 80060ac:	b09d      	sub	sp, #116	; 0x74
 80060ae:	061f      	lsls	r7, r3, #24
 80060b0:	4680      	mov	r8, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4616      	mov	r6, r2
 80060b6:	d50f      	bpl.n	80060d8 <_svfiprintf_r+0x34>
 80060b8:	690b      	ldr	r3, [r1, #16]
 80060ba:	b96b      	cbnz	r3, 80060d8 <_svfiprintf_r+0x34>
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	f000 faef 	bl	80066a0 <_malloc_r>
 80060c2:	6020      	str	r0, [r4, #0]
 80060c4:	6120      	str	r0, [r4, #16]
 80060c6:	b928      	cbnz	r0, 80060d4 <_svfiprintf_r+0x30>
 80060c8:	230c      	movs	r3, #12
 80060ca:	f8c8 3000 	str.w	r3, [r8]
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d2:	e0c8      	b.n	8006266 <_svfiprintf_r+0x1c2>
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	6163      	str	r3, [r4, #20]
 80060d8:	2300      	movs	r3, #0
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	2320      	movs	r3, #32
 80060de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060e2:	2330      	movs	r3, #48	; 0x30
 80060e4:	f04f 0b01 	mov.w	fp, #1
 80060e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ec:	9503      	str	r5, [sp, #12]
 80060ee:	4637      	mov	r7, r6
 80060f0:	463d      	mov	r5, r7
 80060f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060f6:	b10b      	cbz	r3, 80060fc <_svfiprintf_r+0x58>
 80060f8:	2b25      	cmp	r3, #37	; 0x25
 80060fa:	d13e      	bne.n	800617a <_svfiprintf_r+0xd6>
 80060fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006100:	d00b      	beq.n	800611a <_svfiprintf_r+0x76>
 8006102:	4653      	mov	r3, sl
 8006104:	4632      	mov	r2, r6
 8006106:	4621      	mov	r1, r4
 8006108:	4640      	mov	r0, r8
 800610a:	f7ff ff71 	bl	8005ff0 <__ssputs_r>
 800610e:	3001      	adds	r0, #1
 8006110:	f000 80a4 	beq.w	800625c <_svfiprintf_r+0x1b8>
 8006114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006116:	4453      	add	r3, sl
 8006118:	9309      	str	r3, [sp, #36]	; 0x24
 800611a:	783b      	ldrb	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 809d 	beq.w	800625c <_svfiprintf_r+0x1b8>
 8006122:	2300      	movs	r3, #0
 8006124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006134:	931a      	str	r3, [sp, #104]	; 0x68
 8006136:	462f      	mov	r7, r5
 8006138:	2205      	movs	r2, #5
 800613a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800613e:	4850      	ldr	r0, [pc, #320]	; (8006280 <_svfiprintf_r+0x1dc>)
 8006140:	f000 fa30 	bl	80065a4 <memchr>
 8006144:	9b04      	ldr	r3, [sp, #16]
 8006146:	b9d0      	cbnz	r0, 800617e <_svfiprintf_r+0xda>
 8006148:	06d9      	lsls	r1, r3, #27
 800614a:	bf44      	itt	mi
 800614c:	2220      	movmi	r2, #32
 800614e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006152:	071a      	lsls	r2, r3, #28
 8006154:	bf44      	itt	mi
 8006156:	222b      	movmi	r2, #43	; 0x2b
 8006158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800615c:	782a      	ldrb	r2, [r5, #0]
 800615e:	2a2a      	cmp	r2, #42	; 0x2a
 8006160:	d015      	beq.n	800618e <_svfiprintf_r+0xea>
 8006162:	462f      	mov	r7, r5
 8006164:	2000      	movs	r0, #0
 8006166:	250a      	movs	r5, #10
 8006168:	9a07      	ldr	r2, [sp, #28]
 800616a:	4639      	mov	r1, r7
 800616c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006170:	3b30      	subs	r3, #48	; 0x30
 8006172:	2b09      	cmp	r3, #9
 8006174:	d94d      	bls.n	8006212 <_svfiprintf_r+0x16e>
 8006176:	b1b8      	cbz	r0, 80061a8 <_svfiprintf_r+0x104>
 8006178:	e00f      	b.n	800619a <_svfiprintf_r+0xf6>
 800617a:	462f      	mov	r7, r5
 800617c:	e7b8      	b.n	80060f0 <_svfiprintf_r+0x4c>
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <_svfiprintf_r+0x1dc>)
 8006180:	463d      	mov	r5, r7
 8006182:	1a80      	subs	r0, r0, r2
 8006184:	fa0b f000 	lsl.w	r0, fp, r0
 8006188:	4318      	orrs	r0, r3
 800618a:	9004      	str	r0, [sp, #16]
 800618c:	e7d3      	b.n	8006136 <_svfiprintf_r+0x92>
 800618e:	9a03      	ldr	r2, [sp, #12]
 8006190:	1d11      	adds	r1, r2, #4
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	9103      	str	r1, [sp, #12]
 8006196:	2a00      	cmp	r2, #0
 8006198:	db01      	blt.n	800619e <_svfiprintf_r+0xfa>
 800619a:	9207      	str	r2, [sp, #28]
 800619c:	e004      	b.n	80061a8 <_svfiprintf_r+0x104>
 800619e:	4252      	negs	r2, r2
 80061a0:	f043 0302 	orr.w	r3, r3, #2
 80061a4:	9207      	str	r2, [sp, #28]
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	783b      	ldrb	r3, [r7, #0]
 80061aa:	2b2e      	cmp	r3, #46	; 0x2e
 80061ac:	d10c      	bne.n	80061c8 <_svfiprintf_r+0x124>
 80061ae:	787b      	ldrb	r3, [r7, #1]
 80061b0:	2b2a      	cmp	r3, #42	; 0x2a
 80061b2:	d133      	bne.n	800621c <_svfiprintf_r+0x178>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	3702      	adds	r7, #2
 80061b8:	1d1a      	adds	r2, r3, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	9203      	str	r2, [sp, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfb8      	it	lt
 80061c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	4d2e      	ldr	r5, [pc, #184]	; (8006284 <_svfiprintf_r+0x1e0>)
 80061ca:	2203      	movs	r2, #3
 80061cc:	7839      	ldrb	r1, [r7, #0]
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f9e8 	bl	80065a4 <memchr>
 80061d4:	b138      	cbz	r0, 80061e6 <_svfiprintf_r+0x142>
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	1b40      	subs	r0, r0, r5
 80061da:	fa03 f000 	lsl.w	r0, r3, r0
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	3701      	adds	r7, #1
 80061e2:	4303      	orrs	r3, r0
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	7839      	ldrb	r1, [r7, #0]
 80061e8:	2206      	movs	r2, #6
 80061ea:	4827      	ldr	r0, [pc, #156]	; (8006288 <_svfiprintf_r+0x1e4>)
 80061ec:	1c7e      	adds	r6, r7, #1
 80061ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f2:	f000 f9d7 	bl	80065a4 <memchr>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d038      	beq.n	800626c <_svfiprintf_r+0x1c8>
 80061fa:	4b24      	ldr	r3, [pc, #144]	; (800628c <_svfiprintf_r+0x1e8>)
 80061fc:	bb13      	cbnz	r3, 8006244 <_svfiprintf_r+0x1a0>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	3307      	adds	r3, #7
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	3308      	adds	r3, #8
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620c:	444b      	add	r3, r9
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	e76d      	b.n	80060ee <_svfiprintf_r+0x4a>
 8006212:	fb05 3202 	mla	r2, r5, r2, r3
 8006216:	2001      	movs	r0, #1
 8006218:	460f      	mov	r7, r1
 800621a:	e7a6      	b.n	800616a <_svfiprintf_r+0xc6>
 800621c:	2300      	movs	r3, #0
 800621e:	250a      	movs	r5, #10
 8006220:	4619      	mov	r1, r3
 8006222:	3701      	adds	r7, #1
 8006224:	9305      	str	r3, [sp, #20]
 8006226:	4638      	mov	r0, r7
 8006228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800622c:	3a30      	subs	r2, #48	; 0x30
 800622e:	2a09      	cmp	r2, #9
 8006230:	d903      	bls.n	800623a <_svfiprintf_r+0x196>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0c8      	beq.n	80061c8 <_svfiprintf_r+0x124>
 8006236:	9105      	str	r1, [sp, #20]
 8006238:	e7c6      	b.n	80061c8 <_svfiprintf_r+0x124>
 800623a:	fb05 2101 	mla	r1, r5, r1, r2
 800623e:	2301      	movs	r3, #1
 8006240:	4607      	mov	r7, r0
 8006242:	e7f0      	b.n	8006226 <_svfiprintf_r+0x182>
 8006244:	ab03      	add	r3, sp, #12
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	4622      	mov	r2, r4
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <_svfiprintf_r+0x1ec>)
 800624c:	a904      	add	r1, sp, #16
 800624e:	4640      	mov	r0, r8
 8006250:	f3af 8000 	nop.w
 8006254:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006258:	4681      	mov	r9, r0
 800625a:	d1d6      	bne.n	800620a <_svfiprintf_r+0x166>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	065b      	lsls	r3, r3, #25
 8006260:	f53f af35 	bmi.w	80060ce <_svfiprintf_r+0x2a>
 8006264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006266:	b01d      	add	sp, #116	; 0x74
 8006268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626c:	ab03      	add	r3, sp, #12
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4622      	mov	r2, r4
 8006272:	4b07      	ldr	r3, [pc, #28]	; (8006290 <_svfiprintf_r+0x1ec>)
 8006274:	a904      	add	r1, sp, #16
 8006276:	4640      	mov	r0, r8
 8006278:	f000 f882 	bl	8006380 <_printf_i>
 800627c:	e7ea      	b.n	8006254 <_svfiprintf_r+0x1b0>
 800627e:	bf00      	nop
 8006280:	08006990 	.word	0x08006990
 8006284:	08006996 	.word	0x08006996
 8006288:	0800699a 	.word	0x0800699a
 800628c:	00000000 	.word	0x00000000
 8006290:	08005ff1 	.word	0x08005ff1

08006294 <_printf_common>:
 8006294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	4691      	mov	r9, r2
 800629a:	461f      	mov	r7, r3
 800629c:	688a      	ldr	r2, [r1, #8]
 800629e:	690b      	ldr	r3, [r1, #16]
 80062a0:	4606      	mov	r6, r0
 80062a2:	4293      	cmp	r3, r2
 80062a4:	bfb8      	it	lt
 80062a6:	4613      	movlt	r3, r2
 80062a8:	f8c9 3000 	str.w	r3, [r9]
 80062ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062b0:	460c      	mov	r4, r1
 80062b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b6:	b112      	cbz	r2, 80062be <_printf_common+0x2a>
 80062b8:	3301      	adds	r3, #1
 80062ba:	f8c9 3000 	str.w	r3, [r9]
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	0699      	lsls	r1, r3, #26
 80062c2:	bf42      	ittt	mi
 80062c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062c8:	3302      	addmi	r3, #2
 80062ca:	f8c9 3000 	strmi.w	r3, [r9]
 80062ce:	6825      	ldr	r5, [r4, #0]
 80062d0:	f015 0506 	ands.w	r5, r5, #6
 80062d4:	d107      	bne.n	80062e6 <_printf_common+0x52>
 80062d6:	f104 0a19 	add.w	sl, r4, #25
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	f8d9 2000 	ldr.w	r2, [r9]
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	42ab      	cmp	r3, r5
 80062e4:	dc29      	bgt.n	800633a <_printf_common+0xa6>
 80062e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	3300      	adds	r3, #0
 80062ee:	bf18      	it	ne
 80062f0:	2301      	movne	r3, #1
 80062f2:	0692      	lsls	r2, r2, #26
 80062f4:	d42e      	bmi.n	8006354 <_printf_common+0xc0>
 80062f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062fa:	4639      	mov	r1, r7
 80062fc:	4630      	mov	r0, r6
 80062fe:	47c0      	blx	r8
 8006300:	3001      	adds	r0, #1
 8006302:	d021      	beq.n	8006348 <_printf_common+0xb4>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	68e5      	ldr	r5, [r4, #12]
 8006308:	f003 0306 	and.w	r3, r3, #6
 800630c:	2b04      	cmp	r3, #4
 800630e:	bf18      	it	ne
 8006310:	2500      	movne	r5, #0
 8006312:	f8d9 2000 	ldr.w	r2, [r9]
 8006316:	f04f 0900 	mov.w	r9, #0
 800631a:	bf08      	it	eq
 800631c:	1aad      	subeq	r5, r5, r2
 800631e:	68a3      	ldr	r3, [r4, #8]
 8006320:	6922      	ldr	r2, [r4, #16]
 8006322:	bf08      	it	eq
 8006324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006328:	4293      	cmp	r3, r2
 800632a:	bfc4      	itt	gt
 800632c:	1a9b      	subgt	r3, r3, r2
 800632e:	18ed      	addgt	r5, r5, r3
 8006330:	341a      	adds	r4, #26
 8006332:	454d      	cmp	r5, r9
 8006334:	d11a      	bne.n	800636c <_printf_common+0xd8>
 8006336:	2000      	movs	r0, #0
 8006338:	e008      	b.n	800634c <_printf_common+0xb8>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4639      	mov	r1, r7
 8006340:	4630      	mov	r0, r6
 8006342:	47c0      	blx	r8
 8006344:	3001      	adds	r0, #1
 8006346:	d103      	bne.n	8006350 <_printf_common+0xbc>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	3501      	adds	r5, #1
 8006352:	e7c2      	b.n	80062da <_printf_common+0x46>
 8006354:	2030      	movs	r0, #48	; 0x30
 8006356:	18e1      	adds	r1, r4, r3
 8006358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006362:	4422      	add	r2, r4
 8006364:	3302      	adds	r3, #2
 8006366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800636a:	e7c4      	b.n	80062f6 <_printf_common+0x62>
 800636c:	2301      	movs	r3, #1
 800636e:	4622      	mov	r2, r4
 8006370:	4639      	mov	r1, r7
 8006372:	4630      	mov	r0, r6
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d0e6      	beq.n	8006348 <_printf_common+0xb4>
 800637a:	f109 0901 	add.w	r9, r9, #1
 800637e:	e7d8      	b.n	8006332 <_printf_common+0x9e>

08006380 <_printf_i>:
 8006380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006384:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006388:	460c      	mov	r4, r1
 800638a:	7e09      	ldrb	r1, [r1, #24]
 800638c:	b085      	sub	sp, #20
 800638e:	296e      	cmp	r1, #110	; 0x6e
 8006390:	4617      	mov	r7, r2
 8006392:	4606      	mov	r6, r0
 8006394:	4698      	mov	r8, r3
 8006396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006398:	f000 80b3 	beq.w	8006502 <_printf_i+0x182>
 800639c:	d822      	bhi.n	80063e4 <_printf_i+0x64>
 800639e:	2963      	cmp	r1, #99	; 0x63
 80063a0:	d036      	beq.n	8006410 <_printf_i+0x90>
 80063a2:	d80a      	bhi.n	80063ba <_printf_i+0x3a>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	f000 80b9 	beq.w	800651c <_printf_i+0x19c>
 80063aa:	2958      	cmp	r1, #88	; 0x58
 80063ac:	f000 8083 	beq.w	80064b6 <_printf_i+0x136>
 80063b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063b8:	e032      	b.n	8006420 <_printf_i+0xa0>
 80063ba:	2964      	cmp	r1, #100	; 0x64
 80063bc:	d001      	beq.n	80063c2 <_printf_i+0x42>
 80063be:	2969      	cmp	r1, #105	; 0x69
 80063c0:	d1f6      	bne.n	80063b0 <_printf_i+0x30>
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	0605      	lsls	r5, r0, #24
 80063c8:	f103 0104 	add.w	r1, r3, #4
 80063cc:	d52a      	bpl.n	8006424 <_printf_i+0xa4>
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da03      	bge.n	80063de <_printf_i+0x5e>
 80063d6:	222d      	movs	r2, #45	; 0x2d
 80063d8:	425b      	negs	r3, r3
 80063da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063de:	486f      	ldr	r0, [pc, #444]	; (800659c <_printf_i+0x21c>)
 80063e0:	220a      	movs	r2, #10
 80063e2:	e039      	b.n	8006458 <_printf_i+0xd8>
 80063e4:	2973      	cmp	r1, #115	; 0x73
 80063e6:	f000 809d 	beq.w	8006524 <_printf_i+0x1a4>
 80063ea:	d808      	bhi.n	80063fe <_printf_i+0x7e>
 80063ec:	296f      	cmp	r1, #111	; 0x6f
 80063ee:	d020      	beq.n	8006432 <_printf_i+0xb2>
 80063f0:	2970      	cmp	r1, #112	; 0x70
 80063f2:	d1dd      	bne.n	80063b0 <_printf_i+0x30>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	f043 0320 	orr.w	r3, r3, #32
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	e003      	b.n	8006406 <_printf_i+0x86>
 80063fe:	2975      	cmp	r1, #117	; 0x75
 8006400:	d017      	beq.n	8006432 <_printf_i+0xb2>
 8006402:	2978      	cmp	r1, #120	; 0x78
 8006404:	d1d4      	bne.n	80063b0 <_printf_i+0x30>
 8006406:	2378      	movs	r3, #120	; 0x78
 8006408:	4865      	ldr	r0, [pc, #404]	; (80065a0 <_printf_i+0x220>)
 800640a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800640e:	e055      	b.n	80064bc <_printf_i+0x13c>
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006416:	1d19      	adds	r1, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6011      	str	r1, [r2, #0]
 800641c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006420:	2301      	movs	r3, #1
 8006422:	e08c      	b.n	800653e <_printf_i+0x1be>
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642a:	6011      	str	r1, [r2, #0]
 800642c:	bf18      	it	ne
 800642e:	b21b      	sxthne	r3, r3
 8006430:	e7cf      	b.n	80063d2 <_printf_i+0x52>
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	1d18      	adds	r0, r3, #4
 8006438:	6010      	str	r0, [r2, #0]
 800643a:	0628      	lsls	r0, r5, #24
 800643c:	d501      	bpl.n	8006442 <_printf_i+0xc2>
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	e002      	b.n	8006448 <_printf_i+0xc8>
 8006442:	0668      	lsls	r0, r5, #25
 8006444:	d5fb      	bpl.n	800643e <_printf_i+0xbe>
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	296f      	cmp	r1, #111	; 0x6f
 800644a:	bf14      	ite	ne
 800644c:	220a      	movne	r2, #10
 800644e:	2208      	moveq	r2, #8
 8006450:	4852      	ldr	r0, [pc, #328]	; (800659c <_printf_i+0x21c>)
 8006452:	2100      	movs	r1, #0
 8006454:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006458:	6865      	ldr	r5, [r4, #4]
 800645a:	2d00      	cmp	r5, #0
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	f2c0 8095 	blt.w	800658c <_printf_i+0x20c>
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	f021 0104 	bic.w	r1, r1, #4
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d13d      	bne.n	80064ea <_printf_i+0x16a>
 800646e:	2d00      	cmp	r5, #0
 8006470:	f040 808e 	bne.w	8006590 <_printf_i+0x210>
 8006474:	4665      	mov	r5, ip
 8006476:	2a08      	cmp	r2, #8
 8006478:	d10b      	bne.n	8006492 <_printf_i+0x112>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07db      	lsls	r3, r3, #31
 800647e:	d508      	bpl.n	8006492 <_printf_i+0x112>
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	bfde      	ittt	le
 8006488:	2330      	movle	r3, #48	; 0x30
 800648a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006492:	ebac 0305 	sub.w	r3, ip, r5
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	f8cd 8000 	str.w	r8, [sp]
 800649c:	463b      	mov	r3, r7
 800649e:	aa03      	add	r2, sp, #12
 80064a0:	4621      	mov	r1, r4
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff fef6 	bl	8006294 <_printf_common>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d14d      	bne.n	8006548 <_printf_i+0x1c8>
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b0:	b005      	add	sp, #20
 80064b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064b6:	4839      	ldr	r0, [pc, #228]	; (800659c <_printf_i+0x21c>)
 80064b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	6821      	ldr	r1, [r4, #0]
 80064c0:	1d1d      	adds	r5, r3, #4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6015      	str	r5, [r2, #0]
 80064c6:	060a      	lsls	r2, r1, #24
 80064c8:	d50b      	bpl.n	80064e2 <_printf_i+0x162>
 80064ca:	07ca      	lsls	r2, r1, #31
 80064cc:	bf44      	itt	mi
 80064ce:	f041 0120 	orrmi.w	r1, r1, #32
 80064d2:	6021      	strmi	r1, [r4, #0]
 80064d4:	b91b      	cbnz	r3, 80064de <_printf_i+0x15e>
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	f022 0220 	bic.w	r2, r2, #32
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	2210      	movs	r2, #16
 80064e0:	e7b7      	b.n	8006452 <_printf_i+0xd2>
 80064e2:	064d      	lsls	r5, r1, #25
 80064e4:	bf48      	it	mi
 80064e6:	b29b      	uxthmi	r3, r3
 80064e8:	e7ef      	b.n	80064ca <_printf_i+0x14a>
 80064ea:	4665      	mov	r5, ip
 80064ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80064f0:	fb02 3311 	mls	r3, r2, r1, r3
 80064f4:	5cc3      	ldrb	r3, [r0, r3]
 80064f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064fa:	460b      	mov	r3, r1
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d1f5      	bne.n	80064ec <_printf_i+0x16c>
 8006500:	e7b9      	b.n	8006476 <_printf_i+0xf6>
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	6825      	ldr	r5, [r4, #0]
 8006506:	1d18      	adds	r0, r3, #4
 8006508:	6961      	ldr	r1, [r4, #20]
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	0628      	lsls	r0, r5, #24
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	d501      	bpl.n	8006516 <_printf_i+0x196>
 8006512:	6019      	str	r1, [r3, #0]
 8006514:	e002      	b.n	800651c <_printf_i+0x19c>
 8006516:	066a      	lsls	r2, r5, #25
 8006518:	d5fb      	bpl.n	8006512 <_printf_i+0x192>
 800651a:	8019      	strh	r1, [r3, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	4665      	mov	r5, ip
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	e7b9      	b.n	8006498 <_printf_i+0x118>
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	1d19      	adds	r1, r3, #4
 8006528:	6011      	str	r1, [r2, #0]
 800652a:	681d      	ldr	r5, [r3, #0]
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	2100      	movs	r1, #0
 8006530:	4628      	mov	r0, r5
 8006532:	f000 f837 	bl	80065a4 <memchr>
 8006536:	b108      	cbz	r0, 800653c <_printf_i+0x1bc>
 8006538:	1b40      	subs	r0, r0, r5
 800653a:	6060      	str	r0, [r4, #4]
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	2300      	movs	r3, #0
 8006542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006546:	e7a7      	b.n	8006498 <_printf_i+0x118>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	462a      	mov	r2, r5
 800654c:	4639      	mov	r1, r7
 800654e:	4630      	mov	r0, r6
 8006550:	47c0      	blx	r8
 8006552:	3001      	adds	r0, #1
 8006554:	d0aa      	beq.n	80064ac <_printf_i+0x12c>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	079b      	lsls	r3, r3, #30
 800655a:	d413      	bmi.n	8006584 <_printf_i+0x204>
 800655c:	68e0      	ldr	r0, [r4, #12]
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	4298      	cmp	r0, r3
 8006562:	bfb8      	it	lt
 8006564:	4618      	movlt	r0, r3
 8006566:	e7a3      	b.n	80064b0 <_printf_i+0x130>
 8006568:	2301      	movs	r3, #1
 800656a:	464a      	mov	r2, r9
 800656c:	4639      	mov	r1, r7
 800656e:	4630      	mov	r0, r6
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d09a      	beq.n	80064ac <_printf_i+0x12c>
 8006576:	3501      	adds	r5, #1
 8006578:	68e3      	ldr	r3, [r4, #12]
 800657a:	9a03      	ldr	r2, [sp, #12]
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	42ab      	cmp	r3, r5
 8006580:	dcf2      	bgt.n	8006568 <_printf_i+0x1e8>
 8006582:	e7eb      	b.n	800655c <_printf_i+0x1dc>
 8006584:	2500      	movs	r5, #0
 8006586:	f104 0919 	add.w	r9, r4, #25
 800658a:	e7f5      	b.n	8006578 <_printf_i+0x1f8>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ac      	bne.n	80064ea <_printf_i+0x16a>
 8006590:	7803      	ldrb	r3, [r0, #0]
 8006592:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800659a:	e76c      	b.n	8006476 <_printf_i+0xf6>
 800659c:	080069a1 	.word	0x080069a1
 80065a0:	080069b2 	.word	0x080069b2

080065a4 <memchr>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	b2c9      	uxtb	r1, r1
 80065a8:	4402      	add	r2, r0
 80065aa:	4290      	cmp	r0, r2
 80065ac:	4603      	mov	r3, r0
 80065ae:	d101      	bne.n	80065b4 <memchr+0x10>
 80065b0:	2300      	movs	r3, #0
 80065b2:	e003      	b.n	80065bc <memchr+0x18>
 80065b4:	781c      	ldrb	r4, [r3, #0]
 80065b6:	3001      	adds	r0, #1
 80065b8:	428c      	cmp	r4, r1
 80065ba:	d1f6      	bne.n	80065aa <memchr+0x6>
 80065bc:	4618      	mov	r0, r3
 80065be:	bd10      	pop	{r4, pc}

080065c0 <memcpy>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	1e43      	subs	r3, r0, #1
 80065c4:	440a      	add	r2, r1
 80065c6:	4291      	cmp	r1, r2
 80065c8:	d100      	bne.n	80065cc <memcpy+0xc>
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065d4:	e7f7      	b.n	80065c6 <memcpy+0x6>

080065d6 <memmove>:
 80065d6:	4288      	cmp	r0, r1
 80065d8:	b510      	push	{r4, lr}
 80065da:	eb01 0302 	add.w	r3, r1, r2
 80065de:	d807      	bhi.n	80065f0 <memmove+0x1a>
 80065e0:	1e42      	subs	r2, r0, #1
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d00a      	beq.n	80065fc <memmove+0x26>
 80065e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065ee:	e7f8      	b.n	80065e2 <memmove+0xc>
 80065f0:	4283      	cmp	r3, r0
 80065f2:	d9f5      	bls.n	80065e0 <memmove+0xa>
 80065f4:	1881      	adds	r1, r0, r2
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	42d3      	cmn	r3, r2
 80065fa:	d100      	bne.n	80065fe <memmove+0x28>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006602:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006606:	e7f7      	b.n	80065f8 <memmove+0x22>

08006608 <_free_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	2900      	cmp	r1, #0
 800660e:	d043      	beq.n	8006698 <_free_r+0x90>
 8006610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006614:	1f0c      	subs	r4, r1, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfb8      	it	lt
 800661a:	18e4      	addlt	r4, r4, r3
 800661c:	f000 f8d0 	bl	80067c0 <__malloc_lock>
 8006620:	4a1e      	ldr	r2, [pc, #120]	; (800669c <_free_r+0x94>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	4610      	mov	r0, r2
 8006626:	b933      	cbnz	r3, 8006636 <_free_r+0x2e>
 8006628:	6063      	str	r3, [r4, #4]
 800662a:	6014      	str	r4, [r2, #0]
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006632:	f000 b8c6 	b.w	80067c2 <__malloc_unlock>
 8006636:	42a3      	cmp	r3, r4
 8006638:	d90b      	bls.n	8006652 <_free_r+0x4a>
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	1862      	adds	r2, r4, r1
 800663e:	4293      	cmp	r3, r2
 8006640:	bf01      	itttt	eq
 8006642:	681a      	ldreq	r2, [r3, #0]
 8006644:	685b      	ldreq	r3, [r3, #4]
 8006646:	1852      	addeq	r2, r2, r1
 8006648:	6022      	streq	r2, [r4, #0]
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6004      	str	r4, [r0, #0]
 800664e:	e7ed      	b.n	800662c <_free_r+0x24>
 8006650:	4613      	mov	r3, r2
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	b10a      	cbz	r2, 800665a <_free_r+0x52>
 8006656:	42a2      	cmp	r2, r4
 8006658:	d9fa      	bls.n	8006650 <_free_r+0x48>
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	1858      	adds	r0, r3, r1
 800665e:	42a0      	cmp	r0, r4
 8006660:	d10b      	bne.n	800667a <_free_r+0x72>
 8006662:	6820      	ldr	r0, [r4, #0]
 8006664:	4401      	add	r1, r0
 8006666:	1858      	adds	r0, r3, r1
 8006668:	4282      	cmp	r2, r0
 800666a:	6019      	str	r1, [r3, #0]
 800666c:	d1de      	bne.n	800662c <_free_r+0x24>
 800666e:	6810      	ldr	r0, [r2, #0]
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	4401      	add	r1, r0
 8006674:	6019      	str	r1, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	e7d8      	b.n	800662c <_free_r+0x24>
 800667a:	d902      	bls.n	8006682 <_free_r+0x7a>
 800667c:	230c      	movs	r3, #12
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	e7d4      	b.n	800662c <_free_r+0x24>
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	1821      	adds	r1, r4, r0
 8006686:	428a      	cmp	r2, r1
 8006688:	bf01      	itttt	eq
 800668a:	6811      	ldreq	r1, [r2, #0]
 800668c:	6852      	ldreq	r2, [r2, #4]
 800668e:	1809      	addeq	r1, r1, r0
 8006690:	6021      	streq	r1, [r4, #0]
 8006692:	6062      	str	r2, [r4, #4]
 8006694:	605c      	str	r4, [r3, #4]
 8006696:	e7c9      	b.n	800662c <_free_r+0x24>
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	200000b4 	.word	0x200000b4

080066a0 <_malloc_r>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	1ccd      	adds	r5, r1, #3
 80066a4:	f025 0503 	bic.w	r5, r5, #3
 80066a8:	3508      	adds	r5, #8
 80066aa:	2d0c      	cmp	r5, #12
 80066ac:	bf38      	it	cc
 80066ae:	250c      	movcc	r5, #12
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	4606      	mov	r6, r0
 80066b4:	db01      	blt.n	80066ba <_malloc_r+0x1a>
 80066b6:	42a9      	cmp	r1, r5
 80066b8:	d903      	bls.n	80066c2 <_malloc_r+0x22>
 80066ba:	230c      	movs	r3, #12
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	2000      	movs	r0, #0
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	f000 f87d 	bl	80067c0 <__malloc_lock>
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <_malloc_r+0xac>)
 80066c8:	6814      	ldr	r4, [r2, #0]
 80066ca:	4621      	mov	r1, r4
 80066cc:	b991      	cbnz	r1, 80066f4 <_malloc_r+0x54>
 80066ce:	4c20      	ldr	r4, [pc, #128]	; (8006750 <_malloc_r+0xb0>)
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	b91b      	cbnz	r3, 80066dc <_malloc_r+0x3c>
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f863 	bl	80067a0 <_sbrk_r>
 80066da:	6020      	str	r0, [r4, #0]
 80066dc:	4629      	mov	r1, r5
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f85e 	bl	80067a0 <_sbrk_r>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d124      	bne.n	8006732 <_malloc_r+0x92>
 80066e8:	230c      	movs	r3, #12
 80066ea:	4630      	mov	r0, r6
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	f000 f868 	bl	80067c2 <__malloc_unlock>
 80066f2:	e7e4      	b.n	80066be <_malloc_r+0x1e>
 80066f4:	680b      	ldr	r3, [r1, #0]
 80066f6:	1b5b      	subs	r3, r3, r5
 80066f8:	d418      	bmi.n	800672c <_malloc_r+0x8c>
 80066fa:	2b0b      	cmp	r3, #11
 80066fc:	d90f      	bls.n	800671e <_malloc_r+0x7e>
 80066fe:	600b      	str	r3, [r1, #0]
 8006700:	18cc      	adds	r4, r1, r3
 8006702:	50cd      	str	r5, [r1, r3]
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f85c 	bl	80067c2 <__malloc_unlock>
 800670a:	f104 000b 	add.w	r0, r4, #11
 800670e:	1d23      	adds	r3, r4, #4
 8006710:	f020 0007 	bic.w	r0, r0, #7
 8006714:	1ac3      	subs	r3, r0, r3
 8006716:	d0d3      	beq.n	80066c0 <_malloc_r+0x20>
 8006718:	425a      	negs	r2, r3
 800671a:	50e2      	str	r2, [r4, r3]
 800671c:	e7d0      	b.n	80066c0 <_malloc_r+0x20>
 800671e:	684b      	ldr	r3, [r1, #4]
 8006720:	428c      	cmp	r4, r1
 8006722:	bf16      	itet	ne
 8006724:	6063      	strne	r3, [r4, #4]
 8006726:	6013      	streq	r3, [r2, #0]
 8006728:	460c      	movne	r4, r1
 800672a:	e7eb      	b.n	8006704 <_malloc_r+0x64>
 800672c:	460c      	mov	r4, r1
 800672e:	6849      	ldr	r1, [r1, #4]
 8006730:	e7cc      	b.n	80066cc <_malloc_r+0x2c>
 8006732:	1cc4      	adds	r4, r0, #3
 8006734:	f024 0403 	bic.w	r4, r4, #3
 8006738:	42a0      	cmp	r0, r4
 800673a:	d005      	beq.n	8006748 <_malloc_r+0xa8>
 800673c:	1a21      	subs	r1, r4, r0
 800673e:	4630      	mov	r0, r6
 8006740:	f000 f82e 	bl	80067a0 <_sbrk_r>
 8006744:	3001      	adds	r0, #1
 8006746:	d0cf      	beq.n	80066e8 <_malloc_r+0x48>
 8006748:	6025      	str	r5, [r4, #0]
 800674a:	e7db      	b.n	8006704 <_malloc_r+0x64>
 800674c:	200000b4 	.word	0x200000b4
 8006750:	200000b8 	.word	0x200000b8

08006754 <_realloc_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	4607      	mov	r7, r0
 8006758:	4614      	mov	r4, r2
 800675a:	460e      	mov	r6, r1
 800675c:	b921      	cbnz	r1, 8006768 <_realloc_r+0x14>
 800675e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006762:	4611      	mov	r1, r2
 8006764:	f7ff bf9c 	b.w	80066a0 <_malloc_r>
 8006768:	b922      	cbnz	r2, 8006774 <_realloc_r+0x20>
 800676a:	f7ff ff4d 	bl	8006608 <_free_r>
 800676e:	4625      	mov	r5, r4
 8006770:	4628      	mov	r0, r5
 8006772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006774:	f000 f826 	bl	80067c4 <_malloc_usable_size_r>
 8006778:	42a0      	cmp	r0, r4
 800677a:	d20f      	bcs.n	800679c <_realloc_r+0x48>
 800677c:	4621      	mov	r1, r4
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff ff8e 	bl	80066a0 <_malloc_r>
 8006784:	4605      	mov	r5, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d0f2      	beq.n	8006770 <_realloc_r+0x1c>
 800678a:	4631      	mov	r1, r6
 800678c:	4622      	mov	r2, r4
 800678e:	f7ff ff17 	bl	80065c0 <memcpy>
 8006792:	4631      	mov	r1, r6
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff ff37 	bl	8006608 <_free_r>
 800679a:	e7e9      	b.n	8006770 <_realloc_r+0x1c>
 800679c:	4635      	mov	r5, r6
 800679e:	e7e7      	b.n	8006770 <_realloc_r+0x1c>

080067a0 <_sbrk_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	2300      	movs	r3, #0
 80067a4:	4c05      	ldr	r4, [pc, #20]	; (80067bc <_sbrk_r+0x1c>)
 80067a6:	4605      	mov	r5, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	f7fb fe02 	bl	80023b4 <_sbrk>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_sbrk_r+0x1a>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_sbrk_r+0x1a>
 80067b8:	602b      	str	r3, [r5, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	20000440 	.word	0x20000440

080067c0 <__malloc_lock>:
 80067c0:	4770      	bx	lr

080067c2 <__malloc_unlock>:
 80067c2:	4770      	bx	lr

080067c4 <_malloc_usable_size_r>:
 80067c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c8:	1f18      	subs	r0, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bfbc      	itt	lt
 80067ce:	580b      	ldrlt	r3, [r1, r0]
 80067d0:	18c0      	addlt	r0, r0, r3
 80067d2:	4770      	bx	lr

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
